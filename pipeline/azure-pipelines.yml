variables:
- group: sonarsource-build-variables
- name: BuildParameters.solution
  value: SonarLint.VisualStudio.Integration.sln

name: $(Build.BuildId)

trigger:
  branches:
    include:
    - master
    - branch-*
  batch: True

jobs:
- job: Phase_1
  strategy:
    maxParallel: 2
    matrix:
      2019:
        vsTargetVersion: 2019
      2022:
        vsTargetVersion: 2022
  displayName: "Build:"
  cancelTimeoutInMinutes: 1
  pool:
    vmImage: windows-2022

  steps:
  - checkout: self
    submodules: recursive
    fetchTags: false
    persistCredentials: True

  - task: PowerShell@2
    displayName: Calculate if should sign Vsix
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\should-sign-vsix.ps1

  - task: NuGetToolInstaller@0
    displayName: Use NuGet 6.3.x
    inputs:
      versionSpec: 6.3.x

  - task: NuGetCommand@2
    displayName: NuGet restore with LockedMode check (VS2022 only)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      command: custom
      solution: $(BuildParameters.solution)
      feedRestore: 399fb241-ecc7-4802-8697-dcdd01fbb832/423b576f-2263-43a1-93bd-69f4def19102
      includeNuGetOrg: false
      nugetConfigPath: nuget.config
      arguments: restore -LockedMode -Verbosity detailed

  - task: NuGetCommand@2
    displayName: NuGet restore without LockedMode check (VS2019)
    condition: and(succeeded(), ne(variables['vsTargetVersion'], '2022'))
    inputs:
      solution: $(BuildParameters.solution)
      selectOrConfig: config

  - task: PowerShell@2
    displayName: 'Read Sonar project version from the versions.props file '
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\read-versions.props.ps1

  - task: PowerShell@2
    displayName: Locate signtool.exe
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\locate-signtool.ps1

  - task: PowerShell@2
    displayName: (VS2022 only) Set VsixVersion as a build property for the release pipeline to use
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\set-vsix-version.ps1

  - task: PowerShell@2
    displayName: (VS2022 only) Sanity check - fetch VsixVersion build property
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\fetch-vsix-version.ps1

  - task: VSBuild@1
    displayName: Set BranchName, Sha1 and BuildNumber properties from Azdo pipeline variables
    inputs:
      solution: build/ChangeVersion.proj
      msbuildArgs: /p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId)  /p:BuildConfiguration=$(BuildConfiguration)

  - task: DownloadSecureFile@1
    name: snk
    displayName: Download snk file
    inputs:
      secureFile: SonarSourceSecret.snk
      retryCount: 5

  - task: DownloadSecureFile@1
    name: pfx
    displayName: Download pfx file
    inputs:
      secureFile: SonarSource-2021-2023.pfx
      retryCount: 5

  - task: SonarCloudPrepare@1
    displayName: Prepare analysis on SonarCloud (VS2022 only)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      SonarCloud: SonarCloud
      organization: sonarsource
      projectKey: sonarlint-visualstudio
      projectName: SonarLint for Visual Studio
      projectVersion: $(SONAR_PROJECT_VERSION)

  - task: VSBuild@1
    displayName: Build solution SonarLint.VisualStudio.Integration.sln
    inputs:
      solution: $(BuildParameters.solution)
      vsVersion: 17.0
      msbuildArgs: /p:VsTargetVersion=$(vsTargetVersion) /p:DeployExtension=false /p:SignArtifacts=$(SHOULD_SIGN) /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:pfxCertificatePath="$(pfx.secureFilePath)" /p:pfxPassword="$(pfxPassword2021-2023)" /p:pfxSha1=$(pfxSha1-2021-2023) /p:Sha1=$(Build.SourceVersion) /p:BuildNumber=$(Build.BuildId)  $(AdditionalMSBuildArgs)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      maximumCpuCount: true
      logFileVerbosity: diagnostic

  - task: UniversalPackages@0
    displayName: Download WhiteSource agent
    condition: and(succeeded(), or(eq(variables['ForceWhiteSourceScan'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
    inputs:
      downloadDirectory: $(System.DefaultWorkingDirectory)\Whitesource
      feedListDownload: 399fb241-ecc7-4802-8697-dcdd01fbb832/69e11f1b-cad7-442a-b676-37722e207221
      packageListDownload: agent
      versionListDownload: '*'

  - task: PowerShell@2
    displayName: Run WhiteSource (Mend) scan
    condition: and(succeeded(), or(eq(variables['ForceWhiteSourceScan'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
    env:
      WS_APIKEY: $(MEND_APIKEY)
    inputs:
      targetType: inline
      script: java -jar  "${env:SYSTEM_DEFAULTWORKINGDIRECTORY}\Whitesource\wss-unified-agent.jar" -c "${env:BUILD_SOURCESDIRECTORY}\build\whitesource\wss-unified-agent.config" -product "SonarLint/VisualStudio"  -project "SonarSource/sonarlint-visualstudio VS$(vsTargetVersion) ${env:SONAR_PROJECT_VERSION}" -projectversion ${env:SONAR_PROJECT_VERSION}  -scanComment "buildNumber:${env:BUILD_BUILDID};gitSha:${env:BUILD_SOURCEVERSION}" -offline false


### SBOM generation start ###
  - task: DotNetCoreCLI@2
    displayName: Install cycloneDX tool
    condition: and(succeeded(), or(eq(variables['ForceSbomGeneration'], 'true'), eq(variables['Build.SourceBranch'], 'master')))
    inputs:
      command: custom
      custom: tool
      arguments: install --global CycloneDX

  - task: DotNetCoreCLI@2
    displayName: Generate cycloneDX sbom file
    condition: and(succeeded(), or(eq(variables['ForceSbomGeneration'], 'true'), eq(variables['Build.SourceBranch'], 'master')))
    inputs:
      command: custom
      projects: SonarLint.VisualStudio.Integration.sln
      custom: CycloneDX
      arguments: -t -j -o binaries

  - task: DownloadSecureFile@1
    name: signKey
    displayName: Download sign key
    condition: and(succeeded(), or(eq(variables['ForceSbomGeneration'], 'true'), eq(variables['Build.SourceBranch'], 'master')))
    inputs:
      secureFile: sign-key.asc

  - task: PowerShell@2
    displayName: Rename and sign SBOM file
    condition: and(succeeded(), or(eq(variables['ForceSbomGeneration'], 'true'), eq(variables['Build.SourceBranch'], 'master')))
    env:
      PGP_PASSPHRASE: $(PGP_PASSPHRASE)
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\sbom.ps1
### SBOM generation end ###


  - task: CopyFiles@2
    displayName: 'Copy VSIX to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: $(Build.SourcesDirectory)\binaries
      Contents: |
        **\*.vsix
        **\SonarLint.visualstudio.sbom*.*
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: CopyFiles@2
    displayName: 'Copy any MSBuild binary logs to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      Contents: '**\*.binlog'
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: CopyFiles@2
    displayName: 'Copy marketplace files to:  $(Build.ArtifactStagingDirectory) (VS2022 only)'
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      SourceFolder: $(Build.SourcesDirectory)\MarketPlaceFiles\VS2022
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: CopyFiles@2
    displayName: 'Copy marketplace files to:  $(Build.ArtifactStagingDirectory) (VS2019 only)'
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2019'))
    inputs:
      SourceFolder: $(Build.SourcesDirectory)\MarketPlaceFiles\VS2019
      TargetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: vsix'
    inputs:
      ArtifactName: vsix

  - task: VSTest@2
    displayName: VsTest - testAssemblies
    inputs:
      testAssemblyVer2: |
        **\$(BuildConfiguration)\**\*test*.dll
        !**\obj\**
      runInParallel: false
      runTestsInIsolation: false
      codeCoverageEnabled: true
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      rerunFailedTests: false

  - task: SonarCloudAnalyze@1
    displayName: Run Code Analysis (VS2022 only)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))

  - task: SonarCloudPublish@1
    displayName: Publish Quality Gate Result (VS2022 only)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))

  - task: PowerShell@2
    displayName: Set trigger dogfood VSIX build tag (VS2022 only)
    condition: and(succeeded(), eq(variables['vsTargetVersion'], '2022'))
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\pipeline\scripts\trigger-dogfood.ps1
...
