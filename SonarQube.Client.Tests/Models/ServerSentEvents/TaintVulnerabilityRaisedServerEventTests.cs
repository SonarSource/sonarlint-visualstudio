/*
 * SonarQube Client
 * Copyright (C) 2016-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using FluentAssertions;
using Moq;
using Newtonsoft.Json;
using SonarQube.Client.Models;
using SonarQube.Client.Models.ServerSentEvents.ClientContract;

namespace SonarQube.Client.Tests.Models.ServerSentEvents
{
    [TestClass]
    public class TaintVulnerabilityRaisedServerEventTests
    {
        [TestMethod]
        public void Ctor_InvalidProjectKey_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent(null, "id1", "main", Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("projectKey");
        }

        [TestMethod]
        public void Ctor_InvalidKey_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", null, "main", Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("key");
        }

        [TestMethod]
        public void Ctor_InvalidBranch_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", "id1", null, Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("branch");
        }

        [TestMethod]
        public void Ctor_InvalidIssue_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", "id1", "branch", null); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("issue");
        }

        [TestMethod]
        public void Deserialize_ServerEventDeserializedCorrectly()
        {
            const string serializedTaintVulnerabilityRaisedEvent = @"{
	""key"": ""taintKey"",
	""projectKey"": ""projectKey1"",
	""branch"": ""master"",
	""creationDate"": 123456789,
	""ruleKey"": ""javasecurity:S123"",
	""severity"": ""MAJOR"",
	""type"": ""VULNERABILITY"",
	""mainLocation"": {
		""filePath"": ""functions/taint.js"",
		""message"": ""blah blah"",
		""textRange"": {
			""startLine"": 17,
			""startLineOffset"": 10,
			""endLine"": 3,
			""endLineOffset"": 2,
			""hash"": ""hash""
		}
	},
	""flows"": [
		{
			""locations"": [
				{
					""filePath"": ""functions/taint.js"",
					""message"": ""sink: tainted value is used to perform a security-sensitive operation"",
					""textRange"": {
						""startLine"": 15,
						""startLineOffset"": 14,
						""endLine"": 6,
						""endLineOffset"": 7,
						""hash"": ""hash1""
					}
				},
				{
					""filePath"": ""functions/taint2.js"",
					""message"": ""sink: tainted value is used to perform a security-sensitive operation"",
					""textRange"": {
						""startLine"": 18,
						""startLineOffset"": 11,
						""endLine"": 4,
						""endLineOffset"": 3,
						""hash"": ""hash2""
					}
				}
			]
		}
	]
}";

            var expectedDeserializedEvent = new TaintVulnerabilityRaisedServerEvent(

                projectKey: "projectKey1",
                key: "taintKey",
                branch: "master",
                issue: new TaintIssue(
                    key: "taintKey",
                    ruleKey: "javasecurity:S123",
                    severity: SonarQubeIssueSeverity.Major,
                    type: SonarQubeIssueType.Vulnerability,
                    flows: new[]
                    {
                        new Flow(locations: new[]
                        {
                            new Location(
                                message: "sink: tainted value is used to perform a security-sensitive operation",
                                filePath: "functions/taint.js",
                                textRange: new TextRange(
                                    startLine: 15,
                                    startLineOffset: 14,
                                    endLine: 6,
                                    endLineOffset: 7,
                                    hash: "hash1")),
                            new Location(
                                message: "sink: tainted value is used to perform a security-sensitive operation",
                                filePath: "functions/taint2.js",
                                textRange: new TextRange(
                                    startLine: 18,
                                    startLineOffset: 11,
                                    endLine: 4,
                                    endLineOffset: 3,
                                    hash: "hash2"))
                        })
                    },
                    mainLocation: new Location(
                        message: "blah blah",
                        filePath: "functions/taint.js",
                        textRange: new TextRange(
                            startLine: 17,
                            startLineOffset: 10,
                            endLine: 3,
                            endLineOffset: 2,
                            hash: "hash"))
                ));

            var result = JsonConvert.DeserializeObject<TaintVulnerabilityRaisedServerEvent>(serializedTaintVulnerabilityRaisedEvent);

            result.Should().BeEquivalentTo(expectedDeserializedEvent);
        }
    }
}
