[
  {
    "key": "csharpsquid:S3060",
    "name": "\"is\" should not be used with \"this\"",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOne of the possible ways of performing \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003etype-testing\u003c/a\u003e is via the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/is\"\u003eis operator\u003c/a\u003e: \u003ccode\u003efood is Pizza\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eis\u003c/code\u003e operator is often used before a direct \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression\"\u003ecast\u003c/a\u003e to the target type,\nas a more flexible and powerful alternative to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003eas operator\u003c/a\u003e, especially when\nused to perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#type-testing-with-pattern-matching\"\u003epattern\nmatching\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (food is Pizza pizza)\n\u003c/pre\u003e\n\u003cp\u003eThere’s no valid reason to test \u003ccode\u003ethis\u003c/code\u003e with \u003ccode\u003eis\u003c/code\u003e. The only plausible explanation for such a test is that you’re executing\ncode in a parent class conditionally based on the kind of child class \u003ccode\u003ethis\u003c/code\u003e is.\u003c/p\u003e\n\u003cpre\u003e\npublic class Food\n{\n  public void DoSomething()\n  {\n    if (this is Pizza) // Noncompliant\n    {\n      // Code specific to Pizza...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, code that’s specific to a child class should be \u003cem\u003ein\u003c/em\u003e that child class, not in the parent.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eOne way is to take advantage of the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop\"\u003eobject-orientation\u003c/a\u003e of\nC# and use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism\"\u003epolymorphism\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Make the method \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual\"\u003evirtual\u003c/a\u003e, if it is not\n  already. That will allow derived classes to perform \u003ca href\u003d\"https://en.wikipedia.org/wiki/Method_overriding\"\u003emethod overriding\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Move the code to the right level of the type hierarchy. \u003c/li\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/base\"\u003ebase\u003c/a\u003e to call the method on the base class\n  that has been overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, when simple method polymorphism is not enough because it is necessary to reuse multiple sections of the parent method, the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Template_method_pattern\"\u003eTemplate method pattern\u003c/a\u003e might help.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Food\n{\n  public void DoSomething()\n  {\n    // Code shared by all Food...\n    if (this is Pizza) // Noncompliant\n    {\n      // Code specific to Pizza...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Food\n{\n  public virtual void DoSomething()\n  {\n    // Code shared by all Food...\n  }\n}\n\npublic class Pizza : Food\n{\n  public override void DoSomething()\n  {\n    base.DoSomething();\n    // Code specific to Pizza...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003eType-testing operators and cast\n  expressions - is, as, typeof and casts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching\"\u003ePattern matching overview\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop\"\u003eObject-Oriented programming (C#)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism\"\u003ePolymorphism\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Template_method_pattern\"\u003eTemplate method pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Method_overriding\"\u003eMethod overriding\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOne of the possible ways of performing \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003etype-testing\u003c/a\u003e is via the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/is\"\u003eis operator\u003c/a\u003e: \u003ccode\u003efood is Pizza\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eis\u003c/code\u003e operator is often used before a direct \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression\"\u003ecast\u003c/a\u003e to the target type,\nas a more flexible and powerful alternative to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003eas operator\u003c/a\u003e, especially when\nused to perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#type-testing-with-pattern-matching\"\u003epattern\nmatching\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (food is Pizza pizza)\n\u003c/pre\u003e\n\u003cp\u003eThere’s no valid reason to test \u003ccode\u003ethis\u003c/code\u003e with \u003ccode\u003eis\u003c/code\u003e. The only plausible explanation for such a test is that you’re executing\ncode in a parent class conditionally based on the kind of child class \u003ccode\u003ethis\u003c/code\u003e is.\u003c/p\u003e\n\u003cpre\u003e\npublic class Food\n{\n  public void DoSomething()\n  {\n    if (this is Pizza) // Noncompliant\n    {\n      // Code specific to Pizza...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, code that’s specific to a child class should be \u003cem\u003ein\u003c/em\u003e that child class, not in the parent.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eOne way is to take advantage of the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop\"\u003eobject-orientation\u003c/a\u003e of\nC# and use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism\"\u003epolymorphism\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Make the method \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual\"\u003evirtual\u003c/a\u003e, if it is not\n  already. That will allow derived classes to perform \u003ca href\u003d\"https://en.wikipedia.org/wiki/Method_overriding\"\u003emethod overriding\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Move the code to the right level of the type hierarchy. \u003c/li\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/base\"\u003ebase\u003c/a\u003e to call the method on the base class\n  that has been overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, when simple method polymorphism is not enough because it is necessary to reuse multiple sections of the parent method, the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Template_method_pattern\"\u003eTemplate method pattern\u003c/a\u003e might help.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Food\n{\n  public void DoSomething()\n  {\n    // Code shared by all Food...\n    if (this is Pizza) // Noncompliant\n    {\n      // Code specific to Pizza...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Food\n{\n  public virtual void DoSomething()\n  {\n    // Code shared by all Food...\n  }\n}\n\npublic class Pizza : Food\n{\n  public override void DoSomething()\n  {\n    base.DoSomething();\n    // Code specific to Pizza...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003eType-testing operators and cast\n  expressions - is, as, typeof and casts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/pattern-matching\"\u003ePattern matching overview\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/oop\"\u003eObject-Oriented programming (C#)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism\"\u003ePolymorphism\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Template_method_pattern\"\u003eTemplate method pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Method_overriding\"\u003eMethod overriding\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design",
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2092",
    "name": "Creating cookies without the \"secure\" flag is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a cookie is protected with the \u003ccode\u003esecure\u003c/code\u003e attribute set to \u003cem\u003etrue\u003c/em\u003e it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the cookie is for instance a \u003cem\u003esession-cookie\u003c/em\u003e not designed to be sent over non-HTTPS communication. \u003c/li\u003e\n  \u003cli\u003e it’s not sure that the website contains \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\"\u003emixed content\u003c/a\u003e or not\n  (ie HTTPS everywhere or not) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWhen the \u003ccode\u003eHttpCookie.Secure\u003c/code\u003e property is set to \u003ccode\u003efalse\u003c/code\u003e then the cookie will be send during an unencrypted HTTP request:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\nmyCookie.Secure \u003d false; //  Sensitive: a security-sensitive cookie is created with the secure flag set to false\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcookie.secure?view\u003dnetframework-4.8\"\u003edefault value\u003c/a\u003e of\n\u003ccode\u003eSecure\u003c/code\u003e flag is \u003ccode\u003efalse\u003c/code\u003e, unless overwritten by an application’s configuration file:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\n//  Sensitive: a security-sensitive cookie is created with the secure flag not defined (by default set to false)\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e It is recommended to use \u003ccode\u003eHTTPs\u003c/code\u003e everywhere so setting the \u003ccode\u003esecure\u003c/code\u003e flag to \u003cem\u003etrue\u003c/em\u003e should be the default behaviour\n  when creating cookies. \u003c/li\u003e\n  \u003cli\u003e Set the \u003ccode\u003esecure\u003c/code\u003e flag to \u003cem\u003etrue\u003c/em\u003e for session-cookies. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eSet the \u003ccode\u003eHttpCookie.Secure\u003c/code\u003e property to \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\nmyCookie.Secure \u003d true; // Compliant\n\u003c/pre\u003e\n\u003cp\u003eOr change the default flag values for the whole application by editing the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v\u003dvs.100)\"\u003eWeb.config configuration file\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;httpCookies httpOnlyCookies\u003d\"true\" requireSSL\u003d\"true\" /\u0026gt;\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the \u003ccode\u003erequireSSL\u003c/code\u003e attribute corresponds programmatically to the \u003ccode\u003eSecure\u003c/code\u003e field. \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003ehttpOnlyCookies\u003c/code\u003e attribute corresponds programmatically to the \u003ccode\u003ehttpOnly\u003c/code\u003e field. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eTop 10 2021 Category A4 - Insecure Design\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eCWE-311 - Missing Encryption of Sensitive Data\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315\"\u003eCWE-315 - Cleartext Storage of Sensitive Information in a Cookie\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/614\"\u003eCWE-614 - Sensitive Cookie in HTTPS Session Without \u0027Secure\u0027 Attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S3063",
    "name": "\"StringBuilder\" data should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e instances that never build a \u003ccode\u003estring\u003c/code\u003e clutter the code and worse are a drag on performance. Either they\nshould be removed, or the missing \u003ccode\u003eToString()\u003c/code\u003e call should be added.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  var sb \u003d new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  var sb \u003d new StringBuilder();\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n  logger.LogInformation(sb.ToString());\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003eStringBuilder\u003c/code\u003e is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessed through \u003ccode\u003esb.CopyTo()\u003c/code\u003e, \u003ccode\u003esb.GetChunks()\u003c/code\u003e, \u003ccode\u003esb.Length\u003c/code\u003e, or \u003ccode\u003esb[index]\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Passed as a method argument, on the grounds that it will likely be accessed through a \u003ccode\u003eToString()\u003c/code\u003e invocation there. \u003c/li\u003e\n  \u003cli\u003e Passed in as a parameter to the current method, on the grounds that the callee will materialize the string. \u003c/li\u003e\n  \u003cli\u003e Retrieved by a custom function (\u003ccode\u003evar sb \u003d GetStringBuilder();\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Returned by the method. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e instances that never build a \u003ccode\u003estring\u003c/code\u003e clutter the code and worse are a drag on performance. Either they\nshould be removed, or the missing \u003ccode\u003eToString()\u003c/code\u003e call should be added.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  var sb \u003d new StringBuilder();  // Noncompliant\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  foreach(var str in strings) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic void DoSomething(List\u0026lt;string\u0026gt; strings) {\n  var sb \u003d new StringBuilder();\n  sb.Append(\"Got: \");\n  foreach(var str in strings) {\n    sb.Append(str).Append(\", \");\n    // ...\n  }\n  logger.LogInformation(sb.ToString());\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003eStringBuilder\u003c/code\u003e is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessed through \u003ccode\u003esb.CopyTo()\u003c/code\u003e, \u003ccode\u003esb.GetChunks()\u003c/code\u003e, \u003ccode\u003esb.Length\u003c/code\u003e, or \u003ccode\u003esb[index]\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Passed as a method argument, on the grounds that it will likely be accessed through a \u003ccode\u003eToString()\u003c/code\u003e invocation there. \u003c/li\u003e\n  \u003cli\u003e Passed in as a parameter to the current method, on the grounds that the callee will materialize the string. \u003c/li\u003e\n  \u003cli\u003e Retrieved by a custom function (\u003ccode\u003evar sb \u003d GetStringBuilder();\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Returned by the method. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2094",
    "name": "Classes should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Empty // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IEmpty\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003ePartial classes are ignored entirely, as they are often used with Source Generators. Subclasses of System.Exception are ignored, as even an empty\nException class can provide useful information by its type name alone. Subclasses of System.Attribute are ignored, as well as classes which are\nannotated with attributes. Subclasses of generic classes are ignored, as even when empty they can be used for type specialization. Subclasses of\ncertain framework types - like the PageModel class used in ASP.NET Core Razor Pages - are also ignored.\u003c/p\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\npublic class EmptyPageModel: PageModel // Compliant - an empty PageModel can be fully functional, the C# code can be in the cshtml file\n{\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Empty // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IEmpty\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003ePartial classes are ignored entirely, as they are often used with Source Generators. Subclasses of System.Exception are ignored, as even an empty\nException class can provide useful information by its type name alone. Subclasses of System.Attribute are ignored, as well as classes which are\nannotated with attributes. Subclasses of generic classes are ignored, as even when empty they can be used for type specialization. Subclasses of\ncertain framework types - like the PageModel class used in ASP.NET Core Razor Pages - are also ignored.\u003c/p\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Mvc.RazorPages;\n\npublic class EmptyPageModel: PageModel // Compliant - an empty PageModel can be fully functional, the C# code can be in the cshtml file\n{\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5122",
    "name": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-0269\"\u003eCVE-2018-0269\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-14460\"\u003eCVE-2017-14460\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003eSame origin policy\u003c/a\u003e in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e You don’t trust the origin specified, example: \u003ccode\u003eAccess-Control-Allow-Origin: untrustedwebsite.com\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Access control policy is entirely disabled: \u003ccode\u003eAccess-Control-Allow-Origin: *\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Your access control policy is dynamically defined by a user-controlled input like \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003c/a\u003e header. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eASP.NET Core MVC:\u003c/p\u003e\n\u003cpre\u003e\n[HttpGet]\npublic string Get()\n{\n    Response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\"); // Sensitive\n    Response.Headers.Add(HeaderNames.AccessControlAllowOrigin, \"*\"); // Sensitive\n}\n\u003c/pre\u003e\n\u003cpre\u003e\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options \u003d\u0026gt;\n    {\n        options.AddDefaultPolicy(builder \u003d\u0026gt;\n        {\n            builder.WithOrigins(\"*\"); // Sensitive\n        });\n\n        options.AddPolicy(name: \"EnableAllPolicy\", builder \u003d\u0026gt;\n        {\n            builder.WithOrigins(\"*\"); // Sensitive\n        });\n\n        options.AddPolicy(name: \"OtherPolicy\", builder \u003d\u0026gt;\n        {\n            builder.AllowAnyOrigin(); // Sensitive\n        });\n    });\n\n    services.AddControllers();\n}\n\u003c/pre\u003e\n\u003cp\u003eASP.NET MVC:\u003c/p\u003e\n\u003cpre\u003e\npublic class HomeController : ApiController\n{\n    public HttpResponseMessage Get()\n    {\n        var response \u003d HttpContext.Current.Response;\n\n        response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\"); // Sensitive\n        response.Headers.Add(HeaderNames.AccessControlAllowOrigin, \"*\"); // Sensitive\n        response.AppendHeader(HeaderNames.AccessControlAllowOrigin, \"*\"); // Sensitive\n    }\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[EnableCors(origins: \"*\", headers: \"*\", methods: \"GET\")] // Sensitive\npublic HttpResponseMessage Get() \u003d\u0026gt; new HttpResponseMessage()\n{\n    Content \u003d new StringContent(\"content\")\n};\n\u003c/pre\u003e\n\u003cp\u003eUser-controlled origin:\u003c/p\u003e\n\u003cpre\u003e\nString origin \u003d Request.Headers[\"Origin\"];\nResponse.Headers.Add(\"Access-Control-Allow-Origin\", origin); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eAccess-Control-Allow-Origin\u003c/code\u003e header should be set only for a trusted origin and for specific resources. \u003c/li\u003e\n  \u003cli\u003e Allow only selected, trusted domains in the \u003ccode\u003eAccess-Control-Allow-Origin\u003c/code\u003e header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the \u003ccode\u003eOrigin\u003c/code\u003e header content without any checks). \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eASP.NET Core MVC:\u003c/p\u003e\n\u003cpre\u003e\n[HttpGet]\npublic string Get()\n{\n    Response.Headers.Add(\"Access-Control-Allow-Origin\", \"https://trustedwebsite.com\"); // Safe\n    Response.Headers.Add(HeaderNames.AccessControlAllowOrigin, \"https://trustedwebsite.com\"); // Safe\n}\n\u003c/pre\u003e\n\u003cpre\u003e\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddCors(options \u003d\u0026gt;\n    {\n        options.AddDefaultPolicy(builder \u003d\u0026gt;\n        {\n            builder.WithOrigins(\"https://trustedwebsite.com\", \"https://anothertrustedwebsite.com\"); // Safe\n        });\n\n        options.AddPolicy(name: \"EnableAllPolicy\", builder \u003d\u0026gt;\n        {\n            builder.WithOrigins(\"https://trustedwebsite.com\"); // Safe\n        });\n    });\n\n    services.AddControllers();\n}\n\u003c/pre\u003e\n\u003cp\u003eASP.Net MVC:\u003c/p\u003e\n\u003cpre\u003e\npublic class HomeController : ApiController\n{\n    public HttpResponseMessage Get()\n    {\n        var response \u003d HttpContext.Current.Response;\n\n        response.Headers.Add(\"Access-Control-Allow-Origin\", \"https://trustedwebsite.com\");\n        response.Headers.Add(HeaderNames.AccessControlAllowOrigin, \"https://trustedwebsite.com\");\n        response.AppendHeader(HeaderNames.AccessControlAllowOrigin, \"https://trustedwebsite.com\");\n    }\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[EnableCors(origins: \"https://trustedwebsite.com\", headers: \"*\", methods: \"GET\")]\npublic HttpResponseMessage Get() \u003d\u0026gt; new HttpResponseMessage()\n{\n    Content \u003d new StringContent(\"content\")\n};\n\u003c/pre\u003e\n\u003cp\u003eUser-controlled origin validated with an allow-list:\u003c/p\u003e\n\u003cpre\u003e\nString origin \u003d Request.Headers[\"Origin\"];\n\nif (trustedOrigins.Contains(origin))\n{\n    Response.Headers.Add(\"Access-Control-Allow-Origin\", origin);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003edeveloper.mozilla.org\u003c/a\u003e - CORS \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003edeveloper.mozilla.org\u003c/a\u003e - Same origin policy \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"\u003eOWASP HTML5 Security\n  Cheat Sheet\u003c/a\u003e - Cross Origin Resource Sharing \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/346\"\u003eCWE-346 - Origin Validation Error\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/942\"\u003eCWE-942 - Overly Permissive Cross-domain Whitelist\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S4275",
    "name": "Getters and setters should access the expected fields",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties provide a way to enforce \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eencapsulation\u003c/a\u003e by providing\naccessors that give controlled access to \u003ccode\u003eprivate\u003c/code\u003e fields. However, in classes with multiple fields, it is not unusual that \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Copy-and-paste_programming\"\u003ecopy-and-paste\u003c/a\u003e is used to quickly create the needed properties, which can result\nin the wrong field being accessed by a getter or setter.\u003c/p\u003e\n\u003cpre\u003e\nclass C\n{\n    private int x;\n    private int y;\n    public int Y \u003d\u0026gt; x; // Noncompliant: The returned field should be \u0027y\u0027\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue in any of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A getter does not access the field with the corresponding name. \u003c/li\u003e\n  \u003cli\u003e A setter does not update the field with the corresponding name. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor simple properties, it is better to use \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\"\u003eauto-implemented\nproperties\u003c/a\u003e (C# 3.0 or later).\u003c/p\u003e\n\u003cp\u003eField and property names are compared as case-insensitive. All underscore characters are ignored.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x \u003d value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field \u0027y\u0027 is not used in the return value\n        set { x \u003d value; } // Noncompliant: field \u0027y\u0027 is not updated\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x \u003d value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y \u003d value; }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties (C#\n  Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties provide a way to enforce \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eencapsulation\u003c/a\u003e by providing\naccessors that give controlled access to \u003ccode\u003eprivate\u003c/code\u003e fields. However, in classes with multiple fields, it is not unusual that \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Copy-and-paste_programming\"\u003ecopy-and-paste\u003c/a\u003e is used to quickly create the needed properties, which can result\nin the wrong field being accessed by a getter or setter.\u003c/p\u003e\n\u003cpre\u003e\nclass C\n{\n    private int x;\n    private int y;\n    public int Y \u003d\u0026gt; x; // Noncompliant: The returned field should be \u0027y\u0027\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue in any of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A getter does not access the field with the corresponding name. \u003c/li\u003e\n  \u003cli\u003e A setter does not update the field with the corresponding name. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor simple properties, it is better to use \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\"\u003eauto-implemented\nproperties\u003c/a\u003e (C# 3.0 or later).\u003c/p\u003e\n\u003cp\u003eField and property names are compared as case-insensitive. All underscore characters are ignored.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x \u003d value; }\n    }\n\n    public int Y\n    {\n        get { return x; }  // Noncompliant: field \u0027y\u0027 is not used in the return value\n        set { x \u003d value; } // Noncompliant: field \u0027y\u0027 is not updated\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass A\n{\n    private int x;\n    private int y;\n\n    public int X\n    {\n        get { return x; }\n        set { x \u003d value; }\n    }\n\n    public int Y\n    {\n        get { return y; }\n        set { y \u003d value; }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties (C#\n  Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4035",
    "name": "Classes implementing \"IEquatable\u003cT\u003e\" should be sealed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a class implements the \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e interface, it enters a contract that, in effect, states \"I know how to compare two\ninstances of type T or any type derived from T for equality.\". However if that class is derived, it is very unlikely that the base class will know how\nto make a meaningful comparison. Therefore that implicit contract is now broken.\u003c/p\u003e\n\u003cp\u003eAlternatively \u003ccode\u003eIEqualityComparer\u0026lt;T\u0026gt;\u003c/code\u003e provides a safer interface and is used by collections or \u003ccode\u003eEquals\u003c/code\u003e could be made\n\u003ccode\u003evirtual\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an unsealed, \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e class implements \u003ccode\u003eIEquitable\u0026lt;T\u0026gt;\u003c/code\u003e and the\n\u003ccode\u003eEquals\u003c/code\u003e is neither \u003ccode\u003evirtual\u003c/code\u003e nor \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Base : IEquatable\u0026lt;Base\u0026gt; // Noncompliant\n  {\n    public bool Equals(Base other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of base properties\n      return true;\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as Base);\n  }\n\n  class A : Base\n  {\n    public bool Equals(A other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of A properties\n      return base.Equals(other);\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as A);\n  }\n\n  class B : Base\n  {\n    public bool Equals(B other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of B properties\n      return base.Equals(other);\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as B);\n  }\n\n  internal class Program\n  {\n    static void Main(string[] args)\n    {\n        A a \u003d new A();\n        B b \u003d new B();\n         Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base.Equals(Base)\n                                         // to be called which only compares the properties in Base and ignores the fact that\n                                         // a and b are different types. In the working example A.Equals(Object) would have been\n                                         // called and Equals would return false because it correctly recognizes that a and b are\n                                         // different types. If a and b have the same base properties they will be returned as equal.\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public sealed class Foo : IEquatable\u0026lt;Foo\u0026gt;\n    {\n        public bool Equals(Foo other)\n        {\n            // Your code here\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ms132151(v\u003dvs.110).aspx\"\u003eIEqualityComparer\u0026lt;T\u0026gt; Interface\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a class implements the \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e interface, it enters a contract that, in effect, states \"I know how to compare two\ninstances of type T or any type derived from T for equality.\". However if that class is derived, it is very unlikely that the base class will know how\nto make a meaningful comparison. Therefore that implicit contract is now broken.\u003c/p\u003e\n\u003cp\u003eAlternatively \u003ccode\u003eIEqualityComparer\u0026lt;T\u0026gt;\u003c/code\u003e provides a safer interface and is used by collections or \u003ccode\u003eEquals\u003c/code\u003e could be made\n\u003ccode\u003evirtual\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an unsealed, \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e class implements \u003ccode\u003eIEquitable\u0026lt;T\u0026gt;\u003c/code\u003e and the\n\u003ccode\u003eEquals\u003c/code\u003e is neither \u003ccode\u003evirtual\u003c/code\u003e nor \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Base : IEquatable\u0026lt;Base\u0026gt; // Noncompliant\n  {\n    public bool Equals(Base other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of base properties\n      return true;\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as Base);\n  }\n\n  class A : Base\n  {\n    public bool Equals(A other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of A properties\n      return base.Equals(other);\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as A);\n  }\n\n  class B : Base\n  {\n    public bool Equals(B other)\n    {\n      if (other \u003d\u003d null) { return false; }\n      // do comparison of B properties\n      return base.Equals(other);\n    }\n\n    public override bool Equals(object other)  \u003d\u0026gt; Equals(other as B);\n  }\n\n  internal class Program\n  {\n    static void Main(string[] args)\n    {\n        A a \u003d new A();\n        B b \u003d new B();\n         Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base.Equals(Base)\n                                         // to be called which only compares the properties in Base and ignores the fact that\n                                         // a and b are different types. In the working example A.Equals(Object) would have been\n                                         // called and Equals would return false because it correctly recognizes that a and b are\n                                         // different types. If a and b have the same base properties they will be returned as equal.\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public sealed class Foo : IEquatable\u0026lt;Foo\u0026gt;\n    {\n        public bool Equals(Foo other)\n        {\n            // Your code here\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/ms132151(v\u003dvs.110).aspx\"\u003eIEqualityComparer\u0026lt;T\u0026gt; Interface\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4158",
    "name": "Empty collections should not be accessed or iterated",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a collection is empty, iterating it has no effect. Doing so anyway is likely a bug; either population was accidentally omitted, or the\niteration needs to be revised.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method()\n{\n    var values \u003d new List\u0026lt;string\u0026gt;();\n    values.Remove(\"bar\");              // Noncompliant\n    if (values.Contains(\"foo\")) { }    // Noncompliant\n    foreach (var str in values) { }    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method()\n{\n    var values \u003d LoadValues();\n    values.Remove(\"bar\");\n    if (values.Contains(\"foo\")) { }\n    foreach (var str in values) { }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a collection is empty, iterating it has no effect. Doing so anyway is likely a bug; either population was accidentally omitted, or the\niteration needs to be revised.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method()\n{\n    var values \u003d new List\u0026lt;string\u0026gt;();\n    values.Remove(\"bar\");              // Noncompliant\n    if (values.Contains(\"foo\")) { }    // Noncompliant\n    foreach (var str in values) { }    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method()\n{\n    var values \u003d LoadValues();\n    values.Remove(\"bar\");\n    if (values.Contains(\"foo\")) { }\n    foreach (var str in values) { }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6575",
    "name": "Use \"TimeZoneInfo.FindSystemTimeZoneById\" without converting the timezones with \"TimezoneConverter\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eSince .NET 6 you don’t have to use the \u003ccode\u003eTimeZoneConverter\u003c/code\u003e library to manually do the conversion between IANA and Windows timezones. The\n.NET 6.0 introduced new Time Zone enhancements, one being the \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e method now accepts as\ninput both IANA and Windows time zone IDs on any operating system with installed time zone data. \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById\u003c/code\u003e will\nautomatically convert its input from IANA to Windows and vice versa if the requested time zone is not found on the system.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe method \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e can get both IANA and Windows timezones as input and automatically\nconvert one to the other if the requested time zone is not found on the system. Because one does not need to handle the conversion, the code will be\nless complex and easier to maintain.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThere’s no need to translate manually between time zones; it is enough to call \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e,\nwhere the timezone can be IANA or Windows format. Depending on the OS, the equivalent time zone will be returned (Windows Time Zones for Windows and\nIANA timezones for Linux, macOS).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nvar ianaTimeZone \u003d \"Asia/Tokyo\";\nvar windowsTimeZone \u003d TZConvert.IanaToWindows(ianaTimeZone);\nTimeZoneInfo tokyoWindowsTimeZone \u003d TimeZoneInfo.FindSystemTimeZoneById(windowsTimeZone);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nvar ianaTimeZone \u003d \"Asia/Tokyo\";\nTimeZoneInfo tokyoWindowsTimeZone \u003d TimeZoneInfo.FindSystemTimeZoneById(ianaTimeZone);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid\"\u003eTimeZoneInfo.FindSystemTimeZoneById\n  documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/\"\u003eDate, Time, and Time Zone Enhancements in .NET\n  6\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/mattjohnsonpint/TimeZoneConverter\"\u003eTimeZoneConverter\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/\"\u003eWhat’s up with TimeZoneInfo on .NET 6?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.iana.org/time-zones\"\u003eIANA Time Zone Database\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view\u003dwindows-11\"\u003eWindows Time Zones\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSince .NET 6 you don’t have to use the \u003ccode\u003eTimeZoneConverter\u003c/code\u003e library to manually do the conversion between IANA and Windows timezones. The\n.NET 6.0 introduced new Time Zone enhancements, one being the \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e method now accepts as\ninput both IANA and Windows time zone IDs on any operating system with installed time zone data. \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById\u003c/code\u003e will\nautomatically convert its input from IANA to Windows and vice versa if the requested time zone is not found on the system.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe method \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e can get both IANA and Windows timezones as input and automatically\nconvert one to the other if the requested time zone is not found on the system. Because one does not need to handle the conversion, the code will be\nless complex and easier to maintain.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThere’s no need to translate manually between time zones; it is enough to call \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e,\nwhere the timezone can be IANA or Windows format. Depending on the OS, the equivalent time zone will be returned (Windows Time Zones for Windows and\nIANA timezones for Linux, macOS).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nvar ianaTimeZone \u003d \"Asia/Tokyo\";\nvar windowsTimeZone \u003d TZConvert.IanaToWindows(ianaTimeZone);\nTimeZoneInfo tokyoWindowsTimeZone \u003d TimeZoneInfo.FindSystemTimeZoneById(windowsTimeZone);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nvar ianaTimeZone \u003d \"Asia/Tokyo\";\nTimeZoneInfo tokyoWindowsTimeZone \u003d TimeZoneInfo.FindSystemTimeZoneById(ianaTimeZone);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid\"\u003eTimeZoneInfo.FindSystemTimeZoneById\n  documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/\"\u003eDate, Time, and Time Zone Enhancements in .NET\n  6\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/mattjohnsonpint/TimeZoneConverter\"\u003eTimeZoneConverter\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/\"\u003eWhat’s up with TimeZoneInfo on .NET 6?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.iana.org/time-zones\"\u003eIANA Time Zone Database\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view\u003dwindows-11\"\u003eWindows Time Zones\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4277",
    "name": "\"Shared\" parts should not be created with \"new\"",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMarking a class with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e(\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e), which is\npart of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e, means that a single, shared\ninstance of the exported object will be created. Therefore it doesn’t make sense to create new instances using the constructor and it will most likely\nresult in unexpected behaviours.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a constructor of a class marked shared with a \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e is invoked.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Shared)]\npublic class FooBar : IFooBar\n{\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var fooBar \u003d new FooBar(); // Noncompliant;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Shared)]\npublic class FooBar : IFooBar\n{\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var fooBar \u003d serviceProvider.GetService\u0026lt;IFooBar\u0026gt;();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMarking a class with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e(\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e), which is\npart of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e, means that a single, shared\ninstance of the exported object will be created. Therefore it doesn’t make sense to create new instances using the constructor and it will most likely\nresult in unexpected behaviours.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a constructor of a class marked shared with a \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e is invoked.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Shared)]\npublic class FooBar : IFooBar\n{\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var fooBar \u003d new FooBar(); // Noncompliant;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Shared)]\npublic class FooBar : IFooBar\n{\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var fooBar \u003d serviceProvider.GetService\u0026lt;IFooBar\u0026gt;();\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4036",
    "name": "Searching OS commands in PATH is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen executing an OS command and unless you specify the full path to the executable, then the locations in your application’s \u003ccode\u003ePATH\u003c/code\u003e\nenvironment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in\n\u003ccode\u003ePATH\u003c/code\u003e is a directory under his control.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The directories in the PATH environment variable may be defined by not trusted entities. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nProcess p \u003d new Process();\np.StartInfo.FileName \u003d \"binary\"; // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eFully qualified/absolute path should be used to specify the OS command to execute.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nProcess p \u003d new Process();\np.StartInfo.FileName \u003d @\"C:\\Apps\\binary.exe\"; // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/426\"\u003eCWE-426 - Untrusted Search Path\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/427\"\u003eCWE-427 - Uncontrolled Search Path Element\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S4039",
    "name": "Interface methods should be callable by derived types",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the\ncurrent instance (namely \u003ccode\u003ethis\u003c/code\u003e). If the derived type explicitly overrides that interface method, the base implementation becomes\ninaccessible.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a \u003ccode\u003epublic interface\u003c/code\u003e\nand does not provide an alternate, externally visible method with the same name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class Foo : IMyInterface\n{\n    void IMyInterface.MyMethod() // Noncompliant\n    {\n        MyMethod();\n    }\n\n    void MyMethod()\n    {\n        // Do something ...\n    }\n}\n\npublic class Bar : Foo, IMyInterface\n{\n    public void MyMethod()\n    {\n        // Can\u0027t access base.MyMethod()\n        // ((IMyInterface)this).MyMethod() would be a recursive call\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class Foo : IMyInterface\n{\n    void IMyInterface.MyMethod()\n    {\n        MyMethod();\n    }\n\n    protected void MyMethod() // or public\n    {\n        // Do something ...\n    }\n}\n\npublic class Bar : Foo, IMyInterface\n{\n    public void MyMethod()\n    {\n        // Do something\n        base.MyMethod();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not report a violation for an explicit implementation of \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e when an externally visible\n\u003ccode\u003eClose()\u003c/code\u003e or \u003ccode\u003eSystem.IDisposable.Dispose(Boolean)\u003c/code\u003e method is provided.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the\ncurrent instance (namely \u003ccode\u003ethis\u003c/code\u003e). If the derived type explicitly overrides that interface method, the base implementation becomes\ninaccessible.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a \u003ccode\u003epublic interface\u003c/code\u003e\nand does not provide an alternate, externally visible method with the same name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class Foo : IMyInterface\n{\n    void IMyInterface.MyMethod() // Noncompliant\n    {\n        MyMethod();\n    }\n\n    void MyMethod()\n    {\n        // Do something ...\n    }\n}\n\npublic class Bar : Foo, IMyInterface\n{\n    public void MyMethod()\n    {\n        // Can\u0027t access base.MyMethod()\n        // ((IMyInterface)this).MyMethod() would be a recursive call\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n    void MyMethod();\n}\n\npublic class Foo : IMyInterface\n{\n    void IMyInterface.MyMethod()\n    {\n        MyMethod();\n    }\n\n    protected void MyMethod() // or public\n    {\n        // Do something ...\n    }\n}\n\npublic class Bar : Foo, IMyInterface\n{\n    public void MyMethod()\n    {\n        // Do something\n        base.MyMethod();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not report a violation for an explicit implementation of \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e when an externally visible\n\u003ccode\u003eClose()\u003c/code\u003e or \u003ccode\u003eSystem.IDisposable.Dispose(Boolean)\u003c/code\u003e method is provided.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4159",
    "name": "Classes should implement their \"ExportAttribute\" interfaces",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e,\nalso known as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e, is a programming model\nused to embed attributes within codes.\u003c/p\u003e\n\u003cp\u003eIn this model, objects are required to conform to a specific structure so that they can be used by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMEF provides a way to discover available components implicitly, via \u003cstrong\u003ecomposition\u003c/strong\u003e. A MEF component, called a \u003cstrong\u003epart\u003c/strong\u003e,\ndeclaratively specifies:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e both its dependencies, known as \u003cstrong\u003eimports\u003c/strong\u003e \u003c/li\u003e\n  \u003cli\u003e and what capabilities it makes available, known as \u003cstrong\u003eexports\u003c/strong\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute\u003c/a\u003e declares that a part \"exports\",\nor provides to the composition container, an object that fulfills a particular contract.\u003c/p\u003e\n\u003cp\u003eDuring composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.\u003c/p\u003e\n\u003cp\u003eIf the type doesn’t implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not\nfilled with the exported type) leading to unexpected behaviors/crashes.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when a class doesn’t implement or inherit the type declared in the \u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Export(typeof(ISomeType))]\npublic class SomeType // Noncompliant: doesn\u0027t implement \u0027ISomeType\u0027.\n{\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Export(typeof(ISomeType))]\npublic class SomeType : ISomeType\n{\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e,\nalso known as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e, is a programming model\nused to embed attributes within codes.\u003c/p\u003e\n\u003cp\u003eIn this model, objects are required to conform to a specific structure so that they can be used by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMEF provides a way to discover available components implicitly, via \u003cstrong\u003ecomposition\u003c/strong\u003e. A MEF component, called a \u003cstrong\u003epart\u003c/strong\u003e,\ndeclaratively specifies:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e both its dependencies, known as \u003cstrong\u003eimports\u003c/strong\u003e \u003c/li\u003e\n  \u003cli\u003e and what capabilities it makes available, known as \u003cstrong\u003eexports\u003c/strong\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute\u003c/a\u003e declares that a part \"exports\",\nor provides to the composition container, an object that fulfills a particular contract.\u003c/p\u003e\n\u003cp\u003eDuring composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.\u003c/p\u003e\n\u003cp\u003eIf the type doesn’t implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not\nfilled with the exported type) leading to unexpected behaviors/crashes.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when a class doesn’t implement or inherit the type declared in the \u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Export(typeof(ISomeType))]\npublic class SomeType // Noncompliant: doesn\u0027t implement \u0027ISomeType\u0027.\n{\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Export(typeof(ISomeType))]\npublic class SomeType : ISomeType\n{\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4260",
    "name": "\"ConstructorArgument\" parameters should exist in constructors",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen creating a custom \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extension\u003c/a\u003e\nthat accepts parameters in WPF, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003e\u003ccode\u003eConstructorArgument\u003c/code\u003e\u003c/a\u003e markup\nmust be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler won’t give you any\nwarning in case there are typos.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the string argument to \u003ccode\u003eConstructorArgumentAttribute\u003c/code\u003e doesn’t match any parameter of any constructor.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1)\n    {\n      Value1 \u003d value1;\n    }\n\n    [ConstructorArgument(\"value2\")]   // Noncompliant\n    public object Value1 { get; set; }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1)\n    {\n      Value1 \u003d value1;\n    }\n\n    [ConstructorArgument(\"value1\")]\n    public object Value1 { get; set; }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extensions and\n  WPF XAML\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.markupextension\"\u003eMarkupExtension Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003eConstructorArgumentAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen creating a custom \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extension\u003c/a\u003e\nthat accepts parameters in WPF, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003e\u003ccode\u003eConstructorArgument\u003c/code\u003e\u003c/a\u003e markup\nmust be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler won’t give you any\nwarning in case there are typos.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the string argument to \u003ccode\u003eConstructorArgumentAttribute\u003c/code\u003e doesn’t match any parameter of any constructor.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1)\n    {\n      Value1 \u003d value1;\n    }\n\n    [ConstructorArgument(\"value2\")]   // Noncompliant\n    public object Value1 { get; set; }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1)\n    {\n      Value1 \u003d value1;\n    }\n\n    [ConstructorArgument(\"value1\")]\n    public object Value1 { get; set; }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extensions and\n  WPF XAML\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.markupextension\"\u003eMarkupExtension Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003eConstructorArgumentAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "wpf",
      "xaml"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6562",
    "name": "Always set the \"DateTimeKind\" when creating new \"DateTime\" instances",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNot knowing the \u003ccode\u003eKind\u003c/code\u003e of the \u003ccode\u003eDateTime\u003c/code\u003e object that an application is using can lead to misunderstandings when displaying or\ncomparing them. Explicitly setting the \u003ccode\u003eKind\u003c/code\u003e property helps the application to stay consistent, and its maintainers understand what kind\nof date is being managed. To achieve this, when instantiating a new \u003ccode\u003eDateTime\u003c/code\u003e object you should always use a constructor overload that\nallows you to define the \u003ccode\u003eKind\u003c/code\u003e property.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating the \u003ccode\u003eDateTime\u003c/code\u003e object without specifying the property \u003ccode\u003eKind\u003c/code\u003e will set it to the default value of\n\u003ccode\u003eDateTimeKind.Unspecified\u003c/code\u003e. In this case, calling the method \u003ccode\u003eToUniversalTime\u003c/code\u003e will assume that \u003ccode\u003eKind\u003c/code\u003e is\n\u003ccode\u003eDateTimeKind.Local\u003c/code\u003e and calling the method \u003ccode\u003eToLocalTime\u003c/code\u003e will assume that it’s \u003ccode\u003eDateTimeKind.Utc\u003c/code\u003e. As a result, you\nmight have mismatched \u003ccode\u003eDateTime\u003c/code\u003e objects in your application.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue use a constructor overload that allows specifying the \u003ccode\u003eDateTimeKind\u003c/code\u003e when creating the \u003ccode\u003eDateTime\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid CreateNewTime()\n{\n    var birthDate \u003d new DateTime(1994, 7, 5, 16, 23, 42);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid CreateNewTime()\n{\n    var birthDate \u003d new DateTime(1994, 7, 5, 16, 23, 42, DateTimeKind.Utc);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimekind\"\u003eDateTimeKind documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.-ctor\"\u003eDateTime documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values\"\u003eHow to round trip date and time\n  values\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\u003c/a\u003e [Member overloading] \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNot knowing the \u003ccode\u003eKind\u003c/code\u003e of the \u003ccode\u003eDateTime\u003c/code\u003e object that an application is using can lead to misunderstandings when displaying or\ncomparing them. Explicitly setting the \u003ccode\u003eKind\u003c/code\u003e property helps the application to stay consistent, and its maintainers understand what kind\nof date is being managed. To achieve this, when instantiating a new \u003ccode\u003eDateTime\u003c/code\u003e object you should always use a constructor overload that\nallows you to define the \u003ccode\u003eKind\u003c/code\u003e property.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating the \u003ccode\u003eDateTime\u003c/code\u003e object without specifying the property \u003ccode\u003eKind\u003c/code\u003e will set it to the default value of\n\u003ccode\u003eDateTimeKind.Unspecified\u003c/code\u003e. In this case, calling the method \u003ccode\u003eToUniversalTime\u003c/code\u003e will assume that \u003ccode\u003eKind\u003c/code\u003e is\n\u003ccode\u003eDateTimeKind.Local\u003c/code\u003e and calling the method \u003ccode\u003eToLocalTime\u003c/code\u003e will assume that it’s \u003ccode\u003eDateTimeKind.Utc\u003c/code\u003e. As a result, you\nmight have mismatched \u003ccode\u003eDateTime\u003c/code\u003e objects in your application.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue use a constructor overload that allows specifying the \u003ccode\u003eDateTimeKind\u003c/code\u003e when creating the \u003ccode\u003eDateTime\u003c/code\u003e\nobject.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid CreateNewTime()\n{\n    var birthDate \u003d new DateTime(1994, 7, 5, 16, 23, 42);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid CreateNewTime()\n{\n    var birthDate \u003d new DateTime(1994, 7, 5, 16, 23, 42, DateTimeKind.Utc);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimekind\"\u003eDateTimeKind documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.-ctor\"\u003eDateTime documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values\"\u003eHow to round trip date and time\n  values\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\u003c/a\u003e [Member overloading] \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "localisation",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3052",
    "name": "Members should not be initialized to default values",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization\nvalues, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it’s\nconsidered poor style to do so.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public int field \u003d 0; // Noncompliant\n  public object o \u003d null; // Noncompliant\n  public object MyProperty { get; set; } \u003d null; // Noncompliant\n  public event EventHandler MyEvent \u003d null;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public int field;\n  public object o;\n  public object MyProperty { get; set; }\n  public event EventHandler MyEvent;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003econst\u003c/code\u003e fields are ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization\nvalues, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it’s\nconsidered poor style to do so.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public int field \u003d 0; // Noncompliant\n  public object o \u003d null; // Noncompliant\n  public object MyProperty { get; set; } \u003d null; // Noncompliant\n  public event EventHandler MyEvent \u003d null;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public int field;\n  public object o;\n  public object MyProperty { get; set; }\n  public event EventHandler MyEvent;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003econst\u003c/code\u003e fields are ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3172",
    "name": "Delegates should not be subtracted",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.\u003c/p\u003e\n\u003cp\u003eSubtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nMyDelegate first, second, third, fourth;\nfirst \u003d () \u003d\u0026gt; Console.Write(\"1\");\nsecond \u003d () \u003d\u0026gt; Console.Write(\"2\");\nthird \u003d () \u003d\u0026gt; Console.Write(\"3\");\nfourth \u003d () \u003d\u0026gt; Console.Write(\"4\");\n\nMyDelegate chain1234 \u003d first + second + third + fourth; // Compliant - chain sequence \u003d \"1234\"\nMyDelegate chain12 \u003d chain1234 - third - fourth; // Compliant - chain sequence \u003d \"12\"\n\n\nMyDelegate chain14 \u003d first + fourth; // creates a new MyDelegate instance which is a list under the covers\nMyDelegate chain23 \u003d chain1234 - chain14; // Noncompliant; (first + fourth) doesn\u0027t exist in chain1234\n\n\n// The chain sequence of \"chain23\" will be \"1234\" instead of \"23\"!\n// Indeed, the sequence \"1234\" does not contain the subsequence \"14\", so nothing is subtracted\n// (but note that \"1234\" contains both the \"1\" and \"4\" subsequences)\nchain23 \u003d chain1234 - (first + fourth); // Noncompliant\n\nchain23(); // will print \"1234\"!\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nMyDelegate chain23 \u003d chain1234 - first - fourth; // Compliant - \"1\" is first removed, followed by \"4\"\n\nchain23(); // will print \"23\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.\u003c/p\u003e\n\u003cp\u003eSubtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nMyDelegate first, second, third, fourth;\nfirst \u003d () \u003d\u0026gt; Console.Write(\"1\");\nsecond \u003d () \u003d\u0026gt; Console.Write(\"2\");\nthird \u003d () \u003d\u0026gt; Console.Write(\"3\");\nfourth \u003d () \u003d\u0026gt; Console.Write(\"4\");\n\nMyDelegate chain1234 \u003d first + second + third + fourth; // Compliant - chain sequence \u003d \"1234\"\nMyDelegate chain12 \u003d chain1234 - third - fourth; // Compliant - chain sequence \u003d \"12\"\n\n\nMyDelegate chain14 \u003d first + fourth; // creates a new MyDelegate instance which is a list under the covers\nMyDelegate chain23 \u003d chain1234 - chain14; // Noncompliant; (first + fourth) doesn\u0027t exist in chain1234\n\n\n// The chain sequence of \"chain23\" will be \"1234\" instead of \"23\"!\n// Indeed, the sequence \"1234\" does not contain the subsequence \"14\", so nothing is subtracted\n// (but note that \"1234\" contains both the \"1\" and \"4\" subsequences)\nchain23 \u003d chain1234 - (first + fourth); // Noncompliant\n\nchain23(); // will print \"1234\"!\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nMyDelegate chain23 \u003d chain1234 - first - fourth; // Compliant - \"1\" is first removed, followed by \"4\"\n\nchain23(); // will print \"23\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4143",
    "name": "Collection elements should not be replaced unconditionally",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cpre\u003e\nlist[index] \u003d \"value 1\";\nlist[index] \u003d \"value 2\";  // Noncompliant\n\ndictionary.Add(key, \"value 1\");\ndictionary[key] \u003d \"value 2\"; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cpre\u003e\nlist[index] \u003d \"value 1\";\nlist[index] \u003d \"value 2\";  // Noncompliant\n\ndictionary.Add(key, \"value 1\");\ndictionary[key] \u003d \"value 2\"; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6563",
    "name": "Use UTC when recording DateTime instants",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eYou should avoid recording time instants with the use of property \u003ccode\u003eDateTime.Now\u003c/code\u003e. The property \u003ccode\u003eDateTime.Now\u003c/code\u003e returns the\ncurrent date and time expressed in the machine’s local time without containing any timezone-related information (for example, the offset from\nCoordinated Universal Time). Not having this information means that if you need to display this \u003ccode\u003eDateTime\u003c/code\u003e object or use it for\ncomputations in another machine placed in a different time zone, you won’t be able to reconstruct it in the second machine’s local time without\nknowing the origin’s offset. This will likely lead to confusion and potential bugs.\u003c/p\u003e\n\u003cp\u003eInstead, you should record the \u003ccode\u003eDateTime\u003c/code\u003e instants in UTC, which gives you the date and time as it is in the Coordinated Universal Time.\nUTC is a time standard for all time zones and is not subjected to Daylight Saving Time (DST).\u003c/p\u003e\n\u003cp\u003eSimilarly, the use of the \u003ccode\u003eDateTime.Today\u003c/code\u003e property should also be avoided, as it can return different date values depending on the time\nzone.\u003c/p\u003e\n\u003cp\u003eGenerally, unless the purpose is to only display the Date and Time to a user on their local machine, you should always use UTC (for example, when\nstoring dates in a datebase or using them for calculations).\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou can end up with \u003ccode\u003eDateTime\u003c/code\u003e instants that have no meaning for anyone except the machine they were recorded on. Using UTC gives an\nunambiguous representation of an instant, and this UTC instant can be transformed into any equivalent local time. This operation isn’t reversible as\nsome local times are ambiguous and can be matched to more than one UTC instant (for example, due to daylight savings).\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Now\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.Now\u003c/code\u003e (as it contains offset information) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.UtcNow\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Today\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow.Date\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateOnly.FromDateTime(DateTime.UtcNow)\u003c/code\u003e (.NET 6.0+) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid LogDateTime()\n{\n    using var streamWriter \u003d new StreamWriter(\"logs.txt\", true);\n    streamWriter.WriteLine($\"DateTime:{DateTime.Now.ToString(\"o\")}\"); // This log won\u0027t have any meaning if it\u0027s reconstructed in a machine in a different timezone.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid LogDateTime()\n{\n    using var streamWriter \u003d new StreamWriter(\"logs.txt\", true);\n    streamWriter.WriteLine($\"DateTime:{DateTime.UtcNow.ToString(\"o\")}\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.utcnow\"\u003eDateTime.UtcNow documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.today\"\u003eDateTime.Today documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/resolve-ambiguous-times\"\u003eAmbiguous times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.timeanddate.com/time/zone/timezone/utc\"\u003eUTC standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/2580518\"\u003eAmbiguous times by John Skeet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eYou should avoid recording time instants with the use of property \u003ccode\u003eDateTime.Now\u003c/code\u003e. The property \u003ccode\u003eDateTime.Now\u003c/code\u003e returns the\ncurrent date and time expressed in the machine’s local time without containing any timezone-related information (for example, the offset from\nCoordinated Universal Time). Not having this information means that if you need to display this \u003ccode\u003eDateTime\u003c/code\u003e object or use it for\ncomputations in another machine placed in a different time zone, you won’t be able to reconstruct it in the second machine’s local time without\nknowing the origin’s offset. This will likely lead to confusion and potential bugs.\u003c/p\u003e\n\u003cp\u003eInstead, you should record the \u003ccode\u003eDateTime\u003c/code\u003e instants in UTC, which gives you the date and time as it is in the Coordinated Universal Time.\nUTC is a time standard for all time zones and is not subjected to Daylight Saving Time (DST).\u003c/p\u003e\n\u003cp\u003eSimilarly, the use of the \u003ccode\u003eDateTime.Today\u003c/code\u003e property should also be avoided, as it can return different date values depending on the time\nzone.\u003c/p\u003e\n\u003cp\u003eGenerally, unless the purpose is to only display the Date and Time to a user on their local machine, you should always use UTC (for example, when\nstoring dates in a datebase or using them for calculations).\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou can end up with \u003ccode\u003eDateTime\u003c/code\u003e instants that have no meaning for anyone except the machine they were recorded on. Using UTC gives an\nunambiguous representation of an instant, and this UTC instant can be transformed into any equivalent local time. This operation isn’t reversible as\nsome local times are ambiguous and can be matched to more than one UTC instant (for example, due to daylight savings).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of \u003ccode\u003eDateTime.Now\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.Now\u003c/code\u003e (as it contains offset information) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.UtcNow\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Today\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow.Date\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateOnly.FromDateTime(DateTime.UtcNow)\u003c/code\u003e (.NET 6.0+) \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid LogDateTime()\n{\n    using var streamWriter \u003d new StreamWriter(\"logs.txt\", true);\n    streamWriter.WriteLine($\"DateTime:{DateTime.Now.ToString(\"o\")}\"); // This log won\u0027t have any meaning if it\u0027s reconstructed in a machine in a different timezone.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid LogDateTime()\n{\n    using var streamWriter \u003d new StreamWriter(\"logs.txt\", true);\n    streamWriter.WriteLine($\"DateTime:{DateTime.UtcNow.ToString(\"o\")}\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.utcnow\"\u003eDateTime.UtcNow documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.today\"\u003eDateTime.Today documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/resolve-ambiguous-times\"\u003eAmbiguous times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.timeanddate.com/time/zone/timezone/utc\"\u003eUTC standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/2580518\"\u003eAmbiguous times by John Skeet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4022",
    "name": "Enumerations should have \"Int32\" storage",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default the storage type of an \u003ccode\u003eenum\u003c/code\u003e is \u003ccode\u003eInt32\u003c/code\u003e. In most cases it is not necessary to change this. In particular you will\nnot achieve any performance gain by using a smaller data type (e.g. \u003ccode\u003eByte\u003c/code\u003e) and may limit future uses.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility : sbyte // Noncompliant\n    {\n        Visible \u003d 0,\n        Invisible \u003d 1,\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility\n    {\n        Visible \u003d 0,\n        Invisible \u003d 1,\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy default the storage type of an \u003ccode\u003eenum\u003c/code\u003e is \u003ccode\u003eInt32\u003c/code\u003e. In most cases it is not necessary to change this. In particular you will\nnot achieve any performance gain by using a smaller data type (e.g. \u003ccode\u003eByte\u003c/code\u003e) and may limit future uses.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility : sbyte // Noncompliant\n    {\n        Visible \u003d 0,\n        Invisible \u003d 1,\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility\n    {\n        Visible \u003d 0,\n        Invisible \u003d 1,\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4261",
    "name": "Methods should be named according to their synchronicities",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAccording to the Task-based Asynchronous Pattern (TAP), methods returning either a \u003ccode\u003eSystem.Threading.Tasks.Task\u003c/code\u003e or a\n\u003ccode\u003eSystem.Threading.Tasks.Task\u0026lt;TResult\u0026gt;\u003c/code\u003e are considered \"asynchronous\". Such methods should use the \u003ccode\u003eAsync\u003c/code\u003e suffix.\nConversely methods which do not return such Tasks should not have an \"Async\" suffix in their names.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing  System.Threading.Tasks;\n\nnamespace myLibrary\n{\n\n  public class Foo\n  {\n    public Task Read(byte [] buffer, int offset, int count, // Noncompliant\n                                CancellationToken cancellationToken)\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing  System.Threading.Tasks;\n\nnamespace myLibrary\n{\n\n  public class Foo\n  {\n    public Task ReadAsync(byte [] buffer, int offset, int count, CancellationToken cancellationToken)\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the method is an override or part of the implementation of an interface since it can not be renamed.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap\"\u003eTask-based\n  Asynchronous Pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAccording to the Task-based Asynchronous Pattern (TAP), methods returning either a \u003ccode\u003eSystem.Threading.Tasks.Task\u003c/code\u003e or a\n\u003ccode\u003eSystem.Threading.Tasks.Task\u0026lt;TResult\u0026gt;\u003c/code\u003e are considered \"asynchronous\". Such methods should use the \u003ccode\u003eAsync\u003c/code\u003e suffix.\nConversely methods which do not return such Tasks should not have an \"Async\" suffix in their names.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing  System.Threading.Tasks;\n\nnamespace myLibrary\n{\n\n  public class Foo\n  {\n    public Task Read(byte [] buffer, int offset, int count, // Noncompliant\n                                CancellationToken cancellationToken)\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing  System.Threading.Tasks;\n\nnamespace myLibrary\n{\n\n  public class Foo\n  {\n    public Task ReadAsync(byte [] buffer, int offset, int count, CancellationToken cancellationToken)\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the method is an override or part of the implementation of an interface since it can not be renamed.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap\"\u003eTask-based\n  Asynchronous Pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6561",
    "name": "Avoid using \"DateTime.Now\" for benchmarking or timing operations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThe rule targets the use of \u003ccode\u003eDateTime.Now\u003c/code\u003e call followed by some arithmetic operation.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eDateTime.Now\u003c/code\u003e calls within a subtraction operation to measure elapsed time is not recommended. This property is subject to\nchanges such as daylight savings transitions, which can invalidate the calculation if the change occurs during the benchmark session, or when updating\na timer. Moreover, \u003ccode\u003eDateTime.Now\u003c/code\u003e is dependent on the system clock, which may have low resolution on older systems (as low as 15\nmilliseconds).\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eIf the purpose is to benchmark something then, instead of the \u003ccode\u003eDateTime.Now\u003c/code\u003e property, it’s recommended to use \u003ccode\u003eStopwatch\u003c/code\u003e,\nwhich is not affected by changes in time such as daylight savings (DST) and automatically checks for the existence of high-precision timers. As a\nbonus, the \u003ccode\u003eStopWatch\u003c/code\u003e class is also lightweight and computationally faster than \u003ccode\u003eDateTime\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar start \u003d DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there\u0027s a shift to summer time\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar stopWatch \u003d Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");\n\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, the goal is to refresh a timer prefer using the \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e property, which guarantees reliable results\nwhen doing arithmetic operations during DST transitions.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nif ((DateTime.Now - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval)\n{\n    lastRefresh \u003d DateTime.Now;\n    // Refresh\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nif ((DateTime.UtcNow - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval)\n{\n    lastRefresh \u003d DateTime.UtcNow;\n    // Refresh\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime?#datetime-resolution\"\u003eDateTime resolution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch?\"\u003eStopwatch class documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThe rule targets the use of \u003ccode\u003eDateTime.Now\u003c/code\u003e call followed by some arithmetic operation.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eDateTime.Now\u003c/code\u003e calls within a subtraction operation to measure elapsed time is not recommended. This property is subject to\nchanges such as daylight savings transitions, which can invalidate the calculation if the change occurs during the benchmark session, or when updating\na timer. Moreover, \u003ccode\u003eDateTime.Now\u003c/code\u003e is dependent on the system clock, which may have low resolution on older systems (as low as 15\nmilliseconds).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf the purpose is to benchmark something then, instead of the \u003ccode\u003eDateTime.Now\u003c/code\u003e property, it’s recommended to use \u003ccode\u003eStopwatch\u003c/code\u003e,\nwhich is not affected by changes in time such as daylight savings (DST) and automatically checks for the existence of high-precision timers. As a\nbonus, the \u003ccode\u003eStopWatch\u003c/code\u003e class is also lightweight and computationally faster than \u003ccode\u003eDateTime\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar start \u003d DateTime.Now; // First call, on March 26th 2:59 am\nMethodToBeBenchmarked();\n\nConsole.WriteLine($\"{(DateTime.Now - start).TotalMilliseconds} ms\"); // Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there\u0027s a shift to summer time\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar stopWatch \u003d Stopwatch.StartNew(); // Compliant\nMethodToBeBenchmarked();\nstopWatch.Stop();\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\");\n\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, the goal is to refresh a timer prefer using the \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e property, which guarantees reliable results\nwhen doing arithmetic operations during DST transitions.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nif ((DateTime.Now - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval)\n{\n    lastRefresh \u003d DateTime.Now;\n    // Refresh\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nif ((DateTime.UtcNow - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval)\n{\n    lastRefresh \u003d DateTime.UtcNow;\n    // Refresh\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime?#datetime-resolution\"\u003eDateTime resolution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch?\"\u003eStopwatch class documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6566",
    "name": "Use \"DateTimeOffset\" instead of \"DateTime\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule recommends using \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e for projects targeting .NET Framework 2.0 or later.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eYou should use \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e as it provides all the information that the \u003ccode\u003eDateTime\u003c/code\u003e\nstruct has, and additionally, the offset from Coordinated Universal Time (UTC). This way you can avoid potential problems created by the lack of\ntimezone awareness (see the \"Pitfalls\" section below for more information).\u003c/p\u003e\n\u003cp\u003eHowever, it’s important to note that although \u003ccode\u003eDateTimeOffset\u003c/code\u003e contains more information than \u003ccode\u003eDateTime\u003c/code\u003e by storing the\noffset to UTC, it isn’t tied to a specific time zone. This information must be stored separately to have a full picture of the moment in time with the\nuse of \u003ccode\u003eTimeZoneInfo\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIn most cases, you can directly replace \u003ccode\u003eDateTime\u003c/code\u003e with \u003ccode\u003eDateTimeOffset\u003c/code\u003e. When hardcoding dates with local kind, remember\nthat the offset is timezone dependent, so it should be set according to which timezone that data represents. For more information, refer to\n\u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e documentation from Microsoft (see the \"Resources\" section below).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDateTime myDate \u003d new DateTime(2008, 6, 19, 7, 0, 0, DateTimeKind.Local); // Noncompliant\n\nvar now \u003d DateTime.Now; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDateTimeOffset myDate \u003d new DateTimeOffset(2008, 6, 19, 7, 0, 0, TimeSpan.FromHours(-7)); // Compliant\n\nvar now \u003d DateTimeOffset.Now; // Compliant\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eCommon \u003ccode\u003eDateTime\u003c/code\u003e pitfalls include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eLocal\u003c/code\u003e consider the time offset of the machine where the program is running. Not\n  storing the offset from UTC separately can result in meaningless data when retrieved from a different location. \u003c/li\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eUnknown\u003c/code\u003e, calling \u003ccode\u003eToUniversalTime()\u003c/code\u003e presumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is local and converts to UTC, if you call the method \u003ccode\u003eToLocalTime()\u003c/code\u003e, it assumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is UTC and converts it to local. \u003c/li\u003e\n  \u003cli\u003e when comparing \u003ccode\u003eDateTimes\u003c/code\u003e objects, the user must ensure they are within the same time zone. \u003ccode\u003eDateTime\u003c/code\u003e doesn’t consider\n  UTC/Local when comparing; it only cares about the number of \u003ccode\u003eTicks\u003c/code\u003e on the objects. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset?redirectedfrom\u003dMSDN\"\u003eConverting\n  between DateTime and DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime\"\u003eChoose between DateTime, DateOnly,\n  DateTimeOffset, TimeSpan, TimeOnly, and TimeZoneInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations\"\u003ePerforming arithmetic operations with\n  dates and times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo\"\u003eTimeZoneInfo documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule recommends using \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e for projects targeting .NET Framework 2.0 or later.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eYou should use \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e as it provides all the information that the \u003ccode\u003eDateTime\u003c/code\u003e\nstruct has, and additionally, the offset from Coordinated Universal Time (UTC). This way you can avoid potential problems created by the lack of\ntimezone awareness (see the \"Pitfalls\" section below for more information).\u003c/p\u003e\n\u003cp\u003eHowever, it’s important to note that although \u003ccode\u003eDateTimeOffset\u003c/code\u003e contains more information than \u003ccode\u003eDateTime\u003c/code\u003e by storing the\noffset to UTC, it isn’t tied to a specific time zone. This information must be stored separately to have a full picture of the moment in time with the\nuse of \u003ccode\u003eTimeZoneInfo\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn most cases, you can directly replace \u003ccode\u003eDateTime\u003c/code\u003e with \u003ccode\u003eDateTimeOffset\u003c/code\u003e. When hardcoding dates with local kind, remember\nthat the offset is timezone dependent, so it should be set according to which timezone that data represents. For more information, refer to\n\u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e documentation from Microsoft (see the \"Resources\" section below).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDateTime myDate \u003d new DateTime(2008, 6, 19, 7, 0, 0, DateTimeKind.Local); // Noncompliant\n\nvar now \u003d DateTime.Now; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDateTimeOffset myDate \u003d new DateTimeOffset(2008, 6, 19, 7, 0, 0, TimeSpan.FromHours(-7)); // Compliant\n\nvar now \u003d DateTimeOffset.Now; // Compliant\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eCommon \u003ccode\u003eDateTime\u003c/code\u003e pitfalls include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eLocal\u003c/code\u003e consider the time offset of the machine where the program is running. Not\n  storing the offset from UTC separately can result in meaningless data when retrieved from a different location. \u003c/li\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eUnknown\u003c/code\u003e, calling \u003ccode\u003eToUniversalTime()\u003c/code\u003e presumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is local and converts to UTC, if you call the method \u003ccode\u003eToLocalTime()\u003c/code\u003e, it assumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is UTC and converts it to local. \u003c/li\u003e\n  \u003cli\u003e when comparing \u003ccode\u003eDateTimes\u003c/code\u003e objects, the user must ensure they are within the same time zone. \u003ccode\u003eDateTime\u003c/code\u003e doesn’t consider\n  UTC/Local when comparing; it only cares about the number of \u003ccode\u003eTicks\u003c/code\u003e on the objects. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset?redirectedfrom\u003dMSDN\"\u003eConverting\n  between DateTime and DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime\"\u003eChoose between DateTime, DateOnly,\n  DateTimeOffset, TimeSpan, TimeOnly, and TimeZoneInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations\"\u003ePerforming arithmetic operations with\n  dates and times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo\"\u003eTimeZoneInfo documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4023",
    "name": "Interfaces should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eEmpty interfaces should be avoided as they do not provide any functional requirements for implementing classes.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty interfaces are either useless or used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Marker_interface_pattern\"\u003emarker\u003c/a\u003e. \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/attributes/writing-custom-attributes\"\u003eCustom attributes\u003c/a\u003e are a better alternative to marker\ninterfaces. See the \u003cem\u003eHow to fix it\u003c/em\u003e section for more information.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise in any of the following cases:\u003c/p\u003e\n\u003ch4\u003eAggregation of multiple interfaces\u003c/h4\u003e\n\u003cpre\u003e\npublic interface IAggregate: IComparable, IFormattable { } // Compliant: Aggregates two interfaces\n\u003c/pre\u003e\n\u003ch4\u003eGeneric specialization\u003c/h4\u003e\n\u003cp\u003eAn empty interface with a single base interface is compliant as long as the resulting interface binds a generic parameter or constrains it.\u003c/p\u003e\n\u003cpre\u003e\n// Compliant: Bound to a concrete type\npublic interface IStringEquatable: IEquatable\u0026lt;string\u0026gt; { }\n// Compliant: Specialized by type parameter constraint\npublic interface ICreateableEquatable\u0026lt;T\u0026gt;: IEquatable\u0026lt;T\u0026gt; where T: new() { }\n\u003c/pre\u003e\n\u003ch4\u003eCustom attribute\u003c/h4\u003e\n\u003cp\u003eAn empty interface is compliant if a custom attribute is applied to the interface.\u003c/p\u003e\n\u003cpre\u003e\n[Obsolete]\npublic interface ISorted { } // Compliant: An attribute is applied to the interface declaration\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDo any of the following to fix the issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Add members to the interface \u003c/li\u003e\n  \u003cli\u003e Remove the useless interface \u003c/li\u003e\n  \u003cli\u003e Replace the usage as a marker interface with custom attributes \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe empty interface does not add any functionality.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic interface IFoo // Noncompliant\n{\n\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eAdd members to the interface to be compliant.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic interface IFoo\n{\n    void Bar();\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eA typical use case for marker interfaces is doing type inspection via \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection\"\u003ereflection\u003c/a\u003e as shown below.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eIIncludeFields\u003c/code\u003e marker interface is used to configure the JSON serialization of an object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n// An example marker interface\npublic interface IIncludeFields { }\n\npublic class OptInToIncludeFields: IIncludeFields { }\n\nSerialize(new OptInToIncludeFields());\n\nvoid Serialize\u0026lt;T\u0026gt;(T o)\n{\n    // Use reflection to check if the interface is applied to the type\n    var includeFields \u003d o.GetType()\n        .GetInterfaces().Any(i \u003d\u0026gt; i \u003d\u003d typeof(IIncludeFields));\n    var options \u003d new JsonSerializerOptions()\n    {\n        // Take decisions based on the presence of the marker\n        IncludeFields \u003d includeFields,\n    };\n}\n\u003c/pre\u003e\n\u003cp\u003eThe same example can be rewritten using custom attributes. This approach is preferable because it is more fine-grained, allows parameterization,\nand is more flexible in type hierarchies.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n// A custom attribute used as a marker\n[AttributeUsage(AttributeTargets.Class)]\npublic sealed class IncludeFieldsAttribute: Attribute { }\n\n[IncludeFields]\npublic class OptInToIncludeFields { }\n\nSerialize(new OptInToIncludeFields());\n\nvoid Serialize\u0026lt;T\u0026gt;(T o)\n{\n    // Use reflection to check if the attribute is applied to the type\n    var includeFields \u003d o.GetType()\n        .GetCustomAttributes(typeof(IncludeFieldsAttribute), inherit: true).Any();\n    var options \u003d new JsonSerializerOptions()\n    {\n        // Take decisions based on the presence of the marker\n        IncludeFields \u003d includeFields,\n    };\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces\"\u003eInterfaces - define behavior for\n  multiple types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Marker_interface_pattern\"\u003eMarker interface pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/attributes/writing-custom-attributes\"\u003eWriting custom\n  attributes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eEmpty interfaces should be avoided as they do not provide any functional requirements for implementing classes.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEmpty interfaces are either useless or used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Marker_interface_pattern\"\u003emarker\u003c/a\u003e. \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/attributes/writing-custom-attributes\"\u003eCustom attributes\u003c/a\u003e are a better alternative to marker\ninterfaces. See the \u003cem\u003eHow to fix it\u003c/em\u003e section for more information.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise in any of the following cases:\u003c/p\u003e\n\u003ch4\u003eAggregation of multiple interfaces\u003c/h4\u003e\n\u003cpre\u003e\npublic interface IAggregate: IComparable, IFormattable { } // Compliant: Aggregates two interfaces\n\u003c/pre\u003e\n\u003ch4\u003eGeneric specialization\u003c/h4\u003e\n\u003cp\u003eAn empty interface with a single base interface is compliant as long as the resulting interface binds a generic parameter or constrains it.\u003c/p\u003e\n\u003cpre\u003e\n// Compliant: Bound to a concrete type\npublic interface IStringEquatable: IEquatable\u0026lt;string\u0026gt; { }\n// Compliant: Specialized by type parameter constraint\npublic interface ICreateableEquatable\u0026lt;T\u0026gt;: IEquatable\u0026lt;T\u0026gt; where T: new() { }\n\u003c/pre\u003e\n\u003ch4\u003eCustom attribute\u003c/h4\u003e\n\u003cp\u003eAn empty interface is compliant if a custom attribute is applied to the interface.\u003c/p\u003e\n\u003cpre\u003e\n[Obsolete]\npublic interface ISorted { } // Compliant: An attribute is applied to the interface declaration\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDo any of the following to fix the issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Add members to the interface \u003c/li\u003e\n  \u003cli\u003e Remove the useless interface \u003c/li\u003e\n  \u003cli\u003e Replace the usage as a marker interface with custom attributes \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe empty interface does not add any functionality.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic interface IFoo // Noncompliant\n{\n\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eAdd members to the interface to be compliant.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic interface IFoo\n{\n    void Bar();\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eA typical use case for marker interfaces is doing type inspection via \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection\"\u003ereflection\u003c/a\u003e as shown below.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eIIncludeFields\u003c/code\u003e marker interface is used to configure the JSON serialization of an object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n// An example marker interface\npublic interface IIncludeFields { }\n\npublic class OptInToIncludeFields: IIncludeFields { }\n\nSerialize(new OptInToIncludeFields());\n\nvoid Serialize\u0026lt;T\u0026gt;(T o)\n{\n    // Use reflection to check if the interface is applied to the type\n    var includeFields \u003d o.GetType()\n        .GetInterfaces().Any(i \u003d\u0026gt; i \u003d\u003d typeof(IIncludeFields));\n    var options \u003d new JsonSerializerOptions()\n    {\n        // Take decisions based on the presence of the marker\n        IncludeFields \u003d includeFields,\n    };\n}\n\u003c/pre\u003e\n\u003cp\u003eThe same example can be rewritten using custom attributes. This approach is preferable because it is more fine-grained, allows parameterization,\nand is more flexible in type hierarchies.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n// A custom attribute used as a marker\n[AttributeUsage(AttributeTargets.Class)]\npublic sealed class IncludeFieldsAttribute: Attribute { }\n\n[IncludeFields]\npublic class OptInToIncludeFields { }\n\nSerialize(new OptInToIncludeFields());\n\nvoid Serialize\u0026lt;T\u0026gt;(T o)\n{\n    // Use reflection to check if the attribute is applied to the type\n    var includeFields \u003d o.GetType()\n        .GetCustomAttributes(typeof(IncludeFieldsAttribute), inherit: true).Any();\n    var options \u003d new JsonSerializerOptions()\n    {\n        // Take decisions based on the presence of the marker\n        IncludeFields \u003d includeFields,\n    };\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces\"\u003eInterfaces - define behavior for\n  multiple types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Marker_interface_pattern\"\u003eMarker interface pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/attributes/writing-custom-attributes\"\u003eWriting custom\n  attributes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4026",
    "name": "Assemblies should be marked with \"NeutralResourcesLanguageAttribute\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is important to inform the \u003ccode\u003eResourceManager\u003c/code\u003e of the language used to display the resources of the neutral culture for an assembly.\nThis improves lookup performance for the first resource loaded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assembly contains a \u003ccode\u003eResX\u003c/code\u003e-based resource but does not have the\n\u003ccode\u003eSystem.Resources.NeutralResourcesLanguageAttribute\u003c/code\u003e applied to it.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic class MyClass // Noncompliant\n{\n   public static void Main()\n   {\n      string[] cultures \u003d { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd \u003d new Random();\n      int index \u003d rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture \u003d CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm \u003d new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting \u003d rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name \u003d Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly:NeutralResourcesLanguageAttribute(\"en\")]\npublic class MyClass\n{\n   public static void Main()\n   {\n      string[] cultures \u003d { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd \u003d new Random();\n      int index \u003d rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture \u003d CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm \u003d new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting \u003d rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name \u003d Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is important to inform the \u003ccode\u003eResourceManager\u003c/code\u003e of the language used to display the resources of the neutral culture for an assembly.\nThis improves lookup performance for the first resource loaded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assembly contains a \u003ccode\u003eResX\u003c/code\u003e-based resource but does not have the\n\u003ccode\u003eSystem.Resources.NeutralResourcesLanguageAttribute\u003c/code\u003e applied to it.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic class MyClass // Noncompliant\n{\n   public static void Main()\n   {\n      string[] cultures \u003d { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd \u003d new Random();\n      int index \u003d rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture \u003d CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm \u003d new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting \u003d rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name \u003d Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly:NeutralResourcesLanguageAttribute(\"en\")]\npublic class MyClass\n{\n   public static void Main()\n   {\n      string[] cultures \u003d { \"de-DE\", \"en-us\", \"fr-FR\" };\n      Random rnd \u003d new Random();\n      int index \u003d rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture \u003d CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm \u003d new ResourceManager(\"MyResources\" ,\n                                               typeof(MyClass).Assembly);\n      string greeting \u003d rm.GetString(\"Greeting\");\n\n      Console.Write(\"Enter your name: \");\n      string name \u003d Console.ReadLine();\n      Console.WriteLine(\"{0} {1}!\", greeting, name);\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4144",
    "name": "Methods should not have identical implementations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate const string CODE \u003d \"secret\";\nprivate int callCount \u003d 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName() // Noncompliant: duplicates GetCode\n{\n  callCount++;\n  return CODE;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate const string CODE \u003d \"secret\";\nprivate int callCount \u003d 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName() // Intent is clear\n{\n  return GetCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEmpty methods, methods with only one line of code and methods with the same name (overload) are ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate const string CODE \u003d \"secret\";\nprivate int callCount \u003d 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName() // Noncompliant: duplicates GetCode\n{\n  callCount++;\n  return CODE;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate const string CODE \u003d \"secret\";\nprivate int callCount \u003d 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName() // Intent is clear\n{\n  return GetCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEmpty methods, methods with only one line of code and methods with the same name (overload) are ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "duplicate",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4025",
    "name": "Child class fields should not differ from parent class fields only by capitalization",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving a field in a child class with a name that differs from a parent class\u0027 field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string plantingseason;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string whenToPlant;\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  // field removed; parent field will be used instead\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a field in a child class with a name that differs from a parent class\u0027 field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string plantingseason;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string whenToPlant;\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  // field removed; parent field will be used instead\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6444",
    "name": "Not specifying a timeout for regular expressions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNot specifying a timeout for regular expressions can lead to a Denial-of-Service attack. Pass a timeout when using\n\u003ccode\u003eSystem.Text.RegularExpressions\u003c/code\u003e to process untrusted input because a malicious user might craft a value for which the evaluation lasts\nexcessively long.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the input passed to the regular expression is untrusted. \u003c/li\u003e\n  \u003cli\u003e the regular expression contains patterns vulnerable to \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003ecatastrophic\n  backtracking\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void RegexPattern(string input)\n{\n    var emailPattern \u003d new Regex(\".+@.+\", RegexOptions.None);\n    var isNumber \u003d Regex.IsMatch(input, \"[0-9]+\");\n    var isLetterA \u003d Regex.IsMatch(input, \"(a+)+\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e It is recommended to specify a \u003ca\n  href\u003d\"https://learn.microsoft.com/dotnet/standard/base-types/best-practices#use-time-out-values\"\u003e\u003ccode\u003ematchTimeout\u003c/code\u003e\u003c/a\u003e when executing a\n  regular expression. \u003c/li\u003e\n  \u003cli\u003e Make sure regular expressions are not vulnerable to Denial-of-Service attacks by reviewing the patterns. \u003c/li\u003e\n  \u003cli\u003e Consider using a non-backtracking algorithm by specifying \u003ca\n  href\u003d\"https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions?view\u003dnet-7.0\"\u003e\u003ccode\u003eRegexOptions.NonBacktracking\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void RegexPattern(string input)\n{\n    var emailPattern \u003d new Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isNumber \u003d Regex.IsMatch(input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100));\n    var isLetterA \u003d Regex.IsMatch(input, \"(a+)+\", RegexOptions.NonBacktracking); // .Net 7 and above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)); // process-wide setting\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eCWE-400 - Uncontrolled Resource Consumption\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1333\"\u003eCWE-1333 - Inefficient Regular Expression Complexity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003eregular-expressions.info\u003c/a\u003e - Runaway Regular Expressions: Catastrophic\n  Backtracking \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003eowasp.org\u003c/a\u003e - Regular expression Denial of\n  Service - ReDoS \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1333\"\u003eCWE-1333 - Inefficient Regular Expression Complexity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/standard/base-types/best-practices\"\u003edocs.microsoft.com\u003c/a\u003e - Best practices for regular expressions\n  in .NET \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003edocs.microsoft.com\u003c/a\u003e - Backtracking in\n  Regular Expressions \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/#backtracking-and-regexoptions-nonbacktracking\"\u003edevblogs.microsoft.com\u003c/a\u003e - Regular Expression Improvements in .NET 7: Backtracking (and RegexOptions.NonBacktracking) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.regex.matchtimeout\"\u003edocs.microsoft.com\u003c/a\u003e - Regex.MatchTimeout\n  Property \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions?view\u003dnet-7.0\"\u003edocs.microsoft.com\u003c/a\u003e - RegexOptions\n  Enum (NonBacktracking option) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "csharpsquid:S4027",
    "name": "Exceptions should provide standard constructors",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eExceptions types should provide the following constructors:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException(string)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException(string, Exception)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprotected\u003c/code\u003e or \u003ccode\u003eprivate MyException(SerializationInfo, StreamingContext)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat fourth constructor should be \u003ccode\u003eprotected\u003c/code\u003e in unsealed classes, and \u003ccode\u003eprivate\u003c/code\u003e in sealed classes.\u003c/p\u003e\n\u003cp\u003eNot having this full set of constructors can make it difficult to handle exceptions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyException // Noncompliant: several constructors are missing\n  {\n    public MyException()\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace MyLibrary\n{\n  public class MyException : Exception\n  {\n      public MyException()\n      {\n      }\n\n      public MyException(string message)\n          :base(message)\n      {\n      }\n\n      public MyException(string message, Exception innerException)\n          : base(message, innerException)\n      {\n      }\n\n      protected MyException(SerializationInfo info, StreamingContext context)\n          : base(info, context)\n      {\n      }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExceptions types should provide the following constructors:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException(string)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic MyException(string, Exception)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprotected\u003c/code\u003e or \u003ccode\u003eprivate MyException(SerializationInfo, StreamingContext)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat fourth constructor should be \u003ccode\u003eprotected\u003c/code\u003e in unsealed classes, and \u003ccode\u003eprivate\u003c/code\u003e in sealed classes.\u003c/p\u003e\n\u003cp\u003eNot having this full set of constructors can make it difficult to handle exceptions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyException // Noncompliant: several constructors are missing\n  {\n    public MyException()\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace MyLibrary\n{\n  public class MyException : Exception\n  {\n      public MyException()\n      {\n      }\n\n      public MyException(string message)\n          :base(message)\n      {\n      }\n\n      public MyException(string message, Exception innerException)\n          : base(message, innerException)\n      {\n      }\n\n      protected MyException(SerializationInfo info, StreamingContext context)\n          : base(info, context)\n      {\n      }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3059",
    "name": "Types should not have members with visibility set higher than the type\u0027s visibility",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in having a \u003ccode\u003epublic\u003c/code\u003e member in a non-\u003ccode\u003epublic\u003c/code\u003e type because objects that can’t access the type will never\nhave the chance to access the member.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type has methods, fields, or inner types with higher visibility than the type itself has.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninternal class MyClass\n{\n    public static decimal PI \u003d 3.14m;  // Noncompliant\n\n    public int GetOne() // Noncompliant\n    {\n        return 1;\n    }\n\n    protected record NestedType // Noncompliant: outer class is internal\n    {\n        public bool FlipCoin() // Noncompliant: outer class is internal\n        {\n            return false;\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass // Class visibility upgrade makes members compliant\n{\n    public static decimal PI \u003d 3.14m;\n\n    public int GetOne()\n    {\n        return 1;\n    }\n\n    protected record NestedType\n    {\n        public bool FlipCoin() // Outer type is public\n        {\n            return false;\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUser defined operators need to be public:\u003c/p\u003e\n\u003cpre\u003e\npublic static implicit operator byte(MyClass a) \u003d\u0026gt; 1; // Compliant\npublic static explicit operator MyClass(byte a) \u003d\u0026gt; new MyClass(a); // Compliant\n\u003c/pre\u003e\n\u003cp\u003eNested types, even if private, can be used and inherited in the parent type. In this case, the visibility of the outer type is considered.\u003c/p\u003e\n\u003cpre\u003e\ninternal class MyClass\n{\n    private class NestedClass\n    {\n        public int PublicProperty { get; } // Noncompliant: should be internal\n        protected internal int ProtectedInternalProperty { get; } // Compliant: can be used in `InternalsVisibleTo` assemblies\n        internal int InternalProperty { get; } // Compliant: can be used in `InternalsVisibleTo` assemblies\n        protected int ProtectedProperty { get; } // Compliant: can be used in derived type\n        private protected int PrivateProtectedProperty { get; } // Compliant: can be used in derived type\n        private int PrivateProperty { get; }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in having a \u003ccode\u003epublic\u003c/code\u003e member in a non-\u003ccode\u003epublic\u003c/code\u003e type because objects that can’t access the type will never\nhave the chance to access the member.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type has methods, fields, or inner types with higher visibility than the type itself has.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninternal class MyClass\n{\n    public static decimal PI \u003d 3.14m;  // Noncompliant\n\n    public int GetOne() // Noncompliant\n    {\n        return 1;\n    }\n\n    protected record NestedType // Noncompliant: outer class is internal\n    {\n        public bool FlipCoin() // Noncompliant: outer class is internal\n        {\n            return false;\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass // Class visibility upgrade makes members compliant\n{\n    public static decimal PI \u003d 3.14m;\n\n    public int GetOne()\n    {\n        return 1;\n    }\n\n    protected record NestedType\n    {\n        public bool FlipCoin() // Outer type is public\n        {\n            return false;\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUser defined operators need to be public:\u003c/p\u003e\n\u003cpre\u003e\npublic static implicit operator byte(MyClass a) \u003d\u0026gt; 1; // Compliant\npublic static explicit operator MyClass(byte a) \u003d\u0026gt; new MyClass(a); // Compliant\n\u003c/pre\u003e\n\u003cp\u003eNested types, even if private, can be used and inherited in the parent type. In this case, the visibility of the outer type is considered.\u003c/p\u003e\n\u003cpre\u003e\ninternal class MyClass\n{\n    private class NestedClass\n    {\n        public int PublicProperty { get; } // Noncompliant: should be internal\n        protected internal int ProtectedInternalProperty { get; } // Compliant: can be used in `InternalsVisibleTo` assemblies\n        internal int InternalProperty { get; } // Compliant: can be used in `InternalsVisibleTo` assemblies\n        protected int ProtectedProperty { get; } // Compliant: can be used in derived type\n        private protected int PrivateProtectedProperty { get; } // Compliant: can be used in derived type\n        private int PrivateProperty { get; }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4050",
    "name": "Operators should be overloaded consistently",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their\nimplementation.\u003c/p\u003e\n\u003cp\u003eThe following guidelines should be followed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e you should also provide \u003ccode\u003eoperator !\u003d\u003c/code\u003e and vice-versa. \u003c/li\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e you should also provide \u003ccode\u003eEquals(Object)\u003c/code\u003e and \u003ccode\u003eGetHashCode()\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator +, -, *, / or %\u003c/code\u003e\u0026nbsp;you should also provide \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e, respecting previous guidelines.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo // Noncompliant\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left \u003d l;\n      this.right \u003d r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left \u003d l;\n      this.right \u003d r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n\n    public static bool operator \u003d\u003d(Foo a, Foo b)\n    {\n      return (a.left \u003d\u003d b.left \u0026amp;\u0026amp; a.right \u003d\u003d b.right);\n    }\n\n    public static bool operator !\u003d(Foo a, Foo b)\n    {\n      return !(a \u003d\u003d b);\n    }\n\n    public override bool Equals(Object obj)\n    {\n      Foo a \u003d obj as Foo;\n      if (a \u003d\u003d null)\n        return false;\n      return this \u003d\u003d a;\n    }\n\n    public override int GetHashCode()\n    {\n       return (this.left * 10) + this.right;\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their\nimplementation.\u003c/p\u003e\n\u003cp\u003eThe following guidelines should be followed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e you should also provide \u003ccode\u003eoperator !\u003d\u003c/code\u003e and vice-versa. \u003c/li\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e you should also provide \u003ccode\u003eEquals(Object)\u003c/code\u003e and \u003ccode\u003eGetHashCode()\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When providing \u003ccode\u003eoperator +, -, *, / or %\u003c/code\u003e\u0026nbsp;you should also provide \u003ccode\u003eoperator \u003d\u003d\u003c/code\u003e, respecting previous guidelines.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo // Noncompliant\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left \u003d l;\n      this.right \u003d r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left \u003d l;\n      this.right \u003d r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n\n    public static bool operator \u003d\u003d(Foo a, Foo b)\n    {\n      return (a.left \u003d\u003d b.left \u0026amp;\u0026amp; a.right \u003d\u003d b.right);\n    }\n\n    public static bool operator !\u003d(Foo a, Foo b)\n    {\n      return !(a \u003d\u003d b);\n    }\n\n    public override bool Equals(Object obj)\n    {\n      Foo a \u003d obj as Foo;\n      if (a \u003d\u003d null)\n        return false;\n      return this \u003d\u003d a;\n    }\n\n    public override int GetHashCode()\n    {\n       return (this.left * 10) + this.right;\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4052",
    "name": "Types should not extend outdated base types",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWith the advent of .NET framework version 2, certain practices have become obsolete.\u003c/p\u003e\n\u003cp\u003eIn particular, exceptions should now extend \u003ccode\u003eSystem.Exception\u003c/code\u003e instead of \u003ccode\u003eSystem.ApplicationException\u003c/code\u003e. Similarly, generic\ncollections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend\n\u003ccode\u003eSystem.Xml.XmlDocument\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an externally visible type extends one of these types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.ApplicationException\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Xml.XmlDocument\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.CollectionBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.DictionaryBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Queue\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ReadOnlyCollectionBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.SortedList\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Stack\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : CollectionBase  // Noncompliant\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : Collection\u0026lt;T\u0026gt;\n  {\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWith the advent of .NET framework version 2, certain practices have become obsolete.\u003c/p\u003e\n\u003cp\u003eIn particular, exceptions should now extend \u003ccode\u003eSystem.Exception\u003c/code\u003e instead of \u003ccode\u003eSystem.ApplicationException\u003c/code\u003e. Similarly, generic\ncollections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend\n\u003ccode\u003eSystem.Xml.XmlDocument\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an externally visible type extends one of these types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.ApplicationException\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Xml.XmlDocument\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.CollectionBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.DictionaryBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Queue\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ReadOnlyCollectionBase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.SortedList\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Stack\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : CollectionBase  // Noncompliant\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : Collection\u0026lt;T\u0026gt;\n  {\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6354",
    "name": "Use a testable date/time provider",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOne of the principles of a unit test is that it must have full control of the system under test. This is problematic when production code includes\ncalls to static methods, which cannot be changed or controlled. Date/time functions are usually provided by system libraries as static methods.\u003c/p\u003e\n\u003cp\u003eThis can be improved by wrapping the system calls in an object or service that can be controlled inside the unit test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public string HelloTime() \u003d\u0026gt;\n        $\"Hello at {DateTime.UtcNow}\";\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThere are different approaches to solve this problem. One of them is suggested below. There are also open source libraries (such as NodaTime) which\nalready implement an \u003ccode\u003eIClock\u003c/code\u003e interface and a \u003ccode\u003eFakeClock\u003c/code\u003e testing class.\u003c/p\u003e\n\u003cpre\u003e\npublic interface IClock\n{\n    DateTime UtcNow();\n}\n\npublic class Foo\n{\n    public string HelloTime(IClock clock) \u003d\u0026gt;\n        $\"Hello at {clock.UtcNow()}\";\n}\n\npublic class FooTest\n{\n    public record TestClock(DateTime now) : IClock\n    {\n        public DateTime UtcNow() \u003d\u0026gt; now;\n    }\n\n    [Fact]\n    public void HelloTime_Gives_CorrectTime()\n    {\n        var dateTime \u003d new DateTime(2017, 06, 11);\n        Assert.Equal((new Foo()).HelloTime(new TestClock(dateTime)), $\"Hello at {dateTime}\");\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother possible solution is using an adaptable static class, ideally supports an IDisposable method, that not only adjusts the time behaviour for\nthe current thread only, but also for scope of the using.\u003c/p\u003e\n\u003cpre\u003e\npublic static class Clock\n{\n    public static DateTime UtcNow() { /* ... */ }\n    public static IDisposable SetTimeForCurrentThread(Func\u0026lt;DateTime\u0026gt; time) { /* ... */ }\n}\n\npublic class Foo\n{\n    public string HelloTime() \u003d\u0026gt;\n        $\"Hello at {Clock.UtcNow()}\";\n}\n\npublic class FooTest\n{\n    [Fact]\n    public void HelloTime_Gives_CorrectTime()\n    {\n        var dateTime \u003d new DateTime(2017, 06, 11);\n        using (Clock.SetTimeForCurrentThread(() \u003d\u0026gt; dateTime))\n        {\n             Assert.Equal((new Foo()).HelloTime(), $\"Hello at {dateTime}\");\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://nodatime.org/3.0.x/api/NodaTime.Testing.html\"\u003eNodaTime testing\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOne of the principles of a unit test is that it must have full control of the system under test. This is problematic when production code includes\ncalls to static methods, which cannot be changed or controlled. Date/time functions are usually provided by system libraries as static methods.\u003c/p\u003e\n\u003cp\u003eThis can be improved by wrapping the system calls in an object or service that can be controlled inside the unit test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public string HelloTime() \u003d\u0026gt;\n        $\"Hello at {DateTime.UtcNow}\";\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThere are different approaches to solve this problem. One of them is suggested below. There are also open source libraries (such as NodaTime) which\nalready implement an \u003ccode\u003eIClock\u003c/code\u003e interface and a \u003ccode\u003eFakeClock\u003c/code\u003e testing class.\u003c/p\u003e\n\u003cpre\u003e\npublic interface IClock\n{\n    DateTime UtcNow();\n}\n\npublic class Foo\n{\n    public string HelloTime(IClock clock) \u003d\u0026gt;\n        $\"Hello at {clock.UtcNow()}\";\n}\n\npublic class FooTest\n{\n    public record TestClock(DateTime now) : IClock\n    {\n        public DateTime UtcNow() \u003d\u0026gt; now;\n    }\n\n    [Fact]\n    public void HelloTime_Gives_CorrectTime()\n    {\n        var dateTime \u003d new DateTime(2017, 06, 11);\n        Assert.Equal((new Foo()).HelloTime(new TestClock(dateTime)), $\"Hello at {dateTime}\");\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother possible solution is using an adaptable static class, ideally supports an IDisposable method, that not only adjusts the time behaviour for\nthe current thread only, but also for scope of the using.\u003c/p\u003e\n\u003cpre\u003e\npublic static class Clock\n{\n    public static DateTime UtcNow() { /* ... */ }\n    public static IDisposable SetTimeForCurrentThread(Func\u0026lt;DateTime\u0026gt; time) { /* ... */ }\n}\n\npublic class Foo\n{\n    public string HelloTime() \u003d\u0026gt;\n        $\"Hello at {Clock.UtcNow()}\";\n}\n\npublic class FooTest\n{\n    [Fact]\n    public void HelloTime_Gives_CorrectTime()\n    {\n        var dateTime \u003d new DateTime(2017, 06, 11);\n        using (Clock.SetTimeForCurrentThread(() \u003d\u0026gt; dateTime))\n        {\n             Assert.Equal((new Foo()).HelloTime(), $\"Hello at {dateTime}\");\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://nodatime.org/3.0.x/api/NodaTime.Testing.html\"\u003eNodaTime testing\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4055",
    "name": "Literals should not be passed as localized parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString literals embedded in the source code will not be localized properly.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eLocalizableAttribute\u003c/code\u003e attribute of the parameter or property is set to true. \u003c/li\u003e\n  \u003cli\u003e The parameter or property name contains \"Text\", \"Message\", or \"Caption\". \u003c/li\u003e\n  \u003cli\u003e The name of the string parameter that is passed to a \u003ccode\u003eConsole.Write\u003c/code\u003e or \u003ccode\u003eConsole.WriteLine\u003c/code\u003e method is either \"value\" or\n  \"format\". \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Windows.Forms;\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void SetHour(int hour)\n        {\n            if (hour \u0026lt; 0 || hour \u0026gt; 23)\n            {\n                MessageBox.Show(\"The valid range is 0 - 23.\"); // Noncompliant\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Windows.Forms;\n\n\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        ResourceManager rm;\n        public Foo()\n        {\n            rm \u003d new ResourceManager(\"en-US\", Assembly.GetExecutingAssembly());\n        }\n\n        public void SetHour(int hour)\n        {\n            if (hour \u0026lt; 0 || hour \u0026gt; 23)\n            {\n                MessageBox.Show(\n                rm.GetString(\"OutOfRangeMessage\", CultureInfo.CurrentUICulture));\n            }\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString literals embedded in the source code will not be localized properly.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eLocalizableAttribute\u003c/code\u003e attribute of the parameter or property is set to true. \u003c/li\u003e\n  \u003cli\u003e The parameter or property name contains \"Text\", \"Message\", or \"Caption\". \u003c/li\u003e\n  \u003cli\u003e The name of the string parameter that is passed to a \u003ccode\u003eConsole.Write\u003c/code\u003e or \u003ccode\u003eConsole.WriteLine\u003c/code\u003e method is either \"value\" or\n  \"format\". \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Windows.Forms;\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void SetHour(int hour)\n        {\n            if (hour \u0026lt; 0 || hour \u0026gt; 23)\n            {\n                MessageBox.Show(\"The valid range is 0 - 23.\"); // Noncompliant\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Windows.Forms;\n\n\n\n[assembly: NeutralResourcesLanguageAttribute(\"en-US\")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        ResourceManager rm;\n        public Foo()\n        {\n            rm \u003d new ResourceManager(\"en-US\", Assembly.GetExecutingAssembly());\n        }\n\n        public void SetHour(int hour)\n        {\n            if (hour \u0026lt; 0 || hour \u0026gt; 23)\n            {\n                MessageBox.Show(\n                rm.GetString(\"OutOfRangeMessage\", CultureInfo.CurrentUICulture));\n            }\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "localisation",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4057",
    "name": "Locales should be set for data types",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you create a \u003ccode\u003eDataTable\u003c/code\u003e or \u003ccode\u003eDataSet\u003c/code\u003e, you should set the locale explicitly. By default, the locale for these types is\nthe current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant\nculture (\u003ccode\u003eCultureInfo.InvariantCulture\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eSystem.Data.DataTable\u003c/code\u003e or \u003ccode\u003eSystem.Data.DataSet\u003c/code\u003e instances are created without explicitly\nsetting the locale property (\u003ccode\u003eDataTable.Locale\u003c/code\u003e or \u003ccode\u003eDataSet.Locale\u003c/code\u003e).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Data;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table \u003d new DataTable(\"Customers\"); // Noncompliant table.Locale not set\n            DataColumn key \u003d table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull \u003d false;\n            key.Unique \u003d true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Data;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table \u003d new DataTable(\"Customers\");\n            table.Locale \u003d CultureInfo.InvariantCulture;\n            DataColumn key \u003d table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull \u003d false;\n            key.Unique \u003d true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you create a \u003ccode\u003eDataTable\u003c/code\u003e or \u003ccode\u003eDataSet\u003c/code\u003e, you should set the locale explicitly. By default, the locale for these types is\nthe current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant\nculture (\u003ccode\u003eCultureInfo.InvariantCulture\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eSystem.Data.DataTable\u003c/code\u003e or \u003ccode\u003eSystem.Data.DataSet\u003c/code\u003e instances are created without explicitly\nsetting the locale property (\u003ccode\u003eDataTable.Locale\u003c/code\u003e or \u003ccode\u003eDataSet.Locale\u003c/code\u003e).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Data;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table \u003d new DataTable(\"Customers\"); // Noncompliant table.Locale not set\n            DataColumn key \u003d table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull \u003d false;\n            key.Unique \u003d true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Data;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table \u003d new DataTable(\"Customers\");\n            table.Locale \u003d CultureInfo.InvariantCulture;\n            DataColumn key \u003d table.Columns.Add(\"ID\", typeof(Int32));\n\n            key.AllowDBNull \u003d false;\n            key.Unique \u003d true;\n            table.Columns.Add(\"LastName\", typeof(String));\n            table.Columns.Add(\"FirstName\", typeof(String));\n            return table;\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "localisation"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4056",
    "name": "Overloads with a \"CultureInfo\" or an \"IFormatProvider\" parameter should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a \u003ccode\u003eSystem.Globalization.CultureInfo\u003c/code\u003e or \u003ccode\u003eIFormatProvider\u003c/code\u003e object is not supplied, the default value that is supplied by\nthe overloaded member might not have the effect that you want in all locales.\u003c/p\u003e\n\u003cp\u003eYou should supply culture-specific information according to the following guidelines:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the value will be displayed to the user, use the current culture. See \u003ccode\u003eCultureInfo.CurrentCulture\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See\n  \u003ccode\u003eCultureInfo.InvariantCulture\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If you do not know the destination of the value, have the data consumer or provider specify the culture. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when a method or constructor calls one or more members that have overloads that accept a\n\u003ccode\u003eSystem.IFormatProvider\u003c/code\u003e parameter, and the method or constructor does not call the overload that takes the \u003ccode\u003eIFormatProvider\u003c/code\u003e\nparameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter as well as the\nfollowing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eActivator.CreateInstance\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eResourceManager.GetObject\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eResourceManager.GetString\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1)\n        {\n            if(string.Compare(string1, string2, false) \u003d\u003d 0) // Noncompliant\n            {\n                Console.WriteLine(string3.ToLower()); // Noncompliant\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1, String string2, String string3)\n        {\n            if(string.Compare(string1, string2, false,\n                              CultureInfo.InvariantCulture) \u003d\u003d 0)\n            {\n                Console.WriteLine(string3.ToLower(CultureInfo.CurrentCulture));\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue when the overload is marked as obsolete.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a \u003ccode\u003eSystem.Globalization.CultureInfo\u003c/code\u003e or \u003ccode\u003eIFormatProvider\u003c/code\u003e object is not supplied, the default value that is supplied by\nthe overloaded member might not have the effect that you want in all locales.\u003c/p\u003e\n\u003cp\u003eYou should supply culture-specific information according to the following guidelines:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the value will be displayed to the user, use the current culture. See \u003ccode\u003eCultureInfo.CurrentCulture\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See\n  \u003ccode\u003eCultureInfo.InvariantCulture\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If you do not know the destination of the value, have the data consumer or provider specify the culture. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when a method or constructor calls one or more members that have overloads that accept a\n\u003ccode\u003eSystem.IFormatProvider\u003c/code\u003e parameter, and the method or constructor does not call the overload that takes the \u003ccode\u003eIFormatProvider\u003c/code\u003e\nparameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter as well as the\nfollowing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eActivator.CreateInstance\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eResourceManager.GetObject\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eResourceManager.GetString\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1)\n        {\n            if(string.Compare(string1, string2, false) \u003d\u003d 0) // Noncompliant\n            {\n                Console.WriteLine(string3.ToLower()); // Noncompliant\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1, String string2, String string3)\n        {\n            if(string.Compare(string1, string2, false,\n                              CultureInfo.InvariantCulture) \u003d\u003d 0)\n            {\n                Console.WriteLine(string3.ToLower(CultureInfo.CurrentCulture));\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue when the overload is marked as obsolete.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "localisation",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4059",
    "name": "Property names should not match get methods",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties and Get method should have names that makes them clearly distinguishable.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of a public or protected member starts with \u0027Get\u0027 and otherwise matches the name of a public or protected\nproperty.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDate() // Noncompliant\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDateAsString()\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties and Get method should have names that makes them clearly distinguishable.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of a public or protected member starts with \u0027Get\u0027 and otherwise matches the name of a public or protected\nproperty.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDate() // Noncompliant\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDateAsString()\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4058",
    "name": "Overloads with a \"StringComparison\" parameter should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMany string operations, the \u003ccode\u003eCompare\u003c/code\u003e and \u003ccode\u003eEquals\u003c/code\u003e methods in particular, provide an overload that accepts a\n\u003ccode\u003eStringComparison\u003c/code\u003e enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code\nclearer and easier to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string comparison operation doesn’t use the overload that takes a \u003ccode\u003eStringComparison\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2) \u003d\u003d 0; // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2, StringComparison.OrdinalIgnoreCase) \u003d\u003d 0;\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMany string operations, the \u003ccode\u003eCompare\u003c/code\u003e and \u003ccode\u003eEquals\u003c/code\u003e methods in particular, provide an overload that accepts a\n\u003ccode\u003eStringComparison\u003c/code\u003e enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code\nclearer and easier to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string comparison operation doesn’t use the overload that takes a \u003ccode\u003eStringComparison\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2) \u003d\u003d 0; // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2, StringComparison.OrdinalIgnoreCase) \u003d\u003d 0;\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6580",
    "name": "Use a format provider when parsing date and time",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eWhen converting a string representation of a date and time to a \u003ccode\u003eDateTime\u003c/code\u003e object or any other temporal type with one of the available\nsystem parsing methods, you should always provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf you try to parse a string representation of a date or time without a format provider, the method will use the machine’s\n\u003ccode\u003eCultureInfo\u003c/code\u003e; if the given string does not follow it, you’ll have an object that does not match the string representation or an unexpected\nruntime error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for the following date and time string representation parsing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eParseExact\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParseExact\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOf the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTime\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTimeOffset\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeSpan\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eAlway use an overload of the parse method, where you can provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar dateTimeString \u003d \"4/12/2023 4:05:48 PM\"; // This is an en-US format string - 12 of April 2023\nvar dateTimeObject \u003d DateTime.Parse(dateTimeString); // This is wrongly parsed as 4th of December, when it\u0027s read in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe)\n\nvar dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\"; // This is an en-US format string - 13 of April 2023\nvar dateTimeObject2 \u003d DateTime.Parse(dateTimeString2); // Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\nvar timeInSaudiArabia \u003d new TimeOnly(16, 23).ToString(new CultureInfo(\"ar-SA\"));\nvar timeObject \u003d TimeOnly.Parse(timeInSaudiArabia); // Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar dateTimeString \u003d \"4/12/2023 4:05:48 PM\"; // This is an en-US format string - 12 of April 2023\nvar dateTimeObject \u003d DateTime.Parse(dateTimeString, new CultureInfo(\"en-US\"));\n\nvar dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\"; // This is an en-US format string - 13 of April 2023\nvar dateTimeObject2 \u003d DateTime.Parse(dateTimeString2, new CultureInfo(\"en-US\"))\n\nvar timeInSaudiArabia \u003d new TimeOnly(16, 23).ToString(new CultureInfo(\"ar-SA\"));\nvar timeObject \u003d TimeOnly.Parse(timeInSaudiArabia, new CultureInfo(\"ar-SA\"));\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse\"\u003eDateTime.Parse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact\"\u003eDateTime.ParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse\"\u003eDateTime.TryParse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact\"\u003eDateTime.TryParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eDateOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eDateTime type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eTimeOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eTimeSpan type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCulture Info class documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eWhen converting a string representation of a date and time to a \u003ccode\u003eDateTime\u003c/code\u003e object or any other temporal type with one of the available\nsystem parsing methods, you should always provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf you try to parse a string representation of a date or time without a format provider, the method will use the machine’s\n\u003ccode\u003eCultureInfo\u003c/code\u003e; if the given string does not follow it, you’ll have an object that does not match the string representation or an unexpected\nruntime error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for the following date and time string representation parsing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eParseExact\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParseExact\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOf the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTime\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTimeOffset\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeSpan\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAlway use an overload of the parse method, where you can provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar dateTimeString \u003d \"4/12/2023 4:05:48 PM\"; // This is an en-US format string - 12 of April 2023\nvar dateTimeObject \u003d DateTime.Parse(dateTimeString); // This is wrongly parsed as 4th of December, when it\u0027s read in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe)\n\nvar dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\"; // This is an en-US format string - 13 of April 2023\nvar dateTimeObject2 \u003d DateTime.Parse(dateTimeString2); // Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\nvar timeInSaudiArabia \u003d new TimeOnly(16, 23).ToString(new CultureInfo(\"ar-SA\"));\nvar timeObject \u003d TimeOnly.Parse(timeInSaudiArabia); // Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar dateTimeString \u003d \"4/12/2023 4:05:48 PM\"; // This is an en-US format string - 12 of April 2023\nvar dateTimeObject \u003d DateTime.Parse(dateTimeString, new CultureInfo(\"en-US\"));\n\nvar dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\"; // This is an en-US format string - 13 of April 2023\nvar dateTimeObject2 \u003d DateTime.Parse(dateTimeString2, new CultureInfo(\"en-US\"))\n\nvar timeInSaudiArabia \u003d new TimeOnly(16, 23).ToString(new CultureInfo(\"ar-SA\"));\nvar timeObject \u003d TimeOnly.Parse(timeInSaudiArabia, new CultureInfo(\"ar-SA\"));\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse\"\u003eDateTime.Parse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact\"\u003eDateTime.ParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse\"\u003eDateTime.TryParse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact\"\u003eDateTime.TryParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eDateOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eDateTime type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eTimeOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eTimeSpan type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCulture Info class documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4040",
    "name": "Strings should be normalized to uppercase",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCertain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then\naccurately restored to their original characters.\u003c/p\u003e\n\u003cp\u003eIt is therefore strongly recommended to normalize characters and strings to uppercase instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nThread.CurrentThread.CurrentCulture \u003d new CultureInfo(\"tr-TR\");\nvar areStringEqual \u003d \"INTEGER\".ToLower() \u003d\u003d \"integer\"; // Noncompliant, the result is false as the ToLower will resolve to \"ınteger\"\nvar areCharEqual \u003d char.ToLower(\u0027I\u0027) \u003d\u003d \u0027i\u0027; // Noncompliant, the result is false as the ToLower will resolve to \"ı\"\n\nvar incorrectRoundtrip \u003d \"İ\".ToLowerInvariant().ToUpper() \u003d\u003d \"I\".ToLowerInvariant().ToUpper(); // Noncompliant, because of the lower we lose the information about the correct uppercase character\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nThread.CurrentThread.CurrentCulture \u003d new CultureInfo(\"tr-TR\");\nvar areStringEqual \u003d \"ınteger\".ToUpperInvariant() \u003d\u003d \"ıNTEGER\";\nvar areCharEqual \u003d char.ToUpperInvariant(\u0027ı\u0027) \u003d\u003d \u0027ı\u0027;\nvar correctRoundtrip \u003d \"İ\".ToUpperInvariant().ToLower() !\u003d \"I\".ToUpperInvariant().ToLower();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://www.i18nguy.com/unicode/turkish-i18n.html\"\u003eInternationalization for Turkish\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/\"\u003eHow to correctly normalize\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage\"\u003eBest Practices\n  for Using Strings in .NET\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCertain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then\naccurately restored to their original characters.\u003c/p\u003e\n\u003cp\u003eIt is therefore strongly recommended to normalize characters and strings to uppercase instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nThread.CurrentThread.CurrentCulture \u003d new CultureInfo(\"tr-TR\");\nvar areStringEqual \u003d \"INTEGER\".ToLower() \u003d\u003d \"integer\"; // Noncompliant, the result is false as the ToLower will resolve to \"ınteger\"\nvar areCharEqual \u003d char.ToLower(\u0027I\u0027) \u003d\u003d \u0027i\u0027; // Noncompliant, the result is false as the ToLower will resolve to \"ı\"\n\nvar incorrectRoundtrip \u003d \"İ\".ToLowerInvariant().ToUpper() \u003d\u003d \"I\".ToLowerInvariant().ToUpper(); // Noncompliant, because of the lower we lose the information about the correct uppercase character\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nThread.CurrentThread.CurrentCulture \u003d new CultureInfo(\"tr-TR\");\nvar areStringEqual \u003d \"ınteger\".ToUpperInvariant() \u003d\u003d \"ıNTEGER\";\nvar areCharEqual \u003d char.ToUpperInvariant(\u0027ı\u0027) \u003d\u003d \u0027ı\u0027;\nvar correctRoundtrip \u003d \"İ\".ToUpperInvariant().ToLower() !\u003d \"I\".ToUpperInvariant().ToLower();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://www.i18nguy.com/unicode/turkish-i18n.html\"\u003eInternationalization for Turkish\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/\"\u003eHow to correctly normalize\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage\"\u003eBest Practices\n  for Using Strings in .NET\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6585",
    "name": "Don\u0027t hardcode the format when turning dates and times to strings",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHardcoding the date and time format strings can lead to formats that consumers misunderstand. Also, if the same format is meant to be used in\nmultiple places, it is easier to make a mistake when it’s hardcoded instead of using a format provided by an \u003ccode\u003eIFormatProvider\u003c/code\u003e or using one\nof the standard format strings.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a non-conventional format is used, the formatted date and time can be misunderstood. Also, if a mistake is made in the format, the formatted\ndate can be incomplete. For example, you might switch the place of the minutes and month parts of a date or simply forget to print the year.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of hardcoding the format, provide one from the available formats through an \u003ccode\u003eIFormatProvider\u003c/code\u003e or use one of the standard format\nstrings.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid PrintTime()\n{\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/MM/yyyy HH:mm:ss\"));\n\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/mm/yyyy HH:MM:ss\")); // Months and minutes have changed their places\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid PrintTime()\n{\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.GetCultureInfo(\"es-MX\")));\n\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)); // Better provide a well known culture, so this kind of issues do not pop up\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iformatprovider\"\u003eIFormatProvider documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCultureInfo documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\"\u003eCustom date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings\"\u003eStandard TimeSpan format strings\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings\"\u003eCustom TimeSpan format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHardcoding the date and time format strings can lead to formats that consumers misunderstand. Also, if the same format is meant to be used in\nmultiple places, it is easier to make a mistake when it’s hardcoded instead of using a format provided by an \u003ccode\u003eIFormatProvider\u003c/code\u003e or using one\nof the standard format strings.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a non-conventional format is used, the formatted date and time can be misunderstood. Also, if a mistake is made in the format, the formatted\ndate can be incomplete. For example, you might switch the place of the minutes and month parts of a date or simply forget to print the year.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of hardcoding the format, provide one from the available formats through an \u003ccode\u003eIFormatProvider\u003c/code\u003e or use one of the standard format\nstrings.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid PrintTime()\n{\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/MM/yyyy HH:mm:ss\"));\n\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/mm/yyyy HH:MM:ss\")); // Months and minutes have changed their places\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid PrintTime()\n{\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.GetCultureInfo(\"es-MX\")));\n\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)); // Better provide a well known culture, so this kind of issues do not pop up\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iformatprovider\"\u003eIFormatProvider documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCultureInfo documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\"\u003eCustom date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings\"\u003eStandard TimeSpan format strings\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings\"\u003eCustom TimeSpan format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4041",
    "name": "Type names should not match namespaces",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and\nmakes the library that much harder to use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a\ncase-insensitive comparison.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Text   // Noncompliant: Collides with System.Text\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyText\n  {\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and\nmakes the library that much harder to use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a\ncase-insensitive comparison.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Text   // Noncompliant: Collides with System.Text\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyText\n  {\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6588",
    "name": "Use the \"UnixEpoch\" field instead of creating \"DateTime\" instances that point to the beginning of the Unix epoch",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWith .NET Core the \u003ccode\u003eUnixEpoch\u003c/code\u003e field was introduced to \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e types. Using this field\nclearly states that the intention is to use the beginning of the Unix epoch.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou should not use the \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e constructors to set the time to the 1st of January 1970 to represent\nthe beginning of the Unix epoch. Not everyone is familiar with what this particular date is representing and it can be misleading.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, use the \u003ccode\u003eUnixEpoch\u003c/code\u003e field of \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of the constructor.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid GetEpochTime()\n{\n    var epochTime \u003d new DateTime(1970, 1, 1);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid GetEpochTime()\n{\n    var epochTime \u003d DateTime.UnixEpoch;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.unixepoch\"\u003eDateTime.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.unixepoch\"\u003eDateTimeOffset.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix time\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWith .NET Core the \u003ccode\u003eUnixEpoch\u003c/code\u003e field was introduced to \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e types. Using this field\nclearly states that the intention is to use the beginning of the Unix epoch.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou should not use the \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e constructors to set the time to the 1st of January 1970 to represent\nthe beginning of the Unix epoch. Not everyone is familiar with what this particular date is representing and it can be misleading.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, use the \u003ccode\u003eUnixEpoch\u003c/code\u003e field of \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of the constructor.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid GetEpochTime()\n{\n    var epochTime \u003d new DateTime(1970, 1, 1);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid GetEpochTime()\n{\n    var epochTime \u003d DateTime.UnixEpoch;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.unixepoch\"\u003eDateTime.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.unixepoch\"\u003eDateTimeOffset.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix time\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4047",
    "name": "Generics should be used when appropriate",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a reference parameter (keyword \u003ccode\u003eref\u003c/code\u003e) is used, the passed argument type must exactly match the reference parameter type. This means\nthat to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that\ncumbersome down casting and should therefore be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method contains a \u003ccode\u003eref\u003c/code\u003e parameter of type \u003ccode\u003eSystem.Object\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar(ref object o1, ref object o2) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar\u0026lt;T\u0026gt;(ref T ref1, ref T ref2)\n    {\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a reference parameter (keyword \u003ccode\u003eref\u003c/code\u003e) is used, the passed argument type must exactly match the reference parameter type. This means\nthat to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that\ncumbersome down casting and should therefore be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method contains a \u003ccode\u003eref\u003c/code\u003e parameter of type \u003ccode\u003eSystem.Object\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar(ref object o1, ref object o2) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar\u0026lt;T\u0026gt;(ref T ref1, ref T ref2)\n    {\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4049",
    "name": "Properties should be preferred",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties are accessed like fields which makes them easier to use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e method starts with \u003ccode\u003eGet\u003c/code\u003e, takes no parameter,\nand returns a value that is not an array.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        private string name;\n\n        public string GetName()  // Noncompliant\n        {\n            return name;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        private string name;\n\n        public string Name\n        {\n            get\n            {\n                return name;\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue when the method:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Is a constructor \u003c/li\u003e\n  \u003cli\u003e Is an \u003ccode\u003eoverride\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Is an interface implementation \u003c/li\u003e\n  \u003cli\u003e Is \u003ccode\u003easync\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Returns \u003ccode\u003eTask\u003c/code\u003e, \u003ccode\u003eTask\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Is named \u003ccode\u003eGetEnumerator\u003c/code\u003e, \u003ccode\u003eGetAwaiter\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties are accessed like fields which makes them easier to use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e method starts with \u003ccode\u003eGet\u003c/code\u003e, takes no parameter,\nand returns a value that is not an array.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        private string name;\n\n        public string GetName()  // Noncompliant\n        {\n            return name;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        private string name;\n\n        public string Name\n        {\n            get\n            {\n                return name;\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue when the method:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Is a constructor \u003c/li\u003e\n  \u003cli\u003e Is an \u003ccode\u003eoverride\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Is an interface implementation \u003c/li\u003e\n  \u003cli\u003e Is \u003ccode\u003easync\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Returns \u003ccode\u003eTask\u003c/code\u003e, \u003ccode\u003eTask\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Is named \u003ccode\u003eGetEnumerator\u003c/code\u003e, \u003ccode\u003eGetAwaiter\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2291",
    "name": "Overflow checking should not be disabled for \"Enumerable.Sum\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum\"\u003eEnumerable.Sum()\u003c/a\u003e always executes addition in a\n\u003ccode\u003echecked\u003c/code\u003e context, so an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.overflowexception\"\u003eOverflowException\u003c/a\u003e will be\nthrown if the value exceeds \u003ccode\u003eMaxValue\u003c/code\u003e, even if an \u003ccode\u003eunchecked\u003c/code\u003e context was specified. Therefore, using this method inside an\n\u003ccode\u003eunchecked\u003c/code\u003e context will only make the code more confusing, since the behavior will still be \u003ccode\u003echecked\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eunchecked\u003c/code\u003e context is specified for a \u003ccode\u003eSum\u003c/code\u003e on integer types.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen the \u003ccode\u003eSum\u003c/code\u003e call is inside a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003etry-catch block\u003c/a\u003e,\nno issues are reported, since the exception is properly handled.\u003c/p\u003e\n\u003cpre\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  unchecked\n  {\n    try\n    {\n      int total \u003d list.Sum();\n    }\n    catch (System.OverflowException e)\n    {\n      // Exception handling\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the \u003ccode\u003eunchecked\u003c/code\u003e operator/statement, and optionally add some exception handling for the \u003ccode\u003eOverflowException\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  int total1 \u003d unchecked(list.Sum());  // Noncompliant\n\n  unchecked\n  {\n    int total2 \u003d list.Sum();  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  int total1 \u003d list.Sum();\n\n  try\n  {\n    int total2 \u003d list.Sum();\n  }\n  catch (System.OverflowException e)\n  {\n    // Exception handling\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum\"\u003e\u003ccode\u003eEnumerable.Sum\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/microsoft/referencesource/blob/51cf7850defa8a17d815b4700b67116e3fa283c2/System.Core/System/Linq/Enumerable.cs#L1408-L1415\"\u003e\u003ccode\u003eEnumerable.Sum\u003c/code\u003e implementation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/checked-and-unchecked\"\u003e\u003ccode\u003echecked\u003c/code\u003e and\n  \u003ccode\u003eunchecked\u003c/code\u003e statements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#12819-the-checked-and-unchecked-operators\"\u003e\u003ccode\u003echecked\u003c/code\u003e and \u003ccode\u003eunchecked\u003c/code\u003e operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.overflowexception\"\u003e\u003ccode\u003eOverflowException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Integer_overflow\"\u003eInteger overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum\"\u003eEnumerable.Sum()\u003c/a\u003e always executes addition in a\n\u003ccode\u003echecked\u003c/code\u003e context, so an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.overflowexception\"\u003eOverflowException\u003c/a\u003e will be\nthrown if the value exceeds \u003ccode\u003eMaxValue\u003c/code\u003e, even if an \u003ccode\u003eunchecked\u003c/code\u003e context was specified. Therefore, using this method inside an\n\u003ccode\u003eunchecked\u003c/code\u003e context will only make the code more confusing, since the behavior will still be \u003ccode\u003echecked\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eunchecked\u003c/code\u003e context is specified for a \u003ccode\u003eSum\u003c/code\u003e on integer types.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen the \u003ccode\u003eSum\u003c/code\u003e call is inside a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003etry-catch block\u003c/a\u003e,\nno issues are reported, since the exception is properly handled.\u003c/p\u003e\n\u003cpre\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  unchecked\n  {\n    try\n    {\n      int total \u003d list.Sum();\n    }\n    catch (System.OverflowException e)\n    {\n      // Exception handling\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove the \u003ccode\u003eunchecked\u003c/code\u003e operator/statement, and optionally add some exception handling for the \u003ccode\u003eOverflowException\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  int total1 \u003d unchecked(list.Sum());  // Noncompliant\n\n  unchecked\n  {\n    int total2 \u003d list.Sum();  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Add(List\u0026lt;int\u0026gt; list)\n{\n  int total1 \u003d list.Sum();\n\n  try\n  {\n    int total2 \u003d list.Sum();\n  }\n  catch (System.OverflowException e)\n  {\n    // Exception handling\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum\"\u003e\u003ccode\u003eEnumerable.Sum\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/microsoft/referencesource/blob/51cf7850defa8a17d815b4700b67116e3fa283c2/System.Core/System/Linq/Enumerable.cs#L1408-L1415\"\u003e\u003ccode\u003eEnumerable.Sum\u003c/code\u003e implementation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/checked-and-unchecked\"\u003e\u003ccode\u003echecked\u003c/code\u003e and\n  \u003ccode\u003eunchecked\u003c/code\u003e statements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#12819-the-checked-and-unchecked-operators\"\u003e\u003ccode\u003echecked\u003c/code\u003e and \u003ccode\u003eunchecked\u003c/code\u003e operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.overflowexception\"\u003e\u003ccode\u003eOverflowException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Integer_overflow\"\u003eInteger overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2290",
    "name": "Field-like events should not be virtual",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/event-pattern#define-and-raise-field-like-events\"\u003eField-like\u003c/a\u003e events are events that do\nnot have explicit \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e accessors.\u003c/p\u003e\n\u003cpre\u003e\npublic event EventHandler MyEvent; // No add and remove accessors\n\u003c/pre\u003e\n\u003cp\u003eThe compiler generates a \u003ccode\u003eprivate\u003c/code\u003e \u003ccode\u003edelegate\u003c/code\u003e field to back the event, as well as generating the implicit \u003ccode\u003eadd\u003c/code\u003e\nand \u003ccode\u003eremove\u003c/code\u003e accessors.\u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003evirtual\u003c/code\u003e field-like \u003ccode\u003eevent\u003c/code\u003e is overridden by another field-like \u003ccode\u003eevent\u003c/code\u003e, the behavior of the C# compiler\nis to generate a new \u003ccode\u003eprivate\u003c/code\u003e \u003ccode\u003edelegate\u003c/code\u003e field in the derived class, separate from the parent’s field. This results in multiple\nand separate events being created, which is rarely what’s actually intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nabstract class Car\n{\n  public virtual event EventHandler OnRefuel; // Noncompliant\n\n  public void Refuel()\n  {\n    // This OnRefuel will always be null\n     if (OnRefuel !\u003d null)\n     {\n       OnRefuel(this, EventArgs.Empty);\n     }\n  }\n}\n\nclass R2 : Car\n{\n  public override event EventHandler OnRefuel;\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 \u003d new R2();\n    r2.OnRefuel +\u003d (o, a) \u003d\u0026gt;\n    {\n        Console.WriteLine(\"This event will be called\");\n    };\n    r2.Refuel();\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eTo prevent this, remove the \u003ccode\u003evirtual\u003c/code\u003e designation from the parent class event.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nabstract class Car\n{\n  public event EventHandler OnRefuel; // Compliant\n\n  public void Refuel()\n  {\n    if (OnRefuel !\u003d null)\n    {\n      OnRefuel(this, EventArgs.Empty);\n    }\n  }\n}\n\nclass R2 : Car\n{\n\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 \u003d new R2();\n    r2.OnRefuel +\u003d (o, a) \u003d\u0026gt;\n    {\n        Console.WriteLine(\"This event will be called\");\n    };\n    r2.Refuel();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003eAdd keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003eRemove keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/delegate-class\"\u003eDelegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/events-overview\"\u003eIntroduction to events\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/event-pattern#define-and-raise-field-like-events\"\u003eField-like events\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/event-pattern#define-and-raise-field-like-events\"\u003eField-like\u003c/a\u003e events are events that do\nnot have explicit \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e accessors.\u003c/p\u003e\n\u003cpre\u003e\npublic event EventHandler MyEvent; // No add and remove accessors\n\u003c/pre\u003e\n\u003cp\u003eThe compiler generates a \u003ccode\u003eprivate\u003c/code\u003e \u003ccode\u003edelegate\u003c/code\u003e field to back the event, as well as generating the implicit \u003ccode\u003eadd\u003c/code\u003e\nand \u003ccode\u003eremove\u003c/code\u003e accessors.\u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003evirtual\u003c/code\u003e field-like \u003ccode\u003eevent\u003c/code\u003e is overridden by another field-like \u003ccode\u003eevent\u003c/code\u003e, the behavior of the C# compiler\nis to generate a new \u003ccode\u003eprivate\u003c/code\u003e \u003ccode\u003edelegate\u003c/code\u003e field in the derived class, separate from the parent’s field. This results in multiple\nand separate events being created, which is rarely what’s actually intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nabstract class Car\n{\n  public virtual event EventHandler OnRefuel; // Noncompliant\n\n  public void Refuel()\n  {\n    // This OnRefuel will always be null\n     if (OnRefuel !\u003d null)\n     {\n       OnRefuel(this, EventArgs.Empty);\n     }\n  }\n}\n\nclass R2 : Car\n{\n  public override event EventHandler OnRefuel;\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 \u003d new R2();\n    r2.OnRefuel +\u003d (o, a) \u003d\u0026gt;\n    {\n        Console.WriteLine(\"This event will be called\");\n    };\n    r2.Refuel();\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eTo prevent this, remove the \u003ccode\u003evirtual\u003c/code\u003e designation from the parent class event.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nabstract class Car\n{\n  public event EventHandler OnRefuel; // Compliant\n\n  public void Refuel()\n  {\n    if (OnRefuel !\u003d null)\n    {\n      OnRefuel(this, EventArgs.Empty);\n    }\n  }\n}\n\nclass R2 : Car\n{\n\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 \u003d new R2();\n    r2.OnRefuel +\u003d (o, a) \u003d\u0026gt;\n    {\n        Console.WriteLine(\"This event will be called\");\n    };\n    r2.Refuel();\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003eAdd keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003eRemove keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/delegate-class\"\u003eDelegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/events-overview\"\u003eIntroduction to events\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/event-pattern#define-and-raise-field-like-events\"\u003eField-like events\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3261",
    "name": "Namespaces should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNamespaces with no lines of code clutter a project and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace MyEmptyNamespace // Noncompliant\n{\n\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNamespaces with no lines of code clutter a project and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace MyEmptyNamespace // Noncompliant\n{\n\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3260",
    "name": "Non-derived \"private\" classes and records should be \"sealed\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eClasses and records with either \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003efile\u003c/code\u003e access modifiers aren’t visible outside of their assemblies or files, so\nif they’re not extended inside their scope, they should be made explicitly non-extensible with the addition of the \u003ccode\u003esealed\u003c/code\u003e keyword.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe code can be improved by adding the \u003ccode\u003esealed\u003c/code\u003e keyword in front of the \u003ccode\u003eclass\u003c/code\u003e or \u003ccode\u003erecord\u003c/code\u003e types that have no\ninheritors.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfile class MyClass  // Noncompliant\n{\n  // ...\n}\n\nfile record MyRecord  // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfile sealed class MyClass\n{\n  // ...\n}\n\nfile sealed record MyRecord\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003eThe \u003ccode\u003esealed\u003c/code\u003e keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://code-maze.com/improve-performance-sealed-classes-dotnet\"\u003eBoosting Performance With Sealed Classes in .NET\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/#peanut-butter\"\u003ePerformance Improvements in .NET 6\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 5.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e918.7 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10.72 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 5.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e231.2 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.20 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.25\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 6.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e867.9 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.65 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 6.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e218.4 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.25\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,074.5 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.15 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e216.1 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.19 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.20\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(1_000_000)]\npublic int Iterations { get; set; }\n\nprivate readonly UnsealedClass unsealedType \u003d new UnsealedClass();\nprivate readonly SealedClass sealedType \u003d new SealedClass();\n\n[Benchmark(Baseline \u003d true)]\npublic void UnsealedType()\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        unsealedType.DoNothing();\n    }\n}\n\n[Benchmark]\npublic void SealedType()\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        sealedType.DoNothing();\n    }\n}\n\nprivate class BaseType\n{\n    public virtual void DoNothing() { }\n}\n\nprivate class UnsealedClass : BaseType\n{\n    public override void DoNothing() { }\n}\n\nprivate sealed class SealedClass : BaseType\n{\n    public override void DoNothing() { }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware Configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 5.0 : .NET 5.0.17 (5.0.1722.21314), X64 RyuJIT AVX2\n  .NET 6.0 : .NET 6.0.16 (6.0.1623.17311), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eClasses and records with either \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003efile\u003c/code\u003e access modifiers aren’t visible outside of their assemblies or files, so\nif they’re not extended inside their scope, they should be made explicitly non-extensible with the addition of the \u003ccode\u003esealed\u003c/code\u003e keyword.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe code can be improved by adding the \u003ccode\u003esealed\u003c/code\u003e keyword in front of the \u003ccode\u003eclass\u003c/code\u003e or \u003ccode\u003erecord\u003c/code\u003e types that have no\ninheritors.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate class MyClass  // Noncompliant\n{\n  // ...\n}\n\nprivate record MyRecord  // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfile class MyClass  // Noncompliant\n{\n  // ...\n}\n\nfile record MyRecord  // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate sealed class MyClass\n{\n  // ...\n}\n\nprivate sealed record MyRecord\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfile sealed class MyClass\n{\n  // ...\n}\n\nfile sealed record MyRecord\n{\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003eThe \u003ccode\u003esealed\u003c/code\u003e keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://code-maze.com/improve-performance-sealed-classes-dotnet\"\u003eBoosting Performance With Sealed Classes in .NET\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/#peanut-butter\"\u003ePerformance Improvements in .NET 6\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 5.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e918.7 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10.72 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 5.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e231.2 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.20 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.25\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 6.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e867.9 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.65 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 6.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e218.4 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.25\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUnsealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,074.5 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.15 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSealedType\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e216.1 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.19 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.20\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(1_000_000)]\npublic int Iterations { get; set; }\n\nprivate readonly UnsealedClass unsealedType \u003d new UnsealedClass();\nprivate readonly SealedClass sealedType \u003d new SealedClass();\n\n[Benchmark(Baseline \u003d true)]\npublic void UnsealedType()\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        unsealedType.DoNothing();\n    }\n}\n\n[Benchmark]\npublic void SealedType()\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        sealedType.DoNothing();\n    }\n}\n\nprivate class BaseType\n{\n    public virtual void DoNothing() { }\n}\n\nprivate class UnsealedClass : BaseType\n{\n    public override void DoNothing() { }\n}\n\nprivate sealed class SealedClass : BaseType\n{\n    public override void DoNothing() { }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware Configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 5.0 : .NET 5.0.17 (5.0.1722.21314), X64 RyuJIT AVX2\n  .NET 6.0 : .NET 6.0.16 (6.0.1623.17311), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2292",
    "name": "Trivial properties should be auto-implemented",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTrivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding\ncleaner and more readable code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n  private string _make;\n  public string Make // Noncompliant\n  {\n    get { return _make; }\n    set { _make \u003d value; }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n  public string Make { get; set; }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTrivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding\ncleaner and more readable code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n  private string _make;\n  public string Make // Noncompliant\n  {\n    get { return _make; }\n    set { _make \u003d value; }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n  public string Make { get; set; }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3263",
    "name": "Static fields should appear in the order they must be initialized",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eStatic field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class\nabove the field or fields required for its initialization will yield unexpected results.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int X \u003d Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\n  public static int Y \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int Y \u003d 42;\n  public static int X \u003d Y;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int X;\n  public static int Y \u003d 42;\n\n  static MyClass()\n  {\n    X \u003d Y;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eStatic field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class\nabove the field or fields required for its initialization will yield unexpected results.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int X \u003d Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\n  public static int Y \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int Y \u003d 42;\n  public static int X \u003d Y;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  public static int X;\n  public static int Y \u003d 42;\n\n  static MyClass()\n  {\n    X \u003d Y;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2053",
    "name": "Hashes should include an unpredictable salt",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuring the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.\u003c/p\u003e\n\u003cp\u003eHowever, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDespite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.\u003c/p\u003e\n\u003cp\u003eOnce the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.\u003c/p\u003e\n\u003cp\u003eIf multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.\u003c/p\u003e\n\u003cp\u003eA short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.\u003c/p\u003e\n\u003cp\u003eWith short salts, the probability of a collision between two users\u0027 passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of hard-coded salts.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic static void hash(string password)\n{\n    var salt \u003d Encoding.UTF8.GetBytes(\"salty\");\n    var hashed \u003d new Rfc2898DeriveBytes(password, salt); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic static void hash(string password)\n{\n    var hashed \u003d new Rfc2898DeriveBytes(password, 16);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThis code ensures that each user’s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 16 bytes (128 bits), as recommended by industry standards.\u003c/p\u003e\n\u003cp\u003eIn the case of the code sample, the class automatically takes care of generating a secure salt if none is specified.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/759\"\u003eCWE-759 - Use of a One-Way Hash without a Salt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/760\"\u003eCWE-760 - Use of a One-Way Hash with a Predictable Salt\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuring the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.\u003c/p\u003e\n\u003cp\u003eHowever, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDespite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.\u003c/p\u003e\n\u003cp\u003eOnce the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.\u003c/p\u003e\n\u003cp\u003eIf multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.\u003c/p\u003e\n\u003cp\u003eA short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.\u003c/p\u003e\n\u003cp\u003eWith short salts, the probability of a collision between two users\u0027 passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of hard-coded salts.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic static void hash(string password)\n{\n    var salt \u003d Encoding.UTF8.GetBytes(\"salty\");\n    var hashed \u003d new Rfc2898DeriveBytes(password, salt); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic static void hash(string password)\n{\n    var hashed \u003d new Rfc2898DeriveBytes(password, 16);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThis code ensures that each user’s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 16 bytes (128 bits), as recommended by industry standards.\u003c/p\u003e\n\u003cp\u003eIn the case of the code sample, the class automatically takes care of generating a secure salt if none is specified.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/759\"\u003eCWE-759 - Use of a One-Way Hash without a Salt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/760\"\u003eCWE-760 - Use of a One-Way Hash with a Predictable Salt\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3262",
    "name": "\"params\" should be used on overrides",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOverriding methods automatically inherit the \u003ccode\u003eparams\u003c/code\u003e behavior. To ease readability, this modifier should be explicitly used in the\noverriding method as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOverriding methods automatically inherit the \u003ccode\u003eparams\u003c/code\u003e behavior. To ease readability, this modifier should be explicitly used in the\noverriding method as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6419",
    "name": "Azure Functions should be stateless",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn Azure Function should be stateless as there’s no control over where and when function instances are provisioned and de-provisioned. Managing and\nstoring data/state between requests can lead to inconsistencies. If, for any reason, you need to have a stateful function, consider using the Durable\nFunctions extension of Azure Functions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    public static class HttpExample\n    {\n        private static readonly int port \u003d 2000;\n        private static int numOfRequests \u003d 1;\n\n        [FunctionName(\"HttpExample\")]\n        public static async Task\u0026lt;IActionResult\u0026gt; Run( [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, ILogger log)\n        {\n            numOfRequests +\u003d 1; // Noncompliant\n            log.LogInformation($\"Number of POST requests is {numOfRequests}.\");\n\n            string responseMessage \u003d $\"HttpRequest was made on port {port}.\"; // Compliant, state is only read.\n\n            return new OkObjectResult(responseMessage);\n        }\n    }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    public static class HttpExample\n    {\n        private static readonly int port \u003d 2000;\n\n        [FunctionName(\"HttpExample\")]\n        public static async Task\u0026lt;IActionResult\u0026gt; Run( [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, ILogger log)\n        {\n            // A compliant solution would be to manage the `numOfRequests` with an entity function or would use storage (e.g., Azure Blob storage, Azure Queue Storage)\n            // to share the state between functions.\n\n            string responseMessage \u003d $\"HttpRequest was made on port {port}.\";\n\n            return new OkObjectResult(responseMessage);\n        }\n    }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/performance-reliability#write-functions-to-be-stateless\"\u003eImprove the\n  performance and reliability of Azure Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs\u003dcsharp\"\u003eDurable Functions Overview\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-entities?tabs\u003dcsharp\"\u003eDurable Functions - Entity\n  Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/storage-considerations\"\u003eStorage considerations for Azure Functions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn Azure Function should be stateless as there’s no control over where and when function instances are provisioned and de-provisioned. Managing and\nstoring data/state between requests can lead to inconsistencies. If, for any reason, you need to have a stateful function, consider using the Durable\nFunctions extension of Azure Functions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    public static class HttpExample\n    {\n        private static readonly int port \u003d 2000;\n        private static int numOfRequests \u003d 1;\n\n        [FunctionName(\"HttpExample\")]\n        public static async Task\u0026lt;IActionResult\u0026gt; Run( [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, ILogger log)\n        {\n            numOfRequests +\u003d 1; // Noncompliant\n            log.LogInformation($\"Number of POST requests is {numOfRequests}.\");\n\n            string responseMessage \u003d $\"HttpRequest was made on port {port}.\"; // Compliant, state is only read.\n\n            return new OkObjectResult(responseMessage);\n        }\n    }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    public static class HttpExample\n    {\n        private static readonly int port \u003d 2000;\n\n        [FunctionName(\"HttpExample\")]\n        public static async Task\u0026lt;IActionResult\u0026gt; Run( [HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, ILogger log)\n        {\n            // A compliant solution would be to manage the `numOfRequests` with an entity function or would use storage (e.g., Azure Blob storage, Azure Queue Storage)\n            // to share the state between functions.\n\n            string responseMessage \u003d $\"HttpRequest was made on port {port}.\";\n\n            return new OkObjectResult(responseMessage);\n        }\n    }\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/performance-reliability#write-functions-to-be-stateless\"\u003eImprove the\n  performance and reliability of Azure Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs\u003dcsharp\"\u003eDurable Functions Overview\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-entities?tabs\u003dcsharp\"\u003eDurable Functions - Entity\n  Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/storage-considerations\"\u003eStorage considerations for Azure Functions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "azure",
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S100",
    "name": "Methods and properties should be named in PascalCase",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method or a property name is not PascalCased.\u003c/p\u003e\n\u003cp\u003eFor example, the method\u003c/p\u003e\n\u003cpre\u003e\npublic int doSomething() {...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\npublic int DoSomething() {...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule ignores members in types marked with \u003ccode\u003eComImportAttribute\u003c/code\u003e or \u003ccode\u003eInterfaceTypeAttribute\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e The rule ignores \u003ccode\u003eextern\u003c/code\u003e methods. \u003c/li\u003e\n  \u003cli\u003e To reduce noise, two consecutive upper-case characters are allowed unless they form the full name. So, \u003ccode\u003eMyXMethod\u003c/code\u003e is compliant, but\n  \u003ccode\u003eXM\u003c/code\u003e is not. \u003c/li\u003e\n  \u003cli\u003e The camel casing is not enforced when a name contains the \u003ccode\u003e\u0027_\u0027\u003c/code\u003e character. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvoid My_method_(){...} // Noncompliant, leading and trailing underscores are reported\n\nvoid My_method(){...} // Compliant by exception\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\nConventions\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method or a property name is not PascalCased.\u003c/p\u003e\n\u003cp\u003eFor example, the method\u003c/p\u003e\n\u003cpre\u003e\npublic int doSomething() {...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\npublic int DoSomething() {...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule ignores members in types marked with \u003ccode\u003eComImportAttribute\u003c/code\u003e or \u003ccode\u003eInterfaceTypeAttribute\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e The rule ignores \u003ccode\u003eextern\u003c/code\u003e methods. \u003c/li\u003e\n  \u003cli\u003e To reduce noise, two consecutive upper-case characters are allowed unless they form the full name. So, \u003ccode\u003eMyXMethod\u003c/code\u003e is compliant, but\n  \u003ccode\u003eXM\u003c/code\u003e is not. \u003c/li\u003e\n  \u003cli\u003e The camel casing is not enforced when a name contains the \u003ccode\u003e\u0027_\u0027\u003c/code\u003e character. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvoid My_method_(){...} // Noncompliant, leading and trailing underscores are reported\n\nvoid My_method(){...} // Compliant by exception\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003e\u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\nConventions\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3265",
    "name": "Non-flags enums should not be used in bitwise operations",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\u003eEnumerations\u003c/a\u003e are commonly used to identify\ndistinct elements from a set of values.\u003c/p\u003e\n\u003cp\u003eHowever, they can also serve as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit flags\u003c/a\u003e, enabling bitwise operations to combine multiple\nelements within a single value.\u003c/p\u003e\n\u003cpre\u003e\n// Saturday \u003d 0b00100000, Sunday \u003d 0b01000000, weekend \u003d 0b01100000\nvar weekend \u003d Days.Saturday | Days.Sunday;  // Combining elements\n\u003c/pre\u003e\n\u003cp\u003eWhen enumerations are used as bit flags, it is considered \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#enumeration-types-as-bit-flags\"\u003egood practice\u003c/a\u003e to\nannotate the enum type with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nenum Permissions\n{\n  None \u003d 0,\n  Read \u003d 1,\n  Write \u003d 2,\n  Execute \u003d 4\n}\n\n// ...\n\nvar x \u003d Permissions.Read | Permissions.Write;  // Noncompliant: enum is not annotated with [Flags]\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eFlagsAttribute\u003c/code\u003e explicitly marks an enumeration as bit flags, making it clear that it uses bit fields and is intended to be used as\nflags.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Flags]\nenum Permissions\n{\n  None \u003d 0,\n  Read \u003d 1,\n  Write \u003d 2,\n  Execute \u003d 4\n}\n\n// ...\n\nvar x \u003d Permissions.Read | Permissions.Write;  // Compliant: enum is annotated with [Flags]\n\u003c/pre\u003e\n\u003cp\u003eAdditionally, adding the \u003ccode\u003eFlagsAttribute\u003c/code\u003e to the enumeration enable a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute#examples\"\u003ebetter string representation\u003c/a\u003e when using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.tostring\"\u003eEnum.ToString\u003c/a\u003e method.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\u003eEnumeration in C#\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#enumeration-types-as-bit-flags\"\u003eEnumeration\n      types as bit flags\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.tostring\"\u003eEnum.ToString method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field - Wikipedia\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\u003eEnumerations\u003c/a\u003e are commonly used to identify\ndistinct elements from a set of values.\u003c/p\u003e\n\u003cp\u003eHowever, they can also serve as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit flags\u003c/a\u003e, enabling bitwise operations to combine multiple\nelements within a single value.\u003c/p\u003e\n\u003cpre\u003e\n// Saturday \u003d 0b00100000, Sunday \u003d 0b01000000, weekend \u003d 0b01100000\nvar weekend \u003d Days.Saturday | Days.Sunday;  // Combining elements\n\u003c/pre\u003e\n\u003cp\u003eWhen enumerations are used as bit flags, it is considered \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#enumeration-types-as-bit-flags\"\u003egood practice\u003c/a\u003e to\nannotate the enum type with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nenum Permissions\n{\n  None \u003d 0,\n  Read \u003d 1,\n  Write \u003d 2,\n  Execute \u003d 4\n}\n\n// ...\n\nvar x \u003d Permissions.Read | Permissions.Write;  // Noncompliant: enum is not annotated with [Flags]\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eFlagsAttribute\u003c/code\u003e explicitly marks an enumeration as bit flags, making it clear that it uses bit fields and is intended to be used as\nflags.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Flags]\nenum Permissions\n{\n  None \u003d 0,\n  Read \u003d 1,\n  Write \u003d 2,\n  Execute \u003d 4\n}\n\n// ...\n\nvar x \u003d Permissions.Read | Permissions.Write;  // Compliant: enum is annotated with [Flags]\n\u003c/pre\u003e\n\u003cp\u003eAdditionally, adding the \u003ccode\u003eFlagsAttribute\u003c/code\u003e to the enumeration enable a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute#examples\"\u003ebetter string representation\u003c/a\u003e when using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.tostring\"\u003eEnum.ToString\u003c/a\u003e method.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum\"\u003eEnumeration in C#\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#enumeration-types-as-bit-flags\"\u003eEnumeration\n      types as bit flags\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.tostring\"\u003eEnum.ToString method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field - Wikipedia\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S101",
    "name": "Types should be named in PascalCase",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type name is not PascalCased.\u003c/p\u003e\n\u003cp\u003eFor example, the classes\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...}\nclass SOMEName42 {...}\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {...}\nclass SomeName42 {...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule ignores types marked with \u003ccode\u003eComImportAttribute\u003c/code\u003e or \u003ccode\u003eInterfaceTypeAttribute\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e To reduce noise, two consecutive upper case characters are allowed unless they form the full type name. So, \u003ccode\u003eMyXClass\u003c/code\u003e is compliant,\n  but \u003ccode\u003eXC\u003c/code\u003e is not. \u003c/li\u003e\n  \u003cli\u003e The rule allows having \u003ccode\u003e\u0027_\u0027\u003c/code\u003e characters in class names inside test projects: in that case, each word separated by \u003ccode\u003e\u0027_\u0027\u003c/code\u003e\n  should be PascalCased. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nclass Some_Name___42 {...} // Compliant in tests\nclass Some_name___42 {...} // Noncompliant\nclass Some_Name_XC {...} // Noncompliant because of XC, should be Some_Name_Xc\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\n  Conventions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type name is not PascalCased.\u003c/p\u003e\n\u003cp\u003eFor example, the classes\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...}\nclass SOMEName42 {...}\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {...}\nclass SomeName42 {...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule ignores types marked with \u003ccode\u003eComImportAttribute\u003c/code\u003e or \u003ccode\u003eInterfaceTypeAttribute\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e To reduce noise, two consecutive upper case characters are allowed unless they form the full type name. So, \u003ccode\u003eMyXClass\u003c/code\u003e is compliant,\n  but \u003ccode\u003eXC\u003c/code\u003e is not. \u003c/li\u003e\n  \u003cli\u003e The rule allows having \u003ccode\u003e\u0027_\u0027\u003c/code\u003e characters in class names inside test projects: in that case, each word separated by \u003ccode\u003e\u0027_\u0027\u003c/code\u003e\n  should be PascalCased. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nclass Some_Name___42 {...} // Compliant in tests\nclass Some_name___42 {...} // Noncompliant\nclass Some_Name_XC {...} // Noncompliant because of XC, should be Some_Name_Xc\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\n  Conventions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5445",
    "name": "Insecure temporary file creation methods should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eTemporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating temporary files in a non-atomic way introduces race condition issues in the application’s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.\u003c/p\u003e\n\u003cp\u003eIn such a situation, the application might use a temporary file that it does not entirely control. In particular, this file’s permissions might be\ndifferent than expected. This can lead to trust boundary issues.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAttackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application’s\nlogic. By changing this file’s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file’s content before or while the application uses it.\u003c/p\u003e\n\u003cp\u003eDepending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.\u003c/p\u003e\n\u003ch4\u003eInformation disclosure\u003c/h4\u003e\n\u003cp\u003eBecause attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.\u003c/p\u003e\n\u003cp\u003eFor example, an application might use temporary files to store users\u0027 session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users\u0027 identities and entitlements.\u003c/p\u003e\n\u003ch4\u003eAttack surface extension\u003c/h4\u003e\n\u003cp\u003eAn application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.\u003c/p\u003e\n\u003cp\u003eFor example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files\u0027\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\n\npublic void Example()\n{\n    var tempPath \u003d Path.GetTempFileName();  // Noncompliant\n\n    using (var writer \u003d new StreamWriter(tempPath))\n    {\n        writer.WriteLine(\"content\");\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\n\npublic void Example()\n{\n    var randomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n\n    using (var fileStream \u003d new FileStream(randomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose))\n    using (var writer \u003d new StreamWriter(fileStream))\n    {\n        writer.WriteLine(\"content\");\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eApplications should create temporary files so that no third party can read or modify their content. It requires that the files\u0027 name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications\u0027 technology stacks.\u003c/p\u003e\n\u003ch4\u003eStrong security controls\u003c/h4\u003e\n\u003cp\u003eTemporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.\u003c/p\u003e\n\u003cp\u003eIn general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Files should be created in a non-public directory. \u003c/li\u003e\n  \u003cli\u003e File names should be unique. \u003c/li\u003e\n  \u003cli\u003e File names should be unpredictable. They should be generated using a cryptographically secure random generator. \u003c/li\u003e\n  \u003cli\u003e File creation should fail if a target file already exists. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMoreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.\u003c/p\u003e\n\u003cp\u003eHere the example compliant code uses the \u003ccode\u003ePath.GetTempPath\u003c/code\u003e and \u003ccode\u003ePath.GetRandomFileName\u003c/code\u003e functions to generate a unique\nrandom file name. The file is then open with the \u003ccode\u003eFileMode.CreateNew\u003c/code\u003e option that will ensure the creation fails if the file already\nexists. The \u003ccode\u003eFileShare.None\u003c/code\u003e option will additionally prevent the file from being opened again by any process. To finish, this code ensures\nthe file will get destroyed once the application has finished using it with the \u003ccode\u003eFileOptions.DeleteOnClose\u003c/code\u003e option.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP\u003c/a\u003e - Insecure Temporary File \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eTop 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eTemporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating temporary files in a non-atomic way introduces race condition issues in the application’s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.\u003c/p\u003e\n\u003cp\u003eIn such a situation, the application might use a temporary file that it does not entirely control. In particular, this file’s permissions might be\ndifferent than expected. This can lead to trust boundary issues.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAttackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application’s\nlogic. By changing this file’s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file’s content before or while the application uses it.\u003c/p\u003e\n\u003cp\u003eDepending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.\u003c/p\u003e\n\u003ch4\u003eInformation disclosure\u003c/h4\u003e\n\u003cp\u003eBecause attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.\u003c/p\u003e\n\u003cp\u003eFor example, an application might use temporary files to store users\u0027 session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users\u0027 identities and entitlements.\u003c/p\u003e\n\u003ch4\u003eAttack surface extension\u003c/h4\u003e\n\u003cp\u003eAn application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.\u003c/p\u003e\n\u003cp\u003eFor example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files\u0027\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\n\npublic void Example()\n{\n    var tempPath \u003d Path.GetTempFileName();  // Noncompliant\n\n    using (var writer \u003d new StreamWriter(tempPath))\n    {\n        writer.WriteLine(\"content\");\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\n\npublic void Example()\n{\n    var randomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n\n    using (var fileStream \u003d new FileStream(randomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose))\n    using (var writer \u003d new StreamWriter(fileStream))\n    {\n        writer.WriteLine(\"content\");\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eApplications should create temporary files so that no third party can read or modify their content. It requires that the files\u0027 name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications\u0027 technology stacks.\u003c/p\u003e\n\u003ch4\u003eStrong security controls\u003c/h4\u003e\n\u003cp\u003eTemporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.\u003c/p\u003e\n\u003cp\u003eIn general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Files should be created in a non-public directory. \u003c/li\u003e\n  \u003cli\u003e File names should be unique. \u003c/li\u003e\n  \u003cli\u003e File names should be unpredictable. They should be generated using a cryptographically secure random generator. \u003c/li\u003e\n  \u003cli\u003e File creation should fail if a target file already exists. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMoreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.\u003c/p\u003e\n\u003cp\u003eHere the example compliant code uses the \u003ccode\u003ePath.GetTempPath\u003c/code\u003e and \u003ccode\u003ePath.GetRandomFileName\u003c/code\u003e functions to generate a unique\nrandom file name. The file is then open with the \u003ccode\u003eFileMode.CreateNew\u003c/code\u003e option that will ensure the creation fails if the file already\nexists. The \u003ccode\u003eFileShare.None\u003c/code\u003e option will additionally prevent the file from being opened again by any process. To finish, this code ensures\nthe file will get destroyed once the application has finished using it with the \u003ccode\u003eFileOptions.DeleteOnClose\u003c/code\u003e option.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP\u003c/a\u003e - Insecure Temporary File \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eTop 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3264",
    "name": "Events should be invoked",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEvents that are not invoked anywhere are dead code, and there’s no good reason to keep them in the source.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass UninvokedEventSample\n{\n    private event Action\u0026lt;object, EventArgs\u0026gt; Happened; //Noncompliant\n\n    public void RegisterEventHandler(Action\u0026lt;object, EventArgs\u0026gt; handler)\n    {\n        Happened +\u003d handler; //we register some event handlers\n    }\n\n    public void RaiseEvent()\n    {\n        if (Happened !\u003d null)\n        {\n            // Happened(this, null); // the event is never triggered, because this line is commented out.\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEvents that are not invoked anywhere are dead code, and there’s no good reason to keep them in the source.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass UninvokedEventSample\n{\n    private event Action\u0026lt;object, EventArgs\u0026gt; Happened; //Noncompliant\n\n    public void RegisterEventHandler(Action\u0026lt;object, EventArgs\u0026gt; handler)\n    {\n        Happened +\u003d handler; //we register some event handlers\n    }\n\n    public void RaiseEvent()\n    {\n        if (Happened !\u003d null)\n        {\n            // Happened(this, null); // the event is never triggered, because this line is commented out.\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3267",
    "name": "Loops should be simplified with \"LINQ\" expressions",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a loop is filtering, selecting or aggregating, those functions can be handled with a clearer, more concise LINQ expression instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar result \u003d new List\u0026lt;string\u0026gt;();\nforeach (var element in collection)  // Noncompliant\n{\n  if (condition(element))\n  {\n    result.Add(element);\n  }\n}\n\nforeach (var element in collection2) // Noncompliant\n{\n  var someValue \u003d element.Property;\n  if (someValue !\u003d null)\n  {\n    result.Add(someValue);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar result \u003d new List\u0026lt;string\u0026gt;();\n\nforeach (var element in collection.Where(x \u003d\u0026gt; condition(x)))\n{\n  result.Add(element);\n}\n\nforeach (var someValue in collection2.Select(x \u003d\u0026gt; x.Property).Where(y \u003d\u0026gt; y !\u003d null))\n{\n  result.Add(someValue);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a loop is filtering, selecting or aggregating, those functions can be handled with a clearer, more concise LINQ expression instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar result \u003d new List\u0026lt;string\u0026gt;();\nforeach (var element in collection)  // Noncompliant\n{\n  if (condition(element))\n  {\n    result.Add(element);\n  }\n}\n\nforeach (var element in collection2) // Noncompliant\n{\n  var someValue \u003d element.Property;\n  if (someValue !\u003d null)\n  {\n    result.Add(someValue);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar result \u003d new List\u0026lt;string\u0026gt;();\n\nforeach (var element in collection.Where(x \u003d\u0026gt; condition(x)))\n{\n  result.Add(element);\n}\n\nforeach (var someValue in collection2.Select(x \u003d\u0026gt; x.Property).Where(y \u003d\u0026gt; y !\u003d null))\n{\n  result.Add(someValue);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2178",
    "name": "Short-circuit logic should be used in boolean contexts",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e is an evaluation strategy for \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e, that doesn’t evaluates the second argument of the operator if it is not\nneeded to determine the result of the operation.\u003c/p\u003e\n\u003cp\u003eC# provides logical operators that implement short-circuit evaluation: \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e, as well as non-short-circuit\nversions: \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e|\u003c/code\u003e. Unlike short-circuit operators, non-short-circuit ones evaluate both operands and afterwards perform\nthe logical operation.\u003c/p\u003e\n\u003cp\u003eFor example \u003ccode\u003efalse \u0026amp;\u0026amp; FunctionCall()\u003c/code\u003e always results in \u003ccode\u003efalse\u003c/code\u003e, even when \u003ccode\u003eFunctionCall\u003c/code\u003e invocation would\nraise an exception. Instead, \u003ccode\u003efalse \u0026amp; FunctionCall()\u003c/code\u003e also evaluates \u003ccode\u003eFunctionCall()\u003c/code\u003e, and results in an exception if\n\u003ccode\u003eFunctionCall()\u003c/code\u003e invocation raises an exception.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003etrue || FunctionCall()\u003c/code\u003e always results in \u003ccode\u003etrue\u003c/code\u003e, no matter what the return value of \u003ccode\u003eFunctionCall()\u003c/code\u003e\nwould be.\u003c/p\u003e\n\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (GetTrue() | GetFalse()) // Noncompliant: both sides evaluated\n{\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (GetTrue() || GetFalse()) // Compliant: short-circuit logic used\n{\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eBoolean logical operators -\n  AND, OR, NOT, XOR\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2015/11/02/when-would-you-use-on-a-bool/\"\u003eEric Lippert’s blog - When would you use \u0026amp; on a bool?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e is an evaluation strategy for \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e, that doesn’t evaluates the second argument of the operator if it is not\nneeded to determine the result of the operation.\u003c/p\u003e\n\u003cp\u003eC# provides logical operators that implement short-circuit evaluation: \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e, as well as non-short-circuit\nversions: \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e|\u003c/code\u003e. Unlike short-circuit operators, non-short-circuit ones evaluate both operands and afterwards perform\nthe logical operation.\u003c/p\u003e\n\u003cp\u003eFor example \u003ccode\u003efalse \u0026amp;\u0026amp; FunctionCall()\u003c/code\u003e always results in \u003ccode\u003efalse\u003c/code\u003e, even when \u003ccode\u003eFunctionCall\u003c/code\u003e invocation would\nraise an exception. Instead, \u003ccode\u003efalse \u0026amp; FunctionCall()\u003c/code\u003e also evaluates \u003ccode\u003eFunctionCall()\u003c/code\u003e, and results in an exception if\n\u003ccode\u003eFunctionCall()\u003c/code\u003e invocation raises an exception.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003etrue || FunctionCall()\u003c/code\u003e always results in \u003ccode\u003etrue\u003c/code\u003e, no matter what the return value of \u003ccode\u003eFunctionCall()\u003c/code\u003e\nwould be.\u003c/p\u003e\n\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (GetTrue() | GetFalse()) // Noncompliant: both sides evaluated\n{\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (GetTrue() || GetFalse()) // Compliant: short-circuit logic used\n{\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eBoolean logical operators -\n  AND, OR, NOT, XOR\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2015/11/02/when-would-you-use-on-a-bool/\"\u003eEric Lippert’s blog - When would you use \u0026amp; on a bool?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5443",
    "name": "Using publicly writable directories is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n\u003ccode\u003e/tmp\u003c/code\u003e in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\"\u003eCVE-2012-2451\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\"\u003eCVE-2015-1838\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like \u003ccode\u003e/tmp\u003c/code\u003e (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., \u003ccode\u003eTMP\u003c/code\u003e, \u003ccode\u003eTMPDIR\u003c/code\u003e and\n\u003ccode\u003eTEMP\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/usr/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/shm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/mqueue\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Library/Caches\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Users/Shared\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Windows\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\TMP\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e%USERPROFILE%\\AppData\\Local\\Temp\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Files are read from or written into a publicly writable folder \u003c/li\u003e\n  \u003cli\u003e The application creates files with predictable names into a publicly writable folder \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nusing var writer \u003d new StreamWriter(\"/tmp/f\"); // Sensitive\n\u003c/pre\u003e\n\u003cpre\u003e\nvar tmp \u003d Environment.GetEnvironmentVariable(\"TMP\"); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOut of the box, .NET is missing secure-by-design APIs to create temporary files. To overcome this, one of the following options can be used:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a dedicated sub-folder with tightly controlled permissions \u003c/li\u003e\n  \u003cli\u003e Created temporary files in a publicly writable folder and make sure:\n    \u003cul\u003e\n      \u003cli\u003e Generated filename is unpredictable \u003c/li\u003e\n      \u003cli\u003e File is readable and writable only by the creating user ID \u003c/li\u003e\n      \u003cli\u003e File descriptor is not inherited by child processes \u003c/li\u003e\n      \u003cli\u003e File is destroyed as soon as it is closed \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar randomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n\n// Creates a new file with write, non inheritable permissions which is deleted on close.\nusing var fileStream \u003d new FileStream(randomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose);\nusing var writer \u003d new StreamWriter(fileStream);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eTop 10 2017 Category A5 - Broken Access Control\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP, Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S1192",
    "name": "String literals should not be duplicated",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e literals with fewer than 5 characters \u003c/li\u003e\n  \u003cli\u003e literals matching one of the parameter names \u003c/li\u003e\n  \u003cli\u003e literals used in attributes \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    private string name \u003d \"foobar\"; // Noncompliant\n\n    public string DefaultName { get; } \u003d \"foobar\"; // Noncompliant\n\n    public Foo(string value \u003d \"foobar\") // Noncompliant\n    {\n        var something \u003d value ?? \"foobar\"; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    private const string Foobar \u003d \"foobar\";\n\n    private string name \u003d Foobar;\n\n    public string DefaultName { get; } \u003d Foobar;\n\n    public Foo(string value \u003d Foobar)\n    {\n        var something \u003d value ?? Foobar;\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e literals with fewer than 5 characters \u003c/li\u003e\n  \u003cli\u003e literals matching one of the parameter names \u003c/li\u003e\n  \u003cli\u003e literals used in attributes \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    private string name \u003d \"foobar\"; // Noncompliant\n\n    public string DefaultName { get; } \u003d \"foobar\"; // Noncompliant\n\n    public Foo(string value \u003d \"foobar\") // Noncompliant\n    {\n        var something \u003d value ?? \"foobar\"; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    private const string Foobar \u003d \"foobar\";\n\n    private string name \u003d Foobar;\n\n    public string DefaultName { get; } \u003d Foobar;\n\n    public Foo(string value \u003d Foobar)\n    {\n        var something \u003d value ?? Foobar;\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "Number of times a literal must be duplicated to trigger an issue.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "threshold": "3"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4583",
    "name": "Calls to delegate\u0027s method \"BeginInvoke\" should be paired with calls to \"EndInvoke\"",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen calling the \u003ccode\u003eBeginInvoke\u003c/code\u003e method of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.delegate\"\u003edelegate\u003c/a\u003e,\nresources are allocated that are only freed up when \u003ccode\u003eEndInvoke\u003c/code\u003e is called. Failing to pair \u003ccode\u003eBeginInvoke\u003c/code\u003e with\n\u003ccode\u003eEndInvoke\u003c/code\u003e can lead to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Resource_leak\"\u003eresource leaks\u003c/a\u003e and incomplete asynchronous calls.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eBeginInvoke\u003c/code\u003e method is called without any callback, and it is not paired with a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same\n  block. \u003c/li\u003e\n  \u003cli\u003e A callback with a single parameter of type \u003ccode\u003eIAsyncResult\u003c/code\u003e does not contain a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    // Initiate the asynchronous call.\n    IAsyncResult result \u003d caller.BeginInvoke(null, null); // Noncompliant: not paired with EndInvoke\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(\n        new AsyncCallback((IAsyncResult ar) \u003d\u0026gt; {}),\n        null); // Noncompliant: not paired with EndInvoke\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(null, null);\n\n    string returnValue \u003d caller.EndInvoke(result);\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(\n        new AsyncCallback((IAsyncResult ar) \u003d\u0026gt;\n            {\n                // Call EndInvoke to retrieve the results.\n                string returnValue \u003d caller.EndInvoke(ar);\n            }), null);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\"\u003eCalling\n  Synchronous Methods Asynchronously\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates\"\u003eAsynchronous\n  Programming Using Delegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.begininvoke\"\u003eBeginInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.endinvoke\"\u003eEndInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.asynccallback\"\u003eAsyncCallback Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen calling the \u003ccode\u003eBeginInvoke\u003c/code\u003e method of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.delegate\"\u003edelegate\u003c/a\u003e,\nresources are allocated that are only freed up when \u003ccode\u003eEndInvoke\u003c/code\u003e is called. Failing to pair \u003ccode\u003eBeginInvoke\u003c/code\u003e with\n\u003ccode\u003eEndInvoke\u003c/code\u003e can lead to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Resource_leak\"\u003eresource leaks\u003c/a\u003e and incomplete asynchronous calls.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eBeginInvoke\u003c/code\u003e method is called without any callback, and it is not paired with a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same\n  block. \u003c/li\u003e\n  \u003cli\u003e A callback with a single parameter of type \u003ccode\u003eIAsyncResult\u003c/code\u003e does not contain a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same block. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    // Initiate the asynchronous call.\n    IAsyncResult result \u003d caller.BeginInvoke(null, null); // Noncompliant: not paired with EndInvoke\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(\n        new AsyncCallback((IAsyncResult ar) \u003d\u0026gt; {}),\n        null); // Noncompliant: not paired with EndInvoke\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(null, null);\n\n    string returnValue \u003d caller.EndInvoke(result);\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic delegate string AsyncMethodCaller();\n\npublic static void Main()\n{\n    AsyncExample asyncExample \u003d new AsyncExample();\n    AsyncMethodCaller caller \u003d new AsyncMethodCaller(asyncExample.MyMethod);\n\n    IAsyncResult result \u003d caller.BeginInvoke(\n        new AsyncCallback((IAsyncResult ar) \u003d\u0026gt;\n            {\n                // Call EndInvoke to retrieve the results.\n                string returnValue \u003d caller.EndInvoke(ar);\n            }), null);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\"\u003eCalling\n  Synchronous Methods Asynchronously\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates\"\u003eAsynchronous\n  Programming Using Delegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.begininvoke\"\u003eBeginInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.endinvoke\"\u003eEndInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.asynccallback\"\u003eAsyncCallback Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4462",
    "name": "Calls to \"async\" methods should not be blocking",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMaking blocking calls to \u003ccode\u003easync\u003c/code\u003e methods transforms code that was intended to be asynchronous into a blocking operation. Doing so can\ncause deadlocks and unexpected blocking of context threads.\u003c/p\u003e\n\u003cp\u003eAccording to the MSDN documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eThe root cause of this deadlock is due to the way \u003ccode\u003eawait\u003c/code\u003e handles contexts. By default, when an incomplete \u003ccode\u003eTask\u003c/code\u003e is\n  awaited, the current “context” is captured and used to resume the method when the \u003ccode\u003eTask\u003c/code\u003e completes. This “context” is the current\n  \u003ccode\u003eSynchronizationContext\u003c/code\u003e unless it’s null, in which case it’s the current \u003ccode\u003eTaskScheduler\u003c/code\u003e. GUI and ASP.NET applications have a\n  \u003ccode\u003eSynchronizationContext\u003c/code\u003e that permits only one chunk of code to run at a time. When the \u003ccode\u003eawait\u003c/code\u003e completes, it attempts to\n  execute the remainder of the \u003ccode\u003easync\u003c/code\u003e method within the captured context. But that context already has a thread in it, which is\n  (synchronously) waiting for the \u003ccode\u003easync\u003c/code\u003e method to complete. They’re each waiting for the other, causing a deadlock.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3334%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eTo Do This …\u003c/th\u003e\n      \u003cth\u003eInstead of This …\u003c/th\u003e\n      \u003cth\u003eUse This\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eRetrieve the result of a background task\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.Wait\u003c/code\u003e, \u003ccode\u003eTask.Result\u003c/code\u003e or \u003ccode\u003eTask.GetAwaiter.GetResult\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for any task to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eRetrieve the results of multiple tasks\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait a period of time\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eThread.Sleep\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.Delay\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask \u003d DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask \u003d DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Main methods of Console Applications are not subject to this deadlock issue and so are ignored by this rule. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eThread.Sleep\u003c/code\u003e is also ignored when it is used in a non-\u003ccode\u003easync\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e Calls chained after \u003ccode\u003eTask.Run\u003c/code\u003e or \u003ccode\u003eTask.Factory.StartNew\u003c/code\u003e are ignored because they don’t suffer from this deadlock issue\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\"\u003eAsync/Await - Best Practices in Asynchronous Programming\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMaking blocking calls to \u003ccode\u003easync\u003c/code\u003e methods transforms code that was intended to be asynchronous into a blocking operation. Doing so can\ncause deadlocks and unexpected blocking of context threads.\u003c/p\u003e\n\u003cp\u003eAccording to the MSDN documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eThe root cause of this deadlock is due to the way \u003ccode\u003eawait\u003c/code\u003e handles contexts. By default, when an incomplete \u003ccode\u003eTask\u003c/code\u003e is\n  awaited, the current “context” is captured and used to resume the method when the \u003ccode\u003eTask\u003c/code\u003e completes. This “context” is the current\n  \u003ccode\u003eSynchronizationContext\u003c/code\u003e unless it’s null, in which case it’s the current \u003ccode\u003eTaskScheduler\u003c/code\u003e. GUI and ASP.NET applications have a\n  \u003ccode\u003eSynchronizationContext\u003c/code\u003e that permits only one chunk of code to run at a time. When the \u003ccode\u003eawait\u003c/code\u003e completes, it attempts to\n  execute the remainder of the \u003ccode\u003easync\u003c/code\u003e method within the captured context. But that context already has a thread in it, which is\n  (synchronously) waiting for the \u003ccode\u003easync\u003c/code\u003e method to complete. They’re each waiting for the other, causing a deadlock.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3334%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eTo Do This …\u003c/th\u003e\n      \u003cth\u003eInstead of This …\u003c/th\u003e\n      \u003cth\u003eUse This\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eRetrieve the result of a background task\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.Wait\u003c/code\u003e, \u003ccode\u003eTask.Result\u003c/code\u003e or \u003ccode\u003eTask.GetAwaiter.GetResult\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for any task to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eRetrieve the results of multiple tasks\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait a period of time\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eThread.Sleep\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.Delay\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    // This method causes a deadlock when called in a GUI or ASP.NET context.\n    public static void Test()\n    {\n        // Start the delay.\n        var delayTask \u003d DelayAsync();\n        // Wait for the delay to complete.\n        delayTask.Wait(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static class DeadlockDemo\n{\n    private static async Task DelayAsync()\n    {\n        await Task.Delay(1000);\n    }\n\n    public static async Task TestAsync()\n    {\n        // Start the delay.\n        var delayTask \u003d DelayAsync();\n        // Wait for the delay to complete.\n        await delayTask;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Main methods of Console Applications are not subject to this deadlock issue and so are ignored by this rule. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eThread.Sleep\u003c/code\u003e is also ignored when it is used in a non-\u003ccode\u003easync\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e Calls chained after \u003ccode\u003eTask.Run\u003c/code\u003e or \u003ccode\u003eTask.Factory.StartNew\u003c/code\u003e are ignored because they don’t suffer from this deadlock issue\n  \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\"\u003eAsync/Await - Best Practices in Asynchronous Programming\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await",
      "deadlock"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4220",
    "name": "Events should have proper arguments",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen raising an event, two arguments are expected by the \u003ccode\u003eEventHandler\u003c/code\u003e delegate: Sender and event-data. There are three guidelines\nregarding these parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Do not pass \u003ccode\u003enull\u003c/code\u003e as the sender when raising a non-static event. \u003c/li\u003e\n  \u003cli\u003e Do pass \u003ccode\u003enull\u003c/code\u003e as the sender when raising a static event. \u003c/li\u003e\n  \u003cli\u003e Do not pass \u003ccode\u003enull\u003c/code\u003e as the event-data. If no data should be passed, then \u003ccode\u003eEventArgs.Empty\u003c/code\u003e should be used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when any of these guidelines is not met.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(null, e); // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(this, e);\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen raising an event, two arguments are expected by the \u003ccode\u003eEventHandler\u003c/code\u003e delegate: Sender and event-data. There are three guidelines\nregarding these parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Do not pass \u003ccode\u003enull\u003c/code\u003e as the sender when raising a non-static event. \u003c/li\u003e\n  \u003cli\u003e Do pass \u003ccode\u003enull\u003c/code\u003e as the sender when raising a static event. \u003c/li\u003e\n  \u003cli\u003e Do not pass \u003ccode\u003enull\u003c/code\u003e as the event-data. If no data should be passed, then \u003ccode\u003eEventArgs.Empty\u003c/code\u003e should be used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when any of these guidelines is not met.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(null, e); // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(this, e);\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "event",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6640",
    "name": "Using unsafe code blocks is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eunsafe\u003c/code\u003e code blocks can lead to unintended security or stability risks.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eunsafe\u003c/code\u003e code blocks allow developers to use features such as pointers, fixed buffers, function calls through pointers and manual memory\nmanagement. Such features may be necessary for interoperability with native libraries, as these often require pointers. It may also increase\nperformance in some critical areas, as certain bounds checks are not executed in an unsafe context.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eunsafe\u003c/code\u003e code blocks aren’t necessarily dangerous, however, the contents of such blocks are not verified by the Common Language Runtime.\nTherefore, it is up to the programmer to ensure that no bugs are introduced through manual memory management or casting. If not done correctly, then\nthose bugs can lead to memory corruption vulnerabilities such as stack overflows. \u003ccode\u003eunsafe\u003c/code\u003e code blocks should be used with caution because\nof these security and stability risks.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e There are any pointers or fixed buffers declared within the \u003ccode\u003eunsafe\u003c/code\u003e code block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to the question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic unsafe int SubarraySum(int[] array, int start, int end)  // Sensitive\n{\n    var sum \u003d 0;\n\n    // Skip array bound checks for extra performance\n    fixed (int* firstNumber \u003d array)\n    {\n        for (int i \u003d start; i \u0026lt; end; i++)\n            sum +\u003d *(firstNumber + i);\n    }\n\n    return sum;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eUnless absolutely necessary, do not use \u003ccode\u003eunsafe\u003c/code\u003e code blocks. If \u003ccode\u003eunsafe\u003c/code\u003e is used to increase performance, then the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/memory-and-spans/\"\u003eSpan and Memory APIs\u003c/a\u003e may serve a similar purpose in a safe context.\u003c/p\u003e\n\u003cp\u003eIf it is not possible to remove the code block, then it should be kept as short as possible. Doing so reduces risk, as there is less code that can\npotentially introduce new bugs. Within the \u003ccode\u003eunsafe\u003c/code\u003e code block, make sure that:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e All type casts are correct. \u003c/li\u003e\n  \u003cli\u003e Memory is correctly allocated and then released. \u003c/li\u003e\n  \u003cli\u003e Array accesses can never go out of bounds. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int SubarraySum(int[] array, int start, int end)\n{\n    var sum \u003d 0;\n\n    Span\u0026lt;int\u0026gt; span \u003d array.AsSpan();\n    for (int i \u003d start; i \u0026lt; end; i++)\n        sum +\u003d span[i];\n\n    return sum;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/787\"\u003eCWE-787 - Out-of-bounds Write\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code\"\u003eMicrosoft Learn\u003c/a\u003e - Unsafe code, pointer types, and\n  function pointers \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S3010",
    "name": "Static fields should not be updated in constructors",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssigning a value to a \u003ccode\u003estatic\u003c/code\u003e field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\u003c/p\u003e\n\u003cp\u003eInstead remove the field’s \u003ccode\u003estatic\u003c/code\u003e modifier, or initialize it statically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  private static DateTime dateOfBirth;\n  private static int expectedFingers;\n\n  public Person(DateTime birthday)\n  {\n    dateOfBirth \u003d birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers \u003d 10;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  private DateTime dateOfBirth;\n  private static int expectedFingers \u003d 10;\n\n  public Person(DateTime birthday)\n  {\n    this.dateOfBirth \u003d birthday;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssigning a value to a \u003ccode\u003estatic\u003c/code\u003e field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\u003c/p\u003e\n\u003cp\u003eInstead remove the field’s \u003ccode\u003estatic\u003c/code\u003e modifier, or initialize it statically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  private static DateTime dateOfBirth;\n  private static int expectedFingers;\n\n  public Person(DateTime birthday)\n  {\n    dateOfBirth \u003d birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers \u003d 10;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  private DateTime dateOfBirth;\n  private static int expectedFingers \u003d 10;\n\n  public Person(DateTime birthday)\n  {\n    this.dateOfBirth \u003d birthday;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3251",
    "name": "Implementations should be provided for \"partial\" methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epartial\u003c/code\u003e methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking\nmethods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to\nproduction, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are\ncritical, missing functionality, the loss of which will lead to unexpected results at runtime.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for partial methods for which no implementation can be found in the assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003epartial\u003c/code\u003e methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking\nmethods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to\nproduction, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are\ncritical, missing functionality, the loss of which will lead to unexpected results at runtime.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for partial methods for which no implementation can be found in the assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4581",
    "name": "\"new Guid()\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the syntax \u003ccode\u003enew Guid()\u003c/code\u003e (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e An empty GUID, in which case \u003ccode\u003eGuid.Empty\u003c/code\u003e is clearer. \u003c/li\u003e\n  \u003cli\u003e A randomly-generated GUID, in which case \u003ccode\u003eGuid.NewGuid()\u003c/code\u003e should be used. \u003c/li\u003e\n  \u003cli\u003e A new GUID with a specific initialization, in which case the initialization parameter is missing. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis rule raises an issue when a parameterless instantiation of the \u003ccode\u003eGuid\u003c/code\u003e struct is found.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo()\n{\n    var g1 \u003d new Guid();    // Noncompliant - what\u0027s the intent?\n    Guid g2 \u003d new();        // Noncompliant\n    var g3 \u003d default(Guid); // Noncompliant\n    Guid g4 \u003d default;      // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(byte[] bytes)\n{\n    var g1 \u003d Guid.Empty;\n    var g2 \u003d Guid.NewGuid();\n    var g3 \u003d new Guid(bytes);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the syntax \u003ccode\u003enew Guid()\u003c/code\u003e (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e An empty GUID, in which case \u003ccode\u003eGuid.Empty\u003c/code\u003e is clearer. \u003c/li\u003e\n  \u003cli\u003e A randomly-generated GUID, in which case \u003ccode\u003eGuid.NewGuid()\u003c/code\u003e should be used. \u003c/li\u003e\n  \u003cli\u003e A new GUID with a specific initialization, in which case the initialization parameter is missing. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis rule raises an issue when a parameterless instantiation of the \u003ccode\u003eGuid\u003c/code\u003e struct is found.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo()\n{\n    var g1 \u003d new Guid();    // Noncompliant - what\u0027s the intent?\n    Guid g2 \u003d new();        // Noncompliant\n    var g3 \u003d default(Guid); // Noncompliant\n    Guid g4 \u003d default;      // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(byte[] bytes)\n{\n    var g1 \u003d Guid.Empty;\n    var g2 \u003d Guid.NewGuid();\n    var g3 \u003d new Guid(bytes);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4586",
    "name": "Non-async \"Task/Task\u003cT\u003e\" methods should not return null",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e from a non-\u003ccode\u003easync\u003c/code\u003e \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e method will cause a\n\u003ccode\u003eNullReferenceException\u003c/code\u003e at runtime if the method is awaited. This problem can be avoided by returning \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(null)\u003c/code\u003e\u003c/a\u003e\nrespectively.\u003c/p\u003e\n\u003cpre\u003e\npublic Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\npublic async Task Main()\n{\n    await DoFooAsync();        // NullReferenceException\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of \u003ccode\u003enull\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(null)\u003c/code\u003e\u003c/a\u003e\nshould be returned.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eA \u003ccode\u003eTask\u003c/code\u003e returning method can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}\n\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e returning method can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic Task\u0026lt;object\u0026gt; GetFooAsync()\n{\n    return null;                          // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic Task\u0026lt;object\u0026gt; GetFooAsync()\n{\n    return Task.FromResult\u0026lt;object\u0026gt;(null); // Compliant: Method can be awaited.\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(TResult)\u003c/code\u003e\n  Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/45350108\"\u003eIs it better to return an empty task or null?\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/27551261\"\u003eBest way to handle null task inside async\n  method?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e C# Language Design - \u003ca href\u003d\"https://github.com/dotnet/csharplang/issues/35\"\u003eProposal Champion \"Null-conditional await\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e from a non-\u003ccode\u003easync\u003c/code\u003e \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e method will cause a\n\u003ccode\u003eNullReferenceException\u003c/code\u003e at runtime if the method is awaited. This problem can be avoided by returning \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(null)\u003c/code\u003e\u003c/a\u003e\nrespectively.\u003c/p\u003e\n\u003cpre\u003e\npublic Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\npublic async Task Main()\n{\n    await DoFooAsync();        // NullReferenceException\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of \u003ccode\u003enull\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(null)\u003c/code\u003e\u003c/a\u003e\nshould be returned.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eTask\u003c/code\u003e returning method can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic Task DoFooAsync()\n{\n    return null;               // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic Task DoFooAsync()\n{\n    return Task.CompletedTask; // Compliant: Method can be awaited.\n}\n\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e returning method can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic Task\u0026lt;object\u0026gt; GetFooAsync()\n{\n    return null;                          // Noncompliant: Causes a NullReferenceException if awaited.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic Task\u0026lt;object\u0026gt; GetFooAsync()\n{\n    return Task.FromResult\u0026lt;object\u0026gt;(null); // Compliant: Method can be awaited.\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(TResult)\u003c/code\u003e\n  Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/45350108\"\u003eIs it better to return an empty task or null?\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/27551261\"\u003eBest way to handle null task inside async\n  method?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e C# Language Design - \u003ca href\u003d\"https://github.com/dotnet/csharplang/issues/35\"\u003eProposal Champion \"Null-conditional await\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3254",
    "name": "Default parameter values should not be passed as arguments",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSpecifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void M(int x, int y\u003d5, int z \u003d 7) { /* ... */ }\n\n// ...\nM(1, 5); //Noncompliant, y has the default value\nM(1, z: 7); //Noncompliant, z has the default value\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void M(int x, int y\u003d5, int z \u003d 7) { /* ... */ }\n\n// ...\nM(1);\nM(1);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSpecifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void M(int x, int y\u003d5, int z \u003d 7) { /* ... */ }\n\n// ...\nM(1, 5); //Noncompliant, y has the default value\nM(1, z: 7); //Noncompliant, z has the default value\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void M(int x, int y\u003d5, int z \u003d 7) { /* ... */ }\n\n// ...\nM(1);\nM(1);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1075",
    "name": "URIs should not be hardcoded",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHard-coding a URI makes it difficult to test a program for a variety of reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e path literals are not always portable across operating systems \u003c/li\u003e\n  \u003cli\u003e a given absolute path may not exist in a specific test environment \u003c/li\u003e\n  \u003cli\u003e a specified Internet URL may not be available when executing the tests \u003c/li\u003e\n  \u003cli\u003e production environment filesystems usually differ from the development environment \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn addition, hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.\u003c/p\u003e\n\u003cp\u003eFor all those reasons, a URI should never be hard coded. Instead, it should be replaced by a customizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther, even if the elements of a URI are obtained dynamically, portability can still be limited if the path delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URIs or path delimiters are hard-coded.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e methods: \u003ccode\u003eSystem.Web.HttpServerUtilityBase.MapPath()\u003c/code\u003e, \u003ccode\u003eSystem.Web.HttpRequestBase.MapPath()\u003c/code\u003e,\n  \u003ccode\u003eSystem.Web.HttpResponseBase.ApplyAppPathModifier()\u003c/code\u003e, \u003ccode\u003eSystem.Web.Mvc.UrlHelper.Content()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e all methods of: \u003ccode\u003eSystem.Web.VirtualPathUtility\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e constructors of: \u003ccode\u003eMicrosoft.AspNetCore.Mvc.VirtualFileResult\u003c/code\u003e, \u003ccode\u003eMicrosoft.AspNetCore.Routing.VirtualPathData\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo {\n  public List\u0026lt;User\u0026gt; ListUsers() {\n    string userListPath \u003d \"/home/mylogin/Dev/users.txt\"; // Noncompliant\n    return ParseUsers(userListPath);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config \u003d myConfig;\n  }\n  public List\u0026lt;User\u0026gt; ListUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    string listingFolder \u003d config.GetProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    string userListPath \u003d Path.Combine(listingFolder, \"users.txt\"); // Compliant\n    return ParseUsers(userListPath);\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHard-coding a URI makes it difficult to test a program for a variety of reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e path literals are not always portable across operating systems \u003c/li\u003e\n  \u003cli\u003e a given absolute path may not exist in a specific test environment \u003c/li\u003e\n  \u003cli\u003e a specified Internet URL may not be available when executing the tests \u003c/li\u003e\n  \u003cli\u003e production environment filesystems usually differ from the development environment \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn addition, hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.\u003c/p\u003e\n\u003cp\u003eFor all those reasons, a URI should never be hard coded. Instead, it should be replaced by a customizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther, even if the elements of a URI are obtained dynamically, portability can still be limited if the path delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URIs or path delimiters are hard-coded.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e methods: \u003ccode\u003eSystem.Web.HttpServerUtilityBase.MapPath()\u003c/code\u003e, \u003ccode\u003eSystem.Web.HttpRequestBase.MapPath()\u003c/code\u003e,\n  \u003ccode\u003eSystem.Web.HttpResponseBase.ApplyAppPathModifier()\u003c/code\u003e, \u003ccode\u003eSystem.Web.Mvc.UrlHelper.Content()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e all methods of: \u003ccode\u003eSystem.Web.VirtualPathUtility\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e constructors of: \u003ccode\u003eMicrosoft.AspNetCore.Mvc.VirtualFileResult\u003c/code\u003e, \u003ccode\u003eMicrosoft.AspNetCore.Routing.VirtualPathData\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo {\n  public List\u0026lt;User\u0026gt; ListUsers() {\n    string userListPath \u003d \"/home/mylogin/Dev/users.txt\"; // Noncompliant\n    return ParseUsers(userListPath);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config \u003d myConfig;\n  }\n  public List\u0026lt;User\u0026gt; ListUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    string listingFolder \u003d config.GetProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    string userListPath \u003d Path.Combine(listingFolder, \"users.txt\"); // Compliant\n    return ParseUsers(userListPath);\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3011",
    "name": "Reflection should not be used to increase accessibility of classes, methods, or fields",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAltering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the\ninternal contracts of the accessed target and lead to maintainability issues and runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.\u003c/p\u003e\n\u003cpre\u003e\nusing System.Reflection;\n\nType dynClass \u003d Type.GetType(\"MyInternalClass\");\n// Noncompliant. Using BindingFlags.NonPublic will return non-public members\nBindingFlags bindingAttr \u003d BindingFlags.NonPublic | BindingFlags.Static;\nMethodInfo dynMethod \u003d dynClass.GetMethod(\"mymethod\", bindingAttr);\nobject result \u003d dynMethod.Invoke(dynClass, null);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eWikipedia definition of Encapsulation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAltering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the\ninternal contracts of the accessed target and lead to maintainability issues and runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.\u003c/p\u003e\n\u003cpre\u003e\nusing System.Reflection;\n\nType dynClass \u003d Type.GetType(\"MyInternalClass\");\n// Noncompliant. Using BindingFlags.NonPublic will return non-public members\nBindingFlags bindingAttr \u003d BindingFlags.NonPublic | BindingFlags.Static;\nMethodInfo dynMethod \u003d dynClass.GetMethod(\"mymethod\", bindingAttr);\nobject result \u003d dynMethod.Invoke(dynClass, null);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eWikipedia definition of Encapsulation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3253",
    "name": "Constructor and destructor declarations should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSince the compiler will automatically invoke the base type’s no-argument constructor, there’s no need to specify its invocation explicitly. Also,\nwhen only a single \u003ccode\u003epublic\u003c/code\u003e parameterless constructor is defined in a class, then that constructor can be removed because the compiler\nwould generate it automatically. Similarly, empty \u003ccode\u003estatic\u003c/code\u003e constructors and empty destructors are also wasted keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public X() { } // Noncompliant\n  static X() { }  // Noncompliant\n  ~X() { } // Noncompliant\n\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter) : base() // Noncompliant\n  {\n    /* does something with the parameter */\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter)\n  {\n    /* does something with the parameter */\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSince the compiler will automatically invoke the base type’s no-argument constructor, there’s no need to specify its invocation explicitly. Also,\nwhen only a single \u003ccode\u003epublic\u003c/code\u003e parameterless constructor is defined in a class, then that constructor can be removed because the compiler\nwould generate it automatically. Similarly, empty \u003ccode\u003estatic\u003c/code\u003e constructors and empty destructors are also wasted keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  public X() { } // Noncompliant\n  static X() { }  // Noncompliant\n  ~X() { } // Noncompliant\n\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter) : base() // Noncompliant\n  {\n    /* does something with the parameter */\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass X\n{\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter)\n  {\n    /* does something with the parameter */\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3256",
    "name": "\"string.IsNullOrEmpty\" should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003estring.Equals\u003c/code\u003e to determine if a string is empty is significantly slower than using \u003ccode\u003estring.IsNullOrEmpty()\u003c/code\u003e or\nchecking for \u003ccode\u003estring.Length \u003d\u003d 0\u003c/code\u003e. \u003ccode\u003estring.IsNullOrEmpty()\u003c/code\u003e is both clear and concise, and therefore preferred to laborious,\nerror-prone, manual null- and emptiness-checking.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\"\".Equals(name); // Noncompliant\n!name.Equals(\"\"); // Noncompliant\nname.Equals(string.Empty); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nname !\u003d null \u0026amp;\u0026amp; name.Length \u0026gt; 0 // Compliant but more error prone\n!string.IsNullOrEmpty(name)\nstring.IsNullOrEmpty(name)\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003estring.Equals\u003c/code\u003e to determine if a string is empty is significantly slower than using \u003ccode\u003estring.IsNullOrEmpty()\u003c/code\u003e or\nchecking for \u003ccode\u003estring.Length \u003d\u003d 0\u003c/code\u003e. \u003ccode\u003estring.IsNullOrEmpty()\u003c/code\u003e is both clear and concise, and therefore preferred to laborious,\nerror-prone, manual null- and emptiness-checking.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\"\".Equals(name); // Noncompliant\n!name.Equals(\"\"); // Noncompliant\nname.Equals(string.Empty); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nname !\u003d null \u0026amp;\u0026amp; name.Length \u0026gt; 0 // Compliant but more error prone\n!string.IsNullOrEmpty(name)\nstring.IsNullOrEmpty(name)\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2166",
    "name": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class FruitException // Noncompliant - this has nothing to do with Exception\n{\n  private Fruit expected;\n  private string unusualCharacteristics;\n  private bool appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException // Noncompliant - does not derive from any Exception-based class\n{\n  public CarException(string message, Exception inner)\n  {\n     // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class FruitSport // Compliant - class name does not end with \u0027Exception\u0027\n{\n  private Fruit expected;\n  private string unusualCharacteristics;\n  private bool appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException: Exception // Compliant - correctly extends System.Exception\n{\n  public CarException(string message, Exception inner): base(message, inner)\n  {\n     // ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class FruitException // Noncompliant - this has nothing to do with Exception\n{\n  private Fruit expected;\n  private string unusualCharacteristics;\n  private bool appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException // Noncompliant - does not derive from any Exception-based class\n{\n  public CarException(string message, Exception inner)\n  {\n     // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class FruitSport // Compliant - class name does not end with \u0027Exception\u0027\n{\n  private Fruit expected;\n  private string unusualCharacteristics;\n  private bool appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException: Exception // Compliant - correctly extends System.Exception\n{\n  public CarException(string message, Exception inner): base(message, inner)\n  {\n     // ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention",
      "error-handling",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3376",
    "name": "Attribute, EventArgs, and Exception type names should end with the type being extended",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAdherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, \u003ccode\u003eclass FirstAttribute :\nAttribute\u003c/code\u003e can be used simply with \u003ccode\u003eFirst\u003c/code\u003e, but you must use the full name for \u003ccode\u003eclass AttributeOne : Attribute\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when classes extending \u003ccode\u003eAttribute\u003c/code\u003e, \u003ccode\u003eEventArgs\u003c/code\u003e, or \u003ccode\u003eException\u003c/code\u003e, do not end with their\nparent class names.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass AttributeOne : Attribute  // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass FirstAttribute : Attribute\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf a class\u0027 direct base class doesn’t follow the convention, then no issue is reported on the class itself, regardless of whether or not it\nconforms to the convention.\u003c/p\u003e\n\u003cpre\u003e\nclass Timeout : Exception // Noncompliant\n{\n}\nclass ExtendedTimeout : Timeout // Ignored; doesn\u0027t conform to convention, but the direct base doesn\u0027t conform either\n{\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAdherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, \u003ccode\u003eclass FirstAttribute :\nAttribute\u003c/code\u003e can be used simply with \u003ccode\u003eFirst\u003c/code\u003e, but you must use the full name for \u003ccode\u003eclass AttributeOne : Attribute\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when classes extending \u003ccode\u003eAttribute\u003c/code\u003e, \u003ccode\u003eEventArgs\u003c/code\u003e, or \u003ccode\u003eException\u003c/code\u003e, do not end with their\nparent class names.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass AttributeOne : Attribute  // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass FirstAttribute : Attribute\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf a class\u0027 direct base class doesn’t follow the convention, then no issue is reported on the class itself, regardless of whether or not it\nconforms to the convention.\u003c/p\u003e\n\u003cpre\u003e\nclass Timeout : Exception // Noncompliant\n{\n}\nclass ExtendedTimeout : Timeout // Ignored; doesn\u0027t conform to convention, but the direct base doesn\u0027t conform either\n{\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1199",
    "name": "Nested code blocks should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested code blocks create new scopes where variables declared within are inaccessible from the outside, and their lifespan ends with the block.\u003c/p\u003e\n\u003cp\u003eAlthough this may appear beneficial, their usage within a function often suggests that the function is overloaded. Thus, it may violate the Single\nResponsibility Principle, and the function needs to be broken down into smaller functions.\u003c/p\u003e\n\u003cp\u003eThe presence of nested blocks that don’t affect the control flow might suggest possible mistakes in the code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe usage of a code block after a \u003ccode\u003ecase\u003c/code\u003e is allowed.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe nested code blocks should be extracted into separate methods.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Evaluate()\n{\n    /* ... */\n    {     // Noncompliant - nested code block \u0027{\u0027 ... \u0027}\u0027\n          int a \u003d stack.pop();\n          int b \u003d stack.pop();\n          int result \u003d a + b;\n          stack.push(result);\n    }\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Evaluate()\n{\n    /* ... */\n    StackAdd();\n    /* ... */\n}\n\nprivate void StackAdd()\n{\n      int a \u003d stack.pop();\n      int b \u003d stack.pop();\n      int result \u003d a + b;\n      stack.push(result);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Single-responsibility_principle\"\u003eSingle Responsibility Principle\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested code blocks create new scopes where variables declared within are inaccessible from the outside, and their lifespan ends with the block.\u003c/p\u003e\n\u003cp\u003eAlthough this may appear beneficial, their usage within a function often suggests that the function is overloaded. Thus, it may violate the Single\nResponsibility Principle, and the function needs to be broken down into smaller functions.\u003c/p\u003e\n\u003cp\u003eThe presence of nested blocks that don’t affect the control flow might suggest possible mistakes in the code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe usage of a code block after a \u003ccode\u003ecase\u003c/code\u003e is allowed.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe nested code blocks should be extracted into separate methods.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Evaluate()\n{\n    /* ... */\n    {     // Noncompliant - nested code block \u0027{\u0027 ... \u0027}\u0027\n          int a \u003d stack.pop();\n          int b \u003d stack.pop();\n          int result \u003d a + b;\n          stack.push(result);\n    }\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Evaluate()\n{\n    /* ... */\n    StackAdd();\n    /* ... */\n}\n\nprivate void StackAdd()\n{\n      int a \u003d stack.pop();\n      int b \u003d stack.pop();\n      int result \u003d a + b;\n      stack.push(result);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Single-responsibility_principle\"\u003eSingle Responsibility Principle\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3257",
    "name": "Declarations and initializations should be as concise as possible",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn C#, the type of a variable can often be inferred by the compiler. The use of the [var keyword](\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables\"\u003ehttps://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables\u003c/a\u003e)\nallows you to avoid repeating the type name in a variable declaration and object instantiation because the declared type can often be inferred by the\ncompiler.\u003c/p\u003e\n\u003cp\u003eAdditionally, initializations providing the default value can also be omitted, helping to make the code more concise and readable.\u003c/p\u003e\n\u003cp\u003eUnnecessarily verbose declarations and initializations should be simplified. Specifically, the following should be omitted when they can be\ninferred:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e array element type \u003c/li\u003e\n  \u003cli\u003e array size \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enew DelegateType\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enew Nullable\u0026lt;Type\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e object or collection initializers ({}) \u003c/li\u003e\n  \u003cli\u003e type of lambda expression parameters \u003c/li\u003e\n  \u003cli\u003e parameter declarations of anonymous methods when the parameters are not used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove any unneeded code. C# provides many features designed to help you write more concise code.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar l \u003d new List\u0026lt;int\u0026gt;() {}; // Noncompliant, {} can be removed\nvar o \u003d new object() {}; // Noncompliant, {} can be removed\n\nvar ints \u003d new int[] {1, 2, 3}; // Noncompliant, int can be omitted\nints \u003d new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed\n\nint? i \u003d new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there\u0027s implicit conversion from T to T?\nvar j \u003d new int?(5);\n\nFunc\u0026lt;int, int\u0026gt; f1 \u003d (int i) \u003d\u0026gt; 1; //Noncompliant, can be simplified\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent +\u003d new EventHandler((a,b)\u003d\u0026gt;{ }); // Noncompliant, needlessly verbose\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar l \u003d new List\u0026lt;int\u0026gt;();\nvar o \u003d new object();\n\nvar ints \u003d new [] {1, 2, 3};\nints \u003d new [] {1, 2, 3};\n\nint? i \u003d 5;\nvar j \u003d new int?(5);\n\nFunc\u0026lt;int, int\u0026gt; f1 \u003d (i) \u003d\u0026gt; 1;\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent +\u003d (a,b)\u003d\u0026gt;{ };\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/declarations\"\u003eDeclaration\n  statements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn C#, the type of a variable can often be inferred by the compiler. The use of the [var keyword](\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables\"\u003ehttps://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables\u003c/a\u003e)\nallows you to avoid repeating the type name in a variable declaration and object instantiation because the declared type can often be inferred by the\ncompiler.\u003c/p\u003e\n\u003cp\u003eAdditionally, initializations providing the default value can also be omitted, helping to make the code more concise and readable.\u003c/p\u003e\n\u003cp\u003eUnnecessarily verbose declarations and initializations should be simplified. Specifically, the following should be omitted when they can be\ninferred:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e array element type \u003c/li\u003e\n  \u003cli\u003e array size \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enew DelegateType\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enew Nullable\u0026lt;Type\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e object or collection initializers ({}) \u003c/li\u003e\n  \u003cli\u003e type of lambda expression parameters \u003c/li\u003e\n  \u003cli\u003e parameter declarations of anonymous methods when the parameters are not used. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove any unneeded code. C# provides many features designed to help you write more concise code.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar l \u003d new List\u0026lt;int\u0026gt;() {}; // Noncompliant, {} can be removed\nvar o \u003d new object() {}; // Noncompliant, {} can be removed\n\nvar ints \u003d new int[] {1, 2, 3}; // Noncompliant, int can be omitted\nints \u003d new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed\n\nint? i \u003d new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there\u0027s implicit conversion from T to T?\nvar j \u003d new int?(5);\n\nFunc\u0026lt;int, int\u0026gt; f1 \u003d (int i) \u003d\u0026gt; 1; //Noncompliant, can be simplified\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent +\u003d new EventHandler((a,b)\u003d\u0026gt;{ }); // Noncompliant, needlessly verbose\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar l \u003d new List\u0026lt;int\u0026gt;();\nvar o \u003d new object();\n\nvar ints \u003d new [] {1, 2, 3};\nints \u003d new [] {1, 2, 3};\n\nint? i \u003d 5;\nvar j \u003d new int?(5);\n\nFunc\u0026lt;int, int\u0026gt; f1 \u003d (i) \u003d\u0026gt; 1;\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent +\u003d (a,b)\u003d\u0026gt;{ };\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/declarations\"\u003eDeclaration\n  statements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4225",
    "name": "Extension methods should not extend \"object\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e﻿Creating an extension method that extends \u003ccode\u003eobject\u003c/code\u003e is not recommended because it makes the method available on \u003cem\u003eevery\u003c/em\u003e type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be \u003ccode\u003eobject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static class MyExtensions\n{\n    public static void SomeExtension(this object obj) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e﻿Creating an extension method that extends \u003ccode\u003eobject\u003c/code\u003e is not recommended because it makes the method available on \u003cem\u003eevery\u003c/em\u003e type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be \u003ccode\u003eobject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static class MyExtensions\n{\n    public static void SomeExtension(this object obj) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4226",
    "name": "Extensions should be in separate namespaces",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt makes little sense to create an extension method when it is possible to just add that method to the class itself.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an extension is declared in the same namespace as the class it is extending.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n    }\n\n    public static class MyExtensions\n    {\n        public static void Bar(this Foo a) // Noncompliant\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eUsing separate namespace:\u003c/p\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n    }\n}\n\nnamespace Helpers\n{\n    public static class MyExtensions\n    {\n        public static void Bar(this Foo a)\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eMerging the method in the class:\u003c/p\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n        public void Bar()\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Extension methods added for clases decorated with \u003ccode\u003eSystem.CodeDom.Compiler.GeneratedCodeAttribute\u003c/code\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt makes little sense to create an extension method when it is possible to just add that method to the class itself.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an extension is declared in the same namespace as the class it is extending.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n    }\n\n    public static class MyExtensions\n    {\n        public static void Bar(this Foo a) // Noncompliant\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eUsing separate namespace:\u003c/p\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n    }\n}\n\nnamespace Helpers\n{\n    public static class MyExtensions\n    {\n        public static void Bar(this Foo a)\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eMerging the method in the class:\u003c/p\u003e\n\u003cpre\u003e\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n        public void Bar()\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Extension methods added for clases decorated with \u003ccode\u003eSystem.CodeDom.Compiler.GeneratedCodeAttribute\u003c/code\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2190",
    "name": "Loops and recursions should not be infinite",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving an infinite loop or recursion will lead to a program failure or a program never finishing the execution.\u003c/p\u003e\n\u003cpre\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (true) // Noncompliant: the program will never stop\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis can happen in multiple scenarios.\u003c/p\u003e\n\u003ch3\u003eLoop statements\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003efor\u003c/code\u003e loops with no \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ereturn\u003c/code\u003e statements that have exit conditions which are\nalways \u003ccode\u003efalse\u003c/code\u003e will be indefinitely executed.\u003c/p\u003e\n\u003ch3\u003e\"goto\" statements\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003egoto\u003c/code\u003e statement with nothing that stops it from being executed over and over again will prevent the program from the completion.\u003c/p\u003e\n\u003ch3\u003eRecursion\u003c/h3\u003e\n\u003cp\u003eWhen a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003erecursive\u003c/a\u003e method call chain lacks an exit condition, the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Call_stack\"\u003ecall stack\u003c/a\u003e will reach its limit and the program will crash due to a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nint Pow(int num, int exponent)\n{\n  return num * Pow(num, exponent - 1); // Noncompliant: no condition under which Pow isn\u0027t re-called\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this example, \u003ccode\u003ePow\u003c/code\u003e will keep calling \u003ccode\u003ePow\u003c/code\u003e with \u003ccode\u003eexponent - 1\u003c/code\u003e forever, until the program crashes with a\nStackOverflowException.\u003c/p\u003e\n\u003cp\u003eRecursion provides some benefits.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eSimplified code\u003c/strong\u003e: recursion can often lead to more concise and elegant code by breaking down complex problems into smaller,\n  more manageable parts. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eImproved code readability\u003c/strong\u003e: compared to iterative solutions, recursive solutions can be easier to understand and reason about.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, it has disadvantages as well.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eStack overflow\u003c/strong\u003e: Recursive functions can lead to \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003estack overflow\u003c/a\u003e if the recursion is too deep, potentially\n  causing the program to crash. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003ePerformance overhead\u003c/strong\u003e: Recursive function calls can lead to poor performance due to the need to push and pop \u003ca\n  href\u003d\"https://en.citizendium.org/wiki/Stack_frame#:~:text\u003dIn%20computer%20science%2C%20a%20stack,only%20exist%20at%20run%2Dtime\"\u003estack frames\u003c/a\u003e,\n  making them potentially slower than iterative solutions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDifficulty in debugging\u003c/strong\u003e: Debugging recursive code can be challenging, as multiple recursive calls can make it harder to track\n  the flow of execution and identify logical errors. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSpace complexity\u003c/strong\u003e: Recursive algorithms may require more memory compared to iterative approaches, as each recursive call adds a\n  new frame to the call stack. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eLack of control\u003c/strong\u003e: Recursion can sometimes lead to infinite loops or unexpected behavior if not properly implemented or\n  terminated, making it crucial to have proper base cases and exit conditions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe program’s logic should incorporate a mechanism to break out of the control flow loop. Here are some examples.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a loop condition which eventually evaluates to \u003ccode\u003efalse\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (true) // Noncompliant: the program will never stop\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (result \u0026lt; 1000)\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e As {rule:csharpsquid:S907} generally suggests, avoid using \u003ccode\u003egoto\u003c/code\u003e statements. Instead, you can use a loop statement or explicit\n  recursion. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Sum()\n{\n    var result \u003d 0;\n    var i \u003d 0;\niteration:\n    // Noncompliant: program never ends\n    result +\u003d i;\n    i++;\n    goto iteration;\n    return result;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (result \u0026lt; 1000)\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For a recursion make sure there is a base case when the recursive method is not re-called. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nint Pow(int num, int exponent)\n{\n  return num * Pow(num, exponent - 1); // Noncompliant: no condition under which Pow isn\u0027t re-called\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nint Pow(int num, int exponent)\n{\n  if (exponent \u0026gt; 1) // recursion is now conditional and stoppable\n  {\n    num \u003d num * Pow(num, exponent - 1);\n  }\n  return num;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe \"for\" statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-while-statement\"\u003eThe \"while\"\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-goto-statement\"\u003eThe \"goto\" statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Wikipedia \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion - wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception?view\u003dnet-7.0\"\u003eStackOverflowException\n  class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S907} - \"goto\" statement should not be used \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Edsger Dijkstra - \u003ca href\u003d\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD02xx/EWD215.html\"\u003eA Case against the GO TO Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving an infinite loop or recursion will lead to a program failure or a program never finishing the execution.\u003c/p\u003e\n\u003cpre\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (true) // Noncompliant: the program will never stop\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis can happen in multiple scenarios.\u003c/p\u003e\n\u003ch3\u003eLoop statements\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003efor\u003c/code\u003e loops with no \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ereturn\u003c/code\u003e statements that have exit conditions which are\nalways \u003ccode\u003efalse\u003c/code\u003e will be indefinitely executed.\u003c/p\u003e\n\u003ch3\u003e\"goto\" statements\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003egoto\u003c/code\u003e statement with nothing that stops it from being executed over and over again will prevent the program from the completion.\u003c/p\u003e\n\u003ch3\u003eRecursion\u003c/h3\u003e\n\u003cp\u003eWhen a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003erecursive\u003c/a\u003e method call chain lacks an exit condition, the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Call_stack\"\u003ecall stack\u003c/a\u003e will reach its limit and the program will crash due to a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nint Pow(int num, int exponent)\n{\n  return num * Pow(num, exponent - 1); // Noncompliant: no condition under which Pow isn\u0027t re-called\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this example, \u003ccode\u003ePow\u003c/code\u003e will keep calling \u003ccode\u003ePow\u003c/code\u003e with \u003ccode\u003eexponent - 1\u003c/code\u003e forever, until the program crashes with a\nStackOverflowException.\u003c/p\u003e\n\u003cp\u003eRecursion provides some benefits.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eSimplified code\u003c/strong\u003e: recursion can often lead to more concise and elegant code by breaking down complex problems into smaller,\n  more manageable parts. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eImproved code readability\u003c/strong\u003e: compared to iterative solutions, recursive solutions can be easier to understand and reason about.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, it has disadvantages as well.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eStack overflow\u003c/strong\u003e: Recursive functions can lead to \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003estack overflow\u003c/a\u003e if the recursion is too deep, potentially\n  causing the program to crash. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003ePerformance overhead\u003c/strong\u003e: Recursive function calls can lead to poor performance due to the need to push and pop \u003ca\n  href\u003d\"https://en.citizendium.org/wiki/Stack_frame#:~:text\u003dIn%20computer%20science%2C%20a%20stack,only%20exist%20at%20run%2Dtime\"\u003estack frames\u003c/a\u003e,\n  making them potentially slower than iterative solutions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDifficulty in debugging\u003c/strong\u003e: Debugging recursive code can be challenging, as multiple recursive calls can make it harder to track\n  the flow of execution and identify logical errors. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSpace complexity\u003c/strong\u003e: Recursive algorithms may require more memory compared to iterative approaches, as each recursive call adds a\n  new frame to the call stack. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eLack of control\u003c/strong\u003e: Recursion can sometimes lead to infinite loops or unexpected behavior if not properly implemented or\n  terminated, making it crucial to have proper base cases and exit conditions. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe program’s logic should incorporate a mechanism to break out of the control flow loop. Here are some examples.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e Use a loop condition which eventually evaluates to \u003ccode\u003efalse\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (true) // Noncompliant: the program will never stop\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (result \u0026lt; 1000)\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e As {rule:csharpsquid:S907} generally suggests, avoid using \u003ccode\u003egoto\u003c/code\u003e statements. Instead, you can use a loop statement or explicit\n  recursion. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Sum()\n{\n    var result \u003d 0;\n    var i \u003d 0;\niteration:\n    // Noncompliant: program never ends\n    result +\u003d i;\n    i++;\n    goto iteration;\n    return result;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic int Sum()\n{\n    var i \u003d 0;\n    var result \u003d 0;\n    while (result \u0026lt; 1000)\n    {\n        result +\u003d i;\n        i++;\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For a recursion make sure there is a base case when the recursive method is not re-called. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nint Pow(int num, int exponent)\n{\n  return num * Pow(num, exponent - 1); // Noncompliant: no condition under which Pow isn\u0027t re-called\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nint Pow(int num, int exponent)\n{\n  if (exponent \u0026gt; 1) // recursion is now conditional and stoppable\n  {\n    num \u003d num * Pow(num, exponent - 1);\n  }\n  return num;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe \"for\" statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-while-statement\"\u003eThe \"while\"\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-goto-statement\"\u003eThe \"goto\" statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Wikipedia \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion - wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception?view\u003dnet-7.0\"\u003eStackOverflowException\n  class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S907} - \"goto\" statement should not be used \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Edsger Dijkstra - \u003ca href\u003d\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD02xx/EWD215.html\"\u003eA Case against the GO TO Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S113",
    "name": "Files should end with a newline",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSome tools work better when files end with an empty line.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test\n+{\n+}\n\\ No newline at end of file\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSome tools work better when files end with an empty line.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test\n+{\n+}\n\\ No newline at end of file\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2077",
    "name": "Formatting SQL queries is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM",
      "MAINTAINABILITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn’t detect SQL injections (unlike rule {rule:csharpsquid:S3649}), the goal is only to highlight complex/formatted\nqueries.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Some parts of the query come from untrusted values (like user inputs). \u003c/li\u003e\n  \u003cli\u003e The query is repeated/duplicated in other parts of the code. \u003c/li\u003e\n  \u003cli\u003e The application must support different types of relational databases. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void Foo(DbContext context, string query, string param)\n{\n    string sensitiveQuery \u003d string.Concat(query, param);\n    context.Database.ExecuteSqlCommand(sensitiveQuery); // Sensitive\n    context.Query\u0026lt;User\u0026gt;().FromSql(sensitiveQuery); // Sensitive\n\n    context.Database.ExecuteSqlCommand($\"SELECT * FROM mytable WHERE mycol\u003d{value}\", param); // Sensitive, the FormattableString is evaluated and converted to RawSqlString\n    string query \u003d $\"SELECT * FROM mytable WHERE mycol\u003d{param}\";\n    context.Database.ExecuteSqlCommand(query); // Sensitive, the FormattableString has already been evaluated, it won\u0027t be converted to a parametrized query.\n}\n\npublic void Bar(SqlConnection connection, string param)\n{\n    SqlCommand command;\n    string sensitiveQuery \u003d string.Format(\"INSERT INTO Users (name) VALUES (\\\"{0}\\\")\", param);\n    command \u003d new SqlCommand(sensitiveQuery); // Sensitive\n\n    command.CommandText \u003d sensitiveQuery; // Sensitive\n\n    SqlDataAdapter adapter;\n    adapter \u003d new SqlDataAdapter(sensitiveQuery, connection); // Sensitive\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\"\u003eparameterized queries, prepared\n  statements, or stored procedures\u003c/a\u003e and bind variables to SQL query parameters. \u003c/li\u003e\n  \u003cli\u003e Consider using ORM frameworks if there is a need to have an abstract layer to access data. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void Foo(DbContext context, string query, string param)\n{\n    context.Database.ExecuteSqlCommand(\"SELECT * FROM mytable WHERE mycol\u003d@p0\", param); // Compliant, it\u0027s a parametrized safe query\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eTop 10 2021 Category A3 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/20\"\u003eCWE-20 - Improper Input Validation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89\"\u003eCWE-89 - Improper Neutralization of Special Elements used in an SQL Command\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rules \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\"\u003ePotential SQL/JPQL Injection\n  (JPA)\u003c/a\u003e, \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\"\u003ePotential SQL/JDOQL Injection (JDO)\u003c/a\u003e, \u003ca\n  href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\"\u003ePotential SQL/HQL Injection (Hibernate)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice",
      "cwe",
      "sql"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "csharpsquid:S6798",
    "name": "[JSInvokable] attribute should only be used on public methods",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn Blazor, the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.jsinvokableattribute\"\u003e[JSInvokable]\u003c/a\u003e attribute is used\nto annotate a method, enabling it to be invoked from JavaScript code. The prerequisite for this functionality is that the method must be declared as\n\u003ccode\u003epublic\u003c/code\u003e.\u003cbr\u003e Otherwise, a runtime error will be triggered when an attempt is made to call the method from JavaScript.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix the issue, ensure the methods annotated with the \u003ccode\u003e[JSInvokable]\u003c/code\u003e attribute are \u003ccode\u003epublic.\u003c/code\u003e\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@code {\n    [JSInvokable]\n    private static void MyStaticMethod() { } // Noncompliant\n\n    [JSInvokable]\n    internal void MyMethod() { } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@code {\n    [JSInvokable]\n    public static void MyStaticMethod() { } // Compliant\n\n    [JSInvokable]\n    public void MyMethod() { } // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript\"\u003eCall\n  .NET methods from JavaScript functions in ASP.NET Core Blazor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.jsinvokableattribute\"\u003eJSInvokableAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Blazor, the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.jsinvokableattribute\"\u003e[JSInvokable]\u003c/a\u003e attribute is used\nto annotate a method, enabling it to be invoked from JavaScript code. The prerequisite for this functionality is that the method must be declared as\n\u003ccode\u003epublic\u003c/code\u003e.\u003cbr\u003e Otherwise, a runtime error will be triggered when an attempt is made to call the method from JavaScript.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix the issue, ensure the methods annotated with the \u003ccode\u003e[JSInvokable]\u003c/code\u003e attribute are \u003ccode\u003epublic.\u003c/code\u003e\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@code {\n    [JSInvokable]\n    private static void MyStaticMethod() { } // Noncompliant\n\n    [JSInvokable]\n    internal void MyMethod() { } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@code {\n    [JSInvokable]\n    public static void MyStaticMethod() { } // Compliant\n\n    [JSInvokable]\n    public void MyMethod() { } // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-dotnet-from-javascript\"\u003eCall\n  .NET methods from JavaScript functions in ASP.NET Core Blazor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.jsinterop.jsinvokableattribute\"\u003eJSInvokableAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "blazor"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S122",
    "name": "Statements should be on separate lines",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nif (someCondition) DoSomething(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nif (someCondition)\n{\n  DoSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e block statements \u003c/li\u003e\n  \u003cli\u003e anonymous functions containing a single statement \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nFunc\u0026lt;object, bool\u0026gt; item1 \u003d o \u003d\u0026gt; { return true; }; // Compliant by exception\nFunc\u0026lt;object, bool\u0026gt; item1 \u003d o \u003d\u0026gt; { var r \u003d false; return r; }; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options\"\u003eC# formatting options\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nif (someCondition) DoSomething(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nif (someCondition)\n{\n  DoSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e block statements \u003c/li\u003e\n  \u003cli\u003e anonymous functions containing a single statement \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nFunc\u0026lt;object, bool\u0026gt; item1 \u003d o \u003d\u0026gt; { return true; }; // Compliant by exception\nFunc\u0026lt;object, bool\u0026gt; item1 \u003d o \u003d\u0026gt; { var r \u003d false; return r; }; // Noncompliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options\"\u003eC# formatting options\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2198",
    "name": "Unnecessary mathematical comparisons should not be made",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCertain \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003emathematical comparisons\u003c/a\u003e\nwill always return the same value, and should not be performed.\u003c/p\u003e\n\u003cp\u003eSpecifically, the following comparisons will return either always \u003ccode\u003etrue\u003c/code\u003e or always \u003ccode\u003efalse\u003c/code\u003e depending on the kind of\ncomparison:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e comparing a \u003ccode\u003echar\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003echar\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003efloat\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003efloat\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003elong\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003elong\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003eulong\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003eulong\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e etc. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfloat f \u003d 42.0f;\nif (f \u0026lt;\u003d double.MaxValue) { } // Noncompliant: always true\nif (f \u0026gt; double.MaxValue) { }  // Noncompliant: always false\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison\n  operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types#characteristics-of-the-integral-types\"\u003eRanges for integral numeric types (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char\"\u003eRange for char (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCertain \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003emathematical comparisons\u003c/a\u003e\nwill always return the same value, and should not be performed.\u003c/p\u003e\n\u003cp\u003eSpecifically, the following comparisons will return either always \u003ccode\u003etrue\u003c/code\u003e or always \u003ccode\u003efalse\u003c/code\u003e depending on the kind of\ncomparison:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e comparing a \u003ccode\u003echar\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003echar\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003efloat\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003efloat\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003elong\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003elong\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e comparing a \u003ccode\u003eulong\u003c/code\u003e with a numeric constant that is outside of the range of \u003ccode\u003eulong\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e etc. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfloat f \u003d 42.0f;\nif (f \u0026lt;\u003d double.MaxValue) { } // Noncompliant: always true\nif (f \u0026gt; double.MaxValue) { }  // Noncompliant: always false\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison\n  operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types#characteristics-of-the-integral-types\"\u003eRanges for integral numeric types (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char\"\u003eRange for char (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6797",
    "name": "Blazor query parameter type should be supported",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQuery\u003c/a\u003e\nattribute can be used to specify that a component parameter, of a routable component, comes from the query string.\u003c/p\u003e\n\u003cp\u003eComponent parameters supplied from the query string support the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bool, DateTime, decimal, double, float, Guid, int, long, string. \u003c/li\u003e\n  \u003cli\u003e Nullable variants of the preceding types. \u003c/li\u003e\n  \u003cli\u003e Arrays of the preceding types, whether they’re nullable or not nullable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eQuery parameters should have one of the supported types. Otherwise, an unhandled exception will be raised at runtime.\u003c/p\u003e\n\u003cpre\u003e\nUnhandled exception rendering component: Querystring values cannot be parsed as type \u0027\u0026lt;type\u0026gt;\u0027.\nSystem.NotSupportedException: Querystring values cannot be parsed as type \u0027\u0026lt;type\u0026gt;\u0027\n...\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eChange the parameter type to one of the following ones:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bool, DateTime, decimal, double, float, Guid, int, long, string. \u003c/li\u003e\n  \u003cli\u003e Nullable variants of the preceding types. \u003c/li\u003e\n  \u003cli\u003e Arrays of the preceding types, whether they’re nullable or not nullable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@page \"/print\"\n\u0026lt;p\u0026gt; Parameter value is: @Value \u0026lt;/p\u0026gt;\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery()]\n    public TimeSpan Value { get; set; }     // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/print\"\n\u0026lt;p\u0026gt; Parameter value is: @Value \u0026lt;/p\u0026gt;\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery()]\n    public long Value { get; set; }         // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQueryAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQuery\u003c/a\u003e\nattribute can be used to specify that a component parameter, of a routable component, comes from the query string.\u003c/p\u003e\n\u003cp\u003eComponent parameters supplied from the query string support the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bool, DateTime, decimal, double, float, Guid, int, long, string. \u003c/li\u003e\n  \u003cli\u003e Nullable variants of the preceding types. \u003c/li\u003e\n  \u003cli\u003e Arrays of the preceding types, whether they’re nullable or not nullable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eQuery parameters should have one of the supported types. Otherwise, an unhandled exception will be raised at runtime.\u003c/p\u003e\n\u003cpre\u003e\nUnhandled exception rendering component: Querystring values cannot be parsed as type \u0027\u0026lt;type\u0026gt;\u0027.\nSystem.NotSupportedException: Querystring values cannot be parsed as type \u0027\u0026lt;type\u0026gt;\u0027\n...\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eChange the parameter type to one of the following ones:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bool, DateTime, decimal, double, float, Guid, int, long, string. \u003c/li\u003e\n  \u003cli\u003e Nullable variants of the preceding types. \u003c/li\u003e\n  \u003cli\u003e Arrays of the preceding types, whether they’re nullable or not nullable. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@page \"/print\"\n\u0026lt;p\u0026gt; Parameter value is: @Value \u0026lt;/p\u0026gt;\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery()]\n    public TimeSpan Value { get; set; }     // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/print\"\n\u0026lt;p\u0026gt; Parameter value is: @Value \u0026lt;/p\u0026gt;\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery()]\n    public long Value { get; set; }         // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQueryAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "blazor"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2197",
    "name": "Modulus results should not be checked for direct equality",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic bool IsOdd(int x)\n{\n  return x % 2 \u003d\u003d 1;  // Noncompliant; if x is an odd negative, x % 2 \u003d\u003d -1\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic bool IsOdd(int x)\n{\n  return x % 2 !\u003d 0;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic bool IsOdd(uint x)\n{\n  return x % 2 \u003d\u003d 1;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic bool IsOdd(int x)\n{\n  return x % 2 \u003d\u003d 1;  // Noncompliant; if x is an odd negative, x % 2 \u003d\u003d -1\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic bool IsOdd(int x)\n{\n  return x % 2 !\u003d 0;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic bool IsOdd(uint x)\n{\n  return x % 2 \u003d\u003d 1;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4136",
    "name": "Method overloads should be grouped together",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninterface IMyInterface\n{\n  int DoTheThing(); // Noncompliant - overloaded method declarations are not grouped together\n  string DoTheOtherThing();\n  int DoTheThing(string s);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ninterface IMyInterface\n{\n  int DoTheThing();\n  int DoTheThing(string s);\n  string DoTheOtherThing();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAs it is common practice to group method declarations by implemented interface, no issue will be raised for implicit and explicit interface\nimplementations if grouped together with other members of that interface.\u003c/p\u003e\n\u003cp\u003eAs it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different\naccess modifiers.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private void DoTheThing(string s) // Ok - this method is declared as private while the other one is public\n  {\n    // ...\n  }\n\n  private string DoTheOtherThing(string s)\n  {\n    // ...\n  }\n\n  public void DoTheThing()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninterface IMyInterface\n{\n  int DoTheThing(); // Noncompliant - overloaded method declarations are not grouped together\n  string DoTheOtherThing();\n  int DoTheThing(string s);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ninterface IMyInterface\n{\n  int DoTheThing();\n  int DoTheThing(string s);\n  string DoTheOtherThing();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAs it is common practice to group method declarations by implemented interface, no issue will be raised for implicit and explicit interface\nimplementations if grouped together with other members of that interface.\u003c/p\u003e\n\u003cp\u003eAs it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different\naccess modifiers.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private void DoTheThing(string s) // Ok - this method is declared as private while the other one is public\n  {\n    // ...\n  }\n\n  private string DoTheOtherThing(string s)\n  {\n    // ...\n  }\n\n  public void DoTheThing()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3168",
    "name": "\"async\" methods should not return \"void\"",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\"\u003e\u003ccode\u003easync\u003c/code\u003e\u003c/a\u003e method with a\n\u003ccode\u003evoid\u003c/code\u003e return type does not follow the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model\"\u003etask asynchronous programming\n(TAP)\u003c/a\u003e model since the return type should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task\"\u003e\u003ccode\u003eTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003e\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDoing so prevents control over the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios\"\u003easynchronous\nexecution\u003c/a\u003e, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e waiting for the execution to complete \u003c/li\u003e\n  \u003cli\u003e catching any exception that might occur during execution \u003c/li\u003e\n  \u003cli\u003e testing execution behavior \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Methods with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.eventhandler\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e\u003c/a\u003e delegate signature.  Using \u003ccode\u003evoid\u003c/code\u003e for \u003ccode\u003eEventHandler\u003c/code\u003e is compliant with the TAP model.  \u003cpre\u003e\npublic async void button1_Click(object sender, EventArgs e)\n{\n  await DoSomethingAsync();\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Methods name matching \u003ccode\u003eOn[A-Z]\\w*\u003c/code\u003e pattern.  Some frameworks may not use the same \u003ccode\u003eEventHandler\u003c/code\u003e method signature  \u003cpre\u003e\npublic async void OnClick(EventContext data)\n{\n  await DoSomethingAsync();\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eUpdate the return type of the method from \u003ccode\u003evoid\u003c/code\u003e to \u003ccode\u003eTask\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate async void ThrowExceptionAsync() // Noncompliant: async method return type is \u0027void\u0027\n{\n  throw new InvalidOperationException();\n}\n\npublic void Method()\n{\n  try\n  {\n    ThrowExceptionAsync();\n  }\n  catch (Exception)\n  {\n    // The exception is never caught here\n    throw;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate async Task ThrowExceptionAsync() // Compliant: async method return type is \u0027Task\u0027\n{\n  throw new InvalidOperationException();\n}\n\npublic void Method()\n{\n  try\n  {\n    await ThrowExceptionAsync();\n  }\n  catch (Exception)\n  {\n    // The exception is caught here\n    throw;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\"\u003e\u003ccode\u003easync\u003c/code\u003e (C#\n  Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios\"\u003eAsynchronous\n  programming\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model\"\u003eTask\n  asynchronous programming model\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task\"\u003e\u003ccode\u003eTask\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003e\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.eventhandler\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\"\u003e\u003ccode\u003easync\u003c/code\u003e\u003c/a\u003e method with a\n\u003ccode\u003evoid\u003c/code\u003e return type does not follow the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model\"\u003etask asynchronous programming\n(TAP)\u003c/a\u003e model since the return type should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task\"\u003e\u003ccode\u003eTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003e\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDoing so prevents control over the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios\"\u003easynchronous\nexecution\u003c/a\u003e, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e waiting for the execution to complete \u003c/li\u003e\n  \u003cli\u003e catching any exception that might occur during execution \u003c/li\u003e\n  \u003cli\u003e testing execution behavior \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Methods with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.eventhandler\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e\u003c/a\u003e delegate signature.  Using \u003ccode\u003evoid\u003c/code\u003e for \u003ccode\u003eEventHandler\u003c/code\u003e is compliant with the TAP model.  \u003cpre\u003e\npublic async void button1_Click(object sender, EventArgs e)\n{\n  await DoSomethingAsync();\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Methods name matching \u003ccode\u003eOn[A-Z]\\w*\u003c/code\u003e pattern.  Some frameworks may not use the same \u003ccode\u003eEventHandler\u003c/code\u003e method signature  \u003cpre\u003e\npublic async void OnClick(EventContext data)\n{\n  await DoSomethingAsync();\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eUpdate the return type of the method from \u003ccode\u003evoid\u003c/code\u003e to \u003ccode\u003eTask\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate async void ThrowExceptionAsync() // Noncompliant: async method return type is \u0027void\u0027\n{\n  throw new InvalidOperationException();\n}\n\npublic void Method()\n{\n  try\n  {\n    ThrowExceptionAsync();\n  }\n  catch (Exception)\n  {\n    // The exception is never caught here\n    throw;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate async Task ThrowExceptionAsync() // Compliant: async method return type is \u0027Task\u0027\n{\n  throw new InvalidOperationException();\n}\n\npublic void Method()\n{\n  try\n  {\n    await ThrowExceptionAsync();\n  }\n  catch (Exception)\n  {\n    // The exception is caught here\n    throw;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async\"\u003e\u003ccode\u003easync\u003c/code\u003e (C#\n  Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios\"\u003eAsynchronous\n  programming\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model\"\u003eTask\n  asynchronous programming model\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task\"\u003e\u003ccode\u003eTask\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003e\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.eventhandler\"\u003e\u003ccode\u003eEventHandler\u003c/code\u003e Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await",
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4015",
    "name": "Inherited member visibility should not be decreased",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDecreasing the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eaccessibility\nlevel\u003c/a\u003e of an inherited method that is not \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/override\"\u003eoverridable\u003c/a\u003e to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/private\"\u003eprivate\u003c/a\u003e will shadow the name of the base method and can\nlead to confusion.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeMethod(int count) { } // Noncompliant\n}\n\nclass Program\n{\n    public void DoWork()\n    {\n        var derived \u003d new Derived();\n        derived.SomeMethod(42); // Base.SomeMethod is accessed here\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother potential problem is the case of a class deriving from \u003ccode\u003eDerived\u003c/code\u003e and accessing \u003ccode\u003eSomeMethod\u003c/code\u003e. In this scenario, the\nmethod accessed will instead be the \u003ccode\u003eBase\u003c/code\u003e implementation, which might not be what was expected.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeMethod(int count) { } // Noncompliant\n}\n\npublic class SecondDerived : Derived\n{\n    public void DoWork()\n    {\n        SomeMethod(42); // Base.SomeMethod is accessed here\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eOne way to mitigate this, is by sealing the \u003ccode\u003eDerived\u003c/code\u003e class by using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003esealed\u003c/a\u003e modifier, thus preventing inheritance from this\npoint on.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic sealed class Derived : Base\n{\n    private void SomeMethod(int count) { } // Compliant: class is marked as sealed\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother way to mitigate this, is by having the \u003ccode\u003eDerived\u003c/code\u003e implementation match the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eaccessibility\u003c/a\u003e modifier of the\n\u003ccode\u003eBase\u003c/code\u003e implementation of \u003ccode\u003eSomeMethod\u003c/code\u003e. From a caller’s perspective, this is closer to the expected behavior.\u003c/p\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Base\n    {\n        public void SomeMethod(int count) { }\n    }\n    public class Derived : Base\n    {\n        public void SomeMethod(int count) { } // Compliant: same accessibility as Base.SomeMethod\n    }\n\n    public class Program\n    {\n        public void DoWork()\n        {\n            var derived \u003d new Derived();\n            derived.SomeMethod(42); // Derived.SomeMethod is called\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eLast but not least, consider using a different name for the \u003ccode\u003eDerived\u003c/code\u003e method, thus completely eliminating any confusion caused by the\nnaming collision.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeOtherMethod(int count) { } // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess Modifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/override\"\u003eoverride\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003esealed\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDecreasing the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eaccessibility\nlevel\u003c/a\u003e of an inherited method that is not \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/override\"\u003eoverridable\u003c/a\u003e to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/private\"\u003eprivate\u003c/a\u003e will shadow the name of the base method and can\nlead to confusion.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeMethod(int count) { } // Noncompliant\n}\n\nclass Program\n{\n    public void DoWork()\n    {\n        var derived \u003d new Derived();\n        derived.SomeMethod(42); // Base.SomeMethod is accessed here\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother potential problem is the case of a class deriving from \u003ccode\u003eDerived\u003c/code\u003e and accessing \u003ccode\u003eSomeMethod\u003c/code\u003e. In this scenario, the\nmethod accessed will instead be the \u003ccode\u003eBase\u003c/code\u003e implementation, which might not be what was expected.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeMethod(int count) { } // Noncompliant\n}\n\npublic class SecondDerived : Derived\n{\n    public void DoWork()\n    {\n        SomeMethod(42); // Base.SomeMethod is accessed here\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eOne way to mitigate this, is by sealing the \u003ccode\u003eDerived\u003c/code\u003e class by using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003esealed\u003c/a\u003e modifier, thus preventing inheritance from this\npoint on.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic sealed class Derived : Base\n{\n    private void SomeMethod(int count) { } // Compliant: class is marked as sealed\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother way to mitigate this, is by having the \u003ccode\u003eDerived\u003c/code\u003e implementation match the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eaccessibility\u003c/a\u003e modifier of the\n\u003ccode\u003eBase\u003c/code\u003e implementation of \u003ccode\u003eSomeMethod\u003c/code\u003e. From a caller’s perspective, this is closer to the expected behavior.\u003c/p\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Base\n    {\n        public void SomeMethod(int count) { }\n    }\n    public class Derived : Base\n    {\n        public void SomeMethod(int count) { } // Compliant: same accessibility as Base.SomeMethod\n    }\n\n    public class Program\n    {\n        public void DoWork()\n        {\n            var derived \u003d new Derived();\n            derived.SomeMethod(42); // Derived.SomeMethod is called\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eLast but not least, consider using a different name for the \u003ccode\u003eDerived\u003c/code\u003e method, thus completely eliminating any confusion caused by the\nnaming collision.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n    public void SomeMethod(int count) { }\n}\npublic class Derived : Base\n{\n    private void SomeOtherMethod(int count) { } // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess Modifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/override\"\u003eoverride\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\"\u003esealed\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S121",
    "name": "Control structures should use curly braces",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eControl structures are code statements that impact the program’s control flow (e.g., if statements, for loops, etc.)\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003cp\u003eIn the following example, the two calls seem to be attached to the \u003ccode\u003eif\u003c/code\u003e statement, but only the first one is, and\n\u003ccode\u003eCheckSomething\u003c/code\u003e will always be executed:\u003c/p\u003e\n\u003cpre\u003e\nif (condition) // Noncompliant\n  ExecuteSomething();\n  CheckSomething();\n\u003c/pre\u003e\n\u003cp\u003eAdding curly braces improves the code readability and its robustness:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n{\n  ExecuteSomething();\n  CheckSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule raises an issue when a control structure has no curly braces.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eControl structures are code statements that impact the program’s control flow (e.g., if statements, for loops, etc.)\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003cp\u003eIn the following example, the two calls seem to be attached to the \u003ccode\u003eif\u003c/code\u003e statement, but only the first one is, and\n\u003ccode\u003eCheckSomething\u003c/code\u003e will always be executed:\u003c/p\u003e\n\u003cpre\u003e\nif (condition) // Noncompliant\n  ExecuteSomething();\n  CheckSomething();\n\u003c/pre\u003e\n\u003cp\u003eAdding curly braces improves the code readability and its robustness:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n{\n  ExecuteSomething();\n  CheckSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule raises an issue when a control structure has no curly braces.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4017",
    "name": "Method signatures should not contain nested generic types",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing\ncode. It should be avoided as much as possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections.Generic;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void DoSomething(ICollection\u0026lt;ICollection\u0026lt;int\u0026gt;\u0026gt; outerCollect) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing\ncode. It should be avoided as much as possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections.Generic;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void DoSomething(ICollection\u0026lt;ICollection\u0026lt;int\u0026gt;\u0026gt; outerCollect) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4016",
    "name": "Enumeration members should not be named \"Reserved\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf an \u003ccode\u003eenum\u003c/code\u003e member’s name contains the word \"reserved\" it implies it is not currently used and will be change in the future. However\nchanging an \u003ccode\u003eenum\u003c/code\u003e member is a breaking change and can create significant problems. There is no need to reserve an \u003ccode\u003eenum\u003c/code\u003e member\nsince a new member can be added in the future, and such an addition will usually not be a breaking change.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of an enumeration member contains \"reserved\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public enum Color\n  {\n        None,\n        Red,\n        Orange,\n        Yellow,\n        ReservedColor  // Noncompliant\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf an \u003ccode\u003eenum\u003c/code\u003e member’s name contains the word \"reserved\" it implies it is not currently used and will be change in the future. However\nchanging an \u003ccode\u003eenum\u003c/code\u003e member is a breaking change and can create significant problems. There is no need to reserve an \u003ccode\u003eenum\u003c/code\u003e member\nsince a new member can be added in the future, and such an addition will usually not be a breaking change.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the name of an enumeration member contains \"reserved\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public enum Color\n  {\n        None,\n        Red,\n        Orange,\n        Yellow,\n        ReservedColor  // Noncompliant\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3169",
    "name": "Multiple \"OrderBy\" calls should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in chaining multiple \u003ccode\u003eOrderBy\u003c/code\u003e calls in a LINQ; only the last one will be reflected in the result because each\nsubsequent call completely reorders the list. Thus, calling \u003ccode\u003eOrderBy\u003c/code\u003e multiple times is a performance issue as well, because all of the\nsorting will be executed, but only the result of the last sort will be kept.\u003c/p\u003e\n\u003cp\u003eInstead, use \u003ccode\u003eThenBy\u003c/code\u003e for each call after the first.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d personList\n  .OrderBy(person \u003d\u0026gt; person.Age)\n  .OrderBy(person \u003d\u0026gt; person.Name)  // Noncompliant\n  .ToList();  // x is sorted by Name, not sub-sorted\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d personList\n  .OrderBy(person \u003d\u0026gt; person.Age)\n  .ThenBy(person \u003d\u0026gt; person.Name)\n  .ToList();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in chaining multiple \u003ccode\u003eOrderBy\u003c/code\u003e calls in a LINQ; only the last one will be reflected in the result because each\nsubsequent call completely reorders the list. Thus, calling \u003ccode\u003eOrderBy\u003c/code\u003e multiple times is a performance issue as well, because all of the\nsorting will be executed, but only the result of the last sort will be kept.\u003c/p\u003e\n\u003cp\u003eInstead, use \u003ccode\u003eThenBy\u003c/code\u003e for each call after the first.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d personList\n  .OrderBy(person \u003d\u0026gt; person.Age)\n  .OrderBy(person \u003d\u0026gt; person.Name)  // Noncompliant\n  .ToList();  // x is sorted by Name, not sub-sorted\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d personList\n  .OrderBy(person \u003d\u0026gt; person.Age)\n  .ThenBy(person \u003d\u0026gt; person.Name)\n  .ToList();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4019",
    "name": "Base class methods should not be hidden",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a method in a derived class has:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the same name as a method in the base class \u003c/li\u003e\n  \u003cli\u003e but types of parameters that are ancestors (for example \u003ccode\u003estring\u003c/code\u003e in the base class and \u003ccode\u003eobject\u003c/code\u003e in the derived class)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ethe result is that the base method becomes hidden.\u003c/p\u003e\n\u003cp\u003eAs shown in the following code snippet, when an instance of the derived class is used, invoking the method with an argument that matches the less\nderived parameter type will invoke the derived class method instead of the base class method:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass BaseClass\n{\n  internal void MyMethod(string str) \u003d\u0026gt; Console.WriteLine(\"BaseClass: Method(string)\");\n}\n\nclass DerivedClass : BaseClass\n{\n  internal void MyMethod(object str) \u003d\u0026gt; Console.WriteLine(\"DerivedClass: Method(object)\"); // Noncompliant\n}\n\n// ...\nBaseClass baseObj \u003d new BaseClass();\nbaseObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nDerivedClass derivedObj \u003d new DerivedClass();\nderivedObj.MyMethod(\"Hello\"); // Output: DerivedClass: Method(object) - DerivedClass method is hiding the BaseClass method\n\nBaseClass derivedAsBase \u003d new DerivedClass();\nderivedAsBase.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass BaseClass\n{\n  internal void MyMethod(string str) \u003d\u0026gt; Console.WriteLine(\"BaseClass: Method(string)\");\n}\n\nclass DerivedClass : BaseClass\n{\n  internal void MyOtherMethod(object str) \u003d\u0026gt; Console.WriteLine(\"DerivedClass: Method(object)\"); // Compliant\n}\n\n// ...\nBaseClass baseObj \u003d new BaseClass();\nbaseObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nDerivedClass derivedObj \u003d new DerivedClass();\nderivedObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nBaseClass derivedAsBase \u003d new DerivedClass();\nderivedAsBase.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\u003c/pre\u003e\n\u003cp\u003eKeep in mind that you cannot fix this issue by using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier\"\u003enew keyword\u003c/a\u003e or by marking the method in the base\nclass as \u003ccode\u003evirtual\u003c/code\u003e and overriding it in the \u003ccode\u003eDerivedClass\u003c/code\u003e because the parameter types are different.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule is not raised when the two methods have the same parameter types.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords\"\u003eKnowing\n  When to Use Override and New Keywords\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003eMember overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier\"\u003e\u0027new\u0027 modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0108\"\u003eCS0108 - Hiding inherited member\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a method in a derived class has:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the same name as a method in the base class \u003c/li\u003e\n  \u003cli\u003e but types of parameters that are ancestors (for example \u003ccode\u003estring\u003c/code\u003e in the base class and \u003ccode\u003eobject\u003c/code\u003e in the derived class)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ethe result is that the base method becomes hidden.\u003c/p\u003e\n\u003cp\u003eAs shown in the following code snippet, when an instance of the derived class is used, invoking the method with an argument that matches the less\nderived parameter type will invoke the derived class method instead of the base class method:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass BaseClass\n{\n  internal void MyMethod(string str) \u003d\u0026gt; Console.WriteLine(\"BaseClass: Method(string)\");\n}\n\nclass DerivedClass : BaseClass\n{\n  internal void MyMethod(object str) \u003d\u0026gt; Console.WriteLine(\"DerivedClass: Method(object)\"); // Noncompliant\n}\n\n// ...\nBaseClass baseObj \u003d new BaseClass();\nbaseObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nDerivedClass derivedObj \u003d new DerivedClass();\nderivedObj.MyMethod(\"Hello\"); // Output: DerivedClass: Method(object) - DerivedClass method is hiding the BaseClass method\n\nBaseClass derivedAsBase \u003d new DerivedClass();\nderivedAsBase.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass BaseClass\n{\n  internal void MyMethod(string str) \u003d\u0026gt; Console.WriteLine(\"BaseClass: Method(string)\");\n}\n\nclass DerivedClass : BaseClass\n{\n  internal void MyOtherMethod(object str) \u003d\u0026gt; Console.WriteLine(\"DerivedClass: Method(object)\"); // Compliant\n}\n\n// ...\nBaseClass baseObj \u003d new BaseClass();\nbaseObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nDerivedClass derivedObj \u003d new DerivedClass();\nderivedObj.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\nBaseClass derivedAsBase \u003d new DerivedClass();\nderivedAsBase.MyMethod(\"Hello\"); // Output: BaseClass: Method(string)\n\u003c/pre\u003e\n\u003cp\u003eKeep in mind that you cannot fix this issue by using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier\"\u003enew keyword\u003c/a\u003e or by marking the method in the base\nclass as \u003ccode\u003evirtual\u003c/code\u003e and overriding it in the \u003ccode\u003eDerivedClass\u003c/code\u003e because the parameter types are different.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule is not raised when the two methods have the same parameter types.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords\"\u003eKnowing\n  When to Use Override and New Keywords\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003eMember overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-modifier\"\u003e\u0027new\u0027 modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs0108\"\u003eCS0108 - Hiding inherited member\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4018",
    "name": "All type parameters should be used in the parameter list to enable type inference",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eType inference enables the call of a generic method without explicitly specifying its type arguments. This is not possible when a parameter type is\nmissing from the argument list.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod\u0026lt;T\u0026gt;()  // Noncompliant\n    {\n        // this method can only be invoked by providing the type argument e.g. \u0027MyMethod\u0026lt;int\u0026gt;()\u0027\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod\u0026lt;T\u0026gt;(T param)\n    {\n        // type inference allows this to be invoked \u0027MyMethod(arg)\u0027\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eType inference enables the call of a generic method without explicitly specifying its type arguments. This is not possible when a parameter type is\nmissing from the argument list.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod\u0026lt;T\u0026gt;()  // Noncompliant\n    {\n        // this method can only be invoked by providing the type argument e.g. \u0027MyMethod\u0026lt;int\u0026gt;()\u0027\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod\u0026lt;T\u0026gt;(T param)\n    {\n        // type inference allows this to be invoked \u0027MyMethod(arg)\u0027\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S108",
    "name": "Nested blocks of code should not be left empty",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 42; i++){}  // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 42; i++){}  // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S109",
    "name": "Magic numbers should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eA magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less\nreadable and maintainable.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMagic numbers make the code more complex to understand as it requires the reader to have knowledge about the global context to understand the\nnumber itself. Their usage may seem obvious when writing the code, but it may not be the case for another developer or later once the context faded\naway. -1, 0, and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the magic number is used as part of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the \u003ccode\u003eGetHashCode\u003c/code\u003e method \u003c/li\u003e\n  \u003cli\u003e a variable/field declaration \u003c/li\u003e\n  \u003cli\u003e the single argument of an attribute \u003c/li\u003e\n  \u003cli\u003e a named argument for a method or attribute \u003c/li\u003e\n  \u003cli\u003e a constructor call \u003c/li\u003e\n  \u003cli\u003e a default value for a method argument \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplacing them with a constant allows us to provide a meaningful name associated with the value. Instead of adding complexity to the code, it\nbrings clarity and helps to understand the context and the global meaning.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void DoSomething()\n{\n    for (int i \u003d 0; i \u0026lt; 4; i++)  // Noncompliant, 4 is a magic number\n    {\n        ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate const int NUMBER_OF_CYCLES \u003d 4;\n\npublic void DoSomething()\n{\n    for (int i \u003d 0; i \u0026lt; NUMBER_OF_CYCLES; i++)  // Compliant\n    {\n        ...\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eA magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less\nreadable and maintainable.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMagic numbers make the code more complex to understand as it requires the reader to have knowledge about the global context to understand the\nnumber itself. Their usage may seem obvious when writing the code, but it may not be the case for another developer or later once the context faded\naway. -1, 0, and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the magic number is used as part of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the \u003ccode\u003eGetHashCode\u003c/code\u003e method \u003c/li\u003e\n  \u003cli\u003e a variable/field declaration \u003c/li\u003e\n  \u003cli\u003e the single argument of an attribute \u003c/li\u003e\n  \u003cli\u003e a named argument for a method or attribute \u003c/li\u003e\n  \u003cli\u003e a constructor call \u003c/li\u003e\n  \u003cli\u003e a default value for a method argument \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplacing them with a constant allows us to provide a meaningful name associated with the value. Instead of adding complexity to the code, it\nbrings clarity and helps to understand the context and the global meaning.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void DoSomething()\n{\n    for (int i \u003d 0; i \u0026lt; 4; i++)  // Noncompliant, 4 is a magic number\n    {\n        ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate const int NUMBER_OF_CYCLES \u003d 4;\n\npublic void DoSomething()\n{\n    for (int i \u003d 0; i \u0026lt; NUMBER_OF_CYCLES; i++)  // Compliant\n    {\n        ...\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S106",
    "name": "Standard outputs should not be used directly to log anything",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is\nessential to ensure that the logs are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e easily accessible \u003c/li\u003e\n  \u003cli\u003e uniformly formatted for readability \u003c/li\u003e\n  \u003cli\u003e properly recorded \u003c/li\u003e\n  \u003cli\u003e securely logged when dealing with sensitive data \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose requirements are not met if a program directly writes to the standard outputs (e.g., Console). That is why defining and using a dedicated\nlogger is highly recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue for:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Console Applications \u003c/li\u003e\n  \u003cli\u003e Calls in methods decorated with \u003ccode\u003e[Conditional (\"DEBUG\")]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Calls included in DEBUG preprocessor branches (\u003ccode\u003e#if DEBUG\u003c/code\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following noncompliant code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass\n{\n    private void DoSomething()\n    {\n        // ...\n        Console.WriteLine(\"My Message\"); // Noncompliant\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eCould be replaced by:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass\n{\n    private readonly ILogger _logger;\n\n    // ...\n\n    private void DoSomething()\n    {\n        // ...\n        _logger.LogInformation(\"My Message\");\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is\nessential to ensure that the logs are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e easily accessible \u003c/li\u003e\n  \u003cli\u003e uniformly formatted for readability \u003c/li\u003e\n  \u003cli\u003e properly recorded \u003c/li\u003e\n  \u003cli\u003e securely logged when dealing with sensitive data \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose requirements are not met if a program directly writes to the standard outputs (e.g., Console). That is why defining and using a dedicated\nlogger is highly recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue for:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Console Applications \u003c/li\u003e\n  \u003cli\u003e Calls in methods decorated with \u003ccode\u003e[Conditional (\"DEBUG\")]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Calls included in DEBUG preprocessor branches (\u003ccode\u003e#if DEBUG\u003c/code\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe following noncompliant code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass\n{\n    private void DoSomething()\n    {\n        // ...\n        Console.WriteLine(\"My Message\"); // Noncompliant\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eCould be replaced by:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass\n{\n    private readonly ILogger _logger;\n\n    // ...\n\n    private void DoSomething()\n    {\n        // ...\n        _logger.LogInformation(\"My Message\");\n        // ...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S107",
    "name": "Methods should not have too many parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nvoid SetCoordinates(int x1, int y1, int z1, int x2, int y2, int z2) // Noncompliant\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the method into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid SetOrigin(int x, int y, int z)\n{\n   // ...\n}\n\nvoid SetSize(int width, int height, int depth)\n{\n   //\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// In geometry, Point is a logical structure to group data\nreadonly record struct Point(int X, int Y, int Z);\n\nvoid SetCoordinates(Point p1, Point p2)\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a method has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not count the parameters intended for a base class constructor.\u003c/p\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\npublic class BaseClass\n{\n    public BaseClass(int param1)\n    {\n        // ...\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public DerivedClass(int param1, int param2, int param3, string param4, long param5) : base(param1) // Compliant by exception\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nvoid SetCoordinates(int x1, int y1, int z1, int x2, int y2, int z2) // Noncompliant\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the method into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid SetOrigin(int x, int y, int z)\n{\n   // ...\n}\n\nvoid SetSize(int width, int height, int depth)\n{\n   //\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// In geometry, Point is a logical structure to group data\nreadonly record struct Point(int X, int Y, int Z);\n\nvoid SetCoordinates(Point p1, Point p2)\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a method has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not count the parameters intended for a base class constructor.\u003c/p\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\npublic class BaseClass\n{\n    public BaseClass(int param1)\n    {\n        // ...\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public DerivedClass(int param1, int param2, int param3, string param4, long param5) : base(param1) // Compliant by exception\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized number of parameters",
        "defaultValue": "7",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "7"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2183",
    "name": "Integral numbers should not be shifted by zero or more than their number of bits-1",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eshifting\u003c/a\u003e\noperators are used to do an \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_shift\"\u003earithmetic shift\u003c/a\u003e to the bits of an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eintegral numeric\u003c/a\u003e value, either to\nthe left or the right.\u003c/p\u003e\n\u003cpre\u003e\nvar number \u003d 14;         // ...01110 (14)\nvar left \u003d number \u0026lt;\u0026lt; 1;  // ...11100 (28)\nvar right \u003d number \u0026gt;\u0026gt; 1; // ...00111 (7)\n\u003c/pre\u003e\n\u003cp\u003eTherefore, shifting an integral number by 0 is equivalent to doing nothing, since the bits do not move any positions to the left or the right.\u003c/p\u003e\n\u003cp\u003eOn the other hand, shifting an integral number by a value greater than their count of bits minus one (\u003ccode\u003en_bits-1\u003c/code\u003e) is equivalent to\nshifting by the value \u003ca href\u003d\"https://en.wikipedia.org/wiki/Modulo\"\u003emodulo\u003c/a\u003e the bit count of the number (\u003ccode\u003evalue % n_bits\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIn the case of \u003ccode\u003eint\u003c/code\u003e and \u003ccode\u003euint\u003c/code\u003e, which take 32 bits in the memory, the shift count is given by the five low-order bits of the\nsecond operand, which can represent numbers from 0 to 31. This means that numbers having the same five low-order bits are treated the same by the\nshift operators.\u003c/p\u003e\n\u003cpre\u003e\nvar one \u003d         0b0_00001;\nvar thirtyThree \u003d 0b1_00001; // Same five low-order bits, 33 % 32 \u003d 1\n\nvar shifted1 \u003d 42 \u0026lt;\u0026lt; one;           // Results in 84\nvar shifted2 \u003d 42 \u0026lt;\u0026lt; thirtyThree;   // Results in 84\n\u003c/pre\u003e\n\u003cp\u003eNote that integral number with a less than 32-bit quantity (e.g. \u003ccode\u003eshort\u003c/code\u003e, \u003ccode\u003eushort\u003c/code\u003e) are implicitly converted to\n\u003ccode\u003eint\u003c/code\u003e before the shifting operation and so the rule for \u003ccode\u003eint\u003c/code\u003e/\u003ccode\u003euint\u003c/code\u003e applies.\u003c/p\u003e\n\u003cp\u003eIf the first operand is a \u003ccode\u003elong\u003c/code\u003e or \u003ccode\u003eulong\u003c/code\u003e (64-bit quantity), the shift count is given by the six low-order bits of the\nsecond operand. That is, the actual shift count is 0 to 63 bits.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the shift by zero is obviously for cosmetic reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the value shifted is a literal. \u003c/li\u003e\n  \u003cli\u003e When there is a similar shift at the same position on line before or after. E.g.: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nbytes[loc+0] \u003d (byte)(value \u0026gt;\u0026gt; 8);\nbytes[loc+1] \u003d (byte)(value \u0026gt;\u0026gt; 0);\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nshort s \u003d 1;\nshort shortShift1 \u003d (short)(s \u0026lt;\u0026lt; 0); // Noncompliant: the value does not change\nshort shortShift2 \u003d (short)(s \u0026lt;\u0026lt; 33); // Noncompliant: this is equivalent to shifting by 1\n\nint i \u003d 1;\nint intShift \u003d i \u0026lt;\u0026lt; 33; // Noncompliant: this is equivalent to shifting by 1\n\nlong lg \u003d 1;\nlong longShift1 \u003d lg \u0026lt;\u0026lt; 0; // Noncompliant: the value does not change\nlong longShift2 \u003d lg \u0026lt;\u0026lt; 65; // Noncompliant: this is equivalent to shifting by 1\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nshort s \u003d 1;\nshort shortShift1 \u003d s;\nshort shortShift2 \u003d (short)(s \u0026lt;\u0026lt; 1);\n\nint i \u003d 1;\nvar intShift \u003d i \u0026lt;\u0026lt; 1;\n\nlong lg \u003d 1;\nvar longShift1 \u003d lg;\nvar longShift2 \u003d lg \u0026lt;\u0026lt; 1;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eBitwise and\n  shift operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_shift\"\u003eArithmetic shift\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Modulo\"\u003eModulo\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eshifting\u003c/a\u003e\noperators are used to do an \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_shift\"\u003earithmetic shift\u003c/a\u003e to the bits of an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eintegral numeric\u003c/a\u003e value, either to\nthe left or the right.\u003c/p\u003e\n\u003cpre\u003e\nvar number \u003d 14;         // ...01110 (14)\nvar left \u003d number \u0026lt;\u0026lt; 1;  // ...11100 (28)\nvar right \u003d number \u0026gt;\u0026gt; 1; // ...00111 (7)\n\u003c/pre\u003e\n\u003cp\u003eTherefore, shifting an integral number by 0 is equivalent to doing nothing, since the bits do not move any positions to the left or the right.\u003c/p\u003e\n\u003cp\u003eOn the other hand, shifting an integral number by a value greater than their count of bits minus one (\u003ccode\u003en_bits-1\u003c/code\u003e) is equivalent to\nshifting by the value \u003ca href\u003d\"https://en.wikipedia.org/wiki/Modulo\"\u003emodulo\u003c/a\u003e the bit count of the number (\u003ccode\u003evalue % n_bits\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIn the case of \u003ccode\u003eint\u003c/code\u003e and \u003ccode\u003euint\u003c/code\u003e, which take 32 bits in the memory, the shift count is given by the five low-order bits of the\nsecond operand, which can represent numbers from 0 to 31. This means that numbers having the same five low-order bits are treated the same by the\nshift operators.\u003c/p\u003e\n\u003cpre\u003e\nvar one \u003d         0b0_00001;\nvar thirtyThree \u003d 0b1_00001; // Same five low-order bits, 33 % 32 \u003d 1\n\nvar shifted1 \u003d 42 \u0026lt;\u0026lt; one;           // Results in 84\nvar shifted2 \u003d 42 \u0026lt;\u0026lt; thirtyThree;   // Results in 84\n\u003c/pre\u003e\n\u003cp\u003eNote that integral number with a less than 32-bit quantity (e.g. \u003ccode\u003eshort\u003c/code\u003e, \u003ccode\u003eushort\u003c/code\u003e) are implicitly converted to\n\u003ccode\u003eint\u003c/code\u003e before the shifting operation and so the rule for \u003ccode\u003eint\u003c/code\u003e/\u003ccode\u003euint\u003c/code\u003e applies.\u003c/p\u003e\n\u003cp\u003eIf the first operand is a \u003ccode\u003elong\u003c/code\u003e or \u003ccode\u003eulong\u003c/code\u003e (64-bit quantity), the shift count is given by the six low-order bits of the\nsecond operand. That is, the actual shift count is 0 to 63 bits.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the shift by zero is obviously for cosmetic reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the value shifted is a literal. \u003c/li\u003e\n  \u003cli\u003e When there is a similar shift at the same position on line before or after. E.g.: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nbytes[loc+0] \u003d (byte)(value \u0026gt;\u0026gt; 8);\nbytes[loc+1] \u003d (byte)(value \u0026gt;\u0026gt; 0);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nshort s \u003d 1;\nshort shortShift1 \u003d (short)(s \u0026lt;\u0026lt; 0); // Noncompliant: the value does not change\nshort shortShift2 \u003d (short)(s \u0026lt;\u0026lt; 33); // Noncompliant: this is equivalent to shifting by 1\n\nint i \u003d 1;\nint intShift \u003d i \u0026lt;\u0026lt; 33; // Noncompliant: this is equivalent to shifting by 1\n\nlong lg \u003d 1;\nlong longShift1 \u003d lg \u0026lt;\u0026lt; 0; // Noncompliant: the value does not change\nlong longShift2 \u003d lg \u0026lt;\u0026lt; 65; // Noncompliant: this is equivalent to shifting by 1\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nshort s \u003d 1;\nshort shortShift1 \u003d s;\nshort shortShift2 \u003d (short)(s \u0026lt;\u0026lt; 1);\n\nint i \u003d 1;\nvar intShift \u003d i \u0026lt;\u0026lt; 1;\n\nlong lg \u003d 1;\nvar longShift1 \u003d lg;\nvar longShift2 \u003d lg \u0026lt;\u0026lt; 1;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eBitwise and\n  shift operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_shift\"\u003eArithmetic shift\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Modulo\"\u003eModulo\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S104",
    "name": "Files should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumFileLocThreshold": {
        "key": "maximumFileLocThreshold",
        "name": "maximumFileLocThreshold",
        "description": "Maximum authorized lines in a file.",
        "defaultValue": "1000",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFileLocThreshold": "1000"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5693",
    "name": "Allowing requests with excessive content length is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevent DoS attacks.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e size limits are not defined for the different resources of the web application. \u003c/li\u003e\n  \u003cli\u003e the web application is not protected by \u003ca href\u003d\"https://en.wikipedia.org/wiki/Rate_limiting\"\u003erate limiting\u003c/a\u003e features. \u003c/li\u003e\n  \u003cli\u003e the web application infrastructure has limited resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Mvc;\n\npublic class MyController : Controller\n{\n    [HttpPost]\n    [DisableRequestSizeLimit] // Sensitive: No size  limit\n    [RequestSizeLimit(10485760)] // Sensitive: 10485760 B \u003d 10240 KB \u003d 10 MB is more than the recommended limit of 8MB\n    public IActionResult PostRequest(Model model)\n    {\n    // ...\n    }\n\n    [HttpPost]\n    [RequestFormLimits(MultipartBodyLengthLimit \u003d 10485760)] // Sensitive: 10485760 B \u003d 10240 KB \u003d 10 MB is more than the recommended limit of 8MB\n    public IActionResult MultipartFormRequest(Model model)\n    {\n    // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eIn Web.config:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n    \u0026lt;system.web\u0026gt;\n        \u0026lt;httpRuntime maxRequestLength\u003d\"81920\" executionTimeout\u003d\"3600\" /\u0026gt;\n        \u0026lt;!-- Sensitive: maxRequestLength is expressed in KB, so 81920 KB \u003d 80 MB  --\u0026gt;\n    \u0026lt;/system.web\u0026gt;\n    \u0026lt;system.webServer\u0026gt;\n        \u0026lt;security\u0026gt;\n            \u0026lt;requestFiltering\u0026gt;\n                \u0026lt;requestLimits maxAllowedContentLength\u003d\"83886080\" /\u0026gt;\n                \u0026lt;!-- Sensitive: maxAllowedContentLength is expressed in bytes, so 83886080 B \u003d 81920 KB \u003d 80 MB  --\u0026gt;\n            \u0026lt;/requestFiltering\u0026gt;\n        \u0026lt;/security\u0026gt;\n    \u0026lt;/system.webServer\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For most of the features of an application, it is recommended to limit the size of requests to:\n    \u003cul\u003e\n      \u003cli\u003e lower or equal to 8mb for file uploads. \u003c/li\u003e\n      \u003cli\u003e lower or equal to 2mb for other requests. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to customize the rule with the limit values that correspond to the web application.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Mvc;\n\npublic class MyController : Controller\n{\n    [HttpPost]\n    [RequestSizeLimit(8388608)] // Compliant: 8388608 B \u003d 8192 KB \u003d 8 MB\n    public IActionResult PostRequest(Model model)\n    {\n    // ...\n    }\n\n    [HttpPost]\n    [RequestFormLimits(MultipartBodyLengthLimit \u003d 8388608)] // Compliant: 8388608 B \u003d 8192 KB \u003d 8 MB\n    public IActionResult MultipartFormRequest(Model model)\n    {\n    // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eIn Web.config:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n    \u0026lt;system.web\u0026gt;\n        \u0026lt;httpRuntime maxRequestLength\u003d\"8192\" executionTimeout\u003d\"3600\" /\u0026gt;\n        \u0026lt;!-- Compliant: maxRequestLength is expressed in KB, so 8192 KB \u003d 8 MB  --\u0026gt;\n    \u0026lt;/system.web\u0026gt;\n    \u0026lt;system.webServer\u0026gt;\n        \u0026lt;security\u0026gt;\n            \u0026lt;requestFiltering\u0026gt;\n                \u0026lt;requestLimits maxAllowedContentLength\u003d\"8388608\" /\u0026gt;\n                \u0026lt;!-- Compliant: maxAllowedContentLength is expressed in bytes, so 8388608 B \u003d 8192 KB \u003d 8 MB  --\u0026gt;\n            \u0026lt;/requestFiltering\u0026gt;\n        \u0026lt;/security\u0026gt;\n    \u0026lt;/system.webServer\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html\"\u003eOwasp Cheat Sheet\u003c/a\u003e - Owasp Denial of Service\n  Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/770\"\u003eCWE-770 - Allocation of Resources Without Limits or Throttling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eCWE-400 - Uncontrolled Resource Consumption\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/web-config\"\u003eWeb.config\u003c/a\u003e - XML-formatted config file for IIS\n  applications \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "fileUploadSizeLimit": {
        "key": "fileUploadSizeLimit",
        "name": "fileUploadSizeLimit",
        "description": "The maximum size of HTTP requests handling file uploads (in bytes).",
        "defaultValue": "8388608",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "fileUploadSizeLimit": "8388608"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "csharpsquid:S6420",
    "name": "Client instances should not be recreated on each Azure Function invocation",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo avoid holding more connections than necessary and to avoid potentially exhausting the number of available sockets when using\n\u003ccode\u003eHttpClient\u003c/code\u003e, \u003ccode\u003eDocumentClient\u003c/code\u003e, \u003ccode\u003eQueueClient\u003c/code\u003e, \u003ccode\u003eConnectionMultiplexer\u003c/code\u003e or Azure Storage clients,\nconsider:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Creating a single, thread-safe static client that every Azure Function invocation can use. Provide it in a shared class when different Azure\n  Functions need it. \u003c/li\u003e\n  \u003cli\u003e Instantiate the client as a thread-safe Singleton or a pool of reusable instances and use it with dependency injection. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese classes typically manage their own connections to the resource, and thus are intended to be instantiated once and reused throughout the\nlifetime of an application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    public class HttpExample\n    {\n        [FunctionName(\"HttpExample\")]\n        public async Task\u0026lt;IActionResult\u0026gt; Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request)\n        {\n            HttpClient httpClient \u003d new HttpClient(); // Noncompliant\n\n            var response \u003d await httpClient.GetAsync(\"https://example.com\");\n            // rest of the function\n        }\n    }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    public class HttpExample\n    {\n        [FunctionName(\"HttpExample\")]\n        public async Task\u0026lt;IActionResult\u0026gt; Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, IHttpClientFactory clientFactory)\n        {\n            var httpClient \u003d clientFactory.CreateClient();\n            var response \u003d await httpClient.GetAsync(\"https://example.com\");\n            // rest of the function\n        }\n    }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/manage-connections?tabs\u003dcsharp#static-clients\"\u003eManage connections in Azure\n  Functions: Static Clients\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-dotnet-dependency-injection#service-lifetimes\"\u003eAzure Functions -\n  Dependency Injection: Service Lifetimes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/architecture/antipatterns/improper-instantiation/\"\u003eImproper Instantiation antipattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo avoid holding more connections than necessary and to avoid potentially exhausting the number of available sockets when using\n\u003ccode\u003eHttpClient\u003c/code\u003e, \u003ccode\u003eDocumentClient\u003c/code\u003e, \u003ccode\u003eQueueClient\u003c/code\u003e, \u003ccode\u003eConnectionMultiplexer\u003c/code\u003e or Azure Storage clients,\nconsider:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Creating a single, thread-safe static client that every Azure Function invocation can use. Provide it in a shared class when different Azure\n  Functions need it. \u003c/li\u003e\n  \u003cli\u003e Instantiate the client as a thread-safe Singleton or a pool of reusable instances and use it with dependency injection. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese classes typically manage their own connections to the resource, and thus are intended to be instantiated once and reused throughout the\nlifetime of an application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    public class HttpExample\n    {\n        [FunctionName(\"HttpExample\")]\n        public async Task\u0026lt;IActionResult\u0026gt; Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request)\n        {\n            HttpClient httpClient \u003d new HttpClient(); // Noncompliant\n\n            var response \u003d await httpClient.GetAsync(\"https://example.com\");\n            // rest of the function\n        }\n    }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    public class HttpExample\n    {\n        [FunctionName(\"HttpExample\")]\n        public async Task\u0026lt;IActionResult\u0026gt; Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", Route \u003d null)] HttpRequest request, IHttpClientFactory clientFactory)\n        {\n            var httpClient \u003d clientFactory.CreateClient();\n            var response \u003d await httpClient.GetAsync(\"https://example.com\");\n            // rest of the function\n        }\n    }\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/manage-connections?tabs\u003dcsharp#static-clients\"\u003eManage connections in Azure\n  Functions: Static Clients\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-dotnet-dependency-injection#service-lifetimes\"\u003eAzure Functions -\n  Dependency Injection: Service Lifetimes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/architecture/antipatterns/improper-instantiation/\"\u003eImproper Instantiation antipattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "azure",
      "bad-practice",
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S105",
    "name": "Tabulation characters should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4000",
    "name": "Pointers to unmanaged memory should not be visible",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePointer and unmanaged function pointer types such as \u003ccode\u003eIntPtr\u003c/code\u003e, \u003ccode\u003eUIntPtr\u003c/code\u003e, \u003ccode\u003eint*\u003c/code\u003e etc. are used to access unmanaged\nmemory, usually in order to use C or C++ libraries. If such a pointer is not secured by making it \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003einternal\u003c/code\u003e or\n\u003ccode\u003ereadonly\u003c/code\u003e, it can lead to a vulnerability allowing access to arbitrary locations.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    public IntPtr myPointer;  // Noncompliant\n    protected UIntPtr myOtherPointer; // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    private IntPtr myPointer;\n    protected readonly UIntPtr myOtherPointer;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePointer and unmanaged function pointer types such as \u003ccode\u003eIntPtr\u003c/code\u003e, \u003ccode\u003eUIntPtr\u003c/code\u003e, \u003ccode\u003eint*\u003c/code\u003e etc. are used to access unmanaged\nmemory, usually in order to use C or C++ libraries. If such a pointer is not secured by making it \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003einternal\u003c/code\u003e or\n\u003ccode\u003ereadonly\u003c/code\u003e, it can lead to a vulnerability allowing access to arbitrary locations.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    public IntPtr myPointer;  // Noncompliant\n    protected UIntPtr myOtherPointer; // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    private IntPtr myPointer;\n    protected readonly UIntPtr myOtherPointer;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S103",
    "name": "Lines should not be too long",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumLineLength": {
        "key": "maximumLineLength",
        "name": "maximumLineLength",
        "description": "The maximum authorized line length.",
        "defaultValue": "200",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumLineLength": "200"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2184",
    "name": "Results of integer division should not be assigned to floating point variables",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen division is performed on \u003ccode\u003eint\u003c/code\u003es, the result will always be an \u003ccode\u003eint\u003c/code\u003e. You can assign that result to a\n\u003ccode\u003edouble\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edecimal\u003c/code\u003e with automatic type conversion, but having started as an \u003ccode\u003eint\u003c/code\u003e, the result\nwill likely not be what you expect. If the result of \u003ccode\u003eint\u003c/code\u003e division is assigned to a floating-point variable, precision will have been lost\nbefore the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main()\n{\n  decimal dec \u003d 3/2; // Noncompliant\n  Method(3/2); // Noncompliant\n}\n\nstatic void Method(float f) { }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main()\n{\n  decimal dec \u003d (decimal)3/2;\n  Method(3.0F/2);\n}\n\nstatic void Method(float f) { }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/190\"\u003eCWE-190 - Integer Overflow or Wraparound\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen division is performed on \u003ccode\u003eint\u003c/code\u003es, the result will always be an \u003ccode\u003eint\u003c/code\u003e. You can assign that result to a\n\u003ccode\u003edouble\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edecimal\u003c/code\u003e with automatic type conversion, but having started as an \u003ccode\u003eint\u003c/code\u003e, the result\nwill likely not be what you expect. If the result of \u003ccode\u003eint\u003c/code\u003e division is assigned to a floating-point variable, precision will have been lost\nbefore the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main()\n{\n  decimal dec \u003d 3/2; // Noncompliant\n  Method(3/2); // Noncompliant\n}\n\nstatic void Method(float f) { }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main()\n{\n  decimal dec \u003d (decimal)3/2;\n  Method(3.0F/2);\n}\n\nstatic void Method(float f) { }\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/190\"\u003eCWE-190 - Integer Overflow or Wraparound\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "overflow"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6423",
    "name": "Azure Functions should log all failures",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCapturing and logging errors is critical to monitoring the health of your Azure Functions application.\u003c/p\u003e\n\u003cp\u003eEach \u003ccode\u003ecatch\u003c/code\u003e block inside an Azure Function should log helpful details about the failure. Moreover, the logging should not be done at\n\u003ccode\u003eDebug\u003c/code\u003e or \u003ccode\u003eTrace\u003c/code\u003e level.\u003c/p\u003e\n\u003cp\u003eConsider using the built-in integration with Application Insights for better monitoring of your Application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"Foo\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n\t[HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route \u003d null)] HttpRequest req,\n\tILogger log)\n{\n\ttry\n\t{\n\t\t// do stuff that can fail\n\t}\n\tcatch (Exception ex)\n\t{\n\t\t// the failure is not logged at all OR is logged at DEBUG/TRACE level\n\t}\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"Foo\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n\t[HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route \u003d null)] HttpRequest req,\n\tILogger log)\n{\n\ttry\n\t{\n\t\t// do stuff that can fail\n\t}\n\tcatch (Exception ex)\n\t{\n\t\tlog.LogError(ex, \"Give details that will help investigations\");\n\t}\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp\"\u003eAzure Functions error handling and\n  retries\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring\"\u003eMonitor Azure Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/azure-functions-supported-features\"\u003eApplication Insights for Azure Functions\n  supported features\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCapturing and logging errors is critical to monitoring the health of your Azure Functions application.\u003c/p\u003e\n\u003cp\u003eEach \u003ccode\u003ecatch\u003c/code\u003e block inside an Azure Function should log helpful details about the failure. Moreover, the logging should not be done at\n\u003ccode\u003eDebug\u003c/code\u003e or \u003ccode\u003eTrace\u003c/code\u003e level.\u003c/p\u003e\n\u003cp\u003eConsider using the built-in integration with Application Insights for better monitoring of your Application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"Foo\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n\t[HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route \u003d null)] HttpRequest req,\n\tILogger log)\n{\n\ttry\n\t{\n\t\t// do stuff that can fail\n\t}\n\tcatch (Exception ex)\n\t{\n\t\t// the failure is not logged at all OR is logged at DEBUG/TRACE level\n\t}\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"Foo\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n\t[HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\", Route \u003d null)] HttpRequest req,\n\tILogger log)\n{\n\ttry\n\t{\n\t\t// do stuff that can fail\n\t}\n\tcatch (Exception ex)\n\t{\n\t\tlog.LogError(ex, \"Give details that will help investigations\");\n\t}\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp\"\u003eAzure Functions error handling and\n  retries\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring\"\u003eMonitor Azure Functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-monitor/app/azure-functions-supported-features\"\u003eApplication Insights for Azure Functions\n  supported features\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "azure",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4002",
    "name": "Disposable types should declare finalizers",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IntPtr\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.UIntPtr\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Runtime.InteropService.HandleRef\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable // Noncompliant: Doesn\u0027t have a finalizer\n  {\n    private IntPtr myResource;\n    private bool disposed \u003d false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed \u003d true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    public void Dispose() {\n      Dispose(true);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable\n  {\n    private IntPtr myResource;\n    private bool disposed \u003d false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed \u003d true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    ~Foo()\n    {\n      Dispose(false);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Related: {rule:csharpsquid:S3881} - \"IDisposable\" should be implemented correctly \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IntPtr\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.UIntPtr\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Runtime.InteropService.HandleRef\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable // Noncompliant: Doesn\u0027t have a finalizer\n  {\n    private IntPtr myResource;\n    private bool disposed \u003d false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed \u003d true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    public void Dispose() {\n      Dispose(true);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable\n  {\n    private IntPtr myResource;\n    private bool disposed \u003d false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed \u003d true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    ~Foo()\n    {\n      Dispose(false);\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e Related: {rule:csharpsquid:S3881} - \"IDisposable\" should be implemented correctly \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3397",
    "name": "\"base.Equals\" should not be used to check for reference equality in \"Equals\" if \"base\" is not \"object\"",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eobject.Equals()\u003c/code\u003e overrides can be optimized by checking first for reference equality between \u003ccode\u003ethis\u003c/code\u003e and the parameter. This\ncheck can be implemented by calling \u003ccode\u003eobject.ReferenceEquals()\u003c/code\u003e or \u003ccode\u003ebase.Equals()\u003c/code\u003e, where \u003ccode\u003ebase\u003c/code\u003e is\n\u003ccode\u003eobject\u003c/code\u003e. However, using \u003ccode\u003ebase.Equals()\u003c/code\u003e is a maintenance hazard because while it works if you extend \u003ccode\u003eObject\u003c/code\u003e\ndirectly, if you introduce a new base class that overrides \u003ccode\u003eEquals\u003c/code\u003e, it suddenly stops working.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if \u003ccode\u003ebase.Equals()\u003c/code\u003e is used but \u003ccode\u003ebase\u003c/code\u003e is not \u003ccode\u003eobject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other)) // Okay; base is object\n    {\n      return true;\n    }\n\n    return this.baseField \u003d\u003d ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other))  // Noncompliant\n    {\n      return true;\n    }\n\n    return this.derivedField \u003d\u003d ((Derived)other).derivedField;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better\n    {\n      return true;\n    }\n\n    return this.baseField \u003d\u003d ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))\n    {\n      return true;\n    }\n\n    return base.Equals(other) \u0026amp;\u0026amp; this.derivedField \u003d\u003d ((Derived)other).derivedField;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eobject.Equals()\u003c/code\u003e overrides can be optimized by checking first for reference equality between \u003ccode\u003ethis\u003c/code\u003e and the parameter. This\ncheck can be implemented by calling \u003ccode\u003eobject.ReferenceEquals()\u003c/code\u003e or \u003ccode\u003ebase.Equals()\u003c/code\u003e, where \u003ccode\u003ebase\u003c/code\u003e is\n\u003ccode\u003eobject\u003c/code\u003e. However, using \u003ccode\u003ebase.Equals()\u003c/code\u003e is a maintenance hazard because while it works if you extend \u003ccode\u003eObject\u003c/code\u003e\ndirectly, if you introduce a new base class that overrides \u003ccode\u003eEquals\u003c/code\u003e, it suddenly stops working.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if \u003ccode\u003ebase.Equals()\u003c/code\u003e is used but \u003ccode\u003ebase\u003c/code\u003e is not \u003ccode\u003eobject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other)) // Okay; base is object\n    {\n      return true;\n    }\n\n    return this.baseField \u003d\u003d ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other))  // Noncompliant\n    {\n      return true;\n    }\n\n    return this.derivedField \u003d\u003d ((Derived)other).derivedField;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better\n    {\n      return true;\n    }\n\n    return this.baseField \u003d\u003d ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))\n    {\n      return true;\n    }\n\n    return base.Equals(other) \u0026amp;\u0026amp; this.derivedField \u003d\u003d ((Derived)other).derivedField;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2187",
    "name": "Test classes should contain at least one test case",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo ensure proper testing, it is important to include test cases in a test class. If a test class does not have any test cases, it can give the\nwrong impression that the class being tested has been thoroughly tested, when in reality, it has not.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue when any of these conditions are met:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For \u003ccode\u003eNUnit\u003c/code\u003e, a class is marked with \u003ccode\u003eTestFixture\u003c/code\u003e but does not contain any method marked with \u003ccode\u003eTest\u003c/code\u003e,\n  \u003ccode\u003eTestCase\u003c/code\u003e, \u003ccode\u003eTestCaseSource\u003c/code\u003e, or \u003ccode\u003eTheory\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e For \u003ccode\u003eMSTest\u003c/code\u003e, a class is marked with \u003ccode\u003eTestClass\u003c/code\u003e but does not contain any method marked with \u003ccode\u003eTestMethod\u003c/code\u003e or\n  \u003ccode\u003eDataTestMethod\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt does not apply to \u003ccode\u003exUnit\u003c/code\u003e since \u003ccode\u003exUnit\u003c/code\u003e does not require a \u003ca href\u003d\"https://xunit.net/docs/comparisons#attributes\"\u003etest\nclass attribute\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThere are scenarios where not having any test cases within a test class is perfectly acceptable and not seen as a problem.\u003c/p\u003e\n\u003ch4\u003eAbstract classes\u003c/h4\u003e\n\u003cp\u003eTo facilitate the creation of common test cases, test logic, or test infrastructure, it is advisable to use a base class.\u003c/p\u003e\n\u003cp\u003eAdditionally, in both \u003ccode\u003eNUnit\u003c/code\u003e and \u003ccode\u003eMSTest\u003c/code\u003e, abstract classes that are annotated with their respective attributes\n(\u003ccode\u003eTestFixture\u003c/code\u003e in NUnit and \u003ccode\u003eTestClass\u003c/code\u003e in MSTest) are automatically ignored.\u003c/p\u003e\n\u003cp\u003eTherefore, there is no need to raise an issue in this particular scenario.\u003c/p\u003e\n\u003cp\u003eMore information here:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testfixture.html\"\u003e\u003ccode\u003eTestFixture\u003c/code\u003e documentation in\n  \u003ccode\u003eNUnit\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/microsoft/testfx/blob/0f19160cc319338ef6e23acb320da1562b40decd/src/Adapter/MSTest.TestAdapter/Discovery/TypeValidator.cs#L86-L97\"\u003e\u003ccode\u003eTypeValidator\u003c/code\u003e class in \u003ccode\u003eMSTest\u003c/code\u003e (GitHub)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDerived classes that inherit test cases from a base class\u003c/h4\u003e\n\u003cp\u003eA base class containing one or more test cases to provide generic test cases is also considered a compliant scenario.\u003c/p\u003e\n\u003ch4\u003eClasses that contain \u003ccode\u003eAssemblyInitialize\u003c/code\u003e or \u003ccode\u003eAssemblyCleanup\u003c/code\u003e methods\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eThis particular exception scenario only applies to the MSTest test framework.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyInitialize\u003c/code\u003e and \u003ccode\u003eAssemblyCleanup\u003c/code\u003e attributes are used to annotate methods that are executed only once at the\nbeginning and at the end of a test run. These attributes can only be applied once per assembly.\u003c/p\u003e\n\u003cp\u003eIt is logical to have a dedicated class for these methods, and this scenario is also considered compliant.\u003c/p\u003e\n\u003cp\u003eFurthermore, it is important to note that the test engine will execute a method annotated with either the \u003ccode\u003eAssemblyInitialize\u003c/code\u003e or\n\u003ccode\u003eAssemblyCleanup\u003c/code\u003e attribute only if that method is part of a class annotated with the \u003ccode\u003eTestClass\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cp\u003eMore information here:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/ms245278(v\u003dvs.90)\"\u003e\u003ccode\u003eAssemblyInitialize\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/ms245265(v\u003dvs.90)\"\u003e\u003ccode\u003eAssemblyCleanup\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it in MSTest\u003c/h2\u003e\n\u003cp\u003eTo fix this issue in \u003ccode\u003eMSTest\u003c/code\u003e, it is important that all test classes annotated with the \u003ccode\u003e[TestClass]\u003c/code\u003e attribute contain at\nleast one test case.\u003c/p\u003e\n\u003cp\u003eTo achieve this, at least one method needs to be annotated with one of the following method attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTestMethod\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDataTestMethod\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestClass]\npublic class SomeOtherClassTest { } // Noncompliant: no test\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestClass]\npublic class SomeOtherClassTest\n{\n    [TestMethod]\n    public void SomeMethodShouldReturnTrue() { }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/intro.html\"\u003e\u003ccode\u003eNUnit\u003c/code\u003e documentation\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testfixture.html\"\u003e\u003ccode\u003eTestFixture\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/test.html\"\u003e\u003ccode\u003eTest\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcase.html\"\u003e\u003ccode\u003eTestCase\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcasesource.html\"\u003e\u003ccode\u003eTestCaseSource\u003c/code\u003e attribute\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/theory.html\"\u003e\u003ccode\u003eTheory\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/microsoft/testfx/blob/main/docs/README.md\"\u003e\u003ccode\u003eMSTest\u003c/code\u003e documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://xunit.net/docs/comparisons#attributes\"\u003eComparing \u003ccode\u003exUnit\u003c/code\u003e to other frameworks - Attributes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo ensure proper testing, it is important to include test cases in a test class. If a test class does not have any test cases, it can give the\nwrong impression that the class being tested has been thoroughly tested, when in reality, it has not.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue when any of these conditions are met:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For \u003ccode\u003eNUnit\u003c/code\u003e, a class is marked with \u003ccode\u003eTestFixture\u003c/code\u003e but does not contain any method marked with \u003ccode\u003eTest\u003c/code\u003e,\n  \u003ccode\u003eTestCase\u003c/code\u003e, \u003ccode\u003eTestCaseSource\u003c/code\u003e, or \u003ccode\u003eTheory\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e For \u003ccode\u003eMSTest\u003c/code\u003e, a class is marked with \u003ccode\u003eTestClass\u003c/code\u003e but does not contain any method marked with \u003ccode\u003eTestMethod\u003c/code\u003e or\n  \u003ccode\u003eDataTestMethod\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt does not apply to \u003ccode\u003exUnit\u003c/code\u003e since \u003ccode\u003exUnit\u003c/code\u003e does not require a \u003ca href\u003d\"https://xunit.net/docs/comparisons#attributes\"\u003etest\nclass attribute\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThere are scenarios where not having any test cases within a test class is perfectly acceptable and not seen as a problem.\u003c/p\u003e\n\u003ch4\u003eAbstract classes\u003c/h4\u003e\n\u003cp\u003eTo facilitate the creation of common test cases, test logic, or test infrastructure, it is advisable to use a base class.\u003c/p\u003e\n\u003cp\u003eAdditionally, in both \u003ccode\u003eNUnit\u003c/code\u003e and \u003ccode\u003eMSTest\u003c/code\u003e, abstract classes that are annotated with their respective attributes\n(\u003ccode\u003eTestFixture\u003c/code\u003e in NUnit and \u003ccode\u003eTestClass\u003c/code\u003e in MSTest) are automatically ignored.\u003c/p\u003e\n\u003cp\u003eTherefore, there is no need to raise an issue in this particular scenario.\u003c/p\u003e\n\u003cp\u003eMore information here:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testfixture.html\"\u003e\u003ccode\u003eTestFixture\u003c/code\u003e documentation in\n  \u003ccode\u003eNUnit\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/microsoft/testfx/blob/0f19160cc319338ef6e23acb320da1562b40decd/src/Adapter/MSTest.TestAdapter/Discovery/TypeValidator.cs#L86-L97\"\u003e\u003ccode\u003eTypeValidator\u003c/code\u003e class in \u003ccode\u003eMSTest\u003c/code\u003e (GitHub)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDerived classes that inherit test cases from a base class\u003c/h4\u003e\n\u003cp\u003eA base class containing one or more test cases to provide generic test cases is also considered a compliant scenario.\u003c/p\u003e\n\u003ch4\u003eClasses that contain \u003ccode\u003eAssemblyInitialize\u003c/code\u003e or \u003ccode\u003eAssemblyCleanup\u003c/code\u003e methods\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eThis particular exception scenario only applies to the MSTest test framework.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyInitialize\u003c/code\u003e and \u003ccode\u003eAssemblyCleanup\u003c/code\u003e attributes are used to annotate methods that are executed only once at the\nbeginning and at the end of a test run. These attributes can only be applied once per assembly.\u003c/p\u003e\n\u003cp\u003eIt is logical to have a dedicated class for these methods, and this scenario is also considered compliant.\u003c/p\u003e\n\u003cp\u003eFurthermore, it is important to note that the test engine will execute a method annotated with either the \u003ccode\u003eAssemblyInitialize\u003c/code\u003e or\n\u003ccode\u003eAssemblyCleanup\u003c/code\u003e attribute only if that method is part of a class annotated with the \u003ccode\u003eTestClass\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cp\u003eMore information here:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/ms245278(v\u003dvs.90)\"\u003e\u003ccode\u003eAssemblyInitialize\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2008/ms245265(v\u003dvs.90)\"\u003e\u003ccode\u003eAssemblyCleanup\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue in \u003ccode\u003eMSTest\u003c/code\u003e, it is important that all test classes annotated with the \u003ccode\u003e[TestClass]\u003c/code\u003e attribute contain at\nleast one test case.\u003c/p\u003e\n\u003cp\u003eTo achieve this, at least one method needs to be annotated with one of the following method attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTestMethod\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDataTestMethod\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestClass]\npublic class SomeOtherClassTest { } // Noncompliant: no test\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestClass]\npublic class SomeOtherClassTest\n{\n    [TestMethod]\n    public void SomeMethodShouldReturnTrue() { }\n}\n\u003c/pre\u003e",
        "context": {
          "key": "mstest",
          "displayName": "MSTest"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue in \u003ccode\u003eNUnit\u003c/code\u003e, it is important that all test classes annotated with the \u003ccode\u003e[TestFixture]\u003c/code\u003e attribute contain at\nleast one test case.\u003c/p\u003e\n\u003cp\u003eTo achieve this, at least one method needs to be annotated with one of the following method attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eTest\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTestCase\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTestCaseSource\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTheory\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestFixture]\npublic class SomeClassTest { } // Noncompliant: no test\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\n[TestFixture]\npublic class SomeClassTest\n{\n    [Test]\n    public void SomeMethodShouldReturnTrue() { }\n}\n\u003c/pre\u003e",
        "context": {
          "key": "nunit",
          "displayName": "NUnit"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/intro.html\"\u003e\u003ccode\u003eNUnit\u003c/code\u003e documentation\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testfixture.html\"\u003e\u003ccode\u003eTestFixture\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/test.html\"\u003e\u003ccode\u003eTest\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcase.html\"\u003e\u003ccode\u003eTestCase\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcasesource.html\"\u003e\u003ccode\u003eTestCaseSource\u003c/code\u003e attribute\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.nunit.org/articles/nunit/writing-tests/attributes/theory.html\"\u003e\u003ccode\u003eTheory\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/microsoft/testfx/blob/main/docs/README.md\"\u003e\u003ccode\u003eMSTest\u003c/code\u003e documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://xunit.net/docs/comparisons#attributes\"\u003eComparing \u003ccode\u003exUnit\u003c/code\u003e to other frameworks - Attributes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "tests",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4487",
    "name": "Unread \"private\" fields should be removed",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePrivate fields which are written but never read are a case of \"dead store\". Changing the value of such a field is useless and most probably\nindicates an error in the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Rectangle\n{\n  private readonly int length;\n  private readonly int width;  // Noncompliant: width is written but never read\n\n  public Rectangle(int length, int width)\n  {\n    this.length \u003d length;\n    this.width \u003d width;\n  }\n\n  public int Surface\n  {\n    get\n    {\n      return length * width;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove this field if it doesn’t need to be read, or fix the code to read it.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Rectangle\n{\n  private readonly int length;\n  private readonly int width;\n\n  public Rectangle(int length, int width)\n  {\n    this.length \u003d length;\n    this.width \u003d width;\n  }\n\n  public int Surface\n  {\n    get\n    {\n      return length * width;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003eCWE-563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePrivate fields which are written but never read are a case of \"dead store\". Changing the value of such a field is useless and most probably\nindicates an error in the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Rectangle\n{\n  private readonly int length;\n  private readonly int width;  // Noncompliant: width is written but never read\n\n  public Rectangle(int length, int width)\n  {\n    this.length \u003d length;\n    this.width \u003d width;\n  }\n\n  public int Surface\n  {\n    get\n    {\n      return length * width;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove this field if it doesn’t need to be read, or fix the code to read it.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Rectangle\n{\n  private readonly int length;\n  private readonly int width;\n\n  public Rectangle(int length, int width)\n  {\n    this.length \u003d length;\n    this.width \u003d width;\n  }\n\n  public int Surface\n  {\n    get\n    {\n      return length * width;\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003eCWE-563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6424",
    "name": "Interfaces for durable entities should satisfy the restrictions",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe recommended way to access Azure Durable Entities is through generated proxy objects with the help of interfaces.\u003c/p\u003e\n\u003cp\u003eThe following restrictions, during interface design, are enforced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity interfaces must be defined in the same assembly as the entity class. This is not detected by the rule. \u003c/li\u003e\n  \u003cli\u003e Entity interfaces must only define methods. \u003c/li\u003e\n  \u003cli\u003e Entity interfaces must not contain generic parameters. \u003c/li\u003e\n  \u003cli\u003e Entity interface methods must not have more than one parameter. \u003c/li\u003e\n  \u003cli\u003e Entity interface methods must return void, Task, or Task\u0026lt;T\u0026gt;. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf any of these rules are violated, an \u003ccode\u003eInvalidOperationException\u003c/code\u003e is thrown at runtime when the interface is used as a type argument to\n\u003ccode\u003eIDurableEntityContext.SignalEntity\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e, \u003ccode\u003eIDurableEntityClient.SignalEntityAsync\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e\nor \u003ccode\u003eIDurableOrchestrationContext.CreateEntityProxy\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e. The exception message explains which rule was broken.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in case any of the restrictions above is not respected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnamespace Foo // Noncompliant, must be defined in the same assembly as the entity class that implements it\n{\n    public interface ICounter\u0026lt;T\u0026gt; // Noncompliant, interfaces cannot contain generic parameters\n    {\n        string Name { get; set; } // Noncompliant, interface must only define methods\n        void Add(int amount, int secondParameter); // Noncompliant, methods must not have more than one parameter\n        int Get(); // Noncompliant, methods must return void, Task, or Task\u0026lt;T\u0026gt;\n    }\n}\n\nnamespace Bar\n{\n    public class Counter : ICounter\n    {\n        // do stuff\n    }\n\n    public static class AddToCounterFromQueue\n    {\n        [FunctionName(\"AddToCounterFromQueue\")]\n        public static Task Run(\n            [QueueTrigger(\"durable-function-trigger\")] string input,\n            [DurableClient] IDurableEntityClient client)\n        {\n            var entityId \u003d new EntityId(\"Counter\", \"myCounter\");\n            int amount \u003d int.Parse(input);\n            return client.SignalEntityAsync\u0026lt;ICounter\u0026gt;(entityId, proxy \u003d\u0026gt; proxy.Add(amount, 10));\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nnamespace Bar\n{\n    public interface ICounter\n    {\n        void Add(int amount);\n        Task\u0026lt;int\u0026gt; Get();\n    }\n}\n\nnamespace Bar\n{\n    public class Counter : ICounter\n    {\n        // do stuff\n    }\n\n    public static class AddToCounterFromQueue\n    {\n        [FunctionName(\"AddToCounterFromQueue\")]\n        public static Task Run(\n            [QueueTrigger(\"durable-function-trigger\")] string input,\n            [DurableClient] IDurableEntityClient client)\n        {\n            var entityId \u003d new EntityId(\"Counter\", \"myCounter\");\n            int amount \u003d int.Parse(input);\n            return client.SignalEntityAsync\u0026lt;ICounter\u0026gt;(entityId, proxy \u003d\u0026gt; proxy.Add(amount));\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-dotnet-entities#restrictions-on-entity-interfaces\"\u003eRestrictions on Entity Interfaces\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-entities?tabs\u003dcsharp\"\u003eDurable Entities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableentitycontext.signalentity?view\u003dazure-dotnet\"\u003eIDurableEntityContext.SignalEntity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableentityclient.signalentityasync?view\u003dazure-dotnet\"\u003eIDurableEntityClient.SignalEntityAsync\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableorchestrationcontext.createentityproxy?view\u003dazure-dotnet\"\u003eIDurableOrchestrationContext.CreateEntity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe recommended way to access Azure Durable Entities is through generated proxy objects with the help of interfaces.\u003c/p\u003e\n\u003cp\u003eThe following restrictions, during interface design, are enforced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity interfaces must be defined in the same assembly as the entity class. This is not detected by the rule. \u003c/li\u003e\n  \u003cli\u003e Entity interfaces must only define methods. \u003c/li\u003e\n  \u003cli\u003e Entity interfaces must not contain generic parameters. \u003c/li\u003e\n  \u003cli\u003e Entity interface methods must not have more than one parameter. \u003c/li\u003e\n  \u003cli\u003e Entity interface methods must return void, Task, or Task\u0026lt;T\u0026gt;. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf any of these rules are violated, an \u003ccode\u003eInvalidOperationException\u003c/code\u003e is thrown at runtime when the interface is used as a type argument to\n\u003ccode\u003eIDurableEntityContext.SignalEntity\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e, \u003ccode\u003eIDurableEntityClient.SignalEntityAsync\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e\nor \u003ccode\u003eIDurableOrchestrationContext.CreateEntityProxy\u0026lt;TEntityInterface\u0026gt;\u003c/code\u003e. The exception message explains which rule was broken.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in case any of the restrictions above is not respected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnamespace Foo // Noncompliant, must be defined in the same assembly as the entity class that implements it\n{\n    public interface ICounter\u0026lt;T\u0026gt; // Noncompliant, interfaces cannot contain generic parameters\n    {\n        string Name { get; set; } // Noncompliant, interface must only define methods\n        void Add(int amount, int secondParameter); // Noncompliant, methods must not have more than one parameter\n        int Get(); // Noncompliant, methods must return void, Task, or Task\u0026lt;T\u0026gt;\n    }\n}\n\nnamespace Bar\n{\n    public class Counter : ICounter\n    {\n        // do stuff\n    }\n\n    public static class AddToCounterFromQueue\n    {\n        [FunctionName(\"AddToCounterFromQueue\")]\n        public static Task Run(\n            [QueueTrigger(\"durable-function-trigger\")] string input,\n            [DurableClient] IDurableEntityClient client)\n        {\n            var entityId \u003d new EntityId(\"Counter\", \"myCounter\");\n            int amount \u003d int.Parse(input);\n            return client.SignalEntityAsync\u0026lt;ICounter\u0026gt;(entityId, proxy \u003d\u0026gt; proxy.Add(amount, 10));\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nnamespace Bar\n{\n    public interface ICounter\n    {\n        void Add(int amount);\n        Task\u0026lt;int\u0026gt; Get();\n    }\n}\n\nnamespace Bar\n{\n    public class Counter : ICounter\n    {\n        // do stuff\n    }\n\n    public static class AddToCounterFromQueue\n    {\n        [FunctionName(\"AddToCounterFromQueue\")]\n        public static Task Run(\n            [QueueTrigger(\"durable-function-trigger\")] string input,\n            [DurableClient] IDurableEntityClient client)\n        {\n            var entityId \u003d new EntityId(\"Counter\", \"myCounter\");\n            int amount \u003d int.Parse(input);\n            return client.SignalEntityAsync\u0026lt;ICounter\u0026gt;(entityId, proxy \u003d\u0026gt; proxy.Add(amount));\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-dotnet-entities#restrictions-on-entity-interfaces\"\u003eRestrictions on Entity Interfaces\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-entities?tabs\u003dcsharp\"\u003eDurable Entities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableentitycontext.signalentity?view\u003dazure-dotnet\"\u003eIDurableEntityContext.SignalEntity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableentityclient.signalentityasync?view\u003dazure-dotnet\"\u003eIDurableEntityClient.SignalEntityAsync\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.webjobs.extensions.durabletask.idurableorchestrationcontext.createentityproxy?view\u003dazure-dotnet\"\u003eIDurableOrchestrationContext.CreateEntity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "azure",
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S112",
    "name": "General or reserved exceptions should never be thrown",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule raises an issue when a general or reserved exception is thrown.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThrowing general exceptions such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e and \u003ccode\u003eApplicationException\u003c/code\u003e will have a negative\nimpact on any code trying to catch these exceptions.\u003c/p\u003e\n\u003cp\u003eFrom a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a general exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.\u003c/p\u003e\n\u003cp\u003eBesides, when working with a general type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.\u003c/p\u003e\n\u003cp\u003eFor instance, if an exception such as \u003ccode\u003eStackOverflowException\u003c/code\u003e is caught and not re-thrown, it may prevent the program from terminating\ngracefully.\u003c/p\u003e\n\u003cp\u003eWhen throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.\u003c/p\u003e\n\u003cp\u003eAdditionally, some reserved exceptions should not be thrown manually. Exceptions such as \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e,\n\u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or \u003ccode\u003eExecutionEngineException\u003c/code\u003e will be thrown automatically by the\nruntime when the corresponding error occurs. Many of them indicate serious errors, which the application may not be able to recover from. It is\ntherefore recommended to avoid throwing them as well as using them as base classes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Throw a subtype of \u003ccode\u003eException\u003c/code\u003e when one matches. For instance \u003ccode\u003eArgumentException\u003c/code\u003e could be raised when an unexpected\n  argument is provided to a function. \u003c/li\u003e\n  \u003cli\u003e Define a custom exception type that derives from \u003ccode\u003eException\u003c/code\u003e or one of its subclasses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void DoSomething(object obj)\n{\n  if (obj \u003d\u003d null)\n  {\n    throw new NullReferenceException(\"obj\");  // Noncompliant: This reserved exception should not be thrown manually\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void DoSomething(object obj)\n{\n  if (obj \u003d\u003d null)\n  {\n    throw new ArgumentNullException(\"obj\");  // Compliant: this is a specific and non-reserved exception type\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397\"\u003eCWE-397 Declaration of Throws for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a general or reserved exception is thrown.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThrowing general exceptions such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e and \u003ccode\u003eApplicationException\u003c/code\u003e will have a negative\nimpact on any code trying to catch these exceptions.\u003c/p\u003e\n\u003cp\u003eFrom a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a general exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.\u003c/p\u003e\n\u003cp\u003eBesides, when working with a general type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.\u003c/p\u003e\n\u003cp\u003eFor instance, if an exception such as \u003ccode\u003eStackOverflowException\u003c/code\u003e is caught and not re-thrown, it may prevent the program from terminating\ngracefully.\u003c/p\u003e\n\u003cp\u003eWhen throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.\u003c/p\u003e\n\u003cp\u003eAdditionally, some reserved exceptions should not be thrown manually. Exceptions such as \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e,\n\u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or \u003ccode\u003eExecutionEngineException\u003c/code\u003e will be thrown automatically by the\nruntime when the corresponding error occurs. Many of them indicate serious errors, which the application may not be able to recover from. It is\ntherefore recommended to avoid throwing them as well as using them as base classes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Throw a subtype of \u003ccode\u003eException\u003c/code\u003e when one matches. For instance \u003ccode\u003eArgumentException\u003c/code\u003e could be raised when an unexpected\n  argument is provided to a function. \u003c/li\u003e\n  \u003cli\u003e Define a custom exception type that derives from \u003ccode\u003eException\u003c/code\u003e or one of its subclasses. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void DoSomething(object obj)\n{\n  if (obj \u003d\u003d null)\n  {\n    throw new NullReferenceException(\"obj\");  // Noncompliant: This reserved exception should not be thrown manually\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void DoSomething(object obj)\n{\n  if (obj \u003d\u003d null)\n  {\n    throw new ArgumentNullException(\"obj\");  // Compliant: this is a specific and non-reserved exception type\n  }\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397\"\u003eCWE-397 Declaration of Throws for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6421",
    "name": "Azure Functions should use Structured Error Handling",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe top-most level of an Azure Function code should include a try/catch block to capture and log all errors so you can monitor the health of the\napplication effectively. In case a retry policy has been defined for your Azure Function, you should rethrow any errors that should result in a\nretry.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"HttpExample\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n{\n    // Noncompliant\n    string requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n    dynamic data \u003d JsonConvert.DeserializeObject(requestBody);\n    // do stuff\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"HttpExample\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n{\n    try\n    {\n        string requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n        dynamic data \u003d JsonConvert.DeserializeObject(requestBody);\n        // do stuff\n    }\n    catch (Exception ex)\n    {\n        // do stuff\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp\"\u003eAzure Functions error handling and\n  retries\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp#retry-policies-preview\"\u003eAzure\n  Functions retry policies\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe top-most level of an Azure Function code should include a try/catch block to capture and log all errors so you can monitor the health of the\napplication effectively. In case a retry policy has been defined for your Azure Function, you should rethrow any errors that should result in a\nretry.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"HttpExample\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n{\n    // Noncompliant\n    string requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n    dynamic data \u003d JsonConvert.DeserializeObject(requestBody);\n    // do stuff\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[FunctionName(\"HttpExample\")]\npublic static async Task\u0026lt;IActionResult\u0026gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n{\n    try\n    {\n        string requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n        dynamic data \u003d JsonConvert.DeserializeObject(requestBody);\n        // do stuff\n    }\n    catch (Exception ex)\n    {\n        // do stuff\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp\"\u003eAzure Functions error handling and\n  retries\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs\u003dcsharp#retry-policies-preview\"\u003eAzure\n  Functions retry policies\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "azure",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4004",
    "name": "Collection properties should be readonly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA writable collection property can be replaced by a completely different collection. Making it \u003ccode\u003ereadonly\u003c/code\u003e prevents that while still\nallowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method\nto remove all the elements (e.g. \u003ccode\u003eSystem.Collections.List\u0026lt;T\u0026gt;.Clear\u003c/code\u003e) and a method to populate the collection (e.g.\n\u003ccode\u003eSystem.Collections.List\u0026lt;T\u0026gt;.AddRange\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an externally visible writable property is of a type that implements \u003ccode\u003eSystem.Collections.ICollection\u003c/code\u003e or\n\u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;T\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List\u0026lt;string\u0026gt; strings;\n\n    public List\u0026lt;string\u0026gt; SomeStrings\n    {\n      get { return strings; }\n      set { strings \u003d value; } // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List\u0026lt;string\u0026gt; strings;\n\n    public List\u0026lt;string\u0026gt; SomeStrings\n    {\n      get { return strings; }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise issues for\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ePermissionSet,\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e properties marked as \u003ccode\u003eDataMemberAttribute\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e classes marked as \u003ccode\u003eSerializable\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e properties overriding a base class member \u003c/li\u003e\n  \u003cli\u003e properties implementing interface \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA writable collection property can be replaced by a completely different collection. Making it \u003ccode\u003ereadonly\u003c/code\u003e prevents that while still\nallowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method\nto remove all the elements (e.g. \u003ccode\u003eSystem.Collections.List\u0026lt;T\u0026gt;.Clear\u003c/code\u003e) and a method to populate the collection (e.g.\n\u003ccode\u003eSystem.Collections.List\u0026lt;T\u0026gt;.AddRange\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an externally visible writable property is of a type that implements \u003ccode\u003eSystem.Collections.ICollection\u003c/code\u003e or\n\u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;T\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List\u0026lt;string\u0026gt; strings;\n\n    public List\u0026lt;string\u0026gt; SomeStrings\n    {\n      get { return strings; }\n      set { strings \u003d value; } // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List\u0026lt;string\u0026gt; strings;\n\n    public List\u0026lt;string\u0026gt; SomeStrings\n    {\n      get { return strings; }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise issues for\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ePermissionSet,\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e properties marked as \u003ccode\u003eDataMemberAttribute\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e classes marked as \u003ccode\u003eSerializable\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e properties overriding a base class member \u003c/li\u003e\n  \u003cli\u003e properties implementing interface \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5332",
    "name": "Using clear-text protocols is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eClear-text protocols such as \u003ccode\u003eftp\u003c/code\u003e, \u003ccode\u003etelnet\u003c/code\u003e, or \u003ccode\u003ehttp\u003c/code\u003e lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e sensitive data exposure \u003c/li\u003e\n  \u003cli\u003e traffic redirected to a malicious endpoint \u003c/li\u003e\n  \u003cli\u003e malware-infected software update or installer \u003c/li\u003e\n  \u003cli\u003e execution of client-side code \u003c/li\u003e\n  \u003cli\u003e corruption of critical information \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.\u003c/p\u003e\n\u003cp\u003eFor example, attackers could successfully compromise prior security layers by:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bypassing isolation mechanisms \u003c/li\u003e\n  \u003cli\u003e compromising a component of the network \u003c/li\u003e\n  \u003cli\u003e getting the credentials of an internal IAM account (either from a service account or an actual person) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n\u003cem\u003edefense-in-depth\u003c/em\u003e principle.\u003c/p\u003e\n\u003cp\u003eNote that using the \u003ccode\u003ehttp\u003c/code\u003e protocol is being deprecated by \u003ca\nhref\u003d\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\"\u003emajor web browsers\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\"\u003eCVE-2019-6169\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\"\u003eCVE-2019-12327\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\"\u003eCVE-2019-11065\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or \u003ccode\u003elocalhost\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Application data needs to be protected against falsifications or leaks when transiting over the network. \u003c/li\u003e\n  \u003cli\u003e Application data transits over an untrusted network. \u003c/li\u003e\n  \u003cli\u003e Compliance rules require the service to encrypt data in transit. \u003c/li\u003e\n  \u003cli\u003e Your application renders web pages with a relaxed mixed content policy. \u003c/li\u003e\n  \u003cli\u003e OS-level protections against clear-text traffic are deactivated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar urlHttp \u003d \"http://example.com\";                 // Noncompliant\nvar urlFtp \u003d \"ftp://anonymous@example.com\";         // Noncompliant\nvar urlTelnet \u003d \"telnet://anonymous@example.com\";   // Noncompliant\n\u003c/pre\u003e\n\u003cpre\u003e\nusing var smtp \u003d new SmtpClient(\"host\", 25); // Noncompliant, EnableSsl is not set\nusing var telnet \u003d new MyTelnet.Client(\"host\", port); // Noncompliant, rule raises Security Hotspot on any member containing \"Telnet\"\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    \u003cul\u003e\n      \u003cli\u003e Use \u003ccode\u003essh\u003c/code\u003e as an alternative to \u003ccode\u003etelnet\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003esftp\u003c/code\u003e, \u003ccode\u003escp\u003c/code\u003e, or \u003ccode\u003eftps\u003c/code\u003e instead of \u003ccode\u003eftp\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003ehttps\u003c/code\u003e instead of \u003ccode\u003ehttp\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003eSMTP\u003c/code\u003e over \u003ccode\u003eSSL/TLS\u003c/code\u003e or \u003ccode\u003eSMTP\u003c/code\u003e with \u003ccode\u003eSTARTTLS\u003c/code\u003e instead of clear-text SMTP. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Enable encryption of cloud components communications whenever it is possible. \u003c/li\u003e\n  \u003cli\u003e Configure your application to block mixed content when rendering web pages. \u003c/li\u003e\n  \u003cli\u003e If available, enforce OS-level deactivation of all clear-text traffic. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar urlHttps \u003d \"https://example.com\";\nvar urlSftp \u003d \"sftp://anonymous@example.com\";\nvar urlSsh \u003d \"ssh://anonymous@example.com\";\n\u003c/pre\u003e\n\u003cpre\u003e\nusing var smtp \u003d new SmtpClient(\"host\", 25) { EnableSsl \u003d true };\nusing var ssh \u003d new MySsh.Client(\"host\", port);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data Exposure\n  \u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec\n  Verification Standard - Network Communication Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eMobile Top 10 2016 Category M3 - Insecure\n  Communication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/200\"\u003eCWE-200 - Exposure of Sensitive Information to an Unauthorized Actor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/319\"\u003eCWE-319 - Cleartext Transmission of Sensitive Information\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\"\u003eGoogle, Moving towards more secure web\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\"\u003eMozilla, Deprecating non secure http\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\"\u003eAWS Documentation\u003c/a\u003e - Listeners\n  for your Application Load Balancers \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\"\u003eAWS\n  Documentation\u003c/a\u003e - Stream Encryption \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S2068",
    "name": "Hard-coded credentials are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eIt’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Issue is not raised when URI username and password are the same. \u003c/li\u003e\n  \u003cli\u003e Issue is not raised when searched pattern is found in variable name and value. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstring username \u003d \"admin\";\nstring password \u003d \"Admin123\"; // Sensitive\nstring usernamePassword  \u003d \"user\u003dadmin\u0026amp;password\u003dAdmin123\"; // Sensitive\nstring url \u003d \"scheme://user:Admin123@domain.com\"; // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud provider’s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstring username \u003d \"admin\";\nstring password \u003d GetEncryptedPassword();\nstring usernamePassword \u003d string.Format(\"user\u003d{0}\u0026amp;password\u003d{1}\", GetEncryptedUsername(), GetEncryptedPassword());\nstring url \u003d $\"scheme://{username}:{password}@domain.com\";\n\nstring url2 \u003d \"http://guest:guest@domain.com\"; // Compliant\nconst string Password_Property \u003d \"custom.password\"; // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "credentialWords": {
        "key": "credentialWords",
        "name": "credentialWords",
        "description": "Comma separated list of words identifying potential credentials",
        "defaultValue": "password, passwd, pwd, passphrase",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "credentialWords": "password, passwd, pwd, passphrase"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "csharpsquid:S110",
    "name": "Inheritance tree of classes should not be too deep",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInheritance is one of the most valuable concepts in object-oriented programming. It’s a way to categorize and reuse code by creating collections of\nattributes and behaviors called classes, which can be based on previously created classes.\u003c/p\u003e\n\u003cp\u003eBut abusing this concept by creating a deep inheritance tree can lead to complex and unmaintainable source code. Often, an inheritance tree\nbecoming too deep is the symptom of systematic use of \"inheritance\" when other approaches like \"composition\" would be better suited.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the inheritance tree, starting from \u003ccode\u003eObject\u003c/code\u003e, has a greater depth than is allowed.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Composition_over_inheritance\"\u003eComposition over inheritance: difference between composition and inheritance\nin object-oriented programming\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInheritance is one of the most valuable concepts in object-oriented programming. It’s a way to categorize and reuse code by creating collections of\nattributes and behaviors called classes, which can be based on previously created classes.\u003c/p\u003e\n\u003cp\u003eBut abusing this concept by creating a deep inheritance tree can lead to complex and unmaintainable source code. Often, an inheritance tree\nbecoming too deep is the symptom of systematic use of \"inheritance\" when other approaches like \"composition\" would be better suited.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the inheritance tree, starting from \u003ccode\u003eObject\u003c/code\u003e, has a greater depth than is allowed.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Composition_over_inheritance\"\u003eComposition over inheritance: difference between composition and inheritance\nin object-oriented programming\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum depth of the inheritance tree. (Number)",
        "defaultValue": "5",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      },
      "filteredClasses": {
        "key": "filteredClasses",
        "name": "filteredClasses",
        "description": "Comma-separated list of classes or records to be filtered out of the count of inheritance. Depth counting will stop when a filtered class or record is reached. For example: System.Windows.Controls.UserControl, System.Windows.*. (String)",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "5"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6422",
    "name": "Calls to \"async\" methods should not be blocking in Azure Functions",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMaking \u003ca href\u003d\"https://en.wikipedia.org/wiki/Blocking_(computing)\"\u003eblocking calls\u003c/a\u003e to \u003ccode\u003easync\u003c/code\u003e methods transforms the code into a\nsynchronous operation. Doing so inside an Azure Function can lead to thread pool exhaustion.\u003c/p\u003e\n\u003cp\u003eThread pool exhaustion refers to a situation where all available threads in a thread pool are occupied, and new tasks or work items cannot be\nscheduled for execution due to the lack of available threads. This can lead to delayed execution and degraded performance.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass RequestParser\n{\n\t[FunctionName(nameof(ParseRequest))]\n\tpublic static async Task\u0026lt;IActionResult\u0026gt; ParseRequest([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n\t{\n\t\t// This can lead to thread exhaustion\n\t\tstring requestBody \u003d new StreamReader(req.Body).ReadToEndAsync().Result;\n\t\t// do stuff...\n\t}\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easynchronous\u003c/a\u003e mechanisms should be used:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass RequestParser\n{\n\t[FunctionName(nameof(ParseRequest))]\n\tpublic static async Task\u0026lt;IActionResult\u0026gt; ParseRequest([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n\t{\n\t\t// Non-blocking, asynchronous operation\n\t\tstring requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n\t\t// do stuff...\n\t}\n}\n\u003c/pre\u003e\n\u003cp\u003eThis applies to multiple methods that are available when working with tasks:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3334%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGoal\u003c/th\u003e\n      \u003cth\u003eBlocking\u003c/th\u003e\n      \u003cth\u003eAsynchronous\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for the result of a task\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.Wait\u003c/code\u003e, \u003ccode\u003eTask.Result\u003c/code\u003e or \u003ccode\u003eTask.GetAwaiter.GetResult\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for any of many task to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for all of many tasks to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait a period of time\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eThread.Sleep\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.Delay\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming\"\u003eAsync/Await - Best\n  Practices in Asynchronous Programming\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/azure/azure-functions/performance-reliability#use-async-code-but-avoid-blocking-calls\"\u003eImprove the\n  performance and reliability of Azure Functions - Scalability best practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Github - \u003ca href\u003d\"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md\"\u003eAsync Guidance by David Fowler\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S4462} - Calls to \"async\" methods should not be blocking (a more general version of this rule) \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMaking \u003ca href\u003d\"https://en.wikipedia.org/wiki/Blocking_(computing)\"\u003eblocking calls\u003c/a\u003e to \u003ccode\u003easync\u003c/code\u003e methods transforms the code into a\nsynchronous operation. Doing so inside an Azure Function can lead to thread pool exhaustion.\u003c/p\u003e\n\u003cp\u003eThread pool exhaustion refers to a situation where all available threads in a thread pool are occupied, and new tasks or work items cannot be\nscheduled for execution due to the lack of available threads. This can lead to delayed execution and degraded performance.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass RequestParser\n{\n\t[FunctionName(nameof(ParseRequest))]\n\tpublic static async Task\u0026lt;IActionResult\u0026gt; ParseRequest([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n\t{\n\t\t// This can lead to thread exhaustion\n\t\tstring requestBody \u003d new StreamReader(req.Body).ReadToEndAsync().Result;\n\t\t// do stuff...\n\t}\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easynchronous\u003c/a\u003e mechanisms should be used:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass RequestParser\n{\n\t[FunctionName(nameof(ParseRequest))]\n\tpublic static async Task\u0026lt;IActionResult\u0026gt; ParseRequest([HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route \u003d null)] HttpRequest req)\n\t{\n\t\t// Non-blocking, asynchronous operation\n\t\tstring requestBody \u003d await new StreamReader(req.Body).ReadToEndAsync();\n\t\t// do stuff...\n\t}\n}\n\u003c/pre\u003e\n\u003cp\u003eThis applies to multiple methods that are available when working with tasks:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3333%;\"\u003e\n    \u003ccol style\u003d\"width: 33.3334%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGoal\u003c/th\u003e\n      \u003cth\u003eBlocking\u003c/th\u003e\n      \u003cth\u003eAsynchronous\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for the result of a task\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.Wait\u003c/code\u003e, \u003ccode\u003eTask.Result\u003c/code\u003e or \u003ccode\u003eTask.GetAwaiter.GetResult\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for any of many task to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAny\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait for all of many tasks to complete\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTask.WaitAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.WhenAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWait a period of time\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eThread.Sleep\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eawait Task.Delay\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming\"\u003eAsync/Await - Best\n  Practices in Asynchronous Programming\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/azure/azure-functions/performance-reliability#use-async-code-but-avoid-blocking-calls\"\u003eImprove the\n  performance and reliability of Azure Functions - Scalability best practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Github - \u003ca href\u003d\"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md\"\u003eAsync Guidance by David Fowler\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S4462} - Calls to \"async\" methods should not be blocking (a more general version of this rule) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await",
      "azure"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3398",
    "name": "\"private\" methods called only by inner classes should be moved to those classes",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a \u003ccode\u003eprivate static\u003c/code\u003e method is only invoked by a nested class, there’s no reason not to move it into that class. It will still have\nthe same access to the outer class\u0027 static members, but the outer class will be clearer and less cluttered.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Outer\n{\n    private const int base \u003d 42;\n\n    private static void Print(int num)  // Noncompliant - static method is only used by the nested class, should be moved there\n    {\n        Console.WriteLine(num + base);\n    }\n\n    public class Nested\n    {\n        public void SomeMethod()\n        {\n            Outer.Print(1);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Outer\n{\n    private const int base \u003d 42;\n\n    public class Nested\n    {\n        public void SomeMethod()\n        {\n            Print(1);\n        }\n\n        private static void Print(int num)\n        {\n            Console.WriteLine(num + base);\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a \u003ccode\u003eprivate static\u003c/code\u003e method is only invoked by a nested class, there’s no reason not to move it into that class. It will still have\nthe same access to the outer class\u0027 static members, but the outer class will be clearer and less cluttered.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Outer\n{\n    private const int base \u003d 42;\n\n    private static void Print(int num)  // Noncompliant - static method is only used by the nested class, should be moved there\n    {\n        Console.WriteLine(num + base);\n    }\n\n    public class Nested\n    {\n        public void SomeMethod()\n        {\n            Outer.Print(1);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Outer\n{\n    private const int base \u003d 42;\n\n    public class Nested\n    {\n        public void SomeMethod()\n        {\n            Print(1);\n        }\n\n        private static void Print(int num)\n        {\n            Console.WriteLine(num + base);\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4005",
    "name": "\"System.Uri\" arguments should be used instead of strings",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a called method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\" and the\ndeclaring type contains a corresponding overload that takes a \u003ccode\u003eSystem.Uri\u003c/code\u003e as a parameter.\u003c/p\u003e\n\u003cp\u003eWhen there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes\na \u003ccode\u003eSystem.Uri\u003c/code\u003e argument.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(\"http://www.mysite.com\"); // Noncompliant\n        ReadResource(\"http://www.mysite.com\", \"foo-resource\", true); // Noncompliant\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(new Uri(\"http://www.mysite.com\"));\n        ReadResource(new Uri(\"http://www.mysite.com\"), \"foo-resource\", true);\n      }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a called method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\" and the\ndeclaring type contains a corresponding overload that takes a \u003ccode\u003eSystem.Uri\u003c/code\u003e as a parameter.\u003c/p\u003e\n\u003cp\u003eWhen there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes\na \u003ccode\u003eSystem.Uri\u003c/code\u003e argument.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(\"http://www.mysite.com\"); // Noncompliant\n        ReadResource(\"http://www.mysite.com\", \"foo-resource\", true); // Noncompliant\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(new Uri(\"http://www.mysite.com\"));\n        ReadResource(new Uri(\"http://www.mysite.com\"), \"foo-resource\", true);\n      }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S138",
    "name": "Functions should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized lines of code in a method",
        "defaultValue": "80",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "80"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3900",
    "name": "Arguments of public methods should be validated against null",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods declared as \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eprotected\u003c/code\u003e, or \u003ccode\u003eprotected internal\u003c/code\u003e can be accessed from other assemblies, which\nmeans you should validate parameters to be within the expected constraints. In general, checking against \u003ccode\u003enull\u003c/code\u003e is recommended in defensive\nprogramming.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a parameter of a publicly accessible method is not validated against \u003ccode\u003enull\u003c/code\u003e before being\ndereferenced.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Noncompliant\n    }\n\n    protected void Bar(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        if (other !\u003d null)\n        {\n            this.other \u003d other.Clone();\n        }\n    }\n\n    protected void Bar(MyOtherClass other)\n    {\n        if (other !\u003d null)\n        {\n            this.other \u003d other.Clone();\n        }\n    }\n\n    public void Baz(MyOtherClass other)\n    {\n        ArgumentNullException.ThrowIfNull(other);\n\n        this.other \u003d other.Clone();\n    }\n\n    public void Qux(MyOtherClass other)\n    {\n        this.other \u003d other; // Compliant: \"other\" is not being dereferenced\n    }\n\n    private void Xyzzy(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Compliant: method is not publicly accessible\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Arguments validated for \u003ccode\u003enull\u003c/code\u003e via helper methods should be annotated with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis#postconditions-maybenull-and-notnull\"\u003e\u003ccode\u003e[NotNull\u003c/code\u003e\u003c/a\u003e] attribute. \u003c/li\u003e\n  \u003cli\u003e Method parameters marked with the \u003ccode\u003e[NotNull]\u003c/code\u003e \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#ItemNotNullAttribute\"\u003eResharper code annotation\n  attribute\u003c/a\u003e are supported as well. \u003c/li\u003e\n  \u003cli\u003e To create a custom null validation method declare an attribute with name \u003ccode\u003eValidatedNotNullAttribute\u003c/code\u003e and mark the parameter that is\n  validated for null in your method declaration with it: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nusing System;\n\n[AttributeUsage(AttributeTargets.Parameter, Inherited\u003dfalse)]\npublic sealed class ValidatedNotNullAttribute : Attribute { }\n\npublic static class Guard\n{\n    public static void NotNull\u0026lt;T\u0026gt;([ValidatedNotNullAttribute] T value, [CallerArgumentExpression(\"value\")] string name \u003d \"\") where T : class\n    {\n        if (value \u003d\u003d null)\n            throw new ArgumentNullException(name);\n    }\n}\n\npublic static class Utils\n{\n    public static string ToUpper(string value)\n    {\n        Guard.NotNull(value);\n\n        return value.ToUpper(); // Compliant\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods declared as \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eprotected\u003c/code\u003e, or \u003ccode\u003eprotected internal\u003c/code\u003e can be accessed from other assemblies, which\nmeans you should validate parameters to be within the expected constraints. In general, checking against \u003ccode\u003enull\u003c/code\u003e is recommended in defensive\nprogramming.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a parameter of a publicly accessible method is not validated against \u003ccode\u003enull\u003c/code\u003e before being\ndereferenced.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Noncompliant\n    }\n\n    protected void Bar(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        if (other !\u003d null)\n        {\n            this.other \u003d other.Clone();\n        }\n    }\n\n    protected void Bar(MyOtherClass other)\n    {\n        if (other !\u003d null)\n        {\n            this.other \u003d other.Clone();\n        }\n    }\n\n    public void Baz(MyOtherClass other)\n    {\n        ArgumentNullException.ThrowIfNull(other);\n\n        this.other \u003d other.Clone();\n    }\n\n    public void Qux(MyOtherClass other)\n    {\n        this.other \u003d other; // Compliant: \"other\" is not being dereferenced\n    }\n\n    private void Xyzzy(MyOtherClass other)\n    {\n        this.other \u003d other.Clone(); // Compliant: method is not publicly accessible\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Arguments validated for \u003ccode\u003enull\u003c/code\u003e via helper methods should be annotated with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis#postconditions-maybenull-and-notnull\"\u003e\u003ccode\u003e[NotNull\u003c/code\u003e\u003c/a\u003e] attribute. \u003c/li\u003e\n  \u003cli\u003e Method parameters marked with the \u003ccode\u003e[NotNull]\u003c/code\u003e \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#ItemNotNullAttribute\"\u003eResharper code annotation\n  attribute\u003c/a\u003e are supported as well. \u003c/li\u003e\n  \u003cli\u003e To create a custom null validation method declare an attribute with name \u003ccode\u003eValidatedNotNullAttribute\u003c/code\u003e and mark the parameter that is\n  validated for null in your method declaration with it: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nusing System;\n\n[AttributeUsage(AttributeTargets.Parameter, Inherited\u003dfalse)]\npublic sealed class ValidatedNotNullAttribute : Attribute { }\n\npublic static class Guard\n{\n    public static void NotNull\u0026lt;T\u0026gt;([ValidatedNotNullAttribute] T value, [CallerArgumentExpression(\"value\")] string name \u003d \"\") where T : class\n    {\n        if (value \u003d\u003d null)\n            throw new ArgumentNullException(name);\n    }\n}\n\npublic static class Utils\n{\n    public static string ToUpper(string value)\n    {\n        Guard.NotNull(value);\n\n        return value.ToUpper(); // Compliant\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2931",
    "name": "Classes with \"IDisposable\" members should implement \"IDisposable\"",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn \u003ccode\u003eIDisposable\u003c/code\u003e object should be disposed (there are some rare exceptions where not disposing is fine, most notably \u003ccode\u003eTask\u003c/code\u003e).\nIf a class has an \u003ccode\u003eIDisposable\u003c/code\u003e field, there can be two situations:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The class observes a field that is under the responsibility of another class. \u003c/li\u003e\n  \u003cli\u003e The class owns the field, and is therefore responsible for calling \u003ccode\u003eDispose\u003c/code\u003e on it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn the second case, the safest way for the class to ensure \u003ccode\u003eDispose\u003c/code\u003e is called is to call it in its own \u003ccode\u003eDispose\u003c/code\u003e function,\nand therefore to be itself \u003ccode\u003eIDisposable\u003c/code\u003e. A class is considered to own an \u003ccode\u003eIDisposable\u003c/code\u003e field resource if it created the object\nreferenced by the field.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class ResourceHolder   // Noncompliant; doesn\u0027t implement IDisposable\n{\n    private FileStream fs;  // This member is never Disposed\n    public void OpenResource(string path)\n    {\n        this.fs \u003d new FileStream(path, FileMode.Open); // I create the FileStream, I\u0027m owning it\n    }\n    public void CloseResource()\n    {\n        this.fs.Close();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class ResourceHolder : IDisposable\n{\n    private FileStream fs;\n    public void OpenResource(string path)\n    {\n        this.fs \u003d new FileStream(path, FileMode.Open); // I create the FileStream, I\u0027m owning it\n    }\n    public void CloseResource()\n    {\n        this.fs.Close();\n    }\n    public void Dispose()\n    {\n        this.fs.Dispose();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn \u003ccode\u003eIDisposable\u003c/code\u003e object should be disposed (there are some rare exceptions where not disposing is fine, most notably \u003ccode\u003eTask\u003c/code\u003e).\nIf a class has an \u003ccode\u003eIDisposable\u003c/code\u003e field, there can be two situations:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The class observes a field that is under the responsibility of another class. \u003c/li\u003e\n  \u003cli\u003e The class owns the field, and is therefore responsible for calling \u003ccode\u003eDispose\u003c/code\u003e on it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn the second case, the safest way for the class to ensure \u003ccode\u003eDispose\u003c/code\u003e is called is to call it in its own \u003ccode\u003eDispose\u003c/code\u003e function,\nand therefore to be itself \u003ccode\u003eIDisposable\u003c/code\u003e. A class is considered to own an \u003ccode\u003eIDisposable\u003c/code\u003e field resource if it created the object\nreferenced by the field.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class ResourceHolder   // Noncompliant; doesn\u0027t implement IDisposable\n{\n    private FileStream fs;  // This member is never Disposed\n    public void OpenResource(string path)\n    {\n        this.fs \u003d new FileStream(path, FileMode.Open); // I create the FileStream, I\u0027m owning it\n    }\n    public void CloseResource()\n    {\n        this.fs.Close();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class ResourceHolder : IDisposable\n{\n    private FileStream fs;\n    public void OpenResource(string path)\n    {\n        this.fs \u003d new FileStream(path, FileMode.Open); // I create the FileStream, I\u0027m owning it\n    }\n    public void CloseResource()\n    {\n        this.fs.Close();\n    }\n    public void Dispose()\n    {\n        this.fs.Dispose();\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "denial-of-service"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3902",
    "name": "\"Assembly.GetExecutingAssembly\" should not be called",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eType.Assembly\u003c/code\u003e to get the current assembly is nearly free in terms of performance; it’s a simple property access. On the other\nhand, \u003ccode\u003eAssembly.GetExecutingAssembly()\u003c/code\u003e can take up to 30 times as long because it walks up the call stack to find the assembly.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eAssembly.GetExecutingAssembly()\u003c/code\u003e is different than \u003ccode\u003eType.Assembly\u003c/code\u003e because it dynamically returns the assembly\nthat contains the startup object of the currently executed application. For example, if executed from an application it will return the application\nassembly, but if executed from a unit test project it could return the unit test assembly. \u003ccode\u003eType.Assembly\u003c/code\u003e always returns the assembly that\ncontains the specified type.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem \u003d Assembly.GetExecutingAssembly(); // Noncompliant\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem \u003d typeof(Example).Assembly; // Here we use the type of the current class\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eType.Assembly\u003c/code\u003e to get the current assembly is nearly free in terms of performance; it’s a simple property access. On the other\nhand, \u003ccode\u003eAssembly.GetExecutingAssembly()\u003c/code\u003e can take up to 30 times as long because it walks up the call stack to find the assembly.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eAssembly.GetExecutingAssembly()\u003c/code\u003e is different than \u003ccode\u003eType.Assembly\u003c/code\u003e because it dynamically returns the assembly\nthat contains the startup object of the currently executed application. For example, if executed from an application it will return the application\nassembly, but if executed from a unit test project it could return the unit test assembly. \u003ccode\u003eType.Assembly\u003c/code\u003e always returns the assembly that\ncontains the specified type.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem \u003d Assembly.GetExecutingAssembly(); // Noncompliant\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem \u003d typeof(Example).Assembly; // Here we use the type of the current class\n      Console.WriteLine(\"Assembly name: {0}\", assem.FullName);\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2934",
    "name": "Property assignments should not be made for \"readonly\" fields not constrained to reference types",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile the properties of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003e\u003ccode\u003ereadonly\u003c/code\u003e\u003c/a\u003e\n\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003ereference type\u003c/a\u003e field can still be changed\nafter initialization, those of a \u003ccode\u003ereadonly\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003evalue type\u003c/a\u003e field, such as a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003e\u003ccode\u003estruct\u003c/code\u003e\u003c/a\u003e, cannot.\u003c/p\u003e\n\u003cp\u003eIf the member could be either a \u003ccode\u003eclass\u003c/code\u003e or a \u003ccode\u003estruct\u003c/code\u003e then assignment to its properties could be unreliable, working\nsometimes but not others.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThere are two ways to fix this issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Restrict the type of the field to a \u003ccode\u003eclass\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Remove the assignment entirely, if it is not possible to restrict the type of the field \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninterface IPoint\n{\n    int X { get; set; }\n    int Y { get; set; }\n}\n\nclass PointManager\u0026lt;T1, T2\u0026gt;\n    where T1 : IPoint\n    where T2 : IPoint\n{\n    readonly T1 point1;  // this could be a struct\n    readonly T2 point2;  // this could be a struct\n\n    public PointManager(T1 point1, T2 point2)\n    {\n        this.point1 \u003d point1;\n        this.point2 \u003d point2;\n    }\n\n    public void MovePoints(int newX)\n    {\n        point1.X \u003d newX; //Noncompliant: if point is a struct, then nothing happened\n        point2.X \u003d newX; //Noncompliant: if point is a struct, then nothing happened\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninterface IPoint\n{\n    int X { get; set; }\n    int Y { get; set; }\n}\n\nclass PointManager\u0026lt;T1, T2\u0026gt;\n    where T1 : IPoint\n    where T2 : class, IPoint\n{\n    readonly T1 point1;  // this could be a struct\n    readonly T2 point2;  // this is a class\n\n    public PointManager(T1 point1, T2 point2)\n    {\n        this.point1 \u003d point1;\n        this.point2 \u003d point2;\n    }\n\n    public void MovePoints(int newX) // assignment to point1 has been removed\n    {\n        point2.X \u003d newX; // Compliant: point2 is a class\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly (C# Reference)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003eValue types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003eStructure types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile the properties of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003e\u003ccode\u003ereadonly\u003c/code\u003e\u003c/a\u003e\n\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003ereference type\u003c/a\u003e field can still be changed\nafter initialization, those of a \u003ccode\u003ereadonly\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003evalue type\u003c/a\u003e field, such as a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003e\u003ccode\u003estruct\u003c/code\u003e\u003c/a\u003e, cannot.\u003c/p\u003e\n\u003cp\u003eIf the member could be either a \u003ccode\u003eclass\u003c/code\u003e or a \u003ccode\u003estruct\u003c/code\u003e then assignment to its properties could be unreliable, working\nsometimes but not others.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThere are two ways to fix this issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Restrict the type of the field to a \u003ccode\u003eclass\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Remove the assignment entirely, if it is not possible to restrict the type of the field \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninterface IPoint\n{\n    int X { get; set; }\n    int Y { get; set; }\n}\n\nclass PointManager\u0026lt;T1, T2\u0026gt;\n    where T1 : IPoint\n    where T2 : IPoint\n{\n    readonly T1 point1;  // this could be a struct\n    readonly T2 point2;  // this could be a struct\n\n    public PointManager(T1 point1, T2 point2)\n    {\n        this.point1 \u003d point1;\n        this.point2 \u003d point2;\n    }\n\n    public void MovePoints(int newX)\n    {\n        point1.X \u003d newX; //Noncompliant: if point is a struct, then nothing happened\n        point2.X \u003d newX; //Noncompliant: if point is a struct, then nothing happened\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninterface IPoint\n{\n    int X { get; set; }\n    int Y { get; set; }\n}\n\nclass PointManager\u0026lt;T1, T2\u0026gt;\n    where T1 : IPoint\n    where T2 : class, IPoint\n{\n    readonly T1 point1;  // this could be a struct\n    readonly T2 point2;  // this is a class\n\n    public PointManager(T1 point1, T2 point2)\n    {\n        this.point1 \u003d point1;\n        this.point2 \u003d point2;\n    }\n\n    public void MovePoints(int newX) // assignment to point1 has been removed\n    {\n        point2.X \u003d newX; // Compliant: point2 is a class\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly (C# Reference)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003eValue types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003eStructure types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2933",
    "name": "Fields that are only assigned in the constructor should be \"readonly\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ereadonly\u003c/code\u003e fields can only be assigned in a class constructor. If a class has a field that’s not marked \u003ccode\u003ereadonly\u003c/code\u003e but is\nonly set in the constructor, it could cause confusion about the field’s intended use. To avoid confusion, such fields should be marked\n\u003ccode\u003ereadonly\u003c/code\u003e to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Fields declared in classes marked with the \u003ccode\u003eSerializable\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e Fields declared in \u003ccode\u003epartial\u003c/code\u003e classes. \u003c/li\u003e\n  \u003cli\u003e Fields with attributes are ignored. \u003c/li\u003e\n  \u003cli\u003e Fields of type \u003ccode\u003estruct\u003c/code\u003e that are not primitive or pointer types are also ignored because of possible unwanted behavior. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMark the given field with the \u003ccode\u003ereadonly\u003c/code\u003e modifier.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Person\n{\n    private int _birthYear; // Noncompliant\n\n    Person(int birthYear)\n    {\n        _birthYear \u003d birthYear;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Person\n{\n    private readonly int _birthYear;\n\n    Person(int birthYear)\n    {\n        _birthYear \u003d birthYear;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Fabulous adventures in coding - \u003ca href\u003d\"https://ericlippert.com/2008/05/14/mutating-readonly-structs/\"\u003eMutating readonly structs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003ereadonly\u003c/code\u003e fields can only be assigned in a class constructor. If a class has a field that’s not marked \u003ccode\u003ereadonly\u003c/code\u003e but is\nonly set in the constructor, it could cause confusion about the field’s intended use. To avoid confusion, such fields should be marked\n\u003ccode\u003ereadonly\u003c/code\u003e to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Fields declared in classes marked with the \u003ccode\u003eSerializable\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e Fields declared in \u003ccode\u003epartial\u003c/code\u003e classes. \u003c/li\u003e\n  \u003cli\u003e Fields with attributes are ignored. \u003c/li\u003e\n  \u003cli\u003e Fields of type \u003ccode\u003estruct\u003c/code\u003e that are not primitive or pointer types are also ignored because of possible unwanted behavior. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMark the given field with the \u003ccode\u003ereadonly\u003c/code\u003e modifier.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Person\n{\n    private int _birthYear; // Noncompliant\n\n    Person(int birthYear)\n    {\n        _birthYear \u003d birthYear;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Person\n{\n    private readonly int _birthYear;\n\n    Person(int birthYear)\n    {\n        _birthYear \u003d birthYear;\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Fabulous adventures in coding - \u003ca href\u003d\"https://ericlippert.com/2008/05/14/mutating-readonly-structs/\"\u003eMutating readonly structs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3904",
    "name": "Assemblies should have version information",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute\"\u003eAssemblyVersion\u003c/a\u003e attribute is used to\nspecify the version number of an assembly. An assembly is a compiled unit of code, which can be marked with a version number by applying the attribute\nto an assembly’s source code file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute is useful for many reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eVersioning\u003c/strong\u003e: The attribute allows developers to track and manage different versions of an assembly. By incrementing the version\n  number for each new release, you can easily identify and differentiate between different versions of the same assembly. This is particularly useful\n  when distributing and deploying software, as it helps manage updates and compatibility between different versions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDependency management\u003c/strong\u003e: When an assembly references another assembly, it can specify the specific version of the dependency it\n  requires. By using the \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute, you can ensure that the correct version of the referenced assembly is used. This\n  helps avoid compatibility issues and ensures that the expected behavior and functionality are maintained. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eGAC management\u003c/strong\u003e: The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGAC\u003c/a\u003e, also known as Global\n  Assembly Cache, is a central repository for storing shared assemblies on a system. The AssemblyVersion attribute plays a crucial role in managing\n  assemblies in the GAC. Different versions of an assembly can coexist in the GAC, allowing applications to use the specific version they require.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf no \u003ccode\u003eAssemblyVersion\u003c/code\u003e is provided, the same default version will be used for every build. Since the version number is used by .NET\nFramework to uniquely identify an assembly, this can lead to broken dependencies.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")] // Noncompliant\nnamespace MyLibrary\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")]\n[assembly: AssemblyVersion(\"42.1.125.0\")]\nnamespace MyLibrary\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/assembly/versioning\"\u003eAssembly Versioning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGlobal Assembly Cache\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute\"\u003eAssemblyVersion\u003c/a\u003e attribute is used to\nspecify the version number of an assembly. An assembly is a compiled unit of code, which can be marked with a version number by applying the attribute\nto an assembly’s source code file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute is useful for many reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eVersioning\u003c/strong\u003e: The attribute allows developers to track and manage different versions of an assembly. By incrementing the version\n  number for each new release, you can easily identify and differentiate between different versions of the same assembly. This is particularly useful\n  when distributing and deploying software, as it helps manage updates and compatibility between different versions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDependency management\u003c/strong\u003e: When an assembly references another assembly, it can specify the specific version of the dependency it\n  requires. By using the \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute, you can ensure that the correct version of the referenced assembly is used. This\n  helps avoid compatibility issues and ensures that the expected behavior and functionality are maintained. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eGAC management\u003c/strong\u003e: The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGAC\u003c/a\u003e, also known as Global\n  Assembly Cache, is a central repository for storing shared assemblies on a system. The AssemblyVersion attribute plays a crucial role in managing\n  assemblies in the GAC. Different versions of an assembly can coexist in the GAC, allowing applications to use the specific version they require.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf no \u003ccode\u003eAssemblyVersion\u003c/code\u003e is provided, the same default version will be used for every build. Since the version number is used by .NET\nFramework to uniquely identify an assembly, this can lead to broken dependencies.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")] // Noncompliant\nnamespace MyLibrary\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Reflection;\n\n[assembly: AssemblyTitle(\"MyAssembly\")]\n[assembly: AssemblyVersion(\"42.1.125.0\")]\nnamespace MyLibrary\n{\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/assembly/versioning\"\u003eAssembly Versioning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGlobal Assembly Cache\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3903",
    "name": "Types should be defined in named namespaces",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTypes are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n\n    public struct Bar\n    {\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTypes are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n\n    public struct Bar\n    {\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3906",
    "name": "Event Handlers should have the correct signature",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDelegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Return type \u003ccode\u003evoid\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e First argument of type \u003ccode\u003eSystem.Object\u003c/code\u003e and named \u0027sender\u0027. \u003c/li\u003e\n  \u003cli\u003e Second argument of type \u003ccode\u003eSystem.EventArgs\u003c/code\u003e (or any derived type) and is named \u0027e\u0027. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue whenever a \u003ccode\u003edelegate\u003c/code\u003e declaration doesn’t match that signature.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic delegate void AlarmEventHandler(object s);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic delegate void AlarmEventHandler(object sender, AlarmEventArgs e);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/edzehd2t.aspx\"\u003eHandling and Raising Events\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDelegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Return type \u003ccode\u003evoid\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e First argument of type \u003ccode\u003eSystem.Object\u003c/code\u003e and named \u0027sender\u0027. \u003c/li\u003e\n  \u003cli\u003e Second argument of type \u003ccode\u003eSystem.EventArgs\u003c/code\u003e (or any derived type) and is named \u0027e\u0027. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue whenever a \u003ccode\u003edelegate\u003c/code\u003e declaration doesn’t match that signature.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic delegate void AlarmEventHandler(object s);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic delegate void AlarmEventHandler(object sender, AlarmEventArgs e);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/edzehd2t.aspx\"\u003eHandling and Raising Events\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1848",
    "name": "Objects should not be created to be dropped immediately without being used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating objects that are not used is a vulnerability that can lead to unexpected behavior.\u003c/p\u003e\n\u003cp\u003eIf this was done intentionally due to side effects in the object’s constructor, the code should be moved to a dedicated method.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method(MyObject myObject)\n{\n    if (myObject is null)\n    {\n        new MyObject(); // Noncompliant\n    }\n\n    if (myObject.IsCorrupted)\n    {\n        new ArgumentException($\"{nameof(myObject)} is corrupted\"); // Noncompliant\n    }\n\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method(MyObject myObject)\n{\n    if (myObject is null)\n    {\n        myObject \u003d new MyObject(); // Compliant\n    }\n\n    if (myObject.IsCorrupted)\n    {\n        throw new ArgumentException($\"{nameof(myObject)} is corrupted\"); // Compliant\n    }\n\n    // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating objects that are not used is a vulnerability that can lead to unexpected behavior.\u003c/p\u003e\n\u003cp\u003eIf this was done intentionally due to side effects in the object’s constructor, the code should be moved to a dedicated method.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method(MyObject myObject)\n{\n    if (myObject is null)\n    {\n        new MyObject(); // Noncompliant\n    }\n\n    if (myObject.IsCorrupted)\n    {\n        new ArgumentException($\"{nameof(myObject)} is corrupted\"); // Noncompliant\n    }\n\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method(MyObject myObject)\n{\n    if (myObject is null)\n    {\n        myObject \u003d new MyObject(); // Compliant\n    }\n\n    if (myObject.IsCorrupted)\n    {\n        throw new ArgumentException($\"{nameof(myObject)} is corrupted\"); // Compliant\n    }\n\n    // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1607",
    "name": "Tests should not be ignored",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each ignored test that does not have a \u003ccode\u003eWorkItem\u003c/code\u003e attribute nor a comment about why it is being skipped on\nthe right side of the \u003ccode\u003eIgnore\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]  // renable when TCKT-1234 is fixed\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]\n[WorkItem(1234)]\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the test method is also marked with \u003ccode\u003eWorkItem\u003c/code\u003e attribute \u003c/li\u003e\n  \u003cli\u003e there is a comment on the right side of the \u003ccode\u003eIgnore\u003c/code\u003e attribute \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each ignored test that does not have a \u003ccode\u003eWorkItem\u003c/code\u003e attribute nor a comment about why it is being skipped on\nthe right side of the \u003ccode\u003eIgnore\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]  // renable when TCKT-1234 is fixed\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\n[Ignore]\n[WorkItem(1234)]\npublic void Test_DoTheThing()\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t raise an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the test method is also marked with \u003ccode\u003eWorkItem\u003c/code\u003e attribute \u003c/li\u003e\n  \u003cli\u003e there is a comment on the right side of the \u003ccode\u003eIgnore\u003c/code\u003e attribute \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice",
      "confusing",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2930",
    "name": "\"IDisposables\" should be disposed",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen writing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/managed-code\"\u003emanaged code\u003c/a\u003e, there is no need to worry about memory\nallocation or deallocation as it is taken care of by the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection\"\u003egarbage\ncollector\u003c/a\u003e. However, certain objects, such as \u003ccode\u003eBitmap\u003c/code\u003e, utilize unmanaged memory for specific purposes like \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code\"\u003epointer arithmetic\u003c/a\u003e. These objects may have substantial\nunmanaged memory footprints while having minimal managed footprints. Unfortunately, the garbage collector only recognizes the small managed footprint\nand does not promptly reclaim the corresponding unmanaged memory (by invoking the finalizer method of \u003ccode\u003eBitmap\u003c/code\u003e) for efficiency reasons.\u003c/p\u003e\n\u003cp\u003eIn addition, it’s essential to manage other system resources besides memory. The operating system has limits on the number of \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/File_descriptor\"\u003efile descriptors\u003c/a\u003e (e.g., \u003ccode\u003eFileStream\u003c/code\u003e) or \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Network_socket\"\u003esockets\u003c/a\u003e (e.g., \u003ccode\u003eWebClient\u003c/code\u003e) that can remain open simultaneously. Therefore, it’s\ncrucial to \u003ccode\u003eDispose\u003c/code\u003e of these resources promptly when they are no longer required, instead of relying on the garbage collector to invoke\nthe finalizers of these objects at an unpredictable time in the future.\u003c/p\u003e\n\u003cp\u003eThis rule keeps track of \u003ccode\u003eprivate\u003c/code\u003e fields and local variables of specific types that implement \u003ccode\u003eIDisposable\u003c/code\u003e or\n\u003ccode\u003eIAsyncDisposable\u003c/code\u003e. It identifies instances of these types that are not properly disposed, closed, aliased, returned, or passed to other\nmethods. This applies to instances that are either directly created using the \u003ccode\u003enew\u003c/code\u003e operator or instantiated through a predefined list of\nfactory methods.\u003c/p\u003e\n\u003cp\u003eHere is the list of predefined factory methods tracked by this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IO.File.Create()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IO.File.Open()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Drawing.Image.FromFile()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Drawing.Image.FromStream()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIDisposable\u003c/code\u003e / \u003ccode\u003eIAsyncDisposable\u003c/code\u003e variables returned from a method or passed to other methods are ignored, as are local\n\u003ccode\u003eIDisposable\u003c/code\u003e / \u003ccode\u003eIAsyncDisposable\u003c/code\u003e objects that are initialized with other \u003ccode\u003eIDisposable\u003c/code\u003e /\n\u003ccode\u003eIAsyncDisposable\u003c/code\u003e objects.\u003c/p\u003e\n\u003cpre\u003e\npublic Stream WriteToFile(string path, string text)\n{\n  var fs \u003d new FileStream(path, FileMode.Open); // Compliant: it is returned\n  var bytes \u003d Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n\npublic void ReadFromStream(Stream s)\n{\n  var sr \u003d new StreamReader(s); // Compliant: it would close the underlying stream.\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIt is essential to identify what kind of disposable resource variable is used to know how to fix this issue.\u003c/p\u003e\n\u003cp\u003eIn the case of a disposable resource store as a member (either as field or property), it should be disposed at the same time as the class. The best\nway to achieve this is to follow the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003edispose\npattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen creating the disposable resource for a one-time use (cases not covered by the exceptions), it should be disposed at the end of its creation\nscope. The easiest to ensure your resource is disposed when reaching the end of a scope is to either use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003ethe using statement or the using declaration\u003c/a\u003e\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class ResourceHolder\n{\n  private FileStream fs; // Noncompliant: dispose or close are never called\n\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    var fs \u003d new FileStream(path, FileMode.Open); // Noncompliant: not disposed, returned or initialized with another disposable object\n    var bytes \u003d Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class ResourceHolder : IDisposable, IAsyncDisposable\n{\n  private FileStream fs; // Compliant: disposed in Dispose/DisposeAsync methods\n\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n\n  public async ValueTask DisposeAsync()\n  {\n    await fs.DisposeAsync().ConfigureAwait(false);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    using (var fs \u003d new FileStream(path, FileMode.Open)) // Compliant: disposed at the end of the using block\n    {\n      var bytes \u003d Encoding.UTF8.GetBytes(text);\n      fs.Write(bytes, 0, bytes.Length);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/managed-code\"\u003eWhat is \"managed code\"?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection\"\u003eGarbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003eFinalizers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code\"\u003eUnsafe code, pointer types, and function pointers\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/File_descriptor\"\u003eFile descriptor - Wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Network_socket\"\u003eNetwork socket - Wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003eDispose pattern\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync\n      method\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing statement and using declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen writing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/managed-code\"\u003emanaged code\u003c/a\u003e, there is no need to worry about memory\nallocation or deallocation as it is taken care of by the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection\"\u003egarbage\ncollector\u003c/a\u003e. However, certain objects, such as \u003ccode\u003eBitmap\u003c/code\u003e, utilize unmanaged memory for specific purposes like \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code\"\u003epointer arithmetic\u003c/a\u003e. These objects may have substantial\nunmanaged memory footprints while having minimal managed footprints. Unfortunately, the garbage collector only recognizes the small managed footprint\nand does not promptly reclaim the corresponding unmanaged memory (by invoking the finalizer method of \u003ccode\u003eBitmap\u003c/code\u003e) for efficiency reasons.\u003c/p\u003e\n\u003cp\u003eIn addition, it’s essential to manage other system resources besides memory. The operating system has limits on the number of \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/File_descriptor\"\u003efile descriptors\u003c/a\u003e (e.g., \u003ccode\u003eFileStream\u003c/code\u003e) or \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Network_socket\"\u003esockets\u003c/a\u003e (e.g., \u003ccode\u003eWebClient\u003c/code\u003e) that can remain open simultaneously. Therefore, it’s\ncrucial to \u003ccode\u003eDispose\u003c/code\u003e of these resources promptly when they are no longer required, instead of relying on the garbage collector to invoke\nthe finalizers of these objects at an unpredictable time in the future.\u003c/p\u003e\n\u003cp\u003eThis rule keeps track of \u003ccode\u003eprivate\u003c/code\u003e fields and local variables of specific types that implement \u003ccode\u003eIDisposable\u003c/code\u003e or\n\u003ccode\u003eIAsyncDisposable\u003c/code\u003e. It identifies instances of these types that are not properly disposed, closed, aliased, returned, or passed to other\nmethods. This applies to instances that are either directly created using the \u003ccode\u003enew\u003c/code\u003e operator or instantiated through a predefined list of\nfactory methods.\u003c/p\u003e\n\u003cp\u003eHere is the list of predefined factory methods tracked by this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IO.File.Create()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.IO.File.Open()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Drawing.Image.FromFile()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Drawing.Image.FromStream()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eIDisposable\u003c/code\u003e / \u003ccode\u003eIAsyncDisposable\u003c/code\u003e variables returned from a method or passed to other methods are ignored, as are local\n\u003ccode\u003eIDisposable\u003c/code\u003e / \u003ccode\u003eIAsyncDisposable\u003c/code\u003e objects that are initialized with other \u003ccode\u003eIDisposable\u003c/code\u003e /\n\u003ccode\u003eIAsyncDisposable\u003c/code\u003e objects.\u003c/p\u003e\n\u003cpre\u003e\npublic Stream WriteToFile(string path, string text)\n{\n  var fs \u003d new FileStream(path, FileMode.Open); // Compliant: it is returned\n  var bytes \u003d Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n\npublic void ReadFromStream(Stream s)\n{\n  var sr \u003d new StreamReader(s); // Compliant: it would close the underlying stream.\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIt is essential to identify what kind of disposable resource variable is used to know how to fix this issue.\u003c/p\u003e\n\u003cp\u003eIn the case of a disposable resource store as a member (either as field or property), it should be disposed at the same time as the class. The best\nway to achieve this is to follow the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003edispose\npattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen creating the disposable resource for a one-time use (cases not covered by the exceptions), it should be disposed at the end of its creation\nscope. The easiest to ensure your resource is disposed when reaching the end of a scope is to either use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003ethe using statement or the using declaration\u003c/a\u003e\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class ResourceHolder\n{\n  private FileStream fs; // Noncompliant: dispose or close are never called\n\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    var fs \u003d new FileStream(path, FileMode.Open); // Noncompliant: not disposed, returned or initialized with another disposable object\n    var bytes \u003d Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class ResourceHolder : IDisposable, IAsyncDisposable\n{\n  private FileStream fs; // Compliant: disposed in Dispose/DisposeAsync methods\n\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n\n  public async ValueTask DisposeAsync()\n  {\n    await fs.DisposeAsync().ConfigureAwait(false);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    using (var fs \u003d new FileStream(path, FileMode.Open)) // Compliant: disposed at the end of the using block\n    {\n      var bytes \u003d Encoding.UTF8.GetBytes(text);\n      fs.Write(bytes, 0, bytes.Length);\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/managed-code\"\u003eWhat is \"managed code\"?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection\"\u003eGarbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003eFinalizers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/unsafe-code\"\u003eUnsafe code, pointer types, and function pointers\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/File_descriptor\"\u003eFile descriptor - Wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Network_socket\"\u003eNetwork socket - Wiki\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003eDispose pattern\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync\n      method\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing statement and using declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "denial-of-service"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S126",
    "name": "\"if ... else if\" constructs should end with \"else\" clauses",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0)\n{\n    DoSomething();\n}\nelse if (x \u003d\u003d 1)\n{\n    DoSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0)\n{\n    DoSomething();\n}\nelse if (x \u003d\u003d 1)\n{\n    DoSomethingElse();\n}\nelse\n{\n    throw new InvalidOperationException();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNone\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0)\n{\n    DoSomething();\n}\nelse if (x \u003d\u003d 1)\n{\n    DoSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0)\n{\n    DoSomething();\n}\nelse if (x \u003d\u003d 1)\n{\n    DoSomethingElse();\n}\nelse\n{\n    throw new InvalidOperationException();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNone\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S127",
    "name": "\"for\" loop stop conditions should be invariant",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\u003c/p\u003e\n\u003cp\u003eStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\u003c/p\u003e\n\u003cp\u003eThis rule tracks three types of non-invariant stop conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the loop counters are updated in the body of the \u003ccode\u003efor\u003c/code\u003e loop \u003c/li\u003e\n  \u003cli\u003e When the stop condition depend upon a method call \u003c/li\u003e\n  \u003cli\u003e When the stop condition depends on an object property, since such properties could change during the execution of the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n    static void Main()\n    {\n        for (int i \u003d 1; i \u0026lt;\u003d 5; i++)\n        {\n            Console.WriteLine(i);\n            if (condition)\n            {\n               i \u003d 20;\n           }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n    static void Main()\n    {\n        for (int i \u003d 1; i \u0026lt;\u003d 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\u003c/p\u003e\n\u003cp\u003eStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\u003c/p\u003e\n\u003cp\u003eThis rule tracks three types of non-invariant stop conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the loop counters are updated in the body of the \u003ccode\u003efor\u003c/code\u003e loop \u003c/li\u003e\n  \u003cli\u003e When the stop condition depend upon a method call \u003c/li\u003e\n  \u003cli\u003e When the stop condition depends on an object property, since such properties could change during the execution of the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n    static void Main()\n    {\n        for (int i \u003d 1; i \u0026lt;\u003d 5; i++)\n        {\n            Console.WriteLine(i);\n            if (condition)\n            {\n               i \u003d 20;\n           }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n    static void Main()\n    {\n        for (int i \u003d 1; i \u0026lt;\u003d 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S125",
    "name": "Sections of code should not be commented out",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCommented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.\u003c/p\u003e\n\u003cp\u003eCommented-out code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCommented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.\u003c/p\u003e\n\u003cp\u003eCommented-out code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2925",
    "name": "\"Thread.Sleep\" should not be used in tests",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eThread.Sleep\u003c/code\u003e in a test might introduce unpredictable and inconsistent results depending on the environment. Furthermore, it will\nblock the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e, which means the system resources are not being fully used.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void SomeTest()\n{\n    Thread.Sleep(500); // Noncompliant\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is a task-based asynchronous approach, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easync and await\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMore specifically the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay\u003c/a\u003e method should be\nused, because of the following advantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003cstrong\u003easynchronous\u003c/strong\u003e: The thread will not be blocked, but instead will be reused by other operations \u003c/li\u003e\n  \u003cli\u003e It is more \u003cstrong\u003eprecise\u003c/strong\u003e in timing the delay than \u003ccode\u003eThread.Sleep\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It can be \u003cstrong\u003ecanceled and continued\u003c/strong\u003e, which gives more flexibility and control in the timing of your code \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic async Task SomeTest()\n{\n    await Task.Delay(500);\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother scenario is when some data might need to be mocked using \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq\u003c/a\u003e, and a delay needs to be\nintroduced:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void UserService_Test()\n{\n    var userService \u003d new Mock\u0026lt;UserService\u0026gt;();\n    var expected \u003d new User();\n\n    userService\n        .Setup(m \u003d\u0026gt; m.GetUserById(42))\n        .Returns(() \u003d\u0026gt;\n        {\n            Thread.Sleep(500); // Noncompliant\n            return Task.FromResult(expected);\n        });\n\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn alternative to \u003ccode\u003eThread.Sleep\u003c/code\u003e while mocking with \u003ccode\u003eMoq\u003c/code\u003e is to use \u003ccode\u003eReturnsAsync\u003c/code\u003e and pass the amount of time to\ndelay there:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void UserService_Test()\n{\n    var userService \u003d new Mock\u0026lt;UserService\u0026gt;();\n    var expected \u003d new User();\n\n    userService\n        .Setup(m \u003d\u0026gt; m.GetUserById(42))\n        .ReturnsAsync(expected, TimeSpan.FromMilliseconds(500));\n\n    // assertions...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep\"\u003eThread.Sleep method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming with async and await\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq mocking library\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eThread.Sleep\u003c/code\u003e in a test might introduce unpredictable and inconsistent results depending on the environment. Furthermore, it will\nblock the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e, which means the system resources are not being fully used.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void SomeTest()\n{\n    Thread.Sleep(500); // Noncompliant\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is a task-based asynchronous approach, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easync and await\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMore specifically the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay\u003c/a\u003e method should be\nused, because of the following advantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003cstrong\u003easynchronous\u003c/strong\u003e: The thread will not be blocked, but instead will be reused by other operations \u003c/li\u003e\n  \u003cli\u003e It is more \u003cstrong\u003eprecise\u003c/strong\u003e in timing the delay than \u003ccode\u003eThread.Sleep\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It can be \u003cstrong\u003ecanceled and continued\u003c/strong\u003e, which gives more flexibility and control in the timing of your code \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic async Task SomeTest()\n{\n    await Task.Delay(500);\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother scenario is when some data might need to be mocked using \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq\u003c/a\u003e, and a delay needs to be\nintroduced:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void UserService_Test()\n{\n    var userService \u003d new Mock\u0026lt;UserService\u0026gt;();\n    var expected \u003d new User();\n\n    userService\n        .Setup(m \u003d\u0026gt; m.GetUserById(42))\n        .Returns(() \u003d\u0026gt;\n        {\n            Thread.Sleep(500); // Noncompliant\n            return Task.FromResult(expected);\n        });\n\n    // assertions...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn alternative to \u003ccode\u003eThread.Sleep\u003c/code\u003e while mocking with \u003ccode\u003eMoq\u003c/code\u003e is to use \u003ccode\u003eReturnsAsync\u003c/code\u003e and pass the amount of time to\ndelay there:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void UserService_Test()\n{\n    var userService \u003d new Mock\u0026lt;UserService\u0026gt;();\n    var expected \u003d new User();\n\n    userService\n        .Setup(m \u003d\u0026gt; m.GetUserById(42))\n        .ReturnsAsync(expected, TimeSpan.FromMilliseconds(500));\n\n    // assertions...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep\"\u003eThread.Sleep method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming with async and await\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq mocking library\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S134",
    "name": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested control flow statements \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003eforeach\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e,\nand \u003ccode\u003etry\u003c/code\u003e are often key ingredients in creating what’s known as \"Spaghetti code\". This code smell can make your program difficult to\nunderstand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code’s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1)                  // Compliant - depth \u003d 1\n{\n  /* ... */\n  if (condition2)                // Compliant - depth \u003d 2\n  {\n    /* ... */\n    for (int i \u003d 0; i \u0026lt; 10; i++)  // Compliant - depth \u003d 3\n    {\n      /* ... */\n      if (condition4)            // Noncompliant - depth \u003d 4, which exceeds the limit\n      {\n        if (condition5)          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n        {\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!condition1)\n{\n  return;\n}\n/* ... */\nif (!condition2)\n{\n  return;\n}\nfor (int i \u003d 0; i \u0026lt; 10; i++)\n{\n  /* ... */\n  if (condition4)\n  {\n    if (condition5)\n    {\n      /* ... */\n    }\n    return;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Guard_(computer_science)\"\u003eGuard clauses in programming\u003c/a\u003e - one of the approaches to reducing the depth\n  of nesting \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested control flow statements \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003eforeach\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e,\nand \u003ccode\u003etry\u003c/code\u003e are often key ingredients in creating what’s known as \"Spaghetti code\". This code smell can make your program difficult to\nunderstand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code’s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1)                  // Compliant - depth \u003d 1\n{\n  /* ... */\n  if (condition2)                // Compliant - depth \u003d 2\n  {\n    /* ... */\n    for (int i \u003d 0; i \u0026lt; 10; i++)  // Compliant - depth \u003d 3\n    {\n      /* ... */\n      if (condition4)            // Noncompliant - depth \u003d 4, which exceeds the limit\n      {\n        if (condition5)          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n        {\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!condition1)\n{\n  return;\n}\n/* ... */\nif (!condition2)\n{\n  return;\n}\nfor (int i \u003d 0; i \u0026lt; 10; i++)\n{\n  /* ... */\n  if (condition4)\n  {\n    if (condition5)\n    {\n      /* ... */\n    }\n    return;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Guard_(computer_science)\"\u003eGuard clauses in programming\u003c/a\u003e - one of the approaches to reducing the depth\n  of nesting \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "maximumNestingLevel": {
        "key": "maximumNestingLevel",
        "name": "maximumNestingLevel",
        "description": "Maximum allowed control flow statement nesting depth.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumNestingLevel": "3"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S131",
    "name": "\"switch/Select\" statements should contain a \"default/Case Else\" clauses",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. Even when the \u003ccode\u003eswitch\u003c/code\u003e covers all current values of an \u003ccode\u003eenum\u003c/code\u003e, a\n\u003ccode\u003edefault\u003c/code\u003e case should still be used because there is no guarantee that the \u003ccode\u003eenum\u003c/code\u003e won’t be extended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint foo \u003d 42;\nswitch (foo) // Noncompliant\n{\n  case 0:\n    Console.WriteLine(\"foo \u003d 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo \u003d 42\");\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint foo \u003d 42;\nswitch (foo) // Compliant\n{\n  case 0:\n    Console.WriteLine(\"foo \u003d 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo \u003d 42\");\n    break;\n  default:\n    throw new InvalidOperationException(\"Unexpected value foo \u003d \" + foo);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eCWE-478 - Missing Default Case in Switch Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. Even when the \u003ccode\u003eswitch\u003c/code\u003e covers all current values of an \u003ccode\u003eenum\u003c/code\u003e, a\n\u003ccode\u003edefault\u003c/code\u003e case should still be used because there is no guarantee that the \u003ccode\u003eenum\u003c/code\u003e won’t be extended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint foo \u003d 42;\nswitch (foo) // Noncompliant\n{\n  case 0:\n    Console.WriteLine(\"foo \u003d 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo \u003d 42\");\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint foo \u003d 42;\nswitch (foo) // Compliant\n{\n  case 0:\n    Console.WriteLine(\"foo \u003d 0\");\n    break;\n  case 42:\n    Console.WriteLine(\"foo \u003d 42\");\n    break;\n  default:\n    throw new InvalidOperationException(\"Unexpected value foo \u003d \" + foo);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eCWE-478 - Missing Default Case in Switch Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2953",
    "name": "Methods named \"Dispose\" should implement \"IDisposable.Dispose\"",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e is an interface implemented by all types which need to\nprovide a mechanism for \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ereleasing unmanaged\nresources\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUnlike managed memory, which is taken care of by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003egarbage collection\u003c/a\u003e,\u003c/p\u003e\n\u003cp\u003eThe interface declares a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003eDispose\u003c/a\u003e method, which the\nimplementer has to define.\u003c/p\u003e\n\u003cp\u003eThe method name \u003ccode\u003eDispose\u003c/code\u003e should be used exclusively to implement \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e to prevent any confusion.\u003c/p\u003e\n\u003cp\u003eIt may be tempting to create a \u003ccode\u003eDispose\u003c/code\u003e method for other purposes, but doing so will result in confusion and likely lead to problems in\nproduction.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods named \u003ccode\u003eDispose\u003c/code\u003e and invoked from the \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e implementation are not reported.\u003c/p\u003e\n\u003cpre\u003e\npublic class GarbageDisposal : IDisposable\n{\n  protected virtual void Dispose(bool disposing)\n  {\n    //...\n  }\n  public void Dispose()\n  {\n    Dispose(true);\n    GC.SuppressFinalize(this);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eFirst, it is important to determine whether instances of the type defining the \u003ccode\u003eDispose\u003c/code\u003e method should support the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e interface or not.\u003c/p\u003e\n\u003cp\u003eThe decision would be based on whether the instance can have unmanaged resources which have to be dealt with, upon destruction or earlier in the\nlifetime of the object.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003eDispose pattern\u003c/a\u003e can help to take the\ndecision.\u003c/p\u003e\n\u003cp\u003eIf the type should not support the pattern, the \u003ccode\u003eDispose\u003c/code\u003e method should be renamed to something which is different than\n\u003ccode\u003eDispose\u003c/code\u003e, but still relevant and possibly more specific to the context.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic class GarbageDisposal\n{\n  private int Dispose()  // Noncompliant\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\npublic class GarbageDisposal : IDisposable\n{\n  public void Dispose()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class GarbageDisposal\n{\n  private int Grind()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable Interface\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e is an interface implemented by all types which need to\nprovide a mechanism for \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ereleasing unmanaged\nresources\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUnlike managed memory, which is taken care of by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003egarbage collection\u003c/a\u003e,\u003c/p\u003e\n\u003cp\u003eThe interface declares a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003eDispose\u003c/a\u003e method, which the\nimplementer has to define.\u003c/p\u003e\n\u003cp\u003eThe method name \u003ccode\u003eDispose\u003c/code\u003e should be used exclusively to implement \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e to prevent any confusion.\u003c/p\u003e\n\u003cp\u003eIt may be tempting to create a \u003ccode\u003eDispose\u003c/code\u003e method for other purposes, but doing so will result in confusion and likely lead to problems in\nproduction.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods named \u003ccode\u003eDispose\u003c/code\u003e and invoked from the \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e implementation are not reported.\u003c/p\u003e\n\u003cpre\u003e\npublic class GarbageDisposal : IDisposable\n{\n  protected virtual void Dispose(bool disposing)\n  {\n    //...\n  }\n  public void Dispose()\n  {\n    Dispose(true);\n    GC.SuppressFinalize(this);\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eFirst, it is important to determine whether instances of the type defining the \u003ccode\u003eDispose\u003c/code\u003e method should support the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e interface or not.\u003c/p\u003e\n\u003cp\u003eThe decision would be based on whether the instance can have unmanaged resources which have to be dealt with, upon destruction or earlier in the\nlifetime of the object.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/dispose-pattern\"\u003eDispose pattern\u003c/a\u003e can help to take the\ndecision.\u003c/p\u003e\n\u003cp\u003eIf the type should not support the pattern, the \u003ccode\u003eDispose\u003c/code\u003e method should be renamed to something which is different than\n\u003ccode\u003eDispose\u003c/code\u003e, but still relevant and possibly more specific to the context.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic class GarbageDisposal\n{\n  private int Dispose()  // Noncompliant\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\npublic class GarbageDisposal : IDisposable\n{\n  public void Dispose()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class GarbageDisposal\n{\n  private int Grind()\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable Interface\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3923",
    "name": "All branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0)  // Noncompliant\n{\n    DoTheThing();\n}\nelse\n{\n    DoTheThing();\n}\n\nint b \u003d a \u0026gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) // Noncompliant\n{\n    case 1:\n        DoSomething();\n        break;\n    case 2:\n        DoSomething();\n        break;\n    case 3:\n        DoSomething();\n        break;\n    default:\n        DoSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0)    //no issue, this could have been done on purpose to make the code more readable\n{\n    DoSomething();\n}\nelse if (b \u003d\u003d 1)\n{\n    DoSomething();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0)  // Noncompliant\n{\n    DoTheThing();\n}\nelse\n{\n    DoTheThing();\n}\n\nint b \u003d a \u0026gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) // Noncompliant\n{\n    case 1:\n        DoSomething();\n        break;\n    case 2:\n        DoSomething();\n        break;\n    case 3:\n        DoSomething();\n        break;\n    default:\n        DoSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0)    //no issue, this could have been done on purpose to make the code more readable\n{\n    DoSomething();\n}\nelse if (b \u003d\u003d 1)\n{\n    DoSomething();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2955",
    "name": "Generic parameters not constrained to reference types should not be compared to \"null\"",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a\n\u003ccode\u003estruct\u003c/code\u003e, could also be passed. In such cases, comparing the type parameter to \u003ccode\u003enull\u003c/code\u003e would always be false, because a\n\u003ccode\u003estruct\u003c/code\u003e can be empty, but never \u003ccode\u003enull\u003c/code\u003e. If a value type is truly what’s expected, then the comparison should use\n\u003ccode\u003edefault()\u003c/code\u003e. If it’s not, then constraints should be added so that no value type can be passed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value)\n{\n  if (value \u003d\u003d null) // Noncompliant\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value)\n{\n  if(object.Equals(value, default(T)))\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value) where T : class\n{\n  if (value \u003d\u003d null)\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a\n\u003ccode\u003estruct\u003c/code\u003e, could also be passed. In such cases, comparing the type parameter to \u003ccode\u003enull\u003c/code\u003e would always be false, because a\n\u003ccode\u003estruct\u003c/code\u003e can be empty, but never \u003ccode\u003enull\u003c/code\u003e. If a value type is truly what’s expected, then the comparison should use\n\u003ccode\u003edefault()\u003c/code\u003e. If it’s not, then constraints should be added so that no value type can be passed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value)\n{\n  if (value \u003d\u003d null) // Noncompliant\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value)\n{\n  if(object.Equals(value, default(T)))\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nprivate bool IsDefault\u0026lt;T\u0026gt;(T value) where T : class\n{\n  if (value \u003d\u003d null)\n  {\n    // ...\n  }\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3926",
    "name": "Deserialization methods should be provided for \"OptionalField\" members",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields marked with \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.\u003c/p\u003e\n\u003cp\u003eThis rule raises when at least one field with the \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e attribute is declared but one\n(or both) of the following event handlers \u003ccode\u003eSystem.Runtime.Serialization.OnDeserializingAttribute\u003c/code\u003e or\n\u003ccode\u003eSystem.Runtime.Serialization.OnDeserializedAttribute\u003c/code\u003e are not present.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded \u003d 2)]\n    int optionalField \u003d 5;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded \u003d 2)]\n    int optionalField \u003d 5;\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context)\n    {\n\t    optionalField \u003d 5;\n    }\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context)\n    {\n        // Set optionalField if dependent on other deserialized values.\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields marked with \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.\u003c/p\u003e\n\u003cp\u003eThis rule raises when at least one field with the \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e attribute is declared but one\n(or both) of the following event handlers \u003ccode\u003eSystem.Runtime.Serialization.OnDeserializingAttribute\u003c/code\u003e or\n\u003ccode\u003eSystem.Runtime.Serialization.OnDeserializedAttribute\u003c/code\u003e are not present.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded \u003d 2)]\n    int optionalField \u003d 5;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded \u003d 2)]\n    int optionalField \u003d 5;\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context)\n    {\n\t    optionalField \u003d 5;\n    }\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context)\n    {\n        // Set optionalField if dependent on other deserialized values.\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "serialization"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3925",
    "name": "\"ISerializable\" should be implemented correctly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable\"\u003e\u003ccode\u003eISerializable\u003c/code\u003e\u003c/a\u003e interface is\nthe mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard-to-detect\nbugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue on types that implement \u003ccode\u003eISerializable\u003c/code\u003e without following the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003eserialization pattern recommended by Microsoft\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSpecifically, this rule checks for these problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003e\u003ccode\u003eSerializableAttribute\u003c/code\u003e\u003c/a\u003e attribute is\n  missing. \u003c/li\u003e\n  \u003cli\u003e Non-serializable fields are not marked with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nonserializedattribute\"\u003e\u003ccode\u003eNonSerializedAttribute\u003c/code\u003e\u003c/a\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e There is no serialization constructor. \u003c/li\u003e\n  \u003cli\u003e An unsealed type has a serialization constructor that is not \u003ccode\u003eprotected\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e A sealed type has a serialization constructor that is not \u003ccode\u003eprivate\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e An unsealed type has an \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable.getobjectdata\"\u003e\u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e\u003c/a\u003e that is not both \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003evirtual\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e A derived type has a serialization constructor that does not call the \u003ccode\u003ebase\u003c/code\u003e constructor. \u003c/li\u003e\n  \u003cli\u003e A derived type has an \u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e method that does not call the \u003ccode\u003ebase\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e A derived type has serializable fields but the \u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e method is not overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClasses that inherit from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e are implementing\n\u003ccode\u003eISerializable\u003c/code\u003e. Make sure the \u003ccode\u003e[Serializable]\u003c/code\u003e attribute is used and that \u003ccode\u003eISerializable\u003c/code\u003e is correctly implemented.\nEven if you don’t plan to explicitly serialize the object yourself, it might still require serialization, for instance when crossing the boundary of\nan \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.appdomain\"\u003e\u003ccode\u003eAppDomain\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule only raises an issue on classes that indicate that they are interested in serialization (see the \u003cem\u003eExceptions\u003c/em\u003e section). That is to\nreduce noise because a lot of classes in the base class library are implementing \u003ccode\u003eISerializable\u003c/code\u003e, including the following classes: \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.uri\"\u003e\u003ccode\u003eUri\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003e\u003ccode\u003eDictionary\u0026lt;TKey,TValue\u0026gt;\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.data.dataset\"\u003e\u003ccode\u003eDataSet\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.net.httpwebrequest\"\u003e\u003ccode\u003eHttpWebRequest\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex\"\u003e\u003ccode\u003eRegex\u003c/code\u003e\u003c/a\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.treenode\"\u003e\u003ccode\u003eTreeNode\u003c/code\u003e\u003c/a\u003e, and others. There is often no need to add\nserialization support in classes derived from these types.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes in test projects are not checked. \u003c/li\u003e\n  \u003cli\u003e Classes need to indicate that they are interested in serialization support by either\n    \u003col\u003e\n      \u003cli\u003e Applying the \u003ccode\u003e[Serializable]\u003c/code\u003e attribute \u003c/li\u003e\n      \u003cli\u003e Having \u003ccode\u003eISerializable\u003c/code\u003e in their base type list \u003c/li\u003e\n      \u003cli\u003e Declaring a \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization#supporting-runtime-serialization\"\u003eserialization\n      constructor\u003c/a\u003e \u003c/li\u003e\n    \u003c/ol\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n[Serializable]                                                                                 // 1.\npublic class SerializationOptIn_Attribute\n{\n}\n\npublic class SerializationOptIn_Interface : ISerializable                                      // 2.\n{\n}\n\npublic class SerializationOptIn_Constructor\n{\n    protected SerializationOptIn_Constructor(SerializationInfo info, StreamingContext context) // 3.\n    {\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMake sure to follow the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003erecommended guidelines\u003c/a\u003e when\nimplementing \u003ccode\u003eISerializable\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Bar\n{\n}\n\npublic class Foo : ISerializable // Noncompliant: serialization constructor is missing\n                                 // Noncompliant: the [Serializable] attribute is missing\n{\n    private readonly Bar bar; // Noncompliant: the field is not marked with [NonSerialized]\n}\n\npublic sealed class SealedFoo : Foo\n{\n    private int val; // Noncompliant: \u0027val\u0027 is serializable and GetObjectData is not overridden\n\n    public SealedFoo()\n    {\n        // ...\n    }\n\n    public SealedFoo(SerializationInfo info, StreamingContext context) // Noncompliant: serialization constructor is not `private`\n                                                                       // Noncompliant: serialization constructor does not call base constructor\n    {\n        // ...\n    }\n}\n\npublic class UnsealedFoo : Foo\n{\n    public UnsealedFoo()\n    {\n        // ...\n    }\n\n    public UnsealedFoo(SerializationInfo info, StreamingContext context) // Noncompliant: serialization constructor is not `protected`\n        : base(info, context)\n    {\n        // ...\n    }\n\n    protected void GetObjectData(SerializationInfo info, StreamingContext context) // Noncompliant: GetObjectData is not public virtual\n    {\n        // Noncompliant: does not call base.GetObjectData(info, context)\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable // Compliant: the class is marked with [Serializable]\n{\n    [NonSerialized]\n    private readonly Bar bar; // Compliant: the field is marked with [NonSerialized]\n\n    public Foo()\n    {\n        // ...\n    }\n\n    protected Foo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is present\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n}\n\n[Serializable]\npublic sealed class SealedFoo : Foo\n{\n    private int val; // Compliant: \u0027val\u0027 is serializable and GetObjectData is overridden\n\n    public SealedFoo()\n    {\n        // ...\n    }\n\n    private SealedFoo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is `private`\n        : base(info, context) // Compliant: serialization constructor calls base constructor\n    {\n        // ...\n    }\n\n    public override void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        base.GetObjectData(info, context);\n        // ...\n    }\n}\n\n[Serializable]\npublic class UnsealedFoo : Foo\n{\n    public UnsealedFoo()\n    {\n        // ...\n    }\n\n    protected UnsealedFoo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is `protected`\n        : base(info, context)\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context) // Compliant: GetObjectData is public virtual\n    {\n        base.GetObjectData(info, context); // Compliant: calls base.GetObjectData(info, context)\n        // ...\n\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003eSerialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable\"\u003e\u003ccode\u003eISerializable\u003c/code\u003e\n  Interface\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003e\u003ccode\u003eSerializableAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nonserializedattribute\"\u003e\u003ccode\u003eNonSerializedAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable.getobjectdata\"\u003e\u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable\"\u003e\u003ccode\u003eISerializable\u003c/code\u003e\u003c/a\u003e interface is\nthe mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard-to-detect\nbugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue on types that implement \u003ccode\u003eISerializable\u003c/code\u003e without following the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003eserialization pattern recommended by Microsoft\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSpecifically, this rule checks for these problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003e\u003ccode\u003eSerializableAttribute\u003c/code\u003e\u003c/a\u003e attribute is\n  missing. \u003c/li\u003e\n  \u003cli\u003e Non-serializable fields are not marked with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nonserializedattribute\"\u003e\u003ccode\u003eNonSerializedAttribute\u003c/code\u003e\u003c/a\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e There is no serialization constructor. \u003c/li\u003e\n  \u003cli\u003e An unsealed type has a serialization constructor that is not \u003ccode\u003eprotected\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e A sealed type has a serialization constructor that is not \u003ccode\u003eprivate\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e An unsealed type has an \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable.getobjectdata\"\u003e\u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e\u003c/a\u003e that is not both \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003evirtual\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e A derived type has a serialization constructor that does not call the \u003ccode\u003ebase\u003c/code\u003e constructor. \u003c/li\u003e\n  \u003cli\u003e A derived type has an \u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e method that does not call the \u003ccode\u003ebase\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e A derived type has serializable fields but the \u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e method is not overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClasses that inherit from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e are implementing\n\u003ccode\u003eISerializable\u003c/code\u003e. Make sure the \u003ccode\u003e[Serializable]\u003c/code\u003e attribute is used and that \u003ccode\u003eISerializable\u003c/code\u003e is correctly implemented.\nEven if you don’t plan to explicitly serialize the object yourself, it might still require serialization, for instance when crossing the boundary of\nan \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.appdomain\"\u003e\u003ccode\u003eAppDomain\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule only raises an issue on classes that indicate that they are interested in serialization (see the \u003cem\u003eExceptions\u003c/em\u003e section). That is to\nreduce noise because a lot of classes in the base class library are implementing \u003ccode\u003eISerializable\u003c/code\u003e, including the following classes: \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.uri\"\u003e\u003ccode\u003eUri\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003e\u003ccode\u003eDictionary\u0026lt;TKey,TValue\u0026gt;\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.data.dataset\"\u003e\u003ccode\u003eDataSet\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.net.httpwebrequest\"\u003e\u003ccode\u003eHttpWebRequest\u003c/code\u003e\u003c/a\u003e, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex\"\u003e\u003ccode\u003eRegex\u003c/code\u003e\u003c/a\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.treenode\"\u003e\u003ccode\u003eTreeNode\u003c/code\u003e\u003c/a\u003e, and others. There is often no need to add\nserialization support in classes derived from these types.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes in test projects are not checked. \u003c/li\u003e\n  \u003cli\u003e Classes need to indicate that they are interested in serialization support by either\n    \u003col\u003e\n      \u003cli\u003e Applying the \u003ccode\u003e[Serializable]\u003c/code\u003e attribute \u003c/li\u003e\n      \u003cli\u003e Having \u003ccode\u003eISerializable\u003c/code\u003e in their base type list \u003c/li\u003e\n      \u003cli\u003e Declaring a \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization#supporting-runtime-serialization\"\u003eserialization\n      constructor\u003c/a\u003e \u003c/li\u003e\n    \u003c/ol\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n[Serializable]                                                                                 // 1.\npublic class SerializationOptIn_Attribute\n{\n}\n\npublic class SerializationOptIn_Interface : ISerializable                                      // 2.\n{\n}\n\npublic class SerializationOptIn_Constructor\n{\n    protected SerializationOptIn_Constructor(SerializationInfo info, StreamingContext context) // 3.\n    {\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMake sure to follow the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003erecommended guidelines\u003c/a\u003e when\nimplementing \u003ccode\u003eISerializable\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Bar\n{\n}\n\npublic class Foo : ISerializable // Noncompliant: serialization constructor is missing\n                                 // Noncompliant: the [Serializable] attribute is missing\n{\n    private readonly Bar bar; // Noncompliant: the field is not marked with [NonSerialized]\n}\n\npublic sealed class SealedFoo : Foo\n{\n    private int val; // Noncompliant: \u0027val\u0027 is serializable and GetObjectData is not overridden\n\n    public SealedFoo()\n    {\n        // ...\n    }\n\n    public SealedFoo(SerializationInfo info, StreamingContext context) // Noncompliant: serialization constructor is not `private`\n                                                                       // Noncompliant: serialization constructor does not call base constructor\n    {\n        // ...\n    }\n}\n\npublic class UnsealedFoo : Foo\n{\n    public UnsealedFoo()\n    {\n        // ...\n    }\n\n    public UnsealedFoo(SerializationInfo info, StreamingContext context) // Noncompliant: serialization constructor is not `protected`\n        : base(info, context)\n    {\n        // ...\n    }\n\n    protected void GetObjectData(SerializationInfo info, StreamingContext context) // Noncompliant: GetObjectData is not public virtual\n    {\n        // Noncompliant: does not call base.GetObjectData(info, context)\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable // Compliant: the class is marked with [Serializable]\n{\n    [NonSerialized]\n    private readonly Bar bar; // Compliant: the field is marked with [NonSerialized]\n\n    public Foo()\n    {\n        // ...\n    }\n\n    protected Foo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is present\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n}\n\n[Serializable]\npublic sealed class SealedFoo : Foo\n{\n    private int val; // Compliant: \u0027val\u0027 is serializable and GetObjectData is overridden\n\n    public SealedFoo()\n    {\n        // ...\n    }\n\n    private SealedFoo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is `private`\n        : base(info, context) // Compliant: serialization constructor calls base constructor\n    {\n        // ...\n    }\n\n    public override void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        base.GetObjectData(info, context);\n        // ...\n    }\n}\n\n[Serializable]\npublic class UnsealedFoo : Foo\n{\n    public UnsealedFoo()\n    {\n        // ...\n    }\n\n    protected UnsealedFoo(SerializationInfo info, StreamingContext context) // Compliant: serialization constructor is `protected`\n        : base(info, context)\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context) // Compliant: GetObjectData is public virtual\n    {\n        base.GetObjectData(info, context); // Compliant: calls base.GetObjectData(info, context)\n        // ...\n\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/serialization\"\u003eSerialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable\"\u003e\u003ccode\u003eISerializable\u003c/code\u003e\n  Interface\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003e\u003ccode\u003eSerializableAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nonserializedattribute\"\u003e\u003ccode\u003eNonSerializedAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable.getobjectdata\"\u003e\u003ccode\u003eISerializable.GetObjectData\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3928",
    "name": "Parameter names used into ArgumentException constructors should match an existing one",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSome constructors of the \u003ccode\u003eArgumentException\u003c/code\u003e, \u003ccode\u003eArgumentNullException\u003c/code\u003e, \u003ccode\u003eArgumentOutOfRangeException\u003c/code\u003e and\n\u003ccode\u003eDuplicateWaitObjectException\u003c/code\u003e classes must be fed with a valid parameter name. This rule raises an issue in two cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When this parameter name doesn’t match any existing ones. \u003c/li\u003e\n  \u003cli\u003e When a call is made to the default (parameterless) constructor \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException();                                        // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\");                 // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\", innerException); // Noncompliant\n\n  throw new ArgumentNullException(\"c\");                     // Noncompliant\n  throw new ArgumentNullException(nameof(c));               // Noncompliant\n  throw new ArgumentNullException(\"My error message\", \"a\"); // Noncompliant\n\n  throw new ArgumentOutOfRangeException(\"c\");                           // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\", \"My error message\");       // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\", b, \"My error message\");    // Noncompliant\n\n  throw new DuplicateWaitObjectException(\"c\", \"My error message\");      // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException(\"My error message\", \"a\");\n  throw new ArgumentException(\"My error message\", \"b\", innerException);\n\n  throw new ArgumentNullException(\"a\");\n  throw new ArgumentNullException(nameof(a));\n  throw new ArgumentNullException(\"a\", \"My error message\");\n\n  throw new ArgumentOutOfRangeException(\"b\");\n  throw new ArgumentOutOfRangeException(\"b\", \"My error message\");\n  throw new ArgumentOutOfRangeException(\"b\", b, \"My error message\");\n\n  throw new DuplicateWaitObjectException(\"b\", \"My error message\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule won’t raise an issue if the parameter name is not a constant value.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSome constructors of the \u003ccode\u003eArgumentException\u003c/code\u003e, \u003ccode\u003eArgumentNullException\u003c/code\u003e, \u003ccode\u003eArgumentOutOfRangeException\u003c/code\u003e and\n\u003ccode\u003eDuplicateWaitObjectException\u003c/code\u003e classes must be fed with a valid parameter name. This rule raises an issue in two cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When this parameter name doesn’t match any existing ones. \u003c/li\u003e\n  \u003cli\u003e When a call is made to the default (parameterless) constructor \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException();                                        // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\");                 // Noncompliant\n  throw new ArgumentException(\"My error message\", \"c\", innerException); // Noncompliant\n\n  throw new ArgumentNullException(\"c\");                     // Noncompliant\n  throw new ArgumentNullException(nameof(c));               // Noncompliant\n  throw new ArgumentNullException(\"My error message\", \"a\"); // Noncompliant\n\n  throw new ArgumentOutOfRangeException(\"c\");                           // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\", \"My error message\");       // Noncompliant\n  throw new ArgumentOutOfRangeException(\"c\", b, \"My error message\");    // Noncompliant\n\n  throw new DuplicateWaitObjectException(\"c\", \"My error message\");      // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException(\"My error message\", \"a\");\n  throw new ArgumentException(\"My error message\", \"b\", innerException);\n\n  throw new ArgumentNullException(\"a\");\n  throw new ArgumentNullException(nameof(a));\n  throw new ArgumentNullException(\"a\", \"My error message\");\n\n  throw new ArgumentOutOfRangeException(\"b\");\n  throw new ArgumentOutOfRangeException(\"b\", \"My error message\");\n  throw new ArgumentOutOfRangeException(\"b\", b, \"My error message\");\n\n  throw new DuplicateWaitObjectException(\"b\", \"My error message\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule won’t raise an issue if the parameter name is not a constant value.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3927",
    "name": "Serialization event handlers should be implemented correctly",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSerialization event handlers that don’t have the correct signature will not be called, bypassing augmentations to the automated\nde/serialization.\u003c/p\u003e\n\u003cp\u003eA method is designated a serialization event handler by applying one of the following serialization event attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializingattribute\"\u003e\u003ccode\u003eOnSerializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializedattribute\"\u003e\u003ccode\u003eOnSerializedAttribute\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializingattribute\"\u003e\u003ccode\u003eOnDeserializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializedattribute\"\u003e\u003ccode\u003eOnDeserializedAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSerialization event handlers take a single parameter of type \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.streamingcontext\"\u003e\u003ccode\u003eStreamingContext\u003c/code\u003e\u003c/a\u003e, return\n\u003ccode\u003evoid\u003c/code\u003e, and have \u003ccode\u003eprivate\u003c/code\u003e visibility.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of these constraints are not respected.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    public void OnSerializing(StreamingContext context) {} // Noncompliant: should be private\n\n    [OnSerialized]\n    int OnSerialized(StreamingContext context) {} // Noncompliant: should return void\n\n    [OnDeserializing]\n    void OnDeserializing() {} // Noncompliant: should have a single parameter of type StreamingContext\n\n    [OnSerializing]\n    public void OnSerializing2\u0026lt;T\u0026gt;(StreamingContext context) {} // Noncompliant: should have no type parameters\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant: should have a single parameter of type StreamingContext\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    private void OnSerializing(StreamingContext context) {}\n\n    [OnSerialized]\n    private void OnSerialized(StreamingContext context) {}\n\n    [OnDeserializing]\n    private void OnDeserializing(StreamingContext context) {}\n\n    [OnDeserialized]\n    private void OnDeserialized(StreamingContext context) {}\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/visualstudio/code-quality/ca2238\"\u003eCA2238: Implement serialization methods\n  correctly\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSerialization event handlers that don’t have the correct signature will not be called, bypassing augmentations to the automated\nde/serialization.\u003c/p\u003e\n\u003cp\u003eA method is designated a serialization event handler by applying one of the following serialization event attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializingattribute\"\u003e\u003ccode\u003eOnSerializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializedattribute\"\u003e\u003ccode\u003eOnSerializedAttribute\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializingattribute\"\u003e\u003ccode\u003eOnDeserializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializedattribute\"\u003e\u003ccode\u003eOnDeserializedAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSerialization event handlers take a single parameter of type \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.streamingcontext\"\u003e\u003ccode\u003eStreamingContext\u003c/code\u003e\u003c/a\u003e, return\n\u003ccode\u003evoid\u003c/code\u003e, and have \u003ccode\u003eprivate\u003c/code\u003e visibility.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of these constraints are not respected.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    public void OnSerializing(StreamingContext context) {} // Noncompliant: should be private\n\n    [OnSerialized]\n    int OnSerialized(StreamingContext context) {} // Noncompliant: should return void\n\n    [OnDeserializing]\n    void OnDeserializing() {} // Noncompliant: should have a single parameter of type StreamingContext\n\n    [OnSerializing]\n    public void OnSerializing2\u0026lt;T\u0026gt;(StreamingContext context) {} // Noncompliant: should have no type parameters\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant: should have a single parameter of type StreamingContext\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    private void OnSerializing(StreamingContext context) {}\n\n    [OnSerialized]\n    private void OnSerialized(StreamingContext context) {}\n\n    [OnDeserializing]\n    private void OnDeserializing(StreamingContext context) {}\n\n    [OnDeserialized]\n    private void OnDeserialized(StreamingContext context) {}\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/visualstudio/code-quality/ca2238\"\u003eCA2238: Implement serialization methods\n  correctly\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1862",
    "name": "Related \"if/else if\" statements should not have the same condition",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA chain of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eif/else\nif\u003c/a\u003e statements is evaluated from top to bottom. At most, only one branch will be executed: the first statement with a condition that evaluates to\n\u003ccode\u003etrue\u003c/code\u003e. Therefore, duplicating a condition leads to unreachable code inside the duplicated condition block. Usually, this is due to a\ncopy/paste error.\u003c/p\u003e\n\u003cp\u003eThe result of such duplication can lead to unreachable code or even to unexpected behavior.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (param \u003d\u003d 1)\n{\n  OpenWindow();\n}\nelse if (param \u003d\u003d 2)\n{\n  CloseWindow();\n}\nelse if (param \u003d\u003d 1) // Noncompliant: condition has already been checked\n{\n  MoveWindowToTheBackground(); // unreachable code\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (param \u003d\u003d 1)\n{\n  OpenWindow();\n}\nelse if (param \u003d\u003d 2)\n{\n  CloseWindow();\n}\nelse if (param \u003d\u003d 3)\n{\n  MoveWindowToTheBackground();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eThe if\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA chain of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eif/else\nif\u003c/a\u003e statements is evaluated from top to bottom. At most, only one branch will be executed: the first statement with a condition that evaluates to\n\u003ccode\u003etrue\u003c/code\u003e. Therefore, duplicating a condition leads to unreachable code inside the duplicated condition block. Usually, this is due to a\ncopy/paste error.\u003c/p\u003e\n\u003cp\u003eThe result of such duplication can lead to unreachable code or even to unexpected behavior.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (param \u003d\u003d 1)\n{\n  OpenWindow();\n}\nelse if (param \u003d\u003d 2)\n{\n  CloseWindow();\n}\nelse if (param \u003d\u003d 1) // Noncompliant: condition has already been checked\n{\n  MoveWindowToTheBackground(); // unreachable code\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (param \u003d\u003d 1)\n{\n  OpenWindow();\n}\nelse if (param \u003d\u003d 2)\n{\n  CloseWindow();\n}\nelse if (param \u003d\u003d 3)\n{\n  MoveWindowToTheBackground();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eThe if\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2952",
    "name": "Classes should \"Dispose\" of members from the classes\u0027 own \"Dispose\" methods",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is possible in an \u003ccode\u003eIDisposable\u003c/code\u003e to call \u003ccode\u003eDispose\u003c/code\u003e on class members from any method, but the contract of\n\u003ccode\u003eDispose\u003c/code\u003e is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource\nleaks.\u003c/p\u003e\n\u003cp\u003eThis rule also applies for disposable ref structs.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void CleanUp()\n  {\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class\u0027 Dispose method\n  }\n\n  public void Dispose()\n  {\n    // method added to satisfy demands of interface\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is possible in an \u003ccode\u003eIDisposable\u003c/code\u003e to call \u003ccode\u003eDispose\u003c/code\u003e on class members from any method, but the contract of\n\u003ccode\u003eDispose\u003c/code\u003e is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource\nleaks.\u003c/p\u003e\n\u003cp\u003eThis rule also applies for disposable ref structs.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void CleanUp()\n  {\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class\u0027 Dispose method\n  }\n\n  public void Dispose()\n  {\n    // method added to satisfy demands of interface\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs \u003d new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "denial-of-service"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3908",
    "name": "Generic event handlers should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSince .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from \u003ccode\u003eSystem.EventArgs\u003c/code\u003e. The\n\u003ccode\u003eSystem.EventHandler\u0026lt;TEventArgs\u0026gt;\u003c/code\u003e delegate mechanism should be used instead as it allows any class derived from\n\u003ccode\u003eEventArgs\u003c/code\u003e to be used with that handler.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an old style delegate is used as an event handler.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic delegate void MyEventHandler(object sender, MyEventArgs e); // Noncompliant\n\npublic class EventProducer\n{\n  public event MyEventHandler MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent !\u003d null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent +\u003d HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic class EventProducer\n{\n  public event EventHandler\u0026lt;MyEventArgs\u0026gt; MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent !\u003d null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent +\u003d HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSince .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from \u003ccode\u003eSystem.EventArgs\u003c/code\u003e. The\n\u003ccode\u003eSystem.EventHandler\u0026lt;TEventArgs\u0026gt;\u003c/code\u003e delegate mechanism should be used instead as it allows any class derived from\n\u003ccode\u003eEventArgs\u003c/code\u003e to be used with that handler.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an old style delegate is used as an event handler.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic delegate void MyEventHandler(object sender, MyEventArgs e); // Noncompliant\n\npublic class EventProducer\n{\n  public event MyEventHandler MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent !\u003d null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent +\u003d HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic class EventProducer\n{\n  public event EventHandler\u0026lt;MyEventArgs\u0026gt; MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent !\u003d null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent +\u003d HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3909",
    "name": "Collections should implement the generic interface",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe NET Framework 2.0 introduced the generic interface \u003ccode\u003eSystem.Collections.Generic.IEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e and it should be preferred over\nthe older, non generic, interfaces.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type implements \u003ccode\u003eSystem.Collections.IEnumerable\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : CollectionBase // Noncompliant\n{\n  public void Add(MyData data)\n  {\n    InnerList.Add(data);\n  }\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections.ObjectModel;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : Collection\u0026lt;MyData\u0026gt;\n{\n  // Implementation...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe NET Framework 2.0 introduced the generic interface \u003ccode\u003eSystem.Collections.Generic.IEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e and it should be preferred over\nthe older, non generic, interfaces.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type implements \u003ccode\u003eSystem.Collections.IEnumerable\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : CollectionBase // Noncompliant\n{\n  public void Add(MyData data)\n  {\n    InnerList.Add(data);\n  }\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections.ObjectModel;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : Collection\u0026lt;MyData\u0026gt;\n{\n  // Implementation...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2701",
    "name": "Literal boolean values should not be used in assertions",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nbool b \u003d true;\nNUnit.Framework.Assert.AreEqual(true, b);\nXunit.Assert.NotSame(true, b);\nMicrosoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(true, b);\nSystem.Diagnostics.Debug.Assert(true);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nbool b \u003d true;\nNUnit.Framework.Assert.AreEqual(true, b);\nXunit.Assert.NotSame(true, b);\nMicrosoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(true, b);\nSystem.Diagnostics.Debug.Assert(true);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1854",
    "name": "Unused assignments should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the analyzed method body contains \u003ccode\u003etry\u003c/code\u003e blocks \u003c/li\u003e\n  \u003cli\u003e a lambda expression captures the local variable \u003c/li\u003e\n  \u003cli\u003e the variable is unused (case covered by Rule {rule:csharpsquid:S1481}) \u003c/li\u003e\n  \u003cli\u003e it’s an initialization to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e,\n  \u003ccode\u003e\"\"\u003c/code\u003e or \u003ccode\u003estring.Empty\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\u003cp\u003eYou can also use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/discards\"\u003ediscards\u003c/a\u003e (rather than a variable)\nto express that result of a method call is ignored on purpose.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint Foo(int y)\n{\n  int x \u003d 100; // Noncompliant: dead store\n  x \u003d 150;     // Noncompliant: dead store\n  x \u003d 200;\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint Foo(int y)\n{\n  int x \u003d 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003eCWE-563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S2583} - Conditionally executed code should be reachable \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S2589} - Boolean expressions should not be gratuitous \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3626} - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and don’t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the program’s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the analyzed method body contains \u003ccode\u003etry\u003c/code\u003e blocks \u003c/li\u003e\n  \u003cli\u003e a lambda expression captures the local variable \u003c/li\u003e\n  \u003cli\u003e the variable is unused (case covered by Rule {rule:csharpsquid:S1481}) \u003c/li\u003e\n  \u003cli\u003e it’s an initialization to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e,\n  \u003ccode\u003e\"\"\u003c/code\u003e or \u003ccode\u003estring.Empty\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\u003cp\u003eYou can also use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/discards\"\u003ediscards\u003c/a\u003e (rather than a variable)\nto express that result of a method call is ignored on purpose.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint Foo(int y)\n{\n  int x \u003d 100; // Noncompliant: dead store\n  x \u003d 150;     // Noncompliant: dead store\n  x \u003d 200;\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint Foo(int y)\n{\n  int x \u003d 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003eCWE-563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S2583} - Conditionally executed code should be reachable \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S2589} - Boolean expressions should not be gratuitous \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3626} - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1858",
    "name": "\"ToString()\" calls should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly\ninvoking \u003ccode\u003eToString()\u003c/code\u003e when the compiler would do it implicitly is also needless code-bloat.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eToString()\u003c/code\u003e is invoked:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e on a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e on a non-\u003ccode\u003estring\u003c/code\u003e operand to concatenation \u003c/li\u003e\n  \u003cli\u003e on an argument to \u003ccode\u003estring.Format\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar s \u003d \"foo\";\nvar t \u003d \"fee fie foe \" + s.ToString();  // Noncompliant\nvar someObject \u003d new object();\nvar u \u003d \"\" + someObject.ToString(); // Noncompliant\nvar v \u003d string.Format(\"{0}\", someObject.ToString()); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar s \u003d \"foo\";\nvar t \u003d \"fee fie foe \" + s;\nvar someObject \u003d new object();\nvar u \u003d \"\" + someObject;\nvar v \u003d string.Format(\"{0}\", someObject);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on value types, where leaving off the \u003ccode\u003eToString()\u003c/code\u003e call would result in automatic boxing.\u003c/p\u003e\n\u003cpre\u003e\nvar v \u003d string.Format(\"{0}\", 1.ToString());\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly\ninvoking \u003ccode\u003eToString()\u003c/code\u003e when the compiler would do it implicitly is also needless code-bloat.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eToString()\u003c/code\u003e is invoked:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e on a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e on a non-\u003ccode\u003estring\u003c/code\u003e operand to concatenation \u003c/li\u003e\n  \u003cli\u003e on an argument to \u003ccode\u003estring.Format\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar s \u003d \"foo\";\nvar t \u003d \"fee fie foe \" + s.ToString();  // Noncompliant\nvar someObject \u003d new object();\nvar u \u003d \"\" + someObject.ToString(); // Noncompliant\nvar v \u003d string.Format(\"{0}\", someObject.ToString()); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar s \u003d \"foo\";\nvar t \u003d \"fee fie foe \" + s;\nvar someObject \u003d new object();\nvar u \u003d \"\" + someObject;\nvar v \u003d string.Format(\"{0}\", someObject);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on value types, where leaving off the \u003ccode\u003eToString()\u003c/code\u003e call would result in automatic boxing.\u003c/p\u003e\n\u003cpre\u003e\nvar v \u003d string.Format(\"{0}\", 1.ToString());\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4070",
    "name": "Non-flags enums should not be marked with \"FlagsAttribute\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule raises an issue when an externally visible enumeration is marked with \u003ccode\u003eFlagsAttribute\u003c/code\u003e and one, or more, of its values is not\na power of 2 or a combination of the other defined values.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    [Flags]\n    public enum Color // Noncompliant, Orange is neither a power of two, nor a combination of any of the defined values\n    {\n        None    \u003d 0,\n        Red     \u003d 1,\n        Orange  \u003d 3,\n        Yellow  \u003d 4\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Color // Compliant - no FlagsAttribute\n    {\n        None \u003d 0,\n        Red \u003d 1,\n        Orange \u003d 3,\n        Yellow \u003d 4\n    }\n\n    [Flags]\n    public enum Days\n    {\n        None \u003d 0,\n        Monday \u003d 1,\n        Tuesday \u003d 2,\n        Wednesday \u003d 4,\n        Thursday \u003d 8,\n        Friday \u003d 16,\n        All \u003d Monday| Tuesday | Wednesday | Thursday | Friday    // Compliant - combination of other values\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when an externally visible enumeration is marked with \u003ccode\u003eFlagsAttribute\u003c/code\u003e and one, or more, of its values is not\na power of 2 or a combination of the other defined values.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    [Flags]\n    public enum Color // Noncompliant, Orange is neither a power of two, nor a combination of any of the defined values\n    {\n        None    \u003d 0,\n        Red     \u003d 1,\n        Orange  \u003d 3,\n        Yellow  \u003d 4\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Color // Compliant - no FlagsAttribute\n    {\n        None \u003d 0,\n        Red \u003d 1,\n        Orange \u003d 3,\n        Yellow \u003d 4\n    }\n\n    [Flags]\n    public enum Days\n    {\n        None \u003d 0,\n        Monday \u003d 1,\n        Tuesday \u003d 2,\n        Wednesday \u003d 4,\n        Thursday \u003d 8,\n        Friday \u003d 16,\n        All \u003d Monday| Tuesday | Wednesday | Thursday | Friday    // Compliant - combination of other values\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5042",
    "name": "Expanding archive files without controlling resource consumption is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme \u003ca href\u003d\"https://en.wikipedia.org/wiki/Data_compression_ratio\"\u003ecompression ratio\u003c/a\u003e, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eArchives to expand are untrusted and:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e There is no validation of the number of entries in the archive. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the ratio between the compressed and uncompressed archive entry. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nusing var zipToOpen \u003d new FileStream(@\"ZipBomb.zip\", FileMode.Open);\nusing var archive \u003d new ZipArchive(zipToOpen, ZipArchiveMode.Read);\nforeach (ZipArchiveEntry entry in archive.Entries)\n{\n  entry.ExtractToFile(\"./output_onlyfortesting.txt\", true); // Sensitive\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. \u003c/li\u003e\n  \u003cli\u003e Define and control the threshold for maximum total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it’s not recommended to recursively expand archives (an entry of an archive could be also an archive). \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint THRESHOLD_ENTRIES \u003d 10000;\nint THRESHOLD_SIZE \u003d 1000000000; // 1 GB\ndouble THRESHOLD_RATIO \u003d 10;\nint totalSizeArchive \u003d 0;\nint totalEntryArchive \u003d 0;\n\nusing var zipToOpen \u003d new FileStream(@\"ZipBomb.zip\", FileMode.Open);\nusing var archive \u003d new ZipArchive(zipToOpen, ZipArchiveMode.Read);\nforeach (ZipArchiveEntry entry in archive.Entries)\n{\n  totalEntryArchive ++;\n\n  using (Stream st \u003d entry.Open())\n  {\n    byte[] buffer \u003d new byte[1024];\n    int totalSizeEntry \u003d 0;\n    int numBytesRead \u003d 0;\n\n    do\n    {\n      numBytesRead \u003d st.Read(buffer, 0, 1024);\n      totalSizeEntry +\u003d numBytesRead;\n      totalSizeArchive +\u003d numBytesRead;\n      double compressionRatio \u003d totalSizeEntry / entry.CompressedLength;\n\n      if(compressionRatio \u0026gt; THRESHOLD_RATIO) {\n        // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n        break;\n      }\n    }\n    while (numBytesRead \u0026gt; 0);\n  }\n\n  if(totalSizeArchive \u0026gt; THRESHOLD_SIZE) {\n      // the uncompressed data size is too much for the application resource capacity\n      break;\n  }\n\n  if(totalEntryArchive \u0026gt; THRESHOLD_ENTRIES) {\n      // too much entries in this archive, can lead to inodes exhaustion of the system\n      break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 -\n  Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/409\"\u003eCWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.bamsoftware.com/hacks/zipbomb/\"\u003ebamsoftware.com\u003c/a\u003e - A better Zip Bomb \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S4060",
    "name": "Non-abstract attributes should be sealed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type inherits from \u003ccode\u003eSystem.Attribute\u003c/code\u003e, is not abstract, and is not sealed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic class MyAttribute: Attribute // Noncompliant\n{\n    public string Name { get; }\n\n    public MyAttribute(string name) \u003d\u0026gt;\n        Name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic sealed class MyAttribute : Attribute\n{\n    public string Name { get; }\n\n    public MyAttribute(string name) \u003d\u0026gt;\n        Name \u003d name;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type inherits from \u003ccode\u003eSystem.Attribute\u003c/code\u003e, is not abstract, and is not sealed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic class MyAttribute: Attribute // Noncompliant\n{\n    public string Name { get; }\n\n    public MyAttribute(string name) \u003d\u0026gt;\n        Name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\npublic sealed class MyAttribute : Attribute\n{\n    public string Name { get; }\n\n    public MyAttribute(string name) \u003d\u0026gt;\n        Name \u003d name;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4061",
    "name": "\"params\" should be used instead of \"varargs\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA method using the \u003ccode\u003eVarArgs\u003c/code\u003e calling convention is not Common Language Specification (CLS) compliant and might not be accessible across\nprogramming languages, while the \u003ccode\u003eparams\u003c/code\u003e keyword works the same way and is CLS compliant.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e type contains a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e method\nthat uses the \u003ccode\u003eVarArgs\u003c/code\u003e calling convention.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(__arglist) // Noncompliant\n        {\n            ArgIterator argumentIterator \u003d new ArgIterator(__arglist);\n            for(int i \u003d 0; i \u0026lt; argumentIterator.GetRemainingCount(); i++)\n            {\n                Console.WriteLine(\n                    __refvalue(argumentIterator.GetNextArg(), string));\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly: CLSCompliant(true)]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(params string[] wordList)\n        {\n            for(int i \u003d 0; i \u0026lt; wordList.Length; i++)\n            {\n                Console.WriteLine(wordList[i]);\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eInterop methods using \u003ccode\u003eVarArgs\u003c/code\u003e calling convention do not raise an issue.\u003c/p\u003e\n\u003cpre\u003e\n[DllImport(\"msvcrt40.dll\")]\npublic static extern int printf(string format, __arglist); // Compliant\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA method using the \u003ccode\u003eVarArgs\u003c/code\u003e calling convention is not Common Language Specification (CLS) compliant and might not be accessible across\nprogramming languages, while the \u003ccode\u003eparams\u003c/code\u003e keyword works the same way and is CLS compliant.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e type contains a \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e method\nthat uses the \u003ccode\u003eVarArgs\u003c/code\u003e calling convention.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(__arglist) // Noncompliant\n        {\n            ArgIterator argumentIterator \u003d new ArgIterator(__arglist);\n            for(int i \u003d 0; i \u0026lt; argumentIterator.GetRemainingCount(); i++)\n            {\n                Console.WriteLine(\n                    __refvalue(argumentIterator.GetNextArg(), string));\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly: CLSCompliant(true)]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(params string[] wordList)\n        {\n            for(int i \u003d 0; i \u0026lt; wordList.Length; i++)\n            {\n                Console.WriteLine(wordList[i]);\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eInterop methods using \u003ccode\u003eVarArgs\u003c/code\u003e calling convention do not raise an issue.\u003c/p\u003e\n\u003cpre\u003e\n[DllImport(\"msvcrt40.dll\")]\npublic static extern int printf(string format, __arglist); // Compliant\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5034",
    "name": "\"ValueTask\" should be consumed correctly",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e provides a value type that wraps a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003eTask\u0026lt;TResult\u0026gt;\u003c/a\u003e and the corresponding \u003ccode\u003eTResult\u003c/code\u003e.\nIt was introduced in .NET Core 2.0 \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask\"\u003eto optimize\nmemory allocation\u003c/a\u003e when functions return their results synchronously.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003eValueTask\u003c/code\u003e and \u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e in the following ways is discouraged as it could result in a race\ncondition:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Calling \u003ccode\u003eawait\u003c/code\u003e multiple times on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. The wrapped object may have been\n  reused by another operation. This differs from \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e, on which you can await multiple times and always\n  get the same result. \u003c/li\u003e\n  \u003cli\u003e Calling \u003ccode\u003eawait\u003c/code\u003e concurrently on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. The underlying object is not thread\n  safe. What’s more, it has the same effect as awaiting multiple times a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. This again\n  differs from \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e, which support concurrent \u003ccode\u003eawait\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e without checking if the operation is completed.\n  \u003ccode\u003eIValueTaskSource\u003c/code\u003e/\u003ccode\u003eIValueTaskSource\u0026lt;TResult\u0026gt;\u003c/code\u003e implementations are not required to block until the operation completes.\n  On the other hand, \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e blocks the call until the task completes. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to use \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e either by calling \u003ccode\u003eawait\u003c/code\u003e on the function\nreturning it, optionally calling \u003ccode\u003eConfigureAwait(false)\u003c/code\u003e on it, or by calling \u003ccode\u003e.AsTask()\u003c/code\u003e on it.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following operations are performed on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e instance\nunless it happens in a loop:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Awaiting the instance multiple times. \u003c/li\u003e\n  \u003cli\u003e Calling \u003ccode\u003eAsTask\u003c/code\u003e multiple times. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e multiple times \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e when the operation has not yet completed \u003c/li\u003e\n  \u003cli\u003e Using of these ways to consume the instance multiple times. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nValueTask\u0026lt;int\u0026gt; vt \u003d ComputeAsync();\nint result \u003d await vt;\nresult \u003d await vt; // Noncompliant, variable is awaited multiple times\n\nint value \u003d ComputeAsync()).GetAwaiter().GetResult(); // Noncompliant, uses GetAwaiter().GetResult() when it\u0027s not known to be done\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nValueTask\u0026lt;int\u0026gt; vt \u003d ComputeAsync();\nint result \u003d await vt;\n\nint value \u003d await ComputeAsync().AsTask();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask\"\u003eValueTask\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1\"\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask\"\u003eUnderstanding the Whys, Whats,\n  and Whens of ValueTask\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e provides a value type that wraps a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task-1\"\u003eTask\u0026lt;TResult\u0026gt;\u003c/a\u003e and the corresponding \u003ccode\u003eTResult\u003c/code\u003e.\nIt was introduced in .NET Core 2.0 \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask\"\u003eto optimize\nmemory allocation\u003c/a\u003e when functions return their results synchronously.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003eValueTask\u003c/code\u003e and \u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e in the following ways is discouraged as it could result in a race\ncondition:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Calling \u003ccode\u003eawait\u003c/code\u003e multiple times on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. The wrapped object may have been\n  reused by another operation. This differs from \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e, on which you can await multiple times and always\n  get the same result. \u003c/li\u003e\n  \u003cli\u003e Calling \u003ccode\u003eawait\u003c/code\u003e concurrently on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. The underlying object is not thread\n  safe. What’s more, it has the same effect as awaiting multiple times a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e. This again\n  differs from \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e, which support concurrent \u003ccode\u003eawait\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e without checking if the operation is completed.\n  \u003ccode\u003eIValueTaskSource\u003c/code\u003e/\u003ccode\u003eIValueTaskSource\u0026lt;TResult\u0026gt;\u003c/code\u003e implementations are not required to block until the operation completes.\n  On the other hand, \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask\u0026lt;TResult\u0026gt;\u003c/code\u003e blocks the call until the task completes. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to use \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e either by calling \u003ccode\u003eawait\u003c/code\u003e on the function\nreturning it, optionally calling \u003ccode\u003eConfigureAwait(false)\u003c/code\u003e on it, or by calling \u003ccode\u003e.AsTask()\u003c/code\u003e on it.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following operations are performed on a \u003ccode\u003eValueTask\u003c/code\u003e/\u003ccode\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/code\u003e instance\nunless it happens in a loop:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Awaiting the instance multiple times. \u003c/li\u003e\n  \u003cli\u003e Calling \u003ccode\u003eAsTask\u003c/code\u003e multiple times. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e multiple times \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003e.Result\u003c/code\u003e or \u003ccode\u003e.GetAwaiter().GetResult()\u003c/code\u003e when the operation has not yet completed \u003c/li\u003e\n  \u003cli\u003e Using of these ways to consume the instance multiple times. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nValueTask\u0026lt;int\u0026gt; vt \u003d ComputeAsync();\nint result \u003d await vt;\nresult \u003d await vt; // Noncompliant, variable is awaited multiple times\n\nint value \u003d ComputeAsync()).GetAwaiter().GetResult(); // Noncompliant, uses GetAwaiter().GetResult() when it\u0027s not known to be done\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nValueTask\u0026lt;int\u0026gt; vt \u003d ComputeAsync();\nint result \u003d await vt;\n\nint value \u003d await ComputeAsync().AsTask();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask\"\u003eValueTask\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1\"\u003eValueTask\u0026lt;TResult\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask\"\u003eUnderstanding the Whys, Whats,\n  and Whens of ValueTask\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1905",
    "name": "Redundant casts should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCasting expressions are utilized to convert one data type to another, such as transforming an integer into a string. This is especially crucial in\nstrongly typed languages like C, C++, C#, Java, Python, and others.\u003c/p\u003e\n\u003cp\u003eHowever, there are instances where casting expressions are not needed. These include situations like:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e casting a variable to its own type \u003c/li\u003e\n  \u003cli\u003e casting a subclass to a parent class (in the case of polymorphism) \u003c/li\u003e\n  \u003cli\u003e the programming language is capable of automatically converting the given type to another \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese scenarios are considered unnecessary casting expressions. They can complicate the code and make it more difficult to understand, without\noffering any advantages.\u003c/p\u003e\n\u003cp\u003eAs a result, it’s generally advised to avoid unnecessary casting expressions. Instead, rely on the language’s type system to ensure type safety and\ncode clarity.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIssues are not raised against the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions\"\u003edefault literal\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix your code remove the unnecessary casting expression.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Example(int i)\n{\n    return (int) (i + 42); // Noncompliant\n}\n\npublic IEnumerable\u0026lt;int\u0026gt; ExampleCollection(IEnumerable\u0026lt;int\u0026gt; coll)\n{\n    return coll.Reverse().OfType\u0026lt;int\u0026gt;(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int Example(int i)\n{\n    return i + 42;\n}\n\npublic IEnumerable\u0026lt;int\u0026gt; ExampleCollection(IEnumerable\u0026lt;int\u0026gt; coll)\n{\n    return coll.Reverse();\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nbool b \u003d (bool)default; // Doesn\u0027t raise an issue\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions\"\u003eCasting and type\n  conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_conversion\"\u003eType Conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Strong_and_weak_typing\"\u003eStrong and Weak Typing\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\"\u003e Polymorphism (Computer Science)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCasting expressions are utilized to convert one data type to another, such as transforming an integer into a string. This is especially crucial in\nstrongly typed languages like C, C++, C#, Java, Python, and others.\u003c/p\u003e\n\u003cp\u003eHowever, there are instances where casting expressions are not needed. These include situations like:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e casting a variable to its own type \u003c/li\u003e\n  \u003cli\u003e casting a subclass to a parent class (in the case of polymorphism) \u003c/li\u003e\n  \u003cli\u003e the programming language is capable of automatically converting the given type to another \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese scenarios are considered unnecessary casting expressions. They can complicate the code and make it more difficult to understand, without\noffering any advantages.\u003c/p\u003e\n\u003cp\u003eAs a result, it’s generally advised to avoid unnecessary casting expressions. Instead, rely on the language’s type system to ensure type safety and\ncode clarity.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIssues are not raised against the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions\"\u003edefault literal\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix your code remove the unnecessary casting expression.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int Example(int i)\n{\n    return (int) (i + 42); // Noncompliant\n}\n\npublic IEnumerable\u0026lt;int\u0026gt; ExampleCollection(IEnumerable\u0026lt;int\u0026gt; coll)\n{\n    return coll.Reverse().OfType\u0026lt;int\u0026gt;(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int Example(int i)\n{\n    return i + 42;\n}\n\npublic IEnumerable\u0026lt;int\u0026gt; ExampleCollection(IEnumerable\u0026lt;int\u0026gt; coll)\n{\n    return coll.Reverse();\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nbool b \u003d (bool)default; // Doesn\u0027t raise an issue\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions\"\u003eCasting and type\n  conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_conversion\"\u003eType Conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Strong_and_weak_typing\"\u003eStrong and Weak Typing\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\"\u003e Polymorphism (Computer Science)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4069",
    "name": "Operator overloads should have named alternatives",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOperator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another\nlanguage you need to provide an alternate named method following the convention:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOperator\u003c/th\u003e\n      \u003cth\u003eMethod Name\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eAdd\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eBitwiseAnd\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eBitwiseOr\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eDivide\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u003d\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eEquals\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eXor\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eEquals\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eLogicalNot\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMod\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e*\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMultiply\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eOnesComplement\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSubtract\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e (unary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eNegate\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e (unary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ePlus\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis rule raises an issue when there is an operator overload without the expected named alternative method.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise an issue when the class implementing the comparison operators \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e and\n\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e contains a method named \u003ccode\u003eCompareTo\u003c/code\u003e.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOperator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another\nlanguage you need to provide an alternate named method following the convention:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOperator\u003c/th\u003e\n      \u003cth\u003eMethod Name\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eAdd\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eBitwiseAnd\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eBitwiseOr\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eDivide\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u003d\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eEquals\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eXor\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eEquals\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eCompare\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eLogicalNot\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMod\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e*\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMultiply\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eOnesComplement\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e (binary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSubtract\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e-\u003c/code\u003e (unary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eNegate\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e (unary)\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ePlus\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis rule raises an issue when there is an operator overload without the expected named alternative method.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise an issue when the class implementing the comparison operators \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e and\n\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e contains a method named \u003ccode\u003eCompareTo\u003c/code\u003e.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1939",
    "name": "Inheritance list should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn inheritance list entry is redundant if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003ccode\u003eObject\u003c/code\u003e - all classes extend \u003ccode\u003eObject\u003c/code\u003e implicitly. \u003c/li\u003e\n  \u003cli\u003e It is \u003ccode\u003eint\u003c/code\u003e for an \u003ccode\u003eenum\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It is a base class of another listed inheritance. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch redundant declarations should be removed because they needlessly clutter the code and can be confusing.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass : Object  // Noncompliant\n\nenum MyEnum : int  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n\nenum MyEnum\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn inheritance list entry is redundant if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003ccode\u003eObject\u003c/code\u003e - all classes extend \u003ccode\u003eObject\u003c/code\u003e implicitly. \u003c/li\u003e\n  \u003cli\u003e It is \u003ccode\u003eint\u003c/code\u003e for an \u003ccode\u003eenum\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It is a base class of another listed inheritance. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch redundant declarations should be removed because they needlessly clutter the code and can be confusing.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass : Object  // Noncompliant\n\nenum MyEnum : int  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n\nenum MyEnum\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1821",
    "name": "\"switch\" statements should not be nested",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1944",
    "name": "Invalid casts should be avoided",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA cast is an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eexplicit\nconversion\u003c/a\u003e, which is a way to tell the compiler the intent to convert from one type to another.\u003c/p\u003e\n\u003cpre\u003e\nvoid Method(object value)\n{\n    int i;\n    i \u003d (int)value;   // Casting (explicit conversion) from float to int\n}\n\u003c/pre\u003e\n\u003cp\u003eIn most cases, the compiler will be able to catch invalid casts between incompatible value types or reference types.\u003c/p\u003e\n\u003cp\u003eHowever, the compiler will not be able to detect invalid casts to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\"\u003einterfaces\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInvalid casts will lead to unexpected behaviors or runtime errors such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported if the interface has no implementing class in the assembly.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo prevent an \u003ccode\u003eInvalidCastException\u003c/code\u003e from raising during an explicit conversion, it is recommended to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003e\u003ccode\u003eas\u003c/code\u003e operator\u003c/a\u003e.\nWhen the conversion is not possible, the \u003ccode\u003eas\u003c/code\u003e operator returns \u003ccode\u003enull\u003c/code\u003e and will never raise an exception.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class AnotherClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var another \u003d new AnotherClass();\n    var x \u003d (IMyInterface)another;     // Noncompliant: InvalidCastException is being thrown\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class AnotherClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var another \u003d new AnotherClass();\n    var x \u003d another as IMyInterface;    // Compliant: but will always be null\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eCasting and\n  type conversions - Explicit conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003eType-testing operators and cast\n  expressions\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator\"\u003e\u003ccode\u003eis\u003c/code\u003e\n      operator\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003e\u003ccode\u003eas\u003c/code\u003e\n      operator\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions\"\u003eConversions -\n  Explicit conversions in C#\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#1035-explicit-reference-conversions\"\u003eConversions - Explicit reference conversions in C#\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/588\"\u003eCWE-588 - Attempt to Access Child of a Non-structure Pointer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704\"\u003eCWE-704 - Incorrect Type Conversion or Cast\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA cast is an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eexplicit\nconversion\u003c/a\u003e, which is a way to tell the compiler the intent to convert from one type to another.\u003c/p\u003e\n\u003cpre\u003e\nvoid Method(object value)\n{\n    int i;\n    i \u003d (int)value;   // Casting (explicit conversion) from float to int\n}\n\u003c/pre\u003e\n\u003cp\u003eIn most cases, the compiler will be able to catch invalid casts between incompatible value types or reference types.\u003c/p\u003e\n\u003cp\u003eHowever, the compiler will not be able to detect invalid casts to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\"\u003einterfaces\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInvalid casts will lead to unexpected behaviors or runtime errors such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported if the interface has no implementing class in the assembly.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo prevent an \u003ccode\u003eInvalidCastException\u003c/code\u003e from raising during an explicit conversion, it is recommended to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003e\u003ccode\u003eas\u003c/code\u003e operator\u003c/a\u003e.\nWhen the conversion is not possible, the \u003ccode\u003eas\u003c/code\u003e operator returns \u003ccode\u003enull\u003c/code\u003e and will never raise an exception.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class AnotherClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var another \u003d new AnotherClass();\n    var x \u003d (IMyInterface)another;     // Noncompliant: InvalidCastException is being thrown\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class AnotherClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var another \u003d new AnotherClass();\n    var x \u003d another as IMyInterface;    // Compliant: but will always be null\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eCasting and\n  type conversions - Explicit conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast\"\u003eType-testing operators and cast\n  expressions\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator\"\u003e\u003ccode\u003eis\u003c/code\u003e\n      operator\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003e\u003ccode\u003eas\u003c/code\u003e\n      operator\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#103-explicit-conversions\"\u003eConversions -\n  Explicit conversions in C#\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#1035-explicit-reference-conversions\"\u003eConversions - Explicit reference conversions in C#\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/588\"\u003eCWE-588 - Attempt to Access Child of a Non-structure Pointer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704\"\u003eCWE-704 - Incorrect Type Conversion or Cast\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1940",
    "name": "Boolean checks should not be inverted",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nbool b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nbool b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nbool b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nbool b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3869",
    "name": "\"SafeHandle.DangerousGetHandle\" should not be called",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method poses significant risks and should be used carefully. This method carries the inherent danger\nof potentially returning an invalid handle, which can result in resource leaks and security vulnerabilities. Although it is technically possible to\nutilize this method without encountering issues, doing so correctly requires a high level of expertise. Therefore, it is recommended to avoid using\nthis method altogether.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method is potentially prone to leaks and vulnerabilities due to its nature and usage. Here are a few\nreasons why:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eInvalid handles\u003c/strong\u003e: the method retrieves the raw handle value without performing any validation or safety checks. This means that\n  the method can return a handle that is no longer valid or has been closed, leading to undefined behavior or errors when attempting to use it. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eResource leaks\u003c/strong\u003e: by directly accessing the handle without the proper safeguards and cleanup provided by the\n  \u003ccode\u003eSafeHandle\u003c/code\u003e class, there is an increased risk of failing to dispose system resources correctly. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSecurity vulnerabilities\u003c/strong\u003e: when the handle is interacting with sensitive resources (e.g. file handles, process handles) using\n  \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e without proper validation can lead to security vulnerabilities that can be exploited by an attacker.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n    System.Reflection.FieldInfo fieldInfo \u003d ...;\n    SafeHandle handle \u003d (SafeHandle)fieldInfo.GetValue(rKey);\n    IntPtr dangerousHandle \u003d handle.DangerousGetHandle(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle.dangerousgethandle\"\u003eSafeHandle.DangerousGetHandle\n  Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/8396923/why-is-safehandle-dangerousgethandle-dangerous\"\u003eWhy is SafeHandle.DangerousGetHandle()\n  \"Dangerous\"? - Stackoverflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method poses significant risks and should be used carefully. This method carries the inherent danger\nof potentially returning an invalid handle, which can result in resource leaks and security vulnerabilities. Although it is technically possible to\nutilize this method without encountering issues, doing so correctly requires a high level of expertise. Therefore, it is recommended to avoid using\nthis method altogether.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method is potentially prone to leaks and vulnerabilities due to its nature and usage. Here are a few\nreasons why:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eInvalid handles\u003c/strong\u003e: the method retrieves the raw handle value without performing any validation or safety checks. This means that\n  the method can return a handle that is no longer valid or has been closed, leading to undefined behavior or errors when attempting to use it. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eResource leaks\u003c/strong\u003e: by directly accessing the handle without the proper safeguards and cleanup provided by the\n  \u003ccode\u003eSafeHandle\u003c/code\u003e class, there is an increased risk of failing to dispose system resources correctly. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSecurity vulnerabilities\u003c/strong\u003e: when the handle is interacting with sensitive resources (e.g. file handles, process handles) using\n  \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e without proper validation can lead to security vulnerabilities that can be exploited by an attacker.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n    System.Reflection.FieldInfo fieldInfo \u003d ...;\n    SafeHandle handle \u003d (SafeHandle)fieldInfo.GetValue(rKey);\n    IntPtr dangerousHandle \u003d handle.DangerousGetHandle(); // Noncompliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle.dangerousgethandle\"\u003eSafeHandle.DangerousGetHandle\n  Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/8396923/why-is-safehandle-dangerousgethandle-dangerous\"\u003eWhy is SafeHandle.DangerousGetHandle()\n  \"Dangerous\"? - Stackoverflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "leak",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1206",
    "name": "\"Equals(Object)\" and \"GetHashCode()\" should be overridden in pairs",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSuppose you override \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals\u003c/a\u003e in a type, you must also\noverride \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eObject.GetHashCode\u003c/a\u003e. If two objects are equal according\nto the \u003ccode\u003eEquals\u003c/code\u003e method, then calling \u003ccode\u003eGetHashCode\u003c/code\u003e on each of them must yield the same integer. If this is not the case, many\ncollections, such as a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003eHashtable\u003c/a\u003e or a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e won’t handle class instances correctly.\u003c/p\u003e\n\u003cp\u003eIn order to not have unpredictable behavior, \u003ccode\u003eEquals\u003c/code\u003e and \u003ccode\u003eGetHashCode\u003c/code\u003e should be either both inherited, or both\noverridden.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhen you override \u003ccode\u003eEquals\u003c/code\u003e then you have to also override \u003ccode\u003eGetHashCode\u003c/code\u003e. You have to override both of them, or simply inherit\nthem.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass   // Noncompliant: should also override GetHashCode\n{\n    public override bool Equals(object obj)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    public override bool Equals(object obj)\n    {\n        // ...\n    }\n\n    public override int GetHashCode()\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/581\"\u003eCWE-581 - Object Model Violation: Just One of Equals and Hashcode Defined\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eObject.GetHashCode Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003eHashtable class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSuppose you override \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals\u003c/a\u003e in a type, you must also\noverride \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eObject.GetHashCode\u003c/a\u003e. If two objects are equal according\nto the \u003ccode\u003eEquals\u003c/code\u003e method, then calling \u003ccode\u003eGetHashCode\u003c/code\u003e on each of them must yield the same integer. If this is not the case, many\ncollections, such as a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003eHashtable\u003c/a\u003e or a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e won’t handle class instances correctly.\u003c/p\u003e\n\u003cp\u003eIn order to not have unpredictable behavior, \u003ccode\u003eEquals\u003c/code\u003e and \u003ccode\u003eGetHashCode\u003c/code\u003e should be either both inherited, or both\noverridden.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhen you override \u003ccode\u003eEquals\u003c/code\u003e then you have to also override \u003ccode\u003eGetHashCode\u003c/code\u003e. You have to override both of them, or simply inherit\nthem.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass   // Noncompliant: should also override GetHashCode\n{\n    public override bool Equals(object obj)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    public override bool Equals(object obj)\n    {\n        // ...\n    }\n\n    public override int GetHashCode()\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/581\"\u003eCWE-581 - Object Model Violation: Just One of Equals and Hashcode Defined\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eObject.GetHashCode Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\u003eHashtable class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3626",
    "name": "Jump statements should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJump statements, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003eyield break\u003c/code\u003e, \u003ccode\u003egoto\u003c/code\u003e, and \u003ccode\u003econtinue\u003c/code\u003e let you change the default\nflow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid Foo()\n{\n  goto A; // Noncompliant\n  A:\n  while (condition1)\n  {\n    if (condition2)\n    {\n      continue; // Noncompliant\n    }\n    else\n    {\n      DoTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid Foo()\n{\n  while (condition1)\n  {\n    if (!condition2)\n    {\n      DoTheThing();\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJump statements, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003eyield break\u003c/code\u003e, \u003ccode\u003egoto\u003c/code\u003e, and \u003ccode\u003econtinue\u003c/code\u003e let you change the default\nflow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid Foo()\n{\n  goto A; // Noncompliant\n  A:\n  while (condition1)\n  {\n    if (condition2)\n    {\n      continue; // Noncompliant\n    }\n    else\n    {\n      DoTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid Foo()\n{\n  while (condition1)\n  {\n    if (!condition2)\n    {\n      DoTheThing();\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1449",
    "name": "Culture should be specified for \"string\" operations",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003estring.ToLower()\u003c/code\u003e, \u003ccode\u003eToUpper\u003c/code\u003e, \u003ccode\u003eIndexOf\u003c/code\u003e, \u003ccode\u003eLastIndexOf\u003c/code\u003e, and \u003ccode\u003eCompare\u003c/code\u003e are all\nculture-dependent, as are some (floating point number and \u003ccode\u003eDateTime\u003c/code\u003e-related) calls to \u003ccode\u003eToString\u003c/code\u003e. Fortunately, all have\nvariants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default\nculture, possibly creating problems with international characters.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estring.CompareTo()\u003c/code\u003e is also culture specific, but has no overload that takes a culture information, so instead it’s better to use\n\u003ccode\u003eCompareOrdinal\u003c/code\u003e, or \u003ccode\u003eCompare\u003c/code\u003e with culture.\u003c/p\u003e\n\u003cp\u003eCalls without a culture may work fine in the system’s \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLower(); //Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLower(CultureInfo.InvariantCulture);\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLowerInvariant();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003estring.ToLower()\u003c/code\u003e, \u003ccode\u003eToUpper\u003c/code\u003e, \u003ccode\u003eIndexOf\u003c/code\u003e, \u003ccode\u003eLastIndexOf\u003c/code\u003e, and \u003ccode\u003eCompare\u003c/code\u003e are all\nculture-dependent, as are some (floating point number and \u003ccode\u003eDateTime\u003c/code\u003e-related) calls to \u003ccode\u003eToString\u003c/code\u003e. Fortunately, all have\nvariants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default\nculture, possibly creating problems with international characters.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estring.CompareTo()\u003c/code\u003e is also culture specific, but has no overload that takes a culture information, so instead it’s better to use\n\u003ccode\u003eCompareOrdinal\u003c/code\u003e, or \u003ccode\u003eCompare\u003c/code\u003e with culture.\u003c/p\u003e\n\u003cp\u003eCalls without a culture may work fine in the system’s \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLower(); //Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLower(CultureInfo.InvariantCulture);\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvar lowered \u003d someString.ToLowerInvariant();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3981",
    "name": "Collection sizes and array length comparisons should make sense",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(collection.Count \u0026gt;\u003d 0){...} // Noncompliant: always true\n\nif(array.Length \u0026gt;\u003d 0){...} // Noncompliant: always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(enumerable.Count() \u0026lt; 0){...} // Noncompliant: always false\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(collection.Count \u0026gt;\u003d 0){...} // Noncompliant: always true\n\nif(array.Length \u0026gt;\u003d 0){...} // Noncompliant: always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif(enumerable.Count() \u0026lt; 0){...} // Noncompliant: always false\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1200",
    "name": "Classes should not be coupled to too many other classes",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf a class has more than one responsibility, then the responsibilities become coupled.\u003c/p\u003e\n  \u003cp\u003eChanges to one responsibility may impair or inhibit the class\u0027 ability to meet the others.\u003c/p\u003e\n  \u003cp\u003eThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\u003c/p\u003e\n\u003cp\u003eNested classes dependencies are not counted as dependencies of the outer class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith a threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo    // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n{\n  private T1 a1;    // Foo is coupled to T1\n  private T2 a2;    // Foo is coupled to T2\n  private T3 a3;    // Foo is coupled to T3\n\n  public T4 Compute(T5 a, T6 b)    // Foo is coupled to T4, T5 and T6\n  {\n    T7 result \u003d a.Process(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar    // Compliant - Bar depends on 2 classes: T8 and T9\n  {\n    public T8 a8;\n    public T9 a9;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf a class has more than one responsibility, then the responsibilities become coupled.\u003c/p\u003e\n  \u003cp\u003eChanges to one responsibility may impair or inhibit the class\u0027 ability to meet the others.\u003c/p\u003e\n  \u003cp\u003eThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\u003c/p\u003e\n\u003cp\u003eNested classes dependencies are not counted as dependencies of the outer class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith a threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo    // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n{\n  private T1 a1;    // Foo is coupled to T1\n  private T2 a2;    // Foo is coupled to T2\n  private T3 a3;    // Foo is coupled to T3\n\n  public T4 Compute(T5 a, T6 b)    // Foo is coupled to T4, T5 and T6\n  {\n    T7 result \u003d a.Process(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar    // Compliant - Bar depends on 2 classes: T8 and T9\n  {\n    public T8 a8;\n    public T9 a9;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of types a single type is allowed to depend upon",
        "defaultValue": "30",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "30"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3984",
    "name": "Exceptions should not be created without being thrown",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating a new \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e without actually throwing does\nnot achieve the intended purpose.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (x \u0026lt; 0)\n{\n    new ArgumentException(\"x must be nonnegative\");\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure to throw the \u003ccode\u003eException\u003c/code\u003e with a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\nstatement\u003c/a\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (x \u0026lt; 0)\n{\n    throw new ArgumentException(\"x must be nonnegative\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements\"\u003eException-handling statements -\n  \u003ccode\u003ethrow\u003c/code\u003e, \u003ccode\u003etry-catch\u003c/code\u003e, \u003ccode\u003etry-finally\u003c/code\u003e, and \u003ccode\u003etry-catch-finally\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating a new \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e without actually throwing does\nnot achieve the intended purpose.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (x \u0026lt; 0)\n{\n    new ArgumentException(\"x must be nonnegative\");\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure to throw the \u003ccode\u003eException\u003c/code\u003e with a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\nstatement\u003c/a\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (x \u0026lt; 0)\n{\n    throw new ArgumentException(\"x must be nonnegative\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003e\u003ccode\u003eException\u003c/code\u003e Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements\"\u003eException-handling statements -\n  \u003ccode\u003ethrow\u003c/code\u003e, \u003ccode\u003etry-catch\u003c/code\u003e, \u003ccode\u003etry-finally\u003c/code\u003e, and \u003ccode\u003etry-catch-finally\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4830",
    "name": "Server certificates should be verified during SSL/TLS connections",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank’s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eIn the following example, the callback change impacts the entirety of HTTP requests made by the application.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by overriding \u003ccode\u003eServerCertificateValidationCallback\u003c/code\u003e with an empty implementation. It is highly\nrecommended to use the original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nusing System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +\u003d\n\t (sender, certificate, chain, errors) \u003d\u0026gt; {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient \u003d new HttpClient();\n    HttpResponseMessage response \u003d httpClient.GetAsync(\"https://example.com\").Result;\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eMobile Top 10 2016 Category M3 - Insecure\n  Communication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec\n  Verification Standard - Network Communication Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eCWE-295 - Improper Certificate Validation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank’s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn the following example, the callback change impacts the entirety of HTTP requests made by the application.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by overriding \u003ccode\u003eServerCertificateValidationCallback\u003c/code\u003e with an empty implementation. It is highly\nrecommended to use the original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nusing System.Net;\nusing System.Net.Http;\n\npublic static void connect()\n{\n    ServicePointManager.ServerCertificateValidationCallback +\u003d\n\t (sender, certificate, chain, errors) \u003d\u0026gt; {\n\t     return true; // Noncompliant\n    };\n\n    HttpClient httpClient \u003d new HttpClient();\n    HttpResponseMessage response \u003d httpClient.GetAsync(\"https://example.com\").Result;\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eMobile Top 10 2016 Category M3 - Insecure\n  Communication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec\n  Verification Standard - Network Communication Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eCWE-295 - Improper Certificate Validation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy",
      "ssl"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3971",
    "name": "\"GC.SuppressFinalize\" should not be called",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e requests that the system not call the finalizer for the specified object. This should only be done when\nimplementing \u003ccode\u003eDispose\u003c/code\u003e as part of the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eDispose Pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e is called outside that pattern.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e requests that the system not call the finalizer for the specified object. This should only be done when\nimplementing \u003ccode\u003eDispose\u003c/code\u003e as part of the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eDispose Pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e is called outside that pattern.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2761",
    "name": "Doubled prefix operators \"!!\" and \"~~\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe repetition of a prefix operator (\u003ccode\u003e!\u003c/code\u003e, or \u003ccode\u003e~\u003c/code\u003e) is usually a typo. The second operator invalidates the first one.\u003c/p\u003e\n\u003cpre\u003e\nint v1 \u003d 0;\nbool v2 \u003d false;\n\nvar v3 \u003d !!v1; // Noncompliant: equivalent to \"v1\"\nvar v4 \u003d ~~v2; // Noncompliant: equivalent to \"v2\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe repetition of a prefix operator (\u003ccode\u003e!\u003c/code\u003e, or \u003ccode\u003e~\u003c/code\u003e) is usually a typo. The second operator invalidates the first one.\u003c/p\u003e\n\u003cpre\u003e\nint v1 \u003d 0;\nbool v2 \u003d false;\n\nvar v3 \u003d !!v1; // Noncompliant: equivalent to \"v1\"\nvar v4 \u003d ~~v2; // Noncompliant: equivalent to \"v2\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2760",
    "name": "Sequential tests should not check the same condition",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should\nhave been checked in the second test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n}\nif (a \u003d\u003d b) // Noncompliant; is this really what was intended?\n{\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n}\nif (b \u003d\u003d c)\n{\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should\nhave been checked in the second test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n}\nif (a \u003d\u003d b) // Noncompliant; is this really what was intended?\n{\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b)\n{\n  doTheThing(b);\n}\nif (b \u003d\u003d c)\n{\n  doTheThing(c);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3973",
    "name": "A conditionally executed single line should be denoted by indentation",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the line immediately after conditional statements has neither curly braces nor indentation, the intent of the code is unclear and perhaps not\nexecuted as expected. Additionally, such code is confusing to maintainers.\u003c/p\u003e\n\u003cp\u003eThe rule will check the line indentation after the following conditional statements:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eif and if-else\n  statements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003efor\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eforeach\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-do-statement\"\u003edo statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-while-statement\"\u003ewhile\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\nDoTheThing();\nDoTheOtherThing(); // Was the intent to call this function unconditionally?\n\u003c/pre\u003e\n\u003cp\u003eIt becomes even more confusing and bug-prone if lines get commented out.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n//   DoTheThing();\nDoTheOtherThing(); // Was the intent to call this function conditionally?\n\u003c/pre\u003e\n\u003cp\u003eIndentation alone or together with curly braces makes the intent clear.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  DoTheThing();\nDoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition)\n{\n  DoTheThing();\n}\nDoTheOtherThing(); // Clear intent to call this function unconditionally\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the line immediately after conditional statements has neither curly braces nor indentation, the intent of the code is unclear and perhaps not\nexecuted as expected. Additionally, such code is confusing to maintainers.\u003c/p\u003e\n\u003cp\u003eThe rule will check the line indentation after the following conditional statements:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eif and if-else\n  statements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003efor\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eforeach\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-do-statement\"\u003edo statement\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-while-statement\"\u003ewhile\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\nDoTheThing();\nDoTheOtherThing(); // Was the intent to call this function unconditionally?\n\u003c/pre\u003e\n\u003cp\u003eIt becomes even more confusing and bug-prone if lines get commented out.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n//   DoTheThing();\nDoTheOtherThing(); // Was the intent to call this function conditionally?\n\u003c/pre\u003e\n\u003cp\u003eIndentation alone or together with curly braces makes the intent clear.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  DoTheThing();\nDoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition)\n{\n  DoTheThing();\n}\nDoTheOtherThing(); // Clear intent to call this function unconditionally\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3610",
    "name": "Nullable type comparison should not be redundant",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003eGetType()\u003c/a\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\"\u003enullable value type\u003c/a\u003e object returns\nthe underlying value type. Therefore, comparing the returned \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e\nobject to \u003ccode\u003etypeof(Nullable\u0026lt;SomeType\u0026gt;)\u003c/code\u003e will either throw an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e or the result will always be\n\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e and can be known at compile time.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid DoChecks\u0026lt;T\u0026gt;(Nullable\u0026lt;T\u0026gt; value) where T : struct\n{\n    bool areEqual \u003d value.GetType() \u003d\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: always false\n    bool areNotEqual \u003d value.GetType() !\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: always true\n\n    Nullable\u0026lt;int\u0026gt; nullable \u003d null;\n    bool nullComparison \u003d nullable.GetType() !\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: throws NullReferenceException\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid DoChecks\u0026lt;T\u0026gt;(Nullable\u0026lt;T\u0026gt; value) where T : struct\n{\n    bool areEqual \u003d value.GetType() \u003d\u003d typeof(int); // Compliant: can be true or false\n    bool areNotEqual \u003d value.GetType() !\u003d typeof(int); // Compliant: can be true or false\n\n    Nullable\u0026lt;int\u0026gt; nullable \u003d null;\n    bool nullComparison \u003d nullable is not null \u0026amp;\u0026amp; nullable.GetType() \u003d\u003d typeof(int); // Compliant: does not throw NullReferenceException\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003eObject.GetType Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\"\u003eNullable\n  value types (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003eGetType()\u003c/a\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\"\u003enullable value type\u003c/a\u003e object returns\nthe underlying value type. Therefore, comparing the returned \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e\nobject to \u003ccode\u003etypeof(Nullable\u0026lt;SomeType\u0026gt;)\u003c/code\u003e will either throw an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e or the result will always be\n\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e and can be known at compile time.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid DoChecks\u0026lt;T\u0026gt;(Nullable\u0026lt;T\u0026gt; value) where T : struct\n{\n    bool areEqual \u003d value.GetType() \u003d\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: always false\n    bool areNotEqual \u003d value.GetType() !\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: always true\n\n    Nullable\u0026lt;int\u0026gt; nullable \u003d null;\n    bool nullComparison \u003d nullable.GetType() !\u003d typeof(Nullable\u0026lt;int\u0026gt;); // Noncompliant: throws NullReferenceException\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid DoChecks\u0026lt;T\u0026gt;(Nullable\u0026lt;T\u0026gt; value) where T : struct\n{\n    bool areEqual \u003d value.GetType() \u003d\u003d typeof(int); // Compliant: can be true or false\n    bool areNotEqual \u003d value.GetType() !\u003d typeof(int); // Compliant: can be true or false\n\n    Nullable\u0026lt;int\u0026gt; nullable \u003d null;\n    bool nullComparison \u003d nullable is not null \u0026amp;\u0026amp; nullable.GetType() \u003d\u003d typeof(int); // Compliant: does not throw NullReferenceException\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003eObject.GetType Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\"\u003eNullable\n  value types (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3972",
    "name": "Conditionals should start on new lines",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePlacing an \u003ccode\u003eif\u003c/code\u003e statement on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, or\n\u003ccode\u003eelse if\u003c/code\u003e block can lead to confusion and potential errors. It may indicate a missing \u003ccode\u003eelse\u003c/code\u003e statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003cp\u003eThe following code snippet is confusing:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEither the two conditions are unrelated and they should be visually separated:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr they were supposed to be exclusive and you should use \u003ccode\u003eelse if\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eIf statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePlacing an \u003ccode\u003eif\u003c/code\u003e statement on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, or\n\u003ccode\u003eelse if\u003c/code\u003e block can lead to confusion and potential errors. It may indicate a missing \u003ccode\u003eelse\u003c/code\u003e statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003cp\u003eThe following code snippet is confusing:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEither the two conditions are unrelated and they should be visually separated:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr they were supposed to be exclusive and you should use \u003ccode\u003eelse if\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement\"\u003eIf statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1313",
    "name": "Using hardcoded IP addresses is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non-routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID) \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the range 2001:db8::/32, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e It’s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar ip \u003d \"192.168.12.42\";\nvar address \u003d IPAddress.Parse(ip);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDon’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar ip \u003d ConfigurationManager.AppSettings[\"myapplication.ip\"];\nvar address \u003d IPAddress.Parse(ip);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S1226",
    "name": "Method parameters, caught exceptions and foreach variables\u0027 initial values should not be ignored",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as \u003ccode\u003efinal\u003c/code\u003e, then at least read\nbefore reassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoTheThing(string str, int i, List\u0026lt;string\u0026gt; strings)\n{\n  str \u003d i.ToString(i);  // Noncompliant\n\n  foreach (var s in strings)\n  {\n    s \u003d \"hello world\";  // Noncompliant\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as \u003ccode\u003efinal\u003c/code\u003e, then at least read\nbefore reassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoTheThing(string str, int i, List\u0026lt;string\u0026gt; strings)\n{\n  str \u003d i.ToString(i);  // Noncompliant\n\n  foreach (var s in strings)\n  {\n    s \u003d \"hello world\";  // Noncompliant\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3889",
    "name": "\"Thread.Resume\" and \"Thread.Suspend\" should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eThread.Suspend\u003c/code\u003e and \u003ccode\u003eThread.Resume\u003c/code\u003e can give unpredictable results, and both methods have been deprecated. Indeed, if\n\u003ccode\u003eThread.Suspend\u003c/code\u003e is not used very carefully, a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e can be suspended while\nholding a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e, thus leading to a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlock\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are other synchronization mechanisms that are safer and should be used instead, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMonitor\u003c/code\u003e provides a mechanism that synchronizes access to objects. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eMutex\u003c/code\u003e provides a mechanism that synchronizes interprocess access to a protected resource. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSemaphore\u003c/code\u003e provides a mechanism that allows limiting the number of threads that have access to a protected resources concurrently.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eEvents\u003c/code\u003e enable a class to notify others when something of interest occurs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx\"\u003eThread.Resume Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v\u003dvs.110).aspx\"\u003eThread.Suspend Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor?view\u003dnet-7.0\"\u003eMonitor Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex?view\u003dnet-7.0\"\u003eMutex Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view\u003dnet-7.0\"\u003eSemaphore Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents Programming Guide\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003elock statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stephencleary.com/book/\"\u003eConcurrency in C# Cookbook - Stephen Cleary\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eThread.Suspend\u003c/code\u003e and \u003ccode\u003eThread.Resume\u003c/code\u003e can give unpredictable results, and both methods have been deprecated. Indeed, if\n\u003ccode\u003eThread.Suspend\u003c/code\u003e is not used very carefully, a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e can be suspended while\nholding a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e, thus leading to a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlock\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are other synchronization mechanisms that are safer and should be used instead, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMonitor\u003c/code\u003e provides a mechanism that synchronizes access to objects. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eMutex\u003c/code\u003e provides a mechanism that synchronizes interprocess access to a protected resource. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSemaphore\u003c/code\u003e provides a mechanism that allows limiting the number of threads that have access to a protected resources concurrently.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eEvents\u003c/code\u003e enable a class to notify others when something of interest occurs. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx\"\u003eThread.Resume Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v\u003dvs.110).aspx\"\u003eThread.Suspend Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor?view\u003dnet-7.0\"\u003eMonitor Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex?view\u003dnet-7.0\"\u003eMutex Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view\u003dnet-7.0\"\u003eSemaphore Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents Programming Guide\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003elock statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stephencleary.com/book/\"\u003eConcurrency in C# Cookbook - Stephen Cleary\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2437",
    "name": "Unnecessary bit operations should not be performed",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCertain \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003ebitwise operations\u003c/a\u003e\nare not needed and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003e\u0026amp; -1\u003c/code\u003e with any value always results in the original value.\u003c/p\u003e\n\u003cp\u003eThat is because the binary representation of \u003ccode\u003e-1\u003c/code\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eintegral numeric type\u003c/a\u003e supporting\nnegative numbers, such as \u003ccode\u003eint\u003c/code\u003e or \u003ccode\u003elong\u003c/code\u003e, is based on \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003etwo’s\ncomplement\u003c/a\u003e and made of all 1s: \u003ccode\u003e0b111…​111\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePerforming \u003ccode\u003e\u0026amp;\u003c/code\u003e between a value and \u003ccode\u003e0b111…​111\u003c/code\u003e means applying the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator to each bit of the value\nand the bit \u003ccode\u003e1\u003c/code\u003e, resulting in a value equal to the provided one, bit by bit.\u003c/p\u003e\n\u003cpre\u003e\nanyValue \u0026amp; -1 // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eanyValue | 0\u003c/code\u003e always results in \u003ccode\u003eanyValue\u003c/code\u003e, because the binary representation of \u003ccode\u003e0\u003c/code\u003e is always\n\u003ccode\u003e0b000…​000\u003c/code\u003e and the \u003ccode\u003e|\u003c/code\u003e operator returns its first input when the second is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue | 0  // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e\n\u003cp\u003eThe same applies to \u003ccode\u003eanyValue ^ 0\u003c/code\u003e: the \u003ccode\u003e^\u003c/code\u003e operator returns \u003ccode\u003e1\u003c/code\u003e when its two input bits are different\n(\u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e) and returns \u003ccode\u003e0\u003c/code\u003e when its two input bits are the same (both\n\u003ccode\u003e0\u003c/code\u003e or both \u003ccode\u003e1\u003c/code\u003e). When \u003ccode\u003e^\u003c/code\u003e is applied with \u003ccode\u003e0\u003c/code\u003e, the result would be \u003ccode\u003e1\u003c/code\u003e if the other input is\n\u003ccode\u003e1\u003c/code\u003e, because the two input bits are different, and \u003ccode\u003e0\u003c/code\u003e if the other input bit is \u003ccode\u003e0\u003c/code\u003e, because the two input are the\nsame. That results in returning \u003ccode\u003eanyValue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue ^ 0  // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise operations (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/and-operator\"\u003eAnd Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/or-operator\"\u003eOr Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/xor-operator\"\u003eXor Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eIntegral numeric types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003eNumeric Data\n  Types (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003eTwo’s complement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/12764670/are-there-any-bitwise-operator-laws\"\u003eStack Overflow - Are there any Bitwise Operator\n  Laws?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCertain \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003ebitwise operations\u003c/a\u003e\nare not needed and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003e\u0026amp; -1\u003c/code\u003e with any value always results in the original value.\u003c/p\u003e\n\u003cp\u003eThat is because the binary representation of \u003ccode\u003e-1\u003c/code\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eintegral numeric type\u003c/a\u003e supporting\nnegative numbers, such as \u003ccode\u003eint\u003c/code\u003e or \u003ccode\u003elong\u003c/code\u003e, is based on \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003etwo’s\ncomplement\u003c/a\u003e and made of all 1s: \u003ccode\u003e0b111…​111\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePerforming \u003ccode\u003e\u0026amp;\u003c/code\u003e between a value and \u003ccode\u003e0b111…​111\u003c/code\u003e means applying the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator to each bit of the value\nand the bit \u003ccode\u003e1\u003c/code\u003e, resulting in a value equal to the provided one, bit by bit.\u003c/p\u003e\n\u003cpre\u003e\nanyValue \u0026amp; -1 // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eanyValue | 0\u003c/code\u003e always results in \u003ccode\u003eanyValue\u003c/code\u003e, because the binary representation of \u003ccode\u003e0\u003c/code\u003e is always\n\u003ccode\u003e0b000…​000\u003c/code\u003e and the \u003ccode\u003e|\u003c/code\u003e operator returns its first input when the second is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue | 0  // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e\n\u003cp\u003eThe same applies to \u003ccode\u003eanyValue ^ 0\u003c/code\u003e: the \u003ccode\u003e^\u003c/code\u003e operator returns \u003ccode\u003e1\u003c/code\u003e when its two input bits are different\n(\u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e) and returns \u003ccode\u003e0\u003c/code\u003e when its two input bits are the same (both\n\u003ccode\u003e0\u003c/code\u003e or both \u003ccode\u003e1\u003c/code\u003e). When \u003ccode\u003e^\u003c/code\u003e is applied with \u003ccode\u003e0\u003c/code\u003e, the result would be \u003ccode\u003e1\u003c/code\u003e if the other input is\n\u003ccode\u003e1\u003c/code\u003e, because the two input bits are different, and \u003ccode\u003e0\u003c/code\u003e if the other input bit is \u003ccode\u003e0\u003c/code\u003e, because the two input are the\nsame. That results in returning \u003ccode\u003eanyValue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue ^ 0  // Noncompliant\nanyValue      // Compliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise operations (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/and-operator\"\u003eAnd Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/or-operator\"\u003eOr Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/xor-operator\"\u003eXor Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eIntegral numeric types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003eNumeric Data\n  Types (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003eTwo’s complement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/12764670/are-there-any-bitwise-operator-laws\"\u003eStack Overflow - Are there any Bitwise Operator\n  Laws?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1227",
    "name": "break statements should not be used except for switch cases",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ebreak;\u003c/code\u003e is an unstructured control flow statement which makes code harder to read.\u003c/p\u003e\n\u003cp\u003eIdeally, every loop should have a single termination condition.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 0;\nwhile (true)\n{\n  if (i \u003d\u003d 10)\n  {\n    break;      // Non-Compliant\n  }\n\n  Console.WriteLine(i);\n  i++;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 0;\nwhile (i !\u003d 10) // Compliant\n{\n  Console.WriteLine(i);\n  i++;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003ebreak;\u003c/code\u003e is an unstructured control flow statement which makes code harder to read.\u003c/p\u003e\n\u003cp\u003eIdeally, every loop should have a single termination condition.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 0;\nwhile (true)\n{\n  if (i \u003d\u003d 10)\n  {\n    break;      // Non-Compliant\n  }\n\n  Console.WriteLine(i);\n  i++;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 0;\nwhile (i !\u003d 10) // Compliant\n{\n  Console.WriteLine(i);\n  i++;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2436",
    "name": "Types and methods should not have too many generic parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA method or class with too many type parameters has likely aggregated too many responsibilities and should be split.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default parameter value of 2:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;S, T, U, V\u0026gt; void foo() {} // Noncompliant; not really readable\n\u0026lt;String, Integer, Object, String\u0026gt;foo(); // especially on invocations\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA method or class with too many type parameters has likely aggregated too many responsibilities and should be split.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default parameter value of 2:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;S, T, U, V\u0026gt; void foo() {} // Noncompliant; not really readable\n\u0026lt;String, Integer, Object, String\u0026gt;foo(); // especially on invocations\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized number of generic parameters.",
        "defaultValue": "2",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      },
      "maxMethod": {
        "key": "maxMethod",
        "name": "maxMethod",
        "description": "Maximum authorized number of generic parameters for methods.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "2",
      "maxMethod": "3"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1109",
    "name": "A close curly brace should be located at the beginning of a line",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3881",
    "name": "\"IDisposable\" should be implemented correctly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eIDisposable\u003c/code\u003e interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource\nleaks or more severe bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the \u003cstrong\u003eCompliant\nSolution\u003c/strong\u003e section for examples.\u003c/p\u003e\n\u003cp\u003eSatisfying the rule’s conditions will enable potential derived classes to correctly dispose the members of your class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esealed\u003c/code\u003e classes are not checked. \u003c/li\u003e\n  \u003cli\u003e If a base class implements \u003ccode\u003eIDisposable\u003c/code\u003e your class should not have \u003ccode\u003eIDisposable\u003c/code\u003e in the list of its interfaces. In such\n  cases it is recommended to override the base class’s \u003ccode\u003eprotected virtual void Dispose(bool)\u003c/code\u003e method or its equivalent. \u003c/li\u003e\n  \u003cli\u003e The class should not implement \u003ccode\u003eIDisposable\u003c/code\u003e explicitly, e.g. the \u003ccode\u003eDispose()\u003c/code\u003e method should be public. \u003c/li\u003e\n  \u003cli\u003e The class should contain \u003ccode\u003eprotected virtual void Dispose(bool)\u003c/code\u003e method. This method allows the derived classes to correctly dispose\n  the resources of this class. \u003c/li\u003e\n  \u003cli\u003e The content of the \u003ccode\u003eDispose()\u003c/code\u003e method should be invocation of \u003ccode\u003eDispose(true)\u003c/code\u003e followed by\n  \u003ccode\u003eGC.SuppressFinalize(this)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of \u003ccode\u003eDispose(false)\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If the class inherits from a class that implements \u003ccode\u003eIDisposable\u003c/code\u003e it must call the \u003ccode\u003eDispose\u003c/code\u003e, or\n  \u003ccode\u003eDispose(bool)\u003c/code\u003e method of the base class from within its own implementation of \u003ccode\u003eDispose\u003c/code\u003e or \u003ccode\u003eDispose(bool)\u003c/code\u003e,\n  respectively. This ensures that all resources from the base class are properly released. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo1 : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.\n{\n    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)\n    {\n        // Cleanup\n    }\n}\n\npublic class Foo2 : IDisposable\n{\n    void IDisposable.Dispose() // Noncompliant - Dispose() should be public\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose() // Noncompliant - Dispose() should be sealed\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.\n    {\n        // Cleanup\n    }\n}{code}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// Sealed class\npublic sealed class Foo1 : IDisposable\n{\n    public void Dispose()\n    {\n        // Cleanup\n    }\n}\n\n// Simple implementation\npublic class Foo2 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n}\n\n// Implementation with a finalizer\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3()\n    {\n        Dispose(false);\n    }\n}\n\n// Base disposable class\npublic class Foo4 : DisposableBase\n{\n    protected override void Dispose(bool disposing)\n    {\n        // Cleanup\n        // Do not forget to call base\n        base.Dispose(disposing);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cp\u003eRefer to\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/498928w2.aspx\"\u003eMSDN\u003c/a\u003e for complete documentation on the dispose pattern. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html\"\u003eStephen Cleary\u003c/a\u003e for excellent Q\u0026amp;A about\n  IDisposable \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/\"\u003ePragma Geek\u003c/a\u003e for additional\n  usages of IDisposable, beyond releasing resources. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.idisposable?view\u003dnetframework-4.7\"\u003eIDisposable documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eIDisposable\u003c/code\u003e interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource\nleaks or more severe bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the \u003cstrong\u003eCompliant\nSolution\u003c/strong\u003e section for examples.\u003c/p\u003e\n\u003cp\u003eSatisfying the rule’s conditions will enable potential derived classes to correctly dispose the members of your class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esealed\u003c/code\u003e classes are not checked. \u003c/li\u003e\n  \u003cli\u003e If a base class implements \u003ccode\u003eIDisposable\u003c/code\u003e your class should not have \u003ccode\u003eIDisposable\u003c/code\u003e in the list of its interfaces. In such\n  cases it is recommended to override the base class’s \u003ccode\u003eprotected virtual void Dispose(bool)\u003c/code\u003e method or its equivalent. \u003c/li\u003e\n  \u003cli\u003e The class should not implement \u003ccode\u003eIDisposable\u003c/code\u003e explicitly, e.g. the \u003ccode\u003eDispose()\u003c/code\u003e method should be public. \u003c/li\u003e\n  \u003cli\u003e The class should contain \u003ccode\u003eprotected virtual void Dispose(bool)\u003c/code\u003e method. This method allows the derived classes to correctly dispose\n  the resources of this class. \u003c/li\u003e\n  \u003cli\u003e The content of the \u003ccode\u003eDispose()\u003c/code\u003e method should be invocation of \u003ccode\u003eDispose(true)\u003c/code\u003e followed by\n  \u003ccode\u003eGC.SuppressFinalize(this)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of \u003ccode\u003eDispose(false)\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If the class inherits from a class that implements \u003ccode\u003eIDisposable\u003c/code\u003e it must call the \u003ccode\u003eDispose\u003c/code\u003e, or\n  \u003ccode\u003eDispose(bool)\u003c/code\u003e method of the base class from within its own implementation of \u003ccode\u003eDispose\u003c/code\u003e or \u003ccode\u003eDispose(bool)\u003c/code\u003e,\n  respectively. This ensures that all resources from the base class are properly released. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo1 : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.\n{\n    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)\n    {\n        // Cleanup\n    }\n}\n\npublic class Foo2 : IDisposable\n{\n    void IDisposable.Dispose() // Noncompliant - Dispose() should be public\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose() // Noncompliant - Dispose() should be sealed\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.\n    {\n        // Cleanup\n    }\n}{code}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// Sealed class\npublic sealed class Foo1 : IDisposable\n{\n    public void Dispose()\n    {\n        // Cleanup\n    }\n}\n\n// Simple implementation\npublic class Foo2 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n}\n\n// Implementation with a finalizer\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3()\n    {\n        Dispose(false);\n    }\n}\n\n// Base disposable class\npublic class Foo4 : DisposableBase\n{\n    protected override void Dispose(bool disposing)\n    {\n        // Cleanup\n        // Do not forget to call base\n        base.Dispose(disposing);\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cp\u003eRefer to\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/498928w2.aspx\"\u003eMSDN\u003c/a\u003e for complete documentation on the dispose pattern. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html\"\u003eStephen Cleary\u003c/a\u003e for excellent Q\u0026amp;A about\n  IDisposable \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/\"\u003ePragma Geek\u003c/a\u003e for additional\n  usages of IDisposable, beyond releasing resources. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.idisposable?view\u003dnetframework-4.7\"\u003eIDisposable documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3880",
    "name": "Finalizers should not be empty",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFinalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no\nbenefit or justification.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFinalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no\nbenefit or justification.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2551",
    "name": "Shared resources should not be used for locking",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA shared resource refers to a resource or data that can be accessed or modified by multiple \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethreads\u003c/a\u003e or concurrent parts of a program. It could be any piece of data, object, file,\ndatabase connection, or system resource that needs to be accessed or manipulated by multiple parts of a program concurrently.\u003c/p\u003e\n\u003cp\u003eShared resources should not be used for \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elocking\u003c/a\u003e as it increases the chance of\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e. Any other thread could acquire (or attempt to acquire) the same lock while doing some\noperation, without knowing that the resource is meant to be used for locking purposes.\u003c/p\u003e\n\u003cp\u003eOne case of this is strings, which are \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003einterned\u003c/a\u003e by the runtime. This means\nthat each string instance is immutable and stored, and then is reused everywhere it is referenced.\u003c/p\u003e\n\u003cp\u003eInstead, a dedicated private \u003ccode\u003eobject\u003c/code\u003e instance should be used for each shared resource. Making the lock-specific object\n\u003ccode\u003eprivate\u003c/code\u003e guarantees that the access to it is as minimal as possible, in order to avoid deadlocks or lock contention.\u003c/p\u003e\n\u003cp\u003eThe following objects are considered as shared resources:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a reference to \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/this\"\u003ethis\u003c/a\u003e: if the instance is publicly\n  accessibly, the lock might be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType\u003c/a\u003e object: if the type class is publicly accessibly, the lock might\n  be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003estring\u003c/a\u003e literal or instance: if any other part of the\n  program uses the same string, the lock is shared because of interning \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid MyLockingMethod()\n{\n    lock (this) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate readonly object lockObj \u003d new object();\nvoid MyLockingMethod()\n{\n    lock (lockObj)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003eInterning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern#remarks\"\u003eString interning by the runtime\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA shared resource refers to a resource or data that can be accessed or modified by multiple \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethreads\u003c/a\u003e or concurrent parts of a program. It could be any piece of data, object, file,\ndatabase connection, or system resource that needs to be accessed or manipulated by multiple parts of a program concurrently.\u003c/p\u003e\n\u003cp\u003eShared resources should not be used for \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elocking\u003c/a\u003e as it increases the chance of\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e. Any other thread could acquire (or attempt to acquire) the same lock while doing some\noperation, without knowing that the resource is meant to be used for locking purposes.\u003c/p\u003e\n\u003cp\u003eOne case of this is strings, which are \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003einterned\u003c/a\u003e by the runtime. This means\nthat each string instance is immutable and stored, and then is reused everywhere it is referenced.\u003c/p\u003e\n\u003cp\u003eInstead, a dedicated private \u003ccode\u003eobject\u003c/code\u003e instance should be used for each shared resource. Making the lock-specific object\n\u003ccode\u003eprivate\u003c/code\u003e guarantees that the access to it is as minimal as possible, in order to avoid deadlocks or lock contention.\u003c/p\u003e\n\u003cp\u003eThe following objects are considered as shared resources:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a reference to \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/this\"\u003ethis\u003c/a\u003e: if the instance is publicly\n  accessibly, the lock might be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType\u003c/a\u003e object: if the type class is publicly accessibly, the lock might\n  be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003estring\u003c/a\u003e literal or instance: if any other part of the\n  program uses the same string, the lock is shared because of interning \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid MyLockingMethod()\n{\n    lock (this) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate readonly object lockObj \u003d new object();\nvoid MyLockingMethod()\n{\n    lock (lockObj)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003eInterning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern#remarks\"\u003eString interning by the runtime\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3885",
    "name": "\"Assembly.Load\" should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe parameter to \u003ccode\u003eAssembly.Load\u003c/code\u003e includes the full specification of the dll to be loaded. Use another method, and you might end up with\na dll other than the one you expected.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eAssembly.LoadFrom\u003c/code\u003e, \u003ccode\u003eAssembly.LoadFile\u003c/code\u003e, or \u003ccode\u003eAssembly.LoadWithPartialName\u003c/code\u003e is\ncalled.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n    Assembly.LoadFrom(...); // Noncompliant\n    Assembly.LoadFile(...); // Noncompliant\n    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe parameter to \u003ccode\u003eAssembly.Load\u003c/code\u003e includes the full specification of the dll to be loaded. Use another method, and you might end up with\na dll other than the one you expected.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eAssembly.LoadFrom\u003c/code\u003e, \u003ccode\u003eAssembly.LoadFile\u003c/code\u003e, or \u003ccode\u003eAssembly.LoadWithPartialName\u003c/code\u003e is\ncalled.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n    Assembly.LoadFrom(...); // Noncompliant\n    Assembly.LoadFile(...); // Noncompliant\n    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3400",
    "name": "Methods should not return constants",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if on methods that contain only one statement: the \u003ccode\u003ereturn\u003c/code\u003e of a constant value.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint GetBestNumber()\n{\n  return 12;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst int BestNumber \u003d 12;\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nstatic readonly int BestNumber \u003d 12;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if on methods that contain only one statement: the \u003ccode\u003ereturn\u003c/code\u003e of a constant value.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint GetBestNumber()\n{\n  return 12;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst int BestNumber \u003d 12;\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nstatic readonly int BestNumber \u003d 12;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3884",
    "name": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eCoSetProxyBlanket\u003c/code\u003e and \u003ccode\u003eCoInitializeSecurity\u003c/code\u003e both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it’s too late at that point; the permissions context has\nalready been set.\u003c/p\u003e\n\u003cp\u003eSpecifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[DllImport(\"ole32.dll\")]\nstatic extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,\n\t[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,\n\tuint dwCapabilities);\n\npublic enum RpcAuthnLevel\n{\n\tDefault \u003d 0,\n\tNone \u003d 1,\n\tConnect \u003d 2,\n\tCall \u003d 3,\n\tPkt \u003d 4,\n\tPktIntegrity \u003d 5,\n\tPktPrivacy \u003d 6\n}\n\npublic enum RpcImpLevel\n{\n\tDefault \u003d 0,\n\tAnonymous \u003d 1,\n\tIdentify \u003d 2,\n\tImpersonate \u003d 3,\n\tDelegate \u003d 4\n}\n\npublic enum EoAuthnCap\n{\n\tNone \u003d 0x00,\n\tMutualAuth \u003d 0x01,\n\tStaticCloaking \u003d 0x20,\n\tDynamicCloaking \u003d 0x40,\n\tAnyAuthority \u003d 0x80,\n\tMakeFullSIC \u003d 0x100,\n\tDefault \u003d 0x800,\n\tSecureRefs \u003d 0x02,\n\tAccessControl \u003d 0x04,\n\tAppID \u003d 0x08,\n\tDynamic \u003d 0x10,\n\tRequireFullSIC \u003d 0x200,\n\tAutoImpersonate \u003d 0x400,\n\tNoCustomMarshal \u003d 0x2000,\n\tDisableAAA \u003d 0x1000\n}\n\n[DllImport(\"ole32.dll\")]\npublic static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,\n\tRpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);\n\nstatic void Main(string[] args)\n{\n\tvar hres1 \u003d CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant\n\n\tvar hres2 \u003d CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,\n\t\tRpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/648\"\u003eCWE-648 - Incorrect Use of Privileged APIs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eCoSetProxyBlanket\u003c/code\u003e and \u003ccode\u003eCoInitializeSecurity\u003c/code\u003e both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it’s too late at that point; the permissions context has\nalready been set.\u003c/p\u003e\n\u003cp\u003eSpecifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[DllImport(\"ole32.dll\")]\nstatic extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,\n\t[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,\n\tuint dwCapabilities);\n\npublic enum RpcAuthnLevel\n{\n\tDefault \u003d 0,\n\tNone \u003d 1,\n\tConnect \u003d 2,\n\tCall \u003d 3,\n\tPkt \u003d 4,\n\tPktIntegrity \u003d 5,\n\tPktPrivacy \u003d 6\n}\n\npublic enum RpcImpLevel\n{\n\tDefault \u003d 0,\n\tAnonymous \u003d 1,\n\tIdentify \u003d 2,\n\tImpersonate \u003d 3,\n\tDelegate \u003d 4\n}\n\npublic enum EoAuthnCap\n{\n\tNone \u003d 0x00,\n\tMutualAuth \u003d 0x01,\n\tStaticCloaking \u003d 0x20,\n\tDynamicCloaking \u003d 0x40,\n\tAnyAuthority \u003d 0x80,\n\tMakeFullSIC \u003d 0x100,\n\tDefault \u003d 0x800,\n\tSecureRefs \u003d 0x02,\n\tAccessControl \u003d 0x04,\n\tAppID \u003d 0x08,\n\tDynamic \u003d 0x10,\n\tRequireFullSIC \u003d 0x200,\n\tAutoImpersonate \u003d 0x400,\n\tNoCustomMarshal \u003d 0x2000,\n\tDisableAAA \u003d 0x1000\n}\n\n[DllImport(\"ole32.dll\")]\npublic static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,\n\tRpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);\n\nstatic void Main(string[] args)\n{\n\tvar hres1 \u003d CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant\n\n\tvar hres2 \u003d CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,\n\t\tRpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/648\"\u003eCWE-648 - Incorrect Use of Privileged APIs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2674",
    "name": "The length returned from a stream read should be checked",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eYou cannot assume that any given stream reading call will fill the \u003ccode\u003ebyte[]\u003c/code\u003e passed in to the method with the number of bytes requested.\nInstead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both\nharmful and difficult to reproduce.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eStream.Read\u003c/code\u003e or a \u003ccode\u003eStream.ReadAsync\u003c/code\u003e method is called, but the return value is not\nchecked.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(string fileName)\n{\n  using (var stream \u003d File.Open(fileName, FileMode.Open))\n  {\n    var result \u003d new byte[stream.Length];\n    stream.Read(result, 0, (int)stream.Length); // Noncompliant\n    // ... do something with result\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(string fileName)\n{\n  using (var stream \u003d File.Open(fileName, FileMode.Open))\n  {\n    var buffer \u003d new byte[1024];\n    using (var ms \u003d new MemoryStream())\n    {\n        int read;\n        while ((read \u003d stream.Read(buffer, 0, buffer.Length)) \u0026gt; 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        // ... do something with ms\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eYou cannot assume that any given stream reading call will fill the \u003ccode\u003ebyte[]\u003c/code\u003e passed in to the method with the number of bytes requested.\nInstead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both\nharmful and difficult to reproduce.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eStream.Read\u003c/code\u003e or a \u003ccode\u003eStream.ReadAsync\u003c/code\u003e method is called, but the return value is not\nchecked.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(string fileName)\n{\n  using (var stream \u003d File.Open(fileName, FileMode.Open))\n  {\n    var result \u003d new byte[stream.Length];\n    stream.Read(result, 0, (int)stream.Length); // Noncompliant\n    // ... do something with result\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void DoSomething(string fileName)\n{\n  using (var stream \u003d File.Open(fileName, FileMode.Open))\n  {\n    var buffer \u003d new byte[1024];\n    using (var ms \u003d new MemoryStream())\n    {\n        int read;\n        while ((read \u003d stream.Read(buffer, 0, buffer.Length)) \u0026gt; 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        // ... do something with ms\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3887",
    "name": "Mutable, non-private fields should not be \"readonly\"",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003e\u003ccode\u003ereadonly\u003c/code\u003e keyword\u003c/a\u003e on a\nfield means it can’t be changed after initialization. However, that’s only partly true when applied to collections or arrays. The\n\u003ccode\u003ereadonly\u003c/code\u003e keyword enforces that another instance can’t be assigned to the field, but it cannot keep the contents from being updated. In\npractice, the field value can be changed, and the use of \u003ccode\u003ereadonly\u003c/code\u003e on such a field is misleading, and you’re likely not getting the\nbehavior you expect.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a non-private, \u003ccode\u003ereadonly\u003c/code\u003e field is an array or collection.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this, you should either use an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable?view\u003dnet-7.0\"\u003eImmutable\ncollection\u003c/a\u003e or remove the \u003ccode\u003ereadonly\u003c/code\u003e field to clarify the behavior.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass\n{\n  public readonly string[] strings1;  // Noncompliant\n  public readonly string[] strings2;  // Noncompliant\n  public readonly string[] strings3;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass\n{\n  public string[] strings1;                         // Compliant: remove readonly modifier\n  public readonly ImmutableArray\u0026lt;string\u0026gt; strings;   // Compliant: use an Immutable collection\n  private readonly string[] strings;                // Compliant: reduced accessibility to private\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly (C# Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003e\u003ccode\u003ereadonly\u003c/code\u003e keyword\u003c/a\u003e on a\nfield means it can’t be changed after initialization. However, that’s only partly true when applied to collections or arrays. The\n\u003ccode\u003ereadonly\u003c/code\u003e keyword enforces that another instance can’t be assigned to the field, but it cannot keep the contents from being updated. In\npractice, the field value can be changed, and the use of \u003ccode\u003ereadonly\u003c/code\u003e on such a field is misleading, and you’re likely not getting the\nbehavior you expect.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a non-private, \u003ccode\u003ereadonly\u003c/code\u003e field is an array or collection.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this, you should either use an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable?view\u003dnet-7.0\"\u003eImmutable\ncollection\u003c/a\u003e or remove the \u003ccode\u003ereadonly\u003c/code\u003e field to clarify the behavior.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass\n{\n  public readonly string[] strings1;  // Noncompliant\n  public readonly string[] strings2;  // Noncompliant\n  public readonly string[] strings3;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass\n{\n  public string[] strings1;                         // Compliant: remove readonly modifier\n  public readonly ImmutableArray\u0026lt;string\u0026gt; strings;   // Compliant: use an Immutable collection\n  private readonly string[] strings;                // Compliant: reduced accessibility to private\n\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly\"\u003ereadonly (C# Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1104",
    "name": "Fields should not have public accessibility",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePublic fields in public classes do not respect the encapsulation principle and have three main disadvantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Additional behavior such as validation cannot be added. \u003c/li\u003e\n  \u003cli\u003e The internal representation is exposed, and cannot be changed afterwards. \u003c/li\u003e\n  \u003cli\u003e Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo prevent unauthorized modifications, private attributes and accessor methods (set and get) should be used.\u003c/p\u003e\n\u003cp\u003eNote that due to optimizations on simple properties, public fields provide only very little performance gain.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePublic fields can be modified by any part of the code and this can lead to unexpected changes and hard-to-trace bugs.\u003c/p\u003e\n\u003cp\u003ePublic fields don’t hide the implementation details. As a consequence, it is no longer possible to change how the data is stored internally without\nimpacting the client code of the class.\u003c/p\u003e\n\u003cp\u003eThe code is harder to maintain.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFields marked as \u003ccode\u003ereadonly\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e are ignored by this rule.\u003c/p\u003e\n\u003cp\u003eFields inside classes or structs annotated with the \u003ccode\u003eStructLayoutAttribute\u003c/code\u003e are ignored by this rule.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDepending on your needs:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use auto-implemented properties:\u003cbr\u003e For common cases, where no validation is required, auto-implemented properties are a good alternative to\n  fields: these allows fine grained access control and offers the flexibility to add validation or change internal storage afterwards. \u003cem\u003eNote:\u003c/em\u003e\n  as a bonus it is now possible to monitor value changes using breakpoints. \u003c/li\u003e\n  \u003cli\u003e Encapsulate the fields in your class. To do so:\n    \u003col\u003e\n      \u003cli\u003e Make the field private. \u003c/li\u003e\n      \u003cli\u003e Use public properties (set and get) to access and modify the field. \u003c/li\u003e\n    \u003c/ol\u003e  \u003c/li\u003e\n  \u003cli\u003e Mark field as \u003ccode\u003ereadonly\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    public int InstanceData \u003d 32; // Noncompliant\n    public int AnotherInstanceData \u003d 32; // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    // using auto-implemented properties\n    public int InstanceData { get; set; } \u003d 32;\n\n    // using field encapsulation\n    private int _anotherInstanceData \u003d 32;\n\n    public int AnotherInstanceData\n    {\n        get { return _anotherInstanceData; }\n        set\n        {\n            // perform validation\n            _anotherInstanceData \u003d value;\n        }\n    }\n\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003ePlease be aware that changing a field by a property in a software that uses serialization could lead to binary incompatibility.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/493\"\u003eCWE-493 - Critical Public Variable Without Final Modifier\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePublic fields in public classes do not respect the encapsulation principle and have three main disadvantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Additional behavior such as validation cannot be added. \u003c/li\u003e\n  \u003cli\u003e The internal representation is exposed, and cannot be changed afterwards. \u003c/li\u003e\n  \u003cli\u003e Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo prevent unauthorized modifications, private attributes and accessor methods (set and get) should be used.\u003c/p\u003e\n\u003cp\u003eNote that due to optimizations on simple properties, public fields provide only very little performance gain.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePublic fields can be modified by any part of the code and this can lead to unexpected changes and hard-to-trace bugs.\u003c/p\u003e\n\u003cp\u003ePublic fields don’t hide the implementation details. As a consequence, it is no longer possible to change how the data is stored internally without\nimpacting the client code of the class.\u003c/p\u003e\n\u003cp\u003eThe code is harder to maintain.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFields marked as \u003ccode\u003ereadonly\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e are ignored by this rule.\u003c/p\u003e\n\u003cp\u003eFields inside classes or structs annotated with the \u003ccode\u003eStructLayoutAttribute\u003c/code\u003e are ignored by this rule.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDepending on your needs:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use auto-implemented properties:\u003cbr\u003e For common cases, where no validation is required, auto-implemented properties are a good alternative to\n  fields: these allows fine grained access control and offers the flexibility to add validation or change internal storage afterwards. \u003cem\u003eNote:\u003c/em\u003e\n  as a bonus it is now possible to monitor value changes using breakpoints. \u003c/li\u003e\n  \u003cli\u003e Encapsulate the fields in your class. To do so:\n    \u003col\u003e\n      \u003cli\u003e Make the field private. \u003c/li\u003e\n      \u003cli\u003e Use public properties (set and get) to access and modify the field. \u003c/li\u003e\n    \u003c/ol\u003e  \u003c/li\u003e\n  \u003cli\u003e Mark field as \u003ccode\u003ereadonly\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    public int InstanceData \u003d 32; // Noncompliant\n    public int AnotherInstanceData \u003d 32; // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    // using auto-implemented properties\n    public int InstanceData { get; set; } \u003d 32;\n\n    // using field encapsulation\n    private int _anotherInstanceData \u003d 32;\n\n    public int AnotherInstanceData\n    {\n        get { return _anotherInstanceData; }\n        set\n        {\n            // perform validation\n            _anotherInstanceData \u003d value;\n        }\n    }\n\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003ePlease be aware that changing a field by a property in a software that uses serialization could lead to binary incompatibility.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/493\"\u003eCWE-493 - Critical Public Variable Without Final Modifier\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3878",
    "name": "Arrays should not be created for params parameters",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it to a \u003ccode\u003eparams\u003c/code\u003e parameter. Simply pass the elements directly.\nThey will be consolidated into an array automatically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Base()\n{\n    Method(new string[] { \"s1\", \"s2\" }); // Noncompliant: unnecessary\n    Method(new string[] { });            // Noncompliant\n    Method(new string[12]);              // Compliant\n}\n\npublic void Method(params string[] args)\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Base()\n{\n    Method(\"s1\", \"s2\");\n    Method();\n    Method(new string[12]);\n}\n\npublic void Method(params string[] args)\n{\n    // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it to a \u003ccode\u003eparams\u003c/code\u003e parameter. Simply pass the elements directly.\nThey will be consolidated into an array automatically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Base()\n{\n    Method(new string[] { \"s1\", \"s2\" }); // Noncompliant: unnecessary\n    Method(new string[] { });            // Noncompliant\n    Method(new string[12]);              // Compliant\n}\n\npublic void Method(params string[] args)\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Base()\n{\n    Method(\"s1\", \"s2\");\n    Method();\n    Method(new string[12]);\n}\n\npublic void Method(params string[] args)\n{\n    // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1699",
    "name": "Constructors should only call non-overridable methods",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\u003c/p\u003e\n\u003cp\u003eWhen constructing an object of a derived class, the constructor of the parent class is invoked first, and only then the constructor of the derived\nclass is called. This sequential construction process applies to multiple levels of inheritance as well, starting from the base class and progressing\nto the most derived class.\u003c/p\u003e\n\u003cp\u003eIf an overridable method is called within the constructor of the parent class, it may inadvertently invoke an overridden implementation in the\nderived class. This can lead to unexpected failures or strange behaviors because the object’s construction is still in progress and may not have\nreached a fully initialized state. Consequently, the overridden method may rely on uninitialized members or have assumptions about the object’s state\nthat are not yet valid.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\npublic class Parent\n{\n  public Parent()\n  {\n    DoSomething();  // Noncompliant\n  }\n\n  public virtual void DoSomething() // can be overridden\n  {\n    ...\n  }\n}\n\npublic class Child : Parent\n{\n  private string foo;\n\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\n  {\n    this.foo \u003d foo;\n  }\n\n  public override void DoSomething()\n  {\n    Console.WriteLine(this.foo.Length);\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eChild\u003c/code\u003e class constructor starts by calling the \u003ccode\u003eParent\u003c/code\u003e class constructor. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003eParent\u003c/code\u003e class constructor calls the method \u003ccode\u003eDoSomething\u003c/code\u003e, which has been overridden in the \u003ccode\u003eChild\u003c/code\u003e class.\n  \u003c/li\u003e\n  \u003cli\u003e If the behavior of the \u003ccode\u003eChild\u003c/code\u003e class overridden \u003ccode\u003eDoSomething\u003c/code\u003e method depends on fields that are initialized in the\n  \u003ccode\u003eChild\u003c/code\u003e class constructor, unexpected behavior (such as a \u003ccode\u003eNullReferenceException\u003c/code\u003e) can result, because the fields aren’t\n  initialized yet. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors\"\u003eConstructors\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance\"\u003eInheritance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism#virtual-methods\"\u003ePolimorphism\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003eMethod signatures\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\u003c/p\u003e\n\u003cp\u003eWhen constructing an object of a derived class, the constructor of the parent class is invoked first, and only then the constructor of the derived\nclass is called. This sequential construction process applies to multiple levels of inheritance as well, starting from the base class and progressing\nto the most derived class.\u003c/p\u003e\n\u003cp\u003eIf an overridable method is called within the constructor of the parent class, it may inadvertently invoke an overridden implementation in the\nderived class. This can lead to unexpected failures or strange behaviors because the object’s construction is still in progress and may not have\nreached a fully initialized state. Consequently, the overridden method may rely on uninitialized members or have assumptions about the object’s state\nthat are not yet valid.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\npublic class Parent\n{\n  public Parent()\n  {\n    DoSomething();  // Noncompliant\n  }\n\n  public virtual void DoSomething() // can be overridden\n  {\n    ...\n  }\n}\n\npublic class Child : Parent\n{\n  private string foo;\n\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\n  {\n    this.foo \u003d foo;\n  }\n\n  public override void DoSomething()\n  {\n    Console.WriteLine(this.foo.Length);\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eChild\u003c/code\u003e class constructor starts by calling the \u003ccode\u003eParent\u003c/code\u003e class constructor. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003eParent\u003c/code\u003e class constructor calls the method \u003ccode\u003eDoSomething\u003c/code\u003e, which has been overridden in the \u003ccode\u003eChild\u003c/code\u003e class.\n  \u003c/li\u003e\n  \u003cli\u003e If the behavior of the \u003ccode\u003eChild\u003c/code\u003e class overridden \u003ccode\u003eDoSomething\u003c/code\u003e method depends on fields that are initialized in the\n  \u003ccode\u003eChild\u003c/code\u003e class constructor, unexpected behavior (such as a \u003ccode\u003eNullReferenceException\u003c/code\u003e) can result, because the fields aren’t\n  initialized yet. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors\"\u003eConstructors\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance\"\u003eInheritance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/polymorphism#virtual-methods\"\u003ePolimorphism\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003eMethod signatures\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1215",
    "name": "\"GC.Collect\" should not be called",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.gc.collect\"\u003eGC.Collect\u003c/a\u003e is a method that forces or suggests to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\"\u003egarbage collector\u003c/a\u003e to run a collection of objects in the managed heap\nthat are no longer being used and free their memory.\u003c/p\u003e\n\u003cp\u003eCalling \u003ccode\u003eGC.Collect\u003c/code\u003e is rarely necessary and can significantly affect application performance. That’s because it is a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Tracing_garbage_collection\"\u003etracing garbage collector\u003c/a\u003e and needs to examine \u003cem\u003eevery object in memory\u003c/em\u003e for\ncleanup and analyze all reachable objects from every application’s root (static fields, local variables on thread stacks, etc.).\u003c/p\u003e\n\u003cp\u003eTo perform tracing and memory releasing correctly, the garbage collection \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/latency\"\u003emay\u003c/a\u003e need to block all threads currently in execution. That is\nwhy, as a general rule, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/performance#troubleshoot-performance-issues\"\u003eperformance implications\u003c/a\u003e\nof calling \u003ccode\u003eGC.Collect\u003c/code\u003e far outweigh the benefits.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any overload of \u003ccode\u003eCollect\u003c/code\u003e is invoked.\u003c/p\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n  // ...\n  GC.Collect();                              // Noncompliant\n  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eThere may be exceptions to this rule: for example, you’ve just triggered some event that is unique in the run of your program that caused a lot of\nlong-lived objects to die, and you want to release their memory.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\"\u003eGarbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.gc.collect\"\u003eGC.Collect\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/latency\"\u003eGarbage collection latency modes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/performance#troubleshoot-performance-issues\"\u003eGarbage collection\n  troubleshoot performance issues\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.gc.collect\"\u003eGC.Collect\u003c/a\u003e is a method that forces or suggests to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\"\u003egarbage collector\u003c/a\u003e to run a collection of objects in the managed heap\nthat are no longer being used and free their memory.\u003c/p\u003e\n\u003cp\u003eCalling \u003ccode\u003eGC.Collect\u003c/code\u003e is rarely necessary and can significantly affect application performance. That’s because it is a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Tracing_garbage_collection\"\u003etracing garbage collector\u003c/a\u003e and needs to examine \u003cem\u003eevery object in memory\u003c/em\u003e for\ncleanup and analyze all reachable objects from every application’s root (static fields, local variables on thread stacks, etc.).\u003c/p\u003e\n\u003cp\u003eTo perform tracing and memory releasing correctly, the garbage collection \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/latency\"\u003emay\u003c/a\u003e need to block all threads currently in execution. That is\nwhy, as a general rule, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/performance#troubleshoot-performance-issues\"\u003eperformance implications\u003c/a\u003e\nof calling \u003ccode\u003eGC.Collect\u003c/code\u003e far outweigh the benefits.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any overload of \u003ccode\u003eCollect\u003c/code\u003e is invoked.\u003c/p\u003e\n\u003cpre\u003e\nstatic void Main(string[] args)\n{\n  // ...\n  GC.Collect();                              // Noncompliant\n  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eThere may be exceptions to this rule: for example, you’ve just triggered some event that is unique in the run of your program that caused a lot of\nlong-lived objects to die, and you want to release their memory.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\"\u003eGarbage collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.gc.collect\"\u003eGC.Collect\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/latency\"\u003eGarbage collection latency modes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/performance#troubleshoot-performance-issues\"\u003eGarbage collection\n  troubleshoot performance issues\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice",
      "performance",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3998",
    "name": "Threads should not lock on objects with weak identity",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eObjects that can be accessed across \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eapplication\ndomain\u003c/a\u003e boundaries are said to have weak identity. This means that these objects can be considered shared resources outside of the domain, which\ncan be lead to them being accessed or modified by multiple threads or concurrent parts of a program, outside of the domain.\u003c/p\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e acquiring a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e on such an object runs the risk of being blocked by another thread in a\ndifferent application domain, leading to poor performance and potentially \u003ca\nhref\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003ethread starvation\u003c/a\u003e and \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTypes with weak identity are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject\"\u003eMarshalByRefObject\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.executionengineexception\"\u003eExecutionEngineException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.outofmemoryexception\"\u003eOutOfMemoryException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string\"\u003eString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo\"\u003eMemberInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo\"\u003eParameterInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Sample\n{\n    private readonly StackOverflowException myLock \u003d new();\n\n    public void Go()\n    {\n        lock (myLock) // Noncompliant\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Sample\n{\n    private readonly object myLock \u003d new();\n\n    public void Go()\n    {\n        lock (myLock)\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eApplication domains\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003eWhat is (thread) starvation?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem\"\u003eReaders-writers problem\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dining_philosophers_problem\"\u003eDining philosophers problem\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eObjects that can be accessed across \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eapplication\ndomain\u003c/a\u003e boundaries are said to have weak identity. This means that these objects can be considered shared resources outside of the domain, which\ncan be lead to them being accessed or modified by multiple threads or concurrent parts of a program, outside of the domain.\u003c/p\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e acquiring a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e on such an object runs the risk of being blocked by another thread in a\ndifferent application domain, leading to poor performance and potentially \u003ca\nhref\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003ethread starvation\u003c/a\u003e and \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTypes with weak identity are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject\"\u003eMarshalByRefObject\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.executionengineexception\"\u003eExecutionEngineException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.outofmemoryexception\"\u003eOutOfMemoryException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string\"\u003eString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo\"\u003eMemberInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo\"\u003eParameterInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Sample\n{\n    private readonly StackOverflowException myLock \u003d new();\n\n    public void Go()\n    {\n        lock (myLock) // Noncompliant\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Sample\n{\n    private readonly object myLock \u003d new();\n\n    public void Go()\n    {\n        lock (myLock)\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eApplication domains\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003eWhat is (thread) starvation?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem\"\u003eReaders-writers problem\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dining_philosophers_problem\"\u003eDining philosophers problem\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3877",
    "name": "Exceptions should not be thrown from unexpected methods",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe rule is reporting when an exception is thrown from certain methods and constructors. These methods are expected to behave in a specific way and\nthrowing an exception from them can lead to unexpected behavior and break the calling code.\u003c/p\u003e\n\u003cpre\u003e\npublic override string ToString()\n{\n  if (string.IsNullOrEmpty(Name))\n  {\n    throw new ArgumentException(nameof(Name));  // Noncompliant\n  }\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn issue is raised when an exception is thrown from any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1.equals\"\u003eIEquatable.Equals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eGetHashCode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003eIDisposable.Dispose\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-implement-custom-event-accessors\"\u003eEvent accessors\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors\"\u003estatic constructors\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers\"\u003eModule initializers\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators\"\u003eimplicit cast\n  operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCertain exceptions will be ignored in specific contexts, thus not raising the issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.NotImplementedException\u003c/code\u003e and its derivatives are ignored for all the aforementioned. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.InvalidOperationException\u003c/code\u003e, \u003ccode\u003eSystem.NotSupportedException\u003c/code\u003e, and \u003ccode\u003eSystem.ArgumentException\u003c/code\u003e and their\n  derivatives are ignored in event accessors. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions\"\u003eBest practices for exceptions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065\"\u003eCA1065: Do not raise exceptions in\n  unexpected locations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe rule is reporting when an exception is thrown from certain methods and constructors. These methods are expected to behave in a specific way and\nthrowing an exception from them can lead to unexpected behavior and break the calling code.\u003c/p\u003e\n\u003cpre\u003e\npublic override string ToString()\n{\n  if (string.IsNullOrEmpty(Name))\n  {\n    throw new ArgumentException(nameof(Name));  // Noncompliant\n  }\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eAn issue is raised when an exception is thrown from any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1.equals\"\u003eIEquatable.Equals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003eGetHashCode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003eIDisposable.Dispose\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-implement-custom-event-accessors\"\u003eEvent accessors\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors\"\u003estatic constructors\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers\"\u003eModule initializers\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/user-defined-conversion-operators\"\u003eimplicit cast\n  operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCertain exceptions will be ignored in specific contexts, thus not raising the issue:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.NotImplementedException\u003c/code\u003e and its derivatives are ignored for all the aforementioned. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.InvalidOperationException\u003c/code\u003e, \u003ccode\u003eSystem.NotSupportedException\u003c/code\u003e, and \u003ccode\u003eSystem.ArgumentException\u003c/code\u003e and their\n  derivatives are ignored in event accessors. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions\"\u003eBest practices for exceptions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065\"\u003eCA1065: Do not raise exceptions in\n  unexpected locations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2306",
    "name": "\"async\" and \"await\" should not be used as identifiers",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSince C# 5.0, \u003ccode\u003easync\u003c/code\u003e and \u003ccode\u003eawait\u003c/code\u003e are \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/#contextual-keywords\"\u003econtextual keywords\u003c/a\u003e. Contextual keywords\ndo have a particular meaning in some contexts, but are not reserved and therefore can be used as variable names.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint await \u003d 42; // Noncompliant, but compiles\nint async \u003d 42; // Noncompliant, but compiles\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords\"\u003eKeywords\u003c/a\u003e, on the other hand, are always reserved and\ntherefore are not valid variable names.\u003c/p\u003e\n\u003cpre\u003e\nint abstract \u003d 42; // Error CS1585: Member modifier \u0027abstract\u0027 must precede the member type and name\nint foreach \u003d 42; // Error CS1519: Invalid token \u0027foreach\u0027 in class, struct, or interface member declaration\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any confusion, it is best to not use \u003ccode\u003easync\u003c/code\u003e and \u003ccode\u003eawait\u003c/code\u003e as identifiers.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint someVariableName \u003d 42;\nint someOtherVariableName \u003d 42;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/#contextual-keywords\"\u003eContextual Keywords - MSDN\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming - MSDN\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSince C# 5.0, \u003ccode\u003easync\u003c/code\u003e and \u003ccode\u003eawait\u003c/code\u003e are \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/#contextual-keywords\"\u003econtextual keywords\u003c/a\u003e. Contextual keywords\ndo have a particular meaning in some contexts, but are not reserved and therefore can be used as variable names.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint await \u003d 42; // Noncompliant, but compiles\nint async \u003d 42; // Noncompliant, but compiles\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords\"\u003eKeywords\u003c/a\u003e, on the other hand, are always reserved and\ntherefore are not valid variable names.\u003c/p\u003e\n\u003cpre\u003e\nint abstract \u003d 42; // Error CS1585: Member modifier \u0027abstract\u0027 must precede the member type and name\nint foreach \u003d 42; // Error CS1519: Invalid token \u0027foreach\u0027 in class, struct, or interface member declaration\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any confusion, it is best to not use \u003ccode\u003easync\u003c/code\u003e and \u003ccode\u003eawait\u003c/code\u003e as identifiers.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint someVariableName \u003d 42;\nint someOtherVariableName \u003d 42;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/#contextual-keywords\"\u003eContextual Keywords - MSDN\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming - MSDN\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3990",
    "name": "Assemblies should be marked as CLS compliant",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with \u003ccode\u003eSystem.CLSCompliantAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly:CLSCompliant(true)]\nnamespace MyLibrary\n{\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with \u003ccode\u003eSystem.CLSCompliantAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly:CLSCompliant(true)]\nnamespace MyLibrary\n{\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1450",
    "name": "Private fields only used as local variables in methods should become local variables",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the value of a private field is always assigned to in a class\u0027 methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  private int singularField;\n\n  public void DoSomething(int x)\n  {\n    singularField \u003d x + 5;\n\n    if (singularField \u003d\u003d 0) { /* ... */ }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public void DoSomething(int x)\n  {\n    int localVariable \u003d x + 5;\n\n    if (localVariable \u003d\u003d 0) { /* ... */ }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the value of a private field is always assigned to in a class\u0027 methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  private int singularField;\n\n  public void DoSomething(int x)\n  {\n    singularField \u003d x + 5;\n\n    if (singularField \u003d\u003d 0) { /* ... */ }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public void DoSomething(int x)\n  {\n    int localVariable \u003d x + 5;\n\n    if (localVariable \u003d\u003d 0) { /* ... */ }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1451",
    "name": "Track lack of copyright and license headers",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LAWFUL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eheaderFormat\u003c/code\u003e must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (\u003ccode\u003eusing\u003c/code\u003e, \u003ccode\u003enamespace\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eFor example, if you want the source file to look like this\u003c/p\u003e\n\u003cpre\u003e\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n\u003c/pre\u003e\n\u003cp\u003ethen the \u003ccode\u003eheaderFormat\u003c/code\u003e parameter should end with an empty line like this\u003c/p\u003e\n\u003cpre\u003e\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eheaderFormat\u003c/code\u003e must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (\u003ccode\u003eusing\u003c/code\u003e, \u003ccode\u003enamespace\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eFor example, if you want the source file to look like this\u003c/p\u003e\n\u003cpre\u003e\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n\u003c/pre\u003e\n\u003cp\u003ethen the \u003ccode\u003eheaderFormat\u003c/code\u003e parameter should end with an empty line like this\u003c/p\u003e\n\u003cpre\u003e\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "headerFormat": {
        "key": "headerFormat",
        "name": "headerFormat",
        "description": "Expected copyright and license header.",
        "defaultValue": "/*\n * \u003cYour-Product-Name\u003e\n * Copyright (c) \u003cYear-From\u003e-\u003cYear-To\u003e \u003cYour-Company-Name\u003e\n *\n * Please configure this header in your SonarCloud/SonarQube quality profile.\n * You can also set it in SonarLint.xml additional file for SonarLint or standalone NuGet analyzer.\n */\n",
        "type": "TEXT",
        "multiple": false,
        "possibleValues": []
      },
      "isRegularExpression": {
        "key": "isRegularExpression",
        "name": "isRegularExpression",
        "description": "Whether the headerFormat is a regular expression.",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "headerFormat": "/*\n * \u003cYour-Product-Name\u003e\n * Copyright (c) \u003cYear-From\u003e-\u003cYear-To\u003e \u003cYour-Company-Name\u003e\n *\n * Please configure this header in your SonarCloud/SonarQube quality profile.\n * You can also set it in SonarLint.xml additional file for SonarLint or standalone NuGet analyzer.\n */\n",
      "isRegularExpression": "false"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3872",
    "name": "Parameter names should not duplicate the names of their methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe name of a method should communicate what it does, and the names of its parameters should indicate how they’re used. If a method and its\nparameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language\nthat’s not the case, it is still likely to confuse callers and maintainers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Login(string login)  // Noncompliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Login(string userName)\n{\n  //...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe name of a method should communicate what it does, and the names of its parameters should indicate how they’re used. If a method and its\nparameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language\nthat’s not the case, it is still likely to confuse callers and maintainers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void Login(string login)  // Noncompliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Login(string userName)\n{\n  //...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3993",
    "name": "Custom attributes should be marked with \"System.AttributeUsageAttribute\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen defining custom attributes, \u003ccode\u003eSystem.AttributeUsageAttribute\u003c/code\u003e must be used to indicate where the attribute can be applied. This will\ndetermine its valid locations in the code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n\n   public sealed class MyAttribute :Attribute // Noncompliant\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text \u003d myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n\n   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]\n   public sealed class MyAttribute :Attribute\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text \u003d myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen defining custom attributes, \u003ccode\u003eSystem.AttributeUsageAttribute\u003c/code\u003e must be used to indicate where the attribute can be applied. This will\ndetermine its valid locations in the code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n\n   public sealed class MyAttribute :Attribute // Noncompliant\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text \u003d myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n\n   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]\n   public sealed class MyAttribute :Attribute\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text \u003d myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1694",
    "name": "An abstract class should have both abstract and concrete methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eclass\u003c/code\u003e with no abstract methods that was made \u003ccode\u003eabstract\u003c/code\u003e purely to prevent instantiation should be converted to a concrete\n\u003ccode\u003eclass\u003c/code\u003e (i.e. remove the \u003ccode\u003eabstract\u003c/code\u003e keyword) with a \u003ccode\u003eprotected\u003c/code\u003e constructor.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eclass\u003c/code\u003e with only \u003ccode\u003eabstract\u003c/code\u003e methods and no inheritable behavior should be converted to an \u003ccode\u003einterface\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic abstract class Animal //Noncompliant; should be an interface\n{\n  abstract void Move();\n  abstract void Feed();\n}\n\npublic abstract class Color //Noncompliant; should be concrete with a protected constructor\n{\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface Animal\n{\n  void Move();\n  void Feed();\n}\n\npublic class Color\n{\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  protected Color()\n  {}\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\npublic abstract class Lamp\n{\n  private bool switchLamp \u003d false;\n\n  public abstract void Glow();\n\n  public void FlipSwitch()\n  {\n    switchLamp \u003d !switchLamp;\n    if (switchLamp)\n    {\n      Glow();\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eclass\u003c/code\u003e with no abstract methods that was made \u003ccode\u003eabstract\u003c/code\u003e purely to prevent instantiation should be converted to a concrete\n\u003ccode\u003eclass\u003c/code\u003e (i.e. remove the \u003ccode\u003eabstract\u003c/code\u003e keyword) with a \u003ccode\u003eprotected\u003c/code\u003e constructor.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eclass\u003c/code\u003e with only \u003ccode\u003eabstract\u003c/code\u003e methods and no inheritable behavior should be converted to an \u003ccode\u003einterface\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic abstract class Animal //Noncompliant; should be an interface\n{\n  abstract void Move();\n  abstract void Feed();\n}\n\npublic abstract class Color //Noncompliant; should be concrete with a protected constructor\n{\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface Animal\n{\n  void Move();\n  void Feed();\n}\n\npublic class Color\n{\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  protected Color()\n  {}\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\npublic abstract class Lamp\n{\n  private bool switchLamp \u003d false;\n\n  public abstract void Glow();\n\n  public void FlipSwitch()\n  {\n    switchLamp \u003d !switchLamp;\n    if (switchLamp)\n    {\n      Glow();\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1210",
    "name": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you implement \u003ccode\u003eIComparable\u003c/code\u003e or \u003ccode\u003eIComparable\u0026lt;T\u0026gt;\u003c/code\u003e on a class you should also override \u003ccode\u003eEquals(object)\u003c/code\u003e\nand overload the comparison operators (\u003ccode\u003e\u003d\u003d\u003c/code\u003e, \u003ccode\u003e!\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e). That’s because the CLR cannot automatically call your \u003ccode\u003eCompareTo\u003c/code\u003e implementation from \u003ccode\u003eEquals(object)\u003c/code\u003e or\nfrom the base comparison operator implementations. Additionally, it is best practice to override \u003ccode\u003eGetHashCode\u003c/code\u003e along with\n\u003ccode\u003eEquals\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class implements \u003ccode\u003eIComparable\u003c/code\u003e without also overriding \u003ccode\u003eEquals(object)\u003c/code\u003e and the comparison\noperators.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo: IComparable  // Noncompliant\n{\n  public int CompareTo(object obj) { /* ... */ }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo: IComparable\n{\n  public int CompareTo(object obj) { /* ... */ }\n  public override bool Equals(object obj)\n  {\n    var other \u003d obj as Foo;\n    if (object.ReferenceEquals(other, null))\n    {\n      return false;\n    }\n    return this.CompareTo(other) \u003d\u003d 0;\n  }\n  public int GetHashCode() { /* ... */ }\n  public static bool operator \u003d\u003d (Foo left, Foo right)\n  {\n    if (object.ReferenceEquals(left, null))\n    {\n      return object.ReferenceEquals(right, null);\n    }\n    return left.Equals(right);\n  }\n  public static bool operator \u0026gt; (Foo left, Foo right)\n  {\n    return Compare(left, right) \u0026gt; 0;\n  }\n  public static bool operator \u0026lt; (Foo left, Foo right)\n  {\n    return Compare(left, right) \u0026lt; 0;\n  }\n  public static bool operator !\u003d (Foo left, Foo right)\n  {\n    return !(left \u003d\u003d right);\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you implement \u003ccode\u003eIComparable\u003c/code\u003e or \u003ccode\u003eIComparable\u0026lt;T\u0026gt;\u003c/code\u003e on a class you should also override \u003ccode\u003eEquals(object)\u003c/code\u003e\nand overload the comparison operators (\u003ccode\u003e\u003d\u003d\u003c/code\u003e, \u003ccode\u003e!\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e). That’s because the CLR cannot automatically call your \u003ccode\u003eCompareTo\u003c/code\u003e implementation from \u003ccode\u003eEquals(object)\u003c/code\u003e or\nfrom the base comparison operator implementations. Additionally, it is best practice to override \u003ccode\u003eGetHashCode\u003c/code\u003e along with\n\u003ccode\u003eEquals\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class implements \u003ccode\u003eIComparable\u003c/code\u003e without also overriding \u003ccode\u003eEquals(object)\u003c/code\u003e and the comparison\noperators.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo: IComparable  // Noncompliant\n{\n  public int CompareTo(object obj) { /* ... */ }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo: IComparable\n{\n  public int CompareTo(object obj) { /* ... */ }\n  public override bool Equals(object obj)\n  {\n    var other \u003d obj as Foo;\n    if (object.ReferenceEquals(other, null))\n    {\n      return false;\n    }\n    return this.CompareTo(other) \u003d\u003d 0;\n  }\n  public int GetHashCode() { /* ... */ }\n  public static bool operator \u003d\u003d (Foo left, Foo right)\n  {\n    if (object.ReferenceEquals(left, null))\n    {\n      return object.ReferenceEquals(right, null);\n    }\n    return left.Equals(right);\n  }\n  public static bool operator \u0026gt; (Foo left, Foo right)\n  {\n    return Compare(left, right) \u0026gt; 0;\n  }\n  public static bool operator \u0026lt; (Foo left, Foo right)\n  {\n    return Compare(left, right) \u0026lt; 0;\n  }\n  public static bool operator !\u003d (Foo left, Foo right)\n  {\n    return !(left \u003d\u003d right);\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3871",
    "name": "Exception types should be \"public\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n\u003ccode\u003epublic\u003c/code\u003e for that to work.\u003c/p\u003e\n\u003cp\u003eIf a method throws a non-public exception, the best you can do on the caller’s side is to \u003ccode\u003ecatch\u003c/code\u003e the closest \u003ccode\u003epublic\u003c/code\u003e base\nof the class. However, you lose all the information that the new exception type carries.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue if you directly inherit one of the following exception types in a non-public class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class MyException : Exception   // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyException : Exception\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess modifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n\u003ccode\u003epublic\u003c/code\u003e for that to work.\u003c/p\u003e\n\u003cp\u003eIf a method throws a non-public exception, the best you can do on the caller’s side is to \u003ccode\u003ecatch\u003c/code\u003e the closest \u003ccode\u003epublic\u003c/code\u003e base\nof the class. However, you lose all the information that the new exception type carries.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue if you directly inherit one of the following exception types in a non-public class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class MyException : Exception   // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyException : Exception\n{\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess modifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3992",
    "name": "Assemblies should explicitly specify COM visibility",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssemblies should explicitly indicate whether they are meant to be COM visible or not. If the \u003ccode\u003eComVisibleAttribute\u003c/code\u003e is not present, the\ndefault is to make the content of the assembly visible to COM clients.\u003c/p\u003e\n\u003cp\u003eNote that COM visibility can be overridden for individual types and members.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary  // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly: System.Runtime.InteropServices.ComVisible(false)]\nnamespace MyLibrary\n{\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssemblies should explicitly indicate whether they are meant to be COM visible or not. If the \u003ccode\u003eComVisibleAttribute\u003c/code\u003e is not present, the\ndefault is to make the content of the assembly visible to COM clients.\u003c/p\u003e\n\u003cp\u003eNote that COM visibility can be overridden for individual types and members.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary  // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\n[assembly: System.Runtime.InteropServices.ComVisible(false)]\nnamespace MyLibrary\n{\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3874",
    "name": "\"out\" and \"ref\" parameters should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePassing a parameter by reference, which is what happens when you use the \u003ccode\u003eout\u003c/code\u003e or \u003ccode\u003eref\u003c/code\u003e parameter modifiers, means that the\nmethod will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change\nthe argument’s values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when\nit is what was intended, this is the sort of thing that’s difficult to get right, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eout\u003c/code\u003e or \u003ccode\u003eref\u003c/code\u003e is used on a non-\u003ccode\u003eOptional\u003c/code\u003e parameter in a public method.\n\u003ccode\u003eOptional\u003c/code\u003e parameters are covered by {rule:csharpsquid:S3447}.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void GetReply(\n         ref MyClass input, // Noncompliant\n         out string reply)  // Noncompliant\n{ ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic string GetReply(MyClass input)\n{ ... }\n\npublic bool TryGetReply(MyClass input, out string reply)\n{ ... }\n\npublic ReplyData GetReply(MyClass input)\n{ ... }\n\ninternal void GetReply(ref MyClass input, out string reply)\n{ ... }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise issues for:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e non-public methods \u003c/li\u003e\n  \u003cli\u003e methods with only \u0027out\u0027 parameters, name starting with \"Try\" and return type bool. \u003c/li\u003e\n  \u003cli\u003e interface implementation methods \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePassing a parameter by reference, which is what happens when you use the \u003ccode\u003eout\u003c/code\u003e or \u003ccode\u003eref\u003c/code\u003e parameter modifiers, means that the\nmethod will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change\nthe argument’s values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when\nit is what was intended, this is the sort of thing that’s difficult to get right, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eout\u003c/code\u003e or \u003ccode\u003eref\u003c/code\u003e is used on a non-\u003ccode\u003eOptional\u003c/code\u003e parameter in a public method.\n\u003ccode\u003eOptional\u003c/code\u003e parameters are covered by {rule:csharpsquid:S3447}.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void GetReply(\n         ref MyClass input, // Noncompliant\n         out string reply)  // Noncompliant\n{ ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic string GetReply(MyClass input)\n{ ... }\n\npublic bool TryGetReply(MyClass input, out string reply)\n{ ... }\n\npublic ReplyData GetReply(MyClass input)\n{ ... }\n\ninternal void GetReply(ref MyClass input, out string reply)\n{ ... }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise issues for:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e non-public methods \u003c/li\u003e\n  \u003cli\u003e methods with only \u0027out\u0027 parameters, name starting with \"Try\" and return type bool. \u003c/li\u003e\n  \u003cli\u003e interface implementation methods \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3995",
    "name": "URI return values should not be strings",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method has a \u003ccode\u003estring\u003c/code\u003e return type and its name contains \"Uri\", \"Urn\", or \"Url\" or begins with \"uri\",\n\"urn\", or \"url\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public string GetParentUri() // Noncompliant\n      {\n         return \"http://www.mysite.com\";\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public Uri GetParentUri()\n      {\n         return new URI(\"http://www.mysite.com\");\n      }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method has a \u003ccode\u003estring\u003c/code\u003e return type and its name contains \"Uri\", \"Urn\", or \"Url\" or begins with \"uri\",\n\"urn\", or \"url\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public string GetParentUri() // Noncompliant\n      {\n         return \"http://www.mysite.com\";\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public Uri GetParentUri()\n      {\n         return new URI(\"http://www.mysite.com\");\n      }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1696",
    "name": "NullReferenceException should not be caught",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eNullReferenceException\u003c/code\u003e should be avoided, not caught. Any situation in which \u003ccode\u003eNullReferenceException\u003c/code\u003e is explicitly caught\ncan easily be converted to a \u003ccode\u003enull\u003c/code\u003e test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch\nof the conditional.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int GetLengthPlusTwo(string str)\n{\n    int length \u003d 2;\n    try\n    {\n       length +\u003d str.Length;\n    }\n    catch (NullReferenceException e)\n    {\n        log.info(\"argument was null\");\n    }\n    return length;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic int GetLengthPlusTwo(string str)\n{\n    int length \u003d 2;\n\n    if (str !\u003d null)\n    {\n        length +\u003d str.Length;\n    }\n    else\n    {\n        log.info(\"argument was null\");\n    }\n    return length;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/395\"\u003eCWE-395 - Use of NullPointerException Catch to Detect NULL Pointer Dereference\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eNullReferenceException\u003c/code\u003e should be avoided, not caught. Any situation in which \u003ccode\u003eNullReferenceException\u003c/code\u003e is explicitly caught\ncan easily be converted to a \u003ccode\u003enull\u003c/code\u003e test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch\nof the conditional.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int GetLengthPlusTwo(string str)\n{\n    int length \u003d 2;\n    try\n    {\n       length +\u003d str.Length;\n    }\n    catch (NullReferenceException e)\n    {\n        log.info(\"argument was null\");\n    }\n    return length;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic int GetLengthPlusTwo(string str)\n{\n    int length \u003d 2;\n\n    if (str !\u003d null)\n    {\n        length +\u003d str.Length;\n    }\n    else\n    {\n        log.info(\"argument was null\");\n    }\n    return length;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/395\"\u003eCWE-395 - Use of NullPointerException Catch to Detect NULL Pointer Dereference\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3994",
    "name": "URI Parameters should not be strings",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred. At minimum, an overload of the method taking a \u003ccode\u003eSystem.Uri\u003c/code\u003e as a parameter should be\nprovided in each class that contains a method with an apparent Uri passed as a \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues when a method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\", and the type\ndoesn’t declare a corresponding overload taking an \u003ccode\u003eSystem.Uri\u003c/code\u003e parameter instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString) { } // Noncompliant\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred. At minimum, an overload of the method taking a \u003ccode\u003eSystem.Uri\u003c/code\u003e as a parameter should be\nprovided in each class that contains a method with an apparent Uri passed as a \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues when a method has a string parameter with a name containing \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\", and the type\ndoesn’t declare a corresponding overload taking an \u003ccode\u003eSystem.Uri\u003c/code\u003e parameter instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString) { } // Noncompliant\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3876",
    "name": "Strings or integral types should be used for indexers",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eStrings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and\npotentially a situation where a method should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int this[MyCustomClass index]  // Noncompliant\n{\n    // get and set accessors\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eStrings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and\npotentially a situation where a method should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int this[MyCustomClass index]  // Noncompliant\n{\n    // get and set accessors\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3997",
    "name": "String URI overloads should call \"System.Uri\" overloads",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when two overloads differ only by the string / \u003ccode\u003eUri\u003c/code\u003e parameter and the string overload doesn’t call the\n\u003ccode\u003eUri\u003c/code\u003e overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands\nto reason that the safer overload should be used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString) // Noncompliant\n      {\n         // No calls to FetResource(Uri)\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when two overloads differ only by the string / \u003ccode\u003eUri\u003c/code\u003e parameter and the string overload doesn’t call the\n\u003ccode\u003eUri\u003c/code\u003e overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands\nto reason that the safer overload should be used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString) // Noncompliant\n      {\n         // No calls to FetResource(Uri)\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3875",
    "name": "\"operator\u003d\u003d\" should not be overloaded on reference types",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of \u003ccode\u003e\u003d\u003d\u003c/code\u003e to compare two objects is expected to do a reference comparison. That is, it is expected to return \u003ccode\u003etrue\u003c/code\u003e if\nand only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by\ncallers.\u003c/p\u003e\n\u003cpre\u003e\npublic static bool operator \u003d\u003d(MyType x, MyType y) // Noncompliant: confusing for the caller\n{\n    // custom implementation\n}\n\u003c/pre\u003e\n\u003cp\u003eOn the other hand, overloading it to do exactly that is pointless; that’s what \u003ccode\u003e\u003d\u003d\u003c/code\u003e does by default.\u003c/p\u003e\n\u003cpre\u003e\npublic static bool operator \u003d\u003d(MyType x, MyType y) // Noncompliant: redundant\n{\n    if (x \u003d\u003d null)\n    {\n        return y \u003d\u003d null;\n    }\n\n    return object.ReferenceEquals(x,y);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes with overloaded \u003ccode\u003eoperator +\u003c/code\u003e or \u003ccode\u003eoperator -\u003c/code\u003e are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes that implement \u003ccode\u003eIComparable\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e most probably behave as value-type objects and are\n  ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of \u003ccode\u003e\u003d\u003d\u003c/code\u003e to compare two objects is expected to do a reference comparison. That is, it is expected to return \u003ccode\u003etrue\u003c/code\u003e if\nand only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by\ncallers.\u003c/p\u003e\n\u003cpre\u003e\npublic static bool operator \u003d\u003d(MyType x, MyType y) // Noncompliant: confusing for the caller\n{\n    // custom implementation\n}\n\u003c/pre\u003e\n\u003cp\u003eOn the other hand, overloading it to do exactly that is pointless; that’s what \u003ccode\u003e\u003d\u003d\u003c/code\u003e does by default.\u003c/p\u003e\n\u003cpre\u003e\npublic static bool operator \u003d\u003d(MyType x, MyType y) // Noncompliant: redundant\n{\n    if (x \u003d\u003d null)\n    {\n        return y \u003d\u003d null;\n    }\n\n    return object.ReferenceEquals(x,y);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes with overloaded \u003ccode\u003eoperator +\u003c/code\u003e or \u003ccode\u003eoperator -\u003c/code\u003e are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes that implement \u003ccode\u003eIComparable\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e most probably behave as value-type objects and are\n  ignored. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2302",
    "name": "\"nameof\" should be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use\n\u003ccode\u003enameof()\u003c/code\u003e, and the string that’s output will always be correct.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string in the \u003ccode\u003ethrow\u003c/code\u003e statement contains the name of one of the method parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid DoSomething(int someParameter, string anotherParam)\n{\n    if (someParameter \u0026lt; 0)\n    {\n        throw new ArgumentException(\"Bad argument\", \"someParameter\");  // Noncompliant\n    }\n    if (anotherParam \u003d\u003d null)\n    {\n        throw new Exception(\"anotherParam should not be null\"); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid DoSomething(int someParameter)\n{\n    if (someParameter \u0026lt; 0)\n    {\n        throw new ArgumentException(\"Bad argument\", nameof(someParameter));\n    }\n    if (anotherParam \u003d\u003d null)\n    {\n        throw new Exception($\"{nameof(anotherParam)} should not be null\");\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule doesn’t raise any issue when using C# \u0026lt; 6.0. \u003c/li\u003e\n  \u003cli\u003e When the parameter name is contained in a sentence inside the \u003ccode\u003ethrow\u003c/code\u003e statement string, the rule will raise an issue only if the\n  parameter name is at least 5 characters long. This is to avoid false positives. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use\n\u003ccode\u003enameof()\u003c/code\u003e, and the string that’s output will always be correct.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a string in the \u003ccode\u003ethrow\u003c/code\u003e statement contains the name of one of the method parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid DoSomething(int someParameter, string anotherParam)\n{\n    if (someParameter \u0026lt; 0)\n    {\n        throw new ArgumentException(\"Bad argument\", \"someParameter\");  // Noncompliant\n    }\n    if (anotherParam \u003d\u003d null)\n    {\n        throw new Exception(\"anotherParam should not be null\"); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid DoSomething(int someParameter)\n{\n    if (someParameter \u0026lt; 0)\n    {\n        throw new ArgumentException(\"Bad argument\", nameof(someParameter));\n    }\n    if (anotherParam \u003d\u003d null)\n    {\n        throw new Exception($\"{nameof(anotherParam)} should not be null\");\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule doesn’t raise any issue when using C# \u0026lt; 6.0. \u003c/li\u003e\n  \u003cli\u003e When the parameter name is contained in a sentence inside the \u003ccode\u003ethrow\u003c/code\u003e statement string, the rule will raise an issue only if the\n  parameter name is at least 5 characters long. This is to avoid false positives. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1698",
    "name": "\"\u003d\u003d\" should not be used when \"Equals\" is overridden",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the equality \u003ccode\u003e\u003d\u003d\u003c/code\u003e and inequality \u003ccode\u003e!\u003d\u003c/code\u003e operators to compare two objects generally works. The operators can be\noverloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e resolves to reference equality, which may result in unexpected behavior if implementing classes override \u003ccode\u003eEquals\u003c/code\u003e.\nSimilarly, when a class overrides \u003ccode\u003eEquals\u003c/code\u003e, but instances are compared with non-overloaded \u003ccode\u003e\u003d\u003d\u003c/code\u003e, there is a high chance that\nvalue comparison was meant instead of the reference one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (instance1 \u003d\u003d instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on comparisons of \u003ccode\u003eSystem.Type\u003c/code\u003e instances and on comparisons inside \u003ccode\u003eEquals\u003c/code\u003e overrides.\u003c/p\u003e\n\u003cp\u003eIt also does not raise an issue when one of the operands is \u003ccode\u003enull\u003c/code\u003e nor when one of the operand is cast to \u003ccode\u003eobject\u003c/code\u003e (because\nin this case we want to ensure reference equality even if some \u003ccode\u003e\u003d\u003d\u003c/code\u003e overload is present).\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/595\"\u003eCWE-595 - Comparison of Object References Instead of Object Contents\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/597\"\u003eCWE-597 - Use of Wrong Operator in String Comparison\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the equality \u003ccode\u003e\u003d\u003d\u003c/code\u003e and inequality \u003ccode\u003e!\u003d\u003c/code\u003e operators to compare two objects generally works. The operators can be\noverloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e resolves to reference equality, which may result in unexpected behavior if implementing classes override \u003ccode\u003eEquals\u003c/code\u003e.\nSimilarly, when a class overrides \u003ccode\u003eEquals\u003c/code\u003e, but instances are compared with non-overloaded \u003ccode\u003e\u003d\u003d\u003c/code\u003e, there is a high chance that\nvalue comparison was meant instead of the reference one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (instance1 \u003d\u003d instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals\n        {\n            Console.WriteLine(\"Equal\");\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on comparisons of \u003ccode\u003eSystem.Type\u003c/code\u003e instances and on comparisons inside \u003ccode\u003eEquals\u003c/code\u003e overrides.\u003c/p\u003e\n\u003cp\u003eIt also does not raise an issue when one of the operands is \u003ccode\u003enull\u003c/code\u003e nor when one of the operand is cast to \u003ccode\u003eobject\u003c/code\u003e (because\nin this case we want to ensure reference equality even if some \u003ccode\u003e\u003d\u003d\u003c/code\u003e overload is present).\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/595\"\u003eCWE-595 - Comparison of Object References Instead of Object Contents\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/597\"\u003eCWE-597 - Use of Wrong Operator in String Comparison\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3996",
    "name": "URI properties should not be strings",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a property is a string type and its name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      string myUri;\n\n      public string MyUri // Noncompliant\n      {\n         get { return myURI; }\n         set { myUri \u003d value; }\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      Uri myUri;\n\n      public Uri MyUri\n      {\n         get { return myURI; }\n         set { myUri \u003d value; }\n      }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eString representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The \u003ccode\u003eSystem.Uri\u003c/code\u003e\nclass is a safe alternative and should be preferred.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a property is a string type and its name contains \"uri\", \"Uri\", \"urn\", \"Urn\", \"url\" or \"Url\".\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      string myUri;\n\n      public string MyUri // Noncompliant\n      {\n         get { return myURI; }\n         set { myUri \u003d value; }\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      Uri myUri;\n\n      public Uri MyUri\n      {\n         get { return myURI; }\n         set { myUri \u003d value; }\n      }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2612",
    "name": "Setting loose file permissions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Unix, \"others\" class refers to all users except the owner of the file and the members of the group assigned to this file.\u003c/p\u003e\n\u003cp\u003eIn Windows, \"Everyone\" group is similar and includes all members of the Authenticated Users group as well as the built-in Guest account, and\nseveral other built-in security accounts.\u003c/p\u003e\n\u003cp\u003eGranting permissions to these groups can lead to unintended access to files.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The application is designed to be run on a multi-user environment. \u003c/li\u003e\n  \u003cli\u003e Corresponding files and directories may contain confidential information. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e.Net Framework:\u003c/p\u003e\n\u003cpre\u003e\nvar unsafeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Allow);\n\nvar fileSecurity \u003d File.GetAccessControl(\"path\");\nfileSecurity.AddAccessRule(unsafeAccessRule); // Sensitive\nfileSecurity.SetAccessRule(unsafeAccessRule); // Sensitive\nFile.SetAccessControl(\"fileName\", fileSecurity);\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core\u003c/p\u003e\n\u003cpre\u003e\nvar fileInfo \u003d new FileInfo(\"path\");\nvar fileSecurity \u003d fileInfo.GetAccessControl();\n\nfileSecurity.AddAccessRule(new FileSystemAccessRule(\"Everyone\", FileSystemRights.Write, AccessControlType.Allow)); // Sensitive\nfileInfo.SetAccessControl(fileSecurity);\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core using Mono.Posix.NETStandard\u003c/p\u003e\n\u003cpre\u003e\nvar fileSystemEntry \u003d UnixFileSystemInfo.GetFileSystemEntry(\"path\");\nfileSystemEntry.FileAccessPermissions \u003d FileAccessPermissions.OtherReadWriteExecute; // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eThe most restrictive possible permissions should be assigned to files and directories.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e.Net Framework\u003c/p\u003e\n\u003cpre\u003e\nvar safeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Deny);\n\nvar fileSecurity \u003d File.GetAccessControl(\"path\");\nfileSecurity.AddAccessRule(safeAccessRule);\nFile.SetAccessControl(\"path\", fileSecurity);\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core\u003c/p\u003e\n\u003cpre\u003e\nvar safeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Deny);\n\nvar fileInfo \u003d new FileInfo(\"path\");\nvar fileSecurity \u003d fileInfo.GetAccessControl();\nfileSecurity.SetAccessRule(safeAccessRule);\nfileInfo.SetAccessControl(fileSecurity);\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core using Mono.Posix.NETStandard\u003c/p\u003e\n\u003cpre\u003e\nvar fs \u003d UnixFileSystemInfo.GetFileSystemEntry(\"path\");\nfs.FileAccessPermissions \u003d FileAccessPermissions.UserExecute;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eTop 10 2021 Category A4 - Insecure Design\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eTop 10 2017 Category A5 - Broken Access Control\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\"\u003eOWASP File Permission\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eCWE-732 - Incorrect Permission Assignment for Critical Resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/266\"\u003eCWE-266 - Incorrect Privilege Assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "csharpsquid:S2857",
    "name": "SQL keywords should be delimited by whitespace",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen concatenating strings, it is very easy to forget a whitespace.\u003c/p\u003e\n\u003cp\u003eIn some scenarios this might cause runtime errors, one of which is while creating an SQL query via concatenation:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring select \u003d \"SELECT p.FirstName, p.LastName, p.PhoneNumber\" +\n        \"FROM Person as p\" +    // Noncompliant: concatenation results in \"p.PhoneNumberFROM\"\n        \"WHERE p.Id \u003d @Id\";     // Noncompliant: concatenation results in \"pWHERE\"\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the spacing around SQL keywords appears to be missing, making the concatenated string invalid SQL syntax. It would\nrequire the user to add the appropriate whitespaces:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring select \u003d \"SELECT p.FirstName, p.LastName, p.PhoneNumber\" +\n        \" FROM Person as p\" +\n        \" WHERE p.Id \u003d @Id\";\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen concatenating strings, it is very easy to forget a whitespace.\u003c/p\u003e\n\u003cp\u003eIn some scenarios this might cause runtime errors, one of which is while creating an SQL query via concatenation:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring select \u003d \"SELECT p.FirstName, p.LastName, p.PhoneNumber\" +\n        \"FROM Person as p\" +    // Noncompliant: concatenation results in \"p.PhoneNumberFROM\"\n        \"WHERE p.Id \u003d @Id\";     // Noncompliant: concatenation results in \"pWHERE\"\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the spacing around SQL keywords appears to be missing, making the concatenated string invalid SQL syntax. It would\nrequire the user to add the appropriate whitespaces:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring select \u003d \"SELECT p.FirstName, p.LastName, p.PhoneNumber\" +\n        \" FROM Person as p\" +\n        \" WHERE p.Id \u003d @Id\";\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "sql"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2737",
    "name": "\"catch\" clauses should do more than rethrow",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d \"\";\ntry\n{\n  s \u003d File.ReadAllText(fileName);\n}\ncatch (Exception e)  // Noncompliant\n{\n  throw;\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d File.ReadAllText(fileName);\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d \"\";\ntry\n{\n  s \u003d File.ReadAllText(fileName);\n}\ncatch (Exception e)\n{\n  logger.LogError(e);\n  throw;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not generate issues for \u003ccode\u003ecatch\u003c/code\u003e blocks if they are followed by a \u003ccode\u003ecatch\u003c/code\u003e block for a more general exception\ntype that does more than just rethrowing the exception.\u003c/p\u003e\n\u003cpre\u003e\nvar s \u003d \"\"\ntry\n{\n    s \u003d File.ReadAllText(fileName);\n}\ncatch (IOException) // Compliant by exception: removing it would change the logic\n{\n    throw;\n}\ncatch (Exception)  // Compliant: does more than just rethrow\n{\n    logger.LogError(e);\n    throw;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d \"\";\ntry\n{\n  s \u003d File.ReadAllText(fileName);\n}\ncatch (Exception e)  // Noncompliant\n{\n  throw;\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d File.ReadAllText(fileName);\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nstring s \u003d \"\";\ntry\n{\n  s \u003d File.ReadAllText(fileName);\n}\ncatch (Exception e)\n{\n  logger.LogError(e);\n  throw;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not generate issues for \u003ccode\u003ecatch\u003c/code\u003e blocks if they are followed by a \u003ccode\u003ecatch\u003c/code\u003e block for a more general exception\ntype that does more than just rethrowing the exception.\u003c/p\u003e\n\u003cpre\u003e\nvar s \u003d \"\"\ntry\n{\n    s \u003d File.ReadAllText(fileName);\n}\ncatch (IOException) // Compliant by exception: removing it would change the logic\n{\n    throw;\n}\ncatch (Exception)  // Compliant: does more than just rethrow\n{\n    logger.LogError(e);\n    throw;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "error-handling",
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3949",
    "name": "Calculations should not overflow",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNumbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate or assign numbers\nbeyond those bounds, and the result will be a value that has silently wrapped around from the expected positive value to a negative one, or vice\nversa.\u003c/p\u003e\n\u003ch2\u003eNoncompliant code example\u003c/h2\u003e\n\u003cpre\u003e\npublic int Transform(int value)\n{\n    if (value \u0026lt;\u003d 0)\n    {\n        return value;\n    }\n    int number \u003d int.MaxValue;\n    return number + value;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant solution\u003c/h2\u003e\n\u003cpre\u003e\npublic long Transform(int value)\n{\n    if (value \u0026lt;\u003d 0)\n    {\n        return value;\n    }\n    long number \u003d int.MaxValue;\n    return number + value;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNumbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate or assign numbers\nbeyond those bounds, and the result will be a value that has silently wrapped around from the expected positive value to a negative one, or vice\nversa.\u003c/p\u003e\n\u003ch2\u003eNoncompliant code example\u003c/h2\u003e\n\u003cpre\u003e\npublic int Transform(int value)\n{\n    if (value \u0026lt;\u003d 0)\n    {\n        return value;\n    }\n    int number \u003d int.MaxValue;\n    return number + value;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant solution\u003c/h2\u003e\n\u003cpre\u003e\npublic long Transform(int value)\n{\n    if (value \u0026lt;\u003d 0)\n    {\n        return value;\n    }\n    long number \u003d int.MaxValue;\n    return number + value;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "overflow"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2970",
    "name": "Assertions should be complete",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule addresses the issue of incomplete assertions that can occur when using certain test frameworks. Incomplete assertions can lead to tests\nthat do not effectively verify anything. The rule enforces the use of complete assertions in specific cases, namely:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fluent Assertions: \u003ca href\u003d\"https://fluentassertions.com/introduction\"\u003eShould()\u003c/a\u003e is not followed by an assertion invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstring actual \u003d \"Using Fluent Assertions\";\nactual.Should(); // Noncompliant\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e NFluent: \u003ca href\u003d\"https://www.n-fluent.net\"\u003eCheck.That()\u003c/a\u003e is not followed by an assertion invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstring actual \u003d \"Using NFluent\";\nCheck.That(actual); // Noncompliant\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e NSubstitute: \u003ca href\u003d\"https://nsubstitute.github.io/help/received-calls\"\u003eReceived()\u003c/a\u003e is not followed by an invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ncommand.Received(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eIn such cases, what is intended to be a test doesn’t actually verify anything.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Fluent Assertions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFluent Assertions\u003c/code\u003e provides an interface for writing assertions, and it is important to ensure that \u003ccode\u003eShould()\u003c/code\u003e is properly\nused in conjunction with an assertion method.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring actual \u003d \"Hello World!\";\nactual.Should(); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring actual \u003d \"Hello World!\";\nactual.Should().Contain(\"Hello\");\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://fluentassertions.com/introduction\"\u003eFluent assertions: Should()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.n-fluent.net\"\u003eNFluent: Check.That()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nsubstitute.github.io/help/received-calls\"\u003eNSubstitute: Received()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule addresses the issue of incomplete assertions that can occur when using certain test frameworks. Incomplete assertions can lead to tests\nthat do not effectively verify anything. The rule enforces the use of complete assertions in specific cases, namely:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fluent Assertions: \u003ca href\u003d\"https://fluentassertions.com/introduction\"\u003eShould()\u003c/a\u003e is not followed by an assertion invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstring actual \u003d \"Using Fluent Assertions\";\nactual.Should(); // Noncompliant\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e NFluent: \u003ca href\u003d\"https://www.n-fluent.net\"\u003eCheck.That()\u003c/a\u003e is not followed by an assertion invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstring actual \u003d \"Using NFluent\";\nCheck.That(actual); // Noncompliant\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e NSubstitute: \u003ca href\u003d\"https://nsubstitute.github.io/help/received-calls\"\u003eReceived()\u003c/a\u003e is not followed by an invocation. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ncommand.Received(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eIn such cases, what is intended to be a test doesn’t actually verify anything.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eFluent Assertions\u003c/code\u003e provides an interface for writing assertions, and it is important to ensure that \u003ccode\u003eShould()\u003c/code\u003e is properly\nused in conjunction with an assertion method.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring actual \u003d \"Hello World!\";\nactual.Should(); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring actual \u003d \"Hello World!\";\nactual.Should().Contain(\"Hello\");\n\u003c/pre\u003e",
        "context": {
          "key": "fluent_assertions",
          "displayName": "Fluent Assertions"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eNFluent\u003c/code\u003e offers a syntax for assertions, and it’s important to follow \u003ccode\u003eCheck.That()\u003c/code\u003e with an assertion method to complete\nthe assertion.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nstring actual \u003d \"Hello World!\";\nCheck.That(actual); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nstring actual \u003d \"Hello World!\";\nCheck.That(actual).Contains(\"Hello\");\n\u003c/pre\u003e",
        "context": {
          "key": "nfluent",
          "displayName": "NFluent"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eNSubstitute\u003c/code\u003e is a mocking framework, and \u003ccode\u003eReceived()\u003c/code\u003e is used to verify that a specific method has been called. However,\ninvoking a method on the mock after calling \u003ccode\u003eReceived()\u003c/code\u003e is necessary to ensure the complete assertion.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\ncommand.Received(); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\ncommand.Received().Execute();\n\u003c/pre\u003e",
        "context": {
          "key": "nsubstitute",
          "displayName": "NSubstitute"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://fluentassertions.com/introduction\"\u003eFluent assertions: Should()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.n-fluent.net\"\u003eNFluent: Check.That()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nsubstitute.github.io/help/received-calls\"\u003eNSubstitute: Received()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2971",
    "name": "LINQ expressions should be simplified",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1\"\u003eIEnumerable\u003c/a\u003e language integrated queries (LINQ) can be\nsimplified. This not only improves readabilty but can also lead to improved performance.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eSimplify the LINQ expressions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.oftype\"\u003eOfType\u003c/a\u003e instead of \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select\"\u003eSelect\u003c/a\u003e with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003eas operator\u003c/a\u003e to type cast\n  elements and then null-checking in a query expression to choose elements based on type. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003eOfType\u003c/code\u003e instead of using \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eWhere\u003c/a\u003e and the\n  \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator\"\u003eis operator\u003c/a\u003e, followed\n  by a cast in a \u003ccode\u003eSelect\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Use an expression in \u003ccode\u003eAny\u003c/code\u003e instead of \u003ccode\u003eWhere(element ⇒ [expression]).Any()\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Use the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.count\"\u003eCount\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.length\"\u003eLength\u003c/a\u003e properties instead of the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count\"\u003eCount() method\u003c/a\u003e when it’s available (unless you use the\n  predicate parameter of the method for filtering). \u003c/li\u003e\n  \u003cli\u003e Don’t call \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eToArray()\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eToList()\u003c/a\u003e in the middle of a query chain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/\"\u003eEntity Framework\u003c/a\u003e may require enforcing client evaluations. Such queries should use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.asenumerable\"\u003eAsEnumerable()\u003c/a\u003e instead of \u003ccode\u003eToArray()\u003c/code\u003e or\n\u003ccode\u003eToList()\u003c/code\u003e in the middle of a query chain.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Foo(IEnumerable\u0026lt;Vehicle\u0026gt; seq, List\u0026lt;int\u0026gt; list)\n{\n    var result1 \u003d seq.Select(x \u003d\u0026gt; x as Car).Any(x \u003d\u0026gt; x !\u003d null);               // Noncompliant; use OfType\n    var result2 \u003d seq.Select(x \u003d\u0026gt; x as Car).Any(x \u003d\u0026gt; x !\u003d null \u0026amp;\u0026amp; x.HasOwner); // Noncompliant; use OfType before calling Any\n    var result3 \u003d seq.Where(x \u003d\u0026gt; x is Car).Select(x \u003d\u0026gt; x as Car);              // Noncompliant; use OfType\n    var result4 \u003d seq.Where(x \u003d\u0026gt; x is Car).Select(x \u003d\u0026gt; (Car)x);                // Noncompliant; use OfType\n    var result5 \u003d seq.Where(x \u003d\u0026gt; x.HasOwner).Any();                            // Noncompliant; use Any([predicate])\n\n    var num \u003d list.Count();                                                    // Noncompliant; use the Count property\n    var arr \u003d seq.ToList().ToArray();                                          // Noncompliant; ToList is not needed\n    var count \u003d seq.ToList().Count(x \u003d\u0026gt; x.HasOwner);                           // Noncompliant; ToList is not needed\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Foo(IEnumerable\u0026lt;Vehicle\u0026gt; seq, List\u0026lt;int\u0026gt; list)\n{\n    var result1 \u003d seq.OfType\u0026lt;Car\u0026gt;().Any();\n    var result2 \u003d seq.OfType\u0026lt;Car\u0026gt;().Any(x \u003d\u0026gt; x.HasOwner);\n    var result3 \u003d seq.OfType\u0026lt;Car\u0026gt;();\n    var result4 \u003d seq.OfType\u0026lt;Car\u0026gt;();\n    var result5 \u003d seq.Any(x \u003d\u0026gt; x.HasOwner);\n\n    var num \u003d list.Count;\n    var arr \u003d seq.ToArray();\n    var count \u003d seq.Count(x \u003d\u0026gt; x.HasOwner);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/linq\"\u003eLanguage Integrated Queries in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1\"\u003eIEnumerable\u003c/a\u003e language integrated queries (LINQ) can be\nsimplified. This not only improves readabilty but can also lead to improved performance.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eSimplify the LINQ expressions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.oftype\"\u003eOfType\u003c/a\u003e instead of \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select\"\u003eSelect\u003c/a\u003e with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator\"\u003eas operator\u003c/a\u003e to type cast\n  elements and then null-checking in a query expression to choose elements based on type. \u003c/li\u003e\n  \u003cli\u003e Use \u003ccode\u003eOfType\u003c/code\u003e instead of using \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eWhere\u003c/a\u003e and the\n  \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator\"\u003eis operator\u003c/a\u003e, followed\n  by a cast in a \u003ccode\u003eSelect\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Use an expression in \u003ccode\u003eAny\u003c/code\u003e instead of \u003ccode\u003eWhere(element ⇒ [expression]).Any()\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Use the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.count\"\u003eCount\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.length\"\u003eLength\u003c/a\u003e properties instead of the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count\"\u003eCount() method\u003c/a\u003e when it’s available (unless you use the\n  predicate parameter of the method for filtering). \u003c/li\u003e\n  \u003cli\u003e Don’t call \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eToArray()\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eToList()\u003c/a\u003e in the middle of a query chain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/\"\u003eEntity Framework\u003c/a\u003e may require enforcing client evaluations. Such queries should use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.asenumerable\"\u003eAsEnumerable()\u003c/a\u003e instead of \u003ccode\u003eToArray()\u003c/code\u003e or\n\u003ccode\u003eToList()\u003c/code\u003e in the middle of a query chain.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Foo(IEnumerable\u0026lt;Vehicle\u0026gt; seq, List\u0026lt;int\u0026gt; list)\n{\n    var result1 \u003d seq.Select(x \u003d\u0026gt; x as Car).Any(x \u003d\u0026gt; x !\u003d null);               // Noncompliant; use OfType\n    var result2 \u003d seq.Select(x \u003d\u0026gt; x as Car).Any(x \u003d\u0026gt; x !\u003d null \u0026amp;\u0026amp; x.HasOwner); // Noncompliant; use OfType before calling Any\n    var result3 \u003d seq.Where(x \u003d\u0026gt; x is Car).Select(x \u003d\u0026gt; x as Car);              // Noncompliant; use OfType\n    var result4 \u003d seq.Where(x \u003d\u0026gt; x is Car).Select(x \u003d\u0026gt; (Car)x);                // Noncompliant; use OfType\n    var result5 \u003d seq.Where(x \u003d\u0026gt; x.HasOwner).Any();                            // Noncompliant; use Any([predicate])\n\n    var num \u003d list.Count();                                                    // Noncompliant; use the Count property\n    var arr \u003d seq.ToList().ToArray();                                          // Noncompliant; ToList is not needed\n    var count \u003d seq.ToList().Count(x \u003d\u0026gt; x.HasOwner);                           // Noncompliant; ToList is not needed\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Foo(IEnumerable\u0026lt;Vehicle\u0026gt; seq, List\u0026lt;int\u0026gt; list)\n{\n    var result1 \u003d seq.OfType\u0026lt;Car\u0026gt;().Any();\n    var result2 \u003d seq.OfType\u0026lt;Car\u0026gt;().Any(x \u003d\u0026gt; x.HasOwner);\n    var result3 \u003d seq.OfType\u0026lt;Car\u0026gt;();\n    var result4 \u003d seq.OfType\u0026lt;Car\u0026gt;();\n    var result5 \u003d seq.Any(x \u003d\u0026gt; x.HasOwner);\n\n    var num \u003d list.Count;\n    var arr \u003d seq.ToArray();\n    var count \u003d seq.Count(x \u003d\u0026gt; x.HasOwner);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/linq\"\u003eLanguage Integrated Queries in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1764",
    "name": "Identical expressions should not be used on both sides of operators",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the same value on both sides of certain operators is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. For bitwise operators and most binary mathematical operators, having the\nsame value on both sides of an operator yields predictable results and should be simplified as well to avoid further code defects.\u003c/p\u003e\n\u003cp\u003eThis rule raises for the following operators.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\u003c/a\u003e\n  (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison operators\u003c/a\u003e\n  (\u003ccode\u003e\u0026lt; \u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e The following \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eLogical\n  Operators\u003c/a\u003e:\n    \u003cul\u003e\n      \u003cli\u003e Logical OR (\u003ccode\u003e|\u003c/code\u003e ) \u003c/li\u003e\n      \u003cli\u003e Conditional logical OR (\u003ccode\u003e||\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Logical AND (\u003ccode\u003e\u0026amp;\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Conditional logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Logical exclusive OR (\u003ccode\u003e^\u003c/code\u003e) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e The following \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003earithmetic\n  operators\u003c/a\u003e:\n    \u003cul\u003e\n      \u003cli\u003e Subtraction (\u003ccode\u003e-\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Division (\u003ccode\u003e\\\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Remainder operator (\u003ccode\u003e%\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Subtraction assignment operator (\u003ccode\u003e-\u003d\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Divide assignment operator (\u003ccode\u003e\\\u003d\u003c/code\u003e) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores the following operators:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Multiplication (*) \u003c/li\u003e\n  \u003cli\u003e Addition (+) \u003c/li\u003e\n  \u003cli\u003e Assignment (\u003d) \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eLeft-shift\n  (\u0026lt;\u0026lt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#right-shift-operator-\"\u003eRight-shift\n  (\u0026gt;\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif ( a \u003d\u003d a ) // always true\n{\n  doZ();\n}\nif ( a !\u003d a ) // always false\n{\n  doY();\n}\nif ( a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b ) // if the first one is true, the second one is too\n{\n  doX();\n}\nif ( a \u003d\u003d b || a \u003d\u003d b ) // if the first one is true, the second one is too\n{\n  doW();\n}\n\nint j \u003d 5 / 5; // always 1\nint k \u003d 5 - 5; // always 0\n\nc.Equals(c);    // always true\nObject.Equals(c, c); // always true\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003eArithmetic Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eBoolean logical operators\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise and shift\n  operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators - test if two\n  objects are equal or not\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/assignment-operator\"\u003eAssignment operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the same value on both sides of certain operators is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. For bitwise operators and most binary mathematical operators, having the\nsame value on both sides of an operator yields predictable results and should be simplified as well to avoid further code defects.\u003c/p\u003e\n\u003cp\u003eThis rule raises for the following operators.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\u003c/a\u003e\n  (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison operators\u003c/a\u003e\n  (\u003ccode\u003e\u0026lt; \u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e The following \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eLogical\n  Operators\u003c/a\u003e:\n    \u003cul\u003e\n      \u003cli\u003e Logical OR (\u003ccode\u003e|\u003c/code\u003e ) \u003c/li\u003e\n      \u003cli\u003e Conditional logical OR (\u003ccode\u003e||\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Logical AND (\u003ccode\u003e\u0026amp;\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Conditional logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Logical exclusive OR (\u003ccode\u003e^\u003c/code\u003e) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e The following \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003earithmetic\n  operators\u003c/a\u003e:\n    \u003cul\u003e\n      \u003cli\u003e Subtraction (\u003ccode\u003e-\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Division (\u003ccode\u003e\\\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Remainder operator (\u003ccode\u003e%\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Subtraction assignment operator (\u003ccode\u003e-\u003d\u003c/code\u003e) \u003c/li\u003e\n      \u003cli\u003e Divide assignment operator (\u003ccode\u003e\\\u003d\u003c/code\u003e) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores the following operators:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Multiplication (*) \u003c/li\u003e\n  \u003cli\u003e Addition (+) \u003c/li\u003e\n  \u003cli\u003e Assignment (\u003d) \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eLeft-shift\n  (\u0026lt;\u0026lt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#right-shift-operator-\"\u003eRight-shift\n  (\u0026gt;\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif ( a \u003d\u003d a ) // always true\n{\n  doZ();\n}\nif ( a !\u003d a ) // always false\n{\n  doY();\n}\nif ( a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b ) // if the first one is true, the second one is too\n{\n  doX();\n}\nif ( a \u003d\u003d b || a \u003d\u003d b ) // if the first one is true, the second one is too\n{\n  doW();\n}\n\nint j \u003d 5 / 5; // always 1\nint k \u003d 5 - 5; // always 0\n\nc.Equals(c);    // always true\nObject.Equals(c, c); // always true\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003eArithmetic Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\"\u003eBoolean logical operators\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise and shift\n  operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators - test if two\n  objects are equal or not\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003eComparison operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/assignment-operator\"\u003eAssignment operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1643",
    "name": "Strings should not be concatenated using \u0027+\u0027 in a loop",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstring str \u003d \"\";\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.Length ; ++i)\n{\n  str \u003d str + arrayOfStrings[i];\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nStringBuilder bld \u003d new StringBuilder();\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.Length; ++i)\n{\n  bld.Append(arrayOfStrings[i]);\n}\nstring str \u003d bld.ToString();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstring str \u003d \"\";\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.Length ; ++i)\n{\n  str \u003d str + arrayOfStrings[i];\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nStringBuilder bld \u003d new StringBuilder();\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.Length; ++i)\n{\n  bld.Append(arrayOfStrings[i]);\n}\nstring str \u003d bld.ToString();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3937",
    "name": "Number patterns should be regular",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when underscores (\u003ccode\u003e_\u003c/code\u003e) are used to break a number into irregular subgroups.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint thousand \u003d 100_0;\nint tenThousand \u003d 100_00;\nint million \u003d 1_000_00_000;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint thousand \u003d 1000;\nint tenThousand \u003d 10_000;\nint tenThousandWithout \u003d 10000;\nint duos \u003d 1_00_00;\nint million \u003d 100_000_000;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when underscores (\u003ccode\u003e_\u003c/code\u003e) are used to break a number into irregular subgroups.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint thousand \u003d 100_0;\nint tenThousand \u003d 100_00;\nint million \u003d 1_000_00_000;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint thousand \u003d 1000;\nint tenThousand \u003d 10_000;\nint tenThousandWithout \u003d 10000;\nint duos \u003d 1_00_00;\nint million \u003d 100_000_000;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1871",
    "name": "Two branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10)\n{\n  DoFirst();\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) // Noncompliant; duplicates first condition\n{\n  DoFirst();\n  DoTheThing();\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (i)\n{\n  case 1:\n    DoFirst();\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    DoFirst();\n    DoSomething();\n    break;\n  default:\n    DoTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is truly needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eif\u003c/code\u003e chain they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif ((a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) || (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50))\n{\n  DoFirst();\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nswitch (i)\n{\n  case 1:\n  case 3:\n    DoFirst();\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  default:\n    DoTheRest();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10)\n{\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50)    //no issue, usually this is done on purpose to increase the readability\n{\n  DoTheThing();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In the case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with\ndefault clauses, rule {rule:csharpsquid:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1)\n{\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n}\nelse if (a \u003d\u003d 2)\n{\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10)\n{\n  DoFirst();\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) // Noncompliant; duplicates first condition\n{\n  DoFirst();\n  DoTheThing();\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (i)\n{\n  case 1:\n    DoFirst();\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    DoFirst();\n    DoSomething();\n    break;\n  default:\n    DoTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is truly needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eif\u003c/code\u003e chain they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif ((a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) || (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50))\n{\n  DoFirst();\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nswitch (i)\n{\n  case 1:\n  case 3:\n    DoFirst();\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  default:\n    DoTheRest();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10)\n{\n  DoTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50)    //no issue, usually this is done on purpose to increase the readability\n{\n  DoTheThing();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In the case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with\ndefault clauses, rule {rule:csharpsquid:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif(a \u003d\u003d 1)\n{\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n}\nelse if (a \u003d\u003d 2)\n{\n  doSomething();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1751",
    "name": "Loops with at most one iteration should be refactored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements\"\u003eloop statement\u003c/a\u003e with at most one\niteration is equivalent to an \u003ccode\u003eif\u003c/code\u003e statement; the following block is executed only once.\u003c/p\u003e\n\u003cp\u003eIf the initial intention was to conditionally execute the block only once, an \u003ccode\u003eif\u003c/code\u003e statement should be used instead. If that was not the\ninitial intention, the block of the loop should be fixed so the block is executed multiple times.\u003c/p\u003e\n\u003cp\u003eA loop statement with at most one iteration can happen when a statement unconditionally transfers control, such as a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements\"\u003ejump statement\u003c/a\u003e or a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003ethrow\nstatement\u003c/a\u003e, is misplaced inside the loop block.\u003c/p\u003e\n\u003cp\u003eThis rule raises when the following statements are misplaced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-break-statement\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-continue-statement\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-return-statement\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic object Method(IEnumerable\u0026lt;object\u0026gt; items)\n{\n    for (int i \u003d 0; i \u0026lt; 10; i++)\n    {\n        Console.WriteLine(i);\n        break; // Noncompliant: loop only executes once\n    }\n\n    foreach (object item in items)\n    {\n        return item; // Noncompliant: loop only executes once\n    }\n    return null;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic object Method(IEnumerable\u0026lt;object\u0026gt; items)\n{\n    for (int i \u003d 0; i \u0026lt; 10; i++)\n    {\n        Console.WriteLine(i);\n    }\n\n    var item \u003d items.FirstOrDefault();\n    if (item !\u003d null)\n    {\n        return item;\n    }\n    return null;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements\"\u003eIteration\n  statements - \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003eforeach\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, and \u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements\"\u003eJump statements -\n  \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, \u003ccode\u003ereturn\u003c/code\u003e, and \u003ccode\u003egoto\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003eThe\n  \u003ccode\u003ethrow\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements\"\u003eloop statement\u003c/a\u003e with at most one\niteration is equivalent to an \u003ccode\u003eif\u003c/code\u003e statement; the following block is executed only once.\u003c/p\u003e\n\u003cp\u003eIf the initial intention was to conditionally execute the block only once, an \u003ccode\u003eif\u003c/code\u003e statement should be used instead. If that was not the\ninitial intention, the block of the loop should be fixed so the block is executed multiple times.\u003c/p\u003e\n\u003cp\u003eA loop statement with at most one iteration can happen when a statement unconditionally transfers control, such as a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements\"\u003ejump statement\u003c/a\u003e or a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003ethrow\nstatement\u003c/a\u003e, is misplaced inside the loop block.\u003c/p\u003e\n\u003cp\u003eThis rule raises when the following statements are misplaced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-break-statement\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-continue-statement\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements#the-return-statement\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic object Method(IEnumerable\u0026lt;object\u0026gt; items)\n{\n    for (int i \u003d 0; i \u0026lt; 10; i++)\n    {\n        Console.WriteLine(i);\n        break; // Noncompliant: loop only executes once\n    }\n\n    foreach (object item in items)\n    {\n        return item; // Noncompliant: loop only executes once\n    }\n    return null;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic object Method(IEnumerable\u0026lt;object\u0026gt; items)\n{\n    for (int i \u003d 0; i \u0026lt; 10; i++)\n    {\n        Console.WriteLine(i);\n    }\n\n    var item \u003d items.FirstOrDefault();\n    if (item !\u003d null)\n    {\n        return item;\n    }\n    return null;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements\"\u003eIteration\n  statements - \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003eforeach\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, and \u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/jump-statements\"\u003eJump statements -\n  \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, \u003ccode\u003ereturn\u003c/code\u003e, and \u003ccode\u003egoto\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-throw-statement\"\u003eThe\n  \u003ccode\u003ethrow\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1994",
    "name": "\"for\" loop increment clauses should modify the loops\u0027 counters",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loop’s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop’s increment clause if at all possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++)\n{\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loop’s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop’s increment clause if at all possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++)\n{\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3603",
    "name": "Methods with \"Pure\" attribute should return a value",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMarking a method with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e\u003c/a\u003e\nattribute indicates that the method doesn’t make any visible state changes. Therefore, a \u003ccode\u003ePure\u003c/code\u003e method should return a result otherwise it\nindicates a no-operation call.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ePure\u003c/code\u003e on a \u003ccode\u003evoid\u003c/code\u003e method is either by mistake or the method is not doing a meaningful task.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Person\n{\n  private int age;\n\n  [Pure] // Noncompliant: The method makes a state change\n  void ConfigureAge(int age) \u003d\u0026gt;\n    this.age \u003d age;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Person\n{\n  private int age;\n\n  void ConfigureAge(int age) \u003d\u0026gt;\n    this.age \u003d age;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003ePureAttribute Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMarking a method with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e\u003c/a\u003e\nattribute indicates that the method doesn’t make any visible state changes. Therefore, a \u003ccode\u003ePure\u003c/code\u003e method should return a result otherwise it\nindicates a no-operation call.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ePure\u003c/code\u003e on a \u003ccode\u003evoid\u003c/code\u003e method is either by mistake or the method is not doing a meaningful task.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Person\n{\n  private int age;\n\n  [Pure] // Noncompliant: The method makes a state change\n  void ConfigureAge(int age) \u003d\u0026gt;\n    this.age \u003d age;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Person\n{\n  private int age;\n\n  void ConfigureAge(int age) \u003d\u0026gt;\n    this.age \u003d age;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003ePureAttribute Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3966",
    "name": "Objects should not be disposed more than once",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDisposing an object twice in the same method, either with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing\u003c/a\u003e keyword or by calling \u003ccode\u003eDispose\u003c/code\u003e\ndirectly, is confusing and error-prone. For example, another developer might try to use an already-disposed object, or there can be runtime errors for\nspecific paths in the code.\u003c/p\u003e\n\u003cp\u003eIn addition, even if the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003edocumentation\u003c/a\u003e explicitly states that\ncalling the \u003ccode\u003eDispose\u003c/code\u003e method multiple times should not throw an exception, some implementations still do it. Thus it is safer to not\ndispose of an object twice when possible.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar foo \u003d new Disposable();\nfoo.Dispose();\nfoo.Dispose(); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing (var bar \u003d new Disposable()) // Noncompliant\n{\n    bar.Dispose();\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar foo \u003d new Disposable();\nfoo.Dispose();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing (var bar \u003d new Disposable()) // Compliant\n{\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?redirectedfrom\u003dMSDN#System_IDisposable_Dispose\"\u003eDispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iasyncdisposable.disposeasync\"\u003eDisposeAsync method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eUsing statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDisposing an object twice in the same method, either with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing\u003c/a\u003e keyword or by calling \u003ccode\u003eDispose\u003c/code\u003e\ndirectly, is confusing and error-prone. For example, another developer might try to use an already-disposed object, or there can be runtime errors for\nspecific paths in the code.\u003c/p\u003e\n\u003cp\u003eIn addition, even if the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003edocumentation\u003c/a\u003e explicitly states that\ncalling the \u003ccode\u003eDispose\u003c/code\u003e method multiple times should not throw an exception, some implementations still do it. Thus it is safer to not\ndispose of an object twice when possible.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar foo \u003d new Disposable();\nfoo.Dispose();\nfoo.Dispose(); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing (var bar \u003d new Disposable()) // Noncompliant\n{\n    bar.Dispose();\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar foo \u003d new Disposable();\nfoo.Dispose();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing (var bar \u003d new Disposable()) // Compliant\n{\n\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?redirectedfrom\u003dMSDN#System_IDisposable_Dispose\"\u003eDispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iasyncdisposable.disposeasync\"\u003eDisposeAsync method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eUsing statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2997",
    "name": "\"IDisposables\" created in a \"using\" statement should not be returned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you use a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003e\u003ccode\u003eusing\u003c/code\u003e statement\u003c/a\u003e, the\ngoal is to ensure the correct disposal of an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003e\u003ccode\u003eIDisposable\u003c/code\u003e\u003c/a\u003e\ninstance when the control leaves the \u003ccode\u003eusing\u003c/code\u003e statement block.\u003c/p\u003e\n\u003cp\u003eIf you return that \u003ccode\u003eIDisposable\u003c/code\u003e instance inside the block, \u003ccode\u003eusing\u003c/code\u003e will dispose it before the caller can use it, likely\ncausing exceptions at runtime. You should either remove \u003ccode\u003eusing\u003c/code\u003e statement or avoid returning the \u003ccode\u003eIDisposable\u003c/code\u003e in the\n\u003ccode\u003eusing\u003c/code\u003e statement block.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic FileStream WriteToFile(string path, string text)\n{\n  using (var fs \u003d File.Create(path)) // Noncompliant: \u0027fs\u0027 is disposed at the end of the using scope\n  {\n    var bytes \u003d Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n    return fs;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic FileStream WriteToFile(string path, string text)\n{\n  var fs \u003d File.Create(path);\n  var bytes \u003d Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs; // Compliant: \u0027fs\u0027 is not disposed once the end of the scope is reached and the caller can use it\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing statement - ensure the\n  correct use of disposable objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you use a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003e\u003ccode\u003eusing\u003c/code\u003e statement\u003c/a\u003e, the\ngoal is to ensure the correct disposal of an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003e\u003ccode\u003eIDisposable\u003c/code\u003e\u003c/a\u003e\ninstance when the control leaves the \u003ccode\u003eusing\u003c/code\u003e statement block.\u003c/p\u003e\n\u003cp\u003eIf you return that \u003ccode\u003eIDisposable\u003c/code\u003e instance inside the block, \u003ccode\u003eusing\u003c/code\u003e will dispose it before the caller can use it, likely\ncausing exceptions at runtime. You should either remove \u003ccode\u003eusing\u003c/code\u003e statement or avoid returning the \u003ccode\u003eIDisposable\u003c/code\u003e in the\n\u003ccode\u003eusing\u003c/code\u003e statement block.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic FileStream WriteToFile(string path, string text)\n{\n  using (var fs \u003d File.Create(path)) // Noncompliant: \u0027fs\u0027 is disposed at the end of the using scope\n  {\n    var bytes \u003d Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n    return fs;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic FileStream WriteToFile(string path, string text)\n{\n  var fs \u003d File.Create(path);\n  var bytes \u003d Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs; // Compliant: \u0027fs\u0027 is not disposed once the end of the scope is reached and the caller can use it\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/using\"\u003eusing statement - ensure the\n  correct use of disposable objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable\"\u003eIDisposable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2755",
    "name": "XML parsers should not be vulnerable to XXE attacks",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows the usage of external entities in XML.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eExternal Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eExposing sensitive data\u003c/h4\u003e\n\u003cp\u003eOne significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.\u003c/p\u003e\n\u003ch4\u003eExhausting system resources\u003c/h4\u003e\n\u003cp\u003eAnother consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the system’s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.\u003c/p\u003e\n\u003ch4\u003eForging requests\u003c/h4\u003e\n\u003cp\u003eXXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Xml;\n\npublic static void decode()\n{\n    XmlDocument parser \u003d new XmlDocument();\n    parser.XmlResolver \u003d new XmlUrlResolver(); // Noncompliant\n    parser.LoadXml(\"xxe.xml\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eXmlDocument\u003c/code\u003e is safe by default since .NET Framework 4.5.2. For older versions, set \u003ccode\u003eXmlResolver\u003c/code\u003e explicitly to\n\u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Xml;\n\npublic static void decode()\n{\n    XmlDocument parser \u003d new XmlDocument();\n    parser.XmlResolver \u003d null;\n    parser.LoadXml(\"xxe.xml\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eDisable external entities\u003c/h4\u003e\n\u003cp\u003eThe most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.\u003c/p\u003e\n\u003cp\u003eIf external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.\u003cbr\u003e You should rely on features provided by your XML parser to restrict the external entities.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\"\u003eTop 10 2017 Category A4 - XML External\n  Entities (XXE)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/611\"\u003eCWE-611 - Information Exposure Through XML External Entity Reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/827\"\u003eCWE-827 - Improper Control of Document Type Definition\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows the usage of external entities in XML.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExternal Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eExposing sensitive data\u003c/h4\u003e\n\u003cp\u003eOne significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.\u003c/p\u003e\n\u003ch4\u003eExhausting system resources\u003c/h4\u003e\n\u003cp\u003eAnother consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the system’s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.\u003c/p\u003e\n\u003ch4\u003eForging requests\u003c/h4\u003e\n\u003cp\u003eXXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Xml;\n\npublic static void decode()\n{\n    XmlDocument parser \u003d new XmlDocument();\n    parser.XmlResolver \u003d new XmlUrlResolver(); // Noncompliant\n    parser.LoadXml(\"xxe.xml\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eXmlDocument\u003c/code\u003e is safe by default since .NET Framework 4.5.2. For older versions, set \u003ccode\u003eXmlResolver\u003c/code\u003e explicitly to\n\u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Xml;\n\npublic static void decode()\n{\n    XmlDocument parser \u003d new XmlDocument();\n    parser.XmlResolver \u003d null;\n    parser.LoadXml(\"xxe.xml\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eDisable external entities\u003c/h4\u003e\n\u003cp\u003eThe most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.\u003c/p\u003e\n\u003cp\u003eIf external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.\u003cbr\u003e You should rely on features provided by your XML parser to restrict the external entities.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\"\u003eTop 10 2017 Category A4 - XML External\n  Entities (XXE)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/611\"\u003eCWE-611 - Information Exposure Through XML External Entity Reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/827\"\u003eCWE-827 - Improper Control of Document Type Definition\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3604",
    "name": "Member initializer values should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same\ntime is redundant; the inline initialization will be overridden.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Person\n{\n  int age \u003d 42; // Noncompliant\n  public Person(int age)\n  {\n    this.age \u003d age;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Person\n{\n  int age;\n  public Person(int age)\n  {\n    this.age \u003d age;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then\n{rule:csharpsquid:S3052} already reports an issue on the initialization.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same\ntime is redundant; the inline initialization will be overridden.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Person\n{\n  int age \u003d 42; // Noncompliant\n  public Person(int age)\n  {\n    this.age \u003d age;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Person\n{\n  int age;\n  public Person(int age)\n  {\n    this.age \u003d age;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then\n{rule:csharpsquid:S3052} already reports an issue on the initialization.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3967",
    "name": "Multidimensional arrays should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements\ncan be of different sizes, which avoids wasting memory space.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint [,] myArray \u003d  // Noncompliant\n    {\n        {1,2,3,4},\n        {5,6,7,0},\n        {8,0,0,0},\n        {9,0,0,0}\n    };\n// ...\nmyArray[1,1] \u003d 0;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint[][] myArray \u003d\n    {\n        new int[] {1,2,3,4},\n        new int[] {5,6,7},\n        new int[] {8},\n        new int[] {9}\n    };\n// ...\nmyArray[1][1] \u003d 0;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements\ncan be of different sizes, which avoids wasting memory space.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint [,] myArray \u003d  // Noncompliant\n    {\n        {1,2,3,4},\n        {5,6,7,0},\n        {8,0,0,0},\n        {9,0,0,0}\n    };\n// ...\nmyArray[1,1] \u003d 0;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint[][] myArray \u003d\n    {\n        new int[] {1,2,3,4},\n        new int[] {5,6,7},\n        new int[] {8},\n        new int[] {9}\n    };\n// ...\nmyArray[1][1] \u003d 0;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2757",
    "name": "Non-existent operators like \"\u003d+\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the intended behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget \u003d -num;  // target \u003d -3\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the intended behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nint target \u003d -5;\nint num \u003d 3;\n\ntarget \u003d -num;  // target \u003d -3\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1309",
    "name": "Track uses of in-source issue suppressions",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule allows you to track the usage of the \u003ccode\u003eSuppressMessage\u003c/code\u003e attributes and \u003ccode\u003e#pragma warning disable\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[SuppressMessage(\"\", \"S100\")]\n...\n\n#pragma warning disable S100\n...\n#pragma warning restore S100\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule allows you to track the usage of the \u003ccode\u003eSuppressMessage\u003c/code\u003e attributes and \u003ccode\u003e#pragma warning disable\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[SuppressMessage(\"\", \"S100\")]\n...\n\n#pragma warning disable S100\n...\n#pragma warning restore S100\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1541",
    "name": "Methods and properties should not be too complex",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be\ndifficult to understand and therefore to maintain.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be\ndifficult to understand and therefore to maintain.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumFunctionComplexityThreshold": {
        "key": "maximumFunctionComplexityThreshold",
        "name": "maximumFunctionComplexityThreshold",
        "description": "The maximum authorized complexity.",
        "defaultValue": "10",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFunctionComplexityThreshold": "10"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3962",
    "name": "\"static readonly\" constants should be \"const\" instead",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe value of a \u003ccode\u003estatic readonly\u003c/code\u003e field is computed at runtime while the value of a \u003ccode\u003econst\u003c/code\u003e field is calculated at compile\ntime, which improves performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003estatic readonly\u003c/code\u003e field is initialized with a value that is computable at compile time.\u003c/p\u003e\n\u003cp\u003eAs specified by Microsoft, the list of types that can have a constant value are:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eC# type\u003c/th\u003e\n      \u003cth\u003e.Net Fwk type\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Boolean\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebyte\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Byte\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esbyte\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.SByte\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003echar\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Char\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Decimal\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Double\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Single\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int32\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003euint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt32\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eulong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eshort\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int16\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eushort\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt16\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.String\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static readonly int x \u003d 1;  // Noncompliant\n    static readonly int y \u003d x + 4; // Noncompliant\n    static readonly string s \u003d \"Bar\";  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    const int x \u003d 1;\n    const int y \u003d x + 4;\n    const string s \u003d \"Bar\";\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe value of a \u003ccode\u003estatic readonly\u003c/code\u003e field is computed at runtime while the value of a \u003ccode\u003econst\u003c/code\u003e field is calculated at compile\ntime, which improves performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003estatic readonly\u003c/code\u003e field is initialized with a value that is computable at compile time.\u003c/p\u003e\n\u003cp\u003eAs specified by Microsoft, the list of types that can have a constant value are:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eC# type\u003c/th\u003e\n      \u003cth\u003e.Net Fwk type\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Boolean\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebyte\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Byte\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esbyte\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.SByte\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003echar\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Char\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Decimal\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Double\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Single\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int32\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003euint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt32\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eulong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eshort\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.Int16\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eushort\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.UInt16\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSystem.String\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static readonly int x \u003d 1;  // Noncompliant\n    static readonly int y \u003d x + 4; // Noncompliant\n    static readonly string s \u003d \"Bar\";  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    const int x \u003d 1;\n    const int y \u003d x + 4;\n    const string s \u003d \"Bar\";\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1301",
    "name": "\"switch\" statements should have at least 3 \"case\" clauses",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements and expressions are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003eswitch\u003c/code\u003e statement or expression is simple enough, the code will be more readable with a single \u003ccode\u003eif\u003c/code\u003e,\n\u003ccode\u003eif-else\u003c/code\u003e or ternary conditional operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (variable)\n{\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\nvar foo \u003d variable switch\n{\n  0 \u003d\u0026gt; doSomething(),\n  _ \u003d\u0026gt; doSomethingElse(),\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (variable \u003d\u003d 0)\n{\n  doSomething();\n}\nelse\n{\n  doSomethingElse();\n}\n\nvar foo \u003d variable \u003d\u003d 0\n  ? doSomething()\n  : doSomethingElse();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements and expressions are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003eswitch\u003c/code\u003e statement or expression is simple enough, the code will be more readable with a single \u003ccode\u003eif\u003c/code\u003e,\n\u003ccode\u003eif-else\u003c/code\u003e or ternary conditional operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (variable)\n{\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\nvar foo \u003d variable switch\n{\n  0 \u003d\u0026gt; doSomething(),\n  _ \u003d\u0026gt; doSomethingElse(),\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (variable \u003d\u003d 0)\n{\n  doSomething();\n}\nelse\n{\n  doSomethingElse();\n}\n\nvar foo \u003d variable \u003d\u003d 0\n  ? doSomething()\n  : doSomethingElse();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2996",
    "name": "\"ThreadStatic\" fields should not be initialized",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an object has a field annotated with \u003ccode\u003eThreadStatic\u003c/code\u003e, that field is shared within a given thread, but unique across threads. Since a\nclass\u0027 static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial\nvalues.\u003c/p\u003e\n\u003cp\u003eInstead, allow such fields to be initialized to their default values or make the initialization lazy.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  [ThreadStatic]\n  public static object PerThreadObject \u003d new object(); // Noncompliant. Will be null in all the threads except the first one.\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  [ThreadStatic]\n  public static object _perThreadObject;\n  public static object PerThreadObject\n  {\n    get\n    {\n      if (_perThreadObject \u003d\u003d null)\n      {\n        _perThreadObject \u003d new object();\n      }\n      return _perThreadObject;\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an object has a field annotated with \u003ccode\u003eThreadStatic\u003c/code\u003e, that field is shared within a given thread, but unique across threads. Since a\nclass\u0027 static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial\nvalues.\u003c/p\u003e\n\u003cp\u003eInstead, allow such fields to be initialized to their default values or make the initialization lazy.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  [ThreadStatic]\n  public static object PerThreadObject \u003d new object(); // Noncompliant. Will be null in all the threads except the first one.\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  [ThreadStatic]\n  public static object _perThreadObject;\n  public static object PerThreadObject\n  {\n    get\n    {\n      if (_perThreadObject \u003d\u003d null)\n      {\n        _perThreadObject \u003d new object();\n      }\n      return _perThreadObject;\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3963",
    "name": "\"static\" fields should be initialized inline",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a \u003ccode\u003estatic\u003c/code\u003e constructor serves no other purpose that initializing \u003ccode\u003estatic\u003c/code\u003e fields, it comes with an unnecessary\nperformance cost because the compiler generates a check before each \u003ccode\u003estatic\u003c/code\u003e method or instance constructor invocation.\u003c/p\u003e\n\u003cp\u003eInstead, inline initialization is highly recommended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i;\n    static string s;\n\n    static Foo() // Noncompliant\n    {\n      i \u003d 3;\n      ResourceManager sm \u003d  new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      s \u003d sm.GetString(\"mystring\");\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i \u003d3;\n    static string s \u003d InitString();\n\n    static string InitString()\n    {\n      ResourceManager sm \u003d new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      return sm.GetString(\"mystring\");\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a \u003ccode\u003estatic\u003c/code\u003e constructor serves no other purpose that initializing \u003ccode\u003estatic\u003c/code\u003e fields, it comes with an unnecessary\nperformance cost because the compiler generates a check before each \u003ccode\u003estatic\u003c/code\u003e method or instance constructor invocation.\u003c/p\u003e\n\u003cp\u003eInstead, inline initialization is highly recommended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i;\n    static string s;\n\n    static Foo() // Noncompliant\n    {\n      i \u003d 3;\n      ResourceManager sm \u003d  new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      s \u003d sm.GetString(\"mystring\");\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i \u003d3;\n    static string s \u003d InitString();\n\n    static string InitString()\n    {\n      ResourceManager sm \u003d new ResourceManager(\"strings\", Assembly.GetExecutingAssembly());\n      return sm.GetString(\"mystring\");\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3600",
    "name": "\"params\" should not be introduced on overrides",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAdding \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params\"\u003eparams\u003c/a\u003e to a method override has no effect.\nThe compiler accepts it, but the callers won’t be able to benefit from the added modifier.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers) // Noncompliant, method can\u0027t be called with params syntax.\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params\"\u003eparams keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAdding \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params\"\u003eparams\u003c/a\u003e to a method override has no effect.\nThe compiler accepts it, but the callers won’t be able to benefit from the added modifier.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers) // Noncompliant, method can\u0027t be called with params syntax.\n  {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers)\n  {\n    ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/params\"\u003eparams keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2995",
    "name": "\"Object.ReferenceEquals\" should not be used for value types",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn C#, the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.referenceequals\"\u003e\u003ccode\u003eObject.ReferenceEquals\u003c/code\u003e\u003c/a\u003e method is\nused to compare two \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003ereference type\u003c/a\u003e\nvariables. If you use this method to compare two \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003evalue types\u003c/a\u003e, such as \u003ccode\u003eint\u003c/code\u003e,\n\u003ccode\u003efloat\u003c/code\u003e, or \u003ccode\u003ebool\u003c/code\u003e you will not get the expected results because value type variables contain an instance of the type and not a\nreference to it.\u003c/p\u003e\n\u003cp\u003eDue to value type variables containing directly an instance of the type, they can’t have the same reference, and using\n\u003ccode\u003eObject.ReferenceEquals\u003c/code\u003e to compare them will always return \u003ccode\u003efalse\u003c/code\u003e even if the compared variables have the same value.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhen comparing value types, prefer using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eObject.Equals\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNote that in the case of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003estructure types\u003c/a\u003e, it\nis recommended to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type#struct-example\"\u003eimplement\nvalue equality\u003c/a\u003e. If not, {rule:csharpsquid:S3898} might raise.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\nstruct MyStruct\n{\n    int valueA;\n    int valueB;\n}\n\nstatic class MyClass\n{\n    public static void Method(MyStruct struct1, MyStruct struct2)\n    {\n        if (Object.ReferenceEquals(struct1, struct2)) // Noncompliant: this will be always false\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\nstruct MyStruct : IEquatable\u0026lt;MyStruct\u0026gt;\n{\n    int valueA;\n    int valueB;\n\n    public bool Equals(MyStruct other) \u003d\u0026gt; valueA \u003d\u003d other.valueA \u0026amp;\u0026amp; valueB \u003d\u003d other.valueB;\n\n    public override bool Equals(object obj) \u003d\u0026gt; obj is MyStruct other \u0026amp;\u0026amp; Equals(other);\n\n    public override int GetHashCode() \u003d\u0026gt; HashCode.Combine(valueA, valueB);\n\n    public static bool operator \u003d\u003d(MyStruct lhs, MyStruct rhs) \u003d\u0026gt; lhs.Equals(rhs);\n\n    public static bool operator !\u003d(MyStruct lhs, MyStruct rhs) \u003d\u0026gt; !(lhs \u003d\u003d rhs);\n}\n\nstatic class MyClass\n{\n    public static void Method(MyStruct struct1, MyStruct struct2)\n    {\n        if (struct1.Equals(struct2)) // Compliant: value are compared\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.referenceequals\"\u003e\u003ccode\u003eObject.ReferenceEquals(Object,\n  Object)\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eObject.Equals\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003eValue types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\n  - test if two objects are equal or not\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type#struct-example\"\u003eHow to define value equality for a class or struct (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003eStructure types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3898} - Value types should implement \"IEquatable\u0026lt;T\u0026gt;\" \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn C#, the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.referenceequals\"\u003e\u003ccode\u003eObject.ReferenceEquals\u003c/code\u003e\u003c/a\u003e method is\nused to compare two \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003ereference type\u003c/a\u003e\nvariables. If you use this method to compare two \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003evalue types\u003c/a\u003e, such as \u003ccode\u003eint\u003c/code\u003e,\n\u003ccode\u003efloat\u003c/code\u003e, or \u003ccode\u003ebool\u003c/code\u003e you will not get the expected results because value type variables contain an instance of the type and not a\nreference to it.\u003c/p\u003e\n\u003cp\u003eDue to value type variables containing directly an instance of the type, they can’t have the same reference, and using\n\u003ccode\u003eObject.ReferenceEquals\u003c/code\u003e to compare them will always return \u003ccode\u003efalse\u003c/code\u003e even if the compared variables have the same value.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhen comparing value types, prefer using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eObject.Equals\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNote that in the case of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003estructure types\u003c/a\u003e, it\nis recommended to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type#struct-example\"\u003eimplement\nvalue equality\u003c/a\u003e. If not, {rule:csharpsquid:S3898} might raise.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\nstruct MyStruct\n{\n    int valueA;\n    int valueB;\n}\n\nstatic class MyClass\n{\n    public static void Method(MyStruct struct1, MyStruct struct2)\n    {\n        if (Object.ReferenceEquals(struct1, struct2)) // Noncompliant: this will be always false\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\nstruct MyStruct : IEquatable\u0026lt;MyStruct\u0026gt;\n{\n    int valueA;\n    int valueB;\n\n    public bool Equals(MyStruct other) \u003d\u0026gt; valueA \u003d\u003d other.valueA \u0026amp;\u0026amp; valueB \u003d\u003d other.valueB;\n\n    public override bool Equals(object obj) \u003d\u0026gt; obj is MyStruct other \u0026amp;\u0026amp; Equals(other);\n\n    public override int GetHashCode() \u003d\u0026gt; HashCode.Combine(valueA, valueB);\n\n    public static bool operator \u003d\u003d(MyStruct lhs, MyStruct rhs) \u003d\u0026gt; lhs.Equals(rhs);\n\n    public static bool operator !\u003d(MyStruct lhs, MyStruct rhs) \u003d\u0026gt; !(lhs \u003d\u003d rhs);\n}\n\nstatic class MyClass\n{\n    public static void Method(MyStruct struct1, MyStruct struct2)\n    {\n        if (struct1.Equals(struct2)) // Compliant: value are compared\n        {\n            // ...\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.referenceequals\"\u003e\u003ccode\u003eObject.ReferenceEquals(Object,\n  Object)\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eObject.Equals\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/value-types\"\u003eValue types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\"\u003eReference types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators\"\u003eEquality operators\n  - test if two objects are equal or not\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type#struct-example\"\u003eHow to define value equality for a class or struct (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct\"\u003eStructure types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3898} - Value types should implement \"IEquatable\u0026lt;T\u0026gt;\" \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S907",
    "name": "\"goto\" statement should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egoto\u003c/code\u003e is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e or \u003ccode\u003ebreak\u003c/code\u003e should be used instead.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003egoto\u003c/code\u003e is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e or \u003ccode\u003ebreak\u003c/code\u003e should be used instead.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1656",
    "name": "Variables should not be self-assigned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRe-assigning a variable to itself is a defect as it has no actual effect and indicates meaning to do something else. It usually means that:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The statement is redundant and should be removed \u003c/li\u003e\n  \u003cli\u003e The re-assignment is a mistake, and another value or variable was intended for the assignment instead \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Choice {\n    private bool selected;\n\n    public void MakeChoice(bool selected)\n    {\n        selected \u003d selected; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Choice {\n    private bool selected;\n\n    public void MakeChoice(bool selected)\n    {\n        this.selected \u003d selected; // Compliant\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1717\"\u003eCompiler Warning (level 3) CS1717\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRe-assigning a variable to itself is a defect as it has no actual effect and indicates meaning to do something else. It usually means that:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The statement is redundant and should be removed \u003c/li\u003e\n  \u003cli\u003e The re-assignment is a mistake, and another value or variable was intended for the assignment instead \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Choice {\n    private bool selected;\n\n    public void MakeChoice(bool selected)\n    {\n        selected \u003d selected; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Choice {\n    private bool selected;\n\n    public void MakeChoice(bool selected)\n    {\n        this.selected \u003d selected; // Compliant\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/misc/cs1717\"\u003eCompiler Warning (level 3) CS1717\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3956",
    "name": "\"Generic.List\" instances should not be part of public APIs",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eSystem.Collections.Generic.List\u0026lt;T\u0026gt;\u003c/code\u003e is a generic collection that is designed for performance and not inheritance. For example, it\ndoes not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the\nbehavior will be spoiled because the extension points simply aren’t there. Instead, one of the following generic collections should be used:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;TKey\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IReadOnlyList\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IList\u0026lt;TKey\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.Collection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.KeyedCollection\u0026lt;TKey, Titem\u0026gt;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue every time a \u003ccode\u003eSystem.Collections.Generic.List\u0026lt;T\u0026gt;\u003c/code\u003e is exposed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e As an externally visible member. \u003c/li\u003e\n  \u003cli\u003e As the return type of an externally visible method. \u003c/li\u003e\n  \u003cli\u003e As a parameter type of an an externally visible method. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace Foo\n{\n   public class Bar\n   {\n      public List\u0026lt;T\u0026gt; Method1(T arg) // Noncompliant\n      {\n           //...\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace Foo\n{\n   public class Bar\n   {\n      public Collection\u0026lt;T\u0026gt; Method1(T arg)\n      {\n           //...\n      }\n   }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eSystem.Collections.Generic.List\u0026lt;T\u0026gt;\u003c/code\u003e is a generic collection that is designed for performance and not inheritance. For example, it\ndoes not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the\nbehavior will be spoiled because the extension points simply aren’t there. Instead, one of the following generic collections should be used:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;TKey\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IReadOnlyList\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.Generic.IList\u0026lt;TKey\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.Collection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.KeyedCollection\u0026lt;TKey, Titem\u0026gt;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue every time a \u003ccode\u003eSystem.Collections.Generic.List\u0026lt;T\u0026gt;\u003c/code\u003e is exposed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e As an externally visible member. \u003c/li\u003e\n  \u003cli\u003e As the return type of an externally visible method. \u003c/li\u003e\n  \u003cli\u003e As a parameter type of an an externally visible method. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnamespace Foo\n{\n   public class Bar\n   {\n      public List\u0026lt;T\u0026gt; Method1(T arg) // Noncompliant\n      {\n           //...\n      }\n   }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnamespace Foo\n{\n   public class Bar\n   {\n      public Collection\u0026lt;T\u0026gt; Method1(T arg)\n      {\n           //...\n      }\n   }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1659",
    "name": "Multiple variables should not be declared on the same line",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDeclaring multiple variable on one line is difficult to read.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int a, b; // Noncompliant\n\n  public void Method()\n  {\n    int c, d; // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int a;\n  private int b;\n\n  public void Method()\n  {\n    int c;\n    int d;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDeclaring multiple variable on one line is difficult to read.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int a, b; // Noncompliant\n\n  public void Method()\n  {\n    int c, d; // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int a;\n  private int b;\n\n  public void Method()\n  {\n    int c;\n    int d;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3717",
    "name": "Track use of \"NotImplementedException\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eNotImplementedException\u003c/code\u003e is often used to mark methods which must be implemented for the overall functionality to be complete, but\nwhich the developer wants to implement later. That’s as opposed to the \u003ccode\u003eNotSupportedException\u003c/code\u003e which is thrown by methods which are\nrequired by base classes or interfaces, but which are not appropriate to the current class.\u003c/p\u003e\n\u003cp\u003eThis rule raises an exception when \u003ccode\u003eNotImplementedException\u003c/code\u003e is thrown.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid doTheThing()\n{\n    throw new NotImplementedException();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eExceptions derived from \u003ccode\u003eNotImplementedException\u003c/code\u003e are ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eNotImplementedException\u003c/code\u003e is often used to mark methods which must be implemented for the overall functionality to be complete, but\nwhich the developer wants to implement later. That’s as opposed to the \u003ccode\u003eNotSupportedException\u003c/code\u003e which is thrown by methods which are\nrequired by base classes or interfaces, but which are not appropriate to the current class.\u003c/p\u003e\n\u003cp\u003eThis rule raises an exception when \u003ccode\u003eNotImplementedException\u003c/code\u003e is thrown.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid doTheThing()\n{\n    throw new NotImplementedException();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eExceptions derived from \u003ccode\u003eNotImplementedException\u003c/code\u003e are ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2743",
    "name": "Static fields should not be used in generic types",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA static field in a generic type is not shared among instances of different closed constructed types, thus\n\u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;int\u0026gt;.instances\u003c/code\u003e and \u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;string\u0026gt;.instances\u003c/code\u003e will\npoint to different objects, even though \u003ccode\u003einstances\u003c/code\u003e is seemingly shared among all \u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;\u0026gt;\u003c/code\u003e\ngeneric classes.\u003c/p\u003e\n\u003cp\u003eIf you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static\nmembers, then set your generic type to inherit from the base class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class LengthLimitedSingletonCollection\u0026lt;T\u0026gt; where T : new()\n{\n  protected const int MaxAllowedLength \u003d 5;\n  protected static Dictionary\u0026lt;Type, object\u0026gt; instances \u003d new Dictionary\u0026lt;Type, object\u0026gt;(); // Noncompliant\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count \u0026gt;\u003d MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance \u003d new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class SingletonCollectionBase\n{\n  protected static Dictionary\u0026lt;Type, object\u0026gt; instances \u003d new Dictionary\u0026lt;Type, object\u0026gt;();\n}\n\npublic class LengthLimitedSingletonCollection\u0026lt;T\u0026gt; : SingletonCollectionBase where T : new()\n{\n  protected const int MaxAllowedLength \u003d 5;\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count \u0026gt;\u003d MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance \u003d new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the\nclosed constructed types.\u003c/p\u003e\n\u003cpre\u003e\npublic class Cache\u0026lt;T\u0026gt;\n{\n   private static Dictionary\u0026lt;string, T\u0026gt; CacheDictionary { get; set; } // Compliant\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA static field in a generic type is not shared among instances of different closed constructed types, thus\n\u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;int\u0026gt;.instances\u003c/code\u003e and \u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;string\u0026gt;.instances\u003c/code\u003e will\npoint to different objects, even though \u003ccode\u003einstances\u003c/code\u003e is seemingly shared among all \u003ccode\u003eLengthLimitedSingletonCollection\u0026lt;\u0026gt;\u003c/code\u003e\ngeneric classes.\u003c/p\u003e\n\u003cp\u003eIf you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static\nmembers, then set your generic type to inherit from the base class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class LengthLimitedSingletonCollection\u0026lt;T\u0026gt; where T : new()\n{\n  protected const int MaxAllowedLength \u003d 5;\n  protected static Dictionary\u0026lt;Type, object\u0026gt; instances \u003d new Dictionary\u0026lt;Type, object\u0026gt;(); // Noncompliant\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count \u0026gt;\u003d MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance \u003d new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class SingletonCollectionBase\n{\n  protected static Dictionary\u0026lt;Type, object\u0026gt; instances \u003d new Dictionary\u0026lt;Type, object\u0026gt;();\n}\n\npublic class LengthLimitedSingletonCollection\u0026lt;T\u0026gt; : SingletonCollectionBase where T : new()\n{\n  protected const int MaxAllowedLength \u003d 5;\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count \u0026gt;\u003d MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance \u003d new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the\nclosed constructed types.\u003c/p\u003e\n\u003cpre\u003e\npublic class Cache\u0026lt;T\u0026gt;\n{\n   private static Dictionary\u0026lt;string, T\u0026gt; CacheDictionary { get; set; } // Compliant\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4792",
    "name": "Configuring loggers is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-0285\"\u003eCVE-2018-0285\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2000-1127\"\u003eCVE-2000-1127\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-15113\"\u003eCVE-2017-15113\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2015-5742\"\u003eCVE-2015-5742\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLogs are useful before, during and after a security incident.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. \u003c/li\u003e\n  \u003cli\u003e In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\u003c/p\u003e\n\u003cp\u003eThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. \u003c/li\u003e\n  \u003cli\u003e the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \u003c/li\u003e\n  \u003cli\u003e the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. \u003c/li\u003e\n  \u003cli\u003e the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. \u003c/li\u003e\n  \u003cli\u003e the logs are only stored locally instead of being backuped or replicated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e.Net Core\u003c/strong\u003e: configure programmatically\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing Microsoft.AspNetCore;\n\nnamespace MvcApp\n{\n    public class ProgramLogging\n    {\n        public static IWebHostBuilder CreateWebHostBuilder(string[] args) \u003d\u0026gt;\n            WebHost.CreateDefaultBuilder(args)\n                .ConfigureLogging((hostingContext, logging) \u003d\u0026gt; // Sensitive\n                {\n                    // ...\n                })\n                .UseStartup\u0026lt;StartupLogging\u0026gt;();\n    }\n\n    public class StartupLogging\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddLogging(logging \u003d\u0026gt; // Sensitive\n            {\n                // ...\n            });\n        }\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            IConfiguration config \u003d null;\n            LogLevel level \u003d LogLevel.Critical;\n            Boolean includeScopes \u003d false;\n            Func\u0026lt;string,Microsoft.Extensions.Logging.LogLevel,bool\u0026gt; filter \u003d null;\n            Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings consoleSettings \u003d null;\n            Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings azureSettings \u003d null;\n            Microsoft.Extensions.Logging.EventLog.EventLogSettings eventLogSettings \u003d null;\n\n            // An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.\n            loggerFactory.AddAzureWebAppDiagnostics(); // Sensitive\n            loggerFactory.AddAzureWebAppDiagnostics(azureSettings); // Sensitive\n            loggerFactory.AddConsole(); // Sensitive\n            loggerFactory.AddConsole(level); // Sensitive\n            loggerFactory.AddConsole(level, includeScopes); // Sensitive\n            loggerFactory.AddConsole(filter); // Sensitive\n            loggerFactory.AddConsole(filter, includeScopes); // Sensitive\n            loggerFactory.AddConsole(config); // Sensitive\n            loggerFactory.AddConsole(consoleSettings); // Sensitive\n            loggerFactory.AddDebug(); // Sensitive\n            loggerFactory.AddDebug(level); // Sensitive\n            loggerFactory.AddDebug(filter); // Sensitive\n            loggerFactory.AddEventLog(); // Sensitive\n            loggerFactory.AddEventLog(eventLogSettings); // Sensitive\n            loggerFactory.AddEventLog(level); // Sensitive\n            loggerFactory.AddEventSourceLogger(); // Sensitive\n\n            IEnumerable\u0026lt;ILoggerProvider\u0026gt; providers \u003d null;\n            LoggerFilterOptions filterOptions1 \u003d null;\n            IOptionsMonitor\u0026lt;LoggerFilterOptions\u0026gt; filterOptions2 \u003d null;\n\n            LoggerFactory factory \u003d new LoggerFactory(); // Sensitive\n            new LoggerFactory(providers); // Sensitive\n            new LoggerFactory(providers, filterOptions1); // Sensitive\n            new LoggerFactory(providers, filterOptions2); // Sensitive\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eLog4Net\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\nusing System.Xml;\nusing log4net.Appender;\nusing log4net.Config;\nusing log4net.Repository;\n\nnamespace Logging\n{\n    class Log4netLogging\n    {\n        void Foo(ILoggerRepository repository, XmlElement element, FileInfo configFile, Uri configUri, Stream configStream,\n        IAppender appender, params IAppender[] appenders) {\n            log4net.Config.XmlConfigurator.Configure(repository); // Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, element); // Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configFile); // Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configUri); // Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configStream); // Sensitive\n            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile); // Sensitive\n\n            log4net.Config.DOMConfigurator.Configure(); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(element); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, element); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(configFile); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, configFile); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(configStream); // Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, configStream); // Sensitive\n            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile); // Sensitive\n            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile); // Sensitive\n\n            log4net.Config.BasicConfigurator.Configure(); // Sensitive\n            log4net.Config.BasicConfigurator.Configure(appender); // Sensitive\n            log4net.Config.BasicConfigurator.Configure(appenders); // Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository); // Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository, appender); // Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository, appenders); // Sensitive\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNLog\u003c/strong\u003e: configure programmatically\u003c/p\u003e\n\u003cpre\u003e\nnamespace Logging\n{\n    class NLogLogging\n    {\n        void Foo(NLog.Config.LoggingConfiguration config) {\n            NLog.LogManager.Configuration \u003d config; // Sensitive, this changes the logging configuration.\n        }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eSerilog\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\nnamespace Logging\n{\n    class SerilogLogging\n    {\n        void Foo() {\n            new Serilog.LoggerConfiguration(); // Sensitive\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. \u003c/li\u003e\n  \u003cli\u003e Production logs should be stored in a secure location which is only accessible to system administrators. \u003c/li\u003e\n  \u003cli\u003e Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. \u003c/li\u003e\n  \u003cli\u003e Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. \u003c/li\u003e\n  \u003cli\u003e Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. \u003c/li\u003e\n  \u003cli\u003e Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRemember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. \u003c/li\u003e\n  \u003cli\u003e Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. \u003c/li\u003e\n  \u003cli\u003e Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. \u003c/li\u003e\n  \u003cli\u003e Monitor the logs for any suspicious activity. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117\"\u003eCWE-117 - Improper Output Neutralization for Logs\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532\"\u003eCWE-532 - Information Exposure Through Log Files\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S2251",
    "name": "A \"for\" loop update clause should move the counter in the right direction",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop with a counter that moves in the wrong direction, away from the stop condition, is not an infinite loop. Because of \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Integer_overflow#:~:text\u003dThe%20most%20common%20result%20of%20an%20overflow%20is%20that%20the%20least%20significant%20representable%20digits%20of%20the%20result%20are%20stored%3B%20the%20result%20is%20said%20to%20wrap%20around%20the%20maximum\"\u003ewraparound\u003c/a\u003e,\nthe loop will eventually reach its stop condition, but in doing so, it will probably run more times than anticipated, potentially causing unexpected\nbehavior.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf your \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement:~:text\u003dThe%20condition%20section%20that%20determines%20if%20the%20next%20iteration%20in%20the%20loop%20should%20be%20executed\"\u003estop\ncondition\u003c/a\u003e indicates a \u003cstrong\u003emaximum\u003c/strong\u003e value, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement:~:text\u003dThe%20iterator%20section%20that%20defines%20what%20happens%20after%20each%20execution%20of%20the%20body%20of%20the%20loop\"\u003eiterator\u003c/a\u003e\nshould \u003cstrong\u003eincrease\u003c/strong\u003e towards it. Conversely, if your stop condition indicates a \u003cstrong\u003eminimum\u003c/strong\u003e value, the iterator should\n\u003cstrong\u003edecrease\u003c/strong\u003e towards it.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; maximum; i--)  // Noncompliant: runs until it underflows to int.MaxValue\n{\n    // ...\n}\n\nfor (int i \u003d maximum; i \u0026gt;\u003d maximum; i++)  // Noncompliant: runs until it overflows to int.MinValue\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; maximum; i++) // Compliant: Increment towards the maximum value\n{\n}\n\nfor (int i \u003d maximum; i \u0026gt;\u003d 0; i--) // Compliant: Decrement towards the minimum value\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Integer_overflow\"\u003eInteger overflow\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe\n  \u003ccode\u003efor\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop with a counter that moves in the wrong direction, away from the stop condition, is not an infinite loop. Because of \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Integer_overflow#:~:text\u003dThe%20most%20common%20result%20of%20an%20overflow%20is%20that%20the%20least%20significant%20representable%20digits%20of%20the%20result%20are%20stored%3B%20the%20result%20is%20said%20to%20wrap%20around%20the%20maximum\"\u003ewraparound\u003c/a\u003e,\nthe loop will eventually reach its stop condition, but in doing so, it will probably run more times than anticipated, potentially causing unexpected\nbehavior.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf your \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement:~:text\u003dThe%20condition%20section%20that%20determines%20if%20the%20next%20iteration%20in%20the%20loop%20should%20be%20executed\"\u003estop\ncondition\u003c/a\u003e indicates a \u003cstrong\u003emaximum\u003c/strong\u003e value, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement:~:text\u003dThe%20iterator%20section%20that%20defines%20what%20happens%20after%20each%20execution%20of%20the%20body%20of%20the%20loop\"\u003eiterator\u003c/a\u003e\nshould \u003cstrong\u003eincrease\u003c/strong\u003e towards it. Conversely, if your stop condition indicates a \u003cstrong\u003eminimum\u003c/strong\u003e value, the iterator should\n\u003cstrong\u003edecrease\u003c/strong\u003e towards it.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; maximum; i--)  // Noncompliant: runs until it underflows to int.MaxValue\n{\n    // ...\n}\n\nfor (int i \u003d maximum; i \u0026gt;\u003d maximum; i++)  // Noncompliant: runs until it overflows to int.MinValue\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; maximum; i++) // Compliant: Increment towards the maximum value\n{\n}\n\nfor (int i \u003d maximum; i \u0026gt;\u003d 0; i--) // Compliant: Decrement towards the minimum value\n{\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Integer_overflow\"\u003eInteger overflow\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe\n  \u003ccode\u003efor\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2372",
    "name": "Exceptions should not be thrown from property getters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperty getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod.\u003c/p\u003e\n\u003cp\u003eIt is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int Foo\n{\n    get\n    {\n        throw new Exception(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic int Foo\n{\n    get\n    {\n        return 42;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is raised when the thrown exception derives from or is of type \u003ccode\u003eNotImplementedException\u003c/code\u003e, \u003ccode\u003eNotSupportedException\u003c/code\u003e or\n\u003ccode\u003eInvalidOperationException\u003c/code\u003e.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperty getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod.\u003c/p\u003e\n\u003cp\u003eIt is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic int Foo\n{\n    get\n    {\n        throw new Exception(); // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic int Foo\n{\n    get\n    {\n        return 42;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is raised when the thrown exception derives from or is of type \u003ccode\u003eNotImplementedException\u003c/code\u003e, \u003ccode\u003eNotSupportedException\u003c/code\u003e or\n\u003ccode\u003eInvalidOperationException\u003c/code\u003e.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4790",
    "name": "Using weak hashing algorithms is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCryptographic hash algorithms such as \u003ccode\u003eMD2\u003c/code\u003e, \u003ccode\u003eMD4\u003c/code\u003e, \u003ccode\u003eMD5\u003c/code\u003e, \u003ccode\u003eMD6\u003c/code\u003e, \u003ccode\u003eHAVAL-128\u003c/code\u003e,\n\u003ccode\u003eHMAC-MD5\u003c/code\u003e, \u003ccode\u003eDSA\u003c/code\u003e (which uses \u003ccode\u003eSHA-1\u003c/code\u003e), \u003ccode\u003eRIPEMD\u003c/code\u003e, \u003ccode\u003eRIPEMD-128\u003c/code\u003e, \u003ccode\u003eRIPEMD-160\u003c/code\u003e,\n\u003ccode\u003eHMACRIPEMD160\u003c/code\u003e and \u003ccode\u003eSHA-1\u003c/code\u003e are no longer considered secure, because it is possible to have \u003ccode\u003ecollisions\u003c/code\u003e (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe hashed value is used in a security context like:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e User-password storage. \u003c/li\u003e\n  \u003cli\u003e Security token generation (used to confirm e-mail when registering on a website, reset password, etc …​). \u003c/li\u003e\n  \u003cli\u003e To compute some message integrity. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar hashProvider1 \u003d new MD5CryptoServiceProvider(); // Sensitive\nvar hashProvider2 \u003d (HashAlgorithm)CryptoConfig.CreateFromName(\"MD5\"); // Sensitive\nvar hashProvider3 \u003d new SHA1Managed(); // Sensitive\nvar hashProvider4 \u003d HashAlgorithm.Create(\"SHA1\"); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eSafer alternatives, such as \u003ccode\u003eSHA-256\u003c/code\u003e, \u003ccode\u003eSHA-512\u003c/code\u003e, \u003ccode\u003eSHA-3\u003c/code\u003e are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like \u003ccode\u003ebcrypt\u003c/code\u003e, \u003ccode\u003escrypt\u003c/code\u003e, \u003ccode\u003eargon2\u003c/code\u003e or \u003ccode\u003epbkdf2\u003c/code\u003e\nbecause it slows down \u003ccode\u003ebrute force attacks\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar hashProvider1 \u003d new SHA512Managed(); // Compliant\nvar hashProvider2 \u003d (HashAlgorithm)CryptoConfig.CreateFromName(\"SHA512Managed\"); // Compliant\nvar hashProvider3 \u003d HashAlgorithm.Create(\"SHA512Managed\"); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1240\"\u003eCWE-1240 - Use of a Risky Cryptographic Primitive\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S818",
    "name": "Literal suffixes should be upper case",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst long b \u003d 0l;      // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst long b \u003d 0L;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst long b \u003d 0l;      // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst long b \u003d 0L;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6618",
    "name": "\"string.Create\" should be used instead of \"FormattableString\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn order to produce a formatted string, both \u003ccode\u003estring.Create\u003c/code\u003e and either \u003ccode\u003eFormattableString.Invariant\u003c/code\u003e or\n\u003ccode\u003eFormattableString.CurrentCulture\u003c/code\u003e can be used. However, \u003ccode\u003estring.Create\u003c/code\u003e rents array buffers from\n\u003ccode\u003eArrayPool\u0026lt;char\u0026gt;\u003c/code\u003e making it more performant, as well as preventing unnecessary allocations and future stress on the Garbage\nCollector.\u003c/p\u003e\n\u003cp\u003eThis applies to .NET versions after .NET 6, when these \u003ccode\u003estring.Create\u003c/code\u003e overloads were introduced.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplace calls to \u003ccode\u003eFormattableString.CurrentCulture\u003c/code\u003e or \u003ccode\u003eFormattableString.Invariant\u003c/code\u003e with calls to\n\u003ccode\u003estring.Create(CultureInfo.CurrentCulture, …​)\u003c/code\u003e or \u003ccode\u003estring.Create(CultureInfo.InvariantCulture, …​)\u003c/code\u003e respectively.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    FormattableString.Invariant($\"Value: {value}\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    FormattableString.CurrentCulture($\"Value: {value}\");\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    string.Create(CultureInfo.InvariantCulture, $\"Value: {value}\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    string.Create(CultureInfo.CurrentCulture, $\"Value: {value}\");\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.create?view\u003dnet-7.0\"\u003estring.Create\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.formattablestring.invariant\"\u003eFormattableString.Invariant\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.formattablestring.currentculture\"\u003eFormattableString.CurrentCulture\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated#compilation-of-interpolated-strings\"\u003eCompilation of\n  interpolated strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStringCreate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.5 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.09 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e83.92 MB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFormattableString\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e191.8 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e198.36 MB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cpre\u003e\nint Value \u003d 42;\nDateTime Now \u003d DateTime.UtcNow;\n\n[Params(1_000_000)]\npublic int N;\n\n[Benchmark]\npublic void StringCreate()\n{\n    for (int i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d string.Create(CultureInfo.InvariantCulture, $\"{Now}: Value is {Value}\");\n    }\n}\n\n[Benchmark]\npublic void FormattableStringInvariant()\n{\n    for (int i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d FormattableString.Invariant($\"{Now}: Value is {Value}\");\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2728/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn order to produce a formatted string, both \u003ccode\u003estring.Create\u003c/code\u003e and either \u003ccode\u003eFormattableString.Invariant\u003c/code\u003e or\n\u003ccode\u003eFormattableString.CurrentCulture\u003c/code\u003e can be used. However, \u003ccode\u003estring.Create\u003c/code\u003e rents array buffers from\n\u003ccode\u003eArrayPool\u0026lt;char\u0026gt;\u003c/code\u003e making it more performant, as well as preventing unnecessary allocations and future stress on the Garbage\nCollector.\u003c/p\u003e\n\u003cp\u003eThis applies to .NET versions after .NET 6, when these \u003ccode\u003estring.Create\u003c/code\u003e overloads were introduced.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplace calls to \u003ccode\u003eFormattableString.CurrentCulture\u003c/code\u003e or \u003ccode\u003eFormattableString.Invariant\u003c/code\u003e with calls to\n\u003ccode\u003estring.Create(CultureInfo.CurrentCulture, …​)\u003c/code\u003e or \u003ccode\u003estring.Create(CultureInfo.InvariantCulture, …​)\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    FormattableString.Invariant($\"Value: {value}\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    FormattableString.CurrentCulture($\"Value: {value}\");\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    string.Create(CultureInfo.InvariantCulture, $\"Value: {value}\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nstring Interpolate(string value) \u003d\u0026gt;\n    string.Create(CultureInfo.CurrentCulture, $\"Value: {value}\");\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.create?view\u003dnet-7.0\"\u003estring.Create\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.formattablestring.invariant\"\u003eFormattableString.Invariant\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.formattablestring.currentculture\"\u003eFormattableString.CurrentCulture\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated#compilation-of-interpolated-strings\"\u003eCompilation of\n  interpolated strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStringCreate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.5 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.09 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e83.92 MB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFormattableString\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e191.8 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e198.36 MB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cpre\u003e\nint Value \u003d 42;\nDateTime Now \u003d DateTime.UtcNow;\n\n[Params(1_000_000)]\npublic int N;\n\n[Benchmark]\npublic void StringCreate()\n{\n    for (int i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d string.Create(CultureInfo.InvariantCulture, $\"{Now}: Value is {Value}\");\n    }\n}\n\n[Benchmark]\npublic void FormattableStringInvariant()\n{\n    for (int i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d FormattableString.Invariant($\"{Now}: Value is {Value}\");\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2728/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6617",
    "name": "\"Contains\" should be used instead of \"Any\" for simple equality checks",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen testing if a collection contains a specific item by simple equality, both \u003ccode\u003eICollection.Contains(T item)\u003c/code\u003e and\n\u003ccode\u003eIEnumerable.Any(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be used. However, \u003ccode\u003eAny\u003c/code\u003e searches the data structure in a linear manner using a foreach\nloop, whereas \u003ccode\u003eContains\u003c/code\u003e is considerably faster in some collection types, because of the underlying implementation. More specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eHashSet\u0026lt;T\u0026gt;\u003c/code\u003e is a hashtable, and therefore has an O(1) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e is a red-black tree, and therefore has a O(logN) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e is a linear search, and therefore has an O(N) lookup, but the EqualityComparer is optimized for the \u003ccode\u003eT\u003c/code\u003e\n  type, which is not the case for \u003ccode\u003eAny\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor small collections, the performance difference may be negligible, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eContains\u003c/code\u003e is a method defined on the \u003ccode\u003eICollection\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a \u003ccode\u003eT item\u003c/code\u003e argument.\n\u003ccode\u003eAny\u003c/code\u003e is an extension method defined on the \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a predicate argument. Therefore, calls\nwith simple equality checks like \u003ccode\u003eAny(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be replaced by \u003ccode\u003eContains(item)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis applies to the following collection types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1\"\u003eHashSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\"\u003eList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ValueExists(HashSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x \u003d\u003d 42);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ValueExists(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x \u003d\u003d 42);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool ValueExists(HashSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Contains(42);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool ValueExists(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Contains(42);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1.contains\"\u003eHashSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.contains\"\u003eSortedSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains\"\u003eList.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e35,388.333 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e620.1863 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40132 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.799 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1489 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e32,851.509 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e667.1658 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40130 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e375.132 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.0764 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28,979.763 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e678.0093 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.987 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1090 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e25,830.221 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e487.2470 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,935.812 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57.7569 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(10_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int Iterations;\n\nprivate static HashSet\u0026lt;int\u0026gt; hashSet;\nprivate static List\u0026lt;int\u0026gt; list;\n\n[GlobalSetup]\npublic void Setup()\n{\n    hashSet \u003d new HashSet\u0026lt;int\u0026gt;(Enumerable.Range(0, SampleSize));\n    list \u003d Enumerable.Range(0, SampleSize).ToList();\n}\n\n[Benchmark]\npublic void HashSet_Any() \u003d\u0026gt;\n    CheckAny(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void HashSet_Contains() \u003d\u0026gt;\n    CheckContains(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void List_Any() \u003d\u0026gt;\n    CheckAny(list, SampleSize / 2);\n\n[Benchmark]\npublic void List_Contains() \u003d\u0026gt;\n    CheckContains(list, SampleSize / 2);\n\nvoid CheckAny(IEnumerable\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Any(x \u003d\u0026gt; x \u003d\u003d target);  // Enumerable.Any\n    }\n}\n\nvoid CheckContains(ICollection\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Contains(target); // ICollection\u0026lt;T\u0026gt;.Contains\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen testing if a collection contains a specific item by simple equality, both \u003ccode\u003eICollection.Contains(T item)\u003c/code\u003e and\n\u003ccode\u003eIEnumerable.Any(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be used. However, \u003ccode\u003eAny\u003c/code\u003e searches the data structure in a linear manner using a foreach\nloop, whereas \u003ccode\u003eContains\u003c/code\u003e is considerably faster in some collection types, because of the underlying implementation. More specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eHashSet\u0026lt;T\u0026gt;\u003c/code\u003e is a hashtable, and therefore has an O(1) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e is a red-black tree, and therefore has a O(logN) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e is a linear search, and therefore has an O(N) lookup, but the EqualityComparer is optimized for the \u003ccode\u003eT\u003c/code\u003e\n  type, which is not the case for \u003ccode\u003eAny\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor small collections, the performance difference may be negligible, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eContains\u003c/code\u003e is a method defined on the \u003ccode\u003eICollection\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a \u003ccode\u003eT item\u003c/code\u003e argument.\n\u003ccode\u003eAny\u003c/code\u003e is an extension method defined on the \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a predicate argument. Therefore, calls\nwith simple equality checks like \u003ccode\u003eAny(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be replaced by \u003ccode\u003eContains(item)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis applies to the following collection types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1\"\u003eHashSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\"\u003eList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ValueExists(HashSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x \u003d\u003d 42);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ValueExists(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x \u003d\u003d 42);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool ValueExists(HashSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Contains(42);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool ValueExists(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Contains(42);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1.contains\"\u003eHashSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.contains\"\u003eSortedSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains\"\u003eList.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e35,388.333 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e620.1863 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40132 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.799 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1489 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e32,851.509 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e667.1658 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40130 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e375.132 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.0764 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28,979.763 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e678.0093 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.987 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1090 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e25,830.221 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e487.2470 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,935.812 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57.7569 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(10_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int Iterations;\n\nprivate static HashSet\u0026lt;int\u0026gt; hashSet;\nprivate static List\u0026lt;int\u0026gt; list;\n\n[GlobalSetup]\npublic void Setup()\n{\n    hashSet \u003d new HashSet\u0026lt;int\u0026gt;(Enumerable.Range(0, SampleSize));\n    list \u003d Enumerable.Range(0, SampleSize).ToList();\n}\n\n[Benchmark]\npublic void HashSet_Any() \u003d\u0026gt;\n    CheckAny(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void HashSet_Contains() \u003d\u0026gt;\n    CheckContains(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void List_Any() \u003d\u0026gt;\n    CheckAny(list, SampleSize / 2);\n\n[Benchmark]\npublic void List_Contains() \u003d\u0026gt;\n    CheckContains(list, SampleSize / 2);\n\nvoid CheckAny(IEnumerable\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Any(x \u003d\u0026gt; x \u003d\u003d target);  // Enumerable.Any\n    }\n}\n\nvoid CheckContains(ICollection\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Contains(target); // ICollection\u0026lt;T\u0026gt;.Contains\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1163",
    "name": "Exceptions should not be thrown in finally blocks",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf an exception is already being thrown within the \u003ccode\u003etry\u003c/code\u003e block or caught in a \u003ccode\u003ecatch\u003c/code\u003e block, throwing another exception in\nthe \u003ccode\u003efinally\u003c/code\u003e block will override the original exception. This means that the original exception’s message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ntry\n{\n  // Some work which end up throwing an exception\n  throw new ArgumentException();\n}\nfinally\n{\n  // Cleanup\n  throw new InvalidOperationException(); // Noncompliant: will mask the ArgumentException\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ntry\n{\n  // Some work which end up throwing an exception\n  throw new ArgumentException();\n}\nfinally\n{\n  // Cleanup without throwing\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/how-to-use-finally-blocks\"\u003eFinally blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-execute-cleanup-code-using-finally\"\u003eHow to execute\n  cleanup code using finally\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf an exception is already being thrown within the \u003ccode\u003etry\u003c/code\u003e block or caught in a \u003ccode\u003ecatch\u003c/code\u003e block, throwing another exception in\nthe \u003ccode\u003efinally\u003c/code\u003e block will override the original exception. This means that the original exception’s message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ntry\n{\n  // Some work which end up throwing an exception\n  throw new ArgumentException();\n}\nfinally\n{\n  // Cleanup\n  throw new InvalidOperationException(); // Noncompliant: will mask the ArgumentException\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ntry\n{\n  // Some work which end up throwing an exception\n  throw new ArgumentException();\n}\nfinally\n{\n  // Cleanup without throwing\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/how-to-use-finally-blocks\"\u003eFinally blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-execute-cleanup-code-using-finally\"\u003eHow to execute\n  cleanup code using finally\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "error-handling",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6610",
    "name": "\"StartsWith\" and \"EndsWith\" overloads that take a \"char\" should be used instead of the ones that take a \"string\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWith \u003ccode\u003estring.StartsWith(char)\u003c/code\u003e and \u003ccode\u003estring.EndsWith(char)\u003c/code\u003e, only the first character of the string is compared to the\nprovided character, whereas the \u003ccode\u003estring\u003c/code\u003e versions of those methods have to do checks about the current \u003ccode\u003eStringComparison\u003c/code\u003e and\n\u003ccode\u003eCultureInfo\u003c/code\u003e. Thus, the \u003ccode\u003echar\u003c/code\u003e overloads are significantly faster for default comparison scenarios.\u003c/p\u003e\n\u003cp\u003eThese overloads were introduced in \u003ccode\u003e.NET Core 2.0\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3.5x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you are targeting a runtime version equal or greater than \u003ccode\u003e.NET Core 2.0\u003c/code\u003e, the \u003ccode\u003estring.StartsWith\u003c/code\u003e and\n\u003ccode\u003estring.EndsWith\u003c/code\u003e overloads are available, with the argument’s type being \u003ccode\u003echar\u003c/code\u003e instead of \u003ccode\u003estring\u003c/code\u003e. Thus, an\nargument of \u003ccode\u003echar\u003c/code\u003e type can be provided.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool StartsWithSlash(string s) \u003d\u0026gt;\n    s.StartsWith(\"/\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool EndsWithSlash(string s) \u003d\u0026gt;\n    s.EndsWith(\"/\");\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool StartsWithSlash(string s) \u003d\u0026gt;\n    s.StartsWith(\u0027/\u0027);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool EndsWithSlash(string s) \u003d\u0026gt;\n    s.EndsWith(\u0027/\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.startswith\"\u003estring.StartsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.endswith\"\u003estring.EndsWith\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.965 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.2732 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e29.932 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.568 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3235 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.534 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.1136 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.067 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.7092 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.935 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(_ \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark]\npublic void StartsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void StartsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\u0027d\u0027)).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\u0027d\u0027)).ToList();\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWith \u003ccode\u003estring.StartsWith(char)\u003c/code\u003e and \u003ccode\u003estring.EndsWith(char)\u003c/code\u003e, only the first character of the string is compared to the\nprovided character, whereas the \u003ccode\u003estring\u003c/code\u003e versions of those methods have to do checks about the current \u003ccode\u003eStringComparison\u003c/code\u003e and\n\u003ccode\u003eCultureInfo\u003c/code\u003e. Thus, the \u003ccode\u003echar\u003c/code\u003e overloads are significantly faster for default comparison scenarios.\u003c/p\u003e\n\u003cp\u003eThese overloads were introduced in \u003ccode\u003e.NET Core 2.0\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3.5x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you are targeting a runtime version equal or greater than \u003ccode\u003e.NET Core 2.0\u003c/code\u003e, the \u003ccode\u003estring.StartsWith\u003c/code\u003e and\n\u003ccode\u003estring.EndsWith\u003c/code\u003e overloads are available, with the argument’s type being \u003ccode\u003echar\u003c/code\u003e instead of \u003ccode\u003estring\u003c/code\u003e. Thus, an\nargument of \u003ccode\u003echar\u003c/code\u003e type can be provided.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool StartsWithSlash(string s) \u003d\u0026gt;\n    s.StartsWith(\"/\");\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool EndsWithSlash(string s) \u003d\u0026gt;\n    s.EndsWith(\"/\");\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool StartsWithSlash(string s) \u003d\u0026gt;\n    s.StartsWith(\u0027/\u0027);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool EndsWithSlash(string s) \u003d\u0026gt;\n    s.EndsWith(\u0027/\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.startswith\"\u003estring.StartsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.endswith\"\u003estring.EndsWith\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.965 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.2732 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e29.932 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.568 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3235 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.534 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.1136 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.067 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.7092 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.935 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(_ \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark]\npublic void StartsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void StartsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\u0027d\u0027)).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\u0027d\u0027)).ToList();\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2252",
    "name": "For-loop conditions should be true at least once",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e loop\nis a fundamental programming construct used to execute a block of code repeatedly. However, if the loop’s condition is false before the first\niteration, the loop will never execute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; 0; i++)  // Noncompliant: the condition is always false, the loop will never execute\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eRewrite the loop to ensure the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e at least once.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++)  // Compliant: the condition is true at least once, the loop will execute\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis bug has the potential to cause unexpected outcomes as the loop might contain critical code that needs to be executed.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe \u003ccode\u003efor\u003c/code\u003e\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e loop\nis a fundamental programming construct used to execute a block of code repeatedly. However, if the loop’s condition is false before the first\niteration, the loop will never execute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; 0; i++)  // Noncompliant: the condition is always false, the loop will never execute\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eRewrite the loop to ensure the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e at least once.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++)  // Compliant: the condition is true at least once, the loop will execute\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis bug has the potential to cause unexpected outcomes as the loop might contain critical code that needs to be executed.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement\"\u003eThe \u003ccode\u003efor\u003c/code\u003e\n  statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3220",
    "name": "Method calls should not resolve ambiguously to overloads with \"params\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe rules for method resolution are complex and perhaps not properly understood by all coders. The \u003ccode\u003eparams\u003c/code\u003e keyword can make method\ndeclarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an invocation resolves to a method declaration with \u003ccode\u003eparams\u003c/code\u003e, but could also resolve to another\nnon-\u003ccode\u003eparams\u003c/code\u003e method too.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private void Format(string a, params object[] b) { }\n\n    private void Format(object a, object b, object c) { }\n}\n\n// ...\nMyClass myClass \u003d new MyClass();\n\nmyClass.Format(\"\", null, null); // Noncompliant, resolves to the first Format with params, but was that intended?\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe rules for method resolution are complex and perhaps not properly understood by all coders. The \u003ccode\u003eparams\u003c/code\u003e keyword can make method\ndeclarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an invocation resolves to a method declaration with \u003ccode\u003eparams\u003c/code\u003e, but could also resolve to another\nnon-\u003ccode\u003eparams\u003c/code\u003e method too.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n    private void Format(string a, params object[] b) { }\n\n    private void Format(object a, object b, object c) { }\n}\n\n// ...\nMyClass myClass \u003d new MyClass();\n\nmyClass.Format(\"\", null, null); // Noncompliant, resolves to the first Format with params, but was that intended?\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4433",
    "name": "LDAP connections should be authenticated",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eLightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the \u003cem\u003eSASL\u003c/em\u003e and \u003cem\u003eSimple\u003c/em\u003e ones. The\n\u003cem\u003eSimple Authentication\u003c/em\u003e method also breaks down into three different mechanisms:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cem\u003eAnonymous\u003c/em\u003e Authentication \u003c/li\u003e\n  \u003cli\u003e \u003cem\u003eUnauthenticated\u003c/em\u003e Authentication \u003c/li\u003e\n  \u003cli\u003e \u003cem\u003eName/Password\u003c/em\u003e Authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA server that accepts either the \u003cem\u003eAnonymous\u003c/em\u003e or \u003cem\u003eUnauthenticated\u003c/em\u003e mechanisms will accept connections from clients not providing\ncredentials.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAn attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.\u003c/p\u003e\n\u003ch4\u003eAuthentication bypass\u003c/h4\u003e\n\u003cp\u003eIf attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.\u003c/p\u003e\n\u003cp\u003eIn such a case, all users configured in the directory might see their identity and privileges taken over.\u003c/p\u003e\n\u003ch4\u003eSensitive information leak\u003c/h4\u003e\n\u003cp\u003eIf attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.\u003c/p\u003e\n\u003cp\u003eTypically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.\u003c/p\u003e\n\u003cp\u003eIf the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType \u003d AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\"\u003eRFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms\u003c/a\u003e - Bind operations \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/521\"\u003eCWE-521 - Weak Password Requirements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eLightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the \u003cem\u003eSASL\u003c/em\u003e and \u003cem\u003eSimple\u003c/em\u003e ones. The\n\u003cem\u003eSimple Authentication\u003c/em\u003e method also breaks down into three different mechanisms:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cem\u003eAnonymous\u003c/em\u003e Authentication \u003c/li\u003e\n  \u003cli\u003e \u003cem\u003eUnauthenticated\u003c/em\u003e Authentication \u003c/li\u003e\n  \u003cli\u003e \u003cem\u003eName/Password\u003c/em\u003e Authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA server that accepts either the \u003cem\u003eAnonymous\u003c/em\u003e or \u003cem\u003eUnauthenticated\u003c/em\u003e mechanisms will accept connections from clients not providing\ncredentials.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAn attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.\u003c/p\u003e\n\u003ch4\u003eAuthentication bypass\u003c/h4\u003e\n\u003cp\u003eIf attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.\u003c/p\u003e\n\u003cp\u003eIn such a case, all users configured in the directory might see their identity and privileges taken over.\u003c/p\u003e\n\u003ch4\u003eSensitive information leak\u003c/h4\u003e\n\u003cp\u003eIf attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.\u003c/p\u003e\n\u003cp\u003eTypically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.\u003c/p\u003e\n\u003cp\u003eIf the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(adPath);\nmyDirectoryEntry.AuthenticationType \u003d AuthenticationTypes.None; // Noncompliant\n\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(adPath, \"u\", \"p\", AuthenticationTypes.None); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is \"Secure\" since .NET Framework 2.0\n\nDirectoryEntry myDirectoryEntry \u003d new DirectoryEntry(myADSPath, \"u\", \"p\", AuthenticationTypes.Secure);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\"\u003eRFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms\u003c/a\u003e - Bind operations \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/521\"\u003eCWE-521 - Weak Password Requirements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2376",
    "name": "Write-only properties should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Program\n{\n    public int Foo  //Non-Compliant\n    {\n        set\n        {\n            // ... some code ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Program\n{\n    private int foo;\n\n    public void SetFoo(int value)\n    {\n        // ... some code ...\n        foo \u003d value;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass Program\n{\n  public int Foo { get; set; } // Compliant\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Program\n{\n    public int Foo  //Non-Compliant\n    {\n        set\n        {\n            // ... some code ...\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Program\n{\n    private int foo;\n\n    public void SetFoo(int value)\n    {\n        // ... some code ...\n        foo \u003d value;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass Program\n{\n  public int Foo { get; set; } // Compliant\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3343",
    "name": "Caller information parameters should come at the end of the parameter list",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/caller-information\"\u003eCaller information attributes\u003c/a\u003e\nprovide a way to get information about the caller of a method through \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eoptional\u003c/a\u003e\nparameters. But they only work right if their values aren’t provided explicitly. So if you define a method with caller info attributes in the middle\nof the parameter list, the caller is forced to use named arguments if they want to use the method properly.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following attributes are used on parameters before the end of the parameter list:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerfilepathattribute\"\u003eCallerFilePathAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute\"\u003eCallerLineNumberAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute\"\u003eCallerMemberNameAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute\"\u003eCallerArgumentExpressionAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMove the decorated parameters to the end of the parameter list.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid TraceMessage([CallerMemberName] string memberName \u003d \"\",\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0,\n  string message \u003d null)  // Noncompliant: decorated parameters appear before \"message\" parameter\n{\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid TraceMessage(string message \u003d null,\n  [CallerMemberName] string memberName \u003d \"\",\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/caller-information\"\u003eDetermine caller information using\n  attributes interpreted by the C# compiler\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerfilepathattribute\"\u003eCallerFilePathAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute\"\u003eCallerLineNumberAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute\"\u003eCallerMemberNameAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute\"\u003eCallerArgumentExpressionAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eNamed\n  and Optional Arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/caller-information\"\u003eCaller information attributes\u003c/a\u003e\nprovide a way to get information about the caller of a method through \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eoptional\u003c/a\u003e\nparameters. But they only work right if their values aren’t provided explicitly. So if you define a method with caller info attributes in the middle\nof the parameter list, the caller is forced to use named arguments if they want to use the method properly.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following attributes are used on parameters before the end of the parameter list:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerfilepathattribute\"\u003eCallerFilePathAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute\"\u003eCallerLineNumberAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute\"\u003eCallerMemberNameAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute\"\u003eCallerArgumentExpressionAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMove the decorated parameters to the end of the parameter list.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid TraceMessage([CallerMemberName] string memberName \u003d \"\",\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0,\n  string message \u003d null)  // Noncompliant: decorated parameters appear before \"message\" parameter\n{\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid TraceMessage(string message \u003d null,\n  [CallerMemberName] string memberName \u003d \"\",\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/caller-information\"\u003eDetermine caller information using\n  attributes interpreted by the C# compiler\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerfilepathattribute\"\u003eCallerFilePathAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerlinenumberattribute\"\u003eCallerLineNumberAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute\"\u003eCallerMemberNameAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callerargumentexpressionattribute\"\u003eCallerArgumentExpressionAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eNamed\n  and Optional Arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3464",
    "name": "Type inheritance should not be recursive",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion\"\u003eRecursion\u003c/a\u003e is a technique used to define a problem in terms of the problem itself, usually in\nterms of a simpler version of the problem itself.\u003c/p\u003e\n\u003cp\u003eFor example, the implementation of the generator for the n-th value of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fibonacci_sequence\"\u003eFibonacci\nsequence\u003c/a\u003e comes naturally from its mathematical definition, when recursion is used:\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    if (n \u0026lt;\u003d 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return NthFibonacciNumber(n - 1) + NthFibonacciNumber(n - 2);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAs opposed to:\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    int previous \u003d 0;\n\tint last \u003d 1;\n\tfor (var i \u003d 0; i \u0026lt; n; i++)\n\t{\n        (previous, last) \u003d (last, last + previous);\n\t}\n\treturn last;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe use of recursion is acceptable in methods, like the one above, where you can break out of it.\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    if (n \u0026lt;\u003d 1)\n    {\n        return 1; // Base case: stop the recursion\n    }\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIt is also acceptable and makes sense in some type definitions:\u003c/p\u003e\n\u003cpre\u003e\nclass Box : IComparable\u0026lt;Box\u0026gt;\n{\n    public int CompareTo(Box? other)\n    {\n        // Compare the two Box instances...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWith types, some invalid recursive definitions are caught by the compiler:\u003c/p\u003e\n\u003cpre\u003e\nclass C2\u0026lt;T\u0026gt; : C2\u0026lt;T\u0026gt;     // Error CS0146: Circular base type dependency\n{\n}\n\nclass C2\u0026lt;T\u0026gt; : C2\u0026lt;C2\u0026lt;T\u0026gt;\u0026gt; // Error CS0146: Circular base type dependency\n{\n}\n\u003c/pre\u003e\n\u003cp\u003eIn more complex scenarios, however, the code will compile but execution will result in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e if you try to instantiate the class.\u003c/p\u003e\n\u003cpre\u003e\nclass C1\u0026lt;T\u0026gt;\n{\n}\n\nclass C2\u0026lt;T\u0026gt; : C1\u0026lt;C2\u0026lt;C2\u0026lt;T\u0026gt;\u0026gt;\u0026gt; // Noncompliant\n{\n}\n\nvar c2 \u003d new C2\u0026lt;int\u0026gt;();     // This would result into a TypeLoadException\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\"\u003eCuriously recurring template pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html\"\u003eModern C# Techniques, Part\n  1: Curiously Recurring Generic Pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/02/02/curiouser-and-curiouser/\"\u003eCuriouser and curiouser\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion\"\u003eRecursion\u003c/a\u003e is a technique used to define a problem in terms of the problem itself, usually in\nterms of a simpler version of the problem itself.\u003c/p\u003e\n\u003cp\u003eFor example, the implementation of the generator for the n-th value of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fibonacci_sequence\"\u003eFibonacci\nsequence\u003c/a\u003e comes naturally from its mathematical definition, when recursion is used:\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    if (n \u0026lt;\u003d 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return NthFibonacciNumber(n - 1) + NthFibonacciNumber(n - 2);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAs opposed to:\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    int previous \u003d 0;\n\tint last \u003d 1;\n\tfor (var i \u003d 0; i \u0026lt; n; i++)\n\t{\n        (previous, last) \u003d (last, last + previous);\n\t}\n\treturn last;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe use of recursion is acceptable in methods, like the one above, where you can break out of it.\u003c/p\u003e\n\u003cpre\u003e\nint NthFibonacciNumber(int n)\n{\n    if (n \u0026lt;\u003d 1)\n    {\n        return 1; // Base case: stop the recursion\n    }\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIt is also acceptable and makes sense in some type definitions:\u003c/p\u003e\n\u003cpre\u003e\nclass Box : IComparable\u0026lt;Box\u0026gt;\n{\n    public int CompareTo(Box? other)\n    {\n        // Compare the two Box instances...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWith types, some invalid recursive definitions are caught by the compiler:\u003c/p\u003e\n\u003cpre\u003e\nclass C2\u0026lt;T\u0026gt; : C2\u0026lt;T\u0026gt;     // Error CS0146: Circular base type dependency\n{\n}\n\nclass C2\u0026lt;T\u0026gt; : C2\u0026lt;C2\u0026lt;T\u0026gt;\u0026gt; // Error CS0146: Circular base type dependency\n{\n}\n\u003c/pre\u003e\n\u003cp\u003eIn more complex scenarios, however, the code will compile but execution will result in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e if you try to instantiate the class.\u003c/p\u003e\n\u003cpre\u003e\nclass C1\u0026lt;T\u0026gt;\n{\n}\n\nclass C2\u0026lt;T\u0026gt; : C1\u0026lt;C2\u0026lt;C2\u0026lt;T\u0026gt;\u0026gt;\u0026gt; // Noncompliant\n{\n}\n\nvar c2 \u003d new C2\u0026lt;int\u0026gt;();     // This would result into a TypeLoadException\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\"\u003eCuriously recurring template pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html\"\u003eModern C# Techniques, Part\n  1: Curiously Recurring Generic Pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/02/02/curiouser-and-curiouser/\"\u003eCuriouser and curiouser\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3346",
    "name": "Expressions used in \"Debug.Assert\" should not produce side effects",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn assertion is a piece of code that’s used during development when the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/visualstudio/debugger/how-to-set-debug-and-release-configurations\"\u003ecompilation debug mode is activated\u003c/a\u003e. It\nallows a program to check itself as it runs. When an assertion is \u003ccode\u003etrue\u003c/code\u003e, that means everything is operating as expected.\u003c/p\u003e\n\u003cp\u003eIn non-debug mode, all \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003e\u003ccode\u003eDebug.Assert\u003c/code\u003e\u003c/a\u003e calls\nare automatically left out (via the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.conditionalattribute\"\u003e\u003ccode\u003eConditional(\"DEBUG\")\u003c/code\u003e\u003c/a\u003e mechanism). So, by\ncontract, the boolean expressions that are evaluated by those assertions must not contain any \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\"\u003eside effects\u003c/a\u003e. Otherwise, when leaving the debug mode, the functional behavior\nof the application is not the same anymore.\u003c/p\u003e\n\u003cp\u003eThe rule will raise if the method name starts with any of the following \u003ccode\u003eremove\u003c/code\u003e, \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003eadd\u003c/code\u003e,\n\u003ccode\u003epop\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, \u003ccode\u003eretain\u003c/code\u003e, \u003ccode\u003einsert\u003c/code\u003e, \u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003eappend\u003c/code\u003e, \u003ccode\u003eclear\u003c/code\u003e,\n\u003ccode\u003edequeue\u003c/code\u003e, \u003ccode\u003eenqueue\u003c/code\u003e, \u003ccode\u003edispose\u003c/code\u003e, \u003ccode\u003eput\u003c/code\u003e, or \u003ccode\u003eset\u003c/code\u003e, although \u003ccode\u003eSetEquals\u003c/code\u003e will be\nignored.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIn the following example, the assertion checks the return value of the remove method in the argument. Because the whole line is skipped in\nnon-debug builds, the call to \u003ccode\u003eRemove\u003c/code\u003e never happens in such builds.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDebug.Assert(list.Remove(\"dog\"));\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eRemove\u003c/code\u003e call must be extracted and the return value needs to be asserted instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool result \u003d list.Remove(\"dog\");\nDebug.Assert(result);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert/\"\u003e\u003ccode\u003eDebug.Assert\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/\"\u003eDebugging, tracing, and profiling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug\"\u003eHow to: Compile\n  Conditionally with Trace and Debug\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/general#conditional-attribute\"\u003eMiscellaneous attributes\n  interpreted by the C# compiler - \u003ccode\u003eConditional\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia \u003ca href\u003d\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\"\u003eSide effect (computer science)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn assertion is a piece of code that’s used during development when the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/visualstudio/debugger/how-to-set-debug-and-release-configurations\"\u003ecompilation debug mode is activated\u003c/a\u003e. It\nallows a program to check itself as it runs. When an assertion is \u003ccode\u003etrue\u003c/code\u003e, that means everything is operating as expected.\u003c/p\u003e\n\u003cp\u003eIn non-debug mode, all \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003e\u003ccode\u003eDebug.Assert\u003c/code\u003e\u003c/a\u003e calls\nare automatically left out (via the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.conditionalattribute\"\u003e\u003ccode\u003eConditional(\"DEBUG\")\u003c/code\u003e\u003c/a\u003e mechanism). So, by\ncontract, the boolean expressions that are evaluated by those assertions must not contain any \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\"\u003eside effects\u003c/a\u003e. Otherwise, when leaving the debug mode, the functional behavior\nof the application is not the same anymore.\u003c/p\u003e\n\u003cp\u003eThe rule will raise if the method name starts with any of the following \u003ccode\u003eremove\u003c/code\u003e, \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003eadd\u003c/code\u003e,\n\u003ccode\u003epop\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, \u003ccode\u003eretain\u003c/code\u003e, \u003ccode\u003einsert\u003c/code\u003e, \u003ccode\u003epush\u003c/code\u003e, \u003ccode\u003eappend\u003c/code\u003e, \u003ccode\u003eclear\u003c/code\u003e,\n\u003ccode\u003edequeue\u003c/code\u003e, \u003ccode\u003eenqueue\u003c/code\u003e, \u003ccode\u003edispose\u003c/code\u003e, \u003ccode\u003eput\u003c/code\u003e, or \u003ccode\u003eset\u003c/code\u003e, although \u003ccode\u003eSetEquals\u003c/code\u003e will be\nignored.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn the following example, the assertion checks the return value of the remove method in the argument. Because the whole line is skipped in\nnon-debug builds, the call to \u003ccode\u003eRemove\u003c/code\u003e never happens in such builds.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDebug.Assert(list.Remove(\"dog\"));\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eRemove\u003c/code\u003e call must be extracted and the return value needs to be asserted instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool result \u003d list.Remove(\"dog\");\nDebug.Assert(result);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert/\"\u003e\u003ccode\u003eDebug.Assert\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/\"\u003eDebugging, tracing, and profiling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/how-to-compile-conditionally-with-trace-and-debug\"\u003eHow to: Compile\n  Conditionally with Trace and Debug\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/general#conditional-attribute\"\u003eMiscellaneous attributes\n  interpreted by the C# compiler - \u003ccode\u003eConditional\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia \u003ca href\u003d\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\"\u003eSide effect (computer science)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2257",
    "name": "Using non-standard cryptographic algorithms is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like \u003ccode\u003eAES\u003c/code\u003e, \u003ccode\u003eRSA\u003c/code\u003e, \u003ccode\u003eSHA\u003c/code\u003e, …​ should be used instead.\u003c/p\u003e\n\u003cp\u003eThis rule tracks custom implementation of these types from \u003ccode\u003eSystem.Security.Cryptography\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricAlgorithm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricKeyExchangeDeformatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricKeyExchangeFormatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricSignatureDeformatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricSignatureFormatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDeriveBytes\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eHashAlgorithm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eICryptoTransform\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSymmetricAlgorithm\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class CustomHash : HashAlgorithm // Noncompliant\n{\n    private byte[] result;\n\n    public override void Initialize() \u003d\u0026gt; result \u003d null;\n    protected override byte[] HashFinal() \u003d\u0026gt; result;\n\n    protected override void HashCore(byte[] array, int ibStart, int cbSize) \u003d\u0026gt;\n        result ??\u003d array.Take(8).ToArray();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a standard algorithm instead of creating a custom one. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nSHA256 mySHA256 \u003d SHA256.Create()\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\"\u003eMessageDigest is Custom\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "csharpsquid:S3466",
    "name": "Optional parameters should be passed to \"base\" calls",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen optional parameter values are not passed to base method calls, the value passed in by the caller is ignored. This can cause the function to\nbehave differently than expected, leading to errors and making the code difficult to debug.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class BaseClass\n{\n    public virtual void MyMethod(int i \u003d 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i \u003d 1)\n    {\n        // ...\n        base.MyMethod(); // Noncompliant: caller\u0027s value is ignored\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc \u003d new DerivedClass();\n        dc.MyMethod(12);  // prints 1\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class BaseClass\n{\n    public virtual void MyMethod(int i \u003d 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i \u003d 1)\n    {\n        // ...\n        base.MyMethod(i);\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc \u003d new DerivedClass();\n        dc.MyMethod(12);  // prints 12\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional\nArguments\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen optional parameter values are not passed to base method calls, the value passed in by the caller is ignored. This can cause the function to\nbehave differently than expected, leading to errors and making the code difficult to debug.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class BaseClass\n{\n    public virtual void MyMethod(int i \u003d 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i \u003d 1)\n    {\n        // ...\n        base.MyMethod(); // Noncompliant: caller\u0027s value is ignored\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc \u003d new DerivedClass();\n        dc.MyMethod(12);  // prints 1\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class BaseClass\n{\n    public virtual void MyMethod(int i \u003d 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i \u003d 1)\n    {\n        // ...\n        base.MyMethod(i);\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc \u003d new DerivedClass();\n        dc.MyMethod(12);  // prints 12\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional\nArguments\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1168",
    "name": "Empty arrays and collections should be returned instead of null",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e instead of an actual collection forces the method callers to explicitly test for null, making\nthe code more complex and less readable.\u003c/p\u003e\n\u003cp\u003eMoreover, in many cases, \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e is used as a synonym for empty.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic Result[] GetResults()\n{\n    return null; // Noncompliant\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults(bool condition)\n{\n    var results \u003d GenerateResults();\n    return condition\n        ? results\n        : null; // Noncompliant\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults() \u003d\u0026gt; null; // Noncompliant\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results\n{\n    get\n    {\n        return default(IEnumerable\u0026lt;Result\u0026gt;); // Noncompliant\n    }\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results \u003d\u0026gt; default; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic Result[] GetResults()\n{\n    return new Result[0];\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults(bool condition)\n{\n    var results \u003d GenerateResults();\n    return condition\n        ? results\n        : Enumerable.Empty\u0026lt;Result\u0026gt;();\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults() \u003d\u0026gt; Enumerable.Empty\u0026lt;Result\u0026gt;();\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results\n{\n    get\n    {\n        return Enumerable.Empty\u0026lt;Result\u0026gt;();\n    }\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results \u003d\u0026gt; Enumerable.Empty\u0026lt;Result\u0026gt;();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAlthough \u003ccode\u003estring\u003c/code\u003e is a collection, the rule won’t report on it.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e instead of an actual collection forces the method callers to explicitly test for null, making\nthe code more complex and less readable.\u003c/p\u003e\n\u003cp\u003eMoreover, in many cases, \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e is used as a synonym for empty.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic Result[] GetResults()\n{\n    return null; // Noncompliant\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults(bool condition)\n{\n    var results \u003d GenerateResults();\n    return condition\n        ? results\n        : null; // Noncompliant\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults() \u003d\u0026gt; null; // Noncompliant\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results\n{\n    get\n    {\n        return default(IEnumerable\u0026lt;Result\u0026gt;); // Noncompliant\n    }\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results \u003d\u0026gt; default; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic Result[] GetResults()\n{\n    return new Result[0];\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults(bool condition)\n{\n    var results \u003d GenerateResults();\n    return condition\n        ? results\n        : Enumerable.Empty\u0026lt;Result\u0026gt;();\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; GetResults() \u003d\u0026gt; Enumerable.Empty\u0026lt;Result\u0026gt;();\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results\n{\n    get\n    {\n        return Enumerable.Empty\u0026lt;Result\u0026gt;();\n    }\n}\n\npublic IEnumerable\u0026lt;Result\u0026gt; Results \u003d\u0026gt; Enumerable.Empty\u0026lt;Result\u0026gt;();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAlthough \u003ccode\u003estring\u003c/code\u003e is a collection, the rule won’t report on it.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1048",
    "name": "Finalizers should not throw exceptions",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003efinalizers\u003c/a\u003e are used to perform\n\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#unmanaged-resources\"\u003eany necessary final clean-up\u003c/a\u003e when\nthe garbage collector is collecting a class instance. The programmer has no control over when the finalizer is called; the garbage collector decides\nwhen to call it.\u003c/p\u003e\n\u003cp\u003eWhen creating a finalizer, it should never throw an exception, as there is a high risk of having the application terminated leaving unmanaged\nresources without a graceful cleanup.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue on \u003ccode\u003ethrow\u003c/code\u003e statements used in a finalizer.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n    ~MyClass()\n    {\n        throw new NotImplementedException(); // Noncompliant: finalizer throws an exception\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    ~MyClass()\n    {\n        // Compliant: finalizer does not throw an exception\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eIn general object finalization can be a complex and error-prone operation and should not be implemented except within the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003edispose pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ecleaning up unmanaged resources\u003c/a\u003e, it is\nrecommended to implement the dispose pattern or, to cover uncalled \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eDispose\u003c/code\u003e\u003c/a\u003e method by the consumer, implement \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage\n  collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eIDisposable.Dispose\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003eFinalizers\n  (destructors)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003efinalizers\u003c/a\u003e are used to perform\n\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#unmanaged-resources\"\u003eany necessary final clean-up\u003c/a\u003e when\nthe garbage collector is collecting a class instance. The programmer has no control over when the finalizer is called; the garbage collector decides\nwhen to call it.\u003c/p\u003e\n\u003cp\u003eWhen creating a finalizer, it should never throw an exception, as there is a high risk of having the application terminated leaving unmanaged\nresources without a graceful cleanup.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue on \u003ccode\u003ethrow\u003c/code\u003e statements used in a finalizer.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n    ~MyClass()\n    {\n        throw new NotImplementedException(); // Noncompliant: finalizer throws an exception\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    ~MyClass()\n    {\n        // Compliant: finalizer does not throw an exception\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eIn general object finalization can be a complex and error-prone operation and should not be implemented except within the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003edispose pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ecleaning up unmanaged resources\u003c/a\u003e, it is\nrecommended to implement the dispose pattern or, to cover uncalled \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eDispose\u003c/code\u003e\u003c/a\u003e method by the consumer, implement \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage\n  collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eIDisposable.Dispose\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/finalizers\"\u003eFinalizers\n  (destructors)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2259",
    "name": "Null pointers should not be dereferenced",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAccessing a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null\"\u003enull\u003c/a\u003e value will always throw a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e most likely causing an abrupt program\ntermination.\u003c/p\u003e\n\u003cp\u003eSuch termination might expose sensitive information that a malicious third party could exploit to, for instance, bypass security measures.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIn the following cases, the rule does not raise:\u003c/p\u003e\n\u003ch4\u003eExtensions Methods\u003c/h4\u003e\n\u003cp\u003eCalls to extension methods can still operate on \u003ccode\u003enull\u003c/code\u003e values.\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing System.Text.RegularExpressions;\n\npublic static class Program\n{\n    public static string RemoveVowels(this string value)\n    {\n        if (value \u003d\u003d null)\n        {\n            return null;\n        }\n        return Regex.Replace(value, \"[aeoui]*\",\"\", RegexOptions.IgnoreCase);\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(((string?)null).RemoveVowels());  // Compliant: \u0027RemoveVowels\u0027 is an extension method\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eUnreachable code\u003c/h4\u003e\n\u003cp\u003eUnreachable code is not executed, thus \u003ccode\u003enull\u003c/code\u003e values will never be accessed.\u003c/p\u003e\n\u003cpre\u003e\npublic void Method()\n{\n    object o \u003d null;\n    if (false)\n    {\n        o.ToString();    // Compliant: code is unreachable\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by analysis attributes\u003c/h4\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eNullable analysis attributes\u003c/a\u003e enable\nthe developer to annotate methods with information about the null-state of its arguments. Thus, potential \u003ccode\u003enull\u003c/code\u003e values validated by one of\nthe following attributes will not raise:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is important to note those attributes are only available starting .NET Core 3. As a workaround, it is possible to define those attributes\nmanually in a custom class:\u003c/p\u003e\n\u003cpre\u003e\nusing System;\n\npublic sealed class NotNullAttribute : Attribute { } // The alternative name \u0027ValidatedNotNullAttribute\u0027 is also supported\n\npublic static class Guard\n{\n    public static void NotNull\u0026lt;T\u0026gt;([NotNull] T value, string name) where T : class\n    {\n        if (value \u003d\u003d null)\n        {\n            throw new ArgumentNullException(name);\n        }\n    }\n}\n\npublic static class Utils\n{\n    public static string Normalize(string value)\n    {\n        Guard.NotNull(value, nameof(value)); // Will throw if value is null\n        return value.ToUpper(); // Compliant: value is known to be not null here.\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by Debug.Assert\u003c/h4\u003e\n\u003cp\u003eA value validated with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003eDebug.Assert\u003c/a\u003e to not be\n\u003ccode\u003enull\u003c/code\u003e is safe to access.\u003c/p\u003e\n\u003cpre\u003e\nusing System.Diagnostics;\n\npublic void Method(object myObject)\n{\n    Debug.Assert(myObject !\u003d null);\n    myObject.ToString(); // Compliant: \u0027myObject\u0027 is known to be not null here.\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by IDE-specific attributes\u003c/h4\u003e\n\u003cp\u003eLike with null-analysis-attribute, potential \u003ccode\u003enull\u003c/code\u003e values validated by one of the following IDE-specific attributes will not raise\u003c/p\u003e\n\u003ch5\u003eVisual Studio\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\u003c/a\u003e  (The attribute is\n  interpreted the same as the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e)  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003eJetBrains Rider\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e \u003cpre\u003e\nusing System;\nusing JetBrains.Annotations;\n\npublic class Utils\n{\n    [TerminatesProgram]\n    public void TerminateProgram()\n    {\n        Environment.FailFast(\"A catastrophic failure has occurred.\")\n    }\n\n    public void TerminatesProgramIsRespected()\n    {\n        object myObject \u003d null;\n        TerminateProgram();\n        myObject.ToString(); // Compliant: unreachable\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNull forgiving operator\u003c/h4\u003e\n\u003cp\u003eExpression marked with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving\"\u003enull forgiving\noperator\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic void Method()\n{\n    object o \u003d null;\n    o!.ToString();    // Compliant: the null forgiving operator suppresses the nullable warning\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix the issue, the access of the \u003ccode\u003enull\u003c/code\u003e value needs to be prevented by either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ensuring the variable has a value, or \u003c/li\u003e\n  \u003cli\u003e by checking if the value is not \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe variable \u003ccode\u003emyObject\u003c/code\u003e is equal to \u003ccode\u003enull\u003c/code\u003e, meaning it has no value:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method()\n{\n    object myObject \u003d null;\n    Console.WriteLine(o.ToString()); // Noncompliant: \u0027myObject\u0027 is always null\n}\n\u003c/pre\u003e\n\u003cp\u003eThe parameter \u003ccode\u003einput\u003c/code\u003e might be \u003ccode\u003enull\u003c/code\u003e as suggested by the \u003ccode\u003eif\u003c/code\u003e condition:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method(object input)\n{\n    if (input is null)\n    {\n        // ...\n    }\n    Console.WriteLine(input.ToString()); // Noncompliant: the if condition suggests \u0027input\u0027 might be null\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEnsuring the variable \u003ccode\u003emyObject\u003c/code\u003e has a value resolves the issue:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method()\n{\n    var myObject \u003d new object();\n    Console.WriteLine(myObject.ToString()); // Compliant: \u0027myObject\u0027 is not null\n}\n\u003c/pre\u003e\n\u003cp\u003ePreventing the non-compliant code to be executed by returning early:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method(object input)\n{\n    if (input is null)\n    {\n        return;\n    }\n    Console.WriteLine(input.ToString()); // Compliant: if \u0027input\u0027 is null, this is unreachable\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CVE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eAttributes for\n  null-state static analysis interpreted by the C# compiler\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\n      Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\n  Class\u003c/a\u003e in Visual Studio \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null\"\u003enull (C# Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving\"\u003e! (null-forgiving)\n  operator (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAccessing a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null\"\u003enull\u003c/a\u003e value will always throw a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e most likely causing an abrupt program\ntermination.\u003c/p\u003e\n\u003cp\u003eSuch termination might expose sensitive information that a malicious third party could exploit to, for instance, bypass security measures.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIn the following cases, the rule does not raise:\u003c/p\u003e\n\u003ch4\u003eExtensions Methods\u003c/h4\u003e\n\u003cp\u003eCalls to extension methods can still operate on \u003ccode\u003enull\u003c/code\u003e values.\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing System.Text.RegularExpressions;\n\npublic static class Program\n{\n    public static string RemoveVowels(this string value)\n    {\n        if (value \u003d\u003d null)\n        {\n            return null;\n        }\n        return Regex.Replace(value, \"[aeoui]*\",\"\", RegexOptions.IgnoreCase);\n    }\n\n    public static void Main()\n    {\n        Console.WriteLine(((string?)null).RemoveVowels());  // Compliant: \u0027RemoveVowels\u0027 is an extension method\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eUnreachable code\u003c/h4\u003e\n\u003cp\u003eUnreachable code is not executed, thus \u003ccode\u003enull\u003c/code\u003e values will never be accessed.\u003c/p\u003e\n\u003cpre\u003e\npublic void Method()\n{\n    object o \u003d null;\n    if (false)\n    {\n        o.ToString();    // Compliant: code is unreachable\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by analysis attributes\u003c/h4\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eNullable analysis attributes\u003c/a\u003e enable\nthe developer to annotate methods with information about the null-state of its arguments. Thus, potential \u003ccode\u003enull\u003c/code\u003e values validated by one of\nthe following attributes will not raise:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is important to note those attributes are only available starting .NET Core 3. As a workaround, it is possible to define those attributes\nmanually in a custom class:\u003c/p\u003e\n\u003cpre\u003e\nusing System;\n\npublic sealed class NotNullAttribute : Attribute { } // The alternative name \u0027ValidatedNotNullAttribute\u0027 is also supported\n\npublic static class Guard\n{\n    public static void NotNull\u0026lt;T\u0026gt;([NotNull] T value, string name) where T : class\n    {\n        if (value \u003d\u003d null)\n        {\n            throw new ArgumentNullException(name);\n        }\n    }\n}\n\npublic static class Utils\n{\n    public static string Normalize(string value)\n    {\n        Guard.NotNull(value, nameof(value)); // Will throw if value is null\n        return value.ToUpper(); // Compliant: value is known to be not null here.\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by Debug.Assert\u003c/h4\u003e\n\u003cp\u003eA value validated with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003eDebug.Assert\u003c/a\u003e to not be\n\u003ccode\u003enull\u003c/code\u003e is safe to access.\u003c/p\u003e\n\u003cpre\u003e\nusing System.Diagnostics;\n\npublic void Method(object myObject)\n{\n    Debug.Assert(myObject !\u003d null);\n    myObject.ToString(); // Compliant: \u0027myObject\u0027 is known to be not null here.\n}\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by IDE-specific attributes\u003c/h4\u003e\n\u003cp\u003eLike with null-analysis-attribute, potential \u003ccode\u003enull\u003c/code\u003e values validated by one of the following IDE-specific attributes will not raise\u003c/p\u003e\n\u003ch5\u003eVisual Studio\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\u003c/a\u003e  (The attribute is\n  interpreted the same as the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e)  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003eJetBrains Rider\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e \u003cpre\u003e\nusing System;\nusing JetBrains.Annotations;\n\npublic class Utils\n{\n    [TerminatesProgram]\n    public void TerminateProgram()\n    {\n        Environment.FailFast(\"A catastrophic failure has occurred.\")\n    }\n\n    public void TerminatesProgramIsRespected()\n    {\n        object myObject \u003d null;\n        TerminateProgram();\n        myObject.ToString(); // Compliant: unreachable\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eNull forgiving operator\u003c/h4\u003e\n\u003cp\u003eExpression marked with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving\"\u003enull forgiving\noperator\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic void Method()\n{\n    object o \u003d null;\n    o!.ToString();    // Compliant: the null forgiving operator suppresses the nullable warning\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix the issue, the access of the \u003ccode\u003enull\u003c/code\u003e value needs to be prevented by either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ensuring the variable has a value, or \u003c/li\u003e\n  \u003cli\u003e by checking if the value is not \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe variable \u003ccode\u003emyObject\u003c/code\u003e is equal to \u003ccode\u003enull\u003c/code\u003e, meaning it has no value:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method()\n{\n    object myObject \u003d null;\n    Console.WriteLine(o.ToString()); // Noncompliant: \u0027myObject\u0027 is always null\n}\n\u003c/pre\u003e\n\u003cp\u003eThe parameter \u003ccode\u003einput\u003c/code\u003e might be \u003ccode\u003enull\u003c/code\u003e as suggested by the \u003ccode\u003eif\u003c/code\u003e condition:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Method(object input)\n{\n    if (input is null)\n    {\n        // ...\n    }\n    Console.WriteLine(input.ToString()); // Noncompliant: the if condition suggests \u0027input\u0027 might be null\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEnsuring the variable \u003ccode\u003emyObject\u003c/code\u003e has a value resolves the issue:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method()\n{\n    var myObject \u003d new object();\n    Console.WriteLine(myObject.ToString()); // Compliant: \u0027myObject\u0027 is not null\n}\n\u003c/pre\u003e\n\u003cp\u003ePreventing the non-compliant code to be executed by returning early:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic void Method(object input)\n{\n    if (input is null)\n    {\n        return;\n    }\n    Console.WriteLine(input.ToString()); // Compliant: if \u0027input\u0027 is null, this is unreachable\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CVE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eAttributes for\n  null-state static analysis interpreted by the C# compiler\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\n      Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\n  Class\u003c/a\u003e in Visual Studio \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null\"\u003enull (C# Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving\"\u003e! (null-forgiving)\n  operator (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6612",
    "name": "The lambda parameter should be used instead of capturing arguments in \"ConcurrentDictionary\" methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e, there are many overloads of the \u003ccode\u003eGetOrAdd\u003c/code\u003e and \u003ccode\u003eAddOrUpdate\u003c/code\u003e methods that\ntake both a \u003ccode\u003eTKey\u003c/code\u003e argument and a lambda that expects a \u003ccode\u003eTKey\u003c/code\u003e parameter. This means that the right side of the lambda can be\nwritten using either the lambda’s parameter or the method’s argument. However, using the method’s argument leads to the lambda capturing it, and the\ncompiler will need to generate a class and instantiate it before the call. This means memory allocations, as well as more time spend during Garbage\nCollection.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhen you are using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e methods \u003ccode\u003eGetOrAdd\u003c/code\u003e or \u003ccode\u003eAddOrUpdate\u003c/code\u003e, reference the key by using the\nlambda’s parameter instead of the method’s one.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint UpdateValue(ConcurrentDictionary\u0026lt;int, int\u0026gt; dict, int key) \u003d\u0026gt;\n    dict.GetOrAdd(key, _ \u003d\u0026gt; key + 42);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint UpdateValue(ConcurrentDictionary\u0026lt;int, int\u0026gt; dict, int key) \u003d\u0026gt;\n    dict.GetOrAdd(key, x \u003d\u0026gt; x + 42);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.GetOrAdd\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.addorupdate\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.AddOrUpdate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68.81 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.432 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88000063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40.76 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.239 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88259787 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e41.82 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.730 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.55\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate ConcurrentDictionary\u0026lt;int, string\u0026gt; dict;\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup()\n{\n    dict \u003d new ConcurrentDictionary\u0026lt;int, string\u0026gt;();\n    data \u003d Enumerable.Range(0, N).OrderBy(_ \u003d\u0026gt; Guid.NewGuid()).ToList();\n}\n\n[Benchmark(baseline\u003dtrue)]\npublic void Capture()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, _ \u003d\u0026gt; $\"{guid}\"); // \"guid\" is captured\n    }\n}\n\n[Benchmark]\npublic void Lambda()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, x \u003d\u0026gt; $\"{x}\"); // no capture\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e, there are many overloads of the \u003ccode\u003eGetOrAdd\u003c/code\u003e and \u003ccode\u003eAddOrUpdate\u003c/code\u003e methods that\ntake both a \u003ccode\u003eTKey\u003c/code\u003e argument and a lambda that expects a \u003ccode\u003eTKey\u003c/code\u003e parameter. This means that the right side of the lambda can be\nwritten using either the lambda’s parameter or the method’s argument. However, using the method’s argument leads to the lambda capturing it, and the\ncompiler will need to generate a class and instantiate it before the call. This means memory allocations, as well as more time spend during Garbage\nCollection.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhen you are using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e methods \u003ccode\u003eGetOrAdd\u003c/code\u003e or \u003ccode\u003eAddOrUpdate\u003c/code\u003e, reference the key by using the\nlambda’s parameter instead of the method’s one.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint UpdateValue(ConcurrentDictionary\u0026lt;int, int\u0026gt; dict, int key) \u003d\u0026gt;\n    dict.GetOrAdd(key, _ \u003d\u0026gt; key + 42);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint UpdateValue(ConcurrentDictionary\u0026lt;int, int\u0026gt; dict, int key) \u003d\u0026gt;\n    dict.GetOrAdd(key, x \u003d\u0026gt; x + 42);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.GetOrAdd\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.addorupdate\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.AddOrUpdate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68.81 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.432 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88000063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40.76 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.239 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88259787 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e41.82 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.730 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.55\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate ConcurrentDictionary\u0026lt;int, string\u0026gt; dict;\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup()\n{\n    dict \u003d new ConcurrentDictionary\u0026lt;int, string\u0026gt;();\n    data \u003d Enumerable.Range(0, N).OrderBy(_ \u003d\u0026gt; Guid.NewGuid()).ToList();\n}\n\n[Benchmark(baseline\u003dtrue)]\npublic void Capture()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, _ \u003d\u0026gt; $\"{guid}\"); // \"guid\" is captured\n    }\n}\n\n[Benchmark]\npublic void Lambda()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, x \u003d\u0026gt; $\"{x}\"); // no capture\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5766",
    "name": "Deserializing objects without performing data validation is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDeserialization process extracts data from the serialized representation of an object and reconstruct it directly, without calling constructors.\nThus, data validation implemented in constructors can be bypassed if serialized objects are controlled by an attacker.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The data validation implemented in constructors enforces a relevant security check. \u003c/li\u003e\n  \u003cli\u003e Objects instantiated via deserialization don’t run the same security checks as the ones executed when objects are created through constructors.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWhen a \u003ccode\u003eserializable\u003c/code\u003e class doesn’t inherit from \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view\u003dnetframework-4.8\"\u003eISerializable\u003c/a\u003e or \u003ca\nhref\u003d\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view\u003dnetframework-4.8\"\u003eIDeserializationCallback\u003c/a\u003e\ntypes and has a constructor using its parameters in conditions:\u003c/p\u003e\n\u003cpre\u003e\n[Serializable]\npublic class InternalUrl\n{\n    private string url;\n\n    public InternalUrl(string tmpUrl) // Sensitive\n    {\n       if(!tmpUrl.StartsWith(\"http://localhost/\")) // there is some input validation\n       {\n          url\u003d \"http://localhost/default\";\n       }\n       else\n       {\n          url\u003d tmpUrl;\n       }\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen a class inherit from \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view\u003dnetframework-4.8\"\u003eISerializable\u003c/a\u003e type, has a\nregular constructor using its parameters in conditions, but doesn’t perform the same validation after deserialization:\u003c/p\u003e\n\u003cpre\u003e\n[Serializable]\npublic class InternalUrl : ISerializable\n{\n    private string url;\n\n    public InternalUrl(string tmpUrl) // Sensitive\n    {\n        if(!tmpUrl.StartsWith(\"http://localhost/\")) // there is some input validation\n        {\n            url\u003d \"http://localhost/default\";\n        }\n        else\n        {\n            url\u003d tmpUrl;\n        }\n    }\n\n    // special constructor used during deserialization\n    protected InternalUrl(SerializationInfo info, StreamingContext context) // Sensitive\n    {\n       url\u003d (string) info.GetValue(\"url\", typeof(string));\n       // the same validation as seen in the regular constructor is not performed\n     }\n\n    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        info.AddValue(\"url\", url);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen a class inherit from \u003ca\nhref\u003d\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view\u003dnetframework-4.8\"\u003eIDeserializationCallback\u003c/a\u003e\ntype, has a constructor using its parameters in conditions but the \u003ccode\u003eIDeserializationCallback.OnDeserialization\u003c/code\u003e method doesn’t perform any\nconditional checks:\u003c/p\u003e\n\u003cpre\u003e\n[Serializable]\npublic class InternalUrl : IDeserializationCallback\n{\n    private string url;\n\n    public InternalUrl(string tmpUrl) // Sensitive\n    {\n        if(!tmpUrl.StartsWith(\"http://localhost/\")) // there is some input validation\n        {\n            url\u003d \"http://localhost/default\";\n        }\n        else\n        {\n            url\u003d tmpUrl;\n        }\n    }\n\n    void IDeserializationCallback.OnDeserialization(object sender) // Sensitive\n    {\n       // the same validation as seen in the constructor is not performed\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e At the end of the deserialization process it is recommended to perform the same validation checks as the ones performed in constructors,\n  especially when the serialized object can be controlled by an attacker. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eWhen using \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.iserializable?view\u003dnetframework-4.8\"\u003eISerializable\u003c/a\u003e\ntype to control deserialization, perform the same checks inside regular constructors than in the special constructor \u003ccode\u003eSerializationInfo info,\nStreamingContext context\u003c/code\u003e used during deserialization:\u003c/p\u003e\n\u003cpre\u003e\n[Serializable]\npublic class InternalUrl : ISerializable\n{\n    private string url;\n\n    public InternalUrl(string tmpUrl)\n    {\n        if(!tmpUrl.StartsWith(\"http://localhost/\")) // there is some input validation\n        {\n            url\u003d \"http://localhost/default\";\n        }\n        else\n        {\n            url\u003d tmpUrl;\n        }\n    }\n\n    // special constructor used during deserialization\n    protected InternalUrl(SerializationInfo info, StreamingContext context)\n    {\n       string tmpUrl\u003d (string) info.GetValue(\"url\", typeof(string));\n\n       if(!tmpUrl.StartsWith(\"http://localhost/\") { // Compliant\n          url\u003d \"http://localhost/default\";\n       }\n       else {\n          url\u003d tmpUrl;\n       }\n     }\n\n    void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        info.AddValue(\"url\", url);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ca\nhref\u003d\"https://docs.microsoft.com/fr-fr/dotnet/api/system.runtime.serialization.ideserializationcallback?view\u003dnetframework-4.8\"\u003eIDeserializationCallback\u003c/a\u003e\ntype to control deserialization, perform the same checks inside regular constructors than after deserialization with\n\u003ccode\u003eIDeserializationCallback.OnDeserialization\u003c/code\u003e method:\u003c/p\u003e\n\u003cpre\u003e\n[Serializable]\npublic class InternalUrl : IDeserializationCallback\n{\n    private string url;\n\n    public InternalUrl(string tmpUrl)\n    {\n       if(!tmpUrl.StartsWith(\"http://localhost/\")) // there is some input validation\n       {\n          url\u003d \"http://localhost/default\";\n       }\n       else\n       {\n          url\u003d tmpUrl;\n       }\n    }\n\n    void IDeserializationCallback.OnDeserialization(object sender) // Compliant\n    {\n        if(!url.StartsWith(\"http://localhost/\"))\n        {\n            url\u003d \"http://localhost/default\";\n        }\n        else\n        {\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/framework/misc/security-and-serialization\"\u003edocs.microsoft.com\u003c/a\u003e - security-and-serialization\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502\"\u003eCWE-502 - Deserialization of Untrusted Data\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S6613",
    "name": "\"First\" and \"Last\" properties of \"LinkedList\" should be used instead of the \"First()\" and \"Last()\" extension methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eEnumerable.First\u003c/code\u003e extension method and the \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e property can be used to find the first value\nin a \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.First\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eLast\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.first\"\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.last\"\u003eLinkedList\u0026lt;T\u0026gt;.Last\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eFirst\u003c/code\u003e and \u003ccode\u003eLast\u003c/code\u003e properties are defined on the \u003ccode\u003eLinkedList\u003c/code\u003e class, and the extension method call can be\nreplaced by calling the propery instead.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetFirst(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.First();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetLast(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Last();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetFirst(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.First.Value;\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetLast(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Last.Value;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1\"\u003eLinkedList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e919,577,629.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e44,299,688.61 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48504 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e271.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15.63 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e810,316,427.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e47,768,482.31 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57344 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e372.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.38 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate LinkedList\u0026lt;int\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(100_000)]\npublic int Size { get; set; }\n\n[Params(1_000)]\npublic int Runs { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new LinkedList\u0026lt;int\u0026gt;(Enumerable.Range(0, Size).Select(x \u003d\u0026gt; random.Next()));\n\n[Benchmark(Baseline \u003d true)]\npublic void LastMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last();                // Enumerable.Last()\n    }\n}\n\n[Benchmark]\npublic void LastProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last;                  // Last property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eEnumerable.First\u003c/code\u003e extension method and the \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e property can be used to find the first value\nin a \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.First\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eLast\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.first\"\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.last\"\u003eLinkedList\u0026lt;T\u0026gt;.Last\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eFirst\u003c/code\u003e and \u003ccode\u003eLast\u003c/code\u003e properties are defined on the \u003ccode\u003eLinkedList\u003c/code\u003e class, and the extension method call can be\nreplaced by calling the propery instead.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetFirst(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.First();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetLast(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Last();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetFirst(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.First.Value;\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetLast(LinkedList\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Last.Value;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1\"\u003eLinkedList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e919,577,629.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e44,299,688.61 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48504 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e271.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15.63 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e810,316,427.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e47,768,482.31 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57344 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e372.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.38 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate LinkedList\u0026lt;int\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(100_000)]\npublic int Size { get; set; }\n\n[Params(1_000)]\npublic int Runs { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new LinkedList\u0026lt;int\u0026gt;(Enumerable.Range(0, Size).Select(x \u003d\u0026gt; random.Next()));\n\n[Benchmark(Baseline \u003d true)]\npublic void LastMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last();                // Enumerable.Last()\n    }\n}\n\n[Benchmark]\npublic void LastProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last;                  // Last property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3450",
    "name": "Parameters with \"[DefaultParameterValue]\" attributes should also be marked \"[Optional]\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n\u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e should always be used in conjunction with \u003ccode\u003e[Optional]\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void MyMethod(int j \u003d 5)\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic void MyMethod([DefaultParameterValue(5)][Optional] int j)\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n\u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e should always be used in conjunction with \u003ccode\u003e[Optional]\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void MyMethod(int j \u003d 5)\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic void MyMethod([DefaultParameterValue(5)][Optional] int j)\n{\n  Console.WriteLine(j);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2360",
    "name": "Optional parameters should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe overloading mechanism should be used in place of optional parameters for several reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. \u003c/li\u003e\n  \u003cli\u003e The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you\n  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. \u003c/li\u003e\n  \u003cli\u003e Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid Notify(string company, string office \u003d \"QJZ\") // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid Notify(string company)\n{\n  Notify(company, \"QJZ\");\n}\nvoid Notify(string company, string office)\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores non externally visible methods.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe overloading mechanism should be used in place of optional parameters for several reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. \u003c/li\u003e\n  \u003cli\u003e The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you\n  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. \u003c/li\u003e\n  \u003cli\u003e Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid Notify(string company, string office \u003d \"QJZ\") // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid Notify(string company)\n{\n  Notify(company, \"QJZ\");\n}\nvoid Notify(string company, string office)\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores non externally visible methods.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1151",
    "name": "\"switch case\" clauses should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ecase\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ecase\u003c/code\u003e clause should be extracted into a dedicated method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 8:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable)\n{\n    case 0: // Noncompliant: 9 statements in the case\n        methodCall1(\"\");\n        methodCall2(\"\");\n        methodCall3(\"\");\n        methodCall4(\"\");\n        methodCall5(\"\");\n        methodCall6(\"\");\n        methodCall7(\"\");\n        methodCall8(\"\");\n        methodCall9(\"\");\n        break;\n    case 1:\n        ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable)\n{\n    case 0:\n        DoSomething()\n        break;\n    case 1:\n        ...\n}\n...\nprivate void DoSomething()\n{\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    methodCall5(\"\");\n    methodCall6(\"\");\n    methodCall7(\"\");\n    methodCall8(\"\");\n    methodCall9(\"\");\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ecase\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ecase\u003c/code\u003e clause should be extracted into a dedicated method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 8:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable)\n{\n    case 0: // Noncompliant: 9 statements in the case\n        methodCall1(\"\");\n        methodCall2(\"\");\n        methodCall3(\"\");\n        methodCall4(\"\");\n        methodCall5(\"\");\n        methodCall6(\"\");\n        methodCall7(\"\");\n        methodCall8(\"\");\n        methodCall9(\"\");\n        break;\n    case 1:\n        ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable)\n{\n    case 0:\n        DoSomething()\n        break;\n    case 1:\n        ...\n}\n...\nprivate void DoSomething()\n{\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    methodCall5(\"\");\n    methodCall6(\"\");\n    methodCall7(\"\");\n    methodCall8(\"\");\n    methodCall9(\"\");\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of statements.",
        "defaultValue": "8",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "8"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S927",
    "name": "Parameter names should match base declaration and other partial definitions",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eParameters are part of the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003emethod signature\u003c/a\u003e and its\nidentity.\u003c/p\u003e\n\u003cp\u003eImplementing a method from an interface, a base class, or a partial method and changing one of its parameters\u0027 names will confuse and impact its\nreadability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninterface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter\u0027s name differs from base\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any ambiguity in the code, parameters\u0027 names should match the initial declaration, whether its initial declaration is from an interface, a\nbase class, or a partial method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninterface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter\u0027s name match base name\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003eMethod signatures in\n  C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003eMethod signatures - Wiki\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eParameters are part of the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003emethod signature\u003c/a\u003e and its\nidentity.\u003c/p\u003e\n\u003cp\u003eImplementing a method from an interface, a base class, or a partial method and changing one of its parameters\u0027 names will confuse and impact its\nreadability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninterface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int amount) // Noncompliant: parameter\u0027s name differs from base\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any ambiguity in the code, parameters\u0027 names should match the initial declaration, whether its initial declaration is from an interface, a\nbase class, or a partial method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninterface IBankAccount\n{\n  void AddMoney(int money);\n}\n\nclass BankAccount : IBankAccount\n{\n  void AddMoney(int money) // Compliant: parameter\u0027s name match base name\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods#method-signatures\"\u003eMethod signatures in\n  C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003eMethod signatures - Wiki\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3218",
    "name": "Inner class members should not shadow outer class \"static\" or type members",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNaming the members of an inner class the same as the static members of its enclosing class is possible but generally considered a bad practice.\nThat’s because maintainers may be confused about which members are being used in a given context. Instead the inner class member should be given\ndistinct and descriptive name, and all references to it should be updated accordingly.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int A; // Noncompliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns inner A. Was that intended?\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eHere’s an example of compliant code after renaming the inner class member, this way the property will return the \u003ccode\u003eOuter\u003c/code\u003e A:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int B; // Compliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns outer A\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eOr if you want to reference the \u003ccode\u003eInner\u003c/code\u003e A field:\u003c/p\u003e\n\u003cpre\u003e\nclass Outer\n{\n  public static int B;\n\n  public class Inner\n  {\n    public int A; // Compliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns inner A\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions\"\u003eCommon Coding Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types\"\u003eNested Types\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNaming the members of an inner class the same as the static members of its enclosing class is possible but generally considered a bad practice.\nThat’s because maintainers may be confused about which members are being used in a given context. Instead the inner class member should be given\ndistinct and descriptive name, and all references to it should be updated accordingly.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int A; // Noncompliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns inner A. Was that intended?\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eHere’s an example of compliant code after renaming the inner class member, this way the property will return the \u003ccode\u003eOuter\u003c/code\u003e A:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int B; // Compliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns outer A\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eOr if you want to reference the \u003ccode\u003eInner\u003c/code\u003e A field:\u003c/p\u003e\n\u003cpre\u003e\nclass Outer\n{\n  public static int B;\n\n  public class Inner\n  {\n    public int A; // Compliant\n\n    public int MyProp\n    {\n      get \u003d\u0026gt; A; // Returns inner A\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions\"\u003eCommon Coding Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types\"\u003eNested Types\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6607",
    "name": "The collection should be filtered before sorting by using \"Where\" before \"OrderBy\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen working with LINQ in C#, it is recommended to pay attention to the order in which methods are chained, especially when using\n\u003ccode\u003eWhere\u003c/code\u003e and \u003ccode\u003eOrderBy\u003c/code\u003e methods. It is advised to call the \u003ccode\u003eWhere\u003c/code\u003e method before \u003ccode\u003eOrderBy\u003c/code\u003e because\n\u003ccode\u003eWhere\u003c/code\u003e filters the elements of the sequence based on a given condition and returns a new sequence containing only the elements that\nsatisfy that condition. Calling \u003ccode\u003eOrderBy\u003c/code\u003e before \u003ccode\u003eWhere\u003c/code\u003e, may end up sorting elements that will be later discarded, which can\nlead to inefficiency. Conversely, calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e, will first filter the sequence to include only the elements\nof interest, and then sort them based on the specified order.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe issue can be fixed by calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic IEnumerable\u0026lt;int\u0026gt; GetSortedFilteredList(IEnumerable\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic IEnumerable\u0026lt;int\u0026gt; GetSortedFilteredList(IEnumerable\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n     data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0).OrderBy(x \u003d\u0026gt; x);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby\"\u003eEnumerable.OrderBy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eEnumerable.Where\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/7499384/does-the-order-of-linq-functions-matter/7499454#7499454\"\u003eJon Skeet’s explanation on Stack\n  Overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOrderByThenWhere\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e175.36 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWhereThenOrderBy\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.58 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.697 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate IList\u0026lt;int\u0026gt; data;\nprivate static readonly Random Random \u003d new Random();\n\n[Params(1_000_000)]\npublic int NumberOfEntries;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, NumberOfEntries).Select(x \u003d\u0026gt; Random.Next(0, NumberOfEntries)).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void OrderByThenWhere() \u003d\u0026gt;\n    _ \u003d data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).ToList();  // OrderBy followed by Where\n\n[Benchmark]\npublic void WhereThenOrderBy() \u003d\u0026gt;\n    _ \u003d data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).OrderBy(x \u003d\u0026gt; x).ToList();  // Where followed by OrderBy\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen working with LINQ in C#, it is recommended to pay attention to the order in which methods are chained, especially when using\n\u003ccode\u003eWhere\u003c/code\u003e and \u003ccode\u003eOrderBy\u003c/code\u003e methods. It is advised to call the \u003ccode\u003eWhere\u003c/code\u003e method before \u003ccode\u003eOrderBy\u003c/code\u003e because\n\u003ccode\u003eWhere\u003c/code\u003e filters the elements of the sequence based on a given condition and returns a new sequence containing only the elements that\nsatisfy that condition. Calling \u003ccode\u003eOrderBy\u003c/code\u003e before \u003ccode\u003eWhere\u003c/code\u003e, may end up sorting elements that will be later discarded, which can\nlead to inefficiency. Conversely, calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e, will first filter the sequence to include only the elements\nof interest, and then sort them based on the specified order.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe issue can be fixed by calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic IEnumerable\u0026lt;int\u0026gt; GetSortedFilteredList(IEnumerable\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic IEnumerable\u0026lt;int\u0026gt; GetSortedFilteredList(IEnumerable\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n     data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0).OrderBy(x \u003d\u0026gt; x);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby\"\u003eEnumerable.OrderBy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eEnumerable.Where\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/7499384/does-the-order-of-linq-functions-matter/7499454#7499454\"\u003eJon Skeet’s explanation on Stack\n  Overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOrderByThenWhere\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e175.36 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWhereThenOrderBy\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.58 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.697 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate IList\u0026lt;int\u0026gt; data;\nprivate static readonly Random Random \u003d new Random();\n\n[Params(1_000_000)]\npublic int NumberOfEntries;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, NumberOfEntries).Select(x \u003d\u0026gt; Random.Next(0, NumberOfEntries)).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void OrderByThenWhere() \u003d\u0026gt;\n    _ \u003d data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).ToList();  // OrderBy followed by Where\n\n[Benchmark]\npublic void WhereThenOrderBy() \u003d\u0026gt;\n    _ \u003d data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).OrderBy(x \u003d\u0026gt; x).ToList();  // Where followed by OrderBy\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3217",
    "name": "\"Explicit\" conversions of \"foreach\" loops should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eforeach\u003c/a\u003e\nstatement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such\nas \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist\"\u003eArrayList\u003c/a\u003e. The \u003ccode\u003eforeach\u003c/code\u003e statements allow you to\ndowncast elements of a collection of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object\"\u003eObjects\u003c/a\u003e to any other type.\u003c/p\u003e\n\u003cp\u003eThe problem is that to achieve the cast, the \u003ccode\u003eforeach\u003c/code\u003e statements silently perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eexplicit type\nconversion\u003c/a\u003e, which at runtime can result in an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eC# code iterating on generic collections or arrays should not rely on \u003ccode\u003eforeach\u003c/code\u003e statement’s silent \u003ccode\u003eexplicit\u003c/code\u003e\nconversions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket \u003d new List\u0026lt;Fruit\u0026gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Apple());\n\n    foreach (Orange orange in fruitBasket) // Noncompliant\n    {\n      //...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket \u003d new List\u0026lt;Fruit\u0026gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Apple());\n\n    foreach (Orange orange in fruitBasket.OfType\u0026lt;Orange\u0026gt;())\n    {\n      //...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores iterations on collections of \u003ccode\u003eobjects\u003c/code\u003e. This includes legacy code that uses \u003ccode\u003eArrayList\u003c/code\u003e. Furthermore, the\nrule does not report on cases when user-defined conversions are being called.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eForeach\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist\"\u003eArrayList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object\"\u003eObject class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eExplicit\n  conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eforeach\u003c/a\u003e\nstatement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such\nas \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist\"\u003eArrayList\u003c/a\u003e. The \u003ccode\u003eforeach\u003c/code\u003e statements allow you to\ndowncast elements of a collection of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object\"\u003eObjects\u003c/a\u003e to any other type.\u003c/p\u003e\n\u003cp\u003eThe problem is that to achieve the cast, the \u003ccode\u003eforeach\u003c/code\u003e statements silently perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eexplicit type\nconversion\u003c/a\u003e, which at runtime can result in an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eC# code iterating on generic collections or arrays should not rely on \u003ccode\u003eforeach\u003c/code\u003e statement’s silent \u003ccode\u003eexplicit\u003c/code\u003e\nconversions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket \u003d new List\u0026lt;Fruit\u0026gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Apple());\n\n    foreach (Orange orange in fruitBasket) // Noncompliant\n    {\n      //...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket \u003d new List\u0026lt;Fruit\u0026gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Apple());\n\n    foreach (Orange orange in fruitBasket.OfType\u0026lt;Orange\u0026gt;())\n    {\n      //...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores iterations on collections of \u003ccode\u003eobjects\u003c/code\u003e. This includes legacy code that uses \u003ccode\u003eArrayList\u003c/code\u003e. Furthermore, the\nrule does not report on cases when user-defined conversions are being called.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement\"\u003eForeach\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.arraylist\"\u003eArrayList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object\"\u003eObject class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions#explicit-conversions\"\u003eExplicit\n  conversion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3459",
    "name": "Unassigned members should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,\nmistakes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int field; // Noncompliant, shouldn\u0027t it be initialized? This way the value is always default(int), 0.\n  private int Property { get; set; }  // Noncompliant\n  public void Print()\n  {\n    Console.WriteLine(field); //Will always print 0\n    Console.WriteLine(Property); //Will always print 0\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int field \u003d 1;\n  private int Property { get; set; } \u003d 42;\n  public void Print()\n  {\n    field++;\n    Console.WriteLine(field);\n    Console.WriteLine(Property);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Fields on types decorated with \u003ccode\u003eSystem.SerializableAttribute\u003c/code\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,\nmistakes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int field; // Noncompliant, shouldn\u0027t it be initialized? This way the value is always default(int), 0.\n  private int Property { get; set; }  // Noncompliant\n  public void Print()\n  {\n    Console.WriteLine(field); //Will always print 0\n    Console.WriteLine(Property); //Will always print 0\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private int field \u003d 1;\n  private int Property { get; set; } \u003d 42;\n  public void Print()\n  {\n    field++;\n    Console.WriteLine(field);\n    Console.WriteLine(Property);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Fields on types decorated with \u003ccode\u003eSystem.SerializableAttribute\u003c/code\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6608",
    "name": "Prefer indexing instead of \"Enumerable\" methods on types implementing \"IList\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIndexes in C# provide direct access to an element at a specific position within an array or collection. When compared to \u003ccode\u003eEnumerable\u003c/code\u003e\nmethods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the\nunderlying collection type before accessing it.\u003c/p\u003e\n\u003cp\u003eThis applies to types that implement one of these interfaces:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist\"\u003eIList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1\"\u003eIList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1\"\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf the type you are using implements \u003ccode\u003eIList\u003c/code\u003e, \u003ccode\u003eIList\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/code\u003e, it implements\n\u003ccode\u003ethis[int index]\u003c/code\u003e. This means calls to \u003ccode\u003eFirst\u003c/code\u003e, \u003ccode\u003eLast\u003c/code\u003e, or \u003ccode\u003eElementAt(index)\u003c/code\u003e can be replaced with\nindexing at \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003eCount-1\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e respectively.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetAt(List\u0026lt;int\u0026gt; data, int index)\n    \u003d\u0026gt; data.ElementAt(index);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetFirst(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data.First();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetLast(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data.Last();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetAt(List\u0026lt;int\u0026gt; data, int index)\n    \u003d\u0026gt; data[index];\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetFirst(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data[0];\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nint GetLast(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data[data.Count-1];\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.item\"\u003eIList.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1.item\"\u003eIList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1.item\"\u003eIReadonlyList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15,193.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e233.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9,465.6 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e148.16 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,790.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e165.70 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e398.5 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.36 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,398.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.48 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e347.3 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e12,205.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e298.49 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8,917.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e51.55 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,109.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100.13 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e566.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,052.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e76.02 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e680.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;byte\u0026gt; data;\nprivate Random random;\n\n[Params(1_000_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int LoopSize;\n\n[GlobalSetup]\npublic void Setup()\n{\n    random \u003d new Random(42);\n    var bytes \u003d new byte[SampleSize];\n    random.NextBytes(bytes);\n    data \u003d bytes.ToList();\n}\n\n[Benchmark]\npublic void ElementAt()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data.ElementAt(index);\n    }\n}\n\n[Benchmark]\npublic void Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data[index];\n    }\n}\n\n[Benchmark]\npublic void First()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.First();\n    }\n}\n\n[Benchmark]\npublic void First_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[0];\n    }\n}\n\n[Benchmark]\npublic void Last()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.Last();\n    }\n}\n\n[Benchmark]\npublic void Last_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[data.Count - 1];\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIndexes in C# provide direct access to an element at a specific position within an array or collection. When compared to \u003ccode\u003eEnumerable\u003c/code\u003e\nmethods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the\nunderlying collection type before accessing it.\u003c/p\u003e\n\u003cp\u003eThis applies to types that implement one of these interfaces:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist\"\u003eIList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1\"\u003eIList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1\"\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf the type you are using implements \u003ccode\u003eIList\u003c/code\u003e, \u003ccode\u003eIList\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/code\u003e, it implements\n\u003ccode\u003ethis[int index]\u003c/code\u003e. This means calls to \u003ccode\u003eFirst\u003c/code\u003e, \u003ccode\u003eLast\u003c/code\u003e, or \u003ccode\u003eElementAt(index)\u003c/code\u003e can be replaced with\nindexing at \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003eCount-1\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetAt(List\u0026lt;int\u0026gt; data, int index)\n    \u003d\u0026gt; data.ElementAt(index);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetFirst(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data.First();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetLast(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data.Last();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetAt(List\u0026lt;int\u0026gt; data, int index)\n    \u003d\u0026gt; data[index];\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetFirst(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data[0];\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nint GetLast(List\u0026lt;int\u0026gt; data)\n    \u003d\u0026gt; data[data.Count-1];\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.item\"\u003eIList.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1.item\"\u003eIList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1.item\"\u003eIReadonlyList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15,193.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e233.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9,465.6 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e148.16 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,790.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e165.70 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e398.5 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.36 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,398.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.48 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e347.3 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e12,205.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e298.49 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8,917.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e51.55 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,109.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100.13 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e566.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,052.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e76.02 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e680.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;byte\u0026gt; data;\nprivate Random random;\n\n[Params(1_000_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int LoopSize;\n\n[GlobalSetup]\npublic void Setup()\n{\n    random \u003d new Random(42);\n    var bytes \u003d new byte[SampleSize];\n    random.NextBytes(bytes);\n    data \u003d bytes.ToList();\n}\n\n[Benchmark]\npublic void ElementAt()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data.ElementAt(index);\n    }\n}\n\n[Benchmark]\npublic void Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data[index];\n    }\n}\n\n[Benchmark]\npublic void First()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.First();\n    }\n}\n\n[Benchmark]\npublic void First_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[0];\n    }\n}\n\n[Benchmark]\npublic void Last()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.Last();\n    }\n}\n\n[Benchmark]\npublic void Last_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[data.Count - 1];\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6605",
    "name": "Collection-specific \"Exists\" method should be used instead of the \"Any\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.Exists\u003c/code\u003e method and \u003ccode\u003eIEnumerable.Any\u003c/code\u003e method can be used to find the first element that satisfies a predicate\nin a collection. However, \u003ccode\u003eList.Exists\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.Any\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects, as well as requires\nsignificantly less memory. For small collections, the performance difference may be negligible, but for large collections, it can be noticeable. The\nsame applies to \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003cp\u003eAlso, no memory allocations were needed for the \u003ccode\u003eExists\u003c/code\u003e method, since the search is done in-place.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eExists\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eAny\u003c/code\u003e extension method if a\npredicate is used. The method can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ContainsEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ContainsEven(int[] data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool ContainsEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool ContainsEven(int[] data) \u003d\u0026gt;\n    Array.Exists(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray.Exists\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.670 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1413 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.364 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0270 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.380 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0327 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.575 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0348 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\nprivate readonly Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 43).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void Any()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);          // Enumerable.Any\n    }\n}\n\n[Benchmark]\npublic void Exists()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);       // List\u0026lt;T\u0026gt;.Exists\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.Exists\u003c/code\u003e method and \u003ccode\u003eIEnumerable.Any\u003c/code\u003e method can be used to find the first element that satisfies a predicate\nin a collection. However, \u003ccode\u003eList.Exists\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.Any\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects, as well as requires\nsignificantly less memory. For small collections, the performance difference may be negligible, but for large collections, it can be noticeable. The\nsame applies to \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003cp\u003eAlso, no memory allocations were needed for the \u003ccode\u003eExists\u003c/code\u003e method, since the search is done in-place.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eExists\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eAny\u003c/code\u003e extension method if a\npredicate is used. The method can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ContainsEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nbool ContainsEven(int[] data) \u003d\u0026gt;\n    data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nbool ContainsEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nbool ContainsEven(int[] data) \u003d\u0026gt;\n    Array.Exists(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray.Exists\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.670 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1413 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.364 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0270 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.380 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0327 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.575 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0348 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\nprivate readonly Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 43).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void Any()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);          // Enumerable.Any\n    }\n}\n\n[Benchmark]\npublic void Exists()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);       // List\u0026lt;T\u0026gt;.Exists\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4428",
    "name": "\"PartCreationPolicyAttribute\" should be used with \"ExportAttribute\"",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo customize the default behavior for an export in the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility\nFramework\u003c/a\u003e (MEF), applying the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nis necessary. For the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nto be meaningful in the context of an export, it is required to also annotate the class with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003e\u003ccode\u003eExportAttribute\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class is annotated with the \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e but not with the\n\u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.ComponentModel.Composition;\n\n[PartCreationPolicy(CreationPolicy.Any)] // Noncompliant\npublic class FooBar : IFooBar { }\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.ComponentModel.Composition;\n\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Any)]\npublic class FooBar : IFooBar { }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed\n  programming model overview (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003ePartCreationPolicyAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003eExportAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003eCreationPolicy\n  Enum\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2015/11/08/mef-part-1-fundamentals-imports-and-exports/\"\u003eMEF Part 1 – Fundamentals,\n  Imports and Exports\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/01/26/mef-part-2-metadata-and-creation-policies/\"\u003eMEF Part 2 – Metadata and creation\n  policies\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/03/06/mef-part-3-life-cycle-management-and-monitoring/\"\u003eMEF Part 3 – Life cycle\n  management and monitoring\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo customize the default behavior for an export in the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility\nFramework\u003c/a\u003e (MEF), applying the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nis necessary. For the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nto be meaningful in the context of an export, it is required to also annotate the class with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003e\u003ccode\u003eExportAttribute\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class is annotated with the \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e but not with the\n\u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.ComponentModel.Composition;\n\n[PartCreationPolicy(CreationPolicy.Any)] // Noncompliant\npublic class FooBar : IFooBar { }\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.ComponentModel.Composition;\n\n[Export(typeof(IFooBar))]\n[PartCreationPolicy(CreationPolicy.Any)]\npublic class FooBar : IFooBar { }\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed\n  programming model overview (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003ePartCreationPolicyAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003eExportAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003eCreationPolicy\n  Enum\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2015/11/08/mef-part-1-fundamentals-imports-and-exports/\"\u003eMEF Part 1 – Fundamentals,\n  Imports and Exports\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/01/26/mef-part-2-metadata-and-creation-policies/\"\u003eMEF Part 2 – Metadata and creation\n  policies\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/03/06/mef-part-3-life-cycle-management-and-monitoring/\"\u003eMEF Part 3 – Life cycle\n  management and monitoring\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6609",
    "name": "\"Min/Max\" properties of \"Set\" types should be used instead of the \"Enumerable\" extension methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eEnumerable.Max\u003c/code\u003e extension method and the \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e property can be used to find the maximum value in\na \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.Max\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eMin\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploit the fact that the set is implemented via a \u003ccode\u003eRed-Black\ntree\u003c/code\u003e. The algorithm to find the \u003ccode\u003eMax\u003c/code\u003e/\u003ccode\u003eMin\u003c/code\u003e is \"go left/right whenever possible\". The operation has the time complexity\nof \u003ccode\u003eO(h)\u003c/code\u003e which becomes \u003ccode\u003eO(ln(n))\u003c/code\u003e due to the fact that the tree is balanced. This is much better than the \u003ccode\u003eO(n)\u003c/code\u003e\ntime complexity of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploits a tree augmentation technique, storing the\n\u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eCount\u003c/code\u003e values on each node of the data structure. The time complexity in this case is\n\u003ccode\u003eO(1)\u003c/code\u003e that is significantly better than \u003ccode\u003eO(n)\u003c/code\u003e of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.max\"\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.min\"\u003eSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Min\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eMin\u003c/code\u003e and \u003ccode\u003eMax\u003c/code\u003e properties are defined on the following classes, and the extension method call can be replaced by calling\nthe propery instead:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetMax(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Max();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetMin(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Min();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetMax(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Max;\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetMin(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Min;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68,961.483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e499.6623 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e248063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.638 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0634 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85,827.359 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,531.1611 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e281259 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e67.682 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3757 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e312919 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate SortedSet\u0026lt;string\u0026gt; data;\n\n[Params(1_000)]\npublic int Iterations;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new SortedSet\u0026lt;string\u0026gt;(Enumerable.Range(0, Iterations).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()));\n\n[Benchmark(Baseline \u003d true)]\npublic void MaxMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max();     // Max() extension method\n    }\n}\n\n[Benchmark]\npublic void MaxProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max;       // Max property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eEnumerable.Max\u003c/code\u003e extension method and the \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e property can be used to find the maximum value in\na \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.Max\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eMin\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploit the fact that the set is implemented via a \u003ccode\u003eRed-Black\ntree\u003c/code\u003e. The algorithm to find the \u003ccode\u003eMax\u003c/code\u003e/\u003ccode\u003eMin\u003c/code\u003e is \"go left/right whenever possible\". The operation has the time complexity\nof \u003ccode\u003eO(h)\u003c/code\u003e which becomes \u003ccode\u003eO(ln(n))\u003c/code\u003e due to the fact that the tree is balanced. This is much better than the \u003ccode\u003eO(n)\u003c/code\u003e\ntime complexity of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploits a tree augmentation technique, storing the\n\u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eCount\u003c/code\u003e values on each node of the data structure. The time complexity in this case is\n\u003ccode\u003eO(1)\u003c/code\u003e that is significantly better than \u003ccode\u003eO(n)\u003c/code\u003e of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.max\"\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.min\"\u003eSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Min\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eMin\u003c/code\u003e and \u003ccode\u003eMax\u003c/code\u003e properties are defined on the following classes, and the extension method call can be replaced by calling\nthe propery instead:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetMax(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Max();\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetMin(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Min();\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetMax(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Max;\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetMin(SortedSet\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Min;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68,961.483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e499.6623 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e248063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.638 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0634 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85,827.359 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,531.1611 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e281259 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e67.682 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3757 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e312919 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate SortedSet\u0026lt;string\u0026gt; data;\n\n[Params(1_000)]\npublic int Iterations;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new SortedSet\u0026lt;string\u0026gt;(Enumerable.Range(0, Iterations).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()));\n\n[Benchmark(Baseline \u003d true)]\npublic void MaxMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max();     // Max() extension method\n    }\n}\n\n[Benchmark]\npublic void MaxProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max;       // Max property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4663",
    "name": "Comments should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty comments, as shown in the example, hurt readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n//\n\n/*\n*/\n\n///\n\n/**\n*/\n\u003c/pre\u003e\n\u003cp\u003eSome meaningful text should be added to the comment, or the comment markers should be removed.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEmpty comments, as shown in the example, hurt readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n//\n\n/*\n*/\n\n///\n\n/**\n*/\n\u003c/pre\u003e\n\u003cp\u003eSome meaningful text should be added to the comment, or the comment markers should be removed.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3330",
    "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a cookie is configured with the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute set to \u003cem\u003etrue\u003c/em\u003e, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of \u003ccode\u003eHttpOnly\u003c/code\u003e is \u003cem\u003efalse\u003c/em\u003e and it’s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute can help to reduce their impact as it won’t be possible to exploit the XSS\nvulnerability to steal session-cookies.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the cookie is sensitive, used to authenticate the user, for instance a \u003cem\u003esession-cookie\u003c/em\u003e \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute offer an additional protection (not the case for an \u003cem\u003eXSRF-TOKEN cookie\u003c/em\u003e / CSRF token for example)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWhen the \u003ccode\u003eHttpCookie.HttpOnly\u003c/code\u003e property is set to \u003ccode\u003efalse\u003c/code\u003e then the cookie can be accessed by client side code:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\nmyCookie.HttpOnly \u003d false; // Sensitive: this cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.web.httpcookie.httponly?view\u003dnetframework-4.8\"\u003edefault value\u003c/a\u003e of\n\u003ccode\u003eHttpOnly\u003c/code\u003e flag is \u003ccode\u003efalse\u003c/code\u003e, unless overwritten by an application’s configuration file:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\n// Sensitive: this cookie is created without the httponly flag  (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e By default the \u003ccode\u003eHttpOnly\u003c/code\u003e flag should be set to \u003cem\u003etrue\u003c/em\u003e for most of the cookies and it’s mandatory for session /\n  sensitive-security cookies. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eSet the \u003ccode\u003eHttpCookie.HttpOnly\u003c/code\u003e property to \u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nHttpCookie myCookie \u003d new HttpCookie(\"Sensitive cookie\");\nmyCookie.HttpOnly \u003d true; // Compliant: the sensitive cookie is protected against theft thanks to the HttpOnly property set to true (HttpOnly \u003d true)\n\u003c/pre\u003e\n\u003cp\u003eOr change the default flag values for the whole application by editing the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms228262(v\u003dvs.100)\"\u003eWeb.config configuration file\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;httpCookies httpOnlyCookies\u003d\"true\" requireSSL\u003d\"true\" /\u0026gt;\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the \u003ccode\u003erequireSSL\u003c/code\u003e attribute corresponds programmatically to the \u003ccode\u003eSecure\u003c/code\u003e field. \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003ehttpOnlyCookies\u003c/code\u003e attribute corresponds programmatically to the \u003ccode\u003ehttpOnly\u003c/code\u003e field. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/HttpOnly\"\u003eOWASP HttpOnly\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eTop 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1004\"\u003eCWE-1004 - Sensitive Cookie Without \u0027HttpOnly\u0027 Flag\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\"\u003eHTTPONLY_COOKIE\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S5753",
    "name": "Disabling ASP.NET \"Request Validation\" feature is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eASP.NET 1.1+ comes with a feature called \u003cem\u003eRequest Validation\u003c/em\u003e, preventing the server to accept content containing un-encoded HTML. This\nfeature comes as a first protection layer against Cross-Site Scripting (XSS) attacks and act as a simple Web Application Firewall (WAF) rejecting\nrequests potentially containing malicious content.\u003c/p\u003e\n\u003cp\u003eWhile this feature is not a silver bullet to prevent all XSS attacks, it helps to catch basic ones. It will for example prevent \u003ccode\u003e\u0026lt;script\ntype\u003d\"text/javascript\" src\u003d\"https://malicious.domain/payload.js\"\u0026gt;\u003c/code\u003e to reach your Controller.\u003c/p\u003e\n\u003cp\u003eNote: \u003cem\u003eRequest Validation\u003c/em\u003e feature being only available for ASP.NET, no Security Hotspot is raised on ASP.NET Core applications.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the developer doesn’t know the impact to deactivate the Request Validation feature \u003c/li\u003e\n  \u003cli\u003e the web application accepts user-supplied data \u003c/li\u003e\n  \u003cli\u003e all user-supplied data are not validated \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eAt Controller level:\u003c/p\u003e\n\u003cpre\u003e\n[ValidateInput(false)]\npublic ActionResult Welcome(string name)\n{\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eAt application level, configured in the Web.config file:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n   \u0026lt;system.web\u0026gt;\n      \u0026lt;pages validateRequest\u003d\"false\" /\u0026gt;\n      ...\n      \u0026lt;httpRuntime requestValidationMode\u003d\"0.0\" /\u0026gt;\n   \u0026lt;/system.web\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Activate the Request Validation feature for all HTTP requests \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eAt Controller level:\u003c/p\u003e\n\u003cpre\u003e\n[ValidateInput(true)]\npublic ActionResult Welcome(string name)\n{\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic ActionResult Welcome(string name)\n{\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eAt application level, configured in the Web.config file:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n   \u0026lt;system.web\u0026gt;\n      \u0026lt;pages validateRequest\u003d\"true\" /\u0026gt;\n      ...\n      \u0026lt;httpRuntime requestValidationMode\u003d\"4.5\" /\u0026gt;\n   \u0026lt;/system.web\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eTop 10 2021 Category A3 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.web.configuration.httpruntimesection.requestvalidationmode?view\u003dnetframework-4.8\"\u003eHttpRuntimeSection.RequestValidationMode Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/ASP-NET_Request_Validation\"\u003eOWASP ASP.NET Request Validation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"\u003eOWASP Cheat Sheet\u003c/a\u003e - XSS\n  Prevention Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eTop 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79\"\u003eCWE-79 - Improper Neutralization of Input During Web Page Generation (\u0027Cross-site\n  Scripting\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "csharpsquid:S3451",
    "name": "\"[DefaultValue]\" should not be used when \"[DefaultParameterValue]\" is meant",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValue\u003c/a\u003e does not make the compiler set\nthe default value, as its name may suggest. What you probably wanted to use is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.defaultparametervalueattribute\"\u003eDefaultParameterValue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValue\u003c/a\u003e attribute from the\n\u003ccode\u003eSystem.ComponentModel\u003c/code\u003e namespace, is sometimes used to declare a member’s default value. This can be used, for instance, by the reset\nfeature of a visual designer or by a code generator.\u003c/p\u003e\n\u003cpre\u003e\npublic void DoStuff([DefaultValue(4)] int i)\n{\n    // i is not automatically assigned 4\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptional\u003c/a\u003e attribute from the\n\u003ccode\u003eSystem.Runtime.InteropServices\u003c/code\u003e namespace is sometimes used to indicate that a parameter is optional, as an alternative to the\nlanguage-specific construct.\u003c/p\u003e\n\u003cpre\u003e\npublic void DoStuff([Optional] int i)\n{\n    // i would be assigned default(int) \u003d 0\n}\n\u003c/pre\u003e\n\u003cp\u003eThe use of \u003ccode\u003e[DefaultValue]\u003c/code\u003e with \u003ccode\u003e[Optional]\u003c/code\u003e has no more effect than \u003ccode\u003e[Optional]\u003c/code\u003e alone. That’s because\n\u003ccode\u003e[DefaultValue]\u003c/code\u003e doesn’t actually do anything; it merely indicates the intent for the value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultValue(4)] int i, int j \u003d 5)  // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 0, since [DefaultValue] doesn\u0027t actually set the default, and default(int) is used instead\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eMore than likely, \u003ccode\u003e[DefaultValue]\u003c/code\u003e was used in confusion instead of \u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e, the language-agnostic version\nof the default parameter initialization mechanism provided by C#.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultParameterValue(4)] int i, int j \u003d 5)\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 4\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eNotice that you can’t use both \u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e and default parameter initialization on the same parameter.\u003c/p\u003e\n\u003cpre\u003e\nvoid DoStuff([Optional][DefaultParameterValue(4)] int i \u003d 5) // Error CS1745 Cannot specify default parameter value in conjunction with DefaultParameterAttribute or OptionalAttribute\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptionalAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValueAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.defaultparametervalueattribute\"\u003eDefaultParameterValueAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/40171095/use-optional-defaultparametervalue-attribute-or-not\"\u003eStack Overflow - Use \"Optional,\n  DefaultParameterValue\" attribute, or not?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValue\u003c/a\u003e does not make the compiler set\nthe default value, as its name may suggest. What you probably wanted to use is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.defaultparametervalueattribute\"\u003eDefaultParameterValue\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValue\u003c/a\u003e attribute from the\n\u003ccode\u003eSystem.ComponentModel\u003c/code\u003e namespace, is sometimes used to declare a member’s default value. This can be used, for instance, by the reset\nfeature of a visual designer or by a code generator.\u003c/p\u003e\n\u003cpre\u003e\npublic void DoStuff([DefaultValue(4)] int i)\n{\n    // i is not automatically assigned 4\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptional\u003c/a\u003e attribute from the\n\u003ccode\u003eSystem.Runtime.InteropServices\u003c/code\u003e namespace is sometimes used to indicate that a parameter is optional, as an alternative to the\nlanguage-specific construct.\u003c/p\u003e\n\u003cpre\u003e\npublic void DoStuff([Optional] int i)\n{\n    // i would be assigned default(int) \u003d 0\n}\n\u003c/pre\u003e\n\u003cp\u003eThe use of \u003ccode\u003e[DefaultValue]\u003c/code\u003e with \u003ccode\u003e[Optional]\u003c/code\u003e has no more effect than \u003ccode\u003e[Optional]\u003c/code\u003e alone. That’s because\n\u003ccode\u003e[DefaultValue]\u003c/code\u003e doesn’t actually do anything; it merely indicates the intent for the value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultValue(4)] int i, int j \u003d 5)  // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 0, since [DefaultValue] doesn\u0027t actually set the default, and default(int) is used instead\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eMore than likely, \u003ccode\u003e[DefaultValue]\u003c/code\u003e was used in confusion instead of \u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e, the language-agnostic version\nof the default parameter initialization mechanism provided by C#.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultParameterValue(4)] int i, int j \u003d 5)\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 4\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eNotice that you can’t use both \u003ccode\u003e[DefaultParameterValue]\u003c/code\u003e and default parameter initialization on the same parameter.\u003c/p\u003e\n\u003cpre\u003e\nvoid DoStuff([Optional][DefaultParameterValue(4)] int i \u003d 5) // Error CS1745 Cannot specify default parameter value in conjunction with DefaultParameterAttribute or OptionalAttribute\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptionalAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute\"\u003eDefaultValueAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.defaultparametervalueattribute\"\u003eDefaultParameterValueAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/40171095/use-optional-defaultparametervalue-attribute-or-not\"\u003eStack Overflow - Use \"Optional,\n  DefaultParameterValue\" attribute, or not?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2486",
    "name": "Generic exceptions should not be ignored",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\u003c/p\u003e\n\u003cp\u003eThis rule only reports on empty catch clauses that catch generic \u003ccode\u003eException\u003c/code\u003es.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstring text \u003d \"\";\ntry\n{\n    text \u003d File.ReadAllText(fileName);\n}\ncatch (Exception exc) // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstring text \u003d \"\";\ntry\n{\n    text \u003d File.ReadAllText(fileName);\n}\ncatch (Exception exc)\n{\n    logger.Log(exc);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen a block contains a comment, it is not considered to be empty.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/390\"\u003eCWE-390 - Detection of Error Condition Without Action\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\u003c/p\u003e\n\u003cp\u003eThis rule only reports on empty catch clauses that catch generic \u003ccode\u003eException\u003c/code\u003es.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstring text \u003d \"\";\ntry\n{\n    text \u003d File.ReadAllText(fileName);\n}\ncatch (Exception exc) // Noncompliant\n{\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstring text \u003d \"\";\ntry\n{\n    text \u003d File.ReadAllText(fileName);\n}\ncatch (Exception exc)\n{\n    logger.Log(exc);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen a block contains a comment, it is not considered to be empty.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/390\"\u003eCWE-390 - Detection of Error Condition Without Action\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "error-handling",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2365",
    "name": "Properties should not make collection or array copies",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller’s likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by the unexpectedly poor performance.\u003c/p\u003e\n\u003cp\u003eThis rule tracks calls to the following methods inside properties:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate List\u0026lt;string\u0026gt; _foo \u003d new List\u0026lt;string\u0026gt; { \"a\", \"b\", \"c\" };\npublic IEnumerable\u0026lt;string\u0026gt; Foo  // Noncompliant: expensive ToList call\n{\n    get\n    {\n        return (string[])_foo.Clone();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate List\u0026lt;string\u0026gt; _foo \u003d new List\u0026lt;string\u0026gt; { \"a\", \"b\", \"c\" };\npublic IEnumerable\u0026lt;string\u0026gt; GetFoo()\n{\n    return (string[])_foo.Clone();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties (C# Programming\n  Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\"\u003eFields (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/collections\"\u003eCollections (C#)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller’s likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by the unexpectedly poor performance.\u003c/p\u003e\n\u003cp\u003eThis rule tracks calls to the following methods inside properties:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate List\u0026lt;string\u0026gt; _foo \u003d new List\u0026lt;string\u0026gt; { \"a\", \"b\", \"c\" };\npublic IEnumerable\u0026lt;string\u0026gt; Foo  // Noncompliant: expensive ToList call\n{\n    get\n    {\n        return (string[])_foo.Clone();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate List\u0026lt;string\u0026gt; _foo \u003d new List\u0026lt;string\u0026gt; { \"a\", \"b\", \"c\" };\npublic IEnumerable\u0026lt;string\u0026gt; GetFoo()\n{\n    return (string[])_foo.Clone();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties (C# Programming\n  Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\"\u003eFields (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/collections\"\u003eCollections (C#)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design",
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2123",
    "name": "Values should not be uselessly incremented",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#postfix-increment-operator\"\u003epostfix\nincrement\u003c/a\u003e operator, it is important to know that the result of the expression \u003ccode\u003ex++\u003c/code\u003e is the value \u003cstrong\u003ebefore\u003c/strong\u003e the operation\n\u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis means that in some cases, the result might not be what you expect:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When assigning \u003ccode\u003ex++\u003c/code\u003e to \u003ccode\u003ex\u003c/code\u003e, it’s the same as assigning \u003ccode\u003ex\u003c/code\u003e to itself, since the value is assigned before the\n  increment takes place \u003c/li\u003e\n  \u003cli\u003e When returning \u003ccode\u003ex++\u003c/code\u003e, the returning value is \u003ccode\u003ex\u003c/code\u003e, not \u003ccode\u003ex+1\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe same applies to the postfix and prefix \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\"\u003edecrement\u003c/a\u003e\noperators.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo solve the issue in assignments, eliminate the assignment, since \u003ccode\u003ex\\++\u003c/code\u003e mutates \u003ccode\u003ex\u003c/code\u003e anyways.\u003c/p\u003e\n\u003cp\u003eTo solve the issue in return statements, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#prefix-increment-operator\"\u003eprefix\nincrement\u003c/a\u003e operator, since it works in reverse: the result of the expression \u003ccode\u003e++x\u003c/code\u003e is the value \u003cstrong\u003eafter\u003c/strong\u003e the operation,\nwhich is \u003ccode\u003ex+1\u003c/code\u003e, as one might expect.\u003c/p\u003e\n\u003cp\u003eThe same applies to the postfix and prefix \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\"\u003edecrement\u003c/a\u003e\noperators.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint PickNumber()\n{\n  int i \u003d 0;\n  int j \u003d 0;\n\n  i \u003d i++;      // Noncompliant: i is still 0\n  return j--;   // Noncompliant: returns 0\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint PickNumber()\n{\n  int i \u003d 0;\n  int j \u003d 0;\n\n  i++;          // Compliant: i is incremented to 1\n  return --j;   // Compliant: returns -1\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003eArithmetic\n  operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - \u003ca href\u003d\"https://stackoverflow.com/a/3346729\"\u003e\"What is the difference between i and i in C#?\" - Eric Lippert’s answer\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#postfix-increment-operator\"\u003epostfix\nincrement\u003c/a\u003e operator, it is important to know that the result of the expression \u003ccode\u003ex++\u003c/code\u003e is the value \u003cstrong\u003ebefore\u003c/strong\u003e the operation\n\u003ccode\u003ex\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis means that in some cases, the result might not be what you expect:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When assigning \u003ccode\u003ex++\u003c/code\u003e to \u003ccode\u003ex\u003c/code\u003e, it’s the same as assigning \u003ccode\u003ex\u003c/code\u003e to itself, since the value is assigned before the\n  increment takes place \u003c/li\u003e\n  \u003cli\u003e When returning \u003ccode\u003ex++\u003c/code\u003e, the returning value is \u003ccode\u003ex\u003c/code\u003e, not \u003ccode\u003ex+1\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe same applies to the postfix and prefix \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\"\u003edecrement\u003c/a\u003e\noperators.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo solve the issue in assignments, eliminate the assignment, since \u003ccode\u003ex\\++\u003c/code\u003e mutates \u003ccode\u003ex\u003c/code\u003e anyways.\u003c/p\u003e\n\u003cp\u003eTo solve the issue in return statements, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#prefix-increment-operator\"\u003eprefix\nincrement\u003c/a\u003e operator, since it works in reverse: the result of the expression \u003ccode\u003e++x\u003c/code\u003e is the value \u003cstrong\u003eafter\u003c/strong\u003e the operation,\nwhich is \u003ccode\u003ex+1\u003c/code\u003e, as one might expect.\u003c/p\u003e\n\u003cp\u003eThe same applies to the postfix and prefix \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\"\u003edecrement\u003c/a\u003e\noperators.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint PickNumber()\n{\n  int i \u003d 0;\n  int j \u003d 0;\n\n  i \u003d i++;      // Noncompliant: i is still 0\n  return j--;   // Noncompliant: returns 0\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint PickNumber()\n{\n  int i \u003d 0;\n  int j \u003d 0;\n\n  i++;          // Compliant: i is incremented to 1\n  return --j;   // Compliant: returns -1\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators\"\u003eArithmetic\n  operators (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - \u003ca href\u003d\"https://stackoverflow.com/a/3346729\"\u003e\"What is the difference between i and i in C#?\" - Eric Lippert’s answer\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3453",
    "name": "Classes should not have only \"private\" constructors",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a class has only a \u003ccode\u003eprivate\u003c/code\u003e constructor, it can’t be instantiated except within the class itself. Such classes can be considered\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003edead code\u003c/a\u003e and should be fixed\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes that access their private constructors (\u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003esingletons\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003esmart\n  enums\u003c/a\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes with only \u003ccode\u003estatic\u003c/code\u003e members are also ignored because they are covered by Rule {rule:csharpsquid:S1118}. \u003c/li\u003e\n  \u003cli\u003e Classes that derive from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle\u003c/a\u003e since\n  they can be instantiate through \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003eP/Invoke\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S1118} - Utility classes should not have public constructors \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003ePlatform Invoke (P/Invoke)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003eUse\n  enumeration classes instead of enum types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003eDead code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003eSingleton pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e C# in Depth - \u003ca href\u003d\"https://csharpindepth.com/articles/singleton\"\u003eImplementing the Singleton Pattern in C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Medium - \u003ca href\u003d\"https://medium.com/null-exception/making-enums-smarter-in-c-518108cdaa73\"\u003eMaking enums smarter in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a class has only a \u003ccode\u003eprivate\u003c/code\u003e constructor, it can’t be instantiated except within the class itself. Such classes can be considered\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003edead code\u003c/a\u003e and should be fixed\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes that access their private constructors (\u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003esingletons\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003esmart\n  enums\u003c/a\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes with only \u003ccode\u003estatic\u003c/code\u003e members are also ignored because they are covered by Rule {rule:csharpsquid:S1118}. \u003c/li\u003e\n  \u003cli\u003e Classes that derive from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle\u003c/a\u003e since\n  they can be instantiate through \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003eP/Invoke\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class MyClass // Noncompliant: the class contains only private constructors\n{\n  private MyClass() { ... }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class MyClass // Compliant: the class contains at least one non-private constructor\n{\n  public MyClass() { ... }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S1118} - Utility classes should not have public constructors \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003ePlatform Invoke (P/Invoke)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003eUse\n  enumeration classes instead of enum types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003eDead code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003eSingleton pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e C# in Depth - \u003ca href\u003d\"https://csharpindepth.com/articles/singleton\"\u003eImplementing the Singleton Pattern in C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Medium - \u003ca href\u003d\"https://medium.com/null-exception/making-enums-smarter-in-c-518108cdaa73\"\u003eMaking enums smarter in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1155",
    "name": "\"Any()\" should be used to test for emptiness",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you call \u003ccode\u003eAny()\u003c/code\u003e, it clearly communicates the code’s intention, which is to check if the collection is empty. Using \u003ccode\u003eCount()\n\u003d\u003d 0\u003c/code\u003e for this purpose is less direct and makes the code slightly more complex. However, there are some cases where special attention should be\npaid:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e if the collection is an \u003ccode\u003eEntityFramework\u003c/code\u003e or other ORM query, calling \u003ccode\u003eCount()\u003c/code\u003e will cause executing a potentially\n  massive SQL query and could put a large overhead on the application database. Calling \u003ccode\u003eAny()\u003c/code\u003e will also connect to the database, but will\n  generate much more efficient SQL. \u003c/li\u003e\n  \u003cli\u003e if the collection is part of a LINQ query that contains \u003ccode\u003eSelect()\u003c/code\u003e statements that create objects, a large amount of memory could be\n  unnecessarily allocated. Calling \u003ccode\u003eAny()\u003c/code\u003e will be much more efficient because it will execute fewer iterations of the enumerable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate static bool HasContent(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u0026gt; 0;  // Noncompliant\n}\n\nprivate static bool HasContent2(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u0026gt;\u003d 1;  // Noncompliant\n}\n\nprivate static bool IsEmpty(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u003d\u003d 0;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003ePrefer using \u003ccode\u003eAny()\u003c/code\u003e to test for emptiness over \u003ccode\u003eCount()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate static bool HasContent(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool HasContent2(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool IsEmpty(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return !strings.Any();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you call \u003ccode\u003eAny()\u003c/code\u003e, it clearly communicates the code’s intention, which is to check if the collection is empty. Using \u003ccode\u003eCount()\n\u003d\u003d 0\u003c/code\u003e for this purpose is less direct and makes the code slightly more complex. However, there are some cases where special attention should be\npaid:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e if the collection is an \u003ccode\u003eEntityFramework\u003c/code\u003e or other ORM query, calling \u003ccode\u003eCount()\u003c/code\u003e will cause executing a potentially\n  massive SQL query and could put a large overhead on the application database. Calling \u003ccode\u003eAny()\u003c/code\u003e will also connect to the database, but will\n  generate much more efficient SQL. \u003c/li\u003e\n  \u003cli\u003e if the collection is part of a LINQ query that contains \u003ccode\u003eSelect()\u003c/code\u003e statements that create objects, a large amount of memory could be\n  unnecessarily allocated. Calling \u003ccode\u003eAny()\u003c/code\u003e will be much more efficient because it will execute fewer iterations of the enumerable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate static bool HasContent(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u0026gt; 0;  // Noncompliant\n}\n\nprivate static bool HasContent2(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u0026gt;\u003d 1;  // Noncompliant\n}\n\nprivate static bool IsEmpty(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Count() \u003d\u003d 0;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003ePrefer using \u003ccode\u003eAny()\u003c/code\u003e to test for emptiness over \u003ccode\u003eCount()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate static bool HasContent(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool HasContent2(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool IsEmpty(IEnumerable\u0026lt;string\u0026gt; strings)\n{\n  return !strings.Any();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3456",
    "name": "\"string.ToCharArray()\" and \"ReadOnlySpan\u003cT\u003e.ToArray()\" should not be called redundantly",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003estring\u003c/code\u003e type offers an indexer property that allows you to treat it as a \u003ccode\u003echar\u003c/code\u003e array. Therefore, if you just need to\naccess a specific character or iterate over all of them, the \u003ccode\u003eToCharArray\u003c/code\u003e call should be omitted. For these cases, not omitting makes the\ncode harder to read and less efficient as \u003ccode\u003eToCharArray\u003c/code\u003e copies the characters from the \u003ccode\u003estring\u003c/code\u003e object into a new Unicode\ncharacter array.\u003c/p\u003e\n\u003cp\u003eThe same principle applies to \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/#utf-8-string-literals\"\u003eutf-8 literals\ntypes\u003c/a\u003e (\u003ccode\u003eReadOnlySpan\u0026lt;byte\u0026gt;\u003c/code\u003e, \u003ccode\u003eSpan\u0026lt;byte\u0026gt;\u003c/code\u003e) and the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.span-1.toarray?view\u003dnet-7.0\"\u003e\u003ccode\u003eToArray\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring str \u003d \"some string\";\nforeach (var c in str.ToCharArray()) // Noncompliant\n{\n  // ...\n}\n\nReadOnlySpan\u0026lt;byte\u0026gt; span \u003d \"some UTF-8 string literal\"u8;\nforeach (var c in span.ToArray()) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring str \u003d \"some string\";\nforeach (var c in str)\n{\n  // ...\n}\n\nReadOnlySpan\u0026lt;byte\u0026gt; span \u003d \"some UTF-8 string literal\"u8;\nforeach (var b in span) // Compliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.tochararray\"\u003eString.ToCharArray Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#accessing-individual-characters\"\u003eAccessing individual\n  characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/utf8-string-literals\"\u003eUTF-8 Strings\n  literals\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003estring\u003c/code\u003e type offers an indexer property that allows you to treat it as a \u003ccode\u003echar\u003c/code\u003e array. Therefore, if you just need to\naccess a specific character or iterate over all of them, the \u003ccode\u003eToCharArray\u003c/code\u003e call should be omitted. For these cases, not omitting makes the\ncode harder to read and less efficient as \u003ccode\u003eToCharArray\u003c/code\u003e copies the characters from the \u003ccode\u003estring\u003c/code\u003e object into a new Unicode\ncharacter array.\u003c/p\u003e\n\u003cp\u003eThe same principle applies to \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/csharp-11-preview-updates/#utf-8-string-literals\"\u003eutf-8 literals\ntypes\u003c/a\u003e (\u003ccode\u003eReadOnlySpan\u0026lt;byte\u0026gt;\u003c/code\u003e, \u003ccode\u003eSpan\u0026lt;byte\u0026gt;\u003c/code\u003e) and the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.span-1.toarray?view\u003dnet-7.0\"\u003e\u003ccode\u003eToArray\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring str \u003d \"some string\";\nforeach (var c in str.ToCharArray()) // Noncompliant\n{\n  // ...\n}\n\nReadOnlySpan\u0026lt;byte\u0026gt; span \u003d \"some UTF-8 string literal\"u8;\nforeach (var c in span.ToArray()) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring str \u003d \"some string\";\nforeach (var c in str)\n{\n  // ...\n}\n\nReadOnlySpan\u0026lt;byte\u0026gt; span \u003d \"some UTF-8 string literal\"u8;\nforeach (var b in span) // Compliant\n{\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.tochararray\"\u003eString.ToCharArray Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#accessing-individual-characters\"\u003eAccessing individual\n  characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-11.0/utf8-string-literals\"\u003eUTF-8 Strings\n  literals\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6603",
    "name": "The collection-specific \"TrueForAll\" method should be used instead of the \"All\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.TrueForAll\u003c/code\u003e method and the \u003ccode\u003eIEnumerable.All\u003c/code\u003e method can be used to check if all list elements satisfy a given\ncondition in a collection. However, \u003ccode\u003eList.TrueForAll\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.All\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects. The\nperformance difference may be minor for small collections, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement both in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore\ninfo\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eTrueForAll\u003c/code\u003e method is defined on the collection class, and it has the same signature as the \u003ccode\u003eAll\u003c/code\u003e extension method. The\nmethod can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool AreAllEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.All(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool AreAllEven(int[] data) \u003d\u0026gt;\n    data.All(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic bool AreAllEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.TrueForAll(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic bool AreAllEven(int[] data) \u003d\u0026gt;\n    Array.TrueForAll(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray.TrueForAll\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.Builder.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.302 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0027 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.279 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0181 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.105 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0142 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.968 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0143 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(10_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 42).ToList();\n\n[Benchmark]\npublic void TrueForAll()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.TrueForAll(x \u003d\u0026gt; x \u003d\u003d 42);  // List\u0026lt;T\u0026gt;.TrueForAll\n    }\n}\n\n[Benchmark(Baseline \u003d true)]\npublic void All()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.All(x \u003d\u0026gt; x \u003d\u003d 42);         // Enumerable.All\u0026lt;TSource\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.TrueForAll\u003c/code\u003e method and the \u003ccode\u003eIEnumerable.All\u003c/code\u003e method can be used to check if all list elements satisfy a given\ncondition in a collection. However, \u003ccode\u003eList.TrueForAll\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.All\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects. The\nperformance difference may be minor for small collections, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement both in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore\ninfo\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eTrueForAll\u003c/code\u003e method is defined on the collection class, and it has the same signature as the \u003ccode\u003eAll\u003c/code\u003e extension method. The\nmethod can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool AreAllEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.All(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool AreAllEven(int[] data) \u003d\u0026gt;\n    data.All(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic bool AreAllEven(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.TrueForAll(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic bool AreAllEven(int[] data) \u003d\u0026gt;\n    Array.TrueForAll(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray.TrueForAll\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.Builder.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.302 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0027 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.279 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0181 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.105 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0142 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.968 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0143 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(10_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 42).ToList();\n\n[Benchmark]\npublic void TrueForAll()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.TrueForAll(x \u003d\u0026gt; x \u003d\u003d 42);  // List\u0026lt;T\u0026gt;.TrueForAll\n    }\n}\n\n[Benchmark(Baseline \u003d true)]\npublic void All()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.All(x \u003d\u0026gt; x \u003d\u003d 42);         // Enumerable.All\u0026lt;TSource\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4426",
    "name": "Cryptographic keys should be robust",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn today’s cryptography, the length of the \u003cstrong\u003ekey\u003c/strong\u003e directly affects the security level of cryptographic algorithms.\u003c/p\u003e\n\u003cp\u003eNote that depending on the algorithm, the term \u003cstrong\u003ekey\u003c/strong\u003e refers to a different mathematical property. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For RSA, the key is the product of two large prime numbers, also called the \u003cstrong\u003emodulus\u003c/strong\u003e. \u003c/li\u003e\n  \u003cli\u003e For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    \u003cul\u003e\n      \u003cli\u003e In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf an application uses a key that is considered short and \u003cstrong\u003einsecure\u003c/strong\u003e, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.\u003c/p\u003e\n\u003cp\u003eIn general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.\u003c/p\u003e\n\u003cp\u003eDue to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.\u003cbr\u003e For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var RsaCsp \u003d new RSACryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var DsaCsp \u003d new DSACryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    ECDsa ecdsa \u003d ECDsa.Create(ECCurve.NamedCurves.brainpoolP160t1); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var RsaCsp \u003d new RSACryptoServiceProvider(2048);\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var Dsa \u003d new DSACng(2048);\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    ECDsa ecdsa \u003d ECDsa.Create(ECCurve.NamedCurves.nistP256);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eThe appropriate choices are the following.\u003c/p\u003e\n\u003ch4\u003eRSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)\u003c/h4\u003e\n\u003cp\u003eThe security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.\u003c/p\u003e\n\u003cp\u003eIn general, a minimum key size of \u003cstrong\u003e2048\u003c/strong\u003e bits is recommended for both.\u003c/p\u003e\n\u003ch4\u003eAES (Advanced Encryption Standard)\u003c/h4\u003e\n\u003cp\u003eAES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.\u003cbr\u003e A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e128 bits\u003c/strong\u003e is recommended for AES.\u003c/p\u003e\n\u003ch4\u003eElliptic Curve Cryptography (ECC)\u003c/h4\u003e\n\u003cp\u003eElliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms are mentioned directly in their names. For example, \u003ccode\u003esecp256k1\u003c/code\u003e generates a 256-bits long private key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e224 bits\u003c/strong\u003e is recommended for EC algorithms.\u003c/p\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003ch4\u003eThe KeySize Property is not a setter\u003c/h4\u003e\n\u003cp\u003eThe following code is invalid:\u003c/p\u003e\n\u003cpre\u003e\n ----\n     var RsaCsp \u003d new RSACryptoServiceProvider();\n     RsaCsp.KeySize \u003d 2048;\n----\n\u003c/pre\u003e\n\u003cp\u003eThe KeySize property of CryptoServiceProviders cannot be updated because the setter simply does not exist. This means that this line will not\nperform any update on \u003ccode\u003eKeySize\u003c/code\u003e, and the compiler won’t raise an Exception when compiling it. This should not be considered a\nworkaround.\u003cbr\u003e To change the key size, use one of the overloaded constructors with the desired key size instead.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003ePre-Quantum Cryptography\u003c/h4\u003e\n\u003cp\u003eEncrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.\u003cbr\u003e It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.\u003c/p\u003e\n\u003cp\u003eThus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\"\u003eLearn more here\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\"\u003eNIST 800-131A\u003c/a\u003e - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eCWE-326 - Inadequate Encryption Strength\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\"\u003eCERT, MSC61-J.\u003c/a\u003e - Do not use insecure or weak cryptographic algorithms \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn today’s cryptography, the length of the \u003cstrong\u003ekey\u003c/strong\u003e directly affects the security level of cryptographic algorithms.\u003c/p\u003e\n\u003cp\u003eNote that depending on the algorithm, the term \u003cstrong\u003ekey\u003c/strong\u003e refers to a different mathematical property. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For RSA, the key is the product of two large prime numbers, also called the \u003cstrong\u003emodulus\u003c/strong\u003e. \u003c/li\u003e\n  \u003cli\u003e For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    \u003cul\u003e\n      \u003cli\u003e In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf an application uses a key that is considered short and \u003cstrong\u003einsecure\u003c/strong\u003e, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.\u003c/p\u003e\n\u003cp\u003eIn general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.\u003c/p\u003e\n\u003cp\u003eDue to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.\u003cbr\u003e For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var RsaCsp \u003d new RSACryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var DsaCsp \u003d new DSACryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    ECDsa ecdsa \u003d ECDsa.Create(ECCurve.NamedCurves.brainpoolP160t1); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var RsaCsp \u003d new RSACryptoServiceProvider(2048);\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var Dsa \u003d new DSACng(2048);\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    ECDsa ecdsa \u003d ECDsa.Create(ECCurve.NamedCurves.nistP256);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eThe appropriate choices are the following.\u003c/p\u003e\n\u003ch4\u003eRSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)\u003c/h4\u003e\n\u003cp\u003eThe security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.\u003c/p\u003e\n\u003cp\u003eIn general, a minimum key size of \u003cstrong\u003e2048\u003c/strong\u003e bits is recommended for both.\u003c/p\u003e\n\u003ch4\u003eAES (Advanced Encryption Standard)\u003c/h4\u003e\n\u003cp\u003eAES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.\u003cbr\u003e A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e128 bits\u003c/strong\u003e is recommended for AES.\u003c/p\u003e\n\u003ch4\u003eElliptic Curve Cryptography (ECC)\u003c/h4\u003e\n\u003cp\u003eElliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms are mentioned directly in their names. For example, \u003ccode\u003esecp256k1\u003c/code\u003e generates a 256-bits long private key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e224 bits\u003c/strong\u003e is recommended for EC algorithms.\u003c/p\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003ch4\u003eThe KeySize Property is not a setter\u003c/h4\u003e\n\u003cp\u003eThe following code is invalid:\u003c/p\u003e\n\u003cpre\u003e\n ----\n     var RsaCsp \u003d new RSACryptoServiceProvider();\n     RsaCsp.KeySize \u003d 2048;\n----\n\u003c/pre\u003e\n\u003cp\u003eThe KeySize property of CryptoServiceProviders cannot be updated because the setter simply does not exist. This means that this line will not\nperform any update on \u003ccode\u003eKeySize\u003c/code\u003e, and the compiler won’t raise an Exception when compiling it. This should not be considered a\nworkaround.\u003cbr\u003e To change the key size, use one of the overloaded constructors with the desired key size instead.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003ePre-Quantum Cryptography\u003c/h4\u003e\n\u003cp\u003eEncrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.\u003cbr\u003e It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.\u003c/p\u003e\n\u003cp\u003eThus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\"\u003eLearn more here\u003c/a\u003e.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\"\u003eNIST 800-131A\u003c/a\u003e - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eCWE-326 - Inadequate Encryption Strength\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\"\u003eCERT, MSC61-J.\u003c/a\u003e - Do not use insecure or weak cryptographic algorithms \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2245",
    "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2013-6386\"\u003eCVE-2013-6386\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-3419\"\u003eCVE-2006-3419\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2008-4102\"\u003eCVE-2008-4102\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\u003c/p\u003e\n\u003cp\u003eAs the \u003ccode\u003eSystem.Random\u003c/code\u003e class relies on a pseudorandom number generator, it should not be used for security-critical applications or for\nprotecting sensitive data. In such context, the \u003ccode\u003eSystem.Cryptography.RandomNumberGenerator\u003c/code\u003e class which relies on a cryptographically\nstrong random number generator (RNG) should be used in place.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. \u003c/li\u003e\n  \u003cli\u003e the function you use generates a value which can be predicted (pseudo-random). \u003c/li\u003e\n  \u003cli\u003e the generated value is used multiple times. \u003c/li\u003e\n  \u003cli\u003e an attacker can access the generated value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar random \u003d new Random(); // Sensitive use of Random\nbyte[] data \u003d new byte[16];\nrandom.NextBytes(data);\nreturn BitConverter.ToString(data); // Check if this value is used for hashing or encryption\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Only use random number generators which are \u003ca\n  href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\"\u003erecommended by\n  OWASP\u003c/a\u003e or any other trusted organization. \u003c/li\u003e\n  \u003cli\u003e Use the generated random values only once. \u003c/li\u003e\n  \u003cli\u003e You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nusing System.Security.Cryptography;\n...\nvar randomGenerator \u003d RandomNumberGenerator.Create(); // Compliant for security-sensitive use cases\nbyte[] data \u003d new byte[16];\nrandomGenerator.GetBytes(data);\nreturn BitConverter.ToString(data);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/338\"\u003eCWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/330\"\u003eCWE-330 - Use of Insufficiently Random Values\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eCWE-326 - Inadequate Encryption Strength\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1241\"\u003eCWE-1241 - Use of Predictable Algorithm in Random Number Generator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\"\u003ePredictable Pseudo Random Number\n  Generator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "csharpsquid:S3458",
    "name": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty \u003ccode\u003ecase\u003c/code\u003e clauses that fall through to the default are useless. Whether or not such a \u003ccode\u003ecase\u003c/code\u003e is present, the\n\u003ccode\u003edefault\u003c/code\u003e clause will be invoked. Such \u003ccode\u003ecase\u003c/code\u003es simply clutter the code, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch(ch)\n{\n  case \u0027a\u0027 :\n    HandleA();\n    break;\n  case \u0027b\u0027 :\n    HandleB();\n    break;\n  case \u0027c\u0027 :  // Noncompliant\n  default:\n    HandleTheRest();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch(ch)\n{\n  case \u0027a\u0027 :\n    HandleA();\n    break;\n  case \u0027b\u0027 :\n    HandleB();\n    break;\n  default:\n    HandleTheRest();\n    break;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEmpty \u003ccode\u003ecase\u003c/code\u003e clauses that fall through to the default are useless. Whether or not such a \u003ccode\u003ecase\u003c/code\u003e is present, the\n\u003ccode\u003edefault\u003c/code\u003e clause will be invoked. Such \u003ccode\u003ecase\u003c/code\u003es simply clutter the code, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch(ch)\n{\n  case \u0027a\u0027 :\n    HandleA();\n    break;\n  case \u0027b\u0027 :\n    HandleB();\n    break;\n  case \u0027c\u0027 :  // Noncompliant\n  default:\n    HandleTheRest();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch(ch)\n{\n  case \u0027a\u0027 :\n    HandleA();\n    break;\n  case \u0027b\u0027 :\n    HandleB();\n    break;\n  default:\n    HandleTheRest();\n    break;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3216",
    "name": "\"ConfigureAwait(false)\" should be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAfter an \u003ccode\u003eawait\u003c/code\u003eed \u003ccode\u003eTask\u003c/code\u003e has executed, you can continue execution in the original, calling thread or any arbitrary thread.\nUnless the rest of the code needs the context from which the \u003ccode\u003eTask\u003c/code\u003e was spawned, \u003ccode\u003eTask.ConfigureAwait(false)\u003c/code\u003e should be used to\nkeep execution in the \u003ccode\u003eTask\u003c/code\u003e thread to avoid the need for context switching and the possibility of deadlocks.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when code in a class library targeting .Net Framework \u003ccode\u003eawait\u003c/code\u003es a \u003ccode\u003eTask\u003c/code\u003e and continues execution in\nthe original calling thread.\u003c/p\u003e\n\u003cp\u003eThe rule does not raise for .Net Core libraries as there is no \u003ccode\u003eSynchronizationContext\u003c/code\u003e in .Net Core.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar response \u003d await httpClient.GetAsync(url);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar response \u003d await httpClient.GetAsync(url).ConfigureAwait(false);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAfter an \u003ccode\u003eawait\u003c/code\u003eed \u003ccode\u003eTask\u003c/code\u003e has executed, you can continue execution in the original, calling thread or any arbitrary thread.\nUnless the rest of the code needs the context from which the \u003ccode\u003eTask\u003c/code\u003e was spawned, \u003ccode\u003eTask.ConfigureAwait(false)\u003c/code\u003e should be used to\nkeep execution in the \u003ccode\u003eTask\u003c/code\u003e thread to avoid the need for context switching and the possibility of deadlocks.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when code in a class library targeting .Net Framework \u003ccode\u003eawait\u003c/code\u003es a \u003ccode\u003eTask\u003c/code\u003e and continues execution in\nthe original calling thread.\u003c/p\u003e\n\u003cp\u003eThe rule does not raise for .Net Core libraries as there is no \u003ccode\u003eSynchronizationContext\u003c/code\u003e in .Net Core.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar response \u003d await httpClient.GetAsync(url);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar response \u003d await httpClient.GetAsync(url).ConfigureAwait(false);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await",
      "multi-threading",
      "performance",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4423",
    "name": "Weak SSL/TLS protocols should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThese samples use TLSv1.0 as the default TLS algorithm, which is cryptographically weak.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Net;\n\npublic void encrypt()\n{\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls; // Noncompliant\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Net.Http;\nusing System.Security.Authentication;\n\npublic void encrypt()\n{\n    new HttpClientHandler\n    {\n        SslProtocols \u003d SslProtocols.Tls // Noncompliant\n    };\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nUsing System.Net;\n\npublic void encrypt()\n{\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Net.Http;\nusing System.Security.Authentication;\n\npublic void encrypt()\n{\n    new HttpClientHandler\n    {\n        SslProtocols \u003d SslProtocols.Tls12\n    };\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThese samples use TLSv1.0 as the default TLS algorithm, which is cryptographically weak.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Net;\n\npublic void encrypt()\n{\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls; // Noncompliant\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Net.Http;\nusing System.Security.Authentication;\n\npublic void encrypt()\n{\n    new HttpClientHandler\n    {\n        SslProtocols \u003d SslProtocols.Tls // Noncompliant\n    };\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nUsing System.Net;\n\npublic void encrypt()\n{\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Net.Http;\nusing System.Security.Authentication;\n\npublic void encrypt()\n{\n    new HttpClientHandler\n    {\n        SslProtocols \u003d SslProtocols.Tls12\n    };\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3215",
    "name": "\"interface\" instances should not be cast to concrete types",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNeeding to cast from an \u003ccode\u003einterface\u003c/code\u003e to a concrete type indicates that something is wrong with the abstractions in use, likely that\nsomething is missing from the \u003ccode\u003einterface\u003c/code\u003e. Instead of casting to a discrete type, the missing functionality should be added to the\n\u003ccode\u003einterface\u003c/code\u003e. Otherwise there is a risk of runtime exceptions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n  void DoStuff();\n}\n\npublic class MyClass1 : IMyInterface\n{\n  public int Data { get { return new Random().Next(); } }\n\n  public void DoStuff()\n  {\n    // TODO...\n  }\n}\n\npublic static class DowncastExampleProgram\n{\n  static void EntryPoint(IMyInterface interfaceRef)\n  {\n    MyClass1 class1 \u003d (MyClass1)interfaceRef;  // Noncompliant\n    int privateData \u003d class1.Data;\n\n    class1 \u003d interfaceRef as MyClass1;  // Noncompliant\n    if (class1 !\u003d null)\n    {\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCasting to \u003ccode\u003eobject\u003c/code\u003e doesn’t raise an issue, because it can never fail.\u003c/p\u003e\n\u003cpre\u003e\nstatic void EntryPoint(IMyInterface interfaceRef)\n{\n  var o \u003d (object)interfaceRef;\n  ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNeeding to cast from an \u003ccode\u003einterface\u003c/code\u003e to a concrete type indicates that something is wrong with the abstractions in use, likely that\nsomething is missing from the \u003ccode\u003einterface\u003c/code\u003e. Instead of casting to a discrete type, the missing functionality should be added to the\n\u003ccode\u003einterface\u003c/code\u003e. Otherwise there is a risk of runtime exceptions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IMyInterface\n{\n  void DoStuff();\n}\n\npublic class MyClass1 : IMyInterface\n{\n  public int Data { get { return new Random().Next(); } }\n\n  public void DoStuff()\n  {\n    // TODO...\n  }\n}\n\npublic static class DowncastExampleProgram\n{\n  static void EntryPoint(IMyInterface interfaceRef)\n  {\n    MyClass1 class1 \u003d (MyClass1)interfaceRef;  // Noncompliant\n    int privateData \u003d class1.Data;\n\n    class1 \u003d interfaceRef as MyClass1;  // Noncompliant\n    if (class1 !\u003d null)\n    {\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCasting to \u003ccode\u003eobject\u003c/code\u003e doesn’t raise an issue, because it can never fail.\u003c/p\u003e\n\u003cpre\u003e\nstatic void EntryPoint(IMyInterface interfaceRef)\n{\n  var o \u003d (object)interfaceRef;\n  ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4545",
    "name": "\"DebuggerDisplayAttribute\" strings should reference existing members",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e is used to determine how an object is displayed in the debugger window.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e constructor takes a single mandatory argument: the string to be displayed in the value column for\ninstances of the type. Any text within curly braces is evaluated as the name of a field or property, or any complex expression containing method calls\nand operators.\u003c/p\u003e\n\u003cp\u003eNaming a non-existent member between curly braces will result in a CS0103 error in the debug window when debugging objects. Although there is no\nimpact on the production code, providing a wrong value can lead to difficulties when debugging the application.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when text specified between curly braces refers to members that don’t exist in the current context.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[DebuggerDisplay(\"Name: {Name}\")] // Noncompliant - Name doesn\u0027t exist in this context\npublic class Person\n{\n    public string FullName { get; private set; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[DebuggerDisplay(\"Name: {FullName}\")]\npublic class Person\n{\n    public string FullName { get; private set; }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e is used to determine how an object is displayed in the debugger window.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e constructor takes a single mandatory argument: the string to be displayed in the value column for\ninstances of the type. Any text within curly braces is evaluated as the name of a field or property, or any complex expression containing method calls\nand operators.\u003c/p\u003e\n\u003cp\u003eNaming a non-existent member between curly braces will result in a CS0103 error in the debug window when debugging objects. Although there is no\nimpact on the production code, providing a wrong value can lead to difficulties when debugging the application.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when text specified between curly braces refers to members that don’t exist in the current context.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[DebuggerDisplay(\"Name: {Name}\")] // Noncompliant - Name doesn\u0027t exist in this context\npublic class Person\n{\n    public string FullName { get; private set; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[DebuggerDisplay(\"Name: {FullName}\")]\npublic class Person\n{\n    public string FullName { get; private set; }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6602",
    "name": "\"Find\" method should be used instead of the \"FirstOrDefault\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.Find\u003c/code\u003e method and \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e method can be used to find the first element that satisfies a\ngiven condition in a collection. However, \u003ccode\u003eList.Find\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e\nobjects. For small collections, the performance difference may be minor, but for large collections, it can make a noticeable difference. The same\napplies for \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in the execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eFind\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eFirstOrDefault\u003c/code\u003e extension method. The\nfunction can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetValue(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.FirstOrDefault(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetValue(int[] data) \u003d\u0026gt;\n    data.FirstOrDefault(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetValue(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Find(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetValue(int[] data) \u003d\u0026gt;\n    Array.Find(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray.Find\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault\"\u003eEnumerable.FirstOrDefault(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.373 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1049 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.691 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0334 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.94 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.035 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125.38 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.779 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0107 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e86.2 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void FirstOrDefault()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.FirstOrDefault(x \u003d\u0026gt; x \u003d\u003d value);   // Enumerable.FirstOrDefault()\n    }\n}\n\n[Benchmark]\npublic void Find()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.Find(x \u003d\u0026gt; x \u003d\u003d value);             // List\u0026lt;T\u0026gt;.Find()\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.Find\u003c/code\u003e method and \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e method can be used to find the first element that satisfies a\ngiven condition in a collection. However, \u003ccode\u003eList.Find\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e\nobjects. For small collections, the performance difference may be minor, but for large collections, it can make a noticeable difference. The same\napplies for \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in the execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eFind\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eFirstOrDefault\u003c/code\u003e extension method. The\nfunction can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetValue(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.FirstOrDefault(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nint GetValue(int[] data) \u003d\u0026gt;\n    data.FirstOrDefault(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint GetValue(List\u0026lt;int\u0026gt; data) \u003d\u0026gt;\n    data.Find(x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nint GetValue(int[] data) \u003d\u0026gt;\n    Array.Find(data, x \u003d\u0026gt; x % 2 \u003d\u003d 0);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray.Find\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault\"\u003eEnumerable.FirstOrDefault(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.373 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1049 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.691 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0334 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.94 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.035 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125.38 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.779 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0107 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e86.2 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void FirstOrDefault()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.FirstOrDefault(x \u003d\u0026gt; x \u003d\u003d value);   // Enumerable.FirstOrDefault()\n    }\n}\n\n[Benchmark]\npublic void Find()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.Find(x \u003d\u0026gt; x \u003d\u003d value);             // List\u0026lt;T\u0026gt;.Find()\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2368",
    "name": "Public methods should not have multidimensional array parameters",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003emultidimensional\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003ejagged\u003c/a\u003e arrays as method parameters in C# can be\nchallenging for developers.\u003c/p\u003e\n\u003cp\u003eWhen these methods are exposed to external users, it requires advanced language knowledge for effective usage.\u003c/p\u003e\n\u003cp\u003eDetermining the appropriate data to pass to these parameters may not be intuitive.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Program\n{\n    public void WriteMatrix(int[][] matrix) // Noncompliant: data type is not intuitive\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this example, it cannot be inferred easily what the matrix should look like. Is it a 2x2 Matrix or even a triangular Matrix?\u003c/p\u003e\n\u003cp\u003eUsing a collection, data structure, or class that provides a more suitable representation of the required data is recommended instead of a\nmultidimensional array or jagged array to enhance code readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Matrix2x2\n{\n    // ...\n}\n\npublic class Program\n{\n    public void WriteMatrix(Matrix2x2 matrix) // Compliant: data type is intuitive\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAs a result, avoiding exposing such methods to external users is recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eHowever, using multidimensional and jagged array method parameters internally, such as in \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e methods or\nwithin \u003ccode\u003einternal\u003c/code\u003e classes, is compliant since they are not publicly exposed.\u003c/p\u003e\n\u003cpre\u003e\npublic class FirstClass\n{\n    private void UpdateMatrix(int[][] matrix) // Compliant: method is private\n    {\n        // ...\n    }\n}\n\ninternal class SecondClass\n{\n    public void UpdateMatrix(int[][] matrix) // Compliant: class is internal\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003eJagged Arrays\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003eMultidimensional Arrays\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003emultidimensional\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003ejagged\u003c/a\u003e arrays as method parameters in C# can be\nchallenging for developers.\u003c/p\u003e\n\u003cp\u003eWhen these methods are exposed to external users, it requires advanced language knowledge for effective usage.\u003c/p\u003e\n\u003cp\u003eDetermining the appropriate data to pass to these parameters may not be intuitive.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Program\n{\n    public void WriteMatrix(int[][] matrix) // Noncompliant: data type is not intuitive\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this example, it cannot be inferred easily what the matrix should look like. Is it a 2x2 Matrix or even a triangular Matrix?\u003c/p\u003e\n\u003cp\u003eUsing a collection, data structure, or class that provides a more suitable representation of the required data is recommended instead of a\nmultidimensional array or jagged array to enhance code readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Matrix2x2\n{\n    // ...\n}\n\npublic class Program\n{\n    public void WriteMatrix(Matrix2x2 matrix) // Compliant: data type is intuitive\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eAs a result, avoiding exposing such methods to external users is recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eHowever, using multidimensional and jagged array method parameters internally, such as in \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e methods or\nwithin \u003ccode\u003einternal\u003c/code\u003e classes, is compliant since they are not publicly exposed.\u003c/p\u003e\n\u003cpre\u003e\npublic class FirstClass\n{\n    private void UpdateMatrix(int[][] matrix) // Compliant: method is private\n    {\n        // ...\n    }\n}\n\ninternal class SecondClass\n{\n    public void UpdateMatrix(int[][] matrix) // Compliant: class is internal\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003eJagged Arrays\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003eMultidimensional Arrays\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3457",
    "name": "Composite format strings should be used correctly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA [composite format string](\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\u003c/a\u003e)\nis a string that contains placeholders, represented by indices inside curly braces \"{0}\", \"{1}\", etc. These placeholders are replaced by values when\nthe string is printed or logged.\u003c/p\u003e\n\u003cp\u003eBecause composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule validates the correspondence between arguments and composite formats when calling the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.format?view\u003dnet-7.0\"\u003e\u003ccode\u003eString.Format\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendformat?view\u003dnet-7.0\"\u003e\u003ccode\u003eStringBuilder.AppendFormat\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.write?view\u003dnet-7.0\"\u003e\u003ccode\u003eConsole.Write\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eConsole.WriteLine\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.write?view\u003dnet-7.0\"\u003e\u003ccode\u003eTextWriter.Write\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eTextWriter.WriteLine\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eDebug.WriteLine(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceerror?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceError(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceinformation?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceInformation(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.tracewarning?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceWarning(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracesource.traceinformation?view\u003dnet-7.0\"\u003e\u003ccode\u003eTraceSource.TraceInformation(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e No issue is raised if the format string is not a string literal, but comes from a variable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar pattern \u003d \"{0} {1} {2}\";\nvar res \u003d string.Format(pattern, 1, 2); // Incorrect, but the analyzer doesn\u0027t raise any warnings here\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e No issue is raised if the argument is not an inline created array. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar array \u003d new int[] {};\nvar res \u003d string.Format(\"{0} {1}\", array); // Compliant; we don\u0027t know the size of the array\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e This rule doesn’t check whether the format specifier (defined after the \u003ccode\u003e:\u003c/code\u003e) is actually valid. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eA composite format string contains placeholders, replaced by values when the string is printed or logged. Mismatch in the format specifiers and the\narguments provided can lead to incorrect strings being created.\u003c/p\u003e\n\u003cp\u003eTo avoid issues, a developer should ensure that the provided arguments match format specifiers.\u003c/p\u003e\n\u003cp\u003eMoreover, use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/string-interpolation\"\u003estring interpolation\u003c/a\u003e when possible.\u003c/p\u003e\n\u003cp\u003eInstead of\u003c/p\u003e\n\u003cpre\u003e\nstring str \u003d string.Format(\"Hello {0} {1}!\", firstName, lastName);\n\u003c/pre\u003e\n\u003cp\u003euse\u003c/p\u003e\n\u003cpre\u003e\nstring str \u003d $\"Hello {firstName} {lastName}!\";\n\u003c/pre\u003e\n\u003cp\u003eWith string interpolation:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the arguments are validated at compilation time rather than runtime \u003c/li\u003e\n  \u003cli\u003e modern code editors provide auto-completion when typing the interpolation expression \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ns \u003d string.Format(\"{0}\", arg0, arg1); // Noncompliant, arg1 is declared but not used.\ns \u003d string.Format(\"{0} {2}\", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing, so arg1 will not be used.\ns \u003d string.Format(\"foo\"); // Noncompliant; there is no need to use \"string.Format\" here.\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ns \u003d string.Format(\"{0}\", arg0);\ns \u003d string.Format(\"{0} {1}\", arg0, arg2);\ns \u003d \"foo\";\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA [composite format string](\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\u003c/a\u003e)\nis a string that contains placeholders, represented by indices inside curly braces \"{0}\", \"{1}\", etc. These placeholders are replaced by values when\nthe string is printed or logged.\u003c/p\u003e\n\u003cp\u003eBecause composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule validates the correspondence between arguments and composite formats when calling the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.format?view\u003dnet-7.0\"\u003e\u003ccode\u003eString.Format\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendformat?view\u003dnet-7.0\"\u003e\u003ccode\u003eStringBuilder.AppendFormat\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.write?view\u003dnet-7.0\"\u003e\u003ccode\u003eConsole.Write\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eConsole.WriteLine\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.write?view\u003dnet-7.0\"\u003e\u003ccode\u003eTextWriter.Write\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eTextWriter.WriteLine\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.writeline?view\u003dnet-7.0\"\u003e\u003ccode\u003eDebug.WriteLine(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceerror?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceError(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceinformation?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceInformation(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.tracewarning?view\u003dnet-7.0\"\u003e\u003ccode\u003eTrace.TraceWarning(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracesource.traceinformation?view\u003dnet-7.0\"\u003e\u003ccode\u003eTraceSource.TraceInformation(String, Object[\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e)\u003c/code\u003e] \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e No issue is raised if the format string is not a string literal, but comes from a variable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar pattern \u003d \"{0} {1} {2}\";\nvar res \u003d string.Format(pattern, 1, 2); // Incorrect, but the analyzer doesn\u0027t raise any warnings here\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e No issue is raised if the argument is not an inline created array. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar array \u003d new int[] {};\nvar res \u003d string.Format(\"{0} {1}\", array); // Compliant; we don\u0027t know the size of the array\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e This rule doesn’t check whether the format specifier (defined after the \u003ccode\u003e:\u003c/code\u003e) is actually valid. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eA composite format string contains placeholders, replaced by values when the string is printed or logged. Mismatch in the format specifiers and the\narguments provided can lead to incorrect strings being created.\u003c/p\u003e\n\u003cp\u003eTo avoid issues, a developer should ensure that the provided arguments match format specifiers.\u003c/p\u003e\n\u003cp\u003eMoreover, use \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/string-interpolation\"\u003estring interpolation\u003c/a\u003e when possible.\u003c/p\u003e\n\u003cp\u003eInstead of\u003c/p\u003e\n\u003cpre\u003e\nstring str \u003d string.Format(\"Hello {0} {1}!\", firstName, lastName);\n\u003c/pre\u003e\n\u003cp\u003euse\u003c/p\u003e\n\u003cpre\u003e\nstring str \u003d $\"Hello {firstName} {lastName}!\";\n\u003c/pre\u003e\n\u003cp\u003eWith string interpolation:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the arguments are validated at compilation time rather than runtime \u003c/li\u003e\n  \u003cli\u003e modern code editors provide auto-completion when typing the interpolation expression \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ns \u003d string.Format(\"{0}\", arg0, arg1); // Noncompliant, arg1 is declared but not used.\ns \u003d string.Format(\"{0} {2}\", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing, so arg1 will not be used.\ns \u003d string.Format(\"foo\"); // Noncompliant; there is no need to use \"string.Format\" here.\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ns \u003d string.Format(\"{0}\", arg0);\ns \u003d string.Format(\"{0} {1}\", arg0, arg2);\ns \u003d \"foo\";\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3241",
    "name": "Methods should not return values that are never used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePrivate methods are intended for use only within their scope. If these methods return values that are not utilized by any calling functions, it\nindicates that the return operation is unnecessary. Removing such returns can enhance both efficiency and code clarity.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass SomeClass\n{\n     private int PrivateMethod() \u003d\u0026gt; 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePrivate methods are intended for use only within their scope. If these methods return values that are not utilized by any calling functions, it\nindicates that the return operation is unnecessary. Removing such returns can enhance both efficiency and code clarity.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass SomeClass\n{\n     private int PrivateMethod() \u003d\u0026gt; 42;\n\n     public void PublicMethod()\n     {\n          PrivateMethod(); // Noncompliant: the result of PrivateMethod is not used\n     }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3240",
    "name": "The simplest possible condition syntax should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn the interests of keeping code clean, the simplest possible conditional syntax should be used. That means\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e using the \u003ccode\u003e??\u003d\u003c/code\u003e operator for a self-assign-if-not-null operation, \u003c/li\u003e\n  \u003cli\u003e using the \u003ccode\u003e??\u003c/code\u003e operator for an assign-if-not-null operation, and \u003c/li\u003e\n  \u003cli\u003e using the ternary operator \u003ccode\u003e?:\u003c/code\u003e for assignment to a single variable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nobject a \u003d null, b \u003d null, x;\n\nif (a !\u003d null) // Noncompliant; needlessly verbose\n{\n  x \u003d a;\n}\nelse\n{\n  x \u003d b;\n}\n\nx \u003d a !\u003d null ? a : b; // Noncompliant; better but could still be simplified\n\nx \u003d (a \u003d\u003d null) ? new object() : a; // Noncompliant\n\nif (condition) // Noncompliant\n{\n  x \u003d a;\n}\nelse\n{\n  x \u003d b;\n}\n\nif (a \u003d\u003d null)  // Noncompliant\n    a \u003d new object();\n\nvar y \u003d null ?? new object(); // Noncompliant\n\na \u003d a ?? new object();  // Noncompliant for C# 8\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nobject x;\n\nx \u003d a ?? b;\nx \u003d a ?? b;\nx \u003d a ?? new object();\nx \u003d condition ? a : b;\na ??\u003d new object();\nvar y \u003d new object();\na ??\u003d new object();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn the interests of keeping code clean, the simplest possible conditional syntax should be used. That means\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e using the \u003ccode\u003e??\u003d\u003c/code\u003e operator for a self-assign-if-not-null operation, \u003c/li\u003e\n  \u003cli\u003e using the \u003ccode\u003e??\u003c/code\u003e operator for an assign-if-not-null operation, and \u003c/li\u003e\n  \u003cli\u003e using the ternary operator \u003ccode\u003e?:\u003c/code\u003e for assignment to a single variable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nobject a \u003d null, b \u003d null, x;\n\nif (a !\u003d null) // Noncompliant; needlessly verbose\n{\n  x \u003d a;\n}\nelse\n{\n  x \u003d b;\n}\n\nx \u003d a !\u003d null ? a : b; // Noncompliant; better but could still be simplified\n\nx \u003d (a \u003d\u003d null) ? new object() : a; // Noncompliant\n\nif (condition) // Noncompliant\n{\n  x \u003d a;\n}\nelse\n{\n  x \u003d b;\n}\n\nif (a \u003d\u003d null)  // Noncompliant\n    a \u003d new object();\n\nvar y \u003d null ?? new object(); // Noncompliant\n\na \u003d a ?? new object();  // Noncompliant for C# 8\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nobject x;\n\nx \u003d a ?? b;\nx \u003d a ?? b;\nx \u003d a ?? new object();\nx \u003d condition ? a : b;\na ??\u003d new object();\nvar y \u003d new object();\na ??\u003d new object();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1185",
    "name": "Overriding members should do more than simply call the same member in the base class",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOverriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time\nthis is justified is in \u003ccode\u003esealed\u003c/code\u003e overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides\nof \u003ccode\u003eEquals\u003c/code\u003e and \u003ccode\u003eGetHashCode\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic override void Method() // Noncompliant\n{\n  base.Method();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic override void Method()\n{\n  //do something else\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf there is an attribute in any level of the overriding chain, then the overridden member is ignored.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n  [Required]\n  public virtual string Name { get; set; }\n}\n\npublic class Derived : Base\n{\n  public override string Name\n  {\n    get\n    {\n      return base.Name;\n    }\n    set\n    {\n      base.Name \u003d value;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eIf there is a documentation comment on the overriding method, it will be ignored:\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo : Bar\n{\n    /// \u0026lt;summary\u0026gt;\n    /// Keep this method for backwards compatibility.\n    /// \u0026lt;/summary\u0026gt;\n    public override void DoSomething()\n    {\n        base.DoSomething();\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOverriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time\nthis is justified is in \u003ccode\u003esealed\u003c/code\u003e overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides\nof \u003ccode\u003eEquals\u003c/code\u003e and \u003ccode\u003eGetHashCode\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic override void Method() // Noncompliant\n{\n  base.Method();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic override void Method()\n{\n  //do something else\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf there is an attribute in any level of the overriding chain, then the overridden member is ignored.\u003c/p\u003e\n\u003cpre\u003e\npublic class Base\n{\n  [Required]\n  public virtual string Name { get; set; }\n}\n\npublic class Derived : Base\n{\n  public override string Name\n  {\n    get\n    {\n      return base.Name;\n    }\n    set\n    {\n      base.Name \u003d value;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eIf there is a documentation comment on the overriding method, it will be ignored:\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo : Bar\n{\n    /// \u0026lt;summary\u0026gt;\n    /// Keep this method for backwards compatibility.\n    /// \u0026lt;/summary\u0026gt;\n    public override void DoSomething()\n    {\n        base.DoSomething();\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4212",
    "name": "Serialization constructors should be secured",
    "defaultSeverity": "MAJOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present\non a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor\nto do this.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type implements the \u003ccode\u003eSystem.Runtime.Serialization.ISerializable\u003c/code\u003e interface, is not a delegate or\ninterface, is declared in an assembly that allows partially trusted callers and has a constructor that takes a\n\u003ccode\u003eSystem.Runtime.Serialization.SerializationInfo\u003c/code\u003e object and a \u003ccode\u003eSystem.Runtime.Serialization.StreamingContext\u003c/code\u003e object which is\nnot secured by a security check, but one or more of the regular constructors in the type is secured.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: AllowPartiallyTrustedCallersAttribute()]\nnamespace MyLibrary\n{\n    [Serializable]\n    public class Foo : ISerializable\n    {\n        private int n;\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        public Foo()\n        {\n           n \u003d -1;\n        }\n\n        protected Foo(SerializationInfo info, StreamingContext context) // Noncompliant\n        {\n           n \u003d (int)info.GetValue(\"n\", typeof(int));\n        }\n\n        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n        {\n           info.AddValue(\"n\", n);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: AllowPartiallyTrustedCallersAttribute()]\nnamespace MyLibrary\n{\n    [Serializable]\n    public class Foo : ISerializable\n    {\n        private int n;\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        public Foo()\n        {\n           n \u003d -1;\n        }\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        protected Foo(SerializationInfo info, StreamingContext context)\n        {\n           n \u003d (int)info.GetValue(\"n\", typeof(int));\n        }\n\n        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n        {\n           info.AddValue(\"n\", n);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present\non a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor\nto do this.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type implements the \u003ccode\u003eSystem.Runtime.Serialization.ISerializable\u003c/code\u003e interface, is not a delegate or\ninterface, is declared in an assembly that allows partially trusted callers and has a constructor that takes a\n\u003ccode\u003eSystem.Runtime.Serialization.SerializationInfo\u003c/code\u003e object and a \u003ccode\u003eSystem.Runtime.Serialization.StreamingContext\u003c/code\u003e object which is\nnot secured by a security check, but one or more of the regular constructors in the type is secured.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: AllowPartiallyTrustedCallersAttribute()]\nnamespace MyLibrary\n{\n    [Serializable]\n    public class Foo : ISerializable\n    {\n        private int n;\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        public Foo()\n        {\n           n \u003d -1;\n        }\n\n        protected Foo(SerializationInfo info, StreamingContext context) // Noncompliant\n        {\n           n \u003d (int)info.GetValue(\"n\", typeof(int));\n        }\n\n        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n        {\n           info.AddValue(\"n\", n);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: AllowPartiallyTrustedCallersAttribute()]\nnamespace MyLibrary\n{\n    [Serializable]\n    public class Foo : ISerializable\n    {\n        private int n;\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        public Foo()\n        {\n           n \u003d -1;\n        }\n\n        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted \u003d true)]\n        protected Foo(SerializationInfo info, StreamingContext context)\n        {\n           n \u003d (int)info.GetValue(\"n\", typeof(int));\n        }\n\n        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\n        {\n           info.AddValue(\"n\", n);\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "serialization"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2275",
    "name": "Composite format strings should not lead to unexpected behavior at runtime",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eComposite format strings in C# are evaluated at runtime, which means they are not verified by the compiler. Introducing an ill-formed format item,\nor indexing mismatch can lead to unexpected behaviors or runtime errors. The purpose of this rule is to perform static validation on composite format\nstrings used in various string formatting functions to ensure their correct usage. This rule validates the proper behavior of composite formats when\ninvoking the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eString.Format\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eStringBuilder.AppendFormat\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConsole.Write\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConsole.WriteLine\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTextWriter.Write\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTextWriter.WriteLine\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDebug.WriteLine(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceError(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceInformation(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceWarning(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTraceSource.TraceInformation(String, Object[])\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ns \u003d string.Format(\"[0}\", arg0); // Noncompliant: square bracket \u0027[\u0027 instead of curly bracket \u0027{\u0027\ns \u003d string.Format(\"{{0}\", arg0); // Noncompliant: double starting curly brackets \u0027{{\u0027\ns \u003d string.Format(\"{0}}\", arg0); // Noncompliant: double ending curly brackets \u0027}}\u0027\ns \u003d string.Format(\"{-1}\", arg0); // Noncompliant: invalid index for the format item, must be \u0026gt;\u003d 0\ns \u003d string.Format(\"{0} {1}\", arg0); // Noncompliant: two format items in the string but only one argument provided\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ns \u003d string.Format(\"{0}\", 42); // Compliant\ns \u003d string.Format(\"{0,10}\", 42); // Compliant\ns \u003d string.Format(\"{0,-10}\", 42); // Compliant\ns \u003d string.Format(\"{0:0000}\", 42); // Compliant\ns \u003d string.Format(\"{2}-{0}-{1}\", 1, 2, 3); // Compliant\ns \u003d string.Format(\"no format\"); // Compliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not perform any checks on the format specifier, if present (defined after the \u003ccode\u003e:\u003c/code\u003e). Moreover, no issues are raised in the\nfollowing cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the format string is not a \u003ccode\u003econst\u003c/code\u003e. \u003cpre\u003e\nvar pattern \u003d \"{0} {1} {2}\";\nvar res \u003d string.Format(pattern, 1, 2); // Compliant, non-constant string are not recognized\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e the argument is not an inline creation array. \u003cpre\u003e\nvar array \u003d new int[] {};\nvar res \u003d string.Format(\"{0} {1}\", array); // Compliant the rule does not check the size of the array\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\"\u003eComposite formatting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.format\"\u003eString.Format\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendformat\"\u003eStringBuilder.AppendFormat\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.write\"\u003eConsole.Write\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.writeline\"\u003eConsole.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.write\"\u003eTextWriter.Write\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeline\"\u003eTextWriter.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.writeline\"\u003eDebug.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceerror\"\u003eTrace.TraceError\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceinformation\"\u003eTrace.TraceInformation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.tracewarning\"\u003eTrace.TraceWarning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracesource.traceinformation\"\u003eTraceSource.TraceInformation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types\"\u003eStandard format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eComposite format strings in C# are evaluated at runtime, which means they are not verified by the compiler. Introducing an ill-formed format item,\nor indexing mismatch can lead to unexpected behaviors or runtime errors. The purpose of this rule is to perform static validation on composite format\nstrings used in various string formatting functions to ensure their correct usage. This rule validates the proper behavior of composite formats when\ninvoking the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eString.Format\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eStringBuilder.AppendFormat\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConsole.Write\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConsole.WriteLine\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTextWriter.Write\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTextWriter.WriteLine\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDebug.WriteLine(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceError(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceInformation(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTrace.TraceWarning(String, Object[])\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTraceSource.TraceInformation(String, Object[])\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ns \u003d string.Format(\"[0}\", arg0); // Noncompliant: square bracket \u0027[\u0027 instead of curly bracket \u0027{\u0027\ns \u003d string.Format(\"{{0}\", arg0); // Noncompliant: double starting curly brackets \u0027{{\u0027\ns \u003d string.Format(\"{0}}\", arg0); // Noncompliant: double ending curly brackets \u0027}}\u0027\ns \u003d string.Format(\"{-1}\", arg0); // Noncompliant: invalid index for the format item, must be \u0026gt;\u003d 0\ns \u003d string.Format(\"{0} {1}\", arg0); // Noncompliant: two format items in the string but only one argument provided\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ns \u003d string.Format(\"{0}\", 42); // Compliant\ns \u003d string.Format(\"{0,10}\", 42); // Compliant\ns \u003d string.Format(\"{0,-10}\", 42); // Compliant\ns \u003d string.Format(\"{0:0000}\", 42); // Compliant\ns \u003d string.Format(\"{2}-{0}-{1}\", 1, 2, 3); // Compliant\ns \u003d string.Format(\"no format\"); // Compliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not perform any checks on the format specifier, if present (defined after the \u003ccode\u003e:\u003c/code\u003e). Moreover, no issues are raised in the\nfollowing cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the format string is not a \u003ccode\u003econst\u003c/code\u003e. \u003cpre\u003e\nvar pattern \u003d \"{0} {1} {2}\";\nvar res \u003d string.Format(pattern, 1, 2); // Compliant, non-constant string are not recognized\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e the argument is not an inline creation array. \u003cpre\u003e\nvar array \u003d new int[] {};\nvar res \u003d string.Format(\"{0} {1}\", array); // Compliant the rule does not check the size of the array\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting\"\u003eComposite formatting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.format\"\u003eString.Format\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendformat\"\u003eStringBuilder.AppendFormat\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.write\"\u003eConsole.Write\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.console.writeline\"\u003eConsole.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.write\"\u003eTextWriter.Write\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.io.textwriter.writeline\"\u003eTextWriter.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.writeline\"\u003eDebug.WriteLine\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceerror\"\u003eTrace.TraceError\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.traceinformation\"\u003eTrace.TraceInformation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.trace.tracewarning\"\u003eTrace.TraceWarning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracesource.traceinformation\"\u003eTraceSource.TraceInformation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types\"\u003eStandard format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3363",
    "name": "Date and time should not be used as a type for primary keys",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003cp\u003eYou should only set a property of a temporal type (like \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e) as the primary key of a table if the\nvalues are guaranteed to be unique.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing temporal types as the primary key of a table is risky. When these types are used as primary keys, it usually means that each new key is\ncreated with the use of \u003ccode\u003e.Now\u003c/code\u003e or \u003ccode\u003e.UtcNow\u003c/code\u003e properties from \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e classes. In\nthose cases, duplicate keys exceptions may occur in many ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when entries are added consecutively by a machine with low-enough system clock resolution; \u003c/li\u003e\n  \u003cli\u003e when two different threads are inserting entries in close enough sequence for both to have the same time; \u003c/li\u003e\n  \u003cli\u003e when changes such as daylight saving time (DST) transitions occur, where values can be repeated the following hour (only for\n  \u003ccode\u003eDateTime\u003c/code\u003e type); \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe rule raises an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity Framework, or Entity Framework Core dependencies are found; \u003c/li\u003e\n  \u003cli\u003e a class contains a property either named \u003ccode\u003eId\u003c/code\u003e, \u003ccode\u003e\u0026lt;type name\u0026gt;Id\u003c/code\u003e or decorated by the \u003ccode\u003e[Key]\u003c/code\u003e or\n  \u003ccode\u003e[PrimaryKey]\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e the key property is of one of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eSystem.DateTime\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eSystem.DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eSystem.TimeSpan\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eSystem.DateOnly\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eSystem.TimeOnly\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEither use a GUID or the auto generated ID as a primary key.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class Account\n{\n    public DateTime Id { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninternal class Account\n{\n    public Guid Id { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class Person\n{\n    [Key]\n    public DateTime PersonIdentifier { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\ninternal class Person\n{\n    [Key]\n    public Guid PersonIdentifier { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/core/modeling/keys?tabs\u003ddata-annotations\"\u003eEntity Framework keys and data annotation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.guid\"\u003eGUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eYou should only set a property of a temporal type (like \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e) as the primary key of a table if the\nvalues are guaranteed to be unique.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing temporal types as the primary key of a table is risky. When these types are used as primary keys, it usually means that each new key is\ncreated with the use of \u003ccode\u003e.Now\u003c/code\u003e or \u003ccode\u003e.UtcNow\u003c/code\u003e properties from \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e classes. In\nthose cases, duplicate keys exceptions may occur in many ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when entries are added consecutively by a machine with low-enough system clock resolution; \u003c/li\u003e\n  \u003cli\u003e when two different threads are inserting entries in close enough sequence for both to have the same time; \u003c/li\u003e\n  \u003cli\u003e when changes such as daylight saving time (DST) transitions occur, where values can be repeated the following hour (only for\n  \u003ccode\u003eDateTime\u003c/code\u003e type); \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe rule raises an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity Framework, or Entity Framework Core dependencies are found; \u003c/li\u003e\n  \u003cli\u003e a class contains a property either named \u003ccode\u003eId\u003c/code\u003e, \u003ccode\u003e\u0026lt;type name\u0026gt;Id\u003c/code\u003e or decorated by the \u003ccode\u003e[Key]\u003c/code\u003e or\n  \u003ccode\u003e[PrimaryKey]\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e the key property is of one of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eSystem.DateTime\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eSystem.DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eSystem.TimeSpan\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eSystem.DateOnly\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eSystem.TimeOnly\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEither use a GUID or the auto generated ID as a primary key.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class Account\n{\n    public DateTime Id { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ninternal class Account\n{\n    public Guid Id { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\ninternal class Person\n{\n    [Key]\n    public DateTime PersonIdentifier { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\ninternal class Person\n{\n    [Key]\n    public Guid PersonIdentifier { get; set; }\n\n    public string Name { get; set; }\n    public string Surname { get; set; }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/core/modeling/keys?tabs\u003ddata-annotations\"\u003eEntity Framework keys and data annotation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.guid\"\u003eGUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1186",
    "name": "Methods should not be empty",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following empty methods are considered compliant:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty \u003ccode\u003evirtual\u003c/code\u003e methods as the implementation might not be required in the base class \u003c/li\u003e\n  \u003cli\u003e empty methods that override an \u003ccode\u003eabstract\u003c/code\u003e method as the implementation is mandatory for child class \u003c/li\u003e\n  \u003cli\u003e empty overrides in test assemblies for mocking purposes \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void ShouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\npublic void NotImplementedYet() {  // Noncompliant - method is empty\n}\n\npublic void WillNeverBeImplemented() {  // Noncompliant - method is empty\n}\n\npublic void EmptyOnPurpose() {  // Noncompliant - method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void ShouldNotBeEmpty() {\n    DoSomething();\n}\n\npublic void NotImplementedYet() {\n    throw new NotImplementedException();\n}\n\npublic void WillNeverBeImplemented() {\n    throw new NotSupportedException();\n}\n\npublic void EmptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following empty methods are considered compliant:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty \u003ccode\u003evirtual\u003c/code\u003e methods as the implementation might not be required in the base class \u003c/li\u003e\n  \u003cli\u003e empty methods that override an \u003ccode\u003eabstract\u003c/code\u003e method as the implementation is mandatory for child class \u003c/li\u003e\n  \u003cli\u003e empty overrides in test assemblies for mocking purposes \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void ShouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\npublic void NotImplementedYet() {  // Noncompliant - method is empty\n}\n\npublic void WillNeverBeImplemented() {  // Noncompliant - method is empty\n}\n\npublic void EmptyOnPurpose() {  // Noncompliant - method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void ShouldNotBeEmpty() {\n    DoSomething();\n}\n\npublic void NotImplementedYet() {\n    throw new NotImplementedException();\n}\n\npublic void WillNeverBeImplemented() {\n    throw new NotSupportedException();\n}\n\npublic void EmptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3242",
    "name": "Method parameters should be declared with base types",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is\nprovided in the derived type is not required then that limitation isn’t required, and should be removed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method declaration includes a parameter that is a derived type and accesses only members of the base type.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(FileStream stream) // Noncompliant: Uses only System.IO.Stream methods\n    {\n      int a;\n      while ((a \u003d stream.ReadByte()) !\u003d -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(Stream stream)\n    {\n      int a;\n      while ((a \u003d stream.ReadByte()) !\u003d -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is\nprovided in the derived type is not required then that limitation isn’t required, and should be removed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method declaration includes a parameter that is a derived type and accesses only members of the base type.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(FileStream stream) // Noncompliant: Uses only System.IO.Stream methods\n    {\n      int a;\n      while ((a \u003d stream.ReadByte()) !\u003d -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(Stream stream)\n    {\n      int a;\n      while ((a \u003d stream.ReadByte()) !\u003d -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1066",
    "name": "Mergeable \"if\" statements should be combined",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nif (condition1)\n{\n    if (condition2)           // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nif (condition1 \u0026amp;\u0026amp; condition2) // Compliant\n{\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif (file !\u003d null)\n{\n  if (file.isFile() || file.isDirectory())    // Noncompliant\n  {\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nbool isFileOrDirectory(File file)\n{\n  return file.isFile() || file.isDirectory();\n}\n\n/* ... */\n\nif (file !\u003d null \u0026amp;\u0026amp; isFileOrDirectory(file))  // Compliant\n{\n  /* ... */\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nif (condition1)\n{\n    if (condition2)           // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nif (condition1 \u0026amp;\u0026amp; condition2) // Compliant\n{\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif (file !\u003d null)\n{\n  if (file.isFile() || file.isDirectory())    // Noncompliant\n  {\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nbool isFileOrDirectory(File file)\n{\n  return file.isFile() || file.isDirectory();\n}\n\n/* ... */\n\nif (file !\u003d null \u0026amp;\u0026amp; isFileOrDirectory(file))  // Compliant\n{\n  /* ... */\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4210",
    "name": "Windows Forms entry points should be marked with STAThread",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an assembly uses Windows Forms (classes and interfaces from the \u003ccode\u003eSystem.Windows.Forms\u003c/code\u003e namespace) its entry point should be marked\nwith the \u003ccode\u003eSTAThreadAttribute\u003c/code\u003e to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one\nsupported by Windows Forms.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the entry point (\u003ccode\u003estatic void Main\u003c/code\u003e method) of an assembly using Windows Forms is not marked as STA.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Windows.Forms;\n\nnamespace MyLibrary\n{\n    public class MyForm: Form\n    {\n        public MyForm()\n        {\n            this.Text \u003d \"Hello World!\";\n        }\n\n        public static void Main()  // Noncompliant\n        {\n            var form \u003d new MyForm();\n            Application.Run(form);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Windows.Forms;\n\nnamespace MyLibrary\n{\n    public class MyForm: Form\n    {\n        public MyForm()\n        {\n            this.Text \u003d \"Hello World!\";\n        }\n\n        [STAThread]\n        public static void Main()\n        {\n            var form \u003d new MyForm();\n            Application.Run(form);\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an assembly uses Windows Forms (classes and interfaces from the \u003ccode\u003eSystem.Windows.Forms\u003c/code\u003e namespace) its entry point should be marked\nwith the \u003ccode\u003eSTAThreadAttribute\u003c/code\u003e to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one\nsupported by Windows Forms.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the entry point (\u003ccode\u003estatic void Main\u003c/code\u003e method) of an assembly using Windows Forms is not marked as STA.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Windows.Forms;\n\nnamespace MyLibrary\n{\n    public class MyForm: Form\n    {\n        public MyForm()\n        {\n            this.Text \u003d \"Hello World!\";\n        }\n\n        public static void Main()  // Noncompliant\n        {\n            var form \u003d new MyForm();\n            Application.Run(form);\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Windows.Forms;\n\nnamespace MyLibrary\n{\n    public class MyForm: Form\n    {\n        public MyForm()\n        {\n            this.Text \u003d \"Hello World!\";\n        }\n\n        [STAThread]\n        public static void Main()\n        {\n            var form \u003d new MyForm();\n            Application.Run(form);\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall",
      "winforms"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2156",
    "name": "\"sealed\" classes should not have \"protected\" members",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe difference between \u003ccode\u003eprivate\u003c/code\u003e and \u003ccode\u003eprotected\u003c/code\u003e visibility is that child classes can see and use \u003ccode\u003eprotected\u003c/code\u003e\nmembers, but they cannot see \u003ccode\u003eprivate\u003c/code\u003e ones. Since a \u003ccode\u003esealed\u003c/code\u003e class cannot have children, marking its members\n\u003ccode\u003eprotected\u003c/code\u003e is confusingly pointless.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic sealed class MySealedClass\n{\n    protected string name \u003d \"Fred\";  // Noncompliant\n    protected void SetName(string name) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic sealed class MySealedClass\n{\n    private string name \u003d \"Fred\";\n    public void SetName(string name)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe difference between \u003ccode\u003eprivate\u003c/code\u003e and \u003ccode\u003eprotected\u003c/code\u003e visibility is that child classes can see and use \u003ccode\u003eprotected\u003c/code\u003e\nmembers, but they cannot see \u003ccode\u003eprivate\u003c/code\u003e ones. Since a \u003ccode\u003esealed\u003c/code\u003e class cannot have children, marking its members\n\u003ccode\u003eprotected\u003c/code\u003e is confusingly pointless.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic sealed class MySealedClass\n{\n    protected string name \u003d \"Fred\";  // Noncompliant\n    protected void SetName(string name) // Noncompliant\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic sealed class MySealedClass\n{\n    private string name \u003d \"Fred\";\n    public void SetName(string name)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3366",
    "name": "\"this\" should not be exposed from constructors",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn single-threaded environments, the use of \u003ccode\u003ethis\u003c/code\u003e in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThe classic example is a class with a \u003ccode\u003estatic\u003c/code\u003e list of its instances. If the constructor stores \u003ccode\u003ethis\u003c/code\u003e in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of \u003ccode\u003ethis\u003c/code\u003e is the last instruction in the constructor,\nthere’s still a danger if the class is not \u003ccode\u003efinal\u003c/code\u003e. In that case, the initialization of subclasses won’t be complete before\n\u003ccode\u003ethis\u003c/code\u003e is exposed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003ethis\u003c/code\u003e is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Monument\n{\n  public static readonly List\u0026lt;Monument\u0026gt; ALL_MONUMENTS \u003d new List\u0026lt;Monument\u0026gt;();\n  // ...\n\n  public Monument(string location, ...)\n  {\n    ALL_MONUMENTS.Add(this);  // Noncompliant; passed to a method of another object\n\n    this.location \u003d location;\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores instances of assigning \u003ccode\u003ethis\u003c/code\u003e directly to a \u003ccode\u003estatic\u003c/code\u003e field of the same class because that case is covered\nby {rule:csharpsquid:S3010} .\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn single-threaded environments, the use of \u003ccode\u003ethis\u003c/code\u003e in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThe classic example is a class with a \u003ccode\u003estatic\u003c/code\u003e list of its instances. If the constructor stores \u003ccode\u003ethis\u003c/code\u003e in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of \u003ccode\u003ethis\u003c/code\u003e is the last instruction in the constructor,\nthere’s still a danger if the class is not \u003ccode\u003efinal\u003c/code\u003e. In that case, the initialization of subclasses won’t be complete before\n\u003ccode\u003ethis\u003c/code\u003e is exposed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003ethis\u003c/code\u003e is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Monument\n{\n  public static readonly List\u0026lt;Monument\u0026gt; ALL_MONUMENTS \u003d new List\u0026lt;Monument\u0026gt;();\n  // ...\n\n  public Monument(string location, ...)\n  {\n    ALL_MONUMENTS.Add(this);  // Noncompliant; passed to a method of another object\n\n    this.location \u003d location;\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores instances of assigning \u003ccode\u003ethis\u003c/code\u003e directly to a \u003ccode\u003estatic\u003c/code\u003e field of the same class because that case is covered\nby {rule:csharpsquid:S3010} .\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3244",
    "name": "Anonymous delegates should not be used to unsubscribe from Events",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen working with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions\"\u003eanonymous\nfunctions\u003c/a\u003e, it is important to keep in mind that each time you create one, it is a completely new instance.\u003c/p\u003e\n\u003cp\u003eIn this example, even though the same lambda expression is used, the expressions are stored separately in the memory and are therefore not equal or\nthe same.\u003c/p\u003e\n\u003cpre\u003e\nFunc\u0026lt;int, int\u0026gt; lambda1 \u003d x \u003d\u0026gt; x + 1;\nFunc\u0026lt;int, int\u0026gt; lambda2 \u003d x \u003d\u0026gt; x + 1;\n\nvar result \u003d lambda1 \u003d\u003d lambda2; // result is false here\n\u003c/pre\u003e\n\u003cp\u003eThis is even more true when working with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eevents\u003c/a\u003e since they\nare \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates\"\u003emulticast\ndelegates\u003c/a\u003e that offer ways of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events\"\u003esubscribing and\nunsubscribing\u003c/a\u003e to them. If an anonymous function is used to subscribe to an event, it is impossible to unsubscribe from it. This happens because to\nremove the entry from the subscription list, a reference to the original method is needed, but if the anonymous function has not been stored before\nsubscribing, there is no way to find a reference to it.\u003c/p\u003e\n\u003cp\u003eInstead, store the callback to a variable or a named method and use the variable or method to subscribe and unsubscribe.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eStore the callback to a variable or a named method and use the variable or method to subscribe and unsubscribe.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nevent EventHandler myEvent;\n\nvoid DoWork()\n{\n        myEvent +\u003d (s, e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\");\n        // ...\n        myEvent -\u003d (s, e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\"); // Noncompliant: this callback was never subscribed\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nevent EventHandler myEvent;\nvoid LogEvent(object s, EventArgs e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\");\n\nvoid DoWork()\n{\n        myEvent +\u003d LogEvent;\n        // ...\n        myEvent -\u003d LogEvent; // Compliant: LogEvent points to the same callback used for subscribing\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions\"\u003eLambda expressions\n  and anonymous functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events\"\u003eHow to subscribe to\n  and unsubscribe from events (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates\"\u003eHow to combine\n  delegates (Multicast Delegates) (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen working with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions\"\u003eanonymous\nfunctions\u003c/a\u003e, it is important to keep in mind that each time you create one, it is a completely new instance.\u003c/p\u003e\n\u003cp\u003eIn this example, even though the same lambda expression is used, the expressions are stored separately in the memory and are therefore not equal or\nthe same.\u003c/p\u003e\n\u003cpre\u003e\nFunc\u0026lt;int, int\u0026gt; lambda1 \u003d x \u003d\u0026gt; x + 1;\nFunc\u0026lt;int, int\u0026gt; lambda2 \u003d x \u003d\u0026gt; x + 1;\n\nvar result \u003d lambda1 \u003d\u003d lambda2; // result is false here\n\u003c/pre\u003e\n\u003cp\u003eThis is even more true when working with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eevents\u003c/a\u003e since they\nare \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates\"\u003emulticast\ndelegates\u003c/a\u003e that offer ways of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events\"\u003esubscribing and\nunsubscribing\u003c/a\u003e to them. If an anonymous function is used to subscribe to an event, it is impossible to unsubscribe from it. This happens because to\nremove the entry from the subscription list, a reference to the original method is needed, but if the anonymous function has not been stored before\nsubscribing, there is no way to find a reference to it.\u003c/p\u003e\n\u003cp\u003eInstead, store the callback to a variable or a named method and use the variable or method to subscribe and unsubscribe.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eStore the callback to a variable or a named method and use the variable or method to subscribe and unsubscribe.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nevent EventHandler myEvent;\n\nvoid DoWork()\n{\n        myEvent +\u003d (s, e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\");\n        // ...\n        myEvent -\u003d (s, e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\"); // Noncompliant: this callback was never subscribed\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nevent EventHandler myEvent;\nvoid LogEvent(object s, EventArgs e) \u003d\u0026gt; Console.WriteLine($\"Event raised with sender {s} and arguments {e}!\");\n\nvoid DoWork()\n{\n        myEvent +\u003d LogEvent;\n        // ...\n        myEvent -\u003d LogEvent; // Compliant: LogEvent points to the same callback used for subscribing\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions\"\u003eLambda expressions\n  and anonymous functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events\"\u003eHow to subscribe to\n  and unsubscribe from events (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/how-to-combine-delegates-multicast-delegates\"\u003eHow to combine\n  delegates (Multicast Delegates) (C# Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5542",
    "name": "Encryption algorithms should be used with secure mode and padding scheme",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    AesManaged aes \u003d new AesManaged\n    {\n        keysize \u003d 128,\n        blocksize \u003d 128,\n        mode \u003d ciphermode.ecb,        // Noncompliant\n        padding \u003d paddingmode.pkcs7\n    };\n}\n\u003c/pre\u003e\n\u003cp\u003eNote that Microsoft has marked derived cryptographic types like \u003ccode\u003eAesManaged\u003c/code\u003e as no longer recommended for use.\u003c/p\u003e\n\u003cp\u003eExample with an asymmetric cipher, RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    RSACryptoServiceProvider RsaCsp \u003d new RSACryptoServiceProvider();\n    byte[] encryptedData            \u003d RsaCsp.Encrypt(dataToEncrypt, false); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor the AES symmetric cipher, use the GCM mode:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    AesGcm aes \u003d AesGcm(key);\n}\n\u003c/pre\u003e\n\u003cp\u003eFor the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    RSACryptoServiceProvider RsaCsp \u003d new RSACryptoServiceProvider();\n    byte[] encryptedData            \u003d RsaCsp.Encrypt(dataToEncrypt, true);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    AesManaged aes \u003d new AesManaged\n    {\n        keysize \u003d 128,\n        blocksize \u003d 128,\n        mode \u003d ciphermode.ecb,        // Noncompliant\n        padding \u003d paddingmode.pkcs7\n    };\n}\n\u003c/pre\u003e\n\u003cp\u003eNote that Microsoft has marked derived cryptographic types like \u003ccode\u003eAesManaged\u003c/code\u003e as no longer recommended for use.\u003c/p\u003e\n\u003cp\u003eExample with an asymmetric cipher, RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    RSACryptoServiceProvider RsaCsp \u003d new RSACryptoServiceProvider();\n    byte[] encryptedData            \u003d RsaCsp.Encrypt(dataToEncrypt, false); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor the AES symmetric cipher, use the GCM mode:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    AesGcm aes \u003d AesGcm(key);\n}\n\u003c/pre\u003e\n\u003cp\u003eFor the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    RSACryptoServiceProvider RsaCsp \u003d new RSACryptoServiceProvider();\n    byte[] encryptedData            \u003d RsaCsp.Encrypt(dataToEncrypt, true);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1067",
    "name": "Expressions should not be too complex",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif ((MyFirstCondition() || MySecondCondition()) \u0026amp;\u0026amp; MyLastCondition()) { ... }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif ((MyFirstCondition() || MySecondCondition()) \u0026amp;\u0026amp; MyLastCondition()) { ... }\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of allowed conditional operators in an expression",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "3"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4211",
    "name": "Members should not have conflicting transparency annotations",
    "defaultSeverity": "MAJOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "description": "\u003cp\u003eTransparency attributes in the .NET Framework, designed to protect security-critical operations, can lead to ambiguities and vulnerabilities when\ndeclared at different levels such as both for the class and a method.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTransparency attributes can be declared at several levels. If two different attributes are declared at two different levels, the attribute that\nprevails is the one in the highest level. For example, you can declare that a class is \u003ccode\u003eSecuritySafeCritical\u003c/code\u003e and that a method of this\nclass is \u003ccode\u003eSecurityCritical\u003c/code\u003e. In this case, the method will be \u003ccode\u003eSecuritySafeCritical\u003c/code\u003e and the \u003ccode\u003eSecurityCritical\u003c/code\u003e\nattribute attached to it is ignored.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eElevation of Privileges\u003c/h4\u003e\n\u003cp\u003eAn attacker could potentially exploit conflicting transparency attributes to perform actions with higher privileges than intended.\u003c/p\u003e\n\u003ch4\u003eData Exposure\u003c/h4\u003e\n\u003cp\u003eIf a member with conflicting attributes is involved in handling sensitive data, an attacker could exploit the vulnerability to gain unauthorized\naccess to this data. This could lead to breaches of confidentiality and potential data loss.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security;\n\nnamespace MyLibrary\n{\n    [SecuritySafeCritical]\n    public class Foo\n    {\n        [SecurityCritical] // Noncompliant\n        public void Bar()\n        {\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [SecurityCritical]\n        public void Bar()\n        {\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eNever set class-level annotations\u003c/h4\u003e\n\u003cp\u003eA class should never have class-level annotations if some functions have different permission levels. Instead, make sure every function has its own\ncorrect annotation.\u003c/p\u003e\n\u003cp\u003eIf no function needs a particularly distinct security annotation in a class, just set a class-level \u003ccode\u003e[SecurityCritical]\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Redgate Hub - \u003ca\n  href\u003d\"https://www.red-gate.com/simple-talk/development/dotnet-development/whats-new-in-code-access-security-in-net-framework-4-0-part-i/\"\u003eWhat’s New\n  in Code Access Security in .NET Framework 4.0 – Part I\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eTransparency attributes in the .NET Framework, designed to protect security-critical operations, can lead to ambiguities and vulnerabilities when\ndeclared at different levels such as both for the class and a method.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTransparency attributes can be declared at several levels. If two different attributes are declared at two different levels, the attribute that\nprevails is the one in the highest level. For example, you can declare that a class is \u003ccode\u003eSecuritySafeCritical\u003c/code\u003e and that a method of this\nclass is \u003ccode\u003eSecurityCritical\u003c/code\u003e. In this case, the method will be \u003ccode\u003eSecuritySafeCritical\u003c/code\u003e and the \u003ccode\u003eSecurityCritical\u003c/code\u003e\nattribute attached to it is ignored.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eElevation of Privileges\u003c/h4\u003e\n\u003cp\u003eAn attacker could potentially exploit conflicting transparency attributes to perform actions with higher privileges than intended.\u003c/p\u003e\n\u003ch4\u003eData Exposure\u003c/h4\u003e\n\u003cp\u003eIf a member with conflicting attributes is involved in handling sensitive data, an attacker could exploit the vulnerability to gain unauthorized\naccess to this data. This could lead to breaches of confidentiality and potential data loss.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\nusing System.Security;\n\nnamespace MyLibrary\n{\n    [SecuritySafeCritical]\n    public class Foo\n    {\n        [SecurityCritical] // Noncompliant\n        public void Bar()\n        {\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\nusing System.Security;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [SecurityCritical]\n        public void Bar()\n        {\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eNever set class-level annotations\u003c/h4\u003e\n\u003cp\u003eA class should never have class-level annotations if some functions have different permission levels. Instead, make sure every function has its own\ncorrect annotation.\u003c/p\u003e\n\u003cp\u003eIf no function needs a particularly distinct security annotation in a class, just set a class-level \u003ccode\u003e[SecurityCritical]\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Redgate Hub - \u003ca\n  href\u003d\"https://www.red-gate.com/simple-talk/development/dotnet-development/whats-new-in-code-access-security-in-net-framework-4-0-part-i/\"\u003eWhat’s New\n  in Code Access Security in .NET Framework 4.0 – Part I\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3247",
    "name": "Duplicate casts should not be made",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause the \u003ccode\u003eis\u003c/code\u003e operator performs a cast if the object is not null, using \u003ccode\u003eis\u003c/code\u003e to check type and then casting the same\nargument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using \u003ccode\u003eas\u003c/code\u003e,\nfollowed by a null-check.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x is Fruit)  // Noncompliant\n{\n  var f \u003d (Fruit)x; // or x as Fruit\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// C# 6\nvar f \u003d x as Fruit;\nif (f !\u003d null)\n{\n  // ...\n}\n// C# 7\nif (x is Fruit fruit)\n{\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause the \u003ccode\u003eis\u003c/code\u003e operator performs a cast if the object is not null, using \u003ccode\u003eis\u003c/code\u003e to check type and then casting the same\nargument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using \u003ccode\u003eas\u003c/code\u003e,\nfollowed by a null-check.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x is Fruit)  // Noncompliant\n{\n  var f \u003d (Fruit)x; // or x as Fruit\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// C# 6\nvar f \u003d x as Fruit;\nif (f !\u003d null)\n{\n  // ...\n}\n// C# 7\nif (x is Fruit fruit)\n{\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5547",
    "name": "Cipher algorithms should be robust",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var simpleDES \u003d new DESCryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    using (Aes aes \u003d Aes.Create())\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    var simpleDES \u003d new DESCryptoServiceProvider(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Security.Cryptography;\n\npublic void encrypt()\n{\n    using (Aes aes \u003d Aes.Create())\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Parameters;\n\npublic void encrypt()\n{\n    AesFastEngine aesFast \u003d new AesFastEngine(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Parameters;\n\npublic void encrypt()\n{\n    var AES \u003d new AESEngine();\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e",
        "context": {
          "key": "bouncycastle",
          "displayName": "BouncyCastle"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3005",
    "name": "\"ThreadStatic\" should not be used on non-static fields",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you annotate a field with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threadstaticattribute\"\u003e\u003ccode\u003eThreadStatic\u003c/code\u003e\nattribute\u003c/a\u003e, it is an indication that the value of this field is unique for each thread. But if you don’t mark the field as \u003ccode\u003estatic\u003c/code\u003e,\nthen the \u003ccode\u003eThreadStatic\u003c/code\u003e attribute is ignored.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eThreadStatic\u003c/code\u003e attribute should either be removed or replaced with the use of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadlocal-1\"\u003e\u003ccode\u003eThreadLocal\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/a\u003e class, which gives a similar\nbehavior for non-static fields.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  [ThreadStatic]  // Noncompliant\n  private int count \u003d 0;\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  private int count \u003d 0;\n\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  private readonly ThreadLocal\u0026lt;int\u0026gt; count \u003d new ThreadLocal\u0026lt;int\u0026gt;();\n  public int Count\n  {\n    get { return count.Value; }\n    set { count.Value \u003d value; }\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threadstaticattribute\"\u003eThreadStaticAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadlocal-1\"\u003eThreadLocal\u0026lt;T\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you annotate a field with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threadstaticattribute\"\u003e\u003ccode\u003eThreadStatic\u003c/code\u003e\nattribute\u003c/a\u003e, it is an indication that the value of this field is unique for each thread. But if you don’t mark the field as \u003ccode\u003estatic\u003c/code\u003e,\nthen the \u003ccode\u003eThreadStatic\u003c/code\u003e attribute is ignored.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eThreadStatic\u003c/code\u003e attribute should either be removed or replaced with the use of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadlocal-1\"\u003e\u003ccode\u003eThreadLocal\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/a\u003e class, which gives a similar\nbehavior for non-static fields.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  [ThreadStatic]  // Noncompliant\n  private int count \u003d 0;\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  private int count \u003d 0;\n\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  private readonly ThreadLocal\u0026lt;int\u0026gt; count \u003d new ThreadLocal\u0026lt;int\u0026gt;();\n  public int Count\n  {\n    get { return count.Value; }\n    set { count.Value \u003d value; }\n  }\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threadstaticattribute\"\u003eThreadStaticAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.threadlocal-1\"\u003eThreadLocal\u0026lt;T\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3246",
    "name": "Generic type parameters should be co/contravariant when possible",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the \u003ccode\u003eout\u003c/code\u003e and\n\u003ccode\u003ein\u003c/code\u003e modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eout\u003c/code\u003e keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the\nparameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most\nnotable example of this is \u003ccode\u003eIEnumerable\u0026lt;out T\u0026gt;\u003c/code\u003e, which allows the assignment of an \u003ccode\u003eIEnumerable\u0026lt;string\u0026gt;\u003c/code\u003e instance to\nan \u003ccode\u003eIEnumerable\u0026lt;object\u0026gt;\u003c/code\u003e variable, for instance.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.\nDoing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with\na sub-type. I.e. this is the inversion of covariance. The most notable example of this is the \u003ccode\u003eAction\u0026lt;in T\u0026gt;\u003c/code\u003e delegate, which allows\nthe assignment of an \u003ccode\u003eAction\u0026lt;object\u0026gt;\u003c/code\u003e instance to a \u003ccode\u003eAction\u0026lt;string\u0026gt;\u003c/code\u003e variable, for instance.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninterface IConsumer\u0026lt;T\u0026gt;  // Noncompliant\n{\n    bool Eat(T fruit);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ninterface IConsumer\u0026lt;in T\u0026gt;\n{\n    bool Eat(T fruit);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the \u003ccode\u003eout\u003c/code\u003e and\n\u003ccode\u003ein\u003c/code\u003e modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eout\u003c/code\u003e keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the\nparameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most\nnotable example of this is \u003ccode\u003eIEnumerable\u0026lt;out T\u0026gt;\u003c/code\u003e, which allows the assignment of an \u003ccode\u003eIEnumerable\u0026lt;string\u0026gt;\u003c/code\u003e instance to\nan \u003ccode\u003eIEnumerable\u0026lt;object\u0026gt;\u003c/code\u003e variable, for instance.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.\nDoing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with\na sub-type. I.e. this is the inversion of covariance. The most notable example of this is the \u003ccode\u003eAction\u0026lt;in T\u0026gt;\u003c/code\u003e delegate, which allows\nthe assignment of an \u003ccode\u003eAction\u0026lt;object\u0026gt;\u003c/code\u003e instance to a \u003ccode\u003eAction\u0026lt;string\u0026gt;\u003c/code\u003e variable, for instance.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ninterface IConsumer\u0026lt;T\u0026gt;  // Noncompliant\n{\n    bool Eat(T fruit);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ninterface IConsumer\u0026lt;in T\u0026gt;\n{\n    bool Eat(T fruit);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6513",
    "name": "\"ExcludeFromCodeCoverage\" attributes should include a justification",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eExcludeFromCodeCoverageAttribute\u003c/a\u003e is\nused to exclude portions of code from \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003ecode coverage\nreporting\u003c/a\u003e. It is a bad practice to retain code that is not covered by unit tests. In .Net 5, the \u003ccode\u003eJustification\u003c/code\u003e property was added to\nthe \u003ccode\u003eExcludeFromCodeCoverageAttribute\u003c/code\u003e as an opportunity to document the rationale for the exclusion. This rule raises an issue when no\nsuch justification is given.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic struct Coordinates\n{\n    public int X { get; }\n    public int Y { get; }\n\n    [ExcludeFromCodeCoverage] // Noncompliant\n    public override bool Equals(object obj) \u003d\u0026gt; obj is Coordinates coordinates \u0026amp;\u0026amp; X \u003d\u003d coordinates.X \u0026amp;\u0026amp; Y \u003d\u003d coordinates.Y;\n\n    [ExcludeFromCodeCoverage] // Noncompliant\n    public override int GetHashCode()\n    {\n        var hashCode \u003d 1861411795;\n        hashCode \u003d hashCode * -1521134295 + X.GetHashCode();\n        hashCode \u003d hashCode * -1521134295 + Y.GetHashCode();\n        return hashCode;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic struct Coordinates\n{\n    public int X { get; }\n    public int Y { get; }\n\n    [ExcludeFromCodeCoverage(Justification \u003d \"Code generated by Visual Studio refactoring\")] // Compliant\n    public override bool Equals(object obj) \u003d\u0026gt; obj is Coordinates coordinates \u0026amp;\u0026amp; X \u003d\u003d coordinates.X \u0026amp;\u0026amp; Y \u003d\u003d coordinates.Y;\n\n    [ExcludeFromCodeCoverage(Justification \u003d \"Code generated by Visual Studio refactoring\")] // Compliant\n    public override int GetHashCode()\n    {\n        var hashCode \u003d 1861411795;\n        hashCode \u003d hashCode * -1521134295 + X.GetHashCode();\n        hashCode \u003d hashCode * -1521134295 + Y.GetHashCode();\n        return hashCode;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eAPI browser\u003c/a\u003e -\n  ExcludeFromCodeCoverageAttribute \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003eDevOps and testing\u003c/a\u003e - Code coverage reporting \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eExcludeFromCodeCoverageAttribute\u003c/a\u003e is\nused to exclude portions of code from \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003ecode coverage\nreporting\u003c/a\u003e. It is a bad practice to retain code that is not covered by unit tests. In .Net 5, the \u003ccode\u003eJustification\u003c/code\u003e property was added to\nthe \u003ccode\u003eExcludeFromCodeCoverageAttribute\u003c/code\u003e as an opportunity to document the rationale for the exclusion. This rule raises an issue when no\nsuch justification is given.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic struct Coordinates\n{\n    public int X { get; }\n    public int Y { get; }\n\n    [ExcludeFromCodeCoverage] // Noncompliant\n    public override bool Equals(object obj) \u003d\u0026gt; obj is Coordinates coordinates \u0026amp;\u0026amp; X \u003d\u003d coordinates.X \u0026amp;\u0026amp; Y \u003d\u003d coordinates.Y;\n\n    [ExcludeFromCodeCoverage] // Noncompliant\n    public override int GetHashCode()\n    {\n        var hashCode \u003d 1861411795;\n        hashCode \u003d hashCode * -1521134295 + X.GetHashCode();\n        hashCode \u003d hashCode * -1521134295 + Y.GetHashCode();\n        return hashCode;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic struct Coordinates\n{\n    public int X { get; }\n    public int Y { get; }\n\n    [ExcludeFromCodeCoverage(Justification \u003d \"Code generated by Visual Studio refactoring\")] // Compliant\n    public override bool Equals(object obj) \u003d\u0026gt; obj is Coordinates coordinates \u0026amp;\u0026amp; X \u003d\u003d coordinates.X \u0026amp;\u0026amp; Y \u003d\u003d coordinates.Y;\n\n    [ExcludeFromCodeCoverage(Justification \u003d \"Code generated by Visual Studio refactoring\")] // Compliant\n    public override int GetHashCode()\n    {\n        var hashCode \u003d 1861411795;\n        hashCode \u003d hashCode * -1521134295 + X.GetHashCode();\n        hashCode \u003d hashCode * -1521134295 + Y.GetHashCode();\n        return hashCode;\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eAPI browser\u003c/a\u003e -\n  ExcludeFromCodeCoverageAttribute \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003eDevOps and testing\u003c/a\u003e - Code coverage reporting \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3249",
    "name": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMaking a \u003ccode\u003ebase\u003c/code\u003e call when overriding a method is generally a good idea, but not in the case of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003e\u003ccode\u003eGetHashCode\u003c/code\u003e\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eEquals\u003c/code\u003e\u003c/a\u003e for classes that directly extend \u003ccode\u003eObject\u003c/code\u003e.\nThese methods are based on the object’s reference, meaning that no two objects that use those \u003ccode\u003ebase\u003c/code\u003e methods can be equal or have the same\nhash.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report on guard conditions checking for reference equality. For example:\u003c/p\u003e\n\u003cpre\u003e\npublic override bool Equals(object obj)\n{\n  if (base.Equals(obj)) // Compliant, it\u0027s a guard condition.\n  {\n    return true;\n  }\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar m1 \u003d new MyClass(2);\nvar m2 \u003d new MyClass(2);\n\nm1.Equals(m2) // False\nm1.GetHashCode(); // 43942919\nm2.GetHashCode(); // 59941935\n\nclass MyClass\n{\n    private readonly int x;\n    public MyClass(int x) \u003d\u0026gt;\n        this.x \u003d x;\n\n    public override bool Equals(Object obj) \u003d\u0026gt;\n        base.Equals();\n\n    public override int GetHashCode() \u003d\u0026gt;\n        x.GetHashCode() ^ base.GetHashCode(); // Noncompliant, base.GetHashCode returns a code based on the objects reference\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar m1 \u003d new MyClass(2);\nvar m2 \u003d new MyClass(2);\n\nm1.Equals(m2) // True\nm1.GetHashCode(); // 2\nm2.GetHashCode(); // 2\n\nclass MyClass\n{\n    private readonly int x;\n    public MyClass(int x) \u003d\u0026gt;\n        this.x \u003d x;\n\n    public override bool Equals(Object obj) \u003d\u0026gt;\n        this.x \u003d\u003d ((MyClass)obj).x;\n\n    public override int GetHashCode() \u003d\u0026gt;\n        x.GetHashCode()\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode?view\u003dnet-7.0\"\u003eObject.GetHashCode Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMaking a \u003ccode\u003ebase\u003c/code\u003e call when overriding a method is generally a good idea, but not in the case of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode\"\u003e\u003ccode\u003eGetHashCode\u003c/code\u003e\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003e\u003ccode\u003eEquals\u003c/code\u003e\u003c/a\u003e for classes that directly extend \u003ccode\u003eObject\u003c/code\u003e.\nThese methods are based on the object’s reference, meaning that no two objects that use those \u003ccode\u003ebase\u003c/code\u003e methods can be equal or have the same\nhash.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report on guard conditions checking for reference equality. For example:\u003c/p\u003e\n\u003cpre\u003e\npublic override bool Equals(object obj)\n{\n  if (base.Equals(obj)) // Compliant, it\u0027s a guard condition.\n  {\n    return true;\n  }\n  ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar m1 \u003d new MyClass(2);\nvar m2 \u003d new MyClass(2);\n\nm1.Equals(m2) // False\nm1.GetHashCode(); // 43942919\nm2.GetHashCode(); // 59941935\n\nclass MyClass\n{\n    private readonly int x;\n    public MyClass(int x) \u003d\u0026gt;\n        this.x \u003d x;\n\n    public override bool Equals(Object obj) \u003d\u0026gt;\n        base.Equals();\n\n    public override int GetHashCode() \u003d\u0026gt;\n        x.GetHashCode() ^ base.GetHashCode(); // Noncompliant, base.GetHashCode returns a code based on the objects reference\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar m1 \u003d new MyClass(2);\nvar m2 \u003d new MyClass(2);\n\nm1.Equals(m2) // True\nm1.GetHashCode(); // 2\nm2.GetHashCode(); // 2\n\nclass MyClass\n{\n    private readonly int x;\n    public MyClass(int x) \u003d\u0026gt;\n        this.x \u003d x;\n\n    public override bool Equals(Object obj) \u003d\u0026gt;\n        this.x \u003d\u003d ((MyClass)obj).x;\n\n    public override int GetHashCode() \u003d\u0026gt;\n        x.GetHashCode()\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode?view\u003dnet-7.0\"\u003eObject.GetHashCode Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.equals\"\u003eObject.Equals Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4456",
    "name": "Parameter validation in yielding methods should be wrapped",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause of the way \u003ccode\u003eyield\u003c/code\u003e methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown\nduring the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.\u003c/p\u003e\n\u003cp\u003eTherefore it is recommended to split the method into two: an outer method handling the validation (no longer lazy) and an inner (lazy) method to\nhandle the iteration.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method throws any exception derived from \u003ccode\u003eArgumentException\u003c/code\u003e and contains the \u003ccode\u003eyield\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static IEnumerable\u0026lt;TSource\u0026gt; TakeWhile\u0026lt;TSource\u0026gt;(this IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate) // Noncompliant\n{\n    if (source \u003d\u003d null) { throw new ArgumentNullException(nameof(source)); }\n    if (predicate \u003d\u003d null) { throw new ArgumentNullException(nameof(predicate)); }\n\n    foreach (var element in source)\n    {\n        if (!predicate(element)) { break; }\n        yield return element;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static IEnumerable\u0026lt;TSource\u0026gt; TakeWhile\u0026lt;TSource\u0026gt;(this IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate)\n{\n    if (source \u003d\u003d null) { throw new ArgumentNullException(nameof(source)); }\n    if (predicate \u003d\u003d null) { throw new ArgumentNullException(nameof(predicate)); }\n    return TakeWhileIterator\u0026lt;TSource\u0026gt;(source, predicate);\n}\n\nprivate static IEnumerable\u0026lt;TSource\u0026gt; TakeWhileIterator\u0026lt;TSource\u0026gt;(IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate)\n{\n    foreach (TSource element in source)\n    {\n        if (!predicate(element)) break;\n        yield return element;\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause of the way \u003ccode\u003eyield\u003c/code\u003e methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown\nduring the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.\u003c/p\u003e\n\u003cp\u003eTherefore it is recommended to split the method into two: an outer method handling the validation (no longer lazy) and an inner (lazy) method to\nhandle the iteration.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method throws any exception derived from \u003ccode\u003eArgumentException\u003c/code\u003e and contains the \u003ccode\u003eyield\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static IEnumerable\u0026lt;TSource\u0026gt; TakeWhile\u0026lt;TSource\u0026gt;(this IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate) // Noncompliant\n{\n    if (source \u003d\u003d null) { throw new ArgumentNullException(nameof(source)); }\n    if (predicate \u003d\u003d null) { throw new ArgumentNullException(nameof(predicate)); }\n\n    foreach (var element in source)\n    {\n        if (!predicate(element)) { break; }\n        yield return element;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static IEnumerable\u0026lt;TSource\u0026gt; TakeWhile\u0026lt;TSource\u0026gt;(this IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate)\n{\n    if (source \u003d\u003d null) { throw new ArgumentNullException(nameof(source)); }\n    if (predicate \u003d\u003d null) { throw new ArgumentNullException(nameof(predicate)); }\n    return TakeWhileIterator\u0026lt;TSource\u0026gt;(source, predicate);\n}\n\nprivate static IEnumerable\u0026lt;TSource\u0026gt; TakeWhileIterator\u0026lt;TSource\u0026gt;(IEnumerable\u0026lt;TSource\u0026gt; source, Func\u0026lt;TSource, bool\u0026gt; predicate)\n{\n    foreach (TSource element in source)\n    {\n        if (!predicate(element)) break;\n        yield return element;\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "yield"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4214",
    "name": "\"P/Invoke\" methods should not be visible",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:csharpsquid:S4200} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods marked with the \u003ccode\u003eSystem.Runtime.InteropServices.DllImportAttribute\u003c/code\u003e attribute use Platform Invocation Services to access\nunmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method declared with \u003ccode\u003eDllImport\u003c/code\u003e is public or protected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport(\"kernel32.dll\", CharSet \u003d CharSet.Unicode)]\n        public static extern bool RemoveDirectory(string name);  // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport(\"kernel32.dll\", CharSet \u003d CharSet.Unicode)]\n        private static extern bool RemoveDirectory(string name);\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:csharpsquid:S4200} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods marked with the \u003ccode\u003eSystem.Runtime.InteropServices.DllImportAttribute\u003c/code\u003e attribute use Platform Invocation Services to access\nunmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method declared with \u003ccode\u003eDllImport\u003c/code\u003e is public or protected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport(\"kernel32.dll\", CharSet \u003d CharSet.Unicode)]\n        public static extern bool RemoveDirectory(string name);  // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport(\"kernel32.dll\", CharSet \u003d CharSet.Unicode)]\n        private static extern bool RemoveDirectory(string name);\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4457",
    "name": "Parameter validation in \"async\"/\"await\" methods should be wrapped",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause of the way \u003ccode\u003easync/await\u003c/code\u003e methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen\nonly when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.\u003c/p\u003e\n\u003cp\u003eTherefore it is recommended to split the method into two: an outer method handling the parameter checks (without being \u003ccode\u003easync/await\u003c/code\u003e)\nand an inner method to handle the iterator block with the \u003ccode\u003easync/await\u003c/code\u003e pattern.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003easync\u003c/code\u003e method throws any exception derived from \u003ccode\u003eArgumentException\u003c/code\u003e and contains\n\u003ccode\u003eawait\u003c/code\u003e keyword.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static async Task SkipLinesAsync(this TextReader reader, int linesToSkip) // Noncompliant\n{\n    if (reader \u003d\u003d null) { throw new ArgumentNullException(nameof(reader)); }\n    if (linesToSkip \u0026lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }\n\n    for (var i \u003d 0; i \u0026lt; linesToSkip; ++i)\n    {\n        var line \u003d await reader.ReadLineAsync().ConfigureAwait(false);\n        if (line \u003d\u003d null) { break; }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static Task SkipLinesAsync(this TextReader reader, int linesToSkip)\n{\n    if (reader \u003d\u003d null) { throw new ArgumentNullException(nameof(reader)); }\n    if (linesToSkip \u0026lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }\n\n    return reader.SkipLinesInternalAsync(linesToSkip);\n}\n\nprivate static async Task SkipLinesInternalAsync(this TextReader reader, int linesToSkip)\n{\n    for (var i \u003d 0; i \u0026lt; linesToSkip; ++i)\n    {\n        var line \u003d await reader.ReadLineAsync().ConfigureAwait(false);\n        if (line \u003d\u003d null) { break; }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause of the way \u003ccode\u003easync/await\u003c/code\u003e methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen\nonly when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.\u003c/p\u003e\n\u003cp\u003eTherefore it is recommended to split the method into two: an outer method handling the parameter checks (without being \u003ccode\u003easync/await\u003c/code\u003e)\nand an inner method to handle the iterator block with the \u003ccode\u003easync/await\u003c/code\u003e pattern.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003easync\u003c/code\u003e method throws any exception derived from \u003ccode\u003eArgumentException\u003c/code\u003e and contains\n\u003ccode\u003eawait\u003c/code\u003e keyword.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic static async Task SkipLinesAsync(this TextReader reader, int linesToSkip) // Noncompliant\n{\n    if (reader \u003d\u003d null) { throw new ArgumentNullException(nameof(reader)); }\n    if (linesToSkip \u0026lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }\n\n    for (var i \u003d 0; i \u0026lt; linesToSkip; ++i)\n    {\n        var line \u003d await reader.ReadLineAsync().ConfigureAwait(false);\n        if (line \u003d\u003d null) { break; }\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic static Task SkipLinesAsync(this TextReader reader, int linesToSkip)\n{\n    if (reader \u003d\u003d null) { throw new ArgumentNullException(nameof(reader)); }\n    if (linesToSkip \u0026lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }\n\n    return reader.SkipLinesInternalAsync(linesToSkip);\n}\n\nprivate static async Task SkipLinesInternalAsync(this TextReader reader, int linesToSkip)\n{\n    for (var i \u003d 0; i \u0026lt; linesToSkip; ++i)\n    {\n        var line \u003d await reader.ReadLineAsync().ConfigureAwait(false);\n        if (line \u003d\u003d null) { break; }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "async-await"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1172",
    "name": "Unused method parameters should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function’s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function’s behavior will be the same, but the programmer’s intention won’t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eprivate\u003c/code\u003e method or constructor of a class/struct takes a parameter without using it.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise any issue in the following contexts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003ethis\u003c/code\u003e parameter of extension methods. \u003c/li\u003e\n  \u003cli\u003e Methods decorated with attributes. \u003c/li\u003e\n  \u003cli\u003e Empty methods. \u003c/li\u003e\n  \u003cli\u003e Methods which only throw \u003ccode\u003eNotImplementedException\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e The Main method of the application. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003evirtual\u003c/code\u003e, \u003ccode\u003eoverride\u003c/code\u003e methods. \u003c/li\u003e\n  \u003cli\u003e interface implementations. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate void DoSomething(int a, int b) // Noncompliant, \"b\" is unused\n{\n    Compute(a);\n}\n\nprivate void DoSomething2(int a) // Noncompliant, the value of \"a\" is unused\n{\n    a \u003d 10;\n    Compute(a);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate void DoSomething(int a)\n{\n    Compute(a);\n}\n\nprivate void DoSomething2()\n{\n    var a \u003d 10;\n    Compute(a);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function’s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function’s behavior will be the same, but the programmer’s intention won’t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eprivate\u003c/code\u003e method or constructor of a class/struct takes a parameter without using it.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise any issue in the following contexts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003ethis\u003c/code\u003e parameter of extension methods. \u003c/li\u003e\n  \u003cli\u003e Methods decorated with attributes. \u003c/li\u003e\n  \u003cli\u003e Empty methods. \u003c/li\u003e\n  \u003cli\u003e Methods which only throw \u003ccode\u003eNotImplementedException\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e The Main method of the application. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003evirtual\u003c/code\u003e, \u003ccode\u003eoverride\u003c/code\u003e methods. \u003c/li\u003e\n  \u003cli\u003e interface implementations. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate void DoSomething(int a, int b) // Noncompliant, \"b\" is unused\n{\n    Compute(a);\n}\n\nprivate void DoSomething2(int a) // Noncompliant, the value of \"a\" is unused\n{\n    a \u003d 10;\n    Compute(a);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate void DoSomething(int a)\n{\n    Compute(a);\n}\n\nprivate void DoSomething2()\n{\n    var a \u003d 10;\n    Compute(a);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5659",
    "name": "JWT should be signed and verified with strong cipher algorithms",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Jwt.Net\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains an example of JWT decoding without verification of the signature.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing JWT;\n\npublic static void decode(IJwtDecoder decoder)\n{\n    decoder.Decode(token, secret, verify: false); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing JWT;\n\npublic static void decode()\n{\n    var jwt \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .Decode(token); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing JWT;\n\npublic static void decode(IJwtDecoder decoder)\n{\n    decoder.Decode(token, secret, verify: true);\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eJwtBuilder\u003c/code\u003e, make sure to call \u003ccode\u003eMustVerifySignature()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing JWT;\n\npublic static void decode()\n{\n    var jwt \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .MustVerifySignature()\n        .Decode(token);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eCWE-347 - Improper Verification of Cryptographic Signature\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains an example of JWT decoding without verification of the signature.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing JWT;\n\npublic static void decode(IJwtDecoder decoder)\n{\n    decoder.Decode(token, secret, verify: false); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nusing JWT;\n\npublic static void decode()\n{\n    var jwt \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .Decode(token); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing JWT;\n\npublic static void decode(IJwtDecoder decoder)\n{\n    decoder.Decode(token, secret, verify: true);\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eJwtBuilder\u003c/code\u003e, make sure to call \u003ccode\u003eMustVerifySignature()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nusing JWT;\n\npublic static void decode()\n{\n    var jwt \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .MustVerifySignature()\n        .Decode(token);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e",
        "context": {
          "key": "jwt_net",
          "displayName": "Jwt.Net"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eCWE-347 - Improper Verification of Cryptographic Signature\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6507",
    "name": "Blocks should not be synchronized on local variables",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLocking on a local variable can undermine synchronization because two different threads running the same method in parallel will potentially lock\non different instances of the same object, allowing them to access the synchronized block at the same time.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate void DoSomething()\n{\n  object local \u003d new object();\n  // Code potentially modifying the local variable ...\n\n  lock (local) // Noncompliant\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nprivate readonly object lockObj \u003d new object();\n\nprivate void DoSomething()\n{\n  lock (lockObj)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLock Statement\u003c/a\u003e - lock statement - ensure\n  exclusive access to a shared resource \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/412\"\u003eCWE-412 - Unrestricted Externally Accessible Lock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/413\"\u003eCWE-413 - Improper Resource Locking\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLocking on a local variable can undermine synchronization because two different threads running the same method in parallel will potentially lock\non different instances of the same object, allowing them to access the synchronized block at the same time.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate void DoSomething()\n{\n  object local \u003d new object();\n  // Code potentially modifying the local variable ...\n\n  lock (local) // Noncompliant\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nprivate readonly object lockObj \u003d new object();\n\nprivate void DoSomething()\n{\n  lock (lockObj)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLock Statement\u003c/a\u003e - lock statement - ensure\n  exclusive access to a shared resource \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/412\"\u003eCWE-412 - Unrestricted Externally Accessible Lock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/413\"\u003eCWE-413 - Improper Resource Locking\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4201",
    "name": "Null checks should not be used with \"is\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003eis\u003c/code\u003e test. \u003ccode\u003enull\u003c/code\u003e is not an instance of anything, so a null check is\nredundant.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x !\u003d null \u0026amp;\u0026amp; x is MyClass) { ... }  // Noncompliant\n\nif (x \u003d\u003d null || !(x is MyClass)) { ... } // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x is MyClass) { ... }\n\nif (!(x is MyClass)) { ... }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003eis\u003c/code\u003e test. \u003ccode\u003enull\u003c/code\u003e is not an instance of anything, so a null check is\nredundant.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x !\u003d null \u0026amp;\u0026amp; x is MyClass) { ... }  // Noncompliant\n\nif (x \u003d\u003d null || !(x is MyClass)) { ... } // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x is MyClass) { ... }\n\nif (!(x is MyClass)) { ... }\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3353",
    "name": "Unchanged variables should be marked as \"const\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf a variable that is not supposed to change is not marked as \u003ccode\u003econst\u003c/code\u003e, it could be accidentally reassigned elsewhere in the code,\nleading to unexpected behavior and bugs that can be hard to track down.\u003c/p\u003e\n\u003cp\u003eBy declaring a variable as \u003ccode\u003econst\u003c/code\u003e, you ensure that its value remains constant throughout the code. It also signals to other developers\nthat this value is intended to remain constant. This can make the code easier to understand and maintain.\u003c/p\u003e\n\u003cp\u003eIn some cases, using \u003ccode\u003econst\u003c/code\u003e can lead to performance improvements. The compiler might be able to make optimizations knowing that the\nvalue of a \u003ccode\u003econst\u003c/code\u003e variable will not change.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMark the given variable with the \u003ccode\u003econst\u003c/code\u003e modifier.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool Seek(int[] input)\n{\n  var target \u003d 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i \u003d\u003d target)\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic bool Seek(int[] input)\n{\n  const int target \u003d 32;\n  foreach (int i in input)\n  {\n    if (i \u003d\u003d target)\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Sample\n{\n  public void Method()\n  {\n    var context \u003d $\"{nameof(Sample)}.{nameof(Method)}\";  // Noncompliant (C# 10 and above only)\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class Sample\n{\n  public void Method()\n  {\n    const string context \u003d $\"{nameof(Sample)}.{nameof(Method)}\";\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf a variable that is not supposed to change is not marked as \u003ccode\u003econst\u003c/code\u003e, it could be accidentally reassigned elsewhere in the code,\nleading to unexpected behavior and bugs that can be hard to track down.\u003c/p\u003e\n\u003cp\u003eBy declaring a variable as \u003ccode\u003econst\u003c/code\u003e, you ensure that its value remains constant throughout the code. It also signals to other developers\nthat this value is intended to remain constant. This can make the code easier to understand and maintain.\u003c/p\u003e\n\u003cp\u003eIn some cases, using \u003ccode\u003econst\u003c/code\u003e can lead to performance improvements. The compiler might be able to make optimizations knowing that the\nvalue of a \u003ccode\u003econst\u003c/code\u003e variable will not change.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMark the given variable with the \u003ccode\u003econst\u003c/code\u003e modifier.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic bool Seek(int[] input)\n{\n  var target \u003d 32;  // Noncompliant\n  foreach (int i in input)\n  {\n    if (i \u003d\u003d target)\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic bool Seek(int[] input)\n{\n  const int target \u003d 32;\n  foreach (int i in input)\n  {\n    if (i \u003d\u003d target)\n    {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Sample\n{\n  public void Method()\n  {\n    var context \u003d $\"{nameof(Sample)}.{nameof(Method)}\";  // Noncompliant (C# 10 and above only)\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class Sample\n{\n  public void Method()\n  {\n    const string context \u003d $\"{nameof(Sample)}.{nameof(Method)}\";\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2387",
    "name": "Child class fields should not shadow parent class fields",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripe; // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripened;\n  private static Color FLESH_COLOR;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private Season ripe;  // Compliant as parent field \u0027ripe\u0027 is anyway not visible from Raspberry\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripe; // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripened;\n  private static Color FLESH_COLOR;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit\n{\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private Season ripe;  // Compliant as parent field \u0027ripe\u0027 is anyway not visible from Raspberry\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3234",
    "name": "\"GC.SuppressFinalize\" should not be invoked for types without destructors",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the\ndispose pattern where object finalization is already handled in \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e. However, it has no effect if there is no finalizer\ndefined in the object’s type, so using it in such cases is just confusing.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e is called for objects of \u003ccode\u003esealed\u003c/code\u003e types without a finalizer.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e {rule:csharpsquid:S3971} is a stricter version of this rule. Typically it makes sense to activate only one of these 2\nrules.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n    GC.SuppressFinalize(this); //Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the\ndispose pattern where object finalization is already handled in \u003ccode\u003eIDisposable.Dispose\u003c/code\u003e. However, it has no effect if there is no finalizer\ndefined in the object’s type, so using it in such cases is just confusing.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eGC.SuppressFinalize\u003c/code\u003e is called for objects of \u003ccode\u003esealed\u003c/code\u003e types without a finalizer.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e {rule:csharpsquid:S3971} is a stricter version of this rule. Typically it makes sense to activate only one of these 2\nrules.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n    GC.SuppressFinalize(this); //Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3597",
    "name": "\"ServiceContract\" and \"OperationContract\" attributes should be used together",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eServiceContract\u003c/code\u003e attribute specifies that a class or interface defines the communication contract of a Windows Communication\nFoundation (WCF) service. The service operations of this class or interface are defined by \u003ccode\u003eOperationContract\u003c/code\u003e attributes added to methods.\nIt doesn’t make sense to define a contract without any service operations; thus, in a \u003ccode\u003eServiceContract\u003c/code\u003e class or interface at least one\nmethod should be annotated with \u003ccode\u003eOperationContract\u003c/code\u003e. Similarly, WCF only serves \u003ccode\u003eOperationContract\u003c/code\u003e methods that are defined\ninside \u003ccode\u003eServiceContract\u003c/code\u003e classes or interfaces; thus, this rule also checks that \u003ccode\u003eServiceContract\u003c/code\u003e is added to the containing\ntype of \u003ccode\u003eOperationContract\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[ServiceContract]\ninterface IMyService // Noncompliant\n{\n  int MyServiceMethod();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract]\n  int MyServiceMethod();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eServiceContract\u003c/code\u003e attribute specifies that a class or interface defines the communication contract of a Windows Communication\nFoundation (WCF) service. The service operations of this class or interface are defined by \u003ccode\u003eOperationContract\u003c/code\u003e attributes added to methods.\nIt doesn’t make sense to define a contract without any service operations; thus, in a \u003ccode\u003eServiceContract\u003c/code\u003e class or interface at least one\nmethod should be annotated with \u003ccode\u003eOperationContract\u003c/code\u003e. Similarly, WCF only serves \u003ccode\u003eOperationContract\u003c/code\u003e methods that are defined\ninside \u003ccode\u003eServiceContract\u003c/code\u003e classes or interfaces; thus, this rule also checks that \u003ccode\u003eServiceContract\u003c/code\u003e is added to the containing\ntype of \u003ccode\u003eOperationContract\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[ServiceContract]\ninterface IMyService // Noncompliant\n{\n  int MyServiceMethod();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract]\n  int MyServiceMethod();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2386",
    "name": "Mutable fields should not be \"public static\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epublic static\u003c/code\u003e mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by\nreducing the accessibility of the field or by changing the return type to an immutable type.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues for \u003ccode\u003epublic static\u003c/code\u003e fields with a type inheriting/implementing \u003ccode\u003eSystem.Array\u003c/code\u003e or\n\u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;T\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class A\n{\n  public static string[] strings1 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static List\u0026lt;String\u0026gt; strings3 \u003d new List\u0026lt;String\u0026gt;();  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class A\n{\n  protected static string[] strings1 \u003d {\"first\",\"second\"};\n  protected static List\u0026lt;String\u0026gt; strings3 \u003d new List\u0026lt;String\u0026gt;();\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the type of the field inherits/implements one (at least) of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyDictionary\u0026lt;TKey, TValue\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableArray\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableDictionary\u0026lt;TKey, TValue\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableList\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableStack\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableQueue\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e If the field is \u003ccode\u003ereadonly\u003c/code\u003e and is initialized inline with an immutable type (i.e. inherits/implements one of the types in the\n  previous list) or null. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/582\"\u003eCWE-582 - Array Declared Public, Final, and Static\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/607\"\u003eCWE-607 - Public Static Final Field References Mutable Object\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003epublic static\u003c/code\u003e mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by\nreducing the accessibility of the field or by changing the return type to an immutable type.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues for \u003ccode\u003epublic static\u003c/code\u003e fields with a type inheriting/implementing \u003ccode\u003eSystem.Array\u003c/code\u003e or\n\u003ccode\u003eSystem.Collections.Generic.ICollection\u0026lt;T\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class A\n{\n  public static string[] strings1 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static List\u0026lt;String\u0026gt; strings3 \u003d new List\u0026lt;String\u0026gt;();  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class A\n{\n  protected static string[] strings1 \u003d {\"first\",\"second\"};\n  protected static List\u0026lt;String\u0026gt; strings3 \u003d new List\u0026lt;String\u0026gt;();\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the type of the field inherits/implements one (at least) of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyCollection\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.ObjectModel.ReadOnlyDictionary\u0026lt;TKey, TValue\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableArray\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableDictionary\u0026lt;TKey, TValue\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableList\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableStack\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eSystem.Collections.Immutable.IImmutableQueue\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e If the field is \u003ccode\u003ereadonly\u003c/code\u003e and is initialized inline with an immutable type (i.e. inherits/implements one of the types in the\n  previous list) or null. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/582\"\u003eCWE-582 - Array Declared Public, Final, and Static\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/607\"\u003eCWE-607 - Public Static Final Field References Mutable Object\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4200",
    "name": "Native methods should be wrapped",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNative methods are functions that reside in libraries outside the .NET runtime. Calling them is helpful for interoperability with applications and\nlibraries written in other programming languages, mainly when performing platform-specific operations. However, doing so comes with additional risks\nsince it means stepping out of the memory-safety model of the runtime. It is therefore highly recommended to take extra steps, like input validation,\nwhen invoking native methods. Making the native method \u003ccode\u003eprivate\u003c/code\u003e and providing a wrapper that performs these additional steps is the best\nway to do so.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a native method is declared \u003ccode\u003epublic\u003c/code\u003e or its wrapper is too trivial.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    [DllImport(\"mynativelib\")]\n    extern public static void Bar(string s, int x); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    [DllImport(\"mynativelib\")]\n    extern private static void Bar(string s, int x);\n\n    public void BarWrapper(string s, int x)\n    {\n      if (s !\u003d null \u0026amp;\u0026amp; x \u0026gt;\u003d 0  \u0026amp;\u0026amp; x \u0026lt; s.Length)\n      {\n        Bar(s, x);\n      }\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNative methods are functions that reside in libraries outside the .NET runtime. Calling them is helpful for interoperability with applications and\nlibraries written in other programming languages, mainly when performing platform-specific operations. However, doing so comes with additional risks\nsince it means stepping out of the memory-safety model of the runtime. It is therefore highly recommended to take extra steps, like input validation,\nwhen invoking native methods. Making the native method \u003ccode\u003eprivate\u003c/code\u003e and providing a wrapper that performs these additional steps is the best\nway to do so.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a native method is declared \u003ccode\u003epublic\u003c/code\u003e or its wrapper is too trivial.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    [DllImport(\"mynativelib\")]\n    extern public static void Bar(string s, int x); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    [DllImport(\"mynativelib\")]\n    extern private static void Bar(string s, int x);\n\n    public void BarWrapper(string s, int x)\n    {\n      if (s !\u003d null \u0026amp;\u0026amp; x \u0026gt;\u003d 0  \u0026amp;\u0026amp; x \u0026lt; s.Length)\n      {\n        Bar(s, x);\n      }\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5773",
    "name": "Types allowed to be deserialized should be restricted",
    "defaultSeverity": "MAJOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "description": "\u003cp\u003eDeserialization is the process of converting serialized data (such as objects or data structures) back into their original form. Types allowed to\nbe unserialized should be strictly controlled.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuring the deserialization process, the state of an object will be reconstructed from the serialized data stream. By allowing unrestricted\ndeserialization of types, the application makes it possible for attackers to use types with dangerous or otherwise sensitive behavior during the\ndeserialization process.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen an application deserializes untrusted data without proper restrictions, an attacker can craft malicious serialized objects. Depending on the\naffected objects and properties, the consequences can vary.\u003c/p\u003e\n\u003ch3\u003eRemote Code Execution\u003c/h3\u003e\n\u003cp\u003eIf attackers can craft malicious serialized objects that contain executable code, this code will run within the application’s context, potentially\ngaining full control over the system. This can lead to unauthorized access, data breaches, or even complete system compromise.\u003c/p\u003e\n\u003cp\u003eFor example, a well-known attack vector consists in serializing an object of type \u003ccode\u003e\u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.-ctor?view\u003dnetframework-4.8#System_CodeDom_Compiler_TempFileCollection__ctor\"\u003eTempFileCollection\u003c/a\u003e\u003c/code\u003e\nwith arbitrary files (defined by an attacker) which will be deleted on the application deserializing this object (when the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.finalize?view\u003dnetframework-4.8\"\u003efinalize()\u003c/a\u003e method of\nthe TempFileCollection object is called). These kinds of specially crafted serialized objects are called \"\u003ca\nhref\u003d\"https://github.com/pwntester/ysoserial.net\"\u003egadgets\u003c/a\u003e\".\u003c/p\u003e\n\u003ch3\u003ePrivilege escalation\u003c/h3\u003e\n\u003cp\u003eUnrestricted deserialization can also enable attackers to escalate their privileges within the application. By manipulating the serialized data, an\nattacker can modify object properties or bypass security checks, granting them elevated privileges that they should not have. This can result in\nunauthorized access to sensitive data, unauthorized actions, or even administrative control over the application.\u003c/p\u003e\n\u003ch3\u003eDenial of Service\u003c/h3\u003e\n\u003cp\u003eIn some cases, an attacker can abuse the deserialization process to cause a denial of service (DoS) condition. By providing specially crafted\nserialized data, the attacker can trigger excessive resource consumption, leading to system instability or unresponsiveness. This can disrupt the\navailability of the application, impacting its functionality and causing inconvenience to users.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"101\" data-diff-type\u003d\"noncompliant\"\u003e\nvar myBinaryFormatter \u003d new BinaryFormatter();\nmyBinaryFormatter.Deserialize(stream); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"102\" data-diff-type\u003d\"noncompliant\"\u003e\nJavaScriptSerializer serializer1 \u003d new JavaScriptSerializer(new SimpleTypeResolver()); // Noncompliant\nserializer1.Deserialize\u0026lt;ExpectedType\u0026gt;(json);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"101\" data-diff-type\u003d\"compliant\"\u003e\nsealed class CustomBinder : SerializationBinder\n{\n   public override Type BindToType(string assemblyName, string typeName)\n   {\n       if (!(typeName \u003d\u003d \"type1\" || typeName \u003d\u003d \"type2\" || typeName \u003d\u003d \"type3\"))\n       {\n          throw new SerializationException(\"Only type1, type2 and type3 are allowed\");\n       }\n       return Assembly.Load(assemblyName).GetType(typeName);\n   }\n}\n\nvar myBinaryFormatter \u003d new BinaryFormatter();\nmyBinaryFormatter.Binder \u003d new CustomBinder();\nmyBinaryFormatter.Deserialize(stream);\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"102\" data-diff-type\u003d\"compliant\"\u003e\npublic class CustomSafeTypeResolver : JavaScriptTypeResolver\n{\n   public override Type ResolveType(string id)\n   {\n      if(id !\u003d \"ExpectedType\") {\n         throw new ArgumentNullException(\"Only ExpectedType is allowed during deserialization\");\n      }\n      return Type.GetType(id);\n   }\n}\n\nJavaScriptSerializer serializer \u003d new JavaScriptSerializer(new CustomSafeTypeResolver());\nserializer.Deserialize\u0026lt;ExpectedType\u0026gt;(json);\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eInstead of using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e\nand similar serializers, it is recommended to use safer alternatives in most of the cases, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003e\u003ccode\u003eXmlSerializer\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003e\u003ccode\u003eDataContractSerializer\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf it’s not possible then try to mitigate the risk by restricting the types allowed to be deserialized:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by implementing an \"allow-list\" of types, but keep in mind that novel dangerous types are regularly discovered and this protection could be\n  insufficient over time. \u003c/li\u003e\n  \u003cli\u003e or/and implementing a tamper protection, such as \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003emessage authentication codes\u003c/a\u003e (MAC). This way\n  only objects serialized with the correct MAC hash will be deserialized. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003eBinaryFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003eNetDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003eSoapFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003eJavaScriptSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003eXmlSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003eDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide?s\u003d03\"\u003eDeserialization\n  risks in use of BinaryFormatter and related types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md\"\u003eDeserialization Cheat\n  Sheet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003eMessage Authentication Codes (MAC)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/134\"\u003eCWE-134 - Use of Externally-Controlled Format String\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502\"\u003eCWE-502 - Deserialization of Untrusted Data\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eDeserialization is the process of converting serialized data (such as objects or data structures) back into their original form. Types allowed to\nbe unserialized should be strictly controlled.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuring the deserialization process, the state of an object will be reconstructed from the serialized data stream. By allowing unrestricted\ndeserialization of types, the application makes it possible for attackers to use types with dangerous or otherwise sensitive behavior during the\ndeserialization process.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen an application deserializes untrusted data without proper restrictions, an attacker can craft malicious serialized objects. Depending on the\naffected objects and properties, the consequences can vary.\u003c/p\u003e\n\u003ch3\u003eRemote Code Execution\u003c/h3\u003e\n\u003cp\u003eIf attackers can craft malicious serialized objects that contain executable code, this code will run within the application’s context, potentially\ngaining full control over the system. This can lead to unauthorized access, data breaches, or even complete system compromise.\u003c/p\u003e\n\u003cp\u003eFor example, a well-known attack vector consists in serializing an object of type \u003ccode\u003e\u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.-ctor?view\u003dnetframework-4.8#System_CodeDom_Compiler_TempFileCollection__ctor\"\u003eTempFileCollection\u003c/a\u003e\u003c/code\u003e\nwith arbitrary files (defined by an attacker) which will be deleted on the application deserializing this object (when the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.finalize?view\u003dnetframework-4.8\"\u003efinalize()\u003c/a\u003e method of\nthe TempFileCollection object is called). These kinds of specially crafted serialized objects are called \"\u003ca\nhref\u003d\"https://github.com/pwntester/ysoserial.net\"\u003egadgets\u003c/a\u003e\".\u003c/p\u003e\n\u003ch3\u003ePrivilege escalation\u003c/h3\u003e\n\u003cp\u003eUnrestricted deserialization can also enable attackers to escalate their privileges within the application. By manipulating the serialized data, an\nattacker can modify object properties or bypass security checks, granting them elevated privileges that they should not have. This can result in\nunauthorized access to sensitive data, unauthorized actions, or even administrative control over the application.\u003c/p\u003e\n\u003ch3\u003eDenial of Service\u003c/h3\u003e\n\u003cp\u003eIn some cases, an attacker can abuse the deserialization process to cause a denial of service (DoS) condition. By providing specially crafted\nserialized data, the attacker can trigger excessive resource consumption, leading to system instability or unresponsiveness. This can disrupt the\navailability of the application, impacting its functionality and causing inconvenience to users.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"101\" data-diff-type\u003d\"noncompliant\"\u003e\nvar myBinaryFormatter \u003d new BinaryFormatter();\nmyBinaryFormatter.Deserialize(stream); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"102\" data-diff-type\u003d\"noncompliant\"\u003e\nJavaScriptSerializer serializer1 \u003d new JavaScriptSerializer(new SimpleTypeResolver()); // Noncompliant\nserializer1.Deserialize\u0026lt;ExpectedType\u0026gt;(json);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"101\" data-diff-type\u003d\"compliant\"\u003e\nsealed class CustomBinder : SerializationBinder\n{\n   public override Type BindToType(string assemblyName, string typeName)\n   {\n       if (!(typeName \u003d\u003d \"type1\" || typeName \u003d\u003d \"type2\" || typeName \u003d\u003d \"type3\"))\n       {\n          throw new SerializationException(\"Only type1, type2 and type3 are allowed\");\n       }\n       return Assembly.Load(assemblyName).GetType(typeName);\n   }\n}\n\nvar myBinaryFormatter \u003d new BinaryFormatter();\nmyBinaryFormatter.Binder \u003d new CustomBinder();\nmyBinaryFormatter.Deserialize(stream);\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"102\" data-diff-type\u003d\"compliant\"\u003e\npublic class CustomSafeTypeResolver : JavaScriptTypeResolver\n{\n   public override Type ResolveType(string id)\n   {\n      if(id !\u003d \"ExpectedType\") {\n         throw new ArgumentNullException(\"Only ExpectedType is allowed during deserialization\");\n      }\n      return Type.GetType(id);\n   }\n}\n\nJavaScriptSerializer serializer \u003d new JavaScriptSerializer(new CustomSafeTypeResolver());\nserializer.Deserialize\u0026lt;ExpectedType\u0026gt;(json);\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eInstead of using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e\nand similar serializers, it is recommended to use safer alternatives in most of the cases, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003e\u003ccode\u003eXmlSerializer\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003e\u003ccode\u003eDataContractSerializer\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf it’s not possible then try to mitigate the risk by restricting the types allowed to be deserialized:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by implementing an \"allow-list\" of types, but keep in mind that novel dangerous types are regularly discovered and this protection could be\n  insufficient over time. \u003c/li\u003e\n  \u003cli\u003e or/and implementing a tamper protection, such as \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003emessage authentication codes\u003c/a\u003e (MAC). This way\n  only objects serialized with the correct MAC hash will be deserialized. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003eBinaryFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003eNetDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003eSoapFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003eJavaScriptSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003eXmlSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003eDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide?s\u003d03\"\u003eDeserialization\n  risks in use of BinaryFormatter and related types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md\"\u003eDeserialization Cheat\n  Sheet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003eMessage Authentication Codes (MAC)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/134\"\u003eCWE-134 - Use of Externally-Controlled Format String\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502\"\u003eCWE-502 - Deserialization of Untrusted Data\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3236",
    "name": "Caller information arguments should not be provided explicitly",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCaller information attributes: \u003ccode\u003eCallerFilePathAttribute\u003c/code\u003e, \u003ccode\u003eCallerLineNumberAttribute\u003c/code\u003e, and\n\u003ccode\u003eCallerArgumentExpressionAttribute\u003c/code\u003e provide a way to get information about the caller of a method through optional parameters. But the\narguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values\ndefeats the purpose of the attributes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath \u003d null,\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\", \"A.B.C.Foo.cs\", 42); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eCallerMemberName\u003c/code\u003e is not checked to avoid False-Positives with WPF/UWP applications.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCaller information attributes: \u003ccode\u003eCallerFilePathAttribute\u003c/code\u003e, \u003ccode\u003eCallerLineNumberAttribute\u003c/code\u003e, and\n\u003ccode\u003eCallerArgumentExpressionAttribute\u003c/code\u003e provide a way to get information about the caller of a method through optional parameters. But the\narguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values\ndefeats the purpose of the attributes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath \u003d null,\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\", \"A.B.C.Foo.cs\", 42); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath \u003d \"\",\n  [CallerLineNumber] int lineNumber \u003d 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage(\"my message\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eCallerMemberName\u003c/code\u003e is not checked to avoid False-Positives with WPF/UWP applications.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3235",
    "name": "Redundant parentheses should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRedundant parentheses are simply wasted keystrokes, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[MyAttribute()] //Noncompliant\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass() //Noncompliant\n    {\n      MyProperty \u003d propertyValue\n    };\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[MyAttribute]\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass\n    {\n      MyProperty \u003d propertyValue\n    };\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRedundant parentheses are simply wasted keystrokes, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[MyAttribute()] //Noncompliant\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass() //Noncompliant\n    {\n      MyProperty \u003d propertyValue\n    };\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[MyAttribute]\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass\n    {\n      MyProperty \u003d propertyValue\n    };\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3598",
    "name": "One-way \"OperationContract\" methods should have \"void\" return type",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen declaring a Windows Communication Foundation (WCF) \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eOperationContract\u003c/code\u003e\u003c/a\u003e\nmethod as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.isoneway?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eone-way\u003c/code\u003e\u003c/a\u003e,\nthat service method won’t return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in\nevent-like communication. Therefore, specifying a return type has no effect and can confuse readers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t report if \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.asyncpattern\"\u003e\u003ccode\u003eOperationContractAttribute.AsyncPattern\u003c/code\u003e\u003c/a\u003e\nis set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay \u003d true)]\n  int SomethingHappened(int parameter); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay \u003d true)]\n  void SomethingHappened(int parameter);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute\"\u003eOperationContractAttribute\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen declaring a Windows Communication Foundation (WCF) \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eOperationContract\u003c/code\u003e\u003c/a\u003e\nmethod as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.isoneway?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eone-way\u003c/code\u003e\u003c/a\u003e,\nthat service method won’t return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in\nevent-like communication. Therefore, specifying a return type has no effect and can confuse readers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t report if \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.asyncpattern\"\u003e\u003ccode\u003eOperationContractAttribute.AsyncPattern\u003c/code\u003e\u003c/a\u003e\nis set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay \u003d true)]\n  int SomethingHappened(int parameter); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay \u003d true)]\n  void SomethingHappened(int parameter);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute\"\u003eOperationContractAttribute\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3358",
    "name": "Ternary operators should not be nested",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\npublic string GetReadableStatus(Job j)\n{\n  return j.IsRunning ? \"Running\" : j.HasErrors ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\npublic string GetReadableStatus(Job j)\n{\n  if (j.IsRunning)\n  {\n    return \"Running\";\n  }\n  return j.HasErrors ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\npublic string GetReadableStatus(Job j)\n{\n  return j.IsRunning ? \"Running\" : j.HasErrors ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\npublic string GetReadableStatus(Job j)\n{\n  if (j.IsRunning)\n  {\n    return \"Running\";\n  }\n  return j.HasErrors ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2148",
    "name": "Underscores should be used to make large numbers readable",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBeginning with C# 7, it is possible to add underscores (\u0027_\u0027) to numeric literals to enhance readability. The addition of underscores in this manner\nhas no semantic meaning, but makes it easier for maintainers to understand the code.\u003c/p\u003e\n\u003cp\u003eThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eBase\u003c/th\u003e\n      \u003cth\u003eMinimum digits\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebinary\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ehexadecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003eC# version\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j \u003d 0b01101001010011011110010101011110;  // Noncompliant\nlong l \u003d 0x7fffffffffffffffL;  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 10_000_000;\nint  j \u003d 0b01101001_01001101_11100101_01011110;\nlong l \u003d 0x7fff_ffff_ffff_ffffL;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBeginning with C# 7, it is possible to add underscores (\u0027_\u0027) to numeric literals to enhance readability. The addition of underscores in this manner\nhas no semantic meaning, but makes it easier for maintainers to understand the code.\u003c/p\u003e\n\u003cp\u003eThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eBase\u003c/th\u003e\n      \u003cth\u003eMinimum digits\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebinary\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ehexadecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003eC# version\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j \u003d 0b01101001010011011110010101011110;  // Noncompliant\nlong l \u003d 0x7fffffffffffffffL;  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nint i \u003d 10_000_000;\nint  j \u003d 0b01101001_01001101_11100101_01011110;\nlong l \u003d 0x7fff_ffff_ffff_ffffL;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3237",
    "name": "\"value\" contextual keyword should be used",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you need to get external input for \u003ccode\u003eset\u003c/code\u003e and \u003ccode\u003einit\u003c/code\u003e methods defined for properties and indexers or for\n\u003ccode\u003eremove\u003c/code\u003e and \u003ccode\u003eadd\u003c/code\u003e methods for events, you should always get this input throught the \u003ccode\u003evalue\u003c/code\u003e contextual keyword.\u003c/p\u003e\n\u003cp\u003eThe contextual keyword \u003ccode\u003evalue\u003c/code\u003e is similar to an input parameter of a method; it references the value that the client code is attempting\nto assign to the property, indexer or event.\u003c/p\u003e\n\u003cp\u003eThe keyword \u003ccode\u003evalue\u003c/code\u003e holds the value the accessor was called with. Not using it means that the accessor ignores the caller’s intent which\ncould cause unexpected results at runtime.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count \u003d 42; } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count \u003d value; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the setter is empty and part of the implementation of an \u003ccode\u003einterface\u003c/code\u003e. The assumption is that this\npart of the interface is not meaningful to that particular implementation. A good example of that would be a \"sink\" logger that discards any logs.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value\"\u003eValue keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003eAdd keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003eRemove keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/set\"\u003eSet keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you need to get external input for \u003ccode\u003eset\u003c/code\u003e and \u003ccode\u003einit\u003c/code\u003e methods defined for properties and indexers or for\n\u003ccode\u003eremove\u003c/code\u003e and \u003ccode\u003eadd\u003c/code\u003e methods for events, you should always get this input throught the \u003ccode\u003evalue\u003c/code\u003e contextual keyword.\u003c/p\u003e\n\u003cp\u003eThe contextual keyword \u003ccode\u003evalue\u003c/code\u003e is similar to an input parameter of a method; it references the value that the client code is attempting\nto assign to the property, indexer or event.\u003c/p\u003e\n\u003cp\u003eThe keyword \u003ccode\u003evalue\u003c/code\u003e holds the value the accessor was called with. Not using it means that the accessor ignores the caller’s intent which\ncould cause unexpected results at runtime.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count \u003d 42; } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count \u003d value; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the setter is empty and part of the implementation of an \u003ccode\u003einterface\u003c/code\u003e. The assumption is that this\npart of the interface is not meaningful to that particular implementation. A good example of that would be a \"sink\" logger that discards any logs.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value\"\u003eValue keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/add\"\u003eAdd keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/remove\"\u003eRemove keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/set\"\u003eSet keyword\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1481",
    "name": "Unused local variables should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving unused local variables in your code can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Decreased Readability: Unused variables can make your code more difficult to read. They add extra lines and complexity, which can distract from\n  the main logic of the code. \u003c/li\u003e\n  \u003cli\u003e Misunderstanding: When other developers read your code, they may wonder why a variable is declared but not used. This can lead to confusion and\n  misinterpretation of the code’s intent. \u003c/li\u003e\n  \u003cli\u003e Potential for Bugs: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you declared a variable\n  intending to use it in a calculation, but then forgot to do so, your program might not work as expected. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they might think it is\n  a mistake and try to \u0027fix\u0027 the code, potentially introducing new bugs. \u003c/li\u003e\n  \u003cli\u003e Memory Usage: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases, unused variables\n  take up memory space, leading to inefficient use of resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnused locally created resources in a \u003ccode\u003eusing\u003c/code\u003e statement are not reported.\u003c/p\u003e\n\u003cpre\u003e\nusing(var t \u003d new TestTimer()) // t never used, but compliant.\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int NumberOfMinutes(int hours)\n{\n  int seconds \u003d 0;   // Noncompliant - seconds is unused\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int NumberOfMinutes(int hours)\n{\n  return hours * 60;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving unused local variables in your code can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Decreased Readability: Unused variables can make your code more difficult to read. They add extra lines and complexity, which can distract from\n  the main logic of the code. \u003c/li\u003e\n  \u003cli\u003e Misunderstanding: When other developers read your code, they may wonder why a variable is declared but not used. This can lead to confusion and\n  misinterpretation of the code’s intent. \u003c/li\u003e\n  \u003cli\u003e Potential for Bugs: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you declared a variable\n  intending to use it in a calculation, but then forgot to do so, your program might not work as expected. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they might think it is\n  a mistake and try to \u0027fix\u0027 the code, potentially introducing new bugs. \u003c/li\u003e\n  \u003cli\u003e Memory Usage: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases, unused variables\n  take up memory space, leading to inefficient use of resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnused locally created resources in a \u003ccode\u003eusing\u003c/code\u003e statement are not reported.\u003c/p\u003e\n\u003cpre\u003e\nusing(var t \u003d new TestTimer()) // t never used, but compliant.\n{\n  //...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic int NumberOfMinutes(int hours)\n{\n  int seconds \u003d 0;   // Noncompliant - seconds is unused\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic int NumberOfMinutes(int hours)\n{\n  return hours * 60;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3427",
    "name": "Method overloads with default parameter values should not overlap",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe rules for method resolution can be complex and may not be fully understood by all developers. The situation becomes even more challenging when\ndealing with method overloads that have optional parameter values.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an overload with default parameter values is hidden by another overload that does not have the optional\nparameters.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSee the following example:\u003c/p\u003e\n\u003cpre\u003e\nMyClass.Print(1);  // which overload of Print will be called?\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void Print(int number, string delimiter \u003d \"\\n\") { } // Noncompliant, default parameter value is hidden by overload\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, the \u003ccode\u003ePrint\u003c/code\u003e method is overloaded with two versions, where the first one hides the second one. This can lead to\nconfusion and uncertainty about which overload of the method will be invoked when calling it.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo address the problem you have a couple of options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Adjust the existing overloads to expose the optional parameters consistently across all overloads. By doing so, callers will have explicit\n  control over which overload they want to invoke. \u003c/li\u003e\n  \u003cli\u003e Alternatively, you can differentiate the overloads by giving them distinct names. This approach clarifies the usage and intent of each\n  overload, making it clear to developers which overload to use in different contexts. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nMyClass.Print(1);  // which overload of Print will be called?\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void Print(int number, string delimiter \u003d \"\\n\") { } // Noncompliant: default parameter value is hidden by overload\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nMyClass.PrintWithDelimiter(1);\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void PrintWithDelimiter(int number, string delimiter \u003d \"\\n\") { } // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003eMember overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/05/09/optional-argument-corner-cases-part-one/\"\u003eOptional argument corner cases - Eric Lippert’s blog\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe rules for method resolution can be complex and may not be fully understood by all developers. The situation becomes even more challenging when\ndealing with method overloads that have optional parameter values.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an overload with default parameter values is hidden by another overload that does not have the optional\nparameters.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSee the following example:\u003c/p\u003e\n\u003cpre\u003e\nMyClass.Print(1);  // which overload of Print will be called?\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void Print(int number, string delimiter \u003d \"\\n\") { } // Noncompliant, default parameter value is hidden by overload\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this code snippet, the \u003ccode\u003ePrint\u003c/code\u003e method is overloaded with two versions, where the first one hides the second one. This can lead to\nconfusion and uncertainty about which overload of the method will be invoked when calling it.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo address the problem you have a couple of options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Adjust the existing overloads to expose the optional parameters consistently across all overloads. By doing so, callers will have explicit\n  control over which overload they want to invoke. \u003c/li\u003e\n  \u003cli\u003e Alternatively, you can differentiate the overloads by giving them distinct names. This approach clarifies the usage and intent of each\n  overload, making it clear to developers which overload to use in different contexts. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nMyClass.Print(1);  // which overload of Print will be called?\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void Print(int number, string delimiter \u003d \"\\n\") { } // Noncompliant: default parameter value is hidden by overload\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nMyClass.PrintWithDelimiter(1);\n\npublic static class MyClass\n{\n  public static void Print(int number) { }\n  public static void PrintWithDelimiter(int number, string delimiter \u003d \"\\n\") { } // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003eMember overloading\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/05/09/optional-argument-corner-cases-part-one/\"\u003eOptional argument corner cases - Eric Lippert’s blog\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1006",
    "name": "Method overrides should not change parameter defaults",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eDefault\narguments\u003c/a\u003e are determined by the static type of the object.\u003c/p\u003e\n\u003cpre\u003e\nclass Base\n{\n    public virtual void Run(int distance \u003d 42) { /* ... */ }\n}\n\nclass Derived : Base\n{\n    public override void Run(int distance \u003d 5) { /* ... */ }\n}\n\nBase x \u003d new Base();\nx.Run(); // Here the default value of distance is 42\nDerived d \u003d new Derived();\nd.Run(); // Here the default value of distance is 5\nBase b \u003d new Derived();\nb.Run(); // Here the default value of distance is 42, not 5\n\u003c/pre\u003e\n\u003cp\u003eIf a default argument is different for a parameter in an overriding method, the value used in the call will be different when calls are made via\nthe base or derived object, which may be contrary to developer expectations.\u003c/p\u003e\n\u003cp\u003eDefault parameter values in \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation\"\u003eexplicit interface\nimplementations\u003c/a\u003e will be never used, because the static type of the object will always be the implemented interface. Thus, specifying default\nvalues in this case is confusing.\u003c/p\u003e\n\u003cpre\u003e\ninterface IRunner\n{\n    void Run(int distance \u003d 42) { /* ... */ }\n}\n\nclass Runner : IRunner\n{\n    void IRunner.Run(int distance \u003d 5) { /* ... */ }\n}\n\nIRunner x \u003d new Runner();\nx.Run(); // Here the default value of distance is 42\nRunner d \u003d new Runner();\nd.Run(); // This will not compile as the Run method is only visible through the specified interface\n\u003c/pre\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\npublic class Base\n{\n    public virtual void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Derived : Base\n{\n    public override void Write(int i \u003d 5) // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var derived \u003d new Derived();\n        derived.Write(); // writes 5\n        Print(derived); // writes 42; was that expected?\n    }\n\n    private static void Print(Base item)\n    {\n        item.Write();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\npublic class Base\n{\n    public virtual void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Derived : Base\n{\n    public override void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var derived \u003d new Derived();\n        derived.Write(); // writes 42\n        Print(derived);  // writes 42\n    }\n\n    private static void Print(Base item)\n    {\n        item.Write();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation\"\u003eExplicit Interface\n  Implementation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eDefault\narguments\u003c/a\u003e are determined by the static type of the object.\u003c/p\u003e\n\u003cpre\u003e\nclass Base\n{\n    public virtual void Run(int distance \u003d 42) { /* ... */ }\n}\n\nclass Derived : Base\n{\n    public override void Run(int distance \u003d 5) { /* ... */ }\n}\n\nBase x \u003d new Base();\nx.Run(); // Here the default value of distance is 42\nDerived d \u003d new Derived();\nd.Run(); // Here the default value of distance is 5\nBase b \u003d new Derived();\nb.Run(); // Here the default value of distance is 42, not 5\n\u003c/pre\u003e\n\u003cp\u003eIf a default argument is different for a parameter in an overriding method, the value used in the call will be different when calls are made via\nthe base or derived object, which may be contrary to developer expectations.\u003c/p\u003e\n\u003cp\u003eDefault parameter values in \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation\"\u003eexplicit interface\nimplementations\u003c/a\u003e will be never used, because the static type of the object will always be the implemented interface. Thus, specifying default\nvalues in this case is confusing.\u003c/p\u003e\n\u003cpre\u003e\ninterface IRunner\n{\n    void Run(int distance \u003d 42) { /* ... */ }\n}\n\nclass Runner : IRunner\n{\n    void IRunner.Run(int distance \u003d 5) { /* ... */ }\n}\n\nIRunner x \u003d new Runner();\nx.Run(); // Here the default value of distance is 42\nRunner d \u003d new Runner();\nd.Run(); // This will not compile as the Run method is only visible through the specified interface\n\u003c/pre\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System;\n\npublic class Base\n{\n    public virtual void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Derived : Base\n{\n    public override void Write(int i \u003d 5) // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var derived \u003d new Derived();\n        derived.Write(); // writes 5\n        Print(derived); // writes 42; was that expected?\n    }\n\n    private static void Print(Base item)\n    {\n        item.Write();\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System;\n\npublic class Base\n{\n    public virtual void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Derived : Base\n{\n    public override void Write(int i \u003d 42)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var derived \u003d new Derived();\n        derived.Write(); // writes 42\n        Print(derived);  // writes 42\n    }\n\n    private static void Print(Base item)\n    {\n        item.Write();\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments\"\u003eOptional arguments\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation\"\u003eExplicit Interface\n  Implementation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1128",
    "name": "Unnecessary \"using\" should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnnecessary \u003ccode\u003eusing\u003c/code\u003e directives refer to importing namespaces, types or creating aliases that are not used or referenced anywhere in the\ncode.\u003c/p\u003e\n\u003cp\u003eAlthough they don’t affect the runtime behavior of the application after compilation, removing them will:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Improve the readability and maintainability of the code. \u003c/li\u003e\n  \u003cli\u003e Help avoid potential naming conflicts. \u003c/li\u003e\n  \u003cli\u003e Improve the build time, as the compiler has fewer lines to read and fewer types to resolve. \u003c/li\u003e\n  \u003cli\u003e Reduce the number of items the code editor will show for auto-completion, thereby showing fewer irrelevant suggestions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStarting with C# 10, it’s possible to define \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive#global-modifier\"\u003eglobal usings\u003c/a\u003e for an entire\nproject. They reduce the need for repetitive namespace inclusions, but can also mask which namespaces are truly necessary for the code at hand.\nOver-relying on them can lead to less transparent code dependencies, especially for newcomers to the project.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule will not raise a warning for \u003ccode\u003eglobal using\u003c/code\u003e directives, even if none of the types of that namespace are used in the\nproject:\u003c/p\u003e\n\u003cpre\u003e\nglobal using System.Net.Sockets; // Compliant by exception\n\u003c/pre\u003e\n\u003cp\u003eUnnecessary \u003ccode\u003eusing\u003c/code\u003e directives are ignored in ASP.NET Core projects in the following files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e_Imports.razor\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e_ViewImports.cshtml\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhile it’s not difficult to remove these unneeded lines manually, modern code editors support the removal of every unnecessary \u003ccode\u003eusing\u003c/code\u003e\ndirective with a single click from every file of the project.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;   // Noncompliant - no types are used from this namespace\nusing MyApp.Helpers;                // Noncompliant - FileHelper is in the same namespace\nusing MyCustomNamespace;            // Noncompliant - no types are used from this namespace\n\nnamespace MyApp.Helpers\n{\n    public class FileHelper\n    {\n        public static string ReadFirstLine(string filePath) \u003d\u0026gt;\n            File.ReadAllLines(filePath).First();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\nusing System.Linq;\n\nnamespace MyApp.Helpers\n{\n    public class FileHelper\n    {\n        public static string ReadFirstLine(string filePath) \u003d\u0026gt;\n            File.ReadAllLines(filePath).First();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive\"\u003eMSDN - using directives\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace\"\u003eMSDN - namespaces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S1144} - Unused private types or members should be removed \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S1481} - Unused local variables should be removed \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnnecessary \u003ccode\u003eusing\u003c/code\u003e directives refer to importing namespaces, types or creating aliases that are not used or referenced anywhere in the\ncode.\u003c/p\u003e\n\u003cp\u003eAlthough they don’t affect the runtime behavior of the application after compilation, removing them will:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Improve the readability and maintainability of the code. \u003c/li\u003e\n  \u003cli\u003e Help avoid potential naming conflicts. \u003c/li\u003e\n  \u003cli\u003e Improve the build time, as the compiler has fewer lines to read and fewer types to resolve. \u003c/li\u003e\n  \u003cli\u003e Reduce the number of items the code editor will show for auto-completion, thereby showing fewer irrelevant suggestions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStarting with C# 10, it’s possible to define \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive#global-modifier\"\u003eglobal usings\u003c/a\u003e for an entire\nproject. They reduce the need for repetitive namespace inclusions, but can also mask which namespaces are truly necessary for the code at hand.\nOver-relying on them can lead to less transparent code dependencies, especially for newcomers to the project.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule will not raise a warning for \u003ccode\u003eglobal using\u003c/code\u003e directives, even if none of the types of that namespace are used in the\nproject:\u003c/p\u003e\n\u003cpre\u003e\nglobal using System.Net.Sockets; // Compliant by exception\n\u003c/pre\u003e\n\u003cp\u003eUnnecessary \u003ccode\u003eusing\u003c/code\u003e directives are ignored in ASP.NET Core projects in the following files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e_Imports.razor\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e_ViewImports.cshtml\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhile it’s not difficult to remove these unneeded lines manually, modern code editors support the removal of every unnecessary \u003ccode\u003eusing\u003c/code\u003e\ndirective with a single click from every file of the project.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;   // Noncompliant - no types are used from this namespace\nusing MyApp.Helpers;                // Noncompliant - FileHelper is in the same namespace\nusing MyCustomNamespace;            // Noncompliant - no types are used from this namespace\n\nnamespace MyApp.Helpers\n{\n    public class FileHelper\n    {\n        public static string ReadFirstLine(string filePath) \u003d\u0026gt;\n            File.ReadAllLines(filePath).First();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\nusing System.Linq;\n\nnamespace MyApp.Helpers\n{\n    public class FileHelper\n    {\n        public static string ReadFirstLine(string filePath) \u003d\u0026gt;\n            File.ReadAllLines(filePath).First();\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive\"\u003eMSDN - using directives\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace\"\u003eMSDN - namespaces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S1144} - Unused private types or members should be removed \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S1481} - Unused local variables should be removed \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2219",
    "name": "Runtime type checking should be simplified",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo check the type of an object there are several options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is SomeType\u003c/code\u003e or \u003ccode\u003eexpr.GetType() \u003d\u003d typeof(SomeType)\u003c/code\u003e if the type is known at compile time, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003etypeInstance.IsInstanceOfType(expr)\u003c/code\u003e if the type is calculated during runtime. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf runtime calculated \u003ccode\u003eType\u003c/code\u003es need to be compared:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003etypeInstance1.IsAssignableFrom(typeInstance2)\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDepending on whether the type is returned by a \u003ccode\u003eGetType()\u003c/code\u003e or \u003ccode\u003etypeof()\u003c/code\u003e call, the \u003ccode\u003eIsAssignableFrom()\u003c/code\u003e and\n\u003ccode\u003eIsInstanceOfType()\u003c/code\u003e might be simplified. Similarly, if the type is \u003ccode\u003esealed\u003c/code\u003e, the type comparison with \u003ccode\u003e\u003d\u003d\u003c/code\u003e can be\nconverted to an \u003ccode\u003eis\u003c/code\u003e call. Simplifying the calls also make \u003ccode\u003enull\u003c/code\u003e checking unnecessary because both \u003ccode\u003eis\u003c/code\u003e and\n\u003ccode\u003eIsInstanceOfType\u003c/code\u003e performs it already.\u003c/p\u003e\n\u003cp\u003eFinally, utilizing the most concise language constructs for type checking makes the code more readable, so\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr as T !\u003d null\u003c/code\u003e checks should be simplified to \u003ccode\u003eexpr is T\u003c/code\u003e, and \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is T\u003c/code\u003e should be converted to \u003ccode\u003eexpr !\u003d null\u003c/code\u003e, when \u003ccode\u003eexpr\u003c/code\u003e is of type \u003ccode\u003eT\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple \u003d new Apple();\n    var b \u003d apple !\u003d null \u0026amp;\u0026amp; apple.GetType() \u003d\u003d typeof (Apple); // Noncompliant\n    b \u003d typeof(Apple).IsInstanceOfType(apple); // Noncompliant\n    if (apple !\u003d null)\n    {\n      b \u003d typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n    var appleType \u003d typeof (Apple);\n    if (apple !\u003d null)\n    {\n      b \u003d appleType.IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n\n    Fruit f \u003d apple;\n    if (f as Apple !\u003d null) // Noncompliant\n    {\n    }\n    if (apple is Apple) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple \u003d new Apple();\n    var b \u003d apple is Apple;\n    b \u003d apple is Apple;\n    b \u003d apple is Apple;\n    var appleType \u003d typeof(Apple);\n    b \u003d appleType.IsInstanceOfType(apple);\n\n    Fruit f \u003d apple;\n    if (f is Apple)\n    {\n    }\n    if (apple !\u003d null)\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on an object of \u003ccode\u003eNullable\u0026lt;T\u0026gt;\u003c/code\u003e type returns the underlying generic type parameter \u003ccode\u003eT\u003c/code\u003e, thus\na comparison with \u003ccode\u003etypeof(Nullable\u0026lt;T\u0026gt;)\u003c/code\u003e can’t be simplified to use the \u003ccode\u003eis\u003c/code\u003e operator, which doesn’t make difference\nbetween \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eT?\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nint? i \u003d 42;\nbool condition \u003d i.GetType() \u003d\u003d typeof(int?); // false;\ncondition \u003d i is int?; // true\n\u003c/pre\u003e\n\u003cp\u003eNo issue is reported on the following expressions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is T\u003c/code\u003e\u0026nbsp;when either operand of the \u003ccode\u003eis\u003c/code\u003e operator is a value type. In that case CS0183 or CS0184 reports \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is object\u003c/code\u003e, as this is a common and efficient pattern to do null checks \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo check the type of an object there are several options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is SomeType\u003c/code\u003e or \u003ccode\u003eexpr.GetType() \u003d\u003d typeof(SomeType)\u003c/code\u003e if the type is known at compile time, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003etypeInstance.IsInstanceOfType(expr)\u003c/code\u003e if the type is calculated during runtime. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf runtime calculated \u003ccode\u003eType\u003c/code\u003es need to be compared:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003etypeInstance1.IsAssignableFrom(typeInstance2)\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDepending on whether the type is returned by a \u003ccode\u003eGetType()\u003c/code\u003e or \u003ccode\u003etypeof()\u003c/code\u003e call, the \u003ccode\u003eIsAssignableFrom()\u003c/code\u003e and\n\u003ccode\u003eIsInstanceOfType()\u003c/code\u003e might be simplified. Similarly, if the type is \u003ccode\u003esealed\u003c/code\u003e, the type comparison with \u003ccode\u003e\u003d\u003d\u003c/code\u003e can be\nconverted to an \u003ccode\u003eis\u003c/code\u003e call. Simplifying the calls also make \u003ccode\u003enull\u003c/code\u003e checking unnecessary because both \u003ccode\u003eis\u003c/code\u003e and\n\u003ccode\u003eIsInstanceOfType\u003c/code\u003e performs it already.\u003c/p\u003e\n\u003cp\u003eFinally, utilizing the most concise language constructs for type checking makes the code more readable, so\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr as T !\u003d null\u003c/code\u003e checks should be simplified to \u003ccode\u003eexpr is T\u003c/code\u003e, and \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is T\u003c/code\u003e should be converted to \u003ccode\u003eexpr !\u003d null\u003c/code\u003e, when \u003ccode\u003eexpr\u003c/code\u003e is of type \u003ccode\u003eT\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple \u003d new Apple();\n    var b \u003d apple !\u003d null \u0026amp;\u0026amp; apple.GetType() \u003d\u003d typeof (Apple); // Noncompliant\n    b \u003d typeof(Apple).IsInstanceOfType(apple); // Noncompliant\n    if (apple !\u003d null)\n    {\n      b \u003d typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n    var appleType \u003d typeof (Apple);\n    if (apple !\u003d null)\n    {\n      b \u003d appleType.IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n\n    Fruit f \u003d apple;\n    if (f as Apple !\u003d null) // Noncompliant\n    {\n    }\n    if (apple is Apple) // Noncompliant\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple \u003d new Apple();\n    var b \u003d apple is Apple;\n    b \u003d apple is Apple;\n    b \u003d apple is Apple;\n    var appleType \u003d typeof(Apple);\n    b \u003d appleType.IsInstanceOfType(apple);\n\n    Fruit f \u003d apple;\n    if (f is Apple)\n    {\n    }\n    if (apple !\u003d null)\n    {\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on an object of \u003ccode\u003eNullable\u0026lt;T\u0026gt;\u003c/code\u003e type returns the underlying generic type parameter \u003ccode\u003eT\u003c/code\u003e, thus\na comparison with \u003ccode\u003etypeof(Nullable\u0026lt;T\u0026gt;)\u003c/code\u003e can’t be simplified to use the \u003ccode\u003eis\u003c/code\u003e operator, which doesn’t make difference\nbetween \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eT?\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nint? i \u003d 42;\nbool condition \u003d i.GetType() \u003d\u003d typeof(int?); // false;\ncondition \u003d i is int?; // true\n\u003c/pre\u003e\n\u003cp\u003eNo issue is reported on the following expressions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is T\u003c/code\u003e\u0026nbsp;when either operand of the \u003ccode\u003eis\u003c/code\u003e operator is a value type. In that case CS0183 or CS0184 reports \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexpr is object\u003c/code\u003e, as this is a common and efficient pattern to do null checks \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2339",
    "name": "Public constant members should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConstant members are copied at compile time to the call sites, instead of being fetched at runtime.\u003c/p\u003e\n\u003cp\u003eAs an example, say you have a library with a constant \u003ccode\u003eVersion\u003c/code\u003e member set to \u003ccode\u003e1.0\u003c/code\u003e, and a client application linked to it.\nThis library is then updated and \u003ccode\u003eVersion\u003c/code\u003e is set to \u003ccode\u003e2.0\u003c/code\u003e. Unfortunately, even after the old DLL is replaced by the new one,\n\u003ccode\u003eVersion\u003c/code\u003e will still be \u003ccode\u003e1.0\u003c/code\u003e for the client application. In order to see \u003ccode\u003e2.0\u003c/code\u003e, the client application would need to\nbe rebuilt against the new version of the library.\u003c/p\u003e\n\u003cp\u003eThis means that you should use constants to hold values that by definition will never change, such as \u003ccode\u003eZero\u003c/code\u003e. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.\u003c/p\u003e\n\u003cp\u003eThis rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public const double Version \u003d 1.0;           // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public static double Version\n    {\n      get { return 1.0; }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConstant members are copied at compile time to the call sites, instead of being fetched at runtime.\u003c/p\u003e\n\u003cp\u003eAs an example, say you have a library with a constant \u003ccode\u003eVersion\u003c/code\u003e member set to \u003ccode\u003e1.0\u003c/code\u003e, and a client application linked to it.\nThis library is then updated and \u003ccode\u003eVersion\u003c/code\u003e is set to \u003ccode\u003e2.0\u003c/code\u003e. Unfortunately, even after the old DLL is replaced by the new one,\n\u003ccode\u003eVersion\u003c/code\u003e will still be \u003ccode\u003e1.0\u003c/code\u003e for the client application. In order to see \u003ccode\u003e2.0\u003c/code\u003e, the client application would need to\nbe rebuilt against the new version of the library.\u003c/p\u003e\n\u003cp\u003eThis means that you should use constants to hold values that by definition will never change, such as \u003ccode\u003eZero\u003c/code\u003e. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.\u003c/p\u003e\n\u003cp\u003eThis rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public const double Version \u003d 1.0;           // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n    public static double Version\n    {\n      get { return 1.0; }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2330",
    "name": "Array covariance should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eArray covariance is the principle that if an implicit or explicit reference conversion exits from type \u003ccode\u003eA\u003c/code\u003e to \u003ccode\u003eB\u003c/code\u003e, then the\nsame conversion exists from the array type \u003ccode\u003eA[]\u003c/code\u003e to \u003ccode\u003eB[]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhile this array conversion can be useful in readonly situations to pass instances of \u003ccode\u003eA[]\u003c/code\u003e where \u003ccode\u003eB[]\u003c/code\u003e is expected, it must\nbe used with care, since assigning an instance of \u003ccode\u003eB\u003c/code\u003e into an array of \u003ccode\u003eA\u003c/code\u003e will cause an \u003ccode\u003eArrayTypeMismatchException\u003c/code\u003e\nto be thrown at runtime.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Fruit[] fruits \u003d new Apple[1]; // Noncompliant - array covariance is used\n    FillWithOranges(fruits);\n  }\n\n  // Just looking at the code doesn\u0027t reveal anything suspicious\n  static void FillWithOranges(Fruit[] fruits)\n  {\n    for (int i \u003d 0; i \u0026lt; fruits.Length; i++)\n    {\n      fruits[i] \u003d new Orange(); // Will throw an ArrayTypeMismatchException\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Orange[] fruits \u003d new Orange[1]; // Compliant\n    FillWithOranges(fruits);\n  }\n\n  static void FillWithOranges(Orange[] fruits)\n  {\n    for (int i \u003d 0; i \u0026lt; fruits.Length; i++)\n    {\n      fruits[i] \u003d new Orange();\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArray covariance is the principle that if an implicit or explicit reference conversion exits from type \u003ccode\u003eA\u003c/code\u003e to \u003ccode\u003eB\u003c/code\u003e, then the\nsame conversion exists from the array type \u003ccode\u003eA[]\u003c/code\u003e to \u003ccode\u003eB[]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhile this array conversion can be useful in readonly situations to pass instances of \u003ccode\u003eA[]\u003c/code\u003e where \u003ccode\u003eB[]\u003c/code\u003e is expected, it must\nbe used with care, since assigning an instance of \u003ccode\u003eB\u003c/code\u003e into an array of \u003ccode\u003eA\u003c/code\u003e will cause an \u003ccode\u003eArrayTypeMismatchException\u003c/code\u003e\nto be thrown at runtime.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Fruit[] fruits \u003d new Apple[1]; // Noncompliant - array covariance is used\n    FillWithOranges(fruits);\n  }\n\n  // Just looking at the code doesn\u0027t reveal anything suspicious\n  static void FillWithOranges(Fruit[] fruits)\n  {\n    for (int i \u003d 0; i \u0026lt; fruits.Length; i++)\n    {\n      fruits[i] \u003d new Orange(); // Will throw an ArrayTypeMismatchException\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Orange[] fruits \u003d new Orange[1]; // Compliant\n    FillWithOranges(fruits);\n  }\n\n  static void FillWithOranges(Orange[] fruits)\n  {\n    for (int i \u003d 0; i \u0026lt; fruits.Length; i++)\n    {\n      fruits[i] \u003d new Orange();\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2692",
    "name": "\"IndexOf\" checks should not be for positive numbers",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost checks against an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003eIndexOf\u003c/a\u003e value compare it with -1 because\n\u003cstrong\u003e0 is a valid index\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstrings.IndexOf(someString) \u003d\u003d -1 // Test for \"index not found\"\nstrings.IndexOf(someString) \u0026lt; 0   // Test for \"index not found\"\nstrings.IndexOf(someString) \u0026gt;\u003d 0  // Test for \"index found\"\n\u003c/pre\u003e\n\u003cp\u003eAny checks which look for values \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignore the first element, which is likely a bug. If the intent is merely to check the\ninclusion of a value in a \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003eList\u003c/code\u003e, or array, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eContains\u003c/a\u003e method instead.\u003c/p\u003e\n\u003cpre\u003e\nstrings.Contains(someString) // bool result\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the output value of any of the following methods is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.indexof\"\u003eIndexOf\u003c/a\u003e, applied to \u003ccode\u003estring\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eLastIndexOf\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eLastIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nsomeArray.IndexOf(someItem) \u0026gt; 0        // Noncompliant: index 0 missing\nsomeString.IndexOfAny(charsArray) \u0026gt; 0  // Noncompliant: index 0 missing\nsomeList.LastIndexOf(someItem) \u0026gt; 0     // Noncompliant: index 0 missing\nsomeString.LastIndexOf(charsArray) \u0026gt; 0 // Noncompliant: index 0 missing\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring color \u003d \"blue\";\nstring name \u003d \"ishmael\";\n\nList\u0026lt;string\u0026gt; strings \u003d new List\u0026lt;string\u0026gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray \u003d strings.ToArray();\n\nif (strings.IndexOf(color) \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (name.IndexOf(\"ish\") \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (name.IndexOf(\"ae\") \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (Array.IndexOf(stringArray, color) \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring color \u003d \"blue\";\nstring name \u003d \"ishmael\";\n\nList\u0026lt;string\u0026gt; strings \u003d new List\u0026lt;string\u0026gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray \u003d strings.ToArray();\n\nif (strings.IndexOf(color) \u0026gt; -1)\n{\n  // ...\n}\n\nif (name.IndexOf(\"ish\") \u0026gt;\u003d 0)\n{\n  // ...\n}\n\nif (name.Contains(\"ae\"))\n{\n  // ...\n}\n\nif (Array.IndexOf(stringArray, color) \u0026gt;\u003d 0)\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eString.Contains Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eString.IndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eString.LastIndexOf Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eString.LastIndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost checks against an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003eIndexOf\u003c/a\u003e value compare it with -1 because\n\u003cstrong\u003e0 is a valid index\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstrings.IndexOf(someString) \u003d\u003d -1 // Test for \"index not found\"\nstrings.IndexOf(someString) \u0026lt; 0   // Test for \"index not found\"\nstrings.IndexOf(someString) \u0026gt;\u003d 0  // Test for \"index found\"\n\u003c/pre\u003e\n\u003cp\u003eAny checks which look for values \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignore the first element, which is likely a bug. If the intent is merely to check the\ninclusion of a value in a \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003eList\u003c/code\u003e, or array, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eContains\u003c/a\u003e method instead.\u003c/p\u003e\n\u003cpre\u003e\nstrings.Contains(someString) // bool result\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the output value of any of the following methods is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.indexof\"\u003eIndexOf\u003c/a\u003e, applied to \u003ccode\u003estring\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eLastIndexOf\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eLastIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003estring\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nsomeArray.IndexOf(someItem) \u0026gt; 0        // Noncompliant: index 0 missing\nsomeString.IndexOfAny(charsArray) \u0026gt; 0  // Noncompliant: index 0 missing\nsomeList.LastIndexOf(someItem) \u0026gt; 0     // Noncompliant: index 0 missing\nsomeString.LastIndexOf(charsArray) \u0026gt; 0 // Noncompliant: index 0 missing\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring color \u003d \"blue\";\nstring name \u003d \"ishmael\";\n\nList\u0026lt;string\u0026gt; strings \u003d new List\u0026lt;string\u0026gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray \u003d strings.ToArray();\n\nif (strings.IndexOf(color) \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (name.IndexOf(\"ish\") \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (name.IndexOf(\"ae\") \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\nif (Array.IndexOf(stringArray, color) \u0026gt; 0) // Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring color \u003d \"blue\";\nstring name \u003d \"ishmael\";\n\nList\u0026lt;string\u0026gt; strings \u003d new List\u0026lt;string\u0026gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray \u003d strings.ToArray();\n\nif (strings.IndexOf(color) \u0026gt; -1)\n{\n  // ...\n}\n\nif (name.IndexOf(\"ish\") \u0026gt;\u003d 0)\n{\n  // ...\n}\n\nif (name.Contains(\"ae\"))\n{\n  // ...\n}\n\nif (Array.IndexOf(stringArray, color) \u0026gt;\u003d 0)\n{\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eString.Contains Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eString.IndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eString.LastIndexOf Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eString.LastIndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1121",
    "name": "Assignments should not be made from within sub-expressions",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAssignments inside lambda and delegate expressions are allowed.\u003c/p\u003e\n\u003cpre\u003e\nvar result \u003d Foo(() \u003d\u0026gt;\n{\n   int x \u003d 100; // dead store, but ignored\n   x \u003d 200;\n   return x;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Chained assignments \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar a \u003d b \u003d c \u003d 10;\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Assignments that are part of a condition of an \u003ccode\u003eif\u003c/code\u003e statement or a loop \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nwhile ((val \u003d GetNewValue()) \u0026gt; 0)\n{\n...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Assignment in the right-hand side of a coalescing operator \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nprivate MyClass instance;\npublic MyClass Instance \u003d\u0026gt; instance ?? (instance \u003d new MyClass());\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMaking assignments within sub-expressions can hinder the clarity of source code.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eExtracting assignments into separate statements is encouraged to keep the code clear and straightforward.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (string.IsNullOrEmpty(result \u003d str.Substring(index, length))) // Noncompliant\n{\n  // do something with \"result\"\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar result \u003d str.Substring(index, length);\nif (string.IsNullOrEmpty(result))\n{\n  // do something with \"result\"\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481\"\u003eCWE-481 - Assigning instead of Comparing\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAssignments inside lambda and delegate expressions are allowed.\u003c/p\u003e\n\u003cpre\u003e\nvar result \u003d Foo(() \u003d\u0026gt;\n{\n   int x \u003d 100; // dead store, but ignored\n   x \u003d 200;\n   return x;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Chained assignments \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar a \u003d b \u003d c \u003d 10;\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Assignments that are part of a condition of an \u003ccode\u003eif\u003c/code\u003e statement or a loop \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nwhile ((val \u003d GetNewValue()) \u0026gt; 0)\n{\n...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Assignment in the right-hand side of a coalescing operator \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nprivate MyClass instance;\npublic MyClass Instance \u003d\u0026gt; instance ?? (instance \u003d new MyClass());\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMaking assignments within sub-expressions can hinder the clarity of source code.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eExtracting assignments into separate statements is encouraged to keep the code clear and straightforward.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (string.IsNullOrEmpty(result \u003d str.Substring(index, length))) // Noncompliant\n{\n  // do something with \"result\"\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar result \u003d str.Substring(index, length);\nif (string.IsNullOrEmpty(result))\n{\n  // do something with \"result\"\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481\"\u003eCWE-481 - Assigning instead of Comparing\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1244",
    "name": "Floating point numbers should not be tested for equality",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFloating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a \u003ccode\u003efloat\u003c/code\u003e or a \u003ccode\u003edouble\u003c/code\u003e through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.\u003c/p\u003e\n\u003cp\u003eEven simple floating point assignments are not simple:\u003c/p\u003e\n\u003cpre\u003e\nfloat f \u003d 0.100000001f; // 0.1\ndouble d \u003d 0.10000000000000001; // 0.1\n\u003c/pre\u003e\n\u003cp\u003e(Results will vary based on compiler and compiler settings)\u003c/p\u003e\n\u003cp\u003eTherefore, the use of the equality (\u003ccode\u003e\u003d\u003d\u003c/code\u003e) and inequality (\u003ccode\u003e!\u003d\u003c/code\u003e) operators on \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edouble\u003c/code\u003e values\nis almost always an error.\u003c/p\u003e\n\u003cp\u003eThis rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfloat myNumber \u003d 3.146f;\nif ( myNumber \u003d\u003d 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\n{\n  // ...\n}\n\nif (myNumber \u0026lt;\u003d 3.146f \u0026amp;\u0026amp; mNumber \u0026gt;\u003d 3.146f) // Noncompliant indirect equality test\n{\n  // ...\n}\n\nif (myNumber \u0026lt; 4 || myNumber \u0026gt; 4) // Noncompliant indirect inequality test\n{\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFloating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a \u003ccode\u003efloat\u003c/code\u003e or a \u003ccode\u003edouble\u003c/code\u003e through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.\u003c/p\u003e\n\u003cp\u003eEven simple floating point assignments are not simple:\u003c/p\u003e\n\u003cpre\u003e\nfloat f \u003d 0.100000001f; // 0.1\ndouble d \u003d 0.10000000000000001; // 0.1\n\u003c/pre\u003e\n\u003cp\u003e(Results will vary based on compiler and compiler settings)\u003c/p\u003e\n\u003cp\u003eTherefore, the use of the equality (\u003ccode\u003e\u003d\u003d\u003c/code\u003e) and inequality (\u003ccode\u003e!\u003d\u003c/code\u003e) operators on \u003ccode\u003efloat\u003c/code\u003e or \u003ccode\u003edouble\u003c/code\u003e values\nis almost always an error.\u003c/p\u003e\n\u003cp\u003eThis rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfloat myNumber \u003d 3.146f;\nif ( myNumber \u003d\u003d 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\n{\n  // ...\n}\n\nif (myNumber \u0026lt;\u003d 3.146f \u0026amp;\u0026amp; mNumber \u0026gt;\u003d 3.146f) // Noncompliant indirect equality test\n{\n  // ...\n}\n\nif (myNumber \u0026lt; 4 || myNumber \u0026gt; 4) // Noncompliant indirect inequality test\n{\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1123",
    "name": "\"Obsolete\" attributes should include explanations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eObsolete\u003c/code\u003e attribute can be applied with or without a message argument. Marking something \u003ccode\u003eObsolete\u003c/code\u003e without including\nadvice on why it’s obsolete or what to use instead will lead maintainers to waste time trying to figure those things out.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n\n  [Obsolete]  // Noncompliant\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n\n  [Obsolete(\"Replaced by the automatic starter\")]\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eObsolete\u003c/code\u003e attribute can be applied with or without a message argument. Marking something \u003ccode\u003eObsolete\u003c/code\u003e without including\nadvice on why it’s obsolete or what to use instead will lead maintainers to waste time trying to figure those things out.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n\n  [Obsolete]  // Noncompliant\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Car\n{\n\n  [Obsolete(\"Replaced by the automatic starter\")]\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "bad-practice",
      "obsolete"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2333",
    "name": "Redundant modifiers should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnnecessary keywords simply clutter the code and should be removed. Specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003epartial\u003c/code\u003e on type declarations that are completely defined in one place \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esealed\u003c/code\u003e on members of \u003ccode\u003esealed\u003c/code\u003e classes \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eunsafe\u003c/code\u003e method or block inside construct already marked with \u003ccode\u003eunsafe\u003c/code\u003e, or when there are no \u003ccode\u003eunsafe\u003c/code\u003e\n  constructs in the block \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003echecked\u003c/code\u003e and \u003ccode\u003eunchecked\u003c/code\u003e blocks with no integral-type arithmetic operations \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic partial class MyClass // Noncompliant\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public sealed override void Method() // Noncompliant\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public override void Method()\n  {\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnnecessary keywords simply clutter the code and should be removed. Specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003epartial\u003c/code\u003e on type declarations that are completely defined in one place \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esealed\u003c/code\u003e on members of \u003ccode\u003esealed\u003c/code\u003e classes \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eunsafe\u003c/code\u003e method or block inside construct already marked with \u003ccode\u003eunsafe\u003c/code\u003e, or when there are no \u003ccode\u003eunsafe\u003c/code\u003e\n  constructs in the block \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003echecked\u003c/code\u003e and \u003ccode\u003eunchecked\u003c/code\u003e blocks with no integral-type arithmetic operations \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic partial class MyClass // Noncompliant\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public sealed override void Method() // Noncompliant\n  {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MyClass\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public override void Method()\n  {\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2696",
    "name": "Instance members should not write to \"static\" fields",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule raises an issue each time a \u003ccode\u003estatic\u003c/code\u003e field is updated from a non-static method or property.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUpdating a \u003ccode\u003estatic\u003c/code\u003e field from a non-\u003ccode\u003estatic\u003c/code\u003e method introduces significant challenges and potential bugs. Multiple class\ninstances and threads can access and modify the \u003ccode\u003estatic\u003c/code\u003e field concurrently, leading to unintended consequences for other instances or\nthreads (unexpected behavior, \u003ca href\u003d\"https://www.c-sharpcorner.com/UploadFile/1d42da/race-conditions-in-threading-C-Sharp/\"\u003erace conditions\u003c/a\u003e and\nsynchronization problems).\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private static int count \u003d 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant: make the enclosing instance property \u0027static\u0027 or remove this set on the \u0027static\u0027 field.\n  }\n}\n\ninterface MyInterface\n{\n  private static int count \u003d 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant: remove this set, which updates a \u0027static\u0027 field from an instance method.\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members\"\u003eStatic\n  Classes and Static Class Members\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading\"\u003eUsing threads and threading\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.c-sharpcorner.com/UploadFile/1d42da/race-conditions-in-threading-C-Sharp/\"\u003eRace Conditions in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue each time a \u003ccode\u003estatic\u003c/code\u003e field is updated from a non-static method or property.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUpdating a \u003ccode\u003estatic\u003c/code\u003e field from a non-\u003ccode\u003estatic\u003c/code\u003e method introduces significant challenges and potential bugs. Multiple class\ninstances and threads can access and modify the \u003ccode\u003estatic\u003c/code\u003e field concurrently, leading to unintended consequences for other instances or\nthreads (unexpected behavior, \u003ca href\u003d\"https://www.c-sharpcorner.com/UploadFile/1d42da/race-conditions-in-threading-C-Sharp/\"\u003erace conditions\u003c/a\u003e and\nsynchronization problems).\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass\n{\n  private static int count \u003d 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant: make the enclosing instance property \u0027static\u0027 or remove this set on the \u0027static\u0027 field.\n  }\n}\n\ninterface MyInterface\n{\n  private static int count \u003d 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant: remove this set, which updates a \u0027static\u0027 field from an instance method.\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members\"\u003eStatic\n  Classes and Static Class Members\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading\"\u003eUsing threads and threading\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.c-sharpcorner.com/UploadFile/1d42da/race-conditions-in-threading-C-Sharp/\"\u003eRace Conditions in C#\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4635",
    "name": "Start index should be used instead of calling Substring",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is important to be careful when searching for characters within a substring. Let’s consider the following example:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (str.SubString(startIndex).IndexOf(char1) \u003d\u003d -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eA new \u003ccode\u003estring\u003c/code\u003e object is created with every call to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.substring\"\u003e\u003ccode\u003eSubstring\u003c/code\u003e\u003c/a\u003e method. When chaining it with any of the\nfollowing methods, it creates a new object for one-time use only:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003e\u003ccode\u003eIndexOf\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003e\u003ccode\u003eIndexOfAny\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003e\u003ccode\u003eLastIndexOf\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003e\u003ccode\u003eLastIndexOfAny\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating a new object consumes significant \u003ca href\u003d\"https://en.wikipedia.org/wiki/System_resource\"\u003esystem resources\u003c/a\u003e, especially CPU and memory.\nWhen using \u003ccode\u003eSubstring\u003c/code\u003e repeatedly, such as in a loop, it can greatly impact the overall performance of the application or program.\u003c/p\u003e\n\u003cp\u003eTo mitigate the creation of new objects while searching for characters within a substring, it is possible to use an overload of the mentioned\nmethods with a \u003ccode\u003estartIndex\u003c/code\u003e parameter:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (str.IndexOf(char1, startIndex) \u003d\u003d -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eUsing these methods gives the same result while avoiding the creation of additional \u003ccode\u003estring\u003c/code\u003e objects.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.substring\"\u003e\u003ccode\u003eString.Substring\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003e\u003ccode\u003eString.IndexOf\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003e\u003ccode\u003eString.IndexOfAny\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003e\u003ccode\u003eString.LastIndexOf\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003e\u003ccode\u003eString.LastIndexOfAny\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2858%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eStringSize\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e11.234 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1319 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40000008 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.477 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0473 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.22\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.634 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.4195 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48141349 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0346 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.19\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e14.651 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.2977 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e176000008 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.464 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0501 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.17\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.363 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.2044 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e176518761 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.689 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0290 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.13\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e78.688 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.4727 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1528000072 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.456 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0397 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.03\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.994 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.2650 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1532637240 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.699 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0216 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.02\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate string theString;\nprivate int iteration \u003d 1_000_000;\n\n[Params(10, 100, 1_000)]\npublic int StringSize { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    theString \u003d new string(\u0027a\u0027, StringSize);\n\n[Benchmark(Baseline \u003d true)]\npublic void SubstringThenIndexOf()\n{\n    for (var i \u003d 0; i \u0026lt; iteration; i++)\n    {\n        _ \u003d theString.Substring(StringSize / 4).IndexOf(\u0027a\u0027);\n    }\n}\n\n[Benchmark]\npublic void IndexOfOnly()\n{\n    for (var i \u003d 0; i \u0026lt; iteration; i++)\n    {\n        _ \u003d theString.IndexOf(\u0027a\u0027, StringSize / 4) - StringSize / 4;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2965/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is important to be careful when searching for characters within a substring. Let’s consider the following example:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (str.SubString(startIndex).IndexOf(char1) \u003d\u003d -1) // Noncompliant: a new string is going to be created by \"Substring\"\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eA new \u003ccode\u003estring\u003c/code\u003e object is created with every call to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.substring\"\u003e\u003ccode\u003eSubstring\u003c/code\u003e\u003c/a\u003e method. When chaining it with any of the\nfollowing methods, it creates a new object for one-time use only:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003e\u003ccode\u003eIndexOf\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003e\u003ccode\u003eIndexOfAny\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003e\u003ccode\u003eLastIndexOf\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003e\u003ccode\u003eLastIndexOfAny\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating a new object consumes significant \u003ca href\u003d\"https://en.wikipedia.org/wiki/System_resource\"\u003esystem resources\u003c/a\u003e, especially CPU and memory.\nWhen using \u003ccode\u003eSubstring\u003c/code\u003e repeatedly, such as in a loop, it can greatly impact the overall performance of the application or program.\u003c/p\u003e\n\u003cp\u003eTo mitigate the creation of new objects while searching for characters within a substring, it is possible to use an overload of the mentioned\nmethods with a \u003ccode\u003estartIndex\u003c/code\u003e parameter:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (str.IndexOf(char1, startIndex) \u003d\u003d -1)           // Compliant: no new instance of string is created\n{\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eUsing these methods gives the same result while avoiding the creation of additional \u003ccode\u003estring\u003c/code\u003e objects.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.substring\"\u003e\u003ccode\u003eString.Substring\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003e\u003ccode\u003eString.IndexOf\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003e\u003ccode\u003eString.IndexOfAny\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003e\u003ccode\u003eString.LastIndexOf\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003e\u003ccode\u003eString.LastIndexOfAny\u003c/code\u003e Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2857%;\"\u003e\n    \u003ccol style\u003d\"width: 14.2858%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eStringSize\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e11.234 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1319 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40000008 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.477 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0473 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.22\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.634 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.4195 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48141349 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0346 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.19\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e14.651 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.2977 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e176000008 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.464 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0501 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.17\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.363 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.2044 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e176518761 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.689 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0290 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.13\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e78.688 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.4727 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1528000072 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.456 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0397 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.03\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSubstringThenIndexOf\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.994 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.2650 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1532637240 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndexOfOnly\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.699 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0216 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.02\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate string theString;\nprivate int iteration \u003d 1_000_000;\n\n[Params(10, 100, 1_000)]\npublic int StringSize { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    theString \u003d new string(\u0027a\u0027, StringSize);\n\n[Benchmark(Baseline \u003d true)]\npublic void SubstringThenIndexOf()\n{\n    for (var i \u003d 0; i \u0026lt; iteration; i++)\n    {\n        _ \u003d theString.Substring(StringSize / 4).IndexOf(\u0027a\u0027);\n    }\n}\n\n[Benchmark]\npublic void IndexOfOnly()\n{\n    for (var i \u003d 0; i \u0026lt; iteration; i++)\n    {\n        _ \u003d theString.IndexOf(\u0027a\u0027, StringSize / 4) - StringSize / 4;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2965/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1125",
    "name": "Boolean literals should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003e!, \u0026amp;\u0026amp;, ||, \u003d\u003d, !\u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (booleanMethod() \u003d\u003d true) { /* ... */ }\nif (booleanMethod() \u003d\u003d false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u003d\u003d true);\n\nbooleanVariable \u003d booleanMethod() ? true : false;\nbooleanVariable \u003d booleanMethod() ? true : exp;\nbooleanVariable \u003d booleanMethod() ? false : exp;\nbooleanVariable \u003d booleanMethod() ? exp : true;\nbooleanVariable \u003d booleanMethod() ? exp : false;\n\nfor (var x \u003d 0; true; x++)\n{\n ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable \u003d booleanMethod();\nbooleanVariable \u003d booleanMethod() || exp;\nbooleanVariable \u003d !booleanMethod() \u0026amp;\u0026amp; exp;\nbooleanVariable \u003d !booleanMethod() || exp;\nbooleanVariable \u003d booleanMethod() \u0026amp;\u0026amp; exp;\n\nfor (var x \u003d 0; ; x++)\n{\n ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003e!, \u0026amp;\u0026amp;, ||, \u003d\u003d, !\u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (booleanMethod() \u003d\u003d true) { /* ... */ }\nif (booleanMethod() \u003d\u003d false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u003d\u003d true);\n\nbooleanVariable \u003d booleanMethod() ? true : false;\nbooleanVariable \u003d booleanMethod() ? true : exp;\nbooleanVariable \u003d booleanMethod() ? false : exp;\nbooleanVariable \u003d booleanMethod() ? exp : true;\nbooleanVariable \u003d booleanMethod() ? exp : false;\n\nfor (var x \u003d 0; true; x++)\n{\n ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable \u003d booleanMethod();\nbooleanVariable \u003d booleanMethod() || exp;\nbooleanVariable \u003d !booleanMethod() \u0026amp;\u0026amp; exp;\nbooleanVariable \u003d !booleanMethod() || exp;\nbooleanVariable \u003d booleanMethod() \u0026amp;\u0026amp; exp;\n\nfor (var x \u003d 0; ; x++)\n{\n ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2699",
    "name": "Tests should include assertions",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe rule targets test methods that lack an assertion and consist solely of an action and, optionally, a setup.\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch tests only verify that the system under test does not throw any exceptions without providing any guarantees regarding the code’s behavior\nunder test. Those tests increase the coverage without enforcing anything on the covered code, resulting in a false sense of security.\u003c/p\u003e\n\u003cp\u003eThe rule identifies a potential issue when no assertions are present in tests utilizing the following frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMSTest\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNUnit\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003exUnit\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eFluentAssertions\u003c/code\u003e (4.x and 5.x) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNFluent\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNSubstitute\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eShoudly\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy enforcing the presence of assertions, this rule aims to enhance the reliability and comprehensiveness of tests by ensuring that they provide\nmeaningful validation of the expected behavior.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTest methods that include a call to a custom assertion method will not raise any issues.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo address this issue, you should include assertions to validate the expected behavior. Choose an appropriate assertion method provided by your\ntesting framework (such as MSTest, NUnit, xUnit) or select a suitable assertion library like FluentAssertions, NFluent, NSubstitute, or Shouldly.\u003c/p\u003e\n\u003cp\u003eIn addition to using built-in assertion methods, you also have the option to create custom assertion methods. To do this, declare an attribute\nnamed \u003ccode\u003e[AssertionMethodAttribute]\u003c/code\u003e and apply it to the respective method. This allows you to encapsulate specific validation logic within\nyour custom assertion methods without raising the issue. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[TestClass]\npublic class CustomTestExample\n{\n    [TestMethod]\n    public void Add_SingleNumber_ReturnsSameNumber()\n    {\n        var stringCalculator \u003d new StringCalculator();\n        var actual \u003d stringCalculator.Add(\"0\");\n        Validator.AssertCustomEquality(0, actual); // Compliant\n    }\n}\n\npublic static class Validator\n{\n    [AssertionMethod]\n    public static void AssertCustomEquality(int expected, int actual)\n    {\n        // ...\n    }\n}\n\npublic class AssertionMethodAttribute : Attribute { }\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in MSTest\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.AreEqual(0, actual);\n}\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in NUnit\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n[Test]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n[Test]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.That(0, Is.EqualTo(actual));\n}\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in xUnit\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\n[Fact]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\n[Fact]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.Equal(0, actual);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit\"\u003eUnit testing C# with NUnit\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test\"\u003eUnit testing C# with xUnit\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.everydayunittesting.com/2017/03/unit-testing-anti-pattern-not-asserting.html\"\u003eUnit Testing anti-pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe rule targets test methods that lack an assertion and consist solely of an action and, optionally, a setup.\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch tests only verify that the system under test does not throw any exceptions without providing any guarantees regarding the code’s behavior\nunder test. Those tests increase the coverage without enforcing anything on the covered code, resulting in a false sense of security.\u003c/p\u003e\n\u003cp\u003eThe rule identifies a potential issue when no assertions are present in tests utilizing the following frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMSTest\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNUnit\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003exUnit\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eFluentAssertions\u003c/code\u003e (4.x and 5.x) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNFluent\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eNSubstitute\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eShoudly\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy enforcing the presence of assertions, this rule aims to enhance the reliability and comprehensiveness of tests by ensuring that they provide\nmeaningful validation of the expected behavior.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTest methods that include a call to a custom assertion method will not raise any issues.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo address this issue, you should include assertions to validate the expected behavior. Choose an appropriate assertion method provided by your\ntesting framework (such as MSTest, NUnit, xUnit) or select a suitable assertion library like FluentAssertions, NFluent, NSubstitute, or Shouldly.\u003c/p\u003e\n\u003cp\u003eIn addition to using built-in assertion methods, you also have the option to create custom assertion methods. To do this, declare an attribute\nnamed \u003ccode\u003e[AssertionMethodAttribute]\u003c/code\u003e and apply it to the respective method. This allows you to encapsulate specific validation logic within\nyour custom assertion methods without raising the issue. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n[TestClass]\npublic class CustomTestExample\n{\n    [TestMethod]\n    public void Add_SingleNumber_ReturnsSameNumber()\n    {\n        var stringCalculator \u003d new StringCalculator();\n        var actual \u003d stringCalculator.Add(\"0\");\n        Validator.AssertCustomEquality(0, actual); // Compliant\n    }\n}\n\npublic static class Validator\n{\n    [AssertionMethod]\n    public static void AssertCustomEquality(int expected, int actual)\n    {\n        // ...\n    }\n}\n\npublic class AssertionMethodAttribute : Attribute { }\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in MSTest\u003c/h2\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.AreEqual(0, actual);\n}\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in NUnit\u003c/h2\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n[Test]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n[Test]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.That(0, Is.EqualTo(actual));\n}\n\u003c/pre\u003e\n\u003ch2\u003eHot to fix it in xUnit\u003c/h2\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\n[Fact]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\n[Fact]\npublic void Add_SingleNumber_ReturnsSameNumber()\n{\n    var stringCalculator \u003d new StringCalculator();\n    var actual \u003d stringCalculator.Add(\"0\");\n    Assert.Equal(0, actual);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit\"\u003eUnit testing C# with NUnit\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test\"\u003eUnit testing C# with xUnit\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.everydayunittesting.com/2017/03/unit-testing-anti-pattern-not-asserting.html\"\u003eUnit Testing anti-pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1116",
    "name": "Empty statements should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty statements represented by a semicolon \u003ccode\u003e;\u003c/code\u003e are statements that do not perform any operation. They are often the result of a typo or\na misunderstanding of the language syntax. It is a good practice to remove empty statements since they don’t add value and lead to confusion and\nerrors.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid DoSomething()\n{\n    ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid DoSomethingElse()\n{\n    Console.WriteLine(\"Hello, world!\");;  // Noncompliant - double ;\n    // ...\n    // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\n    // have side-effects outside of the loop:\n    for (int i \u003d 0; i \u0026lt; 3; Console.WriteLine(i), i++); // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid DoSomething()\n{\n}\n\nvoid DoSomethingElse()\n{\n    Console.WriteLine(\"Hello, world!\");\n    // ...\n    for (int i \u003d 0; i \u0026lt; 3; i++)\n    {\n        Console.WriteLine(i);\n     }\n    // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEmpty statements represented by a semicolon \u003ccode\u003e;\u003c/code\u003e are statements that do not perform any operation. They are often the result of a typo or\na misunderstanding of the language syntax. It is a good practice to remove empty statements since they don’t add value and lead to confusion and\nerrors.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid DoSomething()\n{\n    ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid DoSomethingElse()\n{\n    Console.WriteLine(\"Hello, world!\");;  // Noncompliant - double ;\n    // ...\n    // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\n    // have side-effects outside of the loop:\n    for (int i \u003d 0; i \u0026lt; 3; Console.WriteLine(i), i++); // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid DoSomething()\n{\n}\n\nvoid DoSomethingElse()\n{\n    Console.WriteLine(\"Hello, world!\");\n    // ...\n    for (int i \u003d 0; i \u0026lt; 3; i++)\n    {\n        Console.WriteLine(i);\n     }\n    // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1479",
    "name": "\"switch\" statements should not have too many \"case\" clauses",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eswitch\u003c/a\u003e\nstatements have large sets of case clauses, it is usually an attempt to map two sets of data. A \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e should be used instead to make the code\nmore readable and maintainable.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eswitch\u003c/code\u003e statements over \u003ccode\u003eEnum\u003c/code\u003e arguments and empty, fall-through cases.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eStore all the cases apart from the \u003ccode\u003edefault\u003c/code\u003e one in a dictionary and try to get the matching value by calling the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eTryGetValue\u003c/a\u003e method.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe example below are using the \"Maximum number of case\" property set to \u003ccode\u003e4\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class TooManyCase\n{\n    public int mapValues(char ch)\n    {\n        switch(ch) {  // Noncompliant: 5 cases, \"default\" excluded, more than maximum \u003d 4\n            case \u0027a\u0027:\n                return 1;\n            case \u0027b\u0027:\n            case \u0027c\u0027:\n                return 2;\n            case \u0027d\u0027:\n                return 3;\n            case \u0027e\u0027:\n                return 4;\n            case \u0027f\u0027:\n            case \u0027g\u0027:\n            case \u0027h\u0027:\n                return 5;\n            default:\n                return 6;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Collections.Generic;\n\npublic class TooManyCase\n{\n    Dictionary\u0026lt;char, int\u0026gt; matching \u003d new Dictionary\u0026lt;char, int\u0026gt;()\n    {\n        { \u0027a\u0027, 1 },\n        { \u0027b\u0027, 2 },\n        { \u0027c\u0027, 2 },\n        { \u0027d\u0027, 3 },\n        { \u0027e\u0027, 4 },\n        { \u0027f\u0027, 5 },\n        { \u0027g\u0027, 5 },\n        { \u0027h\u0027, 5 }\n    };\n\n    public int mapValues(char ch)\n    {\n        int value;\n        if (this.matching.TryGetValue(ch, out value)) {\n            return value;\n        } else {\n            return 6;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt;.TryGetValue(TKey, TValue) Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eThe\n  \u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eswitch\u003c/a\u003e\nstatements have large sets of case clauses, it is usually an attempt to map two sets of data. A \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e should be used instead to make the code\nmore readable and maintainable.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eswitch\u003c/code\u003e statements over \u003ccode\u003eEnum\u003c/code\u003e arguments and empty, fall-through cases.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eStore all the cases apart from the \u003ccode\u003edefault\u003c/code\u003e one in a dictionary and try to get the matching value by calling the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eTryGetValue\u003c/a\u003e method.\u003c/p\u003e\n\n\u003cp\u003eThe example below are using the \"Maximum number of case\" property set to \u003ccode\u003e4\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class TooManyCase\n{\n    public int mapValues(char ch)\n    {\n        switch(ch) {  // Noncompliant: 5 cases, \"default\" excluded, more than maximum \u003d 4\n            case \u0027a\u0027:\n                return 1;\n            case \u0027b\u0027:\n            case \u0027c\u0027:\n                return 2;\n            case \u0027d\u0027:\n                return 3;\n            case \u0027e\u0027:\n                return 4;\n            case \u0027f\u0027:\n            case \u0027g\u0027:\n            case \u0027h\u0027:\n                return 5;\n            default:\n                return 6;\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.Collections.Generic;\n\npublic class TooManyCase\n{\n    Dictionary\u0026lt;char, int\u0026gt; matching \u003d new Dictionary\u0026lt;char, int\u0026gt;()\n    {\n        { \u0027a\u0027, 1 },\n        { \u0027b\u0027, 2 },\n        { \u0027c\u0027, 2 },\n        { \u0027d\u0027, 3 },\n        { \u0027e\u0027, 4 },\n        { \u0027f\u0027, 5 },\n        { \u0027g\u0027, 5 },\n        { \u0027h\u0027, 5 }\n    };\n\n    public int mapValues(char ch)\n    {\n        int value;\n        if (this.matching.TryGetValue(ch, out value)) {\n            return value;\n        } else {\n            return 6;\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt;.TryGetValue(TKey, TValue) Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eThe\n  \u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "maximum": {
        "key": "maximum",
        "name": "maximum",
        "description": "Maximum number of case",
        "defaultValue": "30",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximum": "30"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2327",
    "name": "\"try\" statements with identical \"catch\" and/or \"finally\" blocks should be merged",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen multiple, adjacent \u003ccode\u003etry\u003c/code\u003e statements have duplicate \u003ccode\u003ecatch\u003c/code\u003e and/or \u003ccode\u003efinally\u003c/code\u003e blocks, they should be merged to\nconsolidate the \u003ccode\u003ecatch/finally\u003c/code\u003e logic for cleaner, more readable code. Note that this applies even when there is intervening code outside\nany \u003ccode\u003etry\u003c/code\u003e block.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  DoTheFirstThing(a, b);\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\nDoSomeOtherStuff();\n\ntry  // Noncompliant; catch is identical to previous\n{\n  DoTheSecondThing();\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\ntry  // Compliant; catch handles exception differently\n{\n  DoTheThirdThing(a);\n}\ncatch (InvalidOperationException ex)\n{\n  LogAndDie(ex);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  DoTheFirstThing(a, b);\n  DoSomeOtherStuff();\n  DoTheSecondThing();\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\ntry  // Compliant; catch handles exception differently\n{\n  DoTheThirdThing(a);\n}\ncatch (InvalidOperationException ex)\n{\n  LogAndDie(ex);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen multiple, adjacent \u003ccode\u003etry\u003c/code\u003e statements have duplicate \u003ccode\u003ecatch\u003c/code\u003e and/or \u003ccode\u003efinally\u003c/code\u003e blocks, they should be merged to\nconsolidate the \u003ccode\u003ecatch/finally\u003c/code\u003e logic for cleaner, more readable code. Note that this applies even when there is intervening code outside\nany \u003ccode\u003etry\u003c/code\u003e block.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  DoTheFirstThing(a, b);\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\nDoSomeOtherStuff();\n\ntry  // Noncompliant; catch is identical to previous\n{\n  DoTheSecondThing();\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\ntry  // Compliant; catch handles exception differently\n{\n  DoTheThirdThing(a);\n}\ncatch (InvalidOperationException ex)\n{\n  LogAndDie(ex);\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  DoTheFirstThing(a, b);\n  DoSomeOtherStuff();\n  DoTheSecondThing();\n}\ncatch (InvalidOperationException ex)\n{\n  HandleException(ex);\n}\n\ntry  // Compliant; catch handles exception differently\n{\n  DoTheThirdThing(a);\n}\ncatch (InvalidOperationException ex)\n{\n  LogAndDie(ex);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3415",
    "name": "Assertion arguments should be passed in the correct order",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe standard assertions library methods such as \u003ccode\u003eAreEqual\u003c/code\u003e and \u003ccode\u003eAreSame\u003c/code\u003e in \u003cstrong\u003eMSTest\u003c/strong\u003e and\n\u003cstrong\u003eNUnit\u003c/strong\u003e, or \u003ccode\u003eEqual\u003c/code\u003e and \u003ccode\u003eSame\u003c/code\u003e in \u003cstrong\u003eXUnit\u003c/strong\u003e, expect the first argument to be the expected value and\nthe second argument to be the actual value.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eYou should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nAssert.AreEqual(runner.ExitCode, 0, \"Unexpected exit code\"); // Noncompliant; Yields error message like: Expected:\u0026lt;-1\u0026gt;. Actual:\u0026lt;0\u0026gt;.\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nAssert.AreEqual(0, runner.ExitCode, \"Unexpected exit code\");\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe standard assertions library methods such as \u003ccode\u003eAreEqual\u003c/code\u003e and \u003ccode\u003eAreSame\u003c/code\u003e in \u003cstrong\u003eMSTest\u003c/strong\u003e and\n\u003cstrong\u003eNUnit\u003c/strong\u003e, or \u003ccode\u003eEqual\u003c/code\u003e and \u003ccode\u003eSame\u003c/code\u003e in \u003cstrong\u003eXUnit\u003c/strong\u003e, expect the first argument to be the expected value and\nthe second argument to be the actual value.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eYou should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nAssert.AreEqual(runner.ExitCode, 0, \"Unexpected exit code\"); // Noncompliant; Yields error message like: Expected:\u0026lt;-1\u0026gt;. Actual:\u0026lt;0\u0026gt;.\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nAssert.AreEqual(0, runner.ExitCode, \"Unexpected exit code\");\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2326",
    "name": "Unused type parameters should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eType parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MoreMath\u0026lt;T\u0026gt;   // Noncompliant; \u0026lt;T\u0026gt; is ignored\n{\n  public int Add\u0026lt;T\u0026gt;(int a, int b) // Noncompliant; \u0026lt;T\u0026gt; is ignored\n  {\n    return a + b;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MoreMath\n{\n  public int Add (int a, int b)\n  {\n    return a + b;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eType parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class MoreMath\u0026lt;T\u0026gt;   // Noncompliant; \u0026lt;T\u0026gt; is ignored\n{\n  public int Add\u0026lt;T\u0026gt;(int a, int b) // Noncompliant; \u0026lt;T\u0026gt; is ignored\n  {\n    return a + b;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class MoreMath\n{\n  public int Add (int a, int b)\n  {\n    return a + b;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4507",
    "name": "Delivering code in production with debug features activated is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopment tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application’s path or file names.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule does not analyze configuration files. Make sure that debug mode is not enabled by default in those files.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. \u003c/li\u003e\n  \u003cli\u003e The application runs by default with debug features activated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThis rule raises issues when the following .Net Core methods are called:\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage\u003c/code\u003e,\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace mvcApp\n{\n    public class Startup2\n    {\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            // Those calls are Sensitive because it seems that they will run in production\n            app.UseDeveloperExceptionPage(); // Sensitive\n            app.UseDatabaseErrorPage(); // Sensitive\n        }\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDo not enable debugging features on production servers.\u003c/p\u003e\n\u003cp\u003eThe .Net Core framework offers multiple features which help during debug.\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage\u003c/code\u003e and\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage\u003c/code\u003e are two of them. Make sure that those features are disabled in\nproduction.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eif (env.IsDevelopment())\u003c/code\u003e to disable debug code.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace mvcApp\n{\n    public class Startup2\n    {\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                // The following calls are ok because they are disabled in production\n                app.UseDeveloperExceptionPage(); // Compliant\n                app.UseDatabaseErrorPage(); // Compliant\n            }\n        }\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eCWE-489 - Active Debug Code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/215\"\u003eCWE-215 - Information Exposure Through Debug Information\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "debug",
      "error-handling",
      "user-experience"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "csharpsquid:S1117",
    "name": "Local variables should not shadow class fields or properties",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShadowing occurs when a local variable has the same name as a variable, field, or property in an outer scope.\u003c/p\u003e\n\u003cp\u003eThis can lead to three main problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. \u003c/li\u003e\n  \u003cli\u003e Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo avoid these problems, rename the shadowing, shadowed, or both variables/fields/properties to accurately represent their purpose with unique and\nmeaningful names. It improves clarity and allows reasoning locally about the code without considering other software parts.\u003c/p\u003e\n\u003cp\u003eThis rule focuses on variables shadowing fields or properties.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n  public int myField;\n  public int MyProperty { get; set; }\n\n  public void DoSomething()\n  {\n    int myField \u003d 0;    // Noncompliant\n    int MyProperty \u003d 0; // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\"\u003eFields\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S2387} - Child class fields should not shadow parent class fields \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3218} - Inner class members should not shadow outer class \"static\" or type members \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShadowing occurs when a local variable has the same name as a variable, field, or property in an outer scope.\u003c/p\u003e\n\u003cp\u003eThis can lead to three main problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. \u003c/li\u003e\n  \u003cli\u003e Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: If the inner variable is removed or renamed, the code’s behavior might change unexpectedly because the outer variable is\n  now being used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo avoid these problems, rename the shadowing, shadowed, or both variables/fields/properties to accurately represent their purpose with unique and\nmeaningful names. It improves clarity and allows reasoning locally about the code without considering other software parts.\u003c/p\u003e\n\u003cp\u003eThis rule focuses on variables shadowing fields or properties.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass Foo\n{\n  public int myField;\n  public int MyProperty { get; set; }\n\n  public void DoSomething()\n  {\n    int myField \u003d 0;    // Noncompliant\n    int MyProperty \u003d 0; // Noncompliant\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\"\u003eFields\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\"\u003eProperties\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:csharpsquid:S2387} - Child class fields should not shadow parent class fields \u003c/li\u003e\n  \u003cli\u003e {rule:csharpsquid:S3218} - Inner class members should not shadow outer class \"static\" or type members \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1118",
    "name": "Utility classes should not have public constructors",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a\n\"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo prevent the class from being instantiated, you should define a non-public constructor. This will prevent the compiler from implicitly generating\na public parameterless constructor.\u003c/p\u003e\n\u003cp\u003eAlternatively, adding the \u003ccode\u003estatic\u003c/code\u003e keyword as class modifier will also prevent it from being instantiated.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class StringUtils // Noncompliant: explicit public constructor\n{\n  public StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a\n\"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo prevent the class from being instantiated, you should define a non-public constructor. This will prevent the compiler from implicitly generating\na public parameterless constructor.\u003c/p\u003e\n\u003cp\u003eAlternatively, adding the \u003ccode\u003estatic\u003c/code\u003e keyword as class modifier will also prevent it from being instantiated.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class StringUtils // Noncompliant: implicit public constructor\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class StringUtils // Noncompliant: explicit public constructor\n{\n  public StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic static class StringUtils // Compliant: the class is static\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class StringUtils // Compliant: the constructor is not public\n{\n  private StringUtils()\n  {\n  }\n\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6803",
    "name": "Parameters with SupplyParameterFromQuery attribute should be used only in routable components",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eComponent parameters can only receive query parameter values in routable components with an @page directive.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQuery\u003c/a\u003e\nattribute is used to specify that a component parameter of a routable component comes from the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case non-routable components the \u003ccode\u003eSupplyParameterFromQuery\u003c/code\u003e does not contribute to the functionality and removing it will not\naffect the behavior.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEither make the component routable or remove the \u003ccode\u003eSupplyParameterFromQuery\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;h3\u0026gt;Component\u0026lt;/h3\u0026gt;\n\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery]  // Noncompliant\n    public bool Param { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/component\"\n\n\u0026lt;h3\u0026gt;Component\u0026lt;/h3\u0026gt;\n\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery]  // Compliant\n    public bool Param { get; set; }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#query-strings\"\u003eQuery strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQueryAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eComponent parameters can only receive query parameter values in routable components with an @page directive.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQuery\u003c/a\u003e\nattribute is used to specify that a component parameter of a routable component comes from the \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case non-routable components the \u003ccode\u003eSupplyParameterFromQuery\u003c/code\u003e does not contribute to the functionality and removing it will not\naffect the behavior.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEither make the component routable or remove the \u003ccode\u003eSupplyParameterFromQuery\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;h3\u0026gt;Component\u0026lt;/h3\u0026gt;\n\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery]  // Noncompliant\n    public bool Param { get; set; }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/component\"\n\n\u0026lt;h3\u0026gt;Component\u0026lt;/h3\u0026gt;\n\n@code {\n    [Parameter]\n    [SupplyParameterFromQuery]  // Compliant\n    public bool Param { get; set; }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#query-strings\"\u003eQuery strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.supplyparameterfromqueryattribute\"\u003eSupplyParameterFromQueryAttribute Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Query_string\"\u003equery string\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "blazor"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2328",
    "name": "\"GetHashCode\" should not reference mutable fields",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eGetHashCode\u003c/code\u003e is used to file an object in a \u003ccode\u003eDictionary\u003c/code\u003e or \u003ccode\u003eHashtable\u003c/code\u003e. If \u003ccode\u003eGetHashCode\u003c/code\u003e uses\nnon-\u003ccode\u003ereadonly\u003c/code\u003e fields and those fields change after the object is stored, the object immediately becomes mis-filed in the\n\u003ccode\u003eHashtable\u003c/code\u003e. Any subsequent test to see if the object is in the \u003ccode\u003eHashtable\u003c/code\u003e will return a false negative.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  public int age;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash \u003d 12;\n    hash +\u003d this.age.GetHashCode(); // Noncompliant\n    hash +\u003d this.name.GetHashCode(); // Noncompliant\n    return hash;\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  public readonly DateTime birthday;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash \u003d 12;\n    hash +\u003d this.birthday.GetHashCode();\n    return hash;\n  }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eGetHashCode\u003c/code\u003e is used to file an object in a \u003ccode\u003eDictionary\u003c/code\u003e or \u003ccode\u003eHashtable\u003c/code\u003e. If \u003ccode\u003eGetHashCode\u003c/code\u003e uses\nnon-\u003ccode\u003ereadonly\u003c/code\u003e fields and those fields change after the object is stored, the object immediately becomes mis-filed in the\n\u003ccode\u003eHashtable\u003c/code\u003e. Any subsequent test to see if the object is in the \u003ccode\u003eHashtable\u003c/code\u003e will return a false negative.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  public int age;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash \u003d 12;\n    hash +\u003d this.age.GetHashCode(); // Noncompliant\n    hash +\u003d this.name.GetHashCode(); // Noncompliant\n    return hash;\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Person\n{\n  public readonly DateTime birthday;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash \u003d 12;\n    hash +\u003d this.birthday.GetHashCode();\n    return hash;\n  }\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2681",
    "name": "Multiline blocks should be enclosed in curly braces",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving inconsistent indentation and omitting curly braces from a control structure, such as an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop,\nis misleading and can induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eThe following patterns are recognized:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  FirstActionInBlock();\n  SecondAction();  // Noncompliant: SecondAction is executed unconditionally\nThirdAction();\n\u003c/pre\u003e\n\u003cpre\u003e\nif(condition) FirstActionInBlock(); SecondAction();  // Noncompliant: SecondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) FirstActionInBlock();\n  SecondAction();  // Noncompliant: SecondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nstring str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.Length; i++)\n  str \u003d array[i];\n  DoTheThing(str);  // Noncompliant: executed only on the last element\n\u003c/pre\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483\"\u003eCWE-483 - Incorrect Block Delimitation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving inconsistent indentation and omitting curly braces from a control structure, such as an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop,\nis misleading and can induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eThe following patterns are recognized:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  FirstActionInBlock();\n  SecondAction();  // Noncompliant: SecondAction is executed unconditionally\nThirdAction();\n\u003c/pre\u003e\n\u003cpre\u003e\nif(condition) FirstActionInBlock(); SecondAction();  // Noncompliant: SecondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) FirstActionInBlock();\n  SecondAction();  // Noncompliant: SecondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nstring str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.Length; i++)\n  str \u003d array[i];\n  DoTheThing(str);  // Noncompliant: executed only on the last element\n\u003c/pre\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483\"\u003eCWE-483 - Incorrect Block Delimitation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1110",
    "name": "Redundant pairs of parentheses should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eParentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.\u003c/p\u003e\n\u003cpre\u003e\na \u003d (b * c) + (d * e); // Compliant: the intent is clear.\n\u003c/pre\u003e\n\u003cp\u003eRedundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint x \u003d ((y / 2 + 1)); // Noncompliant\n\nif (a \u0026amp;\u0026amp; ((x + y \u0026gt; 0))) { // Noncompliant\n  return ((x + 1)); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x + y \u0026gt; 0)) {\n  return (x + 1);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eParentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.\u003c/p\u003e\n\u003cpre\u003e\na \u003d (b * c) + (d * e); // Compliant: the intent is clear.\n\u003c/pre\u003e\n\u003cp\u003eRedundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nint x \u003d ((y / 2 + 1)); // Noncompliant\n\nif (a \u0026amp;\u0026amp; ((x + y \u0026gt; 0))) { // Noncompliant\n  return ((x + 1)); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nint x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x + y \u0026gt; 0)) {\n  return (x + 1);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6802",
    "name": "Using lambda expressions in loops should be avoided in Blazor markup section",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn Blazor, using \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003elambda expressions\u003c/a\u003e\nas \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003eevent handlers\u003c/a\u003e when the UI elements\nare rendered in a loop can lead to negative user experiences and performance issues. This is particularly noticeable when rendering a large number of\nelements.\u003c/p\u003e\n\u003cp\u003eThe reason behind this is that Blazor rebuilds all lambda expressions within the loop every time the UI elements are rendered.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure to not use a delegate in elements rendered in loops, you can try:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e using a collection of objects containing the delegate as an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.action\"\u003eAction\u003c/a\u003e,\n  \u003c/li\u003e\n  \u003cli\u003e or extracting the elements into a dedicated component and using an \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#eventcallback\"\u003eEventCallback\u003c/a\u003e to call the delegate \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n\n    \u0026lt;button @onclick\u003d\"@(e \u003d\u0026gt; DoAction(e, buttonNumber))\"\u0026gt; @* Noncompliant *@\n        Button #@buttonNumber\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private void DoAction(MouseEventArgs e, int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@foreach (var button in Buttons)\n{\n    \u0026lt;button @key\u003d\"button.Id\" @onclick\u003d\"button.Action\"\u0026gt;  @* Compliant *@\n        Button #@button.Id\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private List\u0026lt;Button\u0026gt; Buttons { get; set; } \u003d new();\n\n    protected override void OnInitialized()\n    {\n        for (var i \u003d 0; i \u0026lt; 100; i++)\n        {\n            var button \u003d new Button();\n\n            button.Action \u003d (e) \u003d\u0026gt; DoAction(e, button);\n\n            Buttons.Add(button);\n        }\n    }\n\n    private void DoAction(MouseEventArgs e, Button button)\n    {\n        // Do something here\n    }\n\n    private class Button\n    {\n        public string? Id { get; } \u003d Guid.NewGuid().ToString();\n        public Action\u0026lt;MouseEventArgs\u0026gt; Action { get; set; } \u003d e \u003d\u0026gt; { };\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n@* Component.razor *@\n\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n\n    \u0026lt;button @onclick\u003d\"@(e \u003d\u0026gt; DoAction(e, buttonNumber))\"\u0026gt; @* Noncompliant *@\n        Button #@buttonNumber\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private void DoAction(MouseEventArgs e, int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n@* MyButton.razor *@\n\n\u0026lt;button @onclick\u003d\"OnClickCallback\"\u0026gt;\n    @ChildContent\n\u0026lt;/button\u0026gt;\n\n@code {\n    [Parameter]\n    public int Id { get; set; }\n\n    [Parameter]\n    public EventCallback\u0026lt;int\u0026gt; OnClick { get; set; }\n\n    [Parameter]\n    public RenderFragment ChildContent { get; set; }\n\n    private void OnClickCallback()\n    {\n        OnClick.InvokeAsync(Id);\n    }\n}\n\n@* Component.razor *@\n\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n    \u0026lt;MyButton Id\u003d\"buttonNumber\" OnClick\u003d\"DoAction\"\u0026gt;\n        Button #@buttonNumber\n    \u0026lt;/MyButton\u0026gt;\n}\n\n@code {\n    private void DoAction(int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/performance#avoid-recreating-delegates-for-many-repeated-elements-or-components\"\u003eASP.NET\n  Core Blazor performance best practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003eASP.NET Core\n  Blazor event handling - Lambda expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#eventcallback\"\u003eEvent handling -\n  EventCallback Struct\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003cp\u003eThe results were generated with the help of \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e and \u003ca\nhref\u003d\"https://github.com/egil/Benchmark.Blazor/tree/main\"\u003eBenchmark.Blazor\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eNbButtonRendered\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.603 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.994 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0592 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.29\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50.666 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.5449 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.016 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0346 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.04\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e512.513 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.7561 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.000\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.005 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0243 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.004\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet v0.13.9+228a464e8be6c580ad9408e98f18813f6407fb5a, Windows 10 (10.0.19045.3448/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 8.0.100-rc.1.23463.5\n  [Host]   : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Blazor, using \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003elambda expressions\u003c/a\u003e\nas \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003eevent handlers\u003c/a\u003e when the UI elements\nare rendered in a loop can lead to negative user experiences and performance issues. This is particularly noticeable when rendering a large number of\nelements.\u003c/p\u003e\n\u003cp\u003eThe reason behind this is that Blazor rebuilds all lambda expressions within the loop every time the UI elements are rendered.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure to not use a delegate in elements rendered in loops, you can try:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e using a collection of objects containing the delegate as an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.action\"\u003eAction\u003c/a\u003e,\n  \u003c/li\u003e\n  \u003cli\u003e or extracting the elements into a dedicated component and using an \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#eventcallback\"\u003eEventCallback\u003c/a\u003e to call the delegate \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n\n    \u0026lt;button @onclick\u003d\"@(e \u003d\u0026gt; DoAction(e, buttonNumber))\"\u0026gt; @* Noncompliant *@\n        Button #@buttonNumber\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private void DoAction(MouseEventArgs e, int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@foreach (var button in Buttons)\n{\n    \u0026lt;button @key\u003d\"button.Id\" @onclick\u003d\"button.Action\"\u0026gt;  @* Compliant *@\n        Button #@button.Id\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private List\u0026lt;Button\u0026gt; Buttons { get; set; } \u003d new();\n\n    protected override void OnInitialized()\n    {\n        for (var i \u003d 0; i \u0026lt; 100; i++)\n        {\n            var button \u003d new Button();\n\n            button.Action \u003d (e) \u003d\u0026gt; DoAction(e, button);\n\n            Buttons.Add(button);\n        }\n    }\n\n    private void DoAction(MouseEventArgs e, Button button)\n    {\n        // Do something here\n    }\n\n    private class Button\n    {\n        public string? Id { get; } \u003d Guid.NewGuid().ToString();\n        public Action\u0026lt;MouseEventArgs\u0026gt; Action { get; set; } \u003d e \u003d\u0026gt; { };\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n@* Component.razor *@\n\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n\n    \u0026lt;button @onclick\u003d\"@(e \u003d\u0026gt; DoAction(e, buttonNumber))\"\u0026gt; @* Noncompliant *@\n        Button #@buttonNumber\n    \u0026lt;/button\u0026gt;\n}\n\n@code {\n    private void DoAction(MouseEventArgs e, int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n@* MyButton.razor *@\n\n\u0026lt;button @onclick\u003d\"OnClickCallback\"\u0026gt;\n    @ChildContent\n\u0026lt;/button\u0026gt;\n\n@code {\n    [Parameter]\n    public int Id { get; set; }\n\n    [Parameter]\n    public EventCallback\u0026lt;int\u0026gt; OnClick { get; set; }\n\n    [Parameter]\n    public RenderFragment ChildContent { get; set; }\n\n    private void OnClickCallback()\n    {\n        OnClick.InvokeAsync(Id);\n    }\n}\n\n@* Component.razor *@\n\n@for (var i \u003d 1; i \u0026lt; 100; i++)\n{\n    var buttonNumber \u003d i;\n    \u0026lt;MyButton Id\u003d\"buttonNumber\" OnClick\u003d\"DoAction\"\u0026gt;\n        Button #@buttonNumber\n    \u0026lt;/MyButton\u0026gt;\n}\n\n@code {\n    private void DoAction(int button)\n    {\n        // Do something here\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/performance#avoid-recreating-delegates-for-many-repeated-elements-or-components\"\u003eASP.NET\n  Core Blazor performance best practices\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#lambda-expressions\"\u003eASP.NET Core\n  Blazor event handling - Lambda expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#eventcallback\"\u003eEvent handling -\n  EventCallback Struct\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003cp\u003eThe results were generated with the help of \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e and \u003ca\nhref\u003d\"https://github.com/egil/Benchmark.Blazor/tree/main\"\u003eBenchmark.Blazor\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eNbButtonRendered\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.603 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.994 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0592 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.29\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50.666 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.5449 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.016 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0346 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.04\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseDelegate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e512.513 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.7561 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.000\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eUseAction\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1000\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.005 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0243 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.004\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet v0.13.9+228a464e8be6c580ad9408e98f18813f6407fb5a, Windows 10 (10.0.19045.3448/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 8.0.100-rc.1.23463.5\n  [Host]   : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "blazor"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4502",
    "name": "Disabling CSRF protections is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\u003c/p\u003e\n\u003cp\u003eThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The web application uses cookies to authenticate users. \u003c/li\u003e\n  \u003cli\u003e There exist sensitive operations in the web application that can be performed when the user is authenticated. \u003c/li\u003e\n  \u003cli\u003e The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options \u003d\u0026gt; options.Filters.Add(new IgnoreAntiforgeryTokenAttribute())); // Sensitive\n    // ...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[HttpPost, IgnoreAntiforgeryToken] // Sensitive\npublic IActionResult ChangeEmail(ChangeEmailModel model) \u003d\u0026gt; View(\"~/Views/...\");\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Protection against CSRF attacks is strongly recommended:\n    \u003cul\u003e\n      \u003cli\u003e to be activated by default for all \u003ca href\u003d\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\"\u003eunsafe HTTP\n      methods\u003c/a\u003e. \u003c/li\u003e\n      \u003cli\u003e implemented, for example, with an unguessable CSRF token \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Of course all sensitive operations should not be performed with \u003ca\n  href\u003d\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\"\u003esafe HTTP\u003c/a\u003e methods like \u003ccode\u003eGET\u003c/code\u003e which are designed to be\n  used only for information retrieval. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void ConfigureServices(IServiceCollection services)\n{\n    // ...\n    services.AddControllersWithViews(options \u003d\u0026gt; options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute()));\n    // or\n    services.AddControllersWithViews(options \u003d\u0026gt; options.Filters.Add(new ValidateAntiForgeryTokenAttribute()));\n    // ...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[HttpPost]\n[AutoValidateAntiforgeryToken]\npublic IActionResult ChangeEmail(ChangeEmailModel model) \u003d\u0026gt; View(\"~/Views/...\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352\"\u003eCWE-352 - Cross-Site Request Forgery (CSRF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/csrf\"\u003eOWASP: Cross-Site Request Forgery\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "csharpsquid:S2201",
    "name": "Methods without side effects should not have their return values ignored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you do not use the return value of a method with no side effects, it indicates that something is wrong. Either this method is unnecessary, or\nthe source code does not behave as expected and could lead to code defects. For example, there are methods, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addyears\"\u003eDateTime.AddYears\u003c/a\u003e, that don’t change the value of the input object,\nbut instead, they return a new object whose value is the result of this operation, and as a result that you will have unexpected effects if you do not\nuse the return value.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the results of the following methods are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\"\u003eLINQ\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Any method on \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\"\u003ebuild-in types\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Any method on \u003ca href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections\"\u003eImmutable\n  collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpecial cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Although \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003e\u003ccode\u003estring.Intern\u003c/code\u003e\u003c/a\u003e has a side effect, ignoring\n  its return value is still suspicious as it is the only reference ensured to point to the intern pool. \u003c/li\u003e\n  \u003cli\u003e LINQ methods can have side effects if they are misused. For example: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ndata.All(x \u003d\u0026gt;\n{\n    x.Property \u003d \"foo\";\n    return true;\n});\n\u003c/pre\u003e\n\u003cp\u003eSuch code should be rewritten as a loop because \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003e\u003ccode\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/code\u003e\u003c/a\u003e method should be used to\ndetermine if all elements satisfy a condition and not to change their state.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report issues on invocations with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003e\u003ccode\u003eout\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003e\u003ccode\u003eref\u003c/code\u003e\u003c/a\u003e arguments.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndata.Where(x \u003d\u0026gt; x \u0026gt; 5).Select(x \u003d\u0026gt; x * x); // Noncompliant\n\"this string\".Equals(\"other string\"); // Noncompliant\n\ndata.All(x \u003d\u0026gt;  // Noncompliant\n{\n    x.Property \u003d \"foo\";\n    return true;\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar res \u003d data.Where(x \u003d\u0026gt; x \u0026gt; 5).Select(x \u003d\u0026gt; x * x);\nvar isEqual \u003d \"this string\".Equals(\"other string\");\n\nforeach (var x in data)\n{\n    x.Property \u003d \"foo\";\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePureAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003e\u003ccode\u003eout\u003c/code\u003e\n  parameter modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003e\u003ccode\u003eref\u003c/code\u003e keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003e\u003ccode\u003eString.Intern(String)\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\"\u003eLINQ\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\"\u003ebuild-in types\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections\"\u003eImmutable\n  collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.daniellittle.dev/dont-ignore-your-functions\"\u003eDon’t ignore your functions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you do not use the return value of a method with no side effects, it indicates that something is wrong. Either this method is unnecessary, or\nthe source code does not behave as expected and could lead to code defects. For example, there are methods, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.addyears\"\u003eDateTime.AddYears\u003c/a\u003e, that don’t change the value of the input object,\nbut instead, they return a new object whose value is the result of this operation, and as a result that you will have unexpected effects if you do not\nuse the return value.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the results of the following methods are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\"\u003eLINQ\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Any method on \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\"\u003ebuild-in types\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Any method on \u003ca href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections\"\u003eImmutable\n  collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpecial cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Although \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003e\u003ccode\u003estring.Intern\u003c/code\u003e\u003c/a\u003e has a side effect, ignoring\n  its return value is still suspicious as it is the only reference ensured to point to the intern pool. \u003c/li\u003e\n  \u003cli\u003e LINQ methods can have side effects if they are misused. For example: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ndata.All(x \u003d\u0026gt;\n{\n    x.Property \u003d \"foo\";\n    return true;\n});\n\u003c/pre\u003e\n\u003cp\u003eSuch code should be rewritten as a loop because \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003e\u003ccode\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/code\u003e\u003c/a\u003e method should be used to\ndetermine if all elements satisfy a condition and not to change their state.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t report issues on invocations with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003e\u003ccode\u003eout\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003e\u003ccode\u003eref\u003c/code\u003e\u003c/a\u003e arguments.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndata.Where(x \u003d\u0026gt; x \u0026gt; 5).Select(x \u003d\u0026gt; x * x); // Noncompliant\n\"this string\".Equals(\"other string\"); // Noncompliant\n\ndata.All(x \u003d\u0026gt;  // Noncompliant\n{\n    x.Property \u003d \"foo\";\n    return true;\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar res \u003d data.Where(x \u003d\u0026gt; x \u0026gt; 5).Select(x \u003d\u0026gt; x * x);\nvar isEqual \u003d \"this string\".Equals(\"other string\");\n\nforeach (var x in data)\n{\n    x.Property \u003d \"foo\";\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePureAttribute\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003e\u003ccode\u003eout\u003c/code\u003e\n  parameter modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003e\u003ccode\u003eref\u003c/code\u003e keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003e\u003ccode\u003eString.Intern(String)\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\"\u003eLINQ\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\"\u003ebuild-in types\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections\"\u003eImmutable\n  collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.daniellittle.dev/dont-ignore-your-functions\"\u003eDon’t ignore your functions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3532",
    "name": "Empty \"default\" clauses should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e clause should take appropriate action. Having an empty \u003ccode\u003edefault\u003c/code\u003e is a waste of keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:  //Noncompliant\n      break;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:\n      throw new NotSupportedException();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003edefault\u003c/code\u003e clauses containing only a comment are ignored with the assumption that they are empty on purpose and the comment documents\nwhy.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e clause should take appropriate action. Having an empty \u003ccode\u003edefault\u003c/code\u003e is a waste of keystrokes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:  //Noncompliant\n      break;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n    default:\n      throw new NotSupportedException();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine(\"apple\");\n      break;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003edefault\u003c/code\u003e clauses containing only a comment are ignored with the assumption that they are empty on purpose and the comment documents\nwhy.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2688",
    "name": "\"NaN\" should not be used in comparisons",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.double.nan\"\u003edouble.NaN\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.single.nan\"\u003efloat.NaN\u003c/a\u003e are not equal to anything, not even themselves.\u003c/p\u003e\n\u003cp\u003eWhen anything is compared with \u003ccode\u003eNaN\u003c/code\u003e using one of the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003ecomparison operators\u003c/a\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e⇐\u003c/code\u003e or the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators#equality-operator-\"\u003eequality operator\u003c/a\u003e\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e, the result will always be \u003ccode\u003efalse\u003c/code\u003e. In contrast, when anything is compared with \u003ccode\u003eNaN\u003c/code\u003e using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators#inequality-operator-\"\u003einequality operator\u003c/a\u003e\n\u003ccode\u003e!\u003d\u003c/code\u003e, the result will always be \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInstead, the best way to see whether a variable is equal to \u003ccode\u003eNaN\u003c/code\u003e is to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.single.isnan\"\u003efloat.IsNaN\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.double.isnan\"\u003edouble.IsNaN\u003c/a\u003e methods, which work as expected.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar a \u003d double.NaN;\n\nif (a \u003d\u003d double.NaN) // Noncompliant: always false\n{\n  Console.WriteLine(\"a is not a number\");\n}\nif (a !\u003d double.NaN)  // Noncompliant: always true\n{\n  Console.WriteLine(\"a is not NaN\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar a \u003d double.NaN;\n\nif (double.IsNaN(a))\n{\n  Console.WriteLine(\"a is not a number\");\n}\nif (!double.IsNaN(a))\n{\n  Console.WriteLine(\"a is not NaN\");\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.double.nan\"\u003edouble.NaN\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.single.nan\"\u003efloat.NaN\u003c/a\u003e are not equal to anything, not even themselves.\u003c/p\u003e\n\u003cp\u003eWhen anything is compared with \u003ccode\u003eNaN\u003c/code\u003e using one of the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\"\u003ecomparison operators\u003c/a\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e⇐\u003c/code\u003e or the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators#equality-operator-\"\u003eequality operator\u003c/a\u003e\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e, the result will always be \u003ccode\u003efalse\u003c/code\u003e. In contrast, when anything is compared with \u003ccode\u003eNaN\u003c/code\u003e using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators#inequality-operator-\"\u003einequality operator\u003c/a\u003e\n\u003ccode\u003e!\u003d\u003c/code\u003e, the result will always be \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInstead, the best way to see whether a variable is equal to \u003ccode\u003eNaN\u003c/code\u003e is to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.single.isnan\"\u003efloat.IsNaN\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.double.isnan\"\u003edouble.IsNaN\u003c/a\u003e methods, which work as expected.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar a \u003d double.NaN;\n\nif (a \u003d\u003d double.NaN) // Noncompliant: always false\n{\n  Console.WriteLine(\"a is not a number\");\n}\nif (a !\u003d double.NaN)  // Noncompliant: always true\n{\n  Console.WriteLine(\"a is not NaN\");\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar a \u003d double.NaN;\n\nif (double.IsNaN(a))\n{\n  Console.WriteLine(\"a is not a number\");\n}\nif (!double.IsNaN(a))\n{\n  Console.WriteLine(\"a is not NaN\");\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2325",
    "name": "Methods and properties that don\u0027t access instance data should be static",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods and properties that don’t access instance data can be \u003ccode\u003estatic\u003c/code\u003e to prevent any misunderstanding about the contract of the\nmethod.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Utilities\n{\n    public int MagicNum // Noncompliant\n    {\n        get\n        {\n            return 42;\n        }\n    }\n\n    private static string magicWord \u003d \"please\";\n    public string MagicWord  // Noncompliant\n    {\n        get\n        {\n            return magicWord;\n        }\n        set\n        {\n            magicWord \u003d value;\n        }\n  }\n\n    public int Sum(int a, int b)  // Noncompliant\n    {\n        return a + b;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Utilities\n{\n    public static int MagicNum\n    {\n        get\n        {\n            return 42;\n        }\n    }\n\n    private static string magicWord \u003d \"please\";\n    public static string MagicWord\n    {\n        get\n        {\n            return magicWord;\n        }\n        set\n        {\n            magicWord \u003d value;\n        }\n    }\n\n    public static int Sum(int a, int b)\n    {\n        return a + b;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods with the following names are excluded because they can’t be made \u003ccode\u003estatic\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Application_AuthenticateRequest \u003c/li\u003e\n  \u003cli\u003e Application_BeginRequest \u003c/li\u003e\n  \u003cli\u003e Application_End \u003c/li\u003e\n  \u003cli\u003e Application_EndRequest \u003c/li\u003e\n  \u003cli\u003e Application_Error \u003c/li\u003e\n  \u003cli\u003e Application_Init \u003c/li\u003e\n  \u003cli\u003e Application_Start \u003c/li\u003e\n  \u003cli\u003e Session_End \u003c/li\u003e\n  \u003cli\u003e Session_Start \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods and properties that don’t access instance data can be \u003ccode\u003estatic\u003c/code\u003e to prevent any misunderstanding about the contract of the\nmethod.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Utilities\n{\n    public int MagicNum // Noncompliant\n    {\n        get\n        {\n            return 42;\n        }\n    }\n\n    private static string magicWord \u003d \"please\";\n    public string MagicWord  // Noncompliant\n    {\n        get\n        {\n            return magicWord;\n        }\n        set\n        {\n            magicWord \u003d value;\n        }\n  }\n\n    public int Sum(int a, int b)  // Noncompliant\n    {\n        return a + b;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Utilities\n{\n    public static int MagicNum\n    {\n        get\n        {\n            return 42;\n        }\n    }\n\n    private static string magicWord \u003d \"please\";\n    public static string MagicWord\n    {\n        get\n        {\n            return magicWord;\n        }\n        set\n        {\n            magicWord \u003d value;\n        }\n    }\n\n    public static int Sum(int a, int b)\n    {\n        return a + b;\n    }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eMethods with the following names are excluded because they can’t be made \u003ccode\u003estatic\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Application_AuthenticateRequest \u003c/li\u003e\n  \u003cli\u003e Application_BeginRequest \u003c/li\u003e\n  \u003cli\u003e Application_End \u003c/li\u003e\n  \u003cli\u003e Application_EndRequest \u003c/li\u003e\n  \u003cli\u003e Application_Error \u003c/li\u003e\n  \u003cli\u003e Application_Init \u003c/li\u003e\n  \u003cli\u003e Application_Start \u003c/li\u003e\n  \u003cli\u003e Session_End \u003c/li\u003e\n  \u003cli\u003e Session_Start \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S6800",
    "name": "Component parameter type should match the route parameter type constraint",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn Blazor, when a \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#route-constraints\"\u003eroute parameter\nconstraint\u003c/a\u003e is applied, the value is automatically cast to the corresponding component parameter type. If the constraint type does not match the\ncomponent parameter type, it can lead to confusion and potential runtime errors due to unsuccessful casting. Therefore, it is crucial to ensure that\nthe types of route parameters and component parameters match to prevent such issues and maintain code clarity.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure the component parameter type matches the route parameter constraint type.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eConstraint Type\u003c/th\u003e\n      \u003cth\u003e.NET Type\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edatetime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eDateTime\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eguid\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eGuid\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@page \"/my-route/{Param:datetime}\"\n\n@code {\n    [Parameter]\n    public string Param { get; set; } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/my-route/{Param:datetime}\"\n\n@code {\n    [Parameter]\n    public DateTime Param { get; set; } // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#route-constraints\"\u003eBlazor routing and\n  navigation - Route Constraints\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Blazor, when a \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#route-constraints\"\u003eroute parameter\nconstraint\u003c/a\u003e is applied, the value is automatically cast to the corresponding component parameter type. If the constraint type does not match the\ncomponent parameter type, it can lead to confusion and potential runtime errors due to unsuccessful casting. Therefore, it is crucial to ensure that\nthe types of route parameters and component parameters match to prevent such issues and maintain code clarity.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure the component parameter type matches the route parameter constraint type.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eConstraint Type\u003c/th\u003e\n      \u003cth\u003e.NET Type\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ebool\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edatetime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eDateTime\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003edouble\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003efloat\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eguid\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eGuid\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eint\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003elong\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003estring\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n@page \"/my-route/{Param:datetime}\"\n\n@code {\n    [Parameter]\n    public string Param { get; set; } // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n@page \"/my-route/{Param:datetime}\"\n\n@code {\n    [Parameter]\n    public DateTime Param { get; set; } // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing#route-constraints\"\u003eBlazor routing and\n  navigation - Route Constraints\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "blazor"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3898",
    "name": "Value types should implement \"IEquatable\u003cT\u003e\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf you’re using a \u003ccode\u003estruct\u003c/code\u003e, it is likely because you’re interested in performance. But by failing to implement\n\u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e you’re loosing performance when comparisons are made because without \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e, boxing and\nreflection are used to make comparisons.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstruct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstruct MyStruct : IEquatable\u0026lt;MyStruct\u0026gt;\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1\"\u003eIEquatable\u0026lt;T\u0026gt; Interface\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf you’re using a \u003ccode\u003estruct\u003c/code\u003e, it is likely because you’re interested in performance. But by failing to implement\n\u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e you’re loosing performance when comparisons are made because without \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e, boxing and\nreflection are used to make comparisons.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstruct MyStruct  // Noncompliant\n{\n    public int Value { get; set; }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstruct MyStruct : IEquatable\u0026lt;MyStruct\u0026gt;\n{\n    public int Value { get; set; }\n\n    public bool Equals(MyStruct other)\n    {\n        // ...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1\"\u003eIEquatable\u0026lt;T\u0026gt; Interface\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3897",
    "name": "Classes that provide \"Equals(\u003cT\u003e)\" should implement \"IEquatable\u003cT\u003e\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e interface has only one method in it: \u003ccode\u003eEquals(\u0026lt;T\u0026gt;)\u003c/code\u003e. If you’ve already written\n\u003ccode\u003eEquals(T)\u003c/code\u003e, there’s no reason not to explicitly implement \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e. Doing so expands the utility of your class by\nallowing it to be used where an \u003ccode\u003eIEquatable\u003c/code\u003e is called for.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Classes that implement \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e should also be \u003ccode\u003esealed\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass  // Noncompliant\n{\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass : IEquatable\u0026lt;MyClass\u0026gt;\n{\n  public override bool Equals(object other)\n  {\n    return Equals(other as MyClass);\n  }\n\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e interface has only one method in it: \u003ccode\u003eEquals(\u0026lt;T\u0026gt;)\u003c/code\u003e. If you’ve already written\n\u003ccode\u003eEquals(T)\u003c/code\u003e, there’s no reason not to explicitly implement \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e. Doing so expands the utility of your class by\nallowing it to be used where an \u003ccode\u003eIEquatable\u003c/code\u003e is called for.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Classes that implement \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e should also be \u003ccode\u003esealed\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass  // Noncompliant\n{\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nsealed class MyClass : IEquatable\u0026lt;MyClass\u0026gt;\n{\n  public override bool Equals(object other)\n  {\n    return Equals(other as MyClass);\n  }\n\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3776",
    "name": "Cognitive Complexity of methods should not be too high",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReducing cognitive complexity can be challenging.\u003cbr\u003e Here are a few suggestions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eExtract complex conditions in a new function.\u003c/strong\u003e\u003cbr\u003e Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003cbr\u003e Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003cbr\u003e To avoid the nesting of conditions, process exceptional cases first and return\n  early. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eUse null-safe operations (if available in the language).\u003c/strong\u003e\u003cbr\u003e When available the \u003ccode\u003e.?\u003c/code\u003e or \u003ccode\u003e??\u003c/code\u003e operator\n  replaces multiple tests and simplifies the flow. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExtraction of a complex condition in a new function.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe code is using a complex condition and has a cognitive cost of 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateFinalPrice(User user, Cart cart)\n{\n    decimal total \u003d CalculateTotal(cart);\n    if (user.HasMembership()               // +1 (if)\n        \u0026amp;\u0026amp; user.OrdersCount \u0026gt; 10           // +1 (more than one condition)\n        \u0026amp;\u0026amp; user.AccountActive\n        \u0026amp;\u0026amp; !user.HasDiscount\n        || user.OrdersCount \u003d\u003d 1)          // +1 (change of operator in condition)\n    {\n\n        total \u003d ApplyDiscount(user, total);\n    }\n    return total;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEven if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n\u003ccode\u003ecalculateFinalPrice\u003c/code\u003e function, which now only has a cognitive cost of 1.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateFinalPrice(User user, Cart cart)\n{\n    decimal total \u003d CalculateTotal(cart);\n    if (IsEligibleForDiscount(user))       // +1 (if)\n    {\n        total \u003d applyDiscount(user, total);\n    }\n    return total;\n}\n\nbool IsEligibleForDiscount(User user)\n{\n    return user.HasMembership()\n            \u0026amp;\u0026amp; user.OrdersCount \u0026gt; 10       // +1 (more than one condition)\n            \u0026amp;\u0026amp; user.AccountActive\n            \u0026amp;\u0026amp; !user.HasDiscount\n            || user.OrdersCount \u003d\u003d 1;      // +1 (change of operator in condition)\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the \u003ccode\u003eforeach\u003c/code\u003e loops.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateTotal(Cart cart)\n{\n    decimal total \u003d 0;\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d item.Price;\n    }\n\n    // calculateSalesTax\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d 0.2m * item.Price;\n    }\n\n    //calculateShipping\n    total +\u003d 5m * cart.Items.Count;\n\n    return total;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n\u003ccode\u003eCalculateTotal\u003c/code\u003e has now a complexity score of zero.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateTotal(Cart cart)\n{\n    decimal total \u003d 0;\n    total \u003d CalculateSubtotal(cart, total);\n    total +\u003d CalculateSalesTax(cart, total);\n    total +\u003d CalculateShipping(cart, total);\n    return total;\n}\n\ndecimal CalculateSubtotal(Cart cart, decimal total)\n{\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d item.Price;\n    }\n\n    return total;\n}\n\ndecimal CalculateSalesTax(Cart cart, decimal total)\n{\n    foreach (Item item in cart.Items)  // +1 (foreach)\n    {\n        total +\u003d 0.2m * item.Price;\n    }\n\n    return total;\n}\n\ndecimal CalculateShipping(Cart cart, decimal total)\n{\n    total +\u003d 5m * cart.Items.Count;\n    return total;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe below code has a cognitive complexity of 6.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateDiscount(decimal price, User user)\n{\n    if (IsEligibleForDiscount(user))    // +1 ( if )\n    {\n        if (user.HasMembership())       // +2 ( nested if )\n        {\n            return price * 0.9m;\n        }\n        else if (user.OrdersCount \u003d\u003d 1) // +1 ( else )\n        {\n            return price * 0.95m;\n        }\n        else                            // +1 ( else )\n        {\n            return price;\n        }\n    }\n    else                                // +1 ( else )\n    {\n        return price;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eChecking for the edge case first flattens the \u003ccode\u003eif\u003c/code\u003e statements and reduces the cognitive complexity to 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateDiscount(decimal price, User user)\n{\n    if (!IsEligibleForDiscount(user)) // +1 ( if )\n    {\n        return price;\n    }\n\n    if (user.HasMembership())         // +1 (  if )\n    {\n        return price * 0.9m;\n    }\n\n    if (user.OrdersCount \u003d\u003d 1)        // +1 ( else )\n    {\n        return price * 0.95m;\n    }\n\n    return price;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eUse the null-conditional operator to access data.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the below code, the cognitive complexity is increased due to the multiple checks required to access the manufacturer’s name. This can be\nsimplified using the optional chaining operator.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nstring GetManufacturerName(Product product)\n{\n    string manufacturerName \u003d null;\n    if (product !\u003d null \u0026amp;\u0026amp; product.Details !\u003d null \u0026amp;\u0026amp;\n        product.Details.Manufacturer !\u003d null) // +1 (if) +1 (multiple condition)\n    {\n        manufacturerName \u003d product.Details.Manufacturer.Name;\n    }\n\n    if (manufacturerName !\u003d null) // +1 (if)\n    {\n        return manufacturerName;\n    }\n\n    return \"Unknown\";\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe optional chaining operator will return \u003ccode\u003enull\u003c/code\u003e if any reference in the chain is \u003ccode\u003enull\u003c/code\u003e, avoiding multiple checks. The\n\u003ccode\u003e??\u003c/code\u003e operator allows to provide the default value to use.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nstring GetManufacturerName(Product product)\n{\n    return product?.Details?.Manufacturer?.Name ?? \"Unknown\";\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eAs this code is complex, ensure that you have unit tests that cover the code before refactoring.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReducing cognitive complexity can be challenging.\u003cbr\u003e Here are a few suggestions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eExtract complex conditions in a new function.\u003c/strong\u003e\u003cbr\u003e Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003cbr\u003e Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003cbr\u003e To avoid the nesting of conditions, process exceptional cases first and return\n  early. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eUse null-safe operations (if available in the language).\u003c/strong\u003e\u003cbr\u003e When available the \u003ccode\u003e.?\u003c/code\u003e or \u003ccode\u003e??\u003c/code\u003e operator\n  replaces multiple tests and simplifies the flow. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eExtraction of a complex condition in a new function.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe code is using a complex condition and has a cognitive cost of 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateFinalPrice(User user, Cart cart)\n{\n    decimal total \u003d CalculateTotal(cart);\n    if (user.HasMembership()               // +1 (if)\n        \u0026amp;\u0026amp; user.OrdersCount \u0026gt; 10           // +1 (more than one condition)\n        \u0026amp;\u0026amp; user.AccountActive\n        \u0026amp;\u0026amp; !user.HasDiscount\n        || user.OrdersCount \u003d\u003d 1)          // +1 (change of operator in condition)\n    {\n\n        total \u003d ApplyDiscount(user, total);\n    }\n    return total;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEven if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n\u003ccode\u003ecalculateFinalPrice\u003c/code\u003e function, which now only has a cognitive cost of 1.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateFinalPrice(User user, Cart cart)\n{\n    decimal total \u003d CalculateTotal(cart);\n    if (IsEligibleForDiscount(user))       // +1 (if)\n    {\n        total \u003d applyDiscount(user, total);\n    }\n    return total;\n}\n\nbool IsEligibleForDiscount(User user)\n{\n    return user.HasMembership()\n            \u0026amp;\u0026amp; user.OrdersCount \u0026gt; 10       // +1 (more than one condition)\n            \u0026amp;\u0026amp; user.AccountActive\n            \u0026amp;\u0026amp; !user.HasDiscount\n            || user.OrdersCount \u003d\u003d 1;      // +1 (change of operator in condition)\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the \u003ccode\u003eforeach\u003c/code\u003e loops.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateTotal(Cart cart)\n{\n    decimal total \u003d 0;\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d item.Price;\n    }\n\n    // calculateSalesTax\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d 0.2m * item.Price;\n    }\n\n    //calculateShipping\n    total +\u003d 5m * cart.Items.Count;\n\n    return total;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n\u003ccode\u003eCalculateTotal\u003c/code\u003e has now a complexity score of zero.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateTotal(Cart cart)\n{\n    decimal total \u003d 0;\n    total \u003d CalculateSubtotal(cart, total);\n    total +\u003d CalculateSalesTax(cart, total);\n    total +\u003d CalculateShipping(cart, total);\n    return total;\n}\n\ndecimal CalculateSubtotal(Cart cart, decimal total)\n{\n    foreach (Item item in cart.Items) // +1 (foreach)\n    {\n        total +\u003d item.Price;\n    }\n\n    return total;\n}\n\ndecimal CalculateSalesTax(Cart cart, decimal total)\n{\n    foreach (Item item in cart.Items)  // +1 (foreach)\n    {\n        total +\u003d 0.2m * item.Price;\n    }\n\n    return total;\n}\n\ndecimal CalculateShipping(Cart cart, decimal total)\n{\n    total +\u003d 5m * cart.Items.Count;\n    return total;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe below code has a cognitive complexity of 6.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\ndecimal CalculateDiscount(decimal price, User user)\n{\n    if (IsEligibleForDiscount(user))    // +1 ( if )\n    {\n        if (user.HasMembership())       // +2 ( nested if )\n        {\n            return price * 0.9m;\n        }\n        else if (user.OrdersCount \u003d\u003d 1) // +1 ( else )\n        {\n            return price * 0.95m;\n        }\n        else                            // +1 ( else )\n        {\n            return price;\n        }\n    }\n    else                                // +1 ( else )\n    {\n        return price;\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eChecking for the edge case first flattens the \u003ccode\u003eif\u003c/code\u003e statements and reduces the cognitive complexity to 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\ndecimal CalculateDiscount(decimal price, User user)\n{\n    if (!IsEligibleForDiscount(user)) // +1 ( if )\n    {\n        return price;\n    }\n\n    if (user.HasMembership())         // +1 (  if )\n    {\n        return price * 0.9m;\n    }\n\n    if (user.OrdersCount \u003d\u003d 1)        // +1 ( else )\n    {\n        return price * 0.95m;\n    }\n\n    return price;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eUse the null-conditional operator to access data.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the below code, the cognitive complexity is increased due to the multiple checks required to access the manufacturer’s name. This can be\nsimplified using the optional chaining operator.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nstring GetManufacturerName(Product product)\n{\n    string manufacturerName \u003d null;\n    if (product !\u003d null \u0026amp;\u0026amp; product.Details !\u003d null \u0026amp;\u0026amp;\n        product.Details.Manufacturer !\u003d null) // +1 (if) +1 (multiple condition)\n    {\n        manufacturerName \u003d product.Details.Manufacturer.Name;\n    }\n\n    if (manufacturerName !\u003d null) // +1 (if)\n    {\n        return manufacturerName;\n    }\n\n    return \"Unknown\";\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe optional chaining operator will return \u003ccode\u003enull\u003c/code\u003e if any reference in the chain is \u003ccode\u003enull\u003c/code\u003e, avoiding multiple checks. The\n\u003ccode\u003e??\u003c/code\u003e operator allows to provide the default value to use.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nstring GetManufacturerName(Product product)\n{\n    return product?.Details?.Manufacturer?.Name ?? \"Unknown\";\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eAs this code is complex, ensure that you have unit tests that cover the code before refactoring.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "The maximum authorized complexity.",
        "defaultValue": "15",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      },
      "propertyThreshold": {
        "key": "propertyThreshold",
        "name": "propertyThreshold",
        "description": "The maximum authorized complexity in a property.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "threshold": "15",
      "propertyThreshold": "3"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2445",
    "name": "Blocks should be synchronized on read-only fields",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLocking\u003c/a\u003e on a class field synchronizes not on the\nfield itself, but on the object assigned to it. Thus, there are some good practices to follow to avoid problems related to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading\"\u003ethread\u003c/a\u003e synchronization.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Locking on a non-\u003ccode\u003ereadonly\u003c/code\u003e field makes it possible for the field’s value to change while a thread is in the code block, locked on the old value. This allows another thread to lock on the new value and access the same block concurrently. \u003cpre\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate void DoSomething()\n{\n  // Synchronizing access via \"color\"\n  lock (color) // Noncompliant: lock is actually on object instance \"red\" referred to by the \"color\" field\n  {\n    //...\n    color \u003d new Color(\"green\"); // other threads now allowed into this block\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Locking on a new instance of an object undermines synchronization because two different threads running the same method in parallel will lock on different instances of the same object, allowing them to access the synchronized block at the same time. \u003cpre\u003e\nprivate void DoSomething()\n{\n  lock (new object()) // Noncompliant: every thread locks on a different new instance\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Locking on a string literal is also dangerous since, depending on whether the string is interned or not, different threads may or may not synchronize on the same object instance. \u003cpre\u003e\nprivate readonly string colorString \u003d \"red\";\nprivate void DoSomething()\n{\n  lock (colorString)  // Noncompliant: strings can be interned\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate void DoSomething()\n{\n  // Synchronizing access via \"color\"\n  lock (color) // Noncompliant: lock is actually on object instance \"red\" referred to by the \"color\" field\n  {\n    //...\n    color \u003d new Color(\"green\"); // other threads now allowed into this block\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate readonly object lockObj \u003d new object();\n\nprivate void DoSomething()\n{\n  lock (lockObj)\n  {\n    //...\n    color \u003d new Color(\"green\");\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLock Statement\u003c/a\u003e - lock statement - ensure\n  exclusive access to a shared resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003eString.Intern\u003c/a\u003e - \u003ccode\u003eString.Intern(String)\u003c/code\u003e Method \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/412\"\u003eCWE-412 - Unrestricted Externally Accessible Lock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/413\"\u003eCWE-413 - Improper Resource Locking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading\"\u003eThreads and threading\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLocking\u003c/a\u003e on a class field synchronizes not on the\nfield itself, but on the object assigned to it. Thus, there are some good practices to follow to avoid problems related to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading\"\u003ethread\u003c/a\u003e synchronization.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Locking on a non-\u003ccode\u003ereadonly\u003c/code\u003e field makes it possible for the field’s value to change while a thread is in the code block, locked on the old value. This allows another thread to lock on the new value and access the same block concurrently. \u003cpre\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate void DoSomething()\n{\n  // Synchronizing access via \"color\"\n  lock (color) // Noncompliant: lock is actually on object instance \"red\" referred to by the \"color\" field\n  {\n    //...\n    color \u003d new Color(\"green\"); // other threads now allowed into this block\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Locking on a new instance of an object undermines synchronization because two different threads running the same method in parallel will lock on different instances of the same object, allowing them to access the synchronized block at the same time. \u003cpre\u003e\nprivate void DoSomething()\n{\n  lock (new object()) // Noncompliant: every thread locks on a different new instance\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Locking on a string literal is also dangerous since, depending on whether the string is interned or not, different threads may or may not synchronize on the same object instance. \u003cpre\u003e\nprivate readonly string colorString \u003d \"red\";\nprivate void DoSomething()\n{\n  lock (colorString)  // Noncompliant: strings can be interned\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate void DoSomething()\n{\n  // Synchronizing access via \"color\"\n  lock (color) // Noncompliant: lock is actually on object instance \"red\" referred to by the \"color\" field\n  {\n    //...\n    color \u003d new Color(\"green\"); // other threads now allowed into this block\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprivate Color color \u003d new Color(\"red\");\nprivate readonly object lockObj \u003d new object();\n\nprivate void DoSomething()\n{\n  lock (lockObj)\n  {\n    //...\n    color \u003d new Color(\"green\");\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003eLock Statement\u003c/a\u003e - lock statement - ensure\n  exclusive access to a shared resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern\"\u003eString.Intern\u003c/a\u003e - \u003ccode\u003eString.Intern(String)\u003c/code\u003e Method \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/412\"\u003eCWE-412 - Unrestricted Externally Accessible Lock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/413\"\u003eCWE-413 - Improper Resource Locking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/threads-and-threading\"\u003eThreads and threading\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3655",
    "name": "Empty nullable value should not be accessed",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable value types\u003c/a\u003e can hold either a value or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe value held in the nullable type can be accessed with the \u003ccode\u003eValue\u003c/code\u003e property or by casting it to the underlying type. Still, both\noperations throw an \u003ccode\u003eInvalidOperationException\u003c/code\u003e when the value is \u003ccode\u003enull\u003c/code\u003e. A nullable type should always be tested before\naccessing the value to avoid raising exceptions.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Sample(bool condition)\n{\n    int? nullableValue \u003d condition ? 42 : null;\n    Console.WriteLine(nullableValue.Value); // Noncompliant: InvalidOperationException is raised\n\n    int? nullableCast \u003d condition ? 42 : null;\n    Console.WriteLine((int)nullableCast);   // Noncompliant: InvalidOperationException is raised\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Sample(bool condition)\n{\n    int? nullableValue \u003d condition ? 42 : null;\n    if (nullableValue.HasValue)\n    {\n      Console.WriteLine(nullableValue.Value);\n    }\n\n    int? nullableCast \u003d condition ? 42 : null;\n    if (nullableCast is not null)\n    {\n      Console.WriteLine((int)nullableCast);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable value types\u003c/a\u003e can hold either a value or \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe value held in the nullable type can be accessed with the \u003ccode\u003eValue\u003c/code\u003e property or by casting it to the underlying type. Still, both\noperations throw an \u003ccode\u003eInvalidOperationException\u003c/code\u003e when the value is \u003ccode\u003enull\u003c/code\u003e. A nullable type should always be tested before\naccessing the value to avoid raising exceptions.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Sample(bool condition)\n{\n    int? nullableValue \u003d condition ? 42 : null;\n    Console.WriteLine(nullableValue.Value); // Noncompliant: InvalidOperationException is raised\n\n    int? nullableCast \u003d condition ? 42 : null;\n    Console.WriteLine((int)nullableCast);   // Noncompliant: InvalidOperationException is raised\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Sample(bool condition)\n{\n    int? nullableValue \u003d condition ? 42 : null;\n    if (nullableValue.HasValue)\n    {\n      Console.WriteLine(nullableValue.Value);\n    }\n\n    int? nullableCast \u003d condition ? 42 : null;\n    if (nullableCast is not null)\n    {\n      Console.WriteLine((int)nullableCast);\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3449",
    "name": "Right operands of shift operators should be integers",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNumbers can be shifted with the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eoperators\u003c/a\u003e,\nbut the right operand of the operation needs to be an \u003ccode\u003eint\u003c/code\u003e or a type that has an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#102-implicit-conversions\"\u003eimplicit\nconversion\u003c/a\u003e to \u003ccode\u003eint\u003c/code\u003e. However, when the left operand is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interop/using-type-dynamic\"\u003edynamic\u003c/a\u003e, the compiler’s type checking is turned\noff, so you can pass anything to the right of a shift operator and have it compile. And if the argument can’t be implicitly converted to\n\u003ccode\u003eint\u003c/code\u003e at runtime, then a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException\u003c/a\u003e will be\nraised.\u003c/p\u003e\n\u003cpre\u003e\ndynamic d \u003d 5;\nvar x \u003d d \u0026gt;\u0026gt; 5.4;   // Noncompliant\nx \u003d d \u0026lt;\u0026lt; null;      // Noncompliant\nx \u0026lt;\u0026lt;\u003d new object(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eShift\n  Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#102-implicit-conversions\"\u003eImplicit\n  Conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException Class\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interop/using-type-dynamic\"\u003eUsing type dynamic\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNumbers can be shifted with the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eoperators\u003c/a\u003e,\nbut the right operand of the operation needs to be an \u003ccode\u003eint\u003c/code\u003e or a type that has an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#102-implicit-conversions\"\u003eimplicit\nconversion\u003c/a\u003e to \u003ccode\u003eint\u003c/code\u003e. However, when the left operand is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interop/using-type-dynamic\"\u003edynamic\u003c/a\u003e, the compiler’s type checking is turned\noff, so you can pass anything to the right of a shift operator and have it compile. And if the argument can’t be implicitly converted to\n\u003ccode\u003eint\u003c/code\u003e at runtime, then a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException\u003c/a\u003e will be\nraised.\u003c/p\u003e\n\u003cpre\u003e\ndynamic d \u003d 5;\nvar x \u003d d \u0026gt;\u0026gt; 5.4;   // Noncompliant\nx \u003d d \u0026lt;\u0026lt; null;      // Noncompliant\nx \u0026lt;\u0026lt;\u003d new object(); // Noncompliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\"\u003eShift\n  Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions#102-implicit-conversions\"\u003eImplicit\n  Conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException Class\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interop/using-type-dynamic\"\u003eUsing type dynamic\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3329",
    "name": "Cipher Block Chaining IVs should be unpredictable",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).\u003c/p\u003e\n\u003cp\u003eIf the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, a company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic void Encrypt(byte[] key, byte[] dataToEncrypt, MemoryStream target)\n{\n    var aes \u003d new AesCryptoServiceProvider();\n\n    byte[] iv     \u003d new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n    var encryptor \u003d aes.CreateEncryptor(key, iv); // Noncompliant\n\n    var cryptoStream \u003d new CryptoStream(target, encryptor, CryptoStreamMode.Write);\n    var swEncrypt    \u003d new StreamWriter(cryptoStream);\n\n    swEncrypt.Write(dataToEncrypt);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eIn this example, the code implicitly uses a number generator that is considered \u003cstrong\u003estrong\u003c/strong\u003e, thanks to \u003ccode\u003eaes.IV\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic void Encrypt(byte[] key, byte[] dataToEncrypt, MemoryStream target)\n{\n    var aes \u003d new AesCryptoServiceProvider();\n\n    var encryptor \u003d aes.CreateEncryptor(key, aes.IV);\n\n    var cryptoStream \u003d new CryptoStream(target, encryptor, CryptoStreamMode.Write);\n    var swEncrypt    \u003d new StreamWriter(cryptoStream);\n\n    swEncrypt.Write(dataToEncrypt);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse unique IVs\u003c/h4\u003e\n\u003cp\u003eTo ensure high security, initialization vectors must meet two important criteria:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e IVs must be unique for each encryption operation. \u003c/li\u003e\n  \u003cli\u003e For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.\u003c/p\u003e\n\u003cp\u003eIn the previous non-compliant example, the problem is not that the IV is hard-coded.\u003cbr\u003e It is that the same IV is used for multiple encryption\nattempts.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/329\"\u003eCWE-329 - Not Using an Unpredictable IV with CBC Mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\"\u003eNIST, SP-800-38A\u003c/a\u003e - Recommendation for Block Cipher\n  Modes of Operation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).\u003c/p\u003e\n\u003cp\u003eIf the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, a company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic void Encrypt(byte[] key, byte[] dataToEncrypt, MemoryStream target)\n{\n    var aes \u003d new AesCryptoServiceProvider();\n\n    byte[] iv     \u003d new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n    var encryptor \u003d aes.CreateEncryptor(key, iv); // Noncompliant\n\n    var cryptoStream \u003d new CryptoStream(target, encryptor, CryptoStreamMode.Write);\n    var swEncrypt    \u003d new StreamWriter(cryptoStream);\n\n    swEncrypt.Write(dataToEncrypt);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eIn this example, the code implicitly uses a number generator that is considered \u003cstrong\u003estrong\u003c/strong\u003e, thanks to \u003ccode\u003eaes.IV\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nusing System.IO;\nusing System.Security.Cryptography;\n\npublic void Encrypt(byte[] key, byte[] dataToEncrypt, MemoryStream target)\n{\n    var aes \u003d new AesCryptoServiceProvider();\n\n    var encryptor \u003d aes.CreateEncryptor(key, aes.IV);\n\n    var cryptoStream \u003d new CryptoStream(target, encryptor, CryptoStreamMode.Write);\n    var swEncrypt    \u003d new StreamWriter(cryptoStream);\n\n    swEncrypt.Write(dataToEncrypt);\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse unique IVs\u003c/h4\u003e\n\u003cp\u003eTo ensure high security, initialization vectors must meet two important criteria:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e IVs must be unique for each encryption operation. \u003c/li\u003e\n  \u003cli\u003e For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.\u003c/p\u003e\n\u003cp\u003eIn the previous non-compliant example, the problem is not that the IV is hard-coded.\u003cbr\u003e It is that the same IV is used for multiple encryption\nattempts.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/329\"\u003eCWE-329 - Not Using an Unpredictable IV with CBC Mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\"\u003eNIST, SP-800-38A\u003c/a\u003e - Recommendation for Block Cipher\n  Modes of Operation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S881",
    "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3441",
    "name": "Redundant property names should be omitted in anonymous classes",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an anonymous type’s properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type’s\nproperty name and the assignment operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar X \u003d 5;\n\nvar anon \u003d new\n{\n  X \u003d X, //Noncompliant, the new object would have the same property without the \"X \u003d\" part.\n  Y \u003d \"my string\"\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar X \u003d 5;\n\nvar anon \u003d new\n{\n  X,\n  Y \u003d \"my string\"\n};\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an anonymous type’s properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type’s\nproperty name and the assignment operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar X \u003d 5;\n\nvar anon \u003d new\n{\n  X \u003d X, //Noncompliant, the new object would have the same property without the \"X \u003d\" part.\n  Y \u003d \"my string\"\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar X \u003d 5;\n\nvar anon \u003d new\n{\n  X,\n  Y \u003d \"my string\"\n};\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy",
      "finding"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3440",
    "name": "Variables should not be checked against the values they\u0027re about to be assigned",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in checking a variable against the value you’re about to assign it. Save the cycles and lines of code, and simply perform the\nassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x !\u003d a)  // Noncompliant; why bother?\n{\n    x \u003d a;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nx \u003d a;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eProperties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to\nundesired side effects.\u003c/p\u003e\n\u003cpre\u003e\nif (MyProperty !\u003d a)\n{\n    MyProperty \u003d a; // Compliant because the setter could be expensive call\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nprivate int myField;\npublic int SomeProperty\n{\n    get\n    {\n        return myField;\n    }\n    set\n    {\n        if (myField !\u003d value)\n        {\n            myField \u003d value;\n        }\n    }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in checking a variable against the value you’re about to assign it. Save the cycles and lines of code, and simply perform the\nassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x !\u003d a)  // Noncompliant; why bother?\n{\n    x \u003d a;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nx \u003d a;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eProperties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to\nundesired side effects.\u003c/p\u003e\n\u003cpre\u003e\nif (MyProperty !\u003d a)\n{\n    MyProperty \u003d a; // Compliant because the setter could be expensive call\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nprivate int myField;\npublic int SomeProperty\n{\n    get\n    {\n        return myField;\n    }\n    set\n    {\n        if (myField !\u003d value)\n        {\n            myField \u003d value;\n        }\n    }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3443",
    "name": "Type should not be examined on \"System.Type\" instances",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on a \u003ccode\u003eType\u003c/code\u003e variable will always return the \u003ccode\u003eSystem.Type\u003c/code\u003e representation, which is equivalent to\n\u003ccode\u003etypeof(System.Type)\u003c/code\u003e. This also applies to passing a \u003ccode\u003eType\u003c/code\u003e argument to \u003ccode\u003eIsInstanceOfType\u003c/code\u003e which always returns\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn both cases, the results are entirely predictable and should be avoided.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on \u003ccode\u003eSystem.Type\u003c/code\u003e is considered compliant to get an instance of \u003ccode\u003eSystem.RuntimeType\u003c/code\u003e, as\ndemonstrated in the following example:\u003c/p\u003e\n\u003cpre\u003e\ntypeof(Type).GetType(); // Can be used by convention to get an instance of \u0027System.RuntimeType\u0027\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMake sure the usage of \u003ccode\u003eGetType\u003c/code\u003e or \u003ccode\u003eIsInstanceOfType\u003c/code\u003e is invoked with the correct variable or argument type.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid ExamineSystemType(string str)\n{\n    Type stringType \u003d str.GetType();\n    Type runtimeType \u003d stringType.GetType(); // Noncompliant\n\n    if (stringType.IsInstanceOfType(typeof(string))) // Noncompliant; will always return false\n    { /* ... */ }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid ExamineSystemType(string str)\n{\n    Type stringType \u003d str.GetType();\n\n    if (stringType.IsInstanceOfType(str)) // Compliant\n    { /* ... */ }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003e\"Type\" class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003e\"GetType\" Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type.isinstanceoftype\"\u003e\"IsInstanceOfType\" Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/5737947\"\u003eDifference between \"System.Type\" and \"System.RuntimeType\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on a \u003ccode\u003eType\u003c/code\u003e variable will always return the \u003ccode\u003eSystem.Type\u003c/code\u003e representation, which is equivalent to\n\u003ccode\u003etypeof(System.Type)\u003c/code\u003e. This also applies to passing a \u003ccode\u003eType\u003c/code\u003e argument to \u003ccode\u003eIsInstanceOfType\u003c/code\u003e which always returns\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn both cases, the results are entirely predictable and should be avoided.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCalling \u003ccode\u003eGetType\u003c/code\u003e on \u003ccode\u003eSystem.Type\u003c/code\u003e is considered compliant to get an instance of \u003ccode\u003eSystem.RuntimeType\u003c/code\u003e, as\ndemonstrated in the following example:\u003c/p\u003e\n\u003cpre\u003e\ntypeof(Type).GetType(); // Can be used by convention to get an instance of \u0027System.RuntimeType\u0027\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMake sure the usage of \u003ccode\u003eGetType\u003c/code\u003e or \u003ccode\u003eIsInstanceOfType\u003c/code\u003e is invoked with the correct variable or argument type.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid ExamineSystemType(string str)\n{\n    Type stringType \u003d str.GetType();\n    Type runtimeType \u003d stringType.GetType(); // Noncompliant\n\n    if (stringType.IsInstanceOfType(typeof(string))) // Noncompliant; will always return false\n    { /* ... */ }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid ExamineSystemType(string str)\n{\n    Type stringType \u003d str.GetType();\n\n    if (stringType.IsInstanceOfType(str)) // Compliant\n    { /* ... */ }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003e\"Type\" class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.gettype\"\u003e\"GetType\" Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type.isinstanceoftype\"\u003e\"IsInstanceOfType\" Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/5737947\"\u003eDifference between \"System.Type\" and \"System.RuntimeType\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1264",
    "name": "A \"while\" loop should be used instead of a \"for\" loop",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, and the initialization and increment expressions are missing, a\n\u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (;condition;) { /*...*/ }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, and the initialization and increment expressions are missing, a\n\u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (;condition;) { /*...*/ }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3442",
    "name": "\"abstract\" classes should not have \"public\" constructors",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\"\u003eabstract\u003c/a\u003e modifier in a class declaration is\nused to indicate that a class is intended only to be a base class of other classes, not instantiated on its own.\u003c/p\u003e\n\u003cp\u003eSince \u003ccode\u003eabstract\u003c/code\u003e classes cannot be instantiated, there is no need for \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e constructors. If\nthere is basic initialization logic that should run when an extending class instance is created, you can add it in a \u003ccode\u003eprivate\u003c/code\u003e,\n\u003ccode\u003eprivate protected\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e constructor.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRestrict the constructor visibility to the minimum: \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003eprivate protected\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e, depending on\nthe usage.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nabstract class Base\n{\n    public Base() // Noncompliant: should be private, private protected or protected.\n    {\n      //...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nabstract class Base\n{\n    protected Base()\n    {\n      //...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\"\u003eabstract keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Abstract_type\"\u003eabstract type\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\"\u003eabstract\u003c/a\u003e modifier in a class declaration is\nused to indicate that a class is intended only to be a base class of other classes, not instantiated on its own.\u003c/p\u003e\n\u003cp\u003eSince \u003ccode\u003eabstract\u003c/code\u003e classes cannot be instantiated, there is no need for \u003ccode\u003epublic\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e constructors. If\nthere is basic initialization logic that should run when an extending class instance is created, you can add it in a \u003ccode\u003eprivate\u003c/code\u003e,\n\u003ccode\u003eprivate protected\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e constructor.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRestrict the constructor visibility to the minimum: \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003eprivate protected\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e, depending on\nthe usage.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nabstract class Base\n{\n    public Base() // Noncompliant: should be private, private protected or protected.\n    {\n      //...\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nabstract class Base\n{\n    protected Base()\n    {\n      //...\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\"\u003eabstract keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Abstract_type\"\u003eabstract type\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1144",
    "name": "Unused private types or members should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule raises an issue when a private/internal type or member is never referenced in the code.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA type or member that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase,\nmaking it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eThis rule detects type or members that are never referenced from inside a translation unit, and cannot be referenced from the outside.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    private void UnusedPrivateMethod(){...} // Noncompliant, this private method is unused and can be removed.\n\n    private class UnusedClass {...} // Noncompliant, unused private class that can be removed.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    public Foo()\n    {\n        UsedPrivateMethod();\n    }\n\n    private void UsedPrivateMethod()\n    {\n        var c \u003d new UsedClass();\n    }\n\n    private class UsedClass {...}\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise issues on:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty constructors \u003c/li\u003e\n  \u003cli\u003e members with attributes \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003eMain\u003c/code\u003e method of the application \u003c/li\u003e\n  \u003cli\u003e methods with event handler signature \u003ccode\u003evoid Foo(object, EventArgs)\u003c/code\u003e that are declared in partial class \u003c/li\u003e\n  \u003cli\u003e empty serialization constructor on type with \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003eSystem.SerializableAttribute\u003c/a\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e internal members in assemblies that have a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute\"\u003eSystem.Runtime.CompilerServices.InternalsVisibleToAttribute\u003c/a\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess Modifiers (C#\n  Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a private/internal type or member is never referenced in the code.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA type or member that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase,\nmaking it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eThis rule detects type or members that are never referenced from inside a translation unit, and cannot be referenced from the outside.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Foo\n{\n    private void UnusedPrivateMethod(){...} // Noncompliant, this private method is unused and can be removed.\n\n    private class UnusedClass {...} // Noncompliant, unused private class that can be removed.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Foo\n{\n    public Foo()\n    {\n        UsedPrivateMethod();\n    }\n\n    private void UsedPrivateMethod()\n    {\n        var c \u003d new UsedClass();\n    }\n\n    private class UsedClass {...}\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise issues on:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty constructors \u003c/li\u003e\n  \u003cli\u003e members with attributes \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003eMain\u003c/code\u003e method of the application \u003c/li\u003e\n  \u003cli\u003e methods with event handler signature \u003ccode\u003evoid Foo(object, EventArgs)\u003c/code\u003e that are declared in partial class \u003c/li\u003e\n  \u003cli\u003e empty serialization constructor on type with \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute\"\u003eSystem.SerializableAttribute\u003c/a\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e internal members in assemblies that have a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute\"\u003eSystem.Runtime.CompilerServices.InternalsVisibleToAttribute\u003c/a\u003e attribute. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers\"\u003eAccess Modifiers (C#\n  Programming Guide)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2114",
    "name": "Collections should not be passed as arguments to their own methods",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePassing a collection as an argument to the collection’s own method is a code defect. Doing so might either have unexpected side effects or always\nhave the same result.\u003c/p\u003e\n\u003cp\u003eAnother case is using set-like operations. For example, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.union\"\u003eUnion\u003c/a\u003e between a list and itself will always return the same list.\nConversely, using \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except\"\u003eExcept\u003c/a\u003e between a list and itself will\nalways return an empty list.\u003c/p\u003e\n\u003cpre\u003e\nvar list \u003d new List\u0026lt;int\u0026gt;();\n\nlist.AddRange(list);          // Noncompliant\nlist.Concat(list);            // Noncompliant\n\nlist.Union(list);             // Noncompliant: always returns list\nlist.Intersect(list);         // Noncompliant: always returns list\nlist.Except(list);            // Noncompliant: always returns empty\nlist.SequenceEqual(list);     // Noncompliant: always returns true\n\nvar set \u003d new HashSet\u0026lt;int\u0026gt;();\nset.UnionWith(set);           // Noncompliant: no changes\nset.IntersectWith(set);       // Noncompliant: no changes\nset.ExceptWith(set);          // Noncompliant: always returns empty\nset.SymmetricExceptWith(set); // Noncompliant: always returns empty\nset.IsProperSubsetOf(set);    // Noncompliant: always returns false\nset.IsProperSupersetOf(set);  // Noncompliant: always returns false\nset.IsSubsetOf(set);          // Noncompliant: always returns true\nset.IsSupersetOf(set);        // Noncompliant: always returns true\nset.Overlaps(set);            // Noncompliant: always returns true\nset.SetEquals(set);           // Noncompliant: always returns true\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/collections\"\u003eCollections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePassing a collection as an argument to the collection’s own method is a code defect. Doing so might either have unexpected side effects or always\nhave the same result.\u003c/p\u003e\n\u003cp\u003eAnother case is using set-like operations. For example, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.union\"\u003eUnion\u003c/a\u003e between a list and itself will always return the same list.\nConversely, using \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except\"\u003eExcept\u003c/a\u003e between a list and itself will\nalways return an empty list.\u003c/p\u003e\n\u003cpre\u003e\nvar list \u003d new List\u0026lt;int\u0026gt;();\n\nlist.AddRange(list);          // Noncompliant\nlist.Concat(list);            // Noncompliant\n\nlist.Union(list);             // Noncompliant: always returns list\nlist.Intersect(list);         // Noncompliant: always returns list\nlist.Except(list);            // Noncompliant: always returns empty\nlist.SequenceEqual(list);     // Noncompliant: always returns true\n\nvar set \u003d new HashSet\u0026lt;int\u0026gt;();\nset.UnionWith(set);           // Noncompliant: no changes\nset.IntersectWith(set);       // Noncompliant: no changes\nset.ExceptWith(set);          // Noncompliant: always returns empty\nset.SymmetricExceptWith(set); // Noncompliant: always returns empty\nset.IsProperSubsetOf(set);    // Noncompliant: always returns false\nset.IsProperSupersetOf(set);  // Noncompliant: always returns false\nset.IsSubsetOf(set);          // Noncompliant: always returns true\nset.IsSupersetOf(set);        // Noncompliant: always returns true\nset.Overlaps(set);            // Noncompliant: always returns true\nset.SetEquals(set);           // Noncompliant: always returns true\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/collections\"\u003eCollections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3445",
    "name": "Exceptions should not be explicitly rethrown",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn C#, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#13106-the-throw-statement\"\u003ethrow\u003c/a\u003e\nstatement can be used in two different ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by specifying an expression \u003c/li\u003e\n  \u003cli\u003e without specifying an expression \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBy specifying an expression\u003c/h3\u003e\n\u003cp\u003eIn the software development context, an expression is a value or anything that executes and ends up being a value. The expression shall be\nimplicitly convertible to \u003ccode\u003eSystem.Exception\u003c/code\u003e, and the result of evaluating the expression is converted to \u003ccode\u003eSystem.Exception\u003c/code\u003e\nbefore being thrown.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  // code that uses the exception\n  throw exception; // The exception stack trace is cleared up to this point.\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this case, the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Stack_trace\"\u003estack trace\u003c/a\u003e, will be cleared, losing the list of method calls between the\noriginal method that threw the exception and the current method.\u003c/p\u003e\n\u003ch3\u003eWithout specifying an expression\u003c/h3\u003e\n\u003cp\u003eThis syntax is supported only in a \u003ccode\u003ecatch\u003c/code\u003e block, in which case, that statement re-throws the exception currently being handled by that\n\u003ccode\u003ecatch\u003c/code\u003e block, preserving the stack trace.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  // code that uses the exception\n  throw; // The stack trace of the initial exception is preserved.\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIt is allowed using the thrown \u003ccode\u003eexception\u003c/code\u003e as an argument and wrapping it in another \u003ccode\u003eexception\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  throw new Exception(\"Additional information\", exception);\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe recommended way to re-throw an exception is to use the throw statement without including an expression. This ensures that all call stack\ninformation is preserved when the exception is propagated to the caller, making debugging easier.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  throw exception;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ntry\n{\n}\ncatch(Exception)\n{\n  throw;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception#re-throwing-an-exception\"\u003eRe-throwing an exception\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#13106-the-throw-statement\"\u003eThe\n  throw statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Stack_trace\"\u003estack trace\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn C#, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#13106-the-throw-statement\"\u003ethrow\u003c/a\u003e\nstatement can be used in two different ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by specifying an expression \u003c/li\u003e\n  \u003cli\u003e without specifying an expression \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBy specifying an expression\u003c/h3\u003e\n\u003cp\u003eIn the software development context, an expression is a value or anything that executes and ends up being a value. The expression shall be\nimplicitly convertible to \u003ccode\u003eSystem.Exception\u003c/code\u003e, and the result of evaluating the expression is converted to \u003ccode\u003eSystem.Exception\u003c/code\u003e\nbefore being thrown.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  // code that uses the exception\n  throw exception; // The exception stack trace is cleared up to this point.\n}\n\u003c/pre\u003e\n\u003cp\u003eIn this case, the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Stack_trace\"\u003estack trace\u003c/a\u003e, will be cleared, losing the list of method calls between the\noriginal method that threw the exception and the current method.\u003c/p\u003e\n\u003ch3\u003eWithout specifying an expression\u003c/h3\u003e\n\u003cp\u003eThis syntax is supported only in a \u003ccode\u003ecatch\u003c/code\u003e block, in which case, that statement re-throws the exception currently being handled by that\n\u003ccode\u003ecatch\u003c/code\u003e block, preserving the stack trace.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  // code that uses the exception\n  throw; // The stack trace of the initial exception is preserved.\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIt is allowed using the thrown \u003ccode\u003eexception\u003c/code\u003e as an argument and wrapping it in another \u003ccode\u003eexception\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  throw new Exception(\"Additional information\", exception);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe recommended way to re-throw an exception is to use the throw statement without including an expression. This ensures that all call stack\ninformation is preserved when the exception is propagated to the caller, making debugging easier.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ntry\n{\n}\ncatch(Exception exception)\n{\n  throw exception;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ntry\n{\n}\ncatch(Exception)\n{\n  throw;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception#re-throwing-an-exception\"\u003eRe-throwing an exception\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#13106-the-throw-statement\"\u003eThe\n  throw statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Stack_trace\"\u003estack trace\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "confusing",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3444",
    "name": "Interfaces should not simply inherit from base interfaces with colliding members",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived\ninterface will result in the compiler error \u003ccode\u003eCS0229 Ambiguity between \u0027IBase1.SomeProperty\u0027 and \u0027IBase2.SomeProperty\u0027\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the\nambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e renaming the member in one of the base interfaces to remove the collision \u003c/li\u003e\n  \u003cli\u003e also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IBase1\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous\n{\n}\n\npublic class MyClass : IDerived\n{\n  // Implements both IBase1.SomeProperty and IBase2.SomeProperty\n  public string SomeProperty { get; set; } \u003d \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass \u003d new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between \u0027IBase1.SomeProperty\u0027 and \u0027IBase2.SomeProperty\u0027\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IDerived : IBase1, IBase2\n{\n  new string SomeProperty { get; set; }\n}\n\npublic class MyClass : IDerived\n{\n  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty\n  public string SomeProperty { get; set; } \u003d \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass \u003d new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes \"Hello\" as expected\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic interface IBase1\n{\n  string SomePropertyOne { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomePropertyTwo { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2\n{\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived\ninterface will result in the compiler error \u003ccode\u003eCS0229 Ambiguity between \u0027IBase1.SomeProperty\u0027 and \u0027IBase2.SomeProperty\u0027\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the\nambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e renaming the member in one of the base interfaces to remove the collision \u003c/li\u003e\n  \u003cli\u003e also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IBase1\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous\n{\n}\n\npublic class MyClass : IDerived\n{\n  // Implements both IBase1.SomeProperty and IBase2.SomeProperty\n  public string SomeProperty { get; set; } \u003d \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass \u003d new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between \u0027IBase1.SomeProperty\u0027 and \u0027IBase2.SomeProperty\u0027\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic interface IDerived : IBase1, IBase2\n{\n  new string SomeProperty { get; set; }\n}\n\npublic class MyClass : IDerived\n{\n  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty\n  public string SomeProperty { get; set; } \u003d \"Hello\";\n\n  public static void Main()\n  {\n    MyClass myClass \u003d new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes \"Hello\" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes \"Hello\" as expected\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic interface IBase1\n{\n  string SomePropertyOne { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomePropertyTwo { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2\n{\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2234",
    "name": "Arguments should be passed in the same order as the method parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling a method with argument variables whose names match the method parameter names but in a different order can cause confusion. It could\nindicate a mistake in the arguments\u0027 order, leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic double Divide(int divisor, int dividend)\n{\n    return divisor / dividend;\n}\n\npublic void DoTheThing()\n{\n    int divisor \u003d 15;\n    int dividend \u003d 5;\n\n    double result \u003d Divide(dividend, divisor);  // Noncompliant: arguments\u0027 order doesn\u0027t match their respective parameter names\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, matching the method parameters\u0027 order contributes to clearer and more readable code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic double Divide(int divisor, int dividend)\n{\n    return divisor / dividend;\n}\n\npublic void DoTheThing()\n{\n    int divisor \u003d 15;\n    int dividend \u003d 5;\n\n    double result \u003d Divide(divisor, dividend); // Compliant\n    // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling a method with argument variables whose names match the method parameter names but in a different order can cause confusion. It could\nindicate a mistake in the arguments\u0027 order, leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic double Divide(int divisor, int dividend)\n{\n    return divisor / dividend;\n}\n\npublic void DoTheThing()\n{\n    int divisor \u003d 15;\n    int dividend \u003d 5;\n\n    double result \u003d Divide(dividend, divisor);  // Noncompliant: arguments\u0027 order doesn\u0027t match their respective parameter names\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, matching the method parameters\u0027 order contributes to clearer and more readable code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic double Divide(int divisor, int dividend)\n{\n    return divisor / dividend;\n}\n\npublic void DoTheThing()\n{\n    int divisor \u003d 15;\n    int dividend \u003d 5;\n\n    double result \u003d Divide(divisor, dividend); // Compliant\n    // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2479",
    "name": "Whitespace and control characters in string literals should be explicit",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNon-encoded \u003ca href\u003d\"https://en.wikipedia.org/wiki/Control_character\"\u003econtrol characters\u003c/a\u003e and whitespace characters are often injected in the\nsource code because of a bad manipulation. They are either invisible or difficult to recognize, which can result in bugs when the string is not what\nthe developer expects. If you actually need to use a control character use their encoded version:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII\u003c/a\u003e, for example \u003ccode\u003e\\n\u003c/code\u003e and \u003ccode\u003e\\t\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode\"\u003eUnicode\u003c/a\u003e, for example \u003ccode\u003eU+000D\u003c/code\u003e and \u003ccode\u003eU+0009\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when the following characters are seen in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003estring literal\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII#Control_characters\"\u003eASCII control character\u003c/a\u003e. (character index \u0026lt; 32 or \u003d 127) \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\"\u003ewhitespace characters\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\"\u003eC0 control characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Unicode characters \u003ccode\u003eU+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#verbatim-string-literals\"\u003eVerbatim string literals\u003c/a\u003e and\n  \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#raw-string-literals\"\u003eraw string literals\u003c/a\u003e, since they have no\n  escape mechanism \u003c/li\u003e\n  \u003cli\u003e The simple space character: Unicode \u003ccode\u003eU+0020\u003c/code\u003e, ASCII 32 \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring tabInside \u003d \"A\tB\";                 // Noncompliant: contains a tabulation\nstring zeroWidthSpaceInside \u003d \"foo​bar\";     // Noncompliant: contains a U+200B character inside\nConsole.WriteLine(zeroWidthSpaceInside);    // Prints \"foo?bar\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring tabInside \u003d \"A\\tB\";                      // Compliant: escaped value\nstring zeroWidthSpaceInside \u003d \"foo\\u200Bbar\";   // Compliant: escaped value\nConsole.WriteLine(zeroWidthSpaceInside);        // Prints \"foo?bar\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003eStrings and string literals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Control_character\"\u003eControl character\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNon-encoded \u003ca href\u003d\"https://en.wikipedia.org/wiki/Control_character\"\u003econtrol characters\u003c/a\u003e and whitespace characters are often injected in the\nsource code because of a bad manipulation. They are either invisible or difficult to recognize, which can result in bugs when the string is not what\nthe developer expects. If you actually need to use a control character use their encoded version:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII\u003c/a\u003e, for example \u003ccode\u003e\\n\u003c/code\u003e and \u003ccode\u003e\\t\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode\"\u003eUnicode\u003c/a\u003e, for example \u003ccode\u003eU+000D\u003c/code\u003e and \u003ccode\u003eU+0009\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when the following characters are seen in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003estring literal\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII#Control_characters\"\u003eASCII control character\u003c/a\u003e. (character index \u0026lt; 32 or \u003d 127) \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\"\u003ewhitespace characters\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\"\u003eC0 control characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Unicode characters \u003ccode\u003eU+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#verbatim-string-literals\"\u003eVerbatim string literals\u003c/a\u003e and\n  \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#raw-string-literals\"\u003eraw string literals\u003c/a\u003e, since they have no\n  escape mechanism \u003c/li\u003e\n  \u003cli\u003e The simple space character: Unicode \u003ccode\u003eU+0020\u003c/code\u003e, ASCII 32 \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nstring tabInside \u003d \"A\tB\";                 // Noncompliant: contains a tabulation\nstring zeroWidthSpaceInside \u003d \"foo​bar\";     // Noncompliant: contains a U+200B character inside\nConsole.WriteLine(zeroWidthSpaceInside);    // Prints \"foo?bar\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nstring tabInside \u003d \"A\\tB\";                      // Compliant: escaped value\nstring zeroWidthSpaceInside \u003d \"foo\\u200Bbar\";   // Compliant: escaped value\nConsole.WriteLine(zeroWidthSpaceInside);        // Prints \"foo?bar\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/\"\u003eStrings and string literals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Control_character\"\u003eControl character\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1147",
    "name": "Exit methods should not be called",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling \u003ccode\u003eEnvironment.Exit(exitCode)\u003c/code\u003e or \u003ccode\u003eApplication.Exit()\u003c/code\u003e terminates the process and returns an exit code to the operating\nsystem..\u003c/p\u003e\n\u003cp\u003eEach of these methods should be used with extreme care, and only when the intent is to stop the whole application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nEnvironment.Exit(0);\nApplication.Exit();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThese methods are ignored inside \u003ccode\u003eMain\u003c/code\u003e.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling \u003ccode\u003eEnvironment.Exit(exitCode)\u003c/code\u003e or \u003ccode\u003eApplication.Exit()\u003c/code\u003e terminates the process and returns an exit code to the operating\nsystem..\u003c/p\u003e\n\u003cp\u003eEach of these methods should be used with extreme care, and only when the intent is to stop the whole application.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nEnvironment.Exit(0);\nApplication.Exit();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThese methods are ignored inside \u003ccode\u003eMain\u003c/code\u003e.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3447",
    "name": "\"[Optional]\" should not be used on \"ref\" or \"out\" parameters",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003eref\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003eout\u003c/a\u003e in combination with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptional\u003c/a\u003e attribute is both confusing and\ncontradictory. \u003ccode\u003e[Optional]\u003c/code\u003e indicates that the parameter doesn’t have to be provided, while \u003ccode\u003eout\u003c/code\u003e and \u003ccode\u003eref\u003c/code\u003e mean that\nthe parameter will be used to return data to the caller (\u003ccode\u003eref\u003c/code\u003e additionally indicates that the parameter may also be used to pass data into\nthe method).\u003c/p\u003e\n\u003cp\u003eThus, making it \u003ccode\u003e[Optional]\u003c/code\u003e to provide the parameter in which you will be passing back the method results doesn’t make sense. In fact,\nthe compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the \u003ccode\u003e[Optional]\u003c/code\u003e parameter has been\nomitted, not the source of the problem, the method declaration.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  public void DoStuff([Optional] ref int i) // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    new MyClass().DoStuff(); // Compilation Error [CS7036]\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  public void DoStuff(ref int i)\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    var i \u003d 42;\n    new MyClass().DoStuff(ref i);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003eref keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003eout parameter modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptionalAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003eref\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003eout\u003c/a\u003e in combination with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptional\u003c/a\u003e attribute is both confusing and\ncontradictory. \u003ccode\u003e[Optional]\u003c/code\u003e indicates that the parameter doesn’t have to be provided, while \u003ccode\u003eout\u003c/code\u003e and \u003ccode\u003eref\u003c/code\u003e mean that\nthe parameter will be used to return data to the caller (\u003ccode\u003eref\u003c/code\u003e additionally indicates that the parameter may also be used to pass data into\nthe method).\u003c/p\u003e\n\u003cp\u003eThus, making it \u003ccode\u003e[Optional]\u003c/code\u003e to provide the parameter in which you will be passing back the method results doesn’t make sense. In fact,\nthe compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the \u003ccode\u003e[Optional]\u003c/code\u003e parameter has been\nomitted, not the source of the problem, the method declaration.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  public void DoStuff([Optional] ref int i) // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    new MyClass().DoStuff(); // Compilation Error [CS7036]\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  public void DoStuff(ref int i)\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    var i \u003d 42;\n    new MyClass().DoStuff(ref i);\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\"\u003eref keyword\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\"\u003eout parameter modifier\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.optionalattribute\"\u003eOptionalAttribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2115",
    "name": "A secure password should be used when connecting to a database",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eWhen accessing a database, an empty password should be avoided as it introduces a weakness.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eOnce connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.\u003c/p\u003e\n\u003ch4\u003eUnauthorized Access to Sensitive Data\u003c/h4\u003e\n\u003cp\u003eWhen a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.\u003c/p\u003e\n\u003ch4\u003eCompromise of System Integrity\u003c/h4\u003e\n\u003cp\u003eWithout a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.\u003c/p\u003e\n\u003ch4\u003eUnwanted Modifications or Deletions\u003c/h4\u003e\n\u003cp\u003eThe absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.\u003c/p\u003e\n\u003cp\u003eOverall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Entity Framework Core\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code uses an empty password to connect to a SQL Server database.\u003c/p\u003e\n\u003cp\u003eThe vulnerability can be fixed by using Windows authentication (sometimes referred to as integrated security).\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"302\" data-diff-type\u003d\"noncompliant\"\u003e\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlServer(\"Server\u003dmyServerAddress;Database\u003dmyDataBase;User Id\u003dmyUsername;Password\u003d\"); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"302\" data-diff-type\u003d\"compliant\"\u003e\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlServer(\"Server\u003dmyServerAddress;Database\u003dmyDataBase;Integrated Security\u003dTrue\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eWindows authentication (integrated security)\u003c/h4\u003e\n\u003cp\u003eWhen the connection string includes the \u003ccode\u003eIntegrated Security\u003dtrue\u003c/code\u003e parameter, it enables Windows authentication (sometimes called\nintegrated security) for the database connection. With integrated security, the user’s Windows credentials are used to authenticate and authorize\naccess to the database. It eliminates the need for a separate username and password for the database connection. Integrated security simplifies\nauthentication and leverages the existing Windows authentication infrastructure for secure database access in your C# application.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that when using integrated security, the user running the application must have the necessary permissions to access the\ndatabase. Ensure that the user account running the application has the appropriate privileges and is granted access to the database.\u003c/p\u003e\n\u003cp\u003eThe syntax employed in connection strings varies by provider:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSyntax\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSupported by\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, Oracle, Postgres\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dSSPI;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, OLE DB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMySQL\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eODBC\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote: Some providers such as MySQL do not support Windows authentication with .NET Core.\u003c/p\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003ch4\u003eHard-coded passwords\u003c/h4\u003e\n\u003cp\u003eIt could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. \u003c/li\u003e\n  \u003cli\u003e Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. \u003c/li\u003e\n  \u003cli\u003e Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/troubleshoot/aspnet/create-web-config\"\u003eCreate the Web.config file for an ASP.NET application\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/521\"\u003eCWE-521 - Weak Password Requirements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eWhen accessing a database, an empty password should be avoided as it introduces a weakness.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eOnce connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.\u003c/p\u003e\n\u003ch4\u003eUnauthorized Access to Sensitive Data\u003c/h4\u003e\n\u003cp\u003eWhen a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.\u003c/p\u003e\n\u003ch4\u003eCompromise of System Integrity\u003c/h4\u003e\n\u003cp\u003eWithout a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.\u003c/p\u003e\n\u003ch4\u003eUnwanted Modifications or Deletions\u003c/h4\u003e\n\u003cp\u003eThe absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.\u003c/p\u003e\n\u003cp\u003eOverall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code uses an empty password to connect to a SQL Server database.\u003c/p\u003e\n\u003cp\u003eThe vulnerability can be fixed by using Windows authentication (sometimes referred to as integrated security).\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"302\" data-diff-type\u003d\"noncompliant\"\u003e\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlServer(\"Server\u003dmyServerAddress;Database\u003dmyDataBase;User Id\u003dmyUsername;Password\u003d\"); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"302\" data-diff-type\u003d\"compliant\"\u003e\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlServer(\"Server\u003dmyServerAddress;Database\u003dmyDataBase;Integrated Security\u003dTrue\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eWindows authentication (integrated security)\u003c/h4\u003e\n\u003cp\u003eWhen the connection string includes the \u003ccode\u003eIntegrated Security\u003dtrue\u003c/code\u003e parameter, it enables Windows authentication (sometimes called\nintegrated security) for the database connection. With integrated security, the user’s Windows credentials are used to authenticate and authorize\naccess to the database. It eliminates the need for a separate username and password for the database connection. Integrated security simplifies\nauthentication and leverages the existing Windows authentication infrastructure for secure database access in your C# application.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that when using integrated security, the user running the application must have the necessary permissions to access the\ndatabase. Ensure that the user account running the application has the appropriate privileges and is granted access to the database.\u003c/p\u003e\n\u003cp\u003eThe syntax employed in connection strings varies by provider:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSyntax\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSupported by\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, Oracle, Postgres\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dSSPI;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, OLE DB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMySQL\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eODBC\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote: Some providers such as MySQL do not support Windows authentication with .NET Core.\u003c/p\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003ch4\u003eHard-coded passwords\u003c/h4\u003e\n\u003cp\u003eIt could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. \u003c/li\u003e\n  \u003cli\u003e Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. \u003c/li\u003e\n  \u003cli\u003e Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.\u003c/p\u003e",
        "context": {
          "key": "entity_framework_core",
          "displayName": "Entity Framework Core"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following configuration file uses an empty password to connect to a database.\u003c/p\u003e\n\u003cp\u003eThe vulnerability can be fixed by using Windows authentication (sometimes referred to as integrated security)\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"301\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"utf-8\"?\u0026gt;\n\u0026lt;configuration\u0026gt;\n  \u0026lt;connectionStrings\u0026gt;\n    \u0026lt;add name\u003d\"myConnection\" connectionString\u003d\"Server\u003dmyServerAddress;Database\u003dmyDataBase;User Id\u003dmyUsername;Password\u003d\" /\u0026gt; \u0026lt;!-- Noncompliant --\u0026gt;\n  \u0026lt;/connectionStrings\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"301\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"utf-8\"?\u0026gt;\n\u0026lt;configuration\u0026gt;\n  \u0026lt;connectionStrings\u0026gt;\n    \u0026lt;add name\u003d\"myConnection\" connectionString\u003d\"Server\u003dmyServerAddress;Database\u003dmyDataBase;Integrated Security\u003dTrue\" /\u0026gt;\n  \u0026lt;/connectionStrings\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eWindows authentication (integrated security)\u003c/h4\u003e\n\u003cp\u003eWhen the connection string includes the \u003ccode\u003eIntegrated Security\u003dtrue\u003c/code\u003e parameter, it enables Windows authentication (sometimes called\nintegrated security) for the database connection. With integrated security, the user’s Windows credentials are used to authenticate and authorize\naccess to the database. It eliminates the need for a separate username and password for the database connection. Integrated security simplifies\nauthentication and leverages the existing Windows authentication infrastructure for secure database access in your C# application.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that when using integrated security, the user running the application must have the necessary permissions to access the\ndatabase. Ensure that the user account running the application has the appropriate privileges and is granted access to the database.\u003c/p\u003e\n\u003cp\u003eThe syntax employed in connection strings varies by provider:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eSyntax\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSupported by\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, Oracle, Postgres\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dSSPI;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server, OLE DB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntegrated Security\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eMySQL\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dtrue;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eSQL Server\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eTrusted_Connection\u003dyes;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eODBC\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote: Some providers such as MySQL do not support Windows authentication with .NET Core.\u003c/p\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003ch4\u003eHard-coded passwords\u003c/h4\u003e\n\u003cp\u003eIt could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. \u003c/li\u003e\n  \u003cli\u003e Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. \u003c/li\u003e\n  \u003cli\u003e Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.\u003c/p\u003e",
        "context": {
          "key": "asp_net",
          "displayName": "ASP.NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/troubleshoot/aspnet/create-web-config\"\u003eCreate the Web.config file for an ASP.NET application\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/521\"\u003eCWE-521 - Weak Password Requirements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2357",
    "name": "Fields should be private",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public int MagicNumber \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public int MagicNumber\n  {\n    get { return 42; }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  private int MagicNumber \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003estruct\u003c/code\u003es are ignored, as are \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e fields in classes.\u003c/p\u003e\n\u003cp\u003eFurther, an issue is only raised when the real accessibility is \u003ccode\u003epublic\u003c/code\u003e, taking into account the class accessibility.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public int MagicNumber \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  public int MagicNumber\n  {\n    get { return 42; }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  private int MagicNumber \u003d 42;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003estruct\u003c/code\u003es are ignored, as are \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e fields in classes.\u003c/p\u003e\n\u003cp\u003eFurther, an issue is only raised when the real accessibility is \u003ccode\u003epublic\u003c/code\u003e, taking into account the class accessibility.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2583",
    "name": "Conditionally executed code should be reachable",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConditional expressions which are always \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e can lead to \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eunreachable code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case below, the call of \u003ccode\u003eDispose()\u003c/code\u003e never happens.\u003c/p\u003e\n\u003cpre\u003e\nvar a \u003d false;\nif (a)\n{\n    Dispose(); // Never reached\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003cpre\u003e\nconst bool debug \u003d false;\n//...\nif (debug)\n{\n  // Print something\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe conditions should be reviewed to decide whether:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to update the condition or \u003c/li\u003e\n  \u003cli\u003e to remove the condition. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Sample(bool b)\n{\n    bool a \u003d false;\n    if (a)                  // Noncompliant: The true branch is never reached\n    {\n        DoSomething();      // Never reached\n    }\n\n    if (!a || b)            // Noncompliant: \"!a\" is always \"true\" and the false branch is never reached\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();  // Never reached\n    }\n\n    var c \u003d \"xxx\";\n    var res \u003d c ?? \"value\"; // Noncompliant: c is always not null, \"value\" is never used\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Sample(bool b)\n{\n    bool a \u003d false;\n    if (Foo(a))             // Condition was updated\n    {\n        DoSomething();\n    }\n\n    if (b)                  // Parts of the condition were removed.\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();\n    }\n\n    var c \u003d \"xxx\";\n    var res \u003d c;            // ?? \"value\" was removed\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\"\u003eConditional logical AND operator \u0026amp;\u0026amp;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\"\u003eConditional logical OR operator ||\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003e?? and ??\u003d\n  operators - the null-coalescing operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConditional expressions which are always \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e can lead to \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eunreachable code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case below, the call of \u003ccode\u003eDispose()\u003c/code\u003e never happens.\u003c/p\u003e\n\u003cpre\u003e\nvar a \u003d false;\nif (a)\n{\n    Dispose(); // Never reached\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003cpre\u003e\nconst bool debug \u003d false;\n//...\nif (debug)\n{\n  // Print something\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe conditions should be reviewed to decide whether:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to update the condition or \u003c/li\u003e\n  \u003cli\u003e to remove the condition. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic void Sample(bool b)\n{\n    bool a \u003d false;\n    if (a)                  // Noncompliant: The true branch is never reached\n    {\n        DoSomething();      // Never reached\n    }\n\n    if (!a || b)            // Noncompliant: \"!a\" is always \"true\" and the false branch is never reached\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();  // Never reached\n    }\n\n    var c \u003d \"xxx\";\n    var res \u003d c ?? \"value\"; // Noncompliant: c is always not null, \"value\" is never used\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic void Sample(bool b)\n{\n    bool a \u003d false;\n    if (Foo(a))             // Condition was updated\n    {\n        DoSomething();\n    }\n\n    if (b)                  // Parts of the condition were removed.\n    {\n        DoSomething();\n    }\n    else\n    {\n        DoSomethingElse();\n    }\n\n    var c \u003d \"xxx\";\n    var res \u003d c;            // ?? \"value\" was removed\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\"\u003eConditional logical AND operator \u0026amp;\u0026amp;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\"\u003eConditional logical OR operator ||\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003e?? and ??\u003d\n  operators - the null-coalescing operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "pitfall",
      "suspicious",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2222",
    "name": "Locks should be released on all paths",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo prevent potential \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e in an application, it is crucial to release any locks that are\nacquired within a method along all possible execution paths.\u003c/p\u003e\n\u003cp\u003eFailing to release locks properly can lead to potential deadlocks, where the lock might not be released, causing issues in the application.\u003c/p\u003e\n\u003cp\u003eThis rule specifically focuses on tracking the following types from the \u003ccode\u003eSystem.Threading\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor\"\u003e\u003ccode\u003eMonitor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex\"\u003e\u003ccode\u003eMutex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlock\"\u003e\u003ccode\u003eReaderWriterLock\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim\"\u003e\u003ccode\u003eReaderWriterLockSlim\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.spinlock\"\u003e\u003ccode\u003eSpinLock\u003c/code\u003e \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn issue is reported when a lock is acquired within a method but not released on all paths.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the lock is never released within the method, no issue is raised, assuming that the callers will handle the release.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo make sure that a lock is always released correctly, you can follow one of these two methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003e\u003ccode\u003elock\u003c/code\u003e\u003c/a\u003e statement with your\n  lock object. \u003c/li\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-try-finally-statement\"\u003e\u003ccode\u003etry-finally\u003c/code\u003e\u003c/a\u003e statement and put the release of your lock object within the finally block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  private object obj \u003d new object();\n\n  public void DoSomethingWithMonitor()\n  {\n    Monitor.Enter(obj); // Noncompliant: not all paths release the lock\n    if (IsInitialized())\n    {\n      // ...\n      Monitor.Exit(obj);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  private ReaderWriterLockSlim lockObj \u003d new ReaderWriterLockSlim();\n\n  public void DoSomethingWithReaderWriteLockSlim()\n  {\n    lockObj.EnterReadLock(); // Noncompliant: not all paths release the lock\n    if (IsInitialized())\n    {\n      // ...\n      lockObj.ExitReadLock();\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  private object obj \u003d new object();\n\n  public void DoSomethingWithMonitor()\n  {\n    lock(obj) // Compliant: the lock will be released at the end of the lock block\n    {\n      if (IsInitialized())\n      {\n        // ...\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  private ReaderWriterLockSlim lockObj \u003d new ReaderWriterLockSlim();\n\n  public void DoSomethingWithReaderWriteLockSlim()\n  {\n    lockObj.EnterReadLock(); // Compliant: the lock will be released in the finally block\n    try\n    {\n      if (IsInitialized())\n      {\n        // ...\n      }\n    }\n    finally\n    {\n      lockObj.ExitReadLock();\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives#synchronization-of-access-to-a-shared-resource\"\u003eSynchronization of access to a shared resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003e\u003ccode\u003elock\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-try-finally-statement\"\u003eThe\n  \u003ccode\u003etry-finally\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo prevent potential \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e in an application, it is crucial to release any locks that are\nacquired within a method along all possible execution paths.\u003c/p\u003e\n\u003cp\u003eFailing to release locks properly can lead to potential deadlocks, where the lock might not be released, causing issues in the application.\u003c/p\u003e\n\u003cp\u003eThis rule specifically focuses on tracking the following types from the \u003ccode\u003eSystem.Threading\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor\"\u003e\u003ccode\u003eMonitor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex\"\u003e\u003ccode\u003eMutex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlock\"\u003e\u003ccode\u003eReaderWriterLock\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim\"\u003e\u003ccode\u003eReaderWriterLockSlim\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.spinlock\"\u003e\u003ccode\u003eSpinLock\u003c/code\u003e \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn issue is reported when a lock is acquired within a method but not released on all paths.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the lock is never released within the method, no issue is raised, assuming that the callers will handle the release.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo make sure that a lock is always released correctly, you can follow one of these two methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003e\u003ccode\u003elock\u003c/code\u003e\u003c/a\u003e statement with your\n  lock object. \u003c/li\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-try-finally-statement\"\u003e\u003ccode\u003etry-finally\u003c/code\u003e\u003c/a\u003e statement and put the release of your lock object within the finally block. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  private object obj \u003d new object();\n\n  public void DoSomethingWithMonitor()\n  {\n    Monitor.Enter(obj); // Noncompliant: not all paths release the lock\n    if (IsInitialized())\n    {\n      // ...\n      Monitor.Exit(obj);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass\n{\n  private ReaderWriterLockSlim lockObj \u003d new ReaderWriterLockSlim();\n\n  public void DoSomethingWithReaderWriteLockSlim()\n  {\n    lockObj.EnterReadLock(); // Noncompliant: not all paths release the lock\n    if (IsInitialized())\n    {\n      // ...\n      lockObj.ExitReadLock();\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  private object obj \u003d new object();\n\n  public void DoSomethingWithMonitor()\n  {\n    lock(obj) // Compliant: the lock will be released at the end of the lock block\n    {\n      if (IsInitialized())\n      {\n        // ...\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass\n{\n  private ReaderWriterLockSlim lockObj \u003d new ReaderWriterLockSlim();\n\n  public void DoSomethingWithReaderWriteLockSlim()\n  {\n    lockObj.EnterReadLock(); // Compliant: the lock will be released in the finally block\n    try\n    {\n      if (IsInitialized())\n      {\n        // ...\n      }\n    }\n    finally\n    {\n      lockObj.ExitReadLock();\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives#synchronization-of-access-to-a-shared-resource\"\u003eSynchronization of access to a shared resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/lock\"\u003e\u003ccode\u003elock\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/exception-handling-statements#the-try-finally-statement\"\u003eThe\n  \u003ccode\u003etry-finally\u003c/code\u003e statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2221",
    "name": "\"Exception\" should not be caught",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCatching \u003ccode\u003eSystem.Exception\u003c/code\u003e seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception\ntypes, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively\neach exception type should be in a separate \u003ccode\u003ecatch\u003c/code\u003e block.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  // do something that might throw a FileNotFoundException or IOException\n}\ncatch (Exception e) // Noncompliant\n{\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  // do something\n}\ncatch (Exception e) when (e is FileNotFoundException || e is IOException)\n{\n  // do something\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe final option is to catch \u003ccode\u003eSystem.Exception\u003c/code\u003e and \u003ccode\u003ethrow\u003c/code\u003e it in the last statement in the \u003ccode\u003ecatch\u003c/code\u003e block. This is\nthe least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n  // do something\n}\ncatch (Exception e)\n{\n  if (e is FileNotFoundException || e is IOException)\n  {\n    // do something\n  }\n  else\n  {\n    throw;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396\"\u003eCWE-396 - Declaration of Catch for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCatching \u003ccode\u003eSystem.Exception\u003c/code\u003e seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception\ntypes, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively\neach exception type should be in a separate \u003ccode\u003ecatch\u003c/code\u003e block.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  // do something that might throw a FileNotFoundException or IOException\n}\ncatch (Exception e) // Noncompliant\n{\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\ntry\n{\n  // do something\n}\ncatch (Exception e) when (e is FileNotFoundException || e is IOException)\n{\n  // do something\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe final option is to catch \u003ccode\u003eSystem.Exception\u003c/code\u003e and \u003ccode\u003ethrow\u003c/code\u003e it in the last statement in the \u003ccode\u003ecatch\u003c/code\u003e block. This is\nthe least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.\u003c/p\u003e\n\u003cpre\u003e\ntry\n{\n  // do something\n}\ncatch (Exception e)\n{\n  if (e is FileNotFoundException || e is IOException)\n  {\n    // do something\n  }\n  else\n  {\n    throw;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396\"\u003eCWE-396 - Declaration of Catch for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2342",
    "name": "Enumeration types should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003eenum\u003c/code\u003e names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower case, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression for non-flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic enum foo // Noncompliant\n{\n    FooValue \u003d 0\n}\n\u003c/pre\u003e\n\u003cp\u003eWith the default regular expression for flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\npublic enum Option // Noncompliant\n{\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic enum Foo\n{\n    FooValue \u003d 0\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[Flags]\npublic enum Options\n{\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003eenum\u003c/code\u003e names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower case, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression for non-flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic enum foo // Noncompliant\n{\n    FooValue \u003d 0\n}\n\u003c/pre\u003e\n\u003cp\u003eWith the default regular expression for flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\npublic enum Option // Noncompliant\n{\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic enum Foo\n{\n    FooValue \u003d 0\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n[Flags]\npublic enum Options\n{\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the enumeration type names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      },
      "flagsAttributeFormat": {
        "key": "flagsAttributeFormat",
        "name": "flagsAttributeFormat",
        "description": "Regular expression used to check the flags enumeration type names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
      "flagsAttributeFormat": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$"
    },
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3431",
    "name": "\"[ExpectedException]\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with\nthe \u003ccode\u003eExpectedException\u003c/code\u003e attribute since an exception could be thrown from almost any line in the method.\u003c/p\u003e\n\u003cp\u003eThis rule detects MSTest and NUnit \u003ccode\u003eExpectedException\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[ExpectedException(typeof(ArgumentNullException))]  // Noncompliant\npublic void TestNullArg()\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void TestNullArg()\n{\n  bool callFailed \u003d false;\n  try\n  {\n    //...\n  }\n  catch (ArgumentNullException)\n  {\n    callFailed \u003d true;\n  }\n  Assert.IsTrue(callFailed, \"Expected call to MyMethod to fail with ArgumentNullException\");\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void TestNullArg()\n{\n  Assert.ThrowsException\u0026lt;ArgumentNullException\u0026gt;(() \u003d\u0026gt; /*...*/);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with\nthe \u003ccode\u003eExpectedException\u003c/code\u003e attribute since an exception could be thrown from almost any line in the method.\u003c/p\u003e\n\u003cp\u003eThis rule detects MSTest and NUnit \u003ccode\u003eExpectedException\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\n[ExpectedException(typeof(ArgumentNullException))]  // Noncompliant\npublic void TestNullArg()\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void TestNullArg()\n{\n  bool callFailed \u003d false;\n  try\n  {\n    //...\n  }\n  catch (ArgumentNullException)\n  {\n    callFailed \u003d true;\n  }\n  Assert.IsTrue(callFailed, \"Expected call to MyMethod to fail with ArgumentNullException\");\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n[TestMethod]\npublic void TestNullArg()\n{\n  Assert.ThrowsException\u0026lt;ArgumentNullException\u0026gt;(() \u003d\u0026gt; /*...*/);\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1133",
    "name": "Deprecated code should be removed",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[Obsolete] // Noncompliant\nvoid Method()\n{\n    // ..\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n[Obsolete] // Noncompliant\nvoid Method()\n{\n    // ..\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "obsolete"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1134",
    "name": "Track uses of \"FIXME\" tags",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nprivate int Divide(int numerator, int denominator)\n{\n    return numerator / denominator; // FIXME denominator value might be 0\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nprivate int Divide(int numerator, int denominator)\n{\n    return numerator / denominator; // FIXME denominator value might be 0\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S4524",
    "name": "\"default\" clauses should be first or last",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eswitch\nstatement\u003c/a\u003e is a conditional statement that executes a sequence of instructions based on patterns matching the provided value.\u003c/p\u003e\n\u003cpre\u003e\nswitch (temperatureInCelsius)\n{\n    case \u0026lt; 35.0:\n        Console.WriteLine(\"Hypothermia\");\n        break;\n    case \u0026gt;\u003d 36.5 and \u0026lt;\u003d 37.5:\n        Console.WriteLine(\"Normal\");\n        break;\n    case \u0026gt; 37.5 and \u0026lt;\u003d 40.0:\n        Console.WriteLine(\"Fever or hyperthermia\");\n        break;\n    case \u0026gt; 40.0:\n        Console.WriteLine(\"Hyperpyrexia\");\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement can optionally contain a \u003ccode\u003edefault\u003c/code\u003e clause, executed when none of the \u003ccode\u003ecase\u003c/code\u003e clauses are\nexecuted (or in presence of a \u003ccode\u003egoto default;\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\nswitch (gradeLetter)\n{\n    case \"A+\":\n    case \"A\":\n    case \"A-\":\n        Console.WriteLine(\"Excellent\");\n        break;\n    case \"B+\":\n    case \"B\":\n        Console.WriteLine(\"Very Good\");\n        break;\n    case \"B-\":\n    case \"C+\":\n        Console.WriteLine(\"Good\");\n        break;\n    case \"C\":\n        Console.WriteLine(\"Pass\");\n        break;\n    case \"F\":\n        Console.WriteLine(\"Fail\");\n        break;\n    default:\n        Console.WriteLine(\"Invalid grade letter!\");\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e clause can be defined for various reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to handle \u003cstrong\u003eunexpected values\u003c/strong\u003e, as shown in the example above \u003c/li\u003e\n  \u003cli\u003e or to show that all the cases were properly considered, making the function explicitely \u003cstrong\u003etotal\u003c/strong\u003e (as opposed to \u003ca\n  href\u003d\"https://en.wikipedia.org/wiki/Partial_function\"\u003epartial\u003c/a\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile C# allows the \u003ccode\u003edefault\u003c/code\u003e clause to appear in any place within a \u003ccode\u003eswitch\u003c/code\u003e statement, and while its position doesn’t alter\nits behavior, it is recommended to put the \u003ccode\u003edefault\u003c/code\u003e clause either at the beginning or at the end of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThat improves readability and helps the developer to quickly find the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is neither the first nor the last one of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (param)\n{\n    case 0:\n        DoSomething();\n        break;\n    default: // Noncompliant: default clause should be the first or last one\n        Error();\n        break;\n    case 1:\n        DoSomethingElse();\n        break;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (param)\n{\n    case 0:\n        DoSomething();\n        break;\n    case 1:\n        DoSomethingElse();\n        break;\n    default:\n        Error();\n        break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eSwitch\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Partial_function\"\u003ePartial function\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eswitch\nstatement\u003c/a\u003e is a conditional statement that executes a sequence of instructions based on patterns matching the provided value.\u003c/p\u003e\n\u003cpre\u003e\nswitch (temperatureInCelsius)\n{\n    case \u0026lt; 35.0:\n        Console.WriteLine(\"Hypothermia\");\n        break;\n    case \u0026gt;\u003d 36.5 and \u0026lt;\u003d 37.5:\n        Console.WriteLine(\"Normal\");\n        break;\n    case \u0026gt; 37.5 and \u0026lt;\u003d 40.0:\n        Console.WriteLine(\"Fever or hyperthermia\");\n        break;\n    case \u0026gt; 40.0:\n        Console.WriteLine(\"Hyperpyrexia\");\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement can optionally contain a \u003ccode\u003edefault\u003c/code\u003e clause, executed when none of the \u003ccode\u003ecase\u003c/code\u003e clauses are\nexecuted (or in presence of a \u003ccode\u003egoto default;\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003e\nswitch (gradeLetter)\n{\n    case \"A+\":\n    case \"A\":\n    case \"A-\":\n        Console.WriteLine(\"Excellent\");\n        break;\n    case \"B+\":\n    case \"B\":\n        Console.WriteLine(\"Very Good\");\n        break;\n    case \"B-\":\n    case \"C+\":\n        Console.WriteLine(\"Good\");\n        break;\n    case \"C\":\n        Console.WriteLine(\"Pass\");\n        break;\n    case \"F\":\n        Console.WriteLine(\"Fail\");\n        break;\n    default:\n        Console.WriteLine(\"Invalid grade letter!\");\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e clause can be defined for various reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to handle \u003cstrong\u003eunexpected values\u003c/strong\u003e, as shown in the example above \u003c/li\u003e\n  \u003cli\u003e or to show that all the cases were properly considered, making the function explicitely \u003cstrong\u003etotal\u003c/strong\u003e (as opposed to \u003ca\n  href\u003d\"https://en.wikipedia.org/wiki/Partial_function\"\u003epartial\u003c/a\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile C# allows the \u003ccode\u003edefault\u003c/code\u003e clause to appear in any place within a \u003ccode\u003eswitch\u003c/code\u003e statement, and while its position doesn’t alter\nits behavior, it is recommended to put the \u003ccode\u003edefault\u003c/code\u003e clause either at the beginning or at the end of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThat improves readability and helps the developer to quickly find the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is neither the first nor the last one of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (param)\n{\n    case 0:\n        DoSomething();\n        break;\n    default: // Noncompliant: default clause should be the first or last one\n        Error();\n        break;\n    case 1:\n        DoSomethingElse();\n        break;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (param)\n{\n    case 0:\n        DoSomething();\n        break;\n    case 1:\n        DoSomethingElse();\n        break;\n    default:\n        Error();\n        break;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement\"\u003eSwitch\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Partial_function\"\u003ePartial function\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2345",
    "name": "Flags enumerations should explicitly initialize all their members",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you annotate an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum\u003c/a\u003e with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlags attribute\u003c/a\u003e, you must not rely on the values that are automatically\nset by the language to the \u003ccode\u003eEnum\u003c/code\u003e members, but you should define the enumeration constants in powers of two (1, 2, 4, 8, and so on).\nAutomatic value initialization will set the first member to zero and increment the value by one for each subsequent member. As a result, you won’t be\nable to use the enum members with bitwise operators.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe default initialization of \u003ccode\u003e0, 1, 2, 3, 4, …​\u003c/code\u003e matches \u003ccode\u003e0, 1, 2, 4, 8 …​\u003c/code\u003e in the first three values, so no issue is\nreported if the first three members of the enumeration are not initialized.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDefine enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar bananaAndStrawberry \u003d FruitType.Banana | FruitType.Strawberry;\nConsole.WriteLine(bananaAndStrawberry.ToString());  // Will display only \"Strawberry\"\n\n[Flags]\nenum FruitType    // Noncompliant\n{\n  None,\n  Banana,\n  Orange,\n  Strawberry\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar bananaAndStrawberry \u003d FruitType.Banana | FruitType.Strawberry;\nConsole.WriteLine(bananaAndStrawberry.ToString()); // Will display \"Banana, Strawberry\"\n\n[Flags]\nenum FruitType\n{\n  None \u003d 0,\n  Banana \u003d 1,\n  Orange \u003d 2,\n  Strawberry \u003d 4\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you annotate an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum\u003c/a\u003e with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlags attribute\u003c/a\u003e, you must not rely on the values that are automatically\nset by the language to the \u003ccode\u003eEnum\u003c/code\u003e members, but you should define the enumeration constants in powers of two (1, 2, 4, 8, and so on).\nAutomatic value initialization will set the first member to zero and increment the value by one for each subsequent member. As a result, you won’t be\nable to use the enum members with bitwise operators.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe default initialization of \u003ccode\u003e0, 1, 2, 3, 4, …​\u003c/code\u003e matches \u003ccode\u003e0, 1, 2, 4, 8 …​\u003c/code\u003e in the first three values, so no issue is\nreported if the first three members of the enumeration are not initialized.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDefine enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar bananaAndStrawberry \u003d FruitType.Banana | FruitType.Strawberry;\nConsole.WriteLine(bananaAndStrawberry.ToString());  // Will display only \"Strawberry\"\n\n[Flags]\nenum FruitType    // Noncompliant\n{\n  None,\n  Banana,\n  Orange,\n  Strawberry\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar bananaAndStrawberry \u003d FruitType.Banana | FruitType.Strawberry;\nConsole.WriteLine(bananaAndStrawberry.ToString()); // Will display \"Banana, Strawberry\"\n\n[Flags]\nenum FruitType\n{\n  None \u003d 0,\n  Banana \u003d 1,\n  Orange \u003d 2,\n  Strawberry \u003d 4\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S1135",
    "name": "Track uses of \"TODO\" tags",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate void DoSomething()\n{\n  // TODO\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nprivate void DoSomething()\n{\n  // TODO\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2344",
    "name": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nenum FooFlags // Noncompliant\n{\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nenum Foo\n{\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nenum FooFlags // Noncompliant\n{\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nenum Foo\n{\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S5856",
    "name": "Regular expressions should be syntactically valid",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003eRegular expressions\u003c/a\u003e have their own syntax that is\nunderstood by regular expression engines. Those engines will throw an exception at runtime if they are given a regular expression that does not\nconform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eescaped with backslashes\u003c/a\u003e when they\nare intended to be matched literally and references to capturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eNegative \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003elookaround\u003c/a\u003e\ngroups cannot be combined with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eRegexOptions.NonBacktracking\u003c/a\u003e. Such\ncombination would throw an exception during runtime.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Regexes(string input)\n{\n    var regex \u003d new Regex(\"[A\");                                                    // Noncompliant\n    var match \u003d Regex.Match(input, \"[A\");                                           // Noncompliant\n    var negativeLookahead \u003d new Regex(\"a(?!b)\", RegexOptions.NonBacktracking);      // Noncompliant\n    var negativeLookbehind \u003d new Regex(\"(?\u0026lt;!a)b\", RegexOptions.NonBacktracking);    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Regexes(string input)\n{\n    var regex \u003d new Regex(\"[A-Z]\");\n    var match \u003d Regex.Match(input, \"[A-Z]\");\n    var negativeLookahead \u003d new Regex(\"a(?!b)\");\n    var negativeLookbehind \u003d new Regex(\"(?\u0026lt;!a)b\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003e.NET Regular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003eLookarounds\n  at a glance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eBacktracking in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eCharacter Escapes in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003eRegular expressions\u003c/a\u003e have their own syntax that is\nunderstood by regular expression engines. Those engines will throw an exception at runtime if they are given a regular expression that does not\nconform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eescaped with backslashes\u003c/a\u003e when they\nare intended to be matched literally and references to capturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eNegative \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003elookaround\u003c/a\u003e\ngroups cannot be combined with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eRegexOptions.NonBacktracking\u003c/a\u003e. Such\ncombination would throw an exception during runtime.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvoid Regexes(string input)\n{\n    var regex \u003d new Regex(\"[A\");                                                    // Noncompliant\n    var match \u003d Regex.Match(input, \"[A\");                                           // Noncompliant\n    var negativeLookahead \u003d new Regex(\"a(?!b)\", RegexOptions.NonBacktracking);      // Noncompliant\n    var negativeLookbehind \u003d new Regex(\"(?\u0026lt;!a)b\", RegexOptions.NonBacktracking);    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvoid Regexes(string input)\n{\n    var regex \u003d new Regex(\"[A-Z]\");\n    var match \u003d Regex.Match(input, \"[A-Z]\");\n    var negativeLookahead \u003d new Regex(\"a(?!b)\");\n    var negativeLookbehind \u003d new Regex(\"(?\u0026lt;!a)b\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003e.NET Regular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003eLookarounds\n  at a glance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eBacktracking in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eCharacter Escapes in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2223",
    "name": "Non-constant static fields should not be visible",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnlike instance fields, which can only be accessed by code having a hold on the instance, \u003ccode\u003estatic\u003c/code\u003e fields can be accessed by any code\nhaving visibility of the field and its type.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Math\n{\n    public static double Pi \u003d 3.14;  // Noncompliant\n}\n\n// Somewhere else, where Math and Math.Pi are visible\nvar pi \u003d Math.Pi; // Reading the value\nMath.Pi \u003d 3.1416; // Mutating the value\n\u003c/pre\u003e\n\u003cp\u003eAnother typical scenario of the use of a non-private mutable \u003ccode\u003estatic\u003c/code\u003e field is the following:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Shape\n{\n    public static Shape Empty \u003d new EmptyShape();  // Noncompliant\n\n    private class EmptyShape : Shape\n    {\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eNon-private \u003ccode\u003estatic\u003c/code\u003e fields that are neither \u003ccode\u003econst\u003c/code\u003e nor \u003ccode\u003ereadonly\u003c/code\u003e, like the ones in the examples above, can lead\nto errors and unpredictable behavior.\u003c/p\u003e\n\u003cp\u003eThis can happen because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Any object can modify these fields and alter the global state. This makes the code more difficult to read, debug and test. \u003cpre\u003e\nclass Counters\n{\n    public static int ErrorCounter \u003d 0;\n}\n\nclass Program\n{\n    public static void Thread1()\n    {\n        // ...\n        Counters.ErrorCounter \u003d 0; // Error counter reset\n        // ...\n    }\n\n    public static void Thread2()\n    {\n        // ...\n        if (Counters.ErrorCounter \u0026gt; 0)\n        {\n            Trace.TraceError($\"There are {Counters.ErrorCounter} errors\"); // It may print \"There are 0 errors\"\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Correctly accessing these fields from different threads needs synchronization with \u003ccode\u003elock\u003c/code\u003e or equivalent mechanisms. Improper synchronization may lead to unexpected results. \u003cpre\u003e\nclass Counters\n{\n    public static volatile int ErrorCounter;\n}\n\nclass Program\n{\n    public static void ImproperSynchronization()\n    {\n        Counters.ErrorCounter \u003d 0;\n        Parallel.ForEach(Enumerable.Range(0, 1000), _ \u003d\u0026gt; Counters.ErrorCounter++); // Volatile is not enough\n        Console.WriteLine(Counters.ErrorCounter); // May print less than 1000\n    }\n\n    public static void ProperSynchronization()\n    {\n        Counters.ErrorCounter \u003d 0;\n        Parallel.ForEach(Enumerable.Range(0, 1000), _ \u003d\u0026gt; Interlocked.Increment(ref Counters.ErrorCounter));\n        Console.WriteLine(Counters.ErrorCounter); // Always prints 1000\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePublicly visible \u003ccode\u003estatic\u003c/code\u003e fields should only be used to store shared data that does not change. To enforce this intent, these fields\nshould be marked \u003ccode\u003ereadonly\u003c/code\u003e or converted to \u003ccode\u003econst\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Math\n{\n    public const double Pi \u003d 3.14;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class Shape\n{\n    public static readonly Shape Empty \u003d new EmptyShape();\n\n    private class EmptyShape : Shape\n    {\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static\"\u003estatic (C# Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives\"\u003eOverview of synchronization\n  primitives\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile\"\u003evolatile (C# Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://softwareengineering.stackexchange.com/a/148154\"\u003eStack Exchange - Mutable global state is evil and alternatives to it\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2007/11/13/immutability-in-c-part-one-kinds-of-immutability/\"\u003eFabulous adventures in coding - Eric Lippert:\n  Immutability in C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/4628660\"\u003eStack Overflow - Eric Lippert: ++ is not \"threadsafe\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnlike instance fields, which can only be accessed by code having a hold on the instance, \u003ccode\u003estatic\u003c/code\u003e fields can be accessed by any code\nhaving visibility of the field and its type.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Math\n{\n    public static double Pi \u003d 3.14;  // Noncompliant\n}\n\n// Somewhere else, where Math and Math.Pi are visible\nvar pi \u003d Math.Pi; // Reading the value\nMath.Pi \u003d 3.1416; // Mutating the value\n\u003c/pre\u003e\n\u003cp\u003eAnother typical scenario of the use of a non-private mutable \u003ccode\u003estatic\u003c/code\u003e field is the following:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\npublic class Shape\n{\n    public static Shape Empty \u003d new EmptyShape();  // Noncompliant\n\n    private class EmptyShape : Shape\n    {\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eNon-private \u003ccode\u003estatic\u003c/code\u003e fields that are neither \u003ccode\u003econst\u003c/code\u003e nor \u003ccode\u003ereadonly\u003c/code\u003e, like the ones in the examples above, can lead\nto errors and unpredictable behavior.\u003c/p\u003e\n\u003cp\u003eThis can happen because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Any object can modify these fields and alter the global state. This makes the code more difficult to read, debug and test. \u003cpre\u003e\nclass Counters\n{\n    public static int ErrorCounter \u003d 0;\n}\n\nclass Program\n{\n    public static void Thread1()\n    {\n        // ...\n        Counters.ErrorCounter \u003d 0; // Error counter reset\n        // ...\n    }\n\n    public static void Thread2()\n    {\n        // ...\n        if (Counters.ErrorCounter \u0026gt; 0)\n        {\n            Trace.TraceError($\"There are {Counters.ErrorCounter} errors\"); // It may print \"There are 0 errors\"\n        }\n        // ...\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e Correctly accessing these fields from different threads needs synchronization with \u003ccode\u003elock\u003c/code\u003e or equivalent mechanisms. Improper synchronization may lead to unexpected results. \u003cpre\u003e\nclass Counters\n{\n    public static volatile int ErrorCounter;\n}\n\nclass Program\n{\n    public static void ImproperSynchronization()\n    {\n        Counters.ErrorCounter \u003d 0;\n        Parallel.ForEach(Enumerable.Range(0, 1000), _ \u003d\u0026gt; Counters.ErrorCounter++); // Volatile is not enough\n        Console.WriteLine(Counters.ErrorCounter); // May print less than 1000\n    }\n\n    public static void ProperSynchronization()\n    {\n        Counters.ErrorCounter \u003d 0;\n        Parallel.ForEach(Enumerable.Range(0, 1000), _ \u003d\u0026gt; Interlocked.Increment(ref Counters.ErrorCounter));\n        Console.WriteLine(Counters.ErrorCounter); // Always prints 1000\n    }\n}\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePublicly visible \u003ccode\u003estatic\u003c/code\u003e fields should only be used to store shared data that does not change. To enforce this intent, these fields\nshould be marked \u003ccode\u003ereadonly\u003c/code\u003e or converted to \u003ccode\u003econst\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic class Math\n{\n    public const double Pi \u003d 3.14;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\npublic class Shape\n{\n    public static readonly Shape Empty \u003d new EmptyShape();\n\n    private class EmptyShape : Shape\n    {\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/static\"\u003estatic (C# Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives\"\u003eOverview of synchronization\n  primitives\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile\"\u003evolatile (C# Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://softwareengineering.stackexchange.com/a/148154\"\u003eStack Exchange - Mutable global state is evil and alternatives to it\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2007/11/13/immutability-in-c-part-one-kinds-of-immutability/\"\u003eFabulous adventures in coding - Eric Lippert:\n  Immutability in C#\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/4628660\"\u003eStack Overflow - Eric Lippert: ++ is not \"threadsafe\"\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S3433",
    "name": "Test method signatures should be correct",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA method is identified as a test method if it is marked with one of the following attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e[TestMethod]\u003c/code\u003e or \u003ccode\u003e[DataTestMethod]\u003c/code\u003e (for \u003cstrong\u003eMSTest\u003c/strong\u003e). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e[Fact]\u003c/code\u003e or \u003ccode\u003e[Theory]\u003c/code\u003e (for \u003cstrong\u003exUnit\u003c/strong\u003e). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e[Test]\u003c/code\u003e, \u003ccode\u003e[TestCase]\u003c/code\u003e, \u003ccode\u003e[TestCaseSource]\u003c/code\u003e, or \u003ccode\u003e[Theory]\u003c/code\u003e (for \u003cstrong\u003eNUnit\u003c/strong\u003e). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, non-\u003ccode\u003epublic\u003c/code\u003e methods are not considered test methods and will not be executed, regardless of whether they have a test\nattribute. Additionally, methods with the \u003ccode\u003easync void\u003c/code\u003e modifier or methods that contain generics \u003ccode\u003e\u0026lt;T\u0026gt;\u003c/code\u003e anywhere in their\nsignatures are also excluded from being recognized as tests and will not be executed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\nvoid TestNullArg()  // Noncompliant, method is not public\n{  /* ... */  }\n\n[TestMethod]\npublic async void MyIgnoredTestMethod()  // Noncompliant, this is an \u0027async void\u0027 method\n{ /* ... */ }\n\n[TestMethod]\npublic void MyIgnoredGenericTestMethod\u0026lt;T\u0026gt;(T foo)  // Noncompliant, method has generics in its signature\n{ /* ... */ }\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void TestNullArg()\n{  /* ... */  }\n\n[TestMethod]\npublic async Task MyIgnoredTestMethod()\n{ /* ... */ }\n\n[TestMethod]\npublic void MyIgnoredGenericTestMethod(int foo)\n{ /* ... */ }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFor \u003cstrong\u003exUnit\u003c/strong\u003e, accessibility is disregarded when it comes to \u003ccode\u003e[Fact]\u003c/code\u003e test methods, as they do not necessarily need to be\ndeclared as \u003ccode\u003epublic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003exUnit\u003c/strong\u003e, \u003ccode\u003e[Theory]\u003c/code\u003e test methods, as well as \u003ccode\u003e[TestCase]\u003c/code\u003e and \u003ccode\u003e[TestCaseSource]\u003c/code\u003e test methods in\n\u003cstrong\u003eNUnit\u003c/strong\u003e, have the flexibility to be generic, allowing for a wider range of test scenarios.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit\"\u003eUnit testing C# with NUnit\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test\"\u003eUnit testing C# with xUnit\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA method is identified as a test method if it is marked with one of the following attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e[TestMethod]\u003c/code\u003e or \u003ccode\u003e[DataTestMethod]\u003c/code\u003e (for \u003cstrong\u003eMSTest\u003c/strong\u003e). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e[Fact]\u003c/code\u003e or \u003ccode\u003e[Theory]\u003c/code\u003e (for \u003cstrong\u003exUnit\u003c/strong\u003e). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e[Test]\u003c/code\u003e, \u003ccode\u003e[TestCase]\u003c/code\u003e, \u003ccode\u003e[TestCaseSource]\u003c/code\u003e, or \u003ccode\u003e[Theory]\u003c/code\u003e (for \u003cstrong\u003eNUnit\u003c/strong\u003e). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, non-\u003ccode\u003epublic\u003c/code\u003e methods are not considered test methods and will not be executed, regardless of whether they have a test\nattribute. Additionally, methods with the \u003ccode\u003easync void\u003c/code\u003e modifier or methods that contain generics \u003ccode\u003e\u0026lt;T\u0026gt;\u003c/code\u003e anywhere in their\nsignatures are also excluded from being recognized as tests and will not be executed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[TestMethod]\nvoid TestNullArg()  // Noncompliant, method is not public\n{  /* ... */  }\n\n[TestMethod]\npublic async void MyIgnoredTestMethod()  // Noncompliant, this is an \u0027async void\u0027 method\n{ /* ... */ }\n\n[TestMethod]\npublic void MyIgnoredGenericTestMethod\u0026lt;T\u0026gt;(T foo)  // Noncompliant, method has generics in its signature\n{ /* ... */ }\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[TestMethod]\npublic void TestNullArg()\n{  /* ... */  }\n\n[TestMethod]\npublic async Task MyIgnoredTestMethod()\n{ /* ... */ }\n\n[TestMethod]\npublic void MyIgnoredGenericTestMethod(int foo)\n{ /* ... */ }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFor \u003cstrong\u003exUnit\u003c/strong\u003e, accessibility is disregarded when it comes to \u003ccode\u003e[Fact]\u003c/code\u003e test methods, as they do not necessarily need to be\ndeclared as \u003ccode\u003epublic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003exUnit\u003c/strong\u003e, \u003ccode\u003e[Theory]\u003c/code\u003e test methods, as well as \u003ccode\u003e[TestCase]\u003c/code\u003e and \u003ccode\u003e[TestCaseSource]\u003c/code\u003e test methods in\n\u003cstrong\u003eNUnit\u003c/strong\u003e, have the flexibility to be generic, allowing for a wider range of test scenarios.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest\"\u003eUnit testing C# with MSTest\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-nunit\"\u003eUnit testing C# with NUnit\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test\"\u003eUnit testing C# with xUnit\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2589",
    "name": "Boolean expressions should not be gratuitous",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule looks for operands of a boolean expression never changing the result of the expression. It also applies to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003enull coalescing operator\u003c/a\u003e when one of\nthe operands always evaluates to \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstring d \u003d null;\nvar v1 \u003d d ?? \"value\";      // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003cpre\u003e\nconst bool debug \u003d false;\n//...\nif (debug)                  // Compliant\n{\n  // Print something\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c)\n{\n    var a \u003d true;\n    if (a)                  // Noncompliant: \"a\" is always \"true\"\n    {\n        DoSomething();\n    }\n\n    if (b \u0026amp;\u0026amp; a)             // Noncompliant: \"a\" is always \"true\"\n    {\n        DoSomething();\n    }\n\n    if (c || !a)            // Noncompliant: \"!a\" is always \"false\"\n    {\n        DoSomething();\n    }\n\n    string d \u003d null;\n    var v1 \u003d d ?? \"value\";  // Noncompliant: \"d\" is always null and v1 is always \"value\".\n    var v2 \u003d s ?? d;        // Noncompliant: \"d\" is always null and v2 is always equal to s.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe unnecessary operand is updated:\u003c/p\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c, string s)\n{\n    var a \u003d IsAllowed();\n    if (a)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    if (b \u0026amp;\u0026amp; a)             // Compliant\n    {\n        DoSomething();\n    }\n\n    if (c || !a)            // Compliant\n    {\n        DoSomething();\n    }\n\n    string d \u003d GetStringData();\n    var v1 \u003d d ?? \"value\";  // Compliant\n    var v2 \u003d s ?? d;        // Compliant\n}\n\u003c/pre\u003e\n\u003cp\u003eThe unnecessary operand is removed:\u003c/p\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c, string s)\n{\n    DoSomething();\n\n    if (b)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    if (c)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    var v1 \u003d \"value\";       // Compliant\n    var v2 \u003d s;             // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\"\u003eConditional logical AND operator \u0026amp;\u0026amp;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\"\u003eConditional logical OR operator ||\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003eNull-coalescing operators ??\n  and ??\u003d\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule looks for operands of a boolean expression never changing the result of the expression. It also applies to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003enull coalescing operator\u003c/a\u003e when one of\nthe operands always evaluates to \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstring d \u003d null;\nvar v1 \u003d d ?? \"value\";      // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003cpre\u003e\nconst bool debug \u003d false;\n//...\nif (debug)                  // Compliant\n{\n  // Print something\n}\n\u003c/pre\u003e \u003c/li\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c)\n{\n    var a \u003d true;\n    if (a)                  // Noncompliant: \"a\" is always \"true\"\n    {\n        DoSomething();\n    }\n\n    if (b \u0026amp;\u0026amp; a)             // Noncompliant: \"a\" is always \"true\"\n    {\n        DoSomething();\n    }\n\n    if (c || !a)            // Noncompliant: \"!a\" is always \"false\"\n    {\n        DoSomething();\n    }\n\n    string d \u003d null;\n    var v1 \u003d d ?? \"value\";  // Noncompliant: \"d\" is always null and v1 is always \"value\".\n    var v2 \u003d s ?? d;        // Noncompliant: \"d\" is always null and v2 is always equal to s.\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe unnecessary operand is updated:\u003c/p\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c, string s)\n{\n    var a \u003d IsAllowed();\n    if (a)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    if (b \u0026amp;\u0026amp; a)             // Compliant\n    {\n        DoSomething();\n    }\n\n    if (c || !a)            // Compliant\n    {\n        DoSomething();\n    }\n\n    string d \u003d GetStringData();\n    var v1 \u003d d ?? \"value\";  // Compliant\n    var v2 \u003d s ?? d;        // Compliant\n}\n\u003c/pre\u003e\n\u003cp\u003eThe unnecessary operand is removed:\u003c/p\u003e\n\u003cpre\u003e\npublic void Sample(bool b, bool c, string s)\n{\n    DoSomething();\n\n    if (b)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    if (c)                  // Compliant\n    {\n        DoSomething();\n    }\n\n    var v1 \u003d \"value\";       // Compliant\n    var v2 \u003d s;             // Compliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\"\u003eConditional logical AND operator \u0026amp;\u0026amp;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\"\u003eConditional logical OR operator ||\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator\"\u003eNull-coalescing operators ??\n  and ??\u003d\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe",
      "redundant",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2346",
    "name": "Flags enumerations zero-value members should be named \"None\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn enumeration can be decorated with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e to\nindicate that it can be used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit field\u003c/a\u003e: a set of flags, that can be independently set and\nreset.\u003c/p\u003e\n\u003cp\u003eFor example, the following definition of the day of the week:\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    Monday \u003d 1,    // 0b00000001\n    Tuesday \u003d 2,   // 0b00000010\n    Wednesday \u003d 4, // 0b00000100\n    Thursday \u003d 8,  // 0b00001000\n    Friday \u003d 16,   // 0b00010000\n    Saturday \u003d 32, // 0b00100000\n    Sunday \u003d 64    // 0b01000000\n}\n\u003c/pre\u003e\n\u003cp\u003eallows to define special set of days, such as \u003ccode\u003eWeekDays\u003c/code\u003e and \u003ccode\u003eWeekend\u003c/code\u003e using the \u003ccode\u003e|\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    // ...\n    None \u003d 0,                                                    // 0b00000000\n    Weekdays \u003d Monday | Tuesday | Wednesday | Thursday | Friday, // 0b00011111\n    Weekend \u003d Saturday | Sunday,                                 // 0b01100000\n    All \u003d Weekdays | Weekend                                     // 0b01111111\n}\n\u003c/pre\u003e\n\u003cp\u003eThese can be used to write more expressive conditions, taking advantage of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003ebitwise operators\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nvar someDays \u003d Days.Wednesday | Days.Weekend;  // 0b01100100\nsomeDays.HasFlag(Days.Wednesday);              // someDays contains Wednesday\n\nvar mondayAndWednesday \u003d Days.Monday | Days.Wednesday;\nsomeDays.HasFlag(mondayAndWednesday);          // someDays contains Monday and Wednesday\nsomeDays.HasFlag(Days.Monday) || someDays.HasFlag(Days.Wednesday); // someDays contains Monday or Wednesday\nsomeDays \u0026amp; Days.Weekend !\u003d Days.None;          // someDays overlaps with the weekend\nsomeDays \u0026amp; Days.Weekdays \u003d\u003d Days.Weekdays;     // someDays is only made of weekdays\n\u003c/pre\u003e\n\u003cp\u003eConsistent use of \u003ccode\u003eNone\u003c/code\u003e in flag enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any\nother state since there is no way to check that the bit \u003ccode\u003e0\u003c/code\u003e is set.\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    Monday \u003d 0,    // 0 is used to indicate Monday\n    Tuesday \u003d 1,\n    Wednesday \u003d 2,\n    Thursday \u003d 4,\n    Friday \u003d 8,\n    Saturday \u003d 16,\n    Sunday \u003d 32,\n    Weekdays \u003d Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekend \u003d Saturday | Sunday,\n    All \u003d Weekdays | Weekend\n}\n\nvar someDays \u003d Days.Wednesday | Days.Thursday;\nsomeDays \u0026amp; Days.Tuesday \u003d\u003d Days.Tuesday // False, because someDays doesn\u0027t contains Tuesday\nsomeDays \u0026amp; Days.Monday \u003d\u003d Days.Monday   // True, even though someDays doesn\u0027t contains Monday!\nsomeDays.HasFlag(Days.Monday)           // Same issue as above\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Flags]\nenum FruitType\n{\n    Void \u003d 0,        // Non-Compliant\n    Banana \u003d 1,\n    Orange \u003d 2,\n    Strawberry \u003d 4\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Flags]\nenum FruitType\n{\n    None \u003d 0,        // Compliant\n    Banana \u003d 1,\n    Orange \u003d 2,\n    Strawberry \u003d 4\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise and shift operators\n  (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag(Enum) Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229062(v\u003dvs.100)\"\u003eDesigning Flags Enumerations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn enumeration can be decorated with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e to\nindicate that it can be used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit field\u003c/a\u003e: a set of flags, that can be independently set and\nreset.\u003c/p\u003e\n\u003cp\u003eFor example, the following definition of the day of the week:\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    Monday \u003d 1,    // 0b00000001\n    Tuesday \u003d 2,   // 0b00000010\n    Wednesday \u003d 4, // 0b00000100\n    Thursday \u003d 8,  // 0b00001000\n    Friday \u003d 16,   // 0b00010000\n    Saturday \u003d 32, // 0b00100000\n    Sunday \u003d 64    // 0b01000000\n}\n\u003c/pre\u003e\n\u003cp\u003eallows to define special set of days, such as \u003ccode\u003eWeekDays\u003c/code\u003e and \u003ccode\u003eWeekend\u003c/code\u003e using the \u003ccode\u003e|\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    // ...\n    None \u003d 0,                                                    // 0b00000000\n    Weekdays \u003d Monday | Tuesday | Wednesday | Thursday | Friday, // 0b00011111\n    Weekend \u003d Saturday | Sunday,                                 // 0b01100000\n    All \u003d Weekdays | Weekend                                     // 0b01111111\n}\n\u003c/pre\u003e\n\u003cp\u003eThese can be used to write more expressive conditions, taking advantage of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003ebitwise operators\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nvar someDays \u003d Days.Wednesday | Days.Weekend;  // 0b01100100\nsomeDays.HasFlag(Days.Wednesday);              // someDays contains Wednesday\n\nvar mondayAndWednesday \u003d Days.Monday | Days.Wednesday;\nsomeDays.HasFlag(mondayAndWednesday);          // someDays contains Monday and Wednesday\nsomeDays.HasFlag(Days.Monday) || someDays.HasFlag(Days.Wednesday); // someDays contains Monday or Wednesday\nsomeDays \u0026amp; Days.Weekend !\u003d Days.None;          // someDays overlaps with the weekend\nsomeDays \u0026amp; Days.Weekdays \u003d\u003d Days.Weekdays;     // someDays is only made of weekdays\n\u003c/pre\u003e\n\u003cp\u003eConsistent use of \u003ccode\u003eNone\u003c/code\u003e in flag enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any\nother state since there is no way to check that the bit \u003ccode\u003e0\u003c/code\u003e is set.\u003c/p\u003e\n\u003cpre\u003e\n[Flags]\nenum Days\n{\n    Monday \u003d 0,    // 0 is used to indicate Monday\n    Tuesday \u003d 1,\n    Wednesday \u003d 2,\n    Thursday \u003d 4,\n    Friday \u003d 8,\n    Saturday \u003d 16,\n    Sunday \u003d 32,\n    Weekdays \u003d Monday | Tuesday | Wednesday | Thursday | Friday,\n    Weekend \u003d Saturday | Sunday,\n    All \u003d Weekdays | Weekend\n}\n\nvar someDays \u003d Days.Wednesday | Days.Thursday;\nsomeDays \u0026amp; Days.Tuesday \u003d\u003d Days.Tuesday // False, because someDays doesn\u0027t contains Tuesday\nsomeDays \u0026amp; Days.Monday \u003d\u003d Days.Monday   // True, even though someDays doesn\u0027t contains Monday!\nsomeDays.HasFlag(Days.Monday)           // Same issue as above\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n[Flags]\nenum FruitType\n{\n    Void \u003d 0,        // Non-Compliant\n    Banana \u003d 1,\n    Orange \u003d 2,\n    Strawberry \u003d 4\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n[Flags]\nenum FruitType\n{\n    None \u003d 0,        // Compliant\n    Banana \u003d 1,\n    Orange \u003d 2,\n    Strawberry \u003d 4\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise and shift operators\n  (C# reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag(Enum) Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229062(v\u003dvs.100)\"\u003eDesigning Flags Enumerations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "csharpsquid:S2225",
    "name": "\"ToString()\" method should not return null",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString()\u003c/a\u003e on an object should always return a\n\u003ccode\u003estring\u003c/code\u003e. Thus, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method\"\u003eoverriding the\nToString method\u003c/a\u003e should never return \u003ccode\u003enull\u003c/code\u003e, as it breaks the method’s implicit contract, and as a result the consumer’s\nexpectations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic override string ToString ()\n{\n  if (this.collection.Count \u003d\u003d 0)\n  {\n    return null; // Noncompliant\n  }\n  else\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eA better alternative is to use the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.empty\"\u003eString.Empty\u003c/a\u003e built-in field.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic override string ToString ()\n{\n  if (this.collection.Count \u003d\u003d 0)\n  {\n    return string.Empty;\n  }\n  else\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eObject.ToString Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method\"\u003eHow to\n  override the ToString method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString()\u003c/a\u003e on an object should always return a\n\u003ccode\u003estring\u003c/code\u003e. Thus, \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method\"\u003eoverriding the\nToString method\u003c/a\u003e should never return \u003ccode\u003enull\u003c/code\u003e, as it breaks the method’s implicit contract, and as a result the consumer’s\nexpectations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic override string ToString ()\n{\n  if (this.collection.Count \u003d\u003d 0)\n  {\n    return null; // Noncompliant\n  }\n  else\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eA better alternative is to use the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.empty\"\u003eString.Empty\u003c/a\u003e built-in field.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic override string ToString ()\n{\n  if (this.collection.Count \u003d\u003d 0)\n  {\n    return string.Empty;\n  }\n  else\n  {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eObject.ToString Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-override-the-tostring-method\"\u003eHow to\n  override the ToString method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "CS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  }
]