[
  {
    "key": "javascript:S2092",
    "name": "Creating cookies without the \"secure\" flag is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a cookie is protected with the \u003ccode\u003esecure\u003c/code\u003e attribute set to \u003cem\u003etrue\u003c/em\u003e it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the cookie is for instance a \u003cem\u003esession-cookie\u003c/em\u003e not designed to be sent over non-HTTPS communication. \u003c/li\u003e\n  \u003cli\u003e itâ€™s not sure that the website contains \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\"\u003emixed content\u003c/a\u003e or not\n  (ie HTTPS everywhere or not) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookie-session\"\u003ecookie-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet session \u003d cookieSession({\n  secure: false,// Sensitive\n});  // Sensitive\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express-session\"\u003eexpress-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst session \u003d require(\u0027express-session\u0027);\n\nlet app \u003d express();\napp.use(session({\n  cookie:\n  {\n    secure: false // Sensitive\n  }\n}));\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookies\"\u003ecookies\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet cookies \u003d new Cookies(req, res, { keys: keys });\n\ncookies.set(\u0027LastVisit\u0027, new Date().toISOString(), {\n  secure: false // Sensitive\n}); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003ecsurf\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst cookieParser \u003d require(\u0027cookie-parser\u0027);\nconst csrf \u003d require(\u0027csurf\u0027);\nconst express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie: { secure: false }}); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e It is recommended to use \u003ccode\u003eHTTPs\u003c/code\u003e everywhere so setting the \u003ccode\u003esecure\u003c/code\u003e flag to \u003cem\u003etrue\u003c/em\u003e should be the default behaviour\n  when creating cookies. \u003c/li\u003e\n  \u003cli\u003e Set the \u003ccode\u003esecure\u003c/code\u003e flag to \u003cem\u003etrue\u003c/em\u003e for session-cookies. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookie-session\"\u003ecookie-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet session \u003d cookieSession({\n  secure: true,// Compliant\n});  // Compliant\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express-session\"\u003eexpress-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst session \u003d require(\u0027express-session\u0027);\n\nlet app \u003d express();\napp.use(session({\n  cookie:\n  {\n    secure: true // Compliant\n  }\n}));\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookies\"\u003ecookies\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet cookies \u003d new Cookies(req, res, { keys: keys });\n\ncookies.set(\u0027LastVisit\u0027, new Date().toISOString(), {\n  secure: true // Compliant\n}); // Compliant\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003ecsurf\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst cookieParser \u003d require(\u0027cookie-parser\u0027);\nconst csrf \u003d require(\u0027csurf\u0027);\nconst express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie: { secure: true }}); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315\"\u003eMITRE, CWE-315\u003c/a\u003e - Cleartext Storage of Sensitive Information in a Cookie \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/614\"\u003eMITRE, CWE-614\u003c/a\u003e - Sensitive Cookie in HTTPS Session Without \u0027Secure\u0027 Attribute \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6331",
    "name": "Regular expressions should not contain empty groups",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere are several reasons to use a group in a regular expression:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to change the precedence (e.g. \u003ccode\u003edo(g|or)\u003c/code\u003e will match \u0027dog\u0027 and \u0027door\u0027) \u003c/li\u003e\n  \u003cli\u003e to remember parenthesised part of the match in the case of capturing group \u003c/li\u003e\n  \u003cli\u003e to improve readability \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst dateRegex \u003d /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\\d\\d(?:)$/; // Noncompliant, useless group at the end\nconst methodCallRegex \u003d /foo()/;  // Noncompliant, will match only \u0027foo\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst dateRegex \u003d /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\\d\\d$/;\nconst methodCallRegex \u003d /foo\\(\\)/; // OK, matches \u0027foo()\u0027\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere are several reasons to use a group in a regular expression:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to change the precedence (e.g. \u003ccode\u003edo(g|or)\u003c/code\u003e will match \u0027dog\u0027 and \u0027door\u0027) \u003c/li\u003e\n  \u003cli\u003e to remember parenthesised part of the match in the case of capturing group \u003c/li\u003e\n  \u003cli\u003e to improve readability \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst dateRegex \u003d /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\\d\\d(?:)$/; // Noncompliant, useless group at the end\nconst methodCallRegex \u003d /foo()/;  // Noncompliant, will match only \u0027foo\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst dateRegex \u003d /^(?:0[1-9]|[12][0-9]|3[01])[- /.](?:0[1-9]|1[012])[- /.](?:19|20)\\d\\d$/;\nconst methodCallRegex \u003d /foo\\(\\)/; // OK, matches \u0027foo()\u0027\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6332",
    "name": "Using unencrypted EFS file systems is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon Elastic File System (EFS) is a serverless file system that does not require provisioning or managing storage. Stored files can be\nautomatically encrypted by the service. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are\nnot able to access the data.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The file system contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\"\u003e\u003ccode\u003eaws_cdk.aws_efs.FileSystem\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { FileSystem } from \u0027aws-cdk-lib/aws-efs\u0027;\n\nnew FileSystem(this, \u0027unencrypted-explicit\u0027, {\n    vpc: new Vpc(this, \u0027VPC\u0027),\n    encrypted: false // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\"\u003e\u003ccode\u003eaws_cdk.aws_efs.CfnFileSystem\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnFileSystem } from \u0027aws-cdk-lib/aws-efs\u0027;\n\nnew CfnFileSystem(this, \u0027unencrypted-implicit-cfn\u0027, {\n}); // Sensitive as encryption is disabled by default\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to encrypt EFS file systems that contain sensitive information. Encryption and decryption are handled transparently by EFS, so no\nfurther modifications to the application are necessary.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\"\u003e\u003ccode\u003eaws_cdk.aws_efs.FileSystem\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { FileSystem } from \u0027aws-cdk-lib/aws-efs\u0027;\n\nnew FileSystem(this, \u0027encrypted-explicit\u0027, {\n    vpc: new Vpc(this, \u0027VPC\u0027),\n    encrypted: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\"\u003e\u003ccode\u003eaws_cdk.aws_efs.CfnFileSystem\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnFileSystem } from \u0027aws-cdk-lib/aws-efs\u0027;\n\nnew CfnFileSystem(this, \u0027encrypted-explicit-cfn\u0027, {\n    encrypted: true\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/efs/latest/ug/encryption.html\"\u003eAWS Documentation\u003c/a\u003e - Data encryption in Amazon EFS \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5122",
    "name": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-0269\"\u003eCVE-2018-0269\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-14460\"\u003eCVE-2017-14460\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003eSame origin policy\u003c/a\u003e in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e You donâ€™t trust the origin specified, example: \u003ccode\u003eAccess-Control-Allow-Origin: untrustedwebsite.com\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Access control policy is entirely disabled: \u003ccode\u003eAccess-Control-Allow-Origin: *\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Your access control policy is dynamically defined by a user-controlled input like \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"\u003e\u003ccode\u003eorigin\u003c/code\u003e\u003c/a\u003e header. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://nodejs.org/api/http.html\"\u003enodejs http\u003c/a\u003e built-in module:\u003c/p\u003e\n\u003cpre\u003e\nconst http \u003d require(\u0027http\u0027);\nconst srv \u003d http.createServer((req, res) \u003d\u0026gt; {\n  res.writeHead(200, { \u0027Access-Control-Allow-Origin\u0027: \u0027*\u0027 }); // Sensitive\n  res.end(\u0027ok\u0027);\n});\nsrv.listen(3000);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express\"\u003eExpress.js\u003c/a\u003e framework with \u003ca href\u003d\"https://www.npmjs.com/package/cors\"\u003ecors middleware\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst cors \u003d require(\u0027cors\u0027);\n\nlet app1 \u003d express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions \u003d {\n  origin: \u0027*\u0027 // Sensitive\n};\n\nlet app2 \u003d express();\napp2.use(cors(corsOptions));\n\u003c/pre\u003e\n\u003cp\u003eUser-controlled origin:\u003c/p\u003e\n\u003cpre\u003e\nfunction (req, res) {\n  const origin \u003d req.header(\u0027Origin\u0027);\n  res.setHeader(\u0027Access-Control-Allow-Origin\u0027, origin); // Sensitive\n};\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eAccess-Control-Allow-Origin\u003c/code\u003e header should be set only for a trusted origin and for specific resources. \u003c/li\u003e\n  \u003cli\u003e Allow only selected, trusted domains in the \u003ccode\u003eAccess-Control-Allow-Origin\u003c/code\u003e header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the \u003ccode\u003eOrigin\u003c/code\u003e header content without any checks). \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://nodejs.org/api/http.html\"\u003enodejs http\u003c/a\u003e built-in module:\u003c/p\u003e\n\u003cpre\u003e\nconst http \u003d require(\u0027http\u0027);\nconst srv \u003d http.createServer((req, res) \u003d\u0026gt; {\n  res.writeHead(200, { \u0027Access-Control-Allow-Origin\u0027: \u0027trustedwebsite.com\u0027 }); // Compliant\n  res.end(\u0027ok\u0027);\n});\nsrv.listen(3000);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express\"\u003eExpress.js\u003c/a\u003e framework with \u003ca href\u003d\"https://www.npmjs.com/package/cors\"\u003ecors middleware\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst cors \u003d require(\u0027cors\u0027);\n\nlet corsOptions \u003d {\n  origin: \u0027trustedwebsite.com\u0027 // Compliant\n};\n\nlet app \u003d express();\napp.use(cors(corsOptions));\n\u003c/pre\u003e\n\u003cp\u003eUser-controlled origin validated with an allow-list:\u003c/p\u003e\n\u003cpre\u003e\nfunction (req, res) {\n  const origin \u003d req.header(\u0027Origin\u0027);\n\n  if (trustedOrigins.indexOf(origin) \u0026gt;\u003d 0) {\n    res.setHeader(\u0027Access-Control-Allow-Origin\u0027, origin);\n  }\n};\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003edeveloper.mozilla.org\u003c/a\u003e - CORS \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003edeveloper.mozilla.org\u003c/a\u003e - Same origin policy \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"\u003eOWASP HTML5 Security\n  Cheat Sheet\u003c/a\u003e - Cross Origin Resource Sharing \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/346\"\u003eMITRE, CWE-346\u003c/a\u003e - Origin Validation Error \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/942\"\u003eMITRE, CWE-942\u003c/a\u003e - Overly Permissive Cross-domain Whitelist \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S4275",
    "name": "Getters and setters should access the expected fields",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eGetters and setters provide a way to enforce encapsulation by providing methods that give controlled access to class fields. However, in classes\nwith multiple fields, it is not unusual that copy and paste is used to quickly create the needed getters and setters, which can result in the wrong\nfield being accessed by a getter or setter.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A setter does not update the field with the corresponding name (if it exists). \u003c/li\u003e\n  \u003cli\u003e A getter:\n    \u003cul\u003e\n      \u003cli\u003e does not return any value \u003c/li\u003e\n      \u003cli\u003e does not access the field with the corresponding name (if it exists). \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnderscore prefixes for fields are supported, so \u003ccode\u003esetX()\u003c/code\u003e can assign a value to \u003ccode\u003e_x\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe following type of getters and setters are supported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003egetX()\u003c/code\u003e and \u003ccode\u003esetX()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A {\n  #y: number \u003d 0;\n  setY(val: number) { // Noncompliant: field \u0027#y\u0027 is not updated\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass A {\n  #y: number \u003d 0;\n  setY(val: number) {\n    this.#y \u003d val;\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eget x()\u003c/code\u003e and \u003ccode\u003eset x()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A {\n  _x: number \u003d 0;\n  #y: number \u003d 0;\n\n  get x() { // Noncompliant: field \u0027_x\u0027 is not used in the return value\n    return this.#y;\n  }\n\n  get y() { // Noncompliant: method may not return any value\n    if (condition) {\n      return #y;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass A {\n  _x: number \u003d 0;\n  #y: number \u003d 0;\n\n  get x() {\n    return this._x;\n  }\n  get y() {\n    if (condition) {\n      return #y;\n    }\n    return 1;\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e getters and setters defined with \u003ccode\u003eObject.defineProperty()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d 0;\nlet y \u003d 0;\nObject.defineProperty(o, \u0027x\u0027, {\n  get() { // Noncompliant: variable \u0027x\u0027 is not used in the return value\n    return y;\n  }\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d 0;\nlet y \u003d 0;\nObject.defineProperty(o, \u0027x\u0027, {\n  get() {\n    return x;\n  }\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003eget\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003eset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\"\u003ePrivate class\n  features\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eGetters and setters provide a way to enforce encapsulation by providing methods that give controlled access to class fields. However, in classes\nwith multiple fields, it is not unusual that copy and paste is used to quickly create the needed getters and setters, which can result in the wrong\nfield being accessed by a getter or setter.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A setter does not update the field with the corresponding name (if it exists). \u003c/li\u003e\n  \u003cli\u003e A getter:\n    \u003cul\u003e\n      \u003cli\u003e does not return any value \u003c/li\u003e\n      \u003cli\u003e does not access the field with the corresponding name (if it exists). \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnderscore prefixes for fields are supported, so \u003ccode\u003esetX()\u003c/code\u003e can assign a value to \u003ccode\u003e_x\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe following type of getters and setters are supported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003egetX()\u003c/code\u003e and \u003ccode\u003esetX()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A {\n  #y: number \u003d 0;\n  setY(val: number) { // Noncompliant: field \u0027#y\u0027 is not updated\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass A {\n  #y: number \u003d 0;\n  setY(val: number) {\n    this.#y \u003d val;\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eget x()\u003c/code\u003e and \u003ccode\u003eset x()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass A {\n  _x: number \u003d 0;\n  #y: number \u003d 0;\n\n  get x() { // Noncompliant: field \u0027_x\u0027 is not used in the return value\n    return this.#y;\n  }\n\n  get y() { // Noncompliant: method may not return any value\n    if (condition) {\n      return #y;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass A {\n  _x: number \u003d 0;\n  #y: number \u003d 0;\n\n  get x() {\n    return this._x;\n  }\n  get y() {\n    if (condition) {\n      return #y;\n    }\n    return 1;\n  }\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e getters and setters defined with \u003ccode\u003eObject.defineProperty()\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d 0;\nlet y \u003d 0;\nObject.defineProperty(o, \u0027x\u0027, {\n  get() { // Noncompliant: variable \u0027x\u0027 is not used in the return value\n    return y;\n  }\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d 0;\nlet y \u003d 0;\nObject.defineProperty(o, \u0027x\u0027, {\n  get() {\n    return x;\n  }\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get\"\u003eget\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003eset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\"\u003ePrivate class\n  features\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2094",
    "name": "Classes should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThere is no good excuse for an empty class. If itâ€™s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003cp\u003eAdditionally, one shouldnâ€™t use a class to define exclusively static methods. Instead one can use a module, or better, export each function\nseparately.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing an empty class serves no purpose and can hinder the readability of the code.\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {\n  static bar() {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eYou can export the functions that you wish to make available.\u003c/p\u003e\n\u003cpre\u003e\nexport function bar()  {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo { // Noncompliant\n  static bar() {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nexport function bar() {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass DoAndLog { // Noncompliant\n  constructor () {\n    console.log(\u0027I\\\u0027m done!\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction doAndLog() {\n  console.log(\u0027I\\\u0027m done!\u0027);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThere is no good excuse for an empty class. If itâ€™s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003cp\u003eAdditionally, one shouldnâ€™t use a class to define exclusively static methods. Instead one can use a module, or better, export each function\nseparately.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing an empty class serves no purpose and can hinder the readability of the code.\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {\n  static bar() {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eYou can export the functions that you wish to make available.\u003c/p\u003e\n\u003cpre\u003e\nexport function bar()  {\n  // ...\n}\n\u003c/pre\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo { // Noncompliant\n  static bar() {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nexport function bar() {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass DoAndLog { // Noncompliant\n  constructor () {\n    console.log(\u0027I\\\u0027m done!\u0027);\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction doAndLog() {\n  console.log(\u0027I\\\u0027m done!\u0027);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4030",
    "name": "Collection contents should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA collection is a data structure that holds multiple values, such as an array or a map. If a collection is declared and populated, but its values\nare never read anywhere in the code, it can be considered unused code. This can be due to some refactoring, copy-pasting, or typing errors.\u003c/p\u003e\n\u003cp\u003eUnused collections can waste memory usage and slow down the applicationâ€™s performance. Additionally, they can make the code harder to read and\nunderstand, especially for other developers working on the same codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getLength(a, b, c) {\n  const strings \u003d [];  // Noncompliant: Array is declared and populated but never read\n  strings.push(a);\n  strings.push(b);\n  strings.push(c);\n\n  return a.length + b.length + c.length;\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove unused collections so that the application can run faster and more smoothly. The code becomes cleaner and more efficient, making it easier\nto read, understand, and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction getLength(a, b, c) {\n  return a.length + b.length + c.length;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections\"\u003eIndexed collections\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections\"\u003eKeyed collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA collection is a data structure that holds multiple values, such as an array or a map. If a collection is declared and populated, but its values\nare never read anywhere in the code, it can be considered unused code. This can be due to some refactoring, copy-pasting, or typing errors.\u003c/p\u003e\n\u003cp\u003eUnused collections can waste memory usage and slow down the applicationâ€™s performance. Additionally, they can make the code harder to read and\nunderstand, especially for other developers working on the same codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getLength(a, b, c) {\n  const strings \u003d [];  // Noncompliant: Array is declared and populated but never read\n  strings.push(a);\n  strings.push(b);\n  strings.push(c);\n\n  return a.length + b.length + c.length;\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove unused collections so that the application can run faster and more smoothly. The code becomes cleaner and more efficient, making it easier\nto read, understand, and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction getLength(a, b, c) {\n  return a.length + b.length + c.length;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections\"\u003eIndexed collections\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections\"\u003eKeyed collections\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6330",
    "name": "Using unencrypted SQS queues is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon Simple Queue Service (SQS) is a managed message queuing service for application-to-application (A2A) communication. Amazon SQS can store\nmessages encrypted as soon as they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message\nfrom the file system, for example through a vulnerability in the service, they are not able to access the data.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The queue contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.Queue.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sqs.Queue\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { Queue } from \u0027aws-cdk-lib/aws-sqs\u0027;\n\nnew Queue(this, \u0027example\u0027); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sqs.CfnQueue\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnQueue } from \u0027aws-cdk-lib/aws-sqs\u0027;\n\nnew CfnQueue(this, \u0027example\u0027); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to encrypt SQS queues that contain sensitive information. Encryption and decryption are handled transparently by SQS, so no\nfurther modifications to the application are necessary.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.Queue.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sqs.Queue\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { Queue } from \u0027aws-cdk-lib/aws-sqs\u0027;\n\nnew Queue(this, \u0027example\u0027, {\n    encryption: QueueEncryption.KMS_MANAGED\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sqs.CfnQueue\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnQueue } from \u0027aws-cdk-lib/aws-sqs\u0027;\n\nconst encryptionKey \u003d new Key(this, \u0027example\u0027, {\n    enableKeyRotation: true,\n});\n\nnew CfnQueue(this, \u0027example\u0027, {\n    kmsMasterKeyId: encryptionKey.keyId\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\"\u003eAWS Documentation\u003c/a\u003e -\n  Encryption at rest \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5247",
    "name": "Disabling auto-escaping in template engines is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo reduce the risk of cross-site scripting attacks, templating systems, such as \u003ccode\u003eTwig\u003c/code\u003e, \u003ccode\u003eDjango\u003c/code\u003e, \u003ccode\u003eSmarty\u003c/code\u003e,\n\u003ccode\u003eGroovy\u0027s template engine\u003c/code\u003e, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: \u0026lt;a\u0026gt;) will be transformed/replaced with escaped/sanitized values (eg: \u0026amp; lt;a\u0026amp; gt; ).\u003c/p\u003e\n\u003cp\u003eAuto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on \u003ca\nhref\u003d\"https://twig.symfony.com/doc/3.x/filters/escape.html\"\u003ethe strategy applied\u003c/a\u003e and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\"\u003ehtml entities\u003c/a\u003e) will not be relevant\nwhen variables are used in a \u003ca href\u003d\"https://en.wikipedia.org/wiki/HTML_attribute\"\u003ehtml attribute\u003c/a\u003e because \u0027\u003ccode\u003e:\u003c/code\u003e\u0027 character is not\nescaped and thus an attack as below is possible:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;a href\u003d\"{{ myLink }}\"\u0026gt;link\u0026lt;/a\u0026gt; // myLink \u003d javascript:alert(document.cookie)\n\u0026lt;a href\u003d\"javascript:alert(document.cookie)\"\u0026gt;link\u0026lt;/a\u0026gt; // JS injection (XSS attack)\n\u003c/pre\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Templates are used to render web content and\n    \u003cul\u003e\n      \u003cli\u003e dynamic variables in templates come from untrusted locations or are user-controlled inputs \u003c/li\u003e\n      \u003cli\u003e there is no local mechanism in place to sanitize or validate the inputs. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/mustache\"\u003emustache.js\u003c/a\u003e template engine:\u003c/p\u003e\n\u003cpre\u003e\nlet Mustache \u003d require(\"mustache\");\n\nMustache.escape \u003d function(text) {return text;}; // Sensitive\n\nlet rendered \u003d Mustache.render(template, { name: inputName });\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/handlebars\"\u003ehandlebars.js\u003c/a\u003e template engine:\u003c/p\u003e\n\u003cpre\u003e\nconst Handlebars \u003d require(\u0027handlebars\u0027);\n\nlet source \u003d \"\u0026lt;p\u0026gt;attack {{name}}\u0026lt;/p\u0026gt;\";\n\nlet template \u003d Handlebars.compile(source, { noEscape: true }); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/markdown-it\"\u003emarkdown-it\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nconst markdownIt \u003d require(\u0027markdown-it\u0027);\nlet md \u003d markdownIt({\n  html: true // Sensitive\n});\n\nlet result \u003d md.render(\u0027# \u0026lt;b\u0026gt;attack\u0026lt;/b\u0026gt;\u0027);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/marked\"\u003emarked\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nconst marked \u003d require(\u0027marked\u0027);\n\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  sanitize: false // Sensitive\n});\n\nconsole.log(marked(\"# test \u0026lt;b\u0026gt;attack/b\u0026gt;\"));\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/kramed\"\u003ekramed\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nlet kramed \u003d require(\u0027kramed\u0027);\n\nvar options \u003d {\n  renderer: new kramed.Renderer({\n    sanitize: false // Sensitive\n  })\n};\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eEnable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/mustache\"\u003emustache.js\u003c/a\u003e template engine:\u003c/p\u003e\n\u003cpre\u003e\nlet Mustache \u003d require(\"mustache\");\n\nlet rendered \u003d Mustache.render(template, { name: inputName }); // Compliant autoescaping is on by default\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/handlebars\"\u003ehandlebars.js\u003c/a\u003e template engine:\u003c/p\u003e\n\u003cpre\u003e\nconst Handlebars \u003d require(\u0027handlebars\u0027);\n\nlet source \u003d \"\u0026lt;p\u0026gt;attack {{name}}\u0026lt;/p\u0026gt;\";\nlet data \u003d { \"name\": \"\u0026lt;b\u0026gt;Alan\u0026lt;/b\u0026gt;\" };\n\nlet template \u003d Handlebars.compile(source); // Compliant by default noEscape is set to false\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/markdown-it\"\u003emarkdown-it\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nlet md \u003d require(\u0027markdown-it\u0027)(); // Compliant by default html is set to false\n\nlet result \u003d md.render(\u0027# \u0026lt;b\u0026gt;attack\u0026lt;/b\u0026gt;\u0027);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/marked\"\u003emarked\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nconst marked \u003d require(\u0027marked\u0027);\n\nmarked.setOptions({\n  renderer: new marked.Renderer()\n}); // Compliant by default sanitize is set to true\n\nconsole.log(marked(\"# test \u0026lt;b\u0026gt;attack/b\u0026gt;\"));\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/kramed\"\u003ekramed\u003c/a\u003e markup language parser:\u003c/p\u003e\n\u003cpre\u003e\nlet kramed \u003d require(\u0027kramed\u0027);\n\nlet options \u003d {\n  renderer: new kramed.Renderer({\n    sanitize: true // Compliant\n  })\n};\n\nconsole.log(kramed(\u0027Attack [xss?](javascript:alert(\"xss\")).\u0027, options));\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\"\u003eOWASP Cheat\n  Sheet\u003c/a\u003e - XSS Prevention Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eOWASP Top 10 2017 Category A7\u003c/a\u003e - Cross-Site\n  Scripting (XSS) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79\"\u003eMITRE, CWE-79\u003c/a\u003e - Improper Neutralization of Input During Web Page Generation\n  (\u0027Cross-site Scripting\u0027) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S4158",
    "name": "Empty collections should not be accessed or iterated",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a collection is empty with absolute certainty, it makes no sense to access or iterate it. Doing so can lead to unexpected behavior or errors\nin the code. The most common cause is that population was accidentally omitted or removed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst strings \u003d [];\n\nif (strings.includes(\"foo\")) {}  // Noncompliant: strings is always empty\n\nfor (const str of strings) {}  // Noncompliant\n\nstrings.forEach(str \u003d\u0026gt; doSomething(str)); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eMake sure your code provides some way to populate the collection if their elements are to be accessed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst strings \u003d [];\n\nstrings.push(\"foo\");\n\nif (strings.includes(\"foo\")) {}\n\nfor (const str of strings) {}\n\nstrings.forEach(str \u003d\u0026gt; doSomething(str));\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\"\u003eIterable\n  protocol\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a collection is empty with absolute certainty, it makes no sense to access or iterate it. Doing so can lead to unexpected behavior or errors\nin the code. The most common cause is that population was accidentally omitted or removed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst strings \u003d [];\n\nif (strings.includes(\"foo\")) {}  // Noncompliant: strings is always empty\n\nfor (const str of strings) {}  // Noncompliant\n\nstrings.forEach(str \u003d\u0026gt; doSomething(str)); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eMake sure your code provides some way to populate the collection if their elements are to be accessed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst strings \u003d [];\n\nstrings.push(\"foo\");\n\nif (strings.includes(\"foo\")) {}\n\nfor (const str of strings) {}\n\nstrings.forEach(str \u003d\u0026gt; doSomething(str));\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\"\u003eIterable\n  protocol\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6333",
    "name": "Creating public APIs is security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating APIs without authentication unnecessarily increases the attack surface on the target infrastructure.\u003c/p\u003e\n\u003cp\u003eUnless another authentication method is used, attackers have the opportunity to attempt attacks against the underlying API.\u003cbr\u003e This means attacks\nboth on the functionality provided by the API and its infrastructure.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The underlying API exposes all of its contents to any anonymous Internet user. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigateway.Resource.html\"\u003eaws-cdk-lib.aws_apigateway.Resource\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_apigateway as apigateway} from \"aws-cdk-lib\"\n\nconst resource \u003d api.root.addResource(\"example\")\nresource.addMethod(\n    \"GET\",\n    new apigateway.HttpIntegration(\"https://example.org\"),\n    {\n        authorizationType: apigateway.AuthorizationType.NONE // Sensitive\n    }\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\"\u003eaws-cdk-lib.aws_apigatewayv2.CfnRoute\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_apigatewayv2 as apigateway} from \"aws-cdk-lib\"\n\nnew apigateway.CfnRoute(this, \"no-auth\", {\n    apiId: api.ref,\n    routeKey: \"GET /no-auth\",\n    authorizationType: \"NONE\", // Sensitive\n    target: exampleIntegration\n})\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eIn general, prefer limiting API access to a specific set of people or entities.\u003c/p\u003e\n\u003cp\u003eAWS provides multiple methods to do so:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eAWS_IAM\u003c/code\u003e, to use standard AWS IAM roles and policies. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCOGNITO_USER_POOLS\u003c/code\u003e, to use customizable OpenID Connect (OIDC) identity providers (IdP). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCUSTOM\u003c/code\u003e, to use an AWS-independant OIDC provider, glued to the infrastructure with a Lambda authorizer. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigateway.Resource.html\"\u003eaws-cdk-lib.aws_apigateway.Resource\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_apigateway as apigateway} from \"aws-cdk-lib\"\n\nconst resource \u003d api.root.addResource(\"example\",{\n    defaultMethodOptions:{\n        authorizationType: apigateway.AuthorizationType.IAM\n    }\n})\nresource.addMethod(\n    \"POST\",\n    new apigateway.HttpIntegration(\"https://example.org\"),\n    {\n        authorizationType: apigateway.AuthorizationType.IAM\n    }\n)\nresource.addMethod(  // authorizationType is inherited from the Resource\u0027s configured defaultMethodOptions\n    \"GET\"\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\"\u003eaws-cdk-lib.aws_apigatewayv2.CfnRoute\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_apigatewayv2 as apigateway} from \"aws-cdk-lib\"\n\nnew apigateway.CfnRoute(this, \"auth\", {\n    apiId: api.ref,\n    routeKey: \"POST /auth\",\n    authorizationType: \"AWS_IAM\",\n    target: exampleIntegration\n})\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\"\u003eAWS Documentation\u003c/a\u003e -\n  Controlling and managing access to a REST API in API Gateway \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S4036",
    "name": "Searching OS commands in PATH is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen executing an OS command and unless you specify the full path to the executable, then the locations in your applicationâ€™s \u003ccode\u003ePATH\u003c/code\u003e\nenvironment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in\n\u003ccode\u003ePATH\u003c/code\u003e is a directory under his control.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The directories in the PATH environment variable may be defined by not trusted entities. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst cp \u003d require(\u0027child_process\u0027);\ncp.exec(\u0027file.exe\u0027); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eFully qualified/absolute path should be used to specify the OS command to execute.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst cp \u003d require(\u0027child_process\u0027);\ncp.exec(\u0027/usr/bin/file.exe\u0027); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eOWASP Top 10 2021 Category A8\u003c/a\u003e - Software and Data\n  Integrity Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/426\"\u003eMITRE, CWE-426\u003c/a\u003e - Untrusted Search Path \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/427\"\u003eMITRE, CWE-427\u003c/a\u003e - Uncontrolled Search Path Element \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S888",
    "name": "Equality operators should not be used in \"for\" loop termination conditions",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTesting \u003ccode\u003efor\u003c/code\u003e loop termination using an equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i !\u003d 10; i +\u003d 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i \u0026lt;\u003d 10; i +\u003d 2)  // Compliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e starts below the ending value and is incremented by 1 on each iteration. \u003c/li\u003e\n  \u003cli\u003e starts above the ending value and is decremented by 1 on each iteration. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEquality operators are also ignored when the test is against \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfor (var i \u003d 0; arr[i] !\u003d null; i++) {\n  // ...\n}\n\nfor (var i \u003d 0; (item \u003d arr[i]) !\u003d null; i++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/835\"\u003eMITRE, CWE-835\u003c/a\u003e - Loop with Unreachable Exit Condition (\u0027Infinite Loop\u0027) \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTesting \u003ccode\u003efor\u003c/code\u003e loop termination using an equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i !\u003d 10; i +\u003d 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i \u0026lt;\u003d 10; i +\u003d 2)  // Compliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e starts below the ending value and is incremented by 1 on each iteration. \u003c/li\u003e\n  \u003cli\u003e starts above the ending value and is decremented by 1 on each iteration. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEquality operators are also ignored when the test is against \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfor (var i \u003d 0; arr[i] !\u003d null; i++) {\n  // ...\n}\n\nfor (var i \u003d 0; (item \u003d arr[i]) !\u003d null; i++) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/835\"\u003eMITRE, CWE-835\u003c/a\u003e - Loop with Unreachable Exit Condition (\u0027Infinite Loop\u0027) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6441",
    "name": "Unused methods of React components should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods that are never executed are dead code and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making\nit easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eWhen using React class components, all non-React lifecycle methods should be called within the scope of the component. If a method is only called\nfrom outside the class, consider using \u003ccode\u003eprops\u003c/code\u003e to interact with the component and re-render if needed, as React encourages data-driven\ncomponents.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Profile extends React.Component {\n  render(props) {\n    return \u0026lt;h1\u0026gt;{ props.name }\u0026lt;/h1\u0026gt;;\n  }\n\n  getDefaultName() { // Noncompliant: this method is never used and is a dead code\n    return \u0027John Smith\u0027;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, remove the dead code or call the method from within the component scope.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Profile extends React.Component {\n  render(props) {\n    return \u0026lt;h1\u0026gt;{ props.name || getDefaultName() }\u0026lt;/h1\u0026gt;;\n  }\n\n  getDefaultName() {\n    return \u0027John Smith\u0027;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/components-and-props.html\"\u003eComponents and Props\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class\"\u003eAdding Lifecycle\n  Methods to a Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods that are never executed are dead code and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making\nit easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eWhen using React class components, all non-React lifecycle methods should be called within the scope of the component. If a method is only called\nfrom outside the class, consider using \u003ccode\u003eprops\u003c/code\u003e to interact with the component and re-render if needed, as React encourages data-driven\ncomponents.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Profile extends React.Component {\n  render(props) {\n    return \u0026lt;h1\u0026gt;{ props.name }\u0026lt;/h1\u0026gt;;\n  }\n\n  getDefaultName() { // Noncompliant: this method is never used and is a dead code\n    return \u0027John Smith\u0027;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, remove the dead code or call the method from within the component scope.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Profile extends React.Component {\n  render(props) {\n    return \u0026lt;h1\u0026gt;{ props.name || getDefaultName() }\u0026lt;/h1\u0026gt;;\n  }\n\n  getDefaultName() {\n    return \u0027John Smith\u0027;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/components-and-props.html\"\u003eComponents and Props\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class\"\u003eAdding Lifecycle\n  Methods to a Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6321",
    "name": "Administration services access should be restricted to specific IP addresses",
    "defaultSeverity": "MINOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCloud platforms such as AWS, Azure, or GCP support virtual firewalls that can be used to restrict access to services by controlling inbound and\noutbound traffic.\u003cbr\u003e Any firewall rule allowing traffic from all IP addresses to standard network ports on which administration services\ntraditionally listen, such as 22 for SSH, can expose these services to exploits and unauthorized access.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eLike any other service, administration services can contain vulnerabilities. Administration services run with elevated privileges and thus a\nvulnerability could have a high impact on the system.\u003c/p\u003e\n\u003cp\u003eAdditionally, credentials might be leaked through phishing or similar techniques. Attackers who are able to reach the services could use the\ncredentials to log in to the system.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIt is recommended to restrict access to remote administration services to only trusted IP addresses. In practice, trusted IP addresses are those\nheld by system administrators or those of \u003ca href\u003d\"https://aws.amazon.com/quickstart/architecture/linux-bastion/?nc1\u003dh_ls\"\u003ebastion-like\u003c/a\u003e\nservers.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and other constructs\nthat support a \u003ccode\u003econnections\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst instance \u003d new ec2.Instance(this, \"default-own-security-group\",{\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    instanceName: \"test-instance\"\n})\n\ninstance.connections.allowFrom(\n    ec2.Peer.anyIpv4(), // Noncompliant\n    ec2.Port.tcp(22),\n    /*description*/ \"Allows SSH from all IPv4\"\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.SecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst securityGroup \u003d new ec2.SecurityGroup(this, \"custom-security-group\", {\n    vpc: vpc\n})\n\nsecurityGroup.addIngressRule(\n    ec2.Peer.anyIpv4(), // Noncompliant\n    ec2.Port.tcpRange(1, 1024)\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroup(\n    this,\n    \"cfn-based-security-group\", {\n        groupDescription: \"cfn based security group\",\n        groupName: \"cfn-based-security-group\",\n        vpcId: vpc.vpcId,\n        securityGroupIngress: [\n            {\n                ipProtocol: \"6\",\n                cidrIp: \"0.0.0.0/0\", // Noncompliant\n                fromPort: 22,\n                toPort: 22\n            }\n        ]\n    }\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroupIngress.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroupIngress\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroupIngress( // Noncompliant\n    this,\n    \"ingress-all-ip-tcp-ssh\", {\n        ipProtocol: \"tcp\",\n        cidrIp: \"0.0.0.0/0\",\n        fromPort: 22,\n        toPort: 22,\n        groupId: securityGroup.attrGroupId\n})\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and other constructs\nthat support a \u003ccode\u003econnections\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst instance \u003d new ec2.Instance(this, \"default-own-security-group\",{\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    instanceName: \"test-instance\"\n})\n\ninstance.connections.allowFrom(\n    ec2.Peer.ipv4(\"192.0.2.0/24\"),\n    ec2.Port.tcp(22),\n    /*description*/ \"Allows SSH from a trusted range\"\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.SecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst securityGroup3 \u003d new ec2.SecurityGroup(this, \"custom-security-group\", {\n    vpc: vpc\n})\n\nsecurityGroup3.addIngressRule(\n    ec2.Peer.anyIpv4(),\n    ec2.Port.tcpRange(1024, 1048)\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroup(\n    this,\n    \"cfn-based-security-group\", {\n        groupDescription: \"cfn based security group\",\n        groupName: \"cfn-based-security-group\",\n        vpcId: vpc.vpcId,\n        securityGroupIngress: [\n            {\n                ipProtocol: \"6\",\n                cidrIp: \"192.0.2.0/24\",\n                fromPort: 22,\n                toPort: 22\n            }\n        ]\n    }\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroupIngress.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroupIngress\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\nnew ec2.CfnSecurityGroupIngress(\n    this,\n    \"ingress-all-ipv4-tcp-http\", {\n        ipProtocol: \"6\",\n        cidrIp: \"0.0.0.0/0\",\n        fromPort: 80,\n        toPort: 80,\n        groupId: securityGroup.attrGroupId\n    }\n)\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\"\u003eAWS Documentation\u003c/a\u003e - Security groups for your VPC \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview\"\u003eAzure Documentation\u003c/a\u003e - Network security\n  groups \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/vpc/docs/using-firewalls\"\u003eGCP Documentation\u003c/a\u003e - Firewalls \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCloud platforms such as AWS, Azure, or GCP support virtual firewalls that can be used to restrict access to services by controlling inbound and\noutbound traffic.\u003cbr\u003e Any firewall rule allowing traffic from all IP addresses to standard network ports on which administration services\ntraditionally listen, such as 22 for SSH, can expose these services to exploits and unauthorized access.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eLike any other service, administration services can contain vulnerabilities. Administration services run with elevated privileges and thus a\nvulnerability could have a high impact on the system.\u003c/p\u003e\n\u003cp\u003eAdditionally, credentials might be leaked through phishing or similar techniques. Attackers who are able to reach the services could use the\ncredentials to log in to the system.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIt is recommended to restrict access to remote administration services to only trusted IP addresses. In practice, trusted IP addresses are those\nheld by system administrators or those of \u003ca href\u003d\"https://aws.amazon.com/quickstart/architecture/linux-bastion/?nc1\u003dh_ls\"\u003ebastion-like\u003c/a\u003e\nservers.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and other constructs\nthat support a \u003ccode\u003econnections\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst instance \u003d new ec2.Instance(this, \"default-own-security-group\",{\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    instanceName: \"test-instance\"\n})\n\ninstance.connections.allowFrom(\n    ec2.Peer.anyIpv4(), // Noncompliant\n    ec2.Port.tcp(22),\n    /*description*/ \"Allows SSH from all IPv4\"\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.SecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst securityGroup \u003d new ec2.SecurityGroup(this, \"custom-security-group\", {\n    vpc: vpc\n})\n\nsecurityGroup.addIngressRule(\n    ec2.Peer.anyIpv4(), // Noncompliant\n    ec2.Port.tcpRange(1, 1024)\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroup(\n    this,\n    \"cfn-based-security-group\", {\n        groupDescription: \"cfn based security group\",\n        groupName: \"cfn-based-security-group\",\n        vpcId: vpc.vpcId,\n        securityGroupIngress: [\n            {\n                ipProtocol: \"6\",\n                cidrIp: \"0.0.0.0/0\", // Noncompliant\n                fromPort: 22,\n                toPort: 22\n            }\n        ]\n    }\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroupIngress.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroupIngress\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroupIngress( // Noncompliant\n    this,\n    \"ingress-all-ip-tcp-ssh\", {\n        ipProtocol: \"tcp\",\n        cidrIp: \"0.0.0.0/0\",\n        fromPort: 22,\n        toPort: 22,\n        groupId: securityGroup.attrGroupId\n})\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and other constructs\nthat support a \u003ccode\u003econnections\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst instance \u003d new ec2.Instance(this, \"default-own-security-group\",{\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    instanceName: \"test-instance\"\n})\n\ninstance.connections.allowFrom(\n    ec2.Peer.ipv4(\"192.0.2.0/24\"),\n    ec2.Port.tcp(22),\n    /*description*/ \"Allows SSH from a trusted range\"\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.SecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst securityGroup3 \u003d new ec2.SecurityGroup(this, \"custom-security-group\", {\n    vpc: vpc\n})\n\nsecurityGroup3.addIngressRule(\n    ec2.Peer.anyIpv4(),\n    ec2.Port.tcpRange(1024, 1048)\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroup.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroup\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnSecurityGroup(\n    this,\n    \"cfn-based-security-group\", {\n        groupDescription: \"cfn based security group\",\n        groupName: \"cfn-based-security-group\",\n        vpcId: vpc.vpcId,\n        securityGroupIngress: [\n            {\n                ipProtocol: \"6\",\n                cidrIp: \"192.0.2.0/24\",\n                fromPort: 22,\n                toPort: 22\n            }\n        ]\n    }\n)\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnSecurityGroupIngress.html\"\u003eaws-cdk-lib.aws_ec2.CfnSecurityGroupIngress\u003c/a\u003e\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\nnew ec2.CfnSecurityGroupIngress(\n    this,\n    \"ingress-all-ipv4-tcp-http\", {\n        ipProtocol: \"6\",\n        cidrIp: \"0.0.0.0/0\",\n        fromPort: 80,\n        toPort: 80,\n        groupId: securityGroup.attrGroupId\n    }\n)\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\"\u003eAWS Documentation\u003c/a\u003e - Security groups for your VPC \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview\"\u003eAzure Documentation\u003c/a\u003e - Network security\n  groups \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/vpc/docs/using-firewalls\"\u003eGCP Documentation\u003c/a\u003e - Firewalls \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4143",
    "name": "Collection elements should not be replaced unconditionally",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cp\u003eThis rule detects repeatedly adding an element at the same index or key in a collection or adding identical elements to a set.\u003c/p\u003e\n\u003cpre\u003e\nfruits[1] \u003d \"banana\";\nfruits[1] \u003d \"apple\";  // Noncompliant\n\nmyMap.set(\"key\", 1);\nmyMap.set(\"key\", 2); // Noncompliant\n\nmySet.add(1);\nmySet.add(1); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cp\u003eThis rule detects repeatedly adding an element at the same index or key in a collection or adding identical elements to a set.\u003c/p\u003e\n\u003cpre\u003e\nfruits[1] \u003d \"banana\";\nfruits[1] \u003d \"apple\";  // Noncompliant\n\nmyMap.set(\"key\", 1);\nmyMap.set(\"key\", 2); // Noncompliant\n\nmySet.add(1);\nmySet.add(1); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6442",
    "name": "React\u0027s useState hook should not be used directly in the render function or body of a component",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReactâ€™s \u003ccode\u003euseState\u003c/code\u003e hook setter function should not be called directly in the body of a component, as it would produce an infinite render\nloop. A re-rendering occurs whenever the state of a component changes. Since a hook setter function changes the componentâ€™s state, it also triggers\nre-rendering.\u003c/p\u003e\n\u003cp\u003eThe loop \"state updates â†’ triggers re-render â†’ state updates â†’ triggers re-render â†’ â€¦â€‹\" will continue indefinitely.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n\n    setLanguage(navigator.language); // Noncompliant: causes an infinite loop\n\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, the setter function should be called from an event handler.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(navigator.language);\n\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le FranÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react\"\u003eReact Hooks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState - API reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState#im-getting-an-error-too-many-re-renders\"\u003euseState -\n  Troubleshooting\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReactâ€™s \u003ccode\u003euseState\u003c/code\u003e hook setter function should not be called directly in the body of a component, as it would produce an infinite render\nloop. A re-rendering occurs whenever the state of a component changes. Since a hook setter function changes the componentâ€™s state, it also triggers\nre-rendering.\u003c/p\u003e\n\u003cp\u003eThe loop \"state updates â†’ triggers re-render â†’ state updates â†’ triggers re-render â†’ â€¦â€‹\" will continue indefinitely.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n\n    setLanguage(navigator.language); // Noncompliant: causes an infinite loop\n\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, the setter function should be called from an event handler.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(navigator.language);\n\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le FranÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react\"\u003eReact Hooks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState - API reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState#im-getting-an-error-too-many-re-renders\"\u003euseState -\n  Troubleshooting\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4140",
    "name": "Sparse arrays should not be created with extra commas",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA sparse array is an array in which the elements do not occupy a contiguous range of indices. In other words, there are gaps (or \"holes\") between\nthe elements in the array, where some indices have no corresponding value assigned to them.\u003c/p\u003e\n\u003cp\u003eIncluding an extra comma in an array literal signifies an empty slot in the array, thus creating a sparse array. An empty slot is not the same as a\nslot filled with the \u003ccode\u003eundefined\u003c/code\u003e value. In some operations, empty slots behave as if they are filled with \u003ccode\u003eundefined\u003c/code\u003e but are\nskipped in others.\u003c/p\u003e\n\u003cp\u003eWhile this is a well-defined behavior, it can be misleading and raises suspicions about the original intent: an extra comma was intentionally\ninserted, or perhaps the developer meant to insert the missing value but forgot.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d [1, , 3, 6, 9]; // Noncompliant: Extra comma maybe denoting an oversight\n\u003c/pre\u003e\n\u003cp\u003eYou should either remove the extra comma if this was a mistake or add the value you meant to insert initially.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d [1, 3, 6, 9];\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, if the additional comma was intended, this should be made explicit with an \u003ccode\u003eundefined\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\nlet a \u003d [1, undefined, 3, 6, 9];\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\"\u003eSparse arrays\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA sparse array is an array in which the elements do not occupy a contiguous range of indices. In other words, there are gaps (or \"holes\") between\nthe elements in the array, where some indices have no corresponding value assigned to them.\u003c/p\u003e\n\u003cp\u003eIncluding an extra comma in an array literal signifies an empty slot in the array, thus creating a sparse array. An empty slot is not the same as a\nslot filled with the \u003ccode\u003eundefined\u003c/code\u003e value. In some operations, empty slots behave as if they are filled with \u003ccode\u003eundefined\u003c/code\u003e but are\nskipped in others.\u003c/p\u003e\n\u003cp\u003eWhile this is a well-defined behavior, it can be misleading and raises suspicions about the original intent: an extra comma was intentionally\ninserted, or perhaps the developer meant to insert the missing value but forgot.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d [1, , 3, 6, 9]; // Noncompliant: Extra comma maybe denoting an oversight\n\u003c/pre\u003e\n\u003cp\u003eYou should either remove the extra comma if this was a mistake or add the value you meant to insert initially.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d [1, 3, 6, 9];\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, if the additional comma was intended, this should be made explicit with an \u003ccode\u003eundefined\u003c/code\u003e element.\u003c/p\u003e\n\u003cpre\u003e\nlet a \u003d [1, undefined, 3, 6, 9];\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\"\u003eSparse arrays\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6440",
    "name": "React Hooks should be properly called",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact relies on the order in which Hooks are called to correctly preserve the state of Hooks between multiple \u003ccode\u003euseState\u003c/code\u003e and\n\u003ccode\u003euseEffect\u003c/code\u003e calls. This means React Hooks should be called in the same order each time a component renders and should not be called inside\nloops, conditions, or nested functions.\u003c/p\u003e\n\u003cp\u003eAdditionally, this rule ensures that the Hooks are called only from React function components or custom Hooks.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Profile() {\n  const [ordersCount, setOrdersCount] \u003d useState(0);\n  if (ordersCount !\u003d\u003d 0) {\n    useEffect(function() { // Noncompliant: Hook is called conditionally\n      localStorage.setItem(\u0027ordersData\u0027, ordersCount);\n    });\n  }\n\n  return \u0026lt;div\u0026gt;{ getName() }\u0026lt;/div\u0026gt;\n}\n\nfunction getName() {\n  const [name] \u003d useState(\u0027John\u0027); // Noncompliant: Hook is called from a JavaScript function, not a React component\n  return name;\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, always use Hooks at the top of your React function, before any early returns.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile() {\n  const [ordersCount, setOrdersCount] \u003d useState(0);\n  useEffect(function() {\n    if (ordersCount !\u003d\u003d 0) {\n      localStorage.setItem(\u0027ordersData\u0027, ordersCount);\n    }\n  });\n\n  const [name] \u003d useState(\u0027John\u0027);\n  return \u0026lt;div\u0026gt;{ name }\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks\"\u003eBreaking Rules of Hooks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact relies on the order in which Hooks are called to correctly preserve the state of Hooks between multiple \u003ccode\u003euseState\u003c/code\u003e and\n\u003ccode\u003euseEffect\u003c/code\u003e calls. This means React Hooks should be called in the same order each time a component renders and should not be called inside\nloops, conditions, or nested functions.\u003c/p\u003e\n\u003cp\u003eAdditionally, this rule ensures that the Hooks are called only from React function components or custom Hooks.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Profile() {\n  const [ordersCount, setOrdersCount] \u003d useState(0);\n  if (ordersCount !\u003d\u003d 0) {\n    useEffect(function() { // Noncompliant: Hook is called conditionally\n      localStorage.setItem(\u0027ordersData\u0027, ordersCount);\n    });\n  }\n\n  return \u0026lt;div\u0026gt;{ getName() }\u0026lt;/div\u0026gt;\n}\n\nfunction getName() {\n  const [name] \u003d useState(\u0027John\u0027); // Noncompliant: Hook is called from a JavaScript function, not a React component\n  return name;\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, always use Hooks at the top of your React function, before any early returns.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile() {\n  const [ordersCount, setOrdersCount] \u003d useState(0);\n  useEffect(function() {\n    if (ordersCount !\u003d\u003d 0) {\n      localStorage.setItem(\u0027ordersData\u0027, ordersCount);\n    }\n  });\n\n  const [name] \u003d useState(\u0027John\u0027);\n  return \u0026lt;div\u0026gt;{ name }\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks\"\u003eBreaking Rules of Hooks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/hooks-rules.html\"\u003eRules of Hooks\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6324",
    "name": "Regular expressions should not contain control characters",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEntries in the ASCII table below code 32 are known as control characters or non-printing characters. As they are not common in JavaScript strings,\nusing these invisible characters in regular expressions is most likely a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst pattern1 \u003d /\\x1a/;             // Noncompliant: 1a (23 base 10) is less than 32\nconst pattern2 \u003d new RegExp(\u0027\\x1a\u0027); // Noncompliant: 1a (23 base 10) is less than 32\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should only match printable characters in regular expressions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst pattern1 \u003d /\\x20/;\nconst pattern2 \u003d new RegExp(\u0027\\x20\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes#C0_controls\"\u003eC0 and C1 control codes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEntries in the ASCII table below code 32 are known as control characters or non-printing characters. As they are not common in JavaScript strings,\nusing these invisible characters in regular expressions is most likely a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst pattern1 \u003d /\\x1a/;             // Noncompliant: 1a (23 base 10) is less than 32\nconst pattern2 \u003d new RegExp(\u0027\\x1a\u0027); // Noncompliant: 1a (23 base 10) is less than 32\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should only match printable characters in regular expressions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst pattern1 \u003d /\\x20/;\nconst pattern2 \u003d new RegExp(\u0027\\x20\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes#C0_controls\"\u003eC0 and C1 control codes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6325",
    "name": "Regular expression literals should be used when possible",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing regular expression literals is recommended over using the \u003ccode\u003eRegExp\u003c/code\u003e constructor calls if the pattern is a literal. Regular\nexpression literals are shorter, more readable, and do not need to be escaped like string literals. They can also be more performant because regular\nexpression literals are compiled only once when the script is loaded.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew RegExp(/foo/);\nnew RegExp(\u0027bar\u0027);\nnew RegExp(\u0027baz\u0027, \u0027i\u0027);\nnew RegExp(\"\\\\d+\");\nnew RegExp(`qux|quuz`);\n\u003c/pre\u003e\n\u003cp\u003eUsing the \u003ccode\u003eRegExp\u003c/code\u003e constructor is suitable when the pattern is computed dynamically, for example, when the user provides it. Otherwise,\nyou should prefer the more concise syntax of regular expression literals.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/foo/;\n/bar/;\n/baz/i;\n/\\d+/;\n/qux|quuz/;\nnew RegExp(`Dear ${title},`);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing regular expression literals is recommended over using the \u003ccode\u003eRegExp\u003c/code\u003e constructor calls if the pattern is a literal. Regular\nexpression literals are shorter, more readable, and do not need to be escaped like string literals. They can also be more performant because regular\nexpression literals are compiled only once when the script is loaded.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew RegExp(/foo/);\nnew RegExp(\u0027bar\u0027);\nnew RegExp(\u0027baz\u0027, \u0027i\u0027);\nnew RegExp(\"\\\\d+\");\nnew RegExp(`qux|quuz`);\n\u003c/pre\u003e\n\u003cp\u003eUsing the \u003ccode\u003eRegExp\u003c/code\u003e constructor is suitable when the pattern is computed dynamically, for example, when the user provides it. Otherwise,\nyou should prefer the more concise syntax of regular expression literals.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/foo/;\n/bar/;\n/baz/i;\n/\\d+/;\n/qux|quuz/;\nnew RegExp(`Dear ${title},`);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4144",
    "name": "Functions should not have identical implementations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTwo functions having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both functions call the same\nfunction or by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() { // Intent is clear\n  return calculateCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions with fewer than 3 lines are ignored. \u003c/li\u003e\n  \u003cli\u003e This rule does not apply to function expressions and arrow functions because they donâ€™t have explicit names and are often used in a way where\n  refactoring is not applicable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlist.map((item) \u003d\u0026gt; ({\n  name: item.name,\n  address: item.address,\n  country: item.country\n}));\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTwo functions having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both functions call the same\nfunction or by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() { // Intent is clear\n  return calculateCode();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions with fewer than 3 lines are ignored. \u003c/li\u003e\n  \u003cli\u003e This rule does not apply to function expressions and arrow functions because they donâ€™t have explicit names and are often used in a way where\n  refactoring is not applicable. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlist.map((item) \u003d\u0026gt; ({\n  name: item.name,\n  address: item.address,\n  country: item.country\n}));\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing",
      "duplicate",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6443",
    "name": "React state setter function should not be called with its matching state variable",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact components have built-in \u003ccode\u003estate\u003c/code\u003e data. This data is used to store component property values. When \u003ccode\u003estate\u003c/code\u003e changes, the\ncomponent is re-rendered. React provides the \u003ccode\u003euseState\u003c/code\u003e hook to manage the \u003ccode\u003estate\u003c/code\u003e. \u003ccode\u003euseState\u003c/code\u003e returns a state\nvariable retaining the data and a state setter function to update its value.\u003c/p\u003e\n\u003cp\u003eReact will skip re-rendering the component and its children if the new value you provide is identical to the current state, as determined by an\n\u003ccode\u003eObject.is\u003c/code\u003e comparison. When the setter function is called with the state variable as a parameter, that comparison will always be\n\u003ccode\u003etrue\u003c/code\u003e, and the component will never be re-rendered. This can happen by mistake when attempting to reset a default value or invert a\nboolean, among others.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when calling the setter function with the state variable provided by the same \u003ccode\u003euseState\u003c/code\u003e React hook.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(navigator.language)}\u0026gt;Detect language\u0026lt;/button\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(language)}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;{/* Non compliant: This button does nothing */}\n      \u0026lt;/section\u0026gt;\n    );\n};\n\u003c/pre\u003e\n\u003cp\u003eInstead, you should call the setter with any parameter different from the state variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(navigator.language)}\u0026gt;Detect language\u0026lt;/button\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/state-a-components-memory\"\u003eState: A Componentâ€™s Memory\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"\u003eObject.is()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact components have built-in \u003ccode\u003estate\u003c/code\u003e data. This data is used to store component property values. When \u003ccode\u003estate\u003c/code\u003e changes, the\ncomponent is re-rendered. React provides the \u003ccode\u003euseState\u003c/code\u003e hook to manage the \u003ccode\u003estate\u003c/code\u003e. \u003ccode\u003euseState\u003c/code\u003e returns a state\nvariable retaining the data and a state setter function to update its value.\u003c/p\u003e\n\u003cp\u003eReact will skip re-rendering the component and its children if the new value you provide is identical to the current state, as determined by an\n\u003ccode\u003eObject.is\u003c/code\u003e comparison. When the setter function is called with the state variable as a parameter, that comparison will always be\n\u003ccode\u003etrue\u003c/code\u003e, and the component will never be re-rendered. This can happen by mistake when attempting to reset a default value or invert a\nboolean, among others.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when calling the setter function with the state variable provided by the same \u003ccode\u003euseState\u003c/code\u003e React hook.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(navigator.language)}\u0026gt;Detect language\u0026lt;/button\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(language)}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;{/* Non compliant: This button does nothing */}\n      \u0026lt;/section\u0026gt;\n    );\n};\n\u003c/pre\u003e\n\u003cp\u003eInstead, you should call the setter with any parameter different from the state variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \"react\";\n\nfunction ShowLanguage() {\n    const [language, setLanguage] \u003d useState(\"fr-FR\");\n    return (\n      \u0026lt;section\u0026gt;\n        \u0026lt;h1\u0026gt;Your language is {language}!\u0026lt;/h1\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(navigator.language)}\u0026gt;Detect language\u0026lt;/button\u0026gt;\n        \u0026lt;button onClick\u003d{() \u003d\u0026gt; setLanguage(\"fr-FR\")}\u0026gt;Je prÃ©fÃ¨re le franÃ§ais\u0026lt;/button\u0026gt;\n      \u0026lt;/section\u0026gt;\n    );\n};\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/state-a-components-memory\"\u003eState: A Componentâ€™s Memory\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"\u003eObject.is()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6323",
    "name": "Alternation in regular expressions should not contain empty alternatives",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAlternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would\nmatch any input, which is most probably a mistake.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/Jack|Peter|/.test(\u0027John\u0027); // Noncompliant - returns \u0027true\u0027\n/Jack||Peter/.test(\u0027John\u0027); // Noncompliant - returns \u0027true\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/Jack|Peter/.test(\u0027John\u0027); // returns \u0027false\u0027\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eOne could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.\u003c/p\u003e\n\u003cpre\u003e\n/mandatory(-optional|)/.test(\u0027mandatory\u0027); // returns \u0027true\u0027\n/mandatory(-optional|)/.test(\u0027mandatory-optional\u0027); // returns \u0027true\u0027\n\u003c/pre\u003e\n\u003cp\u003eHowever, if there is a quantifier after the group the issue will be reported as using both \u003ccode\u003e|\u003c/code\u003e and quantifier is redundant.\u003c/p\u003e\n\u003cpre\u003e\n/mandatory(-optional|)?/.test(\u0027mandatory\u0027); // Noncompliant - using both `|` inside the group and `?` for the group.\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAlternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would\nmatch any input, which is most probably a mistake.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/Jack|Peter|/.test(\u0027John\u0027); // Noncompliant - returns \u0027true\u0027\n/Jack||Peter/.test(\u0027John\u0027); // Noncompliant - returns \u0027true\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/Jack|Peter/.test(\u0027John\u0027); // returns \u0027false\u0027\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eOne could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.\u003c/p\u003e\n\u003cpre\u003e\n/mandatory(-optional|)/.test(\u0027mandatory\u0027); // returns \u0027true\u0027\n/mandatory(-optional|)/.test(\u0027mandatory-optional\u0027); // returns \u0027true\u0027\n\u003c/pre\u003e\n\u003cp\u003eHowever, if there is a quantifier after the group the issue will be reported as using both \u003ccode\u003e|\u003c/code\u003e and quantifier is redundant.\u003c/p\u003e\n\u003cpre\u003e\n/mandatory(-optional|)?/.test(\u0027mandatory\u0027); // Noncompliant - using both `|` inside the group and `?` for the group.\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6328",
    "name": "Replacement strings should reference existing regular expression groups",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, the \u003ccode\u003eString.prototype.replace()\u003c/code\u003e method is used to replace parts of a string with new substrings. It allows you to\nperform simple to complex string replacements based on either a static string or a regular expression pattern.\u003c/p\u003e\n\u003cp\u003eWhen the first argument is a regular expression, the method will use the regular expression to search for matches within the original string and\nthen replace those matches with the specified replacement. If the second argument is a string, the method will use it as the static replacement for\nthe matched substrings found by the regular expression.\u003c/p\u003e\n\u003cp\u003eWithin the replacement string, the function supports special placeholders to insert the matched values of capturing groups from the regular\nexpression:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003e$n\u003c/code\u003e syntax allows you to reference capturing groups by their numerical index. The number \u003ccode\u003en\u003c/code\u003e corresponds to the\n  order in which the capturing group appears in the regular expression, starting from 1 for the first capturing group. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003e$\u0026lt;Name\u0026gt;\u003c/code\u003e syntax allows you to reference capturing groups by their name. Instead of using numerical indices, you can\n  assign a name to a capturing group using \u003ccode\u003e?\u0026lt;Name\u0026gt;\u003c/code\u003e within the regular expression. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf the second argument of \u003ccode\u003eString.prototype.replace()\u003c/code\u003e references non-existing groups (capturing groups that do not exist in the regular\nexpression), the behavior of the replacement will depend on the specific references made. It wonâ€™t cause an error, but the replacement will not be\nbased on any captured values, potentially leading to unexpected results in the replaced string:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the replacement string contains references like \u003ccode\u003e$1\u003c/code\u003e, \u003ccode\u003e$2\u003c/code\u003e, etc., to capturing groups that donâ€™t exist in the regular\n  expression, those references will be treated as literals. In other words, the \u003ccode\u003e$n\u003c/code\u003e will be replaced with the literal text \u003ccode\u003e$n\u003c/code\u003e\n  itself. \u003c/li\u003e\n  \u003cli\u003e If the replacement string contains references like \u003ccode\u003e$\u0026lt;Name\u0026gt;\u003c/code\u003e, they will also be treated as literals, but only if there are no\n  named captures in the regular expression; otherwise, they will be replaced with the empty string. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule checks that all referenced groups exist when replacing a pattern with a replacement string using \u003ccode\u003eString.prototype.replace()\u003c/code\u003e\nor \u003ccode\u003eString.prototype.replaceAll()\u003c/code\u003e methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst str \u003d \u0027John Doe\u0027;\nconsole.log(str.replace(/(\\w+)\\s(\\w+)/, \u0027$1, $0 $1\u0027)); // Noncompliant: index is 1-based, \u0027$0\u0027 does not exist, prints \u0027John, $0 John\u0027\nconsole.log(str.replace(/(?\u0026lt;firstName\u0026gt;\\w+)\\s(?\u0026lt;lastName\u0026gt;\\w+)/, \u0027$\u0026lt;surname\u0026gt;, $\u0026lt;firstName\u0026gt; $\u0026lt;surname\u0026gt;\u0027)); // Noncompliant:\u0026nbsp;\u0027$\u0026lt;surname\u0026gt;\u0027 does not exist but there are named captures, prints \u0027, John \u0027\n\u003c/pre\u003e\n\u003cp\u003eAlways check your regular expression and replacement string to ensure they properly reference existing capturing groups, most specifically, the\nlatter references capturing groups existing in the former.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst str \u003d \u0027John Doe\u0027;\nconsole.log(str.replace(/(\\w+)\\s(\\w+)/, \u0027$2, $1 $2\u0027));\nconsole.log(str.replace(/(?\u0026lt;firstName\u0026gt;\\w+)\\s(?\u0026lt;lastName\u0026gt;\\w+)/, \u0027$\u0026lt;lastName\u0026gt;, $\u0026lt;firstName\u0026gt; $\u0026lt;lastName\u0026gt;\u0027));\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"\u003e\u003ccode\u003eString.prototype.replace()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"\u003e\u003ccode\u003eString.prototype.replaceAll()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\"\u003eCapturing group:\n  \u003ccode\u003e(...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, the \u003ccode\u003eString.prototype.replace()\u003c/code\u003e method is used to replace parts of a string with new substrings. It allows you to\nperform simple to complex string replacements based on either a static string or a regular expression pattern.\u003c/p\u003e\n\u003cp\u003eWhen the first argument is a regular expression, the method will use the regular expression to search for matches within the original string and\nthen replace those matches with the specified replacement. If the second argument is a string, the method will use it as the static replacement for\nthe matched substrings found by the regular expression.\u003c/p\u003e\n\u003cp\u003eWithin the replacement string, the function supports special placeholders to insert the matched values of capturing groups from the regular\nexpression:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003e$n\u003c/code\u003e syntax allows you to reference capturing groups by their numerical index. The number \u003ccode\u003en\u003c/code\u003e corresponds to the\n  order in which the capturing group appears in the regular expression, starting from 1 for the first capturing group. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003e$\u0026lt;Name\u0026gt;\u003c/code\u003e syntax allows you to reference capturing groups by their name. Instead of using numerical indices, you can\n  assign a name to a capturing group using \u003ccode\u003e?\u0026lt;Name\u0026gt;\u003c/code\u003e within the regular expression. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf the second argument of \u003ccode\u003eString.prototype.replace()\u003c/code\u003e references non-existing groups (capturing groups that do not exist in the regular\nexpression), the behavior of the replacement will depend on the specific references made. It wonâ€™t cause an error, but the replacement will not be\nbased on any captured values, potentially leading to unexpected results in the replaced string:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the replacement string contains references like \u003ccode\u003e$1\u003c/code\u003e, \u003ccode\u003e$2\u003c/code\u003e, etc., to capturing groups that donâ€™t exist in the regular\n  expression, those references will be treated as literals. In other words, the \u003ccode\u003e$n\u003c/code\u003e will be replaced with the literal text \u003ccode\u003e$n\u003c/code\u003e\n  itself. \u003c/li\u003e\n  \u003cli\u003e If the replacement string contains references like \u003ccode\u003e$\u0026lt;Name\u0026gt;\u003c/code\u003e, they will also be treated as literals, but only if there are no\n  named captures in the regular expression; otherwise, they will be replaced with the empty string. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule checks that all referenced groups exist when replacing a pattern with a replacement string using \u003ccode\u003eString.prototype.replace()\u003c/code\u003e\nor \u003ccode\u003eString.prototype.replaceAll()\u003c/code\u003e methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst str \u003d \u0027John Doe\u0027;\nconsole.log(str.replace(/(\\w+)\\s(\\w+)/, \u0027$1, $0 $1\u0027)); // Noncompliant: index is 1-based, \u0027$0\u0027 does not exist, prints \u0027John, $0 John\u0027\nconsole.log(str.replace(/(?\u0026lt;firstName\u0026gt;\\w+)\\s(?\u0026lt;lastName\u0026gt;\\w+)/, \u0027$\u0026lt;surname\u0026gt;, $\u0026lt;firstName\u0026gt; $\u0026lt;surname\u0026gt;\u0027)); // Noncompliant:\u0026nbsp;\u0027$\u0026lt;surname\u0026gt;\u0027 does not exist but there are named captures, prints \u0027, John \u0027\n\u003c/pre\u003e\n\u003cp\u003eAlways check your regular expression and replacement string to ensure they properly reference existing capturing groups, most specifically, the\nlatter references capturing groups existing in the former.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst str \u003d \u0027John Doe\u0027;\nconsole.log(str.replace(/(\\w+)\\s(\\w+)/, \u0027$2, $1 $2\u0027));\nconsole.log(str.replace(/(?\u0026lt;firstName\u0026gt;\\w+)\\s(?\u0026lt;lastName\u0026gt;\\w+)/, \u0027$\u0026lt;lastName\u0026gt;, $\u0026lt;firstName\u0026gt; $\u0026lt;lastName\u0026gt;\u0027));\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"\u003e\u003ccode\u003eString.prototype.replace()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\"\u003e\u003ccode\u003eString.prototype.replaceAll()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group\"\u003eCapturing group:\n  \u003ccode\u003e(...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6329",
    "name": "Allowing public network access to cloud resources is security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEnabling public network access to cloud resources can affect an organizationâ€™s ability to protect its data or internal operations from data theft\nor disruption.\u003c/p\u003e\n\u003cp\u003eDepending on the component, inbound access from the Internet can be enabled via:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a boolean value that explicitly allows access to the public network. \u003c/li\u003e\n  \u003cli\u003e the assignment of a public IP address. \u003c/li\u003e\n  \u003cli\u003e database firewall rules that allow public IP ranges. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDeciding to allow public access may happen for various reasons such as for quick maintenance, time saving, or by accident.\u003c/p\u003e\n\u003cp\u003eThis decision increases the likelihood of attacks on the organization, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e data breaches. \u003c/li\u003e\n  \u003cli\u003e intrusions into the infrastructure to permanently steal from it. \u003c/li\u003e\n  \u003cli\u003e and various malicious traffic, such as DDoS attacks. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThis cloud resource:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e should be publicly accessible to any Internet user. \u003c/li\u003e\n  \u003cli\u003e requires inbound traffic from the Internet to function properly. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered no to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and similar\nconstructs:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.Instance(this, \"example\", {\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    vpcSubnets: {subnetType: ec2.SubnetType.PUBLIC} // Sensitive\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnInstance.html\"\u003eaws-cdk-lib.aws_ec2.CfnInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnInstance(this, \"example\", {\n    instanceType: \"t2.micro\",\n    imageId: \"ami-0ea0f26a6d50850c5\",\n    networkInterfaces: [\n        {\n            deviceIndex: \"0\",\n            associatePublicIpAddress: true, // Sensitive\n            deleteOnTermination: true,\n            subnetId: vpc.selectSubnets({subnetType: ec2.SubnetType.PUBLIC}).subnetIds[0]\n        }\n    ]\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_dms.CfnReplicationInstance.html\"\u003eaws-cdk-lib.aws_dms.CfnReplicationInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew dms.CfnReplicationInstance(\n    this, \"example\", {\n    replicationInstanceClass: \"dms.t2.micro\",\n    allocatedStorage: 5,\n    publiclyAccessible: true, // Sensitive\n    replicationSubnetGroupIdentifier: subnetGroup.replicationSubnetGroupIdentifier,\n    vpcSecurityGroupIds: [vpc.vpcDefaultSecurityGroup]\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\"\u003eaws-cdk-lib.aws_rds.CfnDBInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst rdsSubnetGroupPublic \u003d new rds.CfnDBSubnetGroup(this, \"publicSubnet\", {\n    dbSubnetGroupDescription: \"Subnets\",\n    dbSubnetGroupName: \"publicSn\",\n    subnetIds: vpc.selectSubnets({\n        subnetType: ec2.SubnetType.PUBLIC\n    }).subnetIds\n})\n\nnew rds.CfnDBInstance(this, \"example\", {\n    engine: \"postgres\",\n    masterUsername: \"foobar\",\n    masterUserPassword: \"12345678\",\n    dbInstanceClass: \"db.r5.large\",\n    allocatedStorage: \"200\",\n    iops: 1000,\n    dbSubnetGroupName: rdsSubnetGroupPublic.ref,\n    publiclyAccessible: true, // Sensitive\n    vpcSecurityGroups: [sg.securityGroupId]\n})\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eAvoid publishing cloud services on the Internet unless they are intended to be publicly accessible, such as customer portals or e-commerce\nsites.\u003c/p\u003e\n\u003cp\u003eUse private networks (and associated private IP addresses) and VPC peering or other secure communication tunnels to communicate with other cloud\ncomponents.\u003c/p\u003e\n\u003cp\u003eThe goal is to prevent the component from intercepting traffic coming in via the public IP address. If the cloud resource does not support the\nabsence of a public IP address, assign a public IP address to it, but do not create listeners for the public IP address.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Instance.html\"\u003eaws-cdk-lib.aws_ec2.Instance\u003c/a\u003e and similar\nconstructs:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.Instance(\n    this,\n    \"example\", {\n    instanceType: nanoT2,\n    machineImage: ec2.MachineImage.latestAmazonLinux(),\n    vpc: vpc,\n    vpcSubnets: {subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS}\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.CfnInstance.html\"\u003eaws-cdk-lib.aws_ec2.CfnInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew ec2.CfnInstance(this, \"example\", {\n    instanceType: \"t2.micro\",\n    imageId: \"ami-0ea0f26a6d50850c5\",\n    networkInterfaces: [\n        {\n            deviceIndex: \"0\",\n            associatePublicIpAddress: false,\n            deleteOnTermination: true,\n            subnetId: vpc.selectSubnets({subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS}).subnetIds[0]\n        }\n    ]\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_dms.CfnReplicationInstance.html\"\u003eaws-cdk-lib.aws_dms.CfnReplicationInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nnew dms.CfnReplicationInstance(\n    this, \"example\", {\n    replicationInstanceClass: \"dms.t2.micro\",\n    allocatedStorage: 5,\n    publiclyAccessible: false,\n    replicationSubnetGroupIdentifier: subnetGroup.replicationSubnetGroupIdentifier,\n    vpcSecurityGroupIds: [vpc.vpcDefaultSecurityGroup]\n})\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\"\u003eaws-cdk-lib.aws_rds.CfnDBInstance\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport {aws_ec2 as ec2} from \u0027aws-cdk-lib\u0027\n\nconst rdsSubnetGroupPrivate \u003d new rds.CfnDBSubnetGroup(this, \"example\",{\n    dbSubnetGroupDescription: \"Subnets\",\n    dbSubnetGroupName: \"privateSn\",\n    subnetIds: vpc.selectSubnets({\n        subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS\n    }).subnetIds\n})\n\nnew rds.CfnDBInstance(this, \"example\", {\n    engine: \"postgres\",\n    masterUsername: \"foobar\",\n    masterUserPassword: \"12345678\",\n    dbInstanceClass: \"db.r5.large\",\n    allocatedStorage: \"200\",\n    iops: 1000,\n    dbSubnetGroupName: rdsSubnetGroupPrivate.ref,\n    publiclyAccessible: false,\n    vpcSecurityGroups: [sg.securityGroupId]\n})\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html\"\u003eAWS Documentation\u003c/a\u003e - Amazon EC2 instance IP\n  addressing \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.PublicPrivate.html\"\u003eAWS Documentation\u003c/a\u003e - Public and\n  private replication instances \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\"\u003eAWS Documentation\u003c/a\u003e - VPC Peering \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/668\"\u003eMITRE, CWE-668\u003c/a\u003e - Exposure of Resource to Wrong Sphere \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6326",
    "name": "Regular expressions should not contain multiple spaces",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMultiple spaces in a regular expression can make it hard to tell how many spaces should be matched. Itâ€™s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst pattern \u003d /Hello,   world!/;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst pattern \u003d /Hello, {3}world!/;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMultiple spaces in a regular expression can make it hard to tell how many spaces should be matched. Itâ€™s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst pattern \u003d /Hello,   world!/;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst pattern \u003d /Hello, {3}world!/;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6327",
    "name": "Using unencrypted SNS topics is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon Simple Notification Service (SNS) is a managed messaging service for application-to-application (A2A) and application-to-person (A2P)\ncommunication. SNS topics allows publisher systems to fanout messages to a large number of subscriber systems. Amazon SNS allows to encrypt messages\nwhen they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are not able to\naccess the data.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The topic contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\"\u003e\u003ccode\u003eaws_cdk.aws_sns.Topic\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { Topic } from \u0027aws-cdk-lib/aws-sns\u0027;\n\nnew Topic(this, \u0027exampleTopic\u0027); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\"\u003e\u003ccode\u003eaws_cdk.aws_sns.CfnTopic\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { Topic, CfnTopic } from \u0027aws-cdk-lib/aws-sns\u0027;\n\nnew CfnTopic(this, \u0027exampleCfnTopic\u0027); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to encrypt SNS topics that contain sensitive information. Encryption and decryption are handled transparently by SNS, so no\nfurther modifications to the application are necessary.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\"\u003e\u003ccode\u003eaws_cdk.aws_sns.Topic\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { Topic } from \u0027aws-cdk-lib/aws-sns\u0027;\n\nconst encryptionKey \u003d new Key(this, \u0027exampleKey\u0027, {\n    enableKeyRotation: true,\n});\n\nnew Topic(this, \u0027exampleTopic\u0027, {\n    masterKey: encryptionKey\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\"\u003e\u003ccode\u003eaws_cdk.aws_sns.CfnTopic\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnTopic } from \u0027aws-cdk-lib/aws-sns\u0027;\n\nconst encryptionKey \u003d new Key(this, \u0027exampleKey\u0027, {\n    enableKeyRotation: true,\n});\n\ncfnTopic \u003d new CfnTopic(this, \u0027exampleCfnTopic\u0027, {\n    kmsMasterKeyId: encryptionKey.keyId\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\"\u003eAWS Documentation\u003c/a\u003e - Encryption at rest \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://aws.amazon.com/blogs/compute/encrypting-messages-published-to-amazon-sns-with-aws-kms/\"\u003eEncrypting messages published to\n  Amazon SNS with AWS KMS\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6353",
    "name": "Regular expression quantifiers and character classes should be used concisely",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA regular expression is a sequence of characters that specifies a match pattern in text. Among the most important concepts are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Character classes: defines a set of characters, any one of which can occur in an input string for a match to succeed. \u003c/li\u003e\n  \u003cli\u003e Quantifiers: used to specify how many instances of a character, group, or character class must be present in the input for a match. \u003c/li\u003e\n  \u003cli\u003e Wildcard (\u003ccode\u003e.\u003c/code\u003e): matches all characters except line terminators (also matches them if the \u003ccode\u003es\u003c/code\u003e flag is set). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMany of these features include shortcuts of widely used expressions, so there is more than one way to construct a regular expression to achieve the\nsame results. For example, to match a two-digit number, one could write \u003ccode\u003e[0-9]{2,2}\u003c/code\u003e or \u003ccode\u003e\\d{2}\u003c/code\u003e. The latter is not only shorter\nbut easier to read and thus to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule recommends replacing some quantifiers and character classes with more concise equivalents:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e\\d\u003c/code\u003e for \u003ccode\u003e[0-9]\u003c/code\u003e and \u003ccode\u003e\\D\u003c/code\u003e for \u003ccode\u003e[^0-9]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\w\u003c/code\u003e for \u003ccode\u003e[A-Za-z0-9_]\u003c/code\u003e and \u003ccode\u003e\\W\u003c/code\u003e for \u003ccode\u003e[^A-Za-z0-9_]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e.\u003c/code\u003e for character classes matching everything (e.g. \u003ccode\u003e[\\w\\W]\u003c/code\u003e, \u003ccode\u003e[\\d\\D]\u003c/code\u003e, or \u003ccode\u003e[\\s\\S]\u003c/code\u003e with\n  \u003ccode\u003es\u003c/code\u003e flag) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex?\u003c/code\u003e for \u003ccode\u003ex{0,1}\u003c/code\u003e, \u003ccode\u003ex*\u003c/code\u003e for \u003ccode\u003ex{0,}\u003c/code\u003e, \u003ccode\u003ex+\u003c/code\u003e for \u003ccode\u003ex{1,}\u003c/code\u003e, \u003ccode\u003ex{N}\u003c/code\u003e for\n  \u003ccode\u003ex{N,N}\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/a{1,}/;        // Noncompliant, \u0027{1,}\u0027 quantifier is the same as \u0027+\u0027\n/[A-Za-z0-9_]/; // Noncompliant, \u0027\\w\u0027 is equivalent\n\u003c/pre\u003e\n\u003cp\u003eUse the more concise version to make the regex expression more readable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/a+/;\n/\\w/;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA regular expression is a sequence of characters that specifies a match pattern in text. Among the most important concepts are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Character classes: defines a set of characters, any one of which can occur in an input string for a match to succeed. \u003c/li\u003e\n  \u003cli\u003e Quantifiers: used to specify how many instances of a character, group, or character class must be present in the input for a match. \u003c/li\u003e\n  \u003cli\u003e Wildcard (\u003ccode\u003e.\u003c/code\u003e): matches all characters except line terminators (also matches them if the \u003ccode\u003es\u003c/code\u003e flag is set). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMany of these features include shortcuts of widely used expressions, so there is more than one way to construct a regular expression to achieve the\nsame results. For example, to match a two-digit number, one could write \u003ccode\u003e[0-9]{2,2}\u003c/code\u003e or \u003ccode\u003e\\d{2}\u003c/code\u003e. The latter is not only shorter\nbut easier to read and thus to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule recommends replacing some quantifiers and character classes with more concise equivalents:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e\\d\u003c/code\u003e for \u003ccode\u003e[0-9]\u003c/code\u003e and \u003ccode\u003e\\D\u003c/code\u003e for \u003ccode\u003e[^0-9]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\w\u003c/code\u003e for \u003ccode\u003e[A-Za-z0-9_]\u003c/code\u003e and \u003ccode\u003e\\W\u003c/code\u003e for \u003ccode\u003e[^A-Za-z0-9_]\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e.\u003c/code\u003e for character classes matching everything (e.g. \u003ccode\u003e[\\w\\W]\u003c/code\u003e, \u003ccode\u003e[\\d\\D]\u003c/code\u003e, or \u003ccode\u003e[\\s\\S]\u003c/code\u003e with\n  \u003ccode\u003es\u003c/code\u003e flag) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex?\u003c/code\u003e for \u003ccode\u003ex{0,1}\u003c/code\u003e, \u003ccode\u003ex*\u003c/code\u003e for \u003ccode\u003ex{0,}\u003c/code\u003e, \u003ccode\u003ex+\u003c/code\u003e for \u003ccode\u003ex{1,}\u003c/code\u003e, \u003ccode\u003ex{N}\u003c/code\u003e for\n  \u003ccode\u003ex{N,N}\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/a{1,}/;        // Noncompliant, \u0027{1,}\u0027 quantifier is the same as \u0027+\u0027\n/[A-Za-z0-9_]/; // Noncompliant, \u0027\\w\u0027 is equivalent\n\u003c/pre\u003e\n\u003cp\u003eUse the more concise version to make the regex expression more readable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/a+/;\n/\\w/;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6351",
    "name": "Regular expressions with the global flag should be used with caution",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRegular expressions in JavaScript can have a global flag (\u003ccode\u003e/g\u003c/code\u003e) that enables global searching and matching. While this flag can be\nuseful in certain scenarios, it should be used with caution. When a regular expression has the global flag enabled, it remembers the position of the\nlast match and continues searching for subsequent matches from that position. This behavior can lead to unexpected results if youâ€™re not careful and\nbe a source of bugs that are tricky to debug.\u003c/p\u003e\n\u003cp\u003eThe global flag introduces shared state within the regular expression object. This means that if you use the same regular expression object across\nmultiple operations or functions, it maintains its internal state, such as the last match position.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /\\d{4}-\\d{2}-\\d{2}/g;\nregex.test(\u00272020-08-06\u0027);\nregex.test(\u00272019-10-10\u0027); // Noncompliant: the regex will return \"false\" despite the date being well-formed\n\u003c/pre\u003e\n\u003cp\u003eYou should not use the global flag if you intend to use the same regular expression across multiple operations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /\\d{4}-\\d{2}-\\d{2}/;\nregex.test(\u00272020-08-06\u0027);\nregex.test(\u00272019-10-10\u0027);\n\u003c/pre\u003e\n\u003cp\u003eIncorrect usage of global regular expressions can result in infinite loops. For example, if you use a different instance of the same regular\nexpression in a \u003ccode\u003ewhile\u003c/code\u003e, it can continuously match the same substring, causing an infinite loop.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst input \u003d \u0027foodie fooled football\u0027;\nwhile ((result \u003d /foo*/g.exec(input)) !\u003d\u003d null) { // Noncompliant: a regex is defined at each iteration causing an infinite loop\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid an infinite loop, you should create the regular expression with the global flag only once, assign it to a variable, and use the same\nvariable in the loop.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /foo*/g;\nconst input \u003d \u0027foodie fooled football\u0027;\nwhile ((result \u003d regex.exec(input)) !\u003d\u003d null) {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cp\u003eMixing the global flag (\u003ccode\u003eg\u003c/code\u003e) and the sticky flag (\u003ccode\u003ey\u003c/code\u003e) can have different effects on how regular expressions are matched and\nthe behavior of certain methods. The \u003ccode\u003etest()\u003c/code\u003e method ignores the global flag and behaves as if only the sticky flag is set.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /abc/gy; // Noncompliant: a regex enabling both sticky and global flags ignores the global flag\nregex.test(/* ... */);\n\u003c/pre\u003e\n\u003cp\u003eTherefore, sou should remove the redundant global flag from the regular expression and only enable the sticky flag.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /abc/y;\nregex.test(/* ... */);\n\u003c/pre\u003e\n\u003cp\u003eOverall, this rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a regular expression is tested against different inputs with \u003ccode\u003eRegExp.prototype.test()\u003c/code\u003e or \u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e a regular expression is defined within a loop condition while used with \u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e a regular expression turns on both global \u003ccode\u003eg\u003c/code\u003e and sticky \u003ccode\u003ey\u003c/code\u003e flags \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags\"\u003eRegular expression flags\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"\u003e\u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"\u003e\u003ccode\u003eRegExp.prototype.test()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRegular expressions in JavaScript can have a global flag (\u003ccode\u003e/g\u003c/code\u003e) that enables global searching and matching. While this flag can be\nuseful in certain scenarios, it should be used with caution. When a regular expression has the global flag enabled, it remembers the position of the\nlast match and continues searching for subsequent matches from that position. This behavior can lead to unexpected results if youâ€™re not careful and\nbe a source of bugs that are tricky to debug.\u003c/p\u003e\n\u003cp\u003eThe global flag introduces shared state within the regular expression object. This means that if you use the same regular expression object across\nmultiple operations or functions, it maintains its internal state, such as the last match position.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /\\d{4}-\\d{2}-\\d{2}/g;\nregex.test(\u00272020-08-06\u0027);\nregex.test(\u00272019-10-10\u0027); // Noncompliant: the regex will return \"false\" despite the date being well-formed\n\u003c/pre\u003e\n\u003cp\u003eYou should not use the global flag if you intend to use the same regular expression across multiple operations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /\\d{4}-\\d{2}-\\d{2}/;\nregex.test(\u00272020-08-06\u0027);\nregex.test(\u00272019-10-10\u0027);\n\u003c/pre\u003e\n\u003cp\u003eIncorrect usage of global regular expressions can result in infinite loops. For example, if you use a different instance of the same regular\nexpression in a \u003ccode\u003ewhile\u003c/code\u003e, it can continuously match the same substring, causing an infinite loop.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst input \u003d \u0027foodie fooled football\u0027;\nwhile ((result \u003d /foo*/g.exec(input)) !\u003d\u003d null) { // Noncompliant: a regex is defined at each iteration causing an infinite loop\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid an infinite loop, you should create the regular expression with the global flag only once, assign it to a variable, and use the same\nvariable in the loop.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /foo*/g;\nconst input \u003d \u0027foodie fooled football\u0027;\nwhile ((result \u003d regex.exec(input)) !\u003d\u003d null) {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cp\u003eMixing the global flag (\u003ccode\u003eg\u003c/code\u003e) and the sticky flag (\u003ccode\u003ey\u003c/code\u003e) can have different effects on how regular expressions are matched and\nthe behavior of certain methods. The \u003ccode\u003etest()\u003c/code\u003e method ignores the global flag and behaves as if only the sticky flag is set.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /abc/gy; // Noncompliant: a regex enabling both sticky and global flags ignores the global flag\nregex.test(/* ... */);\n\u003c/pre\u003e\n\u003cp\u003eTherefore, sou should remove the redundant global flag from the regular expression and only enable the sticky flag.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /abc/y;\nregex.test(/* ... */);\n\u003c/pre\u003e\n\u003cp\u003eOverall, this rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a regular expression is tested against different inputs with \u003ccode\u003eRegExp.prototype.test()\u003c/code\u003e or \u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e a regular expression is defined within a loop condition while used with \u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e a regular expression turns on both global \u003ccode\u003eg\u003c/code\u003e and sticky \u003ccode\u003ey\u003c/code\u003e flags \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags\"\u003eRegular expression flags\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"\u003e\u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"\u003e\u003ccode\u003eRegExp.prototype.test()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6594",
    "name": "\"RegExp.exec()\" should be preferred over \"String.match()\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eString.match()\u003c/code\u003e behaves the same way as \u003ccode\u003eRegExp.exec()\u003c/code\u003e when the regular expression does not include the global flag\n\u003ccode\u003eg\u003c/code\u003e. While they work the same, \u003ccode\u003eRegExp.exec()\u003c/code\u003e can be slightly faster than \u003ccode\u003eString.match()\u003c/code\u003e. Therefore, it should be\npreferred for better performance.\u003c/p\u003e\n\u003cp\u003eThe rule reports an issue on a call to \u003ccode\u003eString.match()\u003c/code\u003e whenever it can be replaced with semantically equivalent\n\u003ccode\u003eRegExp.exec()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0027foo\u0027.match(/bar/);\n\u003c/pre\u003e\n\u003cp\u003eRewrite the pattern matching from \u003ccode\u003estring.match(regex)\u003c/code\u003e to \u003ccode\u003eregex.exec(string)\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/bar/.exec(\u0027foo\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/String/match\"\u003e\u003ccode\u003eString.prototype.match()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"\u003e\u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eString.match()\u003c/code\u003e behaves the same way as \u003ccode\u003eRegExp.exec()\u003c/code\u003e when the regular expression does not include the global flag\n\u003ccode\u003eg\u003c/code\u003e. While they work the same, \u003ccode\u003eRegExp.exec()\u003c/code\u003e can be slightly faster than \u003ccode\u003eString.match()\u003c/code\u003e. Therefore, it should be\npreferred for better performance.\u003c/p\u003e\n\u003cp\u003eThe rule reports an issue on a call to \u003ccode\u003eString.match()\u003c/code\u003e whenever it can be replaced with semantically equivalent\n\u003ccode\u003eRegExp.exec()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0027foo\u0027.match(/bar/);\n\u003c/pre\u003e\n\u003cp\u003eRewrite the pattern matching from \u003ccode\u003estring.match(regex)\u003c/code\u003e to \u003ccode\u003eregex.exec(string)\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/bar/.exec(\u0027foo\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/String/match\"\u003e\u003ccode\u003eString.prototype.match()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"\u003e\u003ccode\u003eRegExp.prototype.exec()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6478",
    "name": "React components should not be nested",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact components should not be nested, as their state will be lost on each re-render of their parent component, possibly introducing bugs. This\nwill also impact performance as child components will be recreated unnecessarily.\u003c/p\u003e\n\u003cp\u003eIf the goal is to have the state reset, use a \u003ca\nhref\u003d\"https://react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key\"\u003e\u003ccode\u003ekey\u003c/code\u003e\u003c/a\u003e instead of relying on a parent\nstate.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return \u0026lt;div /\u0026gt;;\n  }\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;NestedComponent /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OtherComponent footer\u003d{ () \u003d\u0026gt; \u0026lt;div /\u0026gt; } /\u0026gt; { /* Noncompliant: Component is created inside prop */ }\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return \u0026lt;div /\u0026gt;;\n    }\n\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;UnstableNestedComponent /\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should refactor your code to define a component independently, passing props if needed.\u003c/p\u003e\n\u003cpre\u003e\nfunction OutsideComponent(props) {\n  return \u0026lt;div /\u0026gt;;\n}\n\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OutsideComponent /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nfunction Component() {\n  return \u0026lt;OtherComponent footer\u003d{ \u0026lt;div /\u0026gt; } /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nclass Component extends React.Component {\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;OtherComponent /\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eComponent creation is allowed inside component props only if prop name starts with \u003ccode\u003erender\u003c/code\u003e. Make sure you are calling the prop in the\nreceiving component and not using it as an element.\u003c/p\u003e\n\u003cpre\u003e\nfunction OtherComponent(props) {\n  return \u0026lt;div\u0026gt;{props.renderFooter()}\u0026lt;/div\u0026gt;;\n}\n\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OtherComponent renderFooter\u003d{() \u003d\u0026gt; \u0026lt;div /\u0026gt;} /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#elements-of-different-types\"\u003eReact Documentation - Elements Of Different Types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key\"\u003eReact Documentation - Resetting state with\n  a key\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact components should not be nested, as their state will be lost on each re-render of their parent component, possibly introducing bugs. This\nwill also impact performance as child components will be recreated unnecessarily.\u003c/p\u003e\n\u003cp\u003eIf the goal is to have the state reset, use a \u003ca\nhref\u003d\"https://react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key\"\u003e\u003ccode\u003ekey\u003c/code\u003e\u003c/a\u003e instead of relying on a parent\nstate.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  function NestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n    return \u0026lt;div /\u0026gt;;\n  }\n\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;NestedComponent /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OtherComponent footer\u003d{ () \u003d\u0026gt; \u0026lt;div /\u0026gt; } /\u0026gt; { /* Noncompliant: Component is created inside prop */ }\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nclass Component extends React.Component {\n  render() {\n    function UnstableNestedComponent() { // Noncompliant: NestedComponent should be moved outside Component\n      return \u0026lt;div /\u0026gt;;\n    }\n\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;UnstableNestedComponent /\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should refactor your code to define a component independently, passing props if needed.\u003c/p\u003e\n\u003cpre\u003e\nfunction OutsideComponent(props) {\n  return \u0026lt;div /\u0026gt;;\n}\n\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OutsideComponent /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nfunction Component() {\n  return \u0026lt;OtherComponent footer\u003d{ \u0026lt;div /\u0026gt; } /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cpre\u003e\nclass Component extends React.Component {\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;OtherComponent /\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eComponent creation is allowed inside component props only if prop name starts with \u003ccode\u003erender\u003c/code\u003e. Make sure you are calling the prop in the\nreceiving component and not using it as an element.\u003c/p\u003e\n\u003cpre\u003e\nfunction OtherComponent(props) {\n  return \u0026lt;div\u0026gt;{props.renderFooter()}\u0026lt;/div\u0026gt;;\n}\n\nfunction Component() {\n  return (\n    \u0026lt;div\u0026gt;\n      \u0026lt;OtherComponent renderFooter\u003d{() \u003d\u0026gt; \u0026lt;div /\u0026gt;} /\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#elements-of-different-types\"\u003eReact Documentation - Elements Of Different Types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://react.dev/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key\"\u003eReact Documentation - Resetting state with\n  a key\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5148",
    "name": "Authorizing an opened window to access back to the originating window is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA newly opened window having access back to the originating window could allow basic phishing attacks (the \u003ccode\u003ewindow.opener\u003c/code\u003e object is not\n\u003ccode\u003enull\u003c/code\u003e and thus \u003ccode\u003ewindow.opener.location\u003c/code\u003e can be set to a malicious website by the opened page).\u003c/p\u003e\n\u003cp\u003eFor instance, an attacker can put a link (say: \"http://example.com/mylink\") on a popular website that changes, when opened, the original page to\n\"http://example.com/fake_login\". On \"http://example.com/fake_login\" there is a fake login page which could trick real users to enter their\ncredentials.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The application opens untrusted external URL. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nwindow.open(\"https://example.com/dangerous\"); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eUse \u003ccode\u003enoopener\u003c/code\u003e to prevent untrusted pages from abusing \u003ccode\u003ewindow.opener\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote: In Chrome 88+, Firefox 79+ or Safari 12.1+ \u003ccode\u003etarget\u003d_blank\u003c/code\u003e on anchors implies \u003ccode\u003erel\u003dnoopener\u003c/code\u003e which make the protection\nenabled by default.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nwindow.open(\"https://example.com/dangerous\", \"WindowName\", \"noopener\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Reverse_Tabnabbing\"\u003eReverse Tabnabbing\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1022\"\u003eMITRE, CWE-1022\u003c/a\u003e - Use of Web Link to Untrusted Target with window.opener Access \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mathiasbynens.github.io/rel-noopener/\"\u003ehttps://mathiasbynens.github.io/rel-noopener/\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "phishing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6479",
    "name": "JSX list components should not use array indexes as key",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required for each list item. This UID lets React identify the item\nthroughout its lifetime. Avoid array indexes since the order of the items may change, which will cause keys to not match up between renders,\nrecreating the DOM. It can negatively impact performance and may cause issues with the component state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post, index) \u003d\u0026gt;\n        \u0026lt;li key\u003d{index}\u0026gt; \u0026lt;!-- Noncompliant: When \u0027posts\u0027 are reordered, React will need to recreate the list DOM --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6477} - JSX list components should have a key property \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6486} - JSX list components keys should match up between renders \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required for each list item. This UID lets React identify the item\nthroughout its lifetime. Avoid array indexes since the order of the items may change, which will cause keys to not match up between renders,\nrecreating the DOM. It can negatively impact performance and may cause issues with the component state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post, index) \u003d\u0026gt;\n        \u0026lt;li key\u003d{index}\u0026gt; \u0026lt;!-- Noncompliant: When \u0027posts\u0027 are reordered, React will need to recreate the list DOM --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6477} - JSX list components should have a key property \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6486} - JSX list components keys should match up between renders \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6477",
    "name": "JSX list components should have a key property",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required for each list item. This UID lets React identify the item\nthroughout its lifetime. To provide it, use the \u003ccode\u003ekey\u003c/code\u003e attribute of the list item. When the \u003ccode\u003ekey\u003c/code\u003e attribute is missing, React\nwill default to using the itemâ€™s index inside the list component. If the element ordering changes, it will cause keys to not match up between renders,\nrecreating the DOM. It can negatively impact performance and may cause issues with the component state.\u003c/p\u003e\n\u003cpre\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li\u0026gt; \u0026lt;!-- Noncompliant: When \u0027posts\u0027 are reordered, React will need to recreate the list DOM --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cp\u003eAvoid using array indexes since, even if they are unique, the order of the elements may change.\u003c/p\u003e\n\u003cpre\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt; \u0026lt;!-- Compliant: id will always be the same even if \u0027posts\u0027 order changes --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6479} - JSX list components should not use array indexes as key \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6486} - JSX list components keys should match up between renders \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required for each list item. This UID lets React identify the item\nthroughout its lifetime. To provide it, use the \u003ccode\u003ekey\u003c/code\u003e attribute of the list item. When the \u003ccode\u003ekey\u003c/code\u003e attribute is missing, React\nwill default to using the itemâ€™s index inside the list component. If the element ordering changes, it will cause keys to not match up between renders,\nrecreating the DOM. It can negatively impact performance and may cause issues with the component state.\u003c/p\u003e\n\u003cpre\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li\u0026gt; \u0026lt;!-- Noncompliant: When \u0027posts\u0027 are reordered, React will need to recreate the list DOM --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cp\u003eAvoid using array indexes since, even if they are unique, the order of the elements may change.\u003c/p\u003e\n\u003cpre\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt; \u0026lt;!-- Compliant: id will always be the same even if \u0027posts\u0027 order changes --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6479} - JSX list components should not use array indexes as key \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6486} - JSX list components keys should match up between renders \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4165",
    "name": "Assignments should not be redundant",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe transitive property says that if \u003ccode\u003ea \u003d\u003d b\u003c/code\u003e and \u003ccode\u003eb \u003d\u003d c\u003c/code\u003e, then \u003ccode\u003ea \u003d\u003d c\u003c/code\u003e. In such cases, thereâ€™s no point in\nassigning \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ec\u003c/code\u003e or vice versa because theyâ€™re already equivalent.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\nb \u003d c; // Noncompliant: c and b are already the same\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe transitive property says that if \u003ccode\u003ea \u003d\u003d b\u003c/code\u003e and \u003ccode\u003eb \u003d\u003d c\u003c/code\u003e, then \u003ccode\u003ea \u003d\u003d c\u003c/code\u003e. In such cases, thereâ€™s no point in\nassigning \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ec\u003c/code\u003e or vice versa because theyâ€™re already equivalent.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\nb \u003d c; // Noncompliant: c and b are already the same\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6582",
    "name": "Optional chaining should be preferred",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOptional chaining allows to safely access nested properties or methods of an object without having to check for the existence of each intermediate\nproperty manually. It provides a concise and safe way to access nested properties or methods without having to write complex and error-prone\n\u003ccode\u003enull\u003c/code\u003e/\u003ccode\u003eundefined\u003c/code\u003e checks.\u003c/p\u003e\n\u003cp\u003eThis rule flags logical operations that can be safely replaced with the \u003ccode\u003e?.\u003c/code\u003e optional chaining operator.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplace with \u003ccode\u003e?.\u003c/code\u003e optional chaining the logical expression that checks for \u003ccode\u003enull\u003c/code\u003e/\u003ccode\u003eundefined\u003c/code\u003e before accessing the\nproperty of an object.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(param) {\n    if (param \u0026amp;\u0026amp; param.value) {\n        bar(param.value);\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(param) {\n    if (param?.value) {\n        bar(param.value);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOptional chaining allows to safely access nested properties or methods of an object without having to check for the existence of each intermediate\nproperty manually. It provides a concise and safe way to access nested properties or methods without having to write complex and error-prone\n\u003ccode\u003enull\u003c/code\u003e/\u003ccode\u003eundefined\u003c/code\u003e checks.\u003c/p\u003e\n\u003cp\u003eThis rule flags logical operations that can be safely replaced with the \u003ccode\u003e?.\u003c/code\u003e optional chaining operator.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplace with \u003ccode\u003e?.\u003c/code\u003e optional chaining the logical expression that checks for \u003ccode\u003enull\u003c/code\u003e/\u003ccode\u003eundefined\u003c/code\u003e before accessing the\nproperty of an object.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(param) {\n    if (param \u0026amp;\u0026amp; param.value) {\n        bar(param.value);\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(param) {\n    if (param?.value) {\n        bar(param.value);\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4043",
    "name": "Array-mutating methods should not be used misleadingly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, some \u003ccode\u003eArray\u003c/code\u003e methods do not mutate the existing array that the method was called on, but instead return a new array.\nOther methods mutate the array, and their return value differs depending on the method.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereverse\u003c/code\u003e and \u003ccode\u003esort\u003c/code\u003e are mutating methods and, in addition, return the altered version. This rule raises an issue when the\nreturn values of these methods are assigned, which could lead maintainers to overlook the fact that the original array has been modified.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst reversed \u003d a.reverse(); // Noncompliant: mutating method, no need to assign return value\nconst sorted \u003d b.sort(); // Noncompliant: mutating method, no need to assign return value\n\u003c/pre\u003e\n\u003cp\u003eRemove the assignment, so that the intent of mutating the original array is clear.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\na.reverse();\nb.sort();\n\u003c/pre\u003e\n\u003cp\u003eOr use non-mutating alternatives \u003ccode\u003etoReversed\u003c/code\u003e and \u003ccode\u003etoSorted\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d a.toReversed();\nconst sorted \u003d b.toSorted();\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, change a mutating method into a non-mutating alternative using the spread syntax (\u003ccode\u003eâ€¦â€‹\u003c/code\u003e).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d [...a].reverse();\nconst sorted \u003d [...b].sort();\n\u003c/pre\u003e\n\u003cp\u003eOr \u003ccode\u003eslice()\u003c/code\u003e to create a copy first.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d a.slice().reverse();\nconst sorted \u003d b.slice().sort();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\"\u003eArray copying\n  methods and mutating methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"\u003eArray.prototype.reverse()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003eArray.prototype.sort()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"\u003eArray.prototype.toReversed()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003eArray.prototype.toSorted()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\u003eSpread syntax\n  (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003eArray.prototype.slice()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, some \u003ccode\u003eArray\u003c/code\u003e methods do not mutate the existing array that the method was called on, but instead return a new array.\nOther methods mutate the array, and their return value differs depending on the method.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereverse\u003c/code\u003e and \u003ccode\u003esort\u003c/code\u003e are mutating methods and, in addition, return the altered version. This rule raises an issue when the\nreturn values of these methods are assigned, which could lead maintainers to overlook the fact that the original array has been modified.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst reversed \u003d a.reverse(); // Noncompliant: mutating method, no need to assign return value\nconst sorted \u003d b.sort(); // Noncompliant: mutating method, no need to assign return value\n\u003c/pre\u003e\n\u003cp\u003eRemove the assignment, so that the intent of mutating the original array is clear.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\na.reverse();\nb.sort();\n\u003c/pre\u003e\n\u003cp\u003eOr use non-mutating alternatives \u003ccode\u003etoReversed\u003c/code\u003e and \u003ccode\u003etoSorted\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d a.toReversed();\nconst sorted \u003d b.toSorted();\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, change a mutating method into a non-mutating alternative using the spread syntax (\u003ccode\u003eâ€¦â€‹\u003c/code\u003e).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d [...a].reverse();\nconst sorted \u003d [...b].sort();\n\u003c/pre\u003e\n\u003cp\u003eOr \u003ccode\u003eslice()\u003c/code\u003e to create a copy first.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst reversed \u003d a.slice().reverse();\nconst sorted \u003d b.slice().sort();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\"\u003eArray copying\n  methods and mutating methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\"\u003eArray.prototype.reverse()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003eArray.prototype.sort()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed\"\u003eArray.prototype.toReversed()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003eArray.prototype.toSorted()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\u003eSpread syntax\n  (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003eArray.prototype.slice()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6772",
    "name": "Spacing between inline elements should be explicit",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact JSX differs from the HTML standard in the way it handles newline characters and surrounding whitespace. HTML collapses multiple whitespace\ncharacters (including newlines) into a single whitespace, but JSX removes such sequences completely, leaving no space between inline elements\nseparated by the line break. This difference in behavior can be confusing and may result in unintended layout, for example, missing whitespace between\nthe link content and the surrounding text.\u003c/p\u003e\n\u003cp\u003eTo avoid such issues, you should never rely on newline characters in JSX, and explicitly specify whether you want whitespace between inline\nelements separated by a line break.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div\u0026gt;{/* Noncompliant: ambiguous spacing */}\n  Here is some\n  \u0026lt;a\u0026gt;space\u0026lt;/a\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div\u0026gt;{/* Noncompliant: ambiguous spacing */}\n  \u0026lt;a\u0026gt;No space\u0026lt;/a\u0026gt;\n  between these\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, either insert an explicit JSX space as a string expression \u003ccode\u003e{\u0027 \u0027}\u003c/code\u003e, or insert an empty comment expression \u003ccode\u003e{/*\n*/}\u003c/code\u003e to indicate that the two parts will be joined together with no space between them.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div\u0026gt;\n  Here is some{\u0027 \u0027}\n  \u0026lt;a\u0026gt;space\u0026lt;/a\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div\u0026gt;\n  \u0026lt;a\u0026gt;No space\u0026lt;/a\u0026gt;{/*\n  */}between these\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#writing-markup-with-jsx\"\u003eWriting markup with JSX\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace#spaces_in_between_inline_and_inline-block_elements\"\u003eSpaces\n  in between inline and inline-block elements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact JSX differs from the HTML standard in the way it handles newline characters and surrounding whitespace. HTML collapses multiple whitespace\ncharacters (including newlines) into a single whitespace, but JSX removes such sequences completely, leaving no space between inline elements\nseparated by the line break. This difference in behavior can be confusing and may result in unintended layout, for example, missing whitespace between\nthe link content and the surrounding text.\u003c/p\u003e\n\u003cp\u003eTo avoid such issues, you should never rely on newline characters in JSX, and explicitly specify whether you want whitespace between inline\nelements separated by a line break.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div\u0026gt;{/* Noncompliant: ambiguous spacing */}\n  Here is some\n  \u0026lt;a\u0026gt;space\u0026lt;/a\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div\u0026gt;{/* Noncompliant: ambiguous spacing */}\n  \u0026lt;a\u0026gt;No space\u0026lt;/a\u0026gt;\n  between these\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, either insert an explicit JSX space as a string expression \u003ccode\u003e{\u0027 \u0027}\u003c/code\u003e, or insert an empty comment expression \u003ccode\u003e{/*\n*/}\u003c/code\u003e to indicate that the two parts will be joined together with no space between them.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div\u0026gt;\n  Here is some{\u0027 \u0027}\n  \u0026lt;a\u0026gt;space\u0026lt;/a\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;div\u0026gt;\n  \u0026lt;a\u0026gt;No space\u0026lt;/a\u0026gt;{/*\n  */}between these\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#writing-markup-with-jsx\"\u003eWriting markup with JSX\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace#spaces_in_between_inline_and_inline-block_elements\"\u003eSpaces\n  in between inline and inline-block elements\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1082",
    "name": "Mouse events should have corresponding keyboard events",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOffering the same experience with the mouse and the keyboard allow users to pick their preferred devices.\u003c/p\u003e\n\u003cp\u003eAdditionally, users of assistive technology will also be able to browse the site even if they cannot use the mouse.\u003c/p\u003e\n\u003cp\u003eThis rules detects the following issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when \u003ccode\u003eonClick\u003c/code\u003e is not accompanied by at least one of the following: \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonKeyDown\u003c/code\u003e,\n  \u003ccode\u003eonKeyPress\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e when \u003ccode\u003eonmouseover\u003c/code\u003e/\u003ccode\u003eonmouseout\u003c/code\u003e are not paired by \u003ccode\u003eonfocus\u003c/code\u003e/\u003ccode\u003eonblur\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eAdd at least one of the following event handlers \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonKeyDown\u003c/code\u003e, \u003ccode\u003eonKeyPress\u003c/code\u003e to the element when using\n\u003ccode\u003eonClick\u003c/code\u003e event handler. Add corresponding event handlers \u003ccode\u003eonfocus\u003c/code\u003e/\u003ccode\u003eonblur\u003c/code\u003e to the element when using\n\u003ccode\u003eonmouseover\u003c/code\u003e/\u003ccode\u003eonmouseout\u003c/code\u003e event handlers.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} /\u0026gt;\n\n\u0026lt;div onMouseOver\u003d{ () \u003d\u0026gt; {}} }  /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} onKeyDown\u003d{this.handleKeyDown} /\u0026gt;\n\n\u0026lt;div onMouseOver\u003d{ () \u003d\u0026gt; {} } onFocus\u003d{ () \u003d\u0026gt; {} } /\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis does not apply for interactive or hidden elements, eg. when using \u003ccode\u003earia-hidden\u003d\"true\"\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e SCR2 - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/SCR2.html\"\u003eUsing redundant keyboard and mouse event handlers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e G90 - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/G90.html\"\u003eProviding keyboard-triggered event handlers\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOffering the same experience with the mouse and the keyboard allow users to pick their preferred devices.\u003c/p\u003e\n\u003cp\u003eAdditionally, users of assistive technology will also be able to browse the site even if they cannot use the mouse.\u003c/p\u003e\n\u003cp\u003eThis rules detects the following issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when \u003ccode\u003eonClick\u003c/code\u003e is not accompanied by at least one of the following: \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonKeyDown\u003c/code\u003e,\n  \u003ccode\u003eonKeyPress\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e when \u003ccode\u003eonmouseover\u003c/code\u003e/\u003ccode\u003eonmouseout\u003c/code\u003e are not paired by \u003ccode\u003eonfocus\u003c/code\u003e/\u003ccode\u003eonblur\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAdd at least one of the following event handlers \u003ccode\u003eonKeyUp\u003c/code\u003e, \u003ccode\u003eonKeyDown\u003c/code\u003e, \u003ccode\u003eonKeyPress\u003c/code\u003e to the element when using\n\u003ccode\u003eonClick\u003c/code\u003e event handler. Add corresponding event handlers \u003ccode\u003eonfocus\u003c/code\u003e/\u003ccode\u003eonblur\u003c/code\u003e to the element when using\n\u003ccode\u003eonmouseover\u003c/code\u003e/\u003ccode\u003eonmouseout\u003c/code\u003e event handlers.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} /\u0026gt;\n\n\u0026lt;div onMouseOver\u003d{ () \u003d\u0026gt; {}} }  /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} onKeyDown\u003d{this.handleKeyDown} /\u0026gt;\n\n\u0026lt;div onMouseOver\u003d{ () \u003d\u0026gt; {} } onFocus\u003d{ () \u003d\u0026gt; {} } /\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis does not apply for interactive or hidden elements, eg. when using \u003ccode\u003earia-hidden\u003d\"true\"\u003c/code\u003e attribute.\u003c/p\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e SCR2 - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/SCR2.html\"\u003eUsing redundant keyboard and mouse event handlers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e G90 - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/G90.html\"\u003eProviding keyboard-triggered event handlers\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6650",
    "name": "Renaming import, export, and destructuring assignments should not be to the same name",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRenaming imports, exports, or destructuring assignments to the same name is redundant and can be safely removed. You may accidentally end up with\nsuch code if you do a refactoring and change the local name in several places.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nlet { foo: foo } \u003d bar;\n\u003c/pre\u003e\n\u003cp\u003eFix your code to remove the unnecessary renaming.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { foo } from \"bar\";\nexport { foo };\nlet { foo } \u003d bar;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\"\u003eexport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eDestructuring\n  assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRenaming imports, exports, or destructuring assignments to the same name is redundant and can be safely removed. You may accidentally end up with\nsuch code if you do a refactoring and change the local name in several places.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nlet { foo: foo } \u003d bar;\n\u003c/pre\u003e\n\u003cp\u003eFix your code to remove the unnecessary renaming.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { foo } from \"bar\";\nexport { foo };\nlet { foo } \u003d bar;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\"\u003eexport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eDestructuring\n  assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6770",
    "name": "User-defined JSX components should use Pascal case",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUser-defined JSX components should use Pascal case because it is a widely accepted convention in the React community. Using Pascal case for\ncomponent names helps to distinguish them from HTML elements and built-in React components, which are typically written in lowercase. It also improves\ncode readability and makes it easier to differentiate between components and regular HTML tags.\u003c/p\u003e\n\u003cp\u003eAdditionally, adhering to this convention ensures consistency and makes it easier for other developers to understand and work with your code. It is\nconsidered a best practice in React development and is recommended by the official React documentation.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;MY_COMPONENT /\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eYou should rename your component according to Pascal case and all its usages as JSX elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;MyComponent /\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#components\"\u003eCreating and nesting components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUser-defined JSX components should use Pascal case because it is a widely accepted convention in the React community. Using Pascal case for\ncomponent names helps to distinguish them from HTML elements and built-in React components, which are typically written in lowercase. It also improves\ncode readability and makes it easier to differentiate between components and regular HTML tags.\u003c/p\u003e\n\u003cp\u003eAdditionally, adhering to this convention ensures consistency and makes it easier for other developers to understand and work with your code. It is\nconsidered a best practice in React development and is recommended by the official React documentation.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;MY_COMPONENT /\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eYou should rename your component according to Pascal case and all its usages as JSX elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;MyComponent /\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#components\"\u003eCreating and nesting components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S100",
    "name": "Function and method names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a function or a method name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e, the function:\u003c/p\u003e\n\u003cpre\u003e\nfunction DoSomething(){...}  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(){...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores React Functional Components, JavaScript functions named with a capital letter and returning a React element (JSX syntax).\u003c/p\u003e\n\u003cpre\u003e\nfunction Welcome() { // Compliant by exception\n  const greeting \u003d \u0027Hello, World!\u0027;\n\n  // ...\n\n  return (\n    \u0026lt;div className\u003d\"Welcome\"\u0026gt;\n      \u0026lt;p\u0026gt;{greeting}\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a function or a method name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e, the function:\u003c/p\u003e\n\u003cpre\u003e\nfunction DoSomething(){...}  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(){...}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores React Functional Components, JavaScript functions named with a capital letter and returning a React element (JSX syntax).\u003c/p\u003e\n\u003cpre\u003e\nfunction Welcome() { // Compliant by exception\n  const greeting \u003d \u0027Hello, World!\u0027;\n\n  // ...\n\n  return (\n    \u0026lt;div className\u003d\"Welcome\"\u0026gt;\n      \u0026lt;p\u0026gt;{greeting}\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the function names against.",
        "defaultValue": "^[_a-z][a-zA-Z0-9]*$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^[_a-z][a-zA-Z0-9]*$"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6654",
    "name": "__proto__ property should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript has a prototypical inheritance model. Each object has an internal property that points to another object, called a\n\u003ccode\u003eprototype\u003c/code\u003e. That prototype object has a prototype of its own, and the whole sequence is called a \u003cstrong\u003eprototype chain\u003c/strong\u003e. When\naccessing a property or a method of an object, if it is not found at the top level, the search continues through the objectâ€™s prototype and then\nfurther down the prototype chain. This feature allows for very powerful dynamic inheritance patterns but can also lead to confusion when compared to\nthe classic inheritance.\u003c/p\u003e\n\u003cp\u003eTo simplify the access to the prototype of an object some browsers introduced the \u003ccode\u003e__proto__\u003c/code\u003e property, which was later deprecated and\nremoved from the language. The current ECMAScript standard includes \u003ccode\u003eObject.getPrototype\u003c/code\u003e and \u003ccode\u003eObject.setPrototype\u003c/code\u003e static\nmethods that should be used instead of the \u003ccode\u003e__proto__\u003c/code\u003e property.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet prototype \u003d foo.__proto__;  // Noncompliant: use Object.getPrototype\nfoo.__proto__ \u003d bar; // Noncompliant: use Object.setPrototype\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code replace \u003ccode\u003e__proto__\u003c/code\u003e with calls to \u003ccode\u003eObject.getPrototype\u003c/code\u003e and \u003ccode\u003eObject.setPrototype\u003c/code\u003e static\nmethods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet prototype \u003d Object.getPrototype(foo);\nObject.setPrototype(foo, bar);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003einheritance and the\n  prototype chain\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"\u003e__proto__\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"\u003eObject.getPrototypeOf\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"\u003eObject.setPrototypeOf\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript has a prototypical inheritance model. Each object has an internal property that points to another object, called a\n\u003ccode\u003eprototype\u003c/code\u003e. That prototype object has a prototype of its own, and the whole sequence is called a \u003cstrong\u003eprototype chain\u003c/strong\u003e. When\naccessing a property or a method of an object, if it is not found at the top level, the search continues through the objectâ€™s prototype and then\nfurther down the prototype chain. This feature allows for very powerful dynamic inheritance patterns but can also lead to confusion when compared to\nthe classic inheritance.\u003c/p\u003e\n\u003cp\u003eTo simplify the access to the prototype of an object some browsers introduced the \u003ccode\u003e__proto__\u003c/code\u003e property, which was later deprecated and\nremoved from the language. The current ECMAScript standard includes \u003ccode\u003eObject.getPrototype\u003c/code\u003e and \u003ccode\u003eObject.setPrototype\u003c/code\u003e static\nmethods that should be used instead of the \u003ccode\u003e__proto__\u003c/code\u003e property.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet prototype \u003d foo.__proto__;  // Noncompliant: use Object.getPrototype\nfoo.__proto__ \u003d bar; // Noncompliant: use Object.setPrototype\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code replace \u003ccode\u003e__proto__\u003c/code\u003e with calls to \u003ccode\u003eObject.getPrototype\u003c/code\u003e and \u003ccode\u003eObject.setPrototype\u003c/code\u003e static\nmethods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet prototype \u003d Object.getPrototype(foo);\nObject.setPrototype(foo, bar);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003einheritance and the\n  prototype chain\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"\u003e__proto__\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"\u003eObject.getPrototypeOf\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"\u003eObject.setPrototypeOf\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S101",
    "name": "Class names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name (or an interface for TypeScript) does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {...}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name (or an interface for TypeScript) does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eFor example, with the default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...} // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {...}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the class names against.",
        "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^[A-Z][a-zA-Z0-9]*$"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6775",
    "name": "All \"defaultProps\" should have non-required PropTypes",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact Legacy APIs provide a way to define the default values for props and check the prop types at runtime. This rule verifies if a\n\u003ccode\u003edefaultProps\u003c/code\u003e definition does have a corresponding \u003ccode\u003epropTypes\u003c/code\u003e definition. If it is missing, this could be the result of errors\nin refactoring or a spelling mistake.\u003c/p\u003e\n\u003cp\u003eIt is also an error if a \u003ccode\u003edefaultProp\u003c/code\u003e has \u003ccode\u003epropType\u003c/code\u003e that is marked as \u003ccode\u003eisRequired\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in PropTypes\u003c/h2\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent({foo, bar}) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.propTypes \u003d {\n  foo: React.PropTypes.string.isRequired,\n};\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\", // Noncompliant: foo is a required prop\n  bar: \"bar\", // Noncompliant: bar propType is missing\n};\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, verify that each \u003ccode\u003edefaultProp\u003c/code\u003e has a corresponding \u003ccode\u003epropType\u003c/code\u003e definition and is not marked as\n\u003ccode\u003eisRequired\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent({foo, bar}) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.propTypes \u003d {\n  foo: React.PropTypes.string,\n  bar: React.PropTypes.string,\n};\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\",\n  bar: \"bar\",\n};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/typescript#typescript-with-react-components\"\u003eTypeScript with React Components\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component#specifying-a-default-value-for-a-prop\"\u003eSpecifying a default\n  value for a prop\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/typechecking-with-proptypes.html\"\u003eTypechecking With PropTypes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact Legacy APIs provide a way to define the default values for props and check the prop types at runtime. This rule verifies if a\n\u003ccode\u003edefaultProps\u003c/code\u003e definition does have a corresponding \u003ccode\u003epropTypes\u003c/code\u003e definition. If it is missing, this could be the result of errors\nin refactoring or a spelling mistake.\u003c/p\u003e\n\u003cp\u003eIt is also an error if a \u003ccode\u003edefaultProp\u003c/code\u003e has \u003ccode\u003epropType\u003c/code\u003e that is marked as \u003ccode\u003eisRequired\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent({foo, bar}) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.propTypes \u003d {\n  foo: React.PropTypes.string.isRequired,\n};\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\", // Noncompliant: foo is a required prop\n  bar: \"bar\", // Noncompliant: bar propType is missing\n};\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, verify that each \u003ccode\u003edefaultProp\u003c/code\u003e has a corresponding \u003ccode\u003epropType\u003c/code\u003e definition and is not marked as\n\u003ccode\u003eisRequired\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent({foo, bar}) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.propTypes \u003d {\n  foo: React.PropTypes.string,\n  bar: React.PropTypes.string,\n};\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\",\n  bar: \"bar\",\n};\n\u003c/pre\u003e",
        "context": {
          "key": "proptypes",
          "displayName": "PropTypes"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\ntype Props \u003d {\n  foo: string,\n  bar?: string\n}\n\nfunction MyComponent({foo, bar}: Props) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\", // Noncompliant: foo is a required prop\n  bar: \"bar\",\n};\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, verify that each \u003ccode\u003edefaultProp\u003c/code\u003e has a corresponding type definition and is marked as optional.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\ntype Props \u003d {\n  foo?: string,\n  bar?: string\n}\n\nfunction MyComponent({foo, bar}: Props) {\n  return \u0026lt;div\u0026gt;{foo}{bar}\u0026lt;/div\u0026gt;;\n}\n\nMyComponent.defaultProps \u003d {\n  foo: \"foo\",\n  bar: \"bar\",\n};\n\u003c/pre\u003e",
        "context": {
          "key": "typescript",
          "displayName": "TypeScript"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/typescript#typescript-with-react-components\"\u003eTypeScript with React Components\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component#specifying-a-default-value-for-a-prop\"\u003eSpecifying a default\n  value for a prop\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/typechecking-with-proptypes.html\"\u003eTypechecking With PropTypes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6534",
    "name": "Numbers should not lose precision",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNumbers in JavaScript are stored in \u003ca href\u003d\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\u003edouble-precision 64-bit binary\nformat IEEE 754\u003c/a\u003e. Like any other number encoding occupying a finite number of bits, it is unable to represent all numbers.\u003c/p\u003e\n\u003cp\u003eThe values are stored using 64 bits in the following form:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e 1 bit for the sign (positive or negative) \u003c/li\u003e\n  \u003cli\u003e 11 bits for the exponent (2\u003csup\u003en\u003c/sup\u003e). -1022 â‰¤ n â‰¤ 1023 \u003c/li\u003e\n  \u003cli\u003e 52 bits for the significand (or mantissa) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe actual value of the stored number will be \u003ccode\u003e(-1)\u003csup\u003esign\u003c/sup\u003e * (1 + significand) * 2 \u003csup\u003eexponent\u003c/sup\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGiven this structure, there are limits in both \u003cstrong\u003emagnitude\u003c/strong\u003e and \u003cstrong\u003eprecision\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eDue to the 52 bits used for the significand, any arithmetic in need of more precision than 2\u003csup\u003e-52\u003c/sup\u003e (provided by\n\u003ccode\u003eNumber.EPSILON\u003c/code\u003e) is subject to rounding.\u003c/p\u003e\n\u003cp\u003eIn terms of magnitude, the largest number the 64 bits of the format can store is 2\u003csup\u003e1024\u003c/sup\u003e - 1 (\u003ccode\u003eNumber.MAX_VALUE\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eHowever, because the 52 bits of the significand, only integers between -(2\u003csup\u003e53\u003c/sup\u003e - 1) (\u003ccode\u003eNumber.MIN_SAFE_INTEGER\u003c/code\u003e) and\n2\u003csup\u003e53\u003c/sup\u003e - 1 (\u003ccode\u003eNumber.MAX_SAFE_INTEGER\u003c/code\u003e) can be represented exactly and be properly compared.\u003c/p\u003e\n\u003cpre\u003e\nNumber.MAX_SAFE_INTEGER + 1 \u003d\u003d\u003d Number.MAX_SAFE_INTEGER + 2;  // true\n\u003c/pre\u003e\n\u003cp\u003eJavaScript provides the \u003ccode\u003ebigint\u003c/code\u003e primitive to represent values which are too large to be represented by the number primitive. BigInts\nare created by appending \u003ccode\u003en\u003c/code\u003e to the end of an integer literal, or by calling the \u003ccode\u003eBigInt()\u003c/code\u003e function (without the new operator),\nwith an integer or a string.\u003c/p\u003e\n\u003cpre\u003e\nconst myBigInt \u003d BigInt(Number.MAX_SAFE_INTEGER);\nmyBigInt + 1n \u003d\u003d\u003d myBigInt + 2n;  // false\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eFor large numbers, JavaScript provides the helper function \u003ccode\u003eNumber.isSafeInteger()\u003c/code\u003e to test if a number is between the safe limits.\u003c/p\u003e\n\u003cp\u003eWhen you need to store a large number, use \u003ccode\u003eBigInt\u003c/code\u003e. \u003ccode\u003ebigint\u003c/code\u003e and \u003ccode\u003enumber\u003c/code\u003e primitives can be compared between them\nas usual (e.g. \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u003d\u003d\u003c/code\u003e), but pay attention that arithmetic operations (\u003ccode\u003e+\u003c/code\u003e \u003ccode\u003e*\u003c/code\u003e \u003ccode\u003e-\u003c/code\u003e\n\u003ccode\u003e%\u003c/code\u003e \u003ccode\u003e**\u003c/code\u003e) between both types raise an error unless they are converted to the same type. Use the \u003ccode\u003eBigInt\u003c/code\u003e and\n\u003ccode\u003eNumber\u003c/code\u003e functions to convert between both types:\u003c/p\u003e\n\u003cpre\u003e\nconst myNumber \u003d Number(myBigInt);\nconst myBigInt \u003d BigInt(myNumber);\n\u003c/pre\u003e\n\u003cp\u003eBe careful converting values back and forth, however, as the precision of a \u003ccode\u003ebigint\u003c/code\u003e value may be lost when it is coerced to a\n\u003ccode\u003enumber\u003c/code\u003e value.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst foo \u003d 2312123211345545367  // Noncompliant: will be stored as 2312123211345545000\nconst bar \u003d BigInt(2312123211345545367);  // Noncompliant: parameter is first parsed as an integer and thus rounded\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nconst foo \u003d BigInt(\u00272312123211345545367\u0027);\nconst bar \u003d 2312123211345545367n;\n\u003c/pre\u003e\n\u003cp\u003eWhen in need of more decimal precision, it is recommended to use a dedicated library to ensure that calculation errors are not introduced by\nrounding.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst baz \u003d 0.123456789123456789 // Noncompliant: will be stored as 0.12345678912345678\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\n// use a library like decimal.js for storing numbers containing many decimal digits\nimport { Decimal } from \u0027decimal.js\u0027;\nconst bar \u003d new Decimal(\u00270.123456789123456789\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding\"\u003eNumber\n  encoding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"\u003eBigInt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\u003eDouble-precision floating-point format\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE 754 Standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNumbers in JavaScript are stored in \u003ca href\u003d\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\u003edouble-precision 64-bit binary\nformat IEEE 754\u003c/a\u003e. Like any other number encoding occupying a finite number of bits, it is unable to represent all numbers.\u003c/p\u003e\n\u003cp\u003eThe values are stored using 64 bits in the following form:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e 1 bit for the sign (positive or negative) \u003c/li\u003e\n  \u003cli\u003e 11 bits for the exponent (2\u003csup\u003en\u003c/sup\u003e). -1022 â‰¤ n â‰¤ 1023 \u003c/li\u003e\n  \u003cli\u003e 52 bits for the significand (or mantissa) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe actual value of the stored number will be \u003ccode\u003e(-1)\u003csup\u003esign\u003c/sup\u003e * (1 + significand) * 2 \u003csup\u003eexponent\u003c/sup\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGiven this structure, there are limits in both \u003cstrong\u003emagnitude\u003c/strong\u003e and \u003cstrong\u003eprecision\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eDue to the 52 bits used for the significand, any arithmetic in need of more precision than 2\u003csup\u003e-52\u003c/sup\u003e (provided by\n\u003ccode\u003eNumber.EPSILON\u003c/code\u003e) is subject to rounding.\u003c/p\u003e\n\u003cp\u003eIn terms of magnitude, the largest number the 64 bits of the format can store is 2\u003csup\u003e1024\u003c/sup\u003e - 1 (\u003ccode\u003eNumber.MAX_VALUE\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eHowever, because the 52 bits of the significand, only integers between -(2\u003csup\u003e53\u003c/sup\u003e - 1) (\u003ccode\u003eNumber.MIN_SAFE_INTEGER\u003c/code\u003e) and\n2\u003csup\u003e53\u003c/sup\u003e - 1 (\u003ccode\u003eNumber.MAX_SAFE_INTEGER\u003c/code\u003e) can be represented exactly and be properly compared.\u003c/p\u003e\n\u003cpre\u003e\nNumber.MAX_SAFE_INTEGER + 1 \u003d\u003d\u003d Number.MAX_SAFE_INTEGER + 2;  // true\n\u003c/pre\u003e\n\u003cp\u003eJavaScript provides the \u003ccode\u003ebigint\u003c/code\u003e primitive to represent values which are too large to be represented by the number primitive. BigInts\nare created by appending \u003ccode\u003en\u003c/code\u003e to the end of an integer literal, or by calling the \u003ccode\u003eBigInt()\u003c/code\u003e function (without the new operator),\nwith an integer or a string.\u003c/p\u003e\n\u003cpre\u003e\nconst myBigInt \u003d BigInt(Number.MAX_SAFE_INTEGER);\nmyBigInt + 1n \u003d\u003d\u003d myBigInt + 2n;  // false\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eFor large numbers, JavaScript provides the helper function \u003ccode\u003eNumber.isSafeInteger()\u003c/code\u003e to test if a number is between the safe limits.\u003c/p\u003e\n\u003cp\u003eWhen you need to store a large number, use \u003ccode\u003eBigInt\u003c/code\u003e. \u003ccode\u003ebigint\u003c/code\u003e and \u003ccode\u003enumber\u003c/code\u003e primitives can be compared between them\nas usual (e.g. \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u003d\u003d\u003c/code\u003e), but pay attention that arithmetic operations (\u003ccode\u003e+\u003c/code\u003e \u003ccode\u003e*\u003c/code\u003e \u003ccode\u003e-\u003c/code\u003e\n\u003ccode\u003e%\u003c/code\u003e \u003ccode\u003e**\u003c/code\u003e) between both types raise an error unless they are converted to the same type. Use the \u003ccode\u003eBigInt\u003c/code\u003e and\n\u003ccode\u003eNumber\u003c/code\u003e functions to convert between both types:\u003c/p\u003e\n\u003cpre\u003e\nconst myNumber \u003d Number(myBigInt);\nconst myBigInt \u003d BigInt(myNumber);\n\u003c/pre\u003e\n\u003cp\u003eBe careful converting values back and forth, however, as the precision of a \u003ccode\u003ebigint\u003c/code\u003e value may be lost when it is coerced to a\n\u003ccode\u003enumber\u003c/code\u003e value.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst foo \u003d 2312123211345545367  // Noncompliant: will be stored as 2312123211345545000\nconst bar \u003d BigInt(2312123211345545367);  // Noncompliant: parameter is first parsed as an integer and thus rounded\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nconst foo \u003d BigInt(\u00272312123211345545367\u0027);\nconst bar \u003d 2312123211345545367n;\n\u003c/pre\u003e\n\u003cp\u003eWhen in need of more decimal precision, it is recommended to use a dedicated library to ensure that calculation errors are not introduced by\nrounding.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst baz \u003d 0.123456789123456789 // Noncompliant: will be stored as 0.12345678912345678\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\n// use a library like decimal.js for storing numbers containing many decimal digits\nimport { Decimal } from \u0027decimal.js\u0027;\nconst bar \u003d new Decimal(\u00270.123456789123456789\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding\"\u003eNumber\n  encoding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"\u003eBigInt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\"\u003eDouble-precision floating-point format\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE 754 Standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "floating-point",
      "numbers",
      "precision"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6774",
    "name": "React components should validate prop types",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, props are typically passed as plain objects, which can lead to errors and confusion when working with components that have specific\nprop requirements. However, it lacks of type safety and clarity when passing props to components in a codebase.\u003c/p\u003e\n\u003cp\u003eBy defining types for component props, developers can enforce type safety and provide clear documentation for the expected props of a component.\nThis helps catch potential errors at compile-time. It also improves code maintainability by making it easier to understand how components should be\nused and what props they accept.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\n\nfunction Hello({ firstname, lastname }) {\n  return \u0026lt;div\u0026gt;Hello {firstname} {lastname}\u0026lt;/div\u0026gt;; // Noncompliant: \u0027lastname\u0027 type is missing\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired\n};\n\n// Using legacy APIs\n\nclass Hello extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Hello {this.props.firstname} {this.props.lastname}\u0026lt;/div\u0026gt;; // Noncompliant: \u0027lastname\u0027 type is missing\n  }\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n};\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\n\nfunction Hello({ firstname, lastname }) {\n  return \u0026lt;div\u0026gt;Hello {firstname} {lastname}\u0026lt;/div\u0026gt;;\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n  lastname: PropTypes.string.isRequired,\n};\n\n// Using legacy APIs\n\nclass Hello extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Hello {this.props.firstname} {this.props.lastname}\u0026lt;/div\u0026gt;;\n  }\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n  lastname: PropTypes.string.isRequired,\n};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#static-proptypes\"\u003estatic propTypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Flow.js Documentation - \u003ca href\u003d\"https://flow.org/en/docs/react/\"\u003eReact\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, props are typically passed as plain objects, which can lead to errors and confusion when working with components that have specific\nprop requirements. However, it lacks of type safety and clarity when passing props to components in a codebase.\u003c/p\u003e\n\u003cp\u003eBy defining types for component props, developers can enforce type safety and provide clear documentation for the expected props of a component.\nThis helps catch potential errors at compile-time. It also improves code maintainability by making it easier to understand how components should be\nused and what props they accept.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\n\nfunction Hello({ firstname, lastname }) {\n  return \u0026lt;div\u0026gt;Hello {firstname} {lastname}\u0026lt;/div\u0026gt;; // Noncompliant: \u0027lastname\u0027 type is missing\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired\n};\n\n// Using legacy APIs\n\nclass Hello extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Hello {this.props.firstname} {this.props.lastname}\u0026lt;/div\u0026gt;; // Noncompliant: \u0027lastname\u0027 type is missing\n  }\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n};\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\n\nfunction Hello({ firstname, lastname }) {\n  return \u0026lt;div\u0026gt;Hello {firstname} {lastname}\u0026lt;/div\u0026gt;;\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n  lastname: PropTypes.string.isRequired,\n};\n\n// Using legacy APIs\n\nclass Hello extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Hello {this.props.firstname} {this.props.lastname}\u0026lt;/div\u0026gt;;\n  }\n}\nHello.propTypes \u003d {\n  firstname: PropTypes.string.isRequired,\n  lastname: PropTypes.string.isRequired,\n};\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#static-proptypes\"\u003estatic propTypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Flow.js Documentation - \u003ca href\u003d\"https://flow.org/en/docs/react/\"\u003eReact\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6653",
    "name": "Use Object.hasOwn static method instead of hasOwnProperty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eObject.hasOwn()\u003c/code\u003e method was introduced in ES2022 as a replacement for the more verbose\n\u003ccode\u003eObject.prototype.hasOwnProperty.call()\u003c/code\u003e. These methods return \u003ccode\u003etrue\u003c/code\u003e if the specified property of an object exists as its\n\u003cem\u003eown\u003c/em\u003e property. If the property is only available further down the prototype chain or does not exist at all - the methods return\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you are still using the old method - replace it with a simpler and more concise alternative.\u003c/p\u003e\n\u003cp\u003eYou should also avoid calling the \u003ccode\u003eobj.hasOwnProperty()\u003c/code\u003e method directly, without using \u003ccode\u003eObject.prototype\u003c/code\u003e as a source. This\ncan lead to a runtime error if \u003ccode\u003eobj.prototype\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e and therefore \u003ccode\u003eobj.hasOwnProperty\u003c/code\u003e is undefined. The static\nmethod \u003ccode\u003eObject.hasOwn()\u003c/code\u003e does not depend on the \u003ccode\u003eobj.prototype\u003c/code\u003e and is therefore safe to use in such cases.\u003c/p\u003e\n\u003cpre\u003e\nObject.prototype.hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\nObject.hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\n({}).hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code replace \u003ccode\u003ehasOwnProperty()\u003c/code\u003e with \u003ccode\u003eObject.hasOwn()\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nObject.hasOwn(obj, \"propertyName\");\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"\u003eObject.hasOwn()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"\u003eObject.prototype.hasOwnProperty()\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eObject.hasOwn()\u003c/code\u003e method was introduced in ES2022 as a replacement for the more verbose\n\u003ccode\u003eObject.prototype.hasOwnProperty.call()\u003c/code\u003e. These methods return \u003ccode\u003etrue\u003c/code\u003e if the specified property of an object exists as its\n\u003cem\u003eown\u003c/em\u003e property. If the property is only available further down the prototype chain or does not exist at all - the methods return\n\u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you are still using the old method - replace it with a simpler and more concise alternative.\u003c/p\u003e\n\u003cp\u003eYou should also avoid calling the \u003ccode\u003eobj.hasOwnProperty()\u003c/code\u003e method directly, without using \u003ccode\u003eObject.prototype\u003c/code\u003e as a source. This\ncan lead to a runtime error if \u003ccode\u003eobj.prototype\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e and therefore \u003ccode\u003eobj.hasOwnProperty\u003c/code\u003e is undefined. The static\nmethod \u003ccode\u003eObject.hasOwn()\u003c/code\u003e does not depend on the \u003ccode\u003eobj.prototype\u003c/code\u003e and is therefore safe to use in such cases.\u003c/p\u003e\n\u003cpre\u003e\nObject.prototype.hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\nObject.hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\n({}).hasOwnProperty.call(obj, \"propertyName\"); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code replace \u003ccode\u003ehasOwnProperty()\u003c/code\u003e with \u003ccode\u003eObject.hasOwn()\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nObject.hasOwn(obj, \"propertyName\");\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"\u003eObject.hasOwn()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"\u003eObject.prototype.hasOwnProperty()\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2022"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5443",
    "name": "Using publicly writable directories is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n\u003ccode\u003e/tmp\u003c/code\u003e in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\"\u003eCVE-2012-2451\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\"\u003eCVE-2015-1838\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like \u003ccode\u003e/tmp\u003c/code\u003e (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., \u003ccode\u003eTMP\u003c/code\u003e and \u003ccode\u003eTMPDIR\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/usr/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/shm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/mqueue\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Library/Caches\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Users/Shared\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Windows\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\TMP\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Files are read from or written into a publicly writable folder \u003c/li\u003e\n  \u003cli\u003e The application creates files with predictable names into a publicly writable folder \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\n\nlet tmp_file \u003d \"/tmp/temporary_file\"; // Sensitive\nfs.readFile(tmp_file, \u0027utf8\u0027, function (err, data) {\n  // ...\n});\n\u003c/pre\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\n\nlet tmp_dir \u003d process.env.TMPDIR; // Sensitive\nfs.readFile(tmp_dir + \"/temporary_file\", \u0027utf8\u0027, function (err, data) {\n  // ...\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a dedicated sub-folder with tightly controlled permissions \u003c/li\u003e\n  \u003cli\u003e Use secure-by-design APIs to create temporary files. Such API will make sure:\n    \u003cul\u003e\n      \u003cli\u003e The generated filename is unpredictable \u003c/li\u003e\n      \u003cli\u003e The file is readable and writable only by the creating user ID \u003c/li\u003e\n      \u003cli\u003e The file descriptor is not inherited by child processes \u003c/li\u003e\n      \u003cli\u003e The file will be destroyed as soon as it is closed \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst tmp \u003d require(\u0027tmp\u0027);\n\nconst tmpobj \u003d tmp.fileSync(); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eMITRE, CWE-377\u003c/a\u003e - Insecure Temporary File \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eMITRE, CWE-379\u003c/a\u003e - Creation of Temporary File in Directory with Incorrect Permissions\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP, Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6535",
    "name": "Unnecessary character escapes should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e\\\u003c/code\u003e (backslash) character indicates that the next character should be treated as a literal character rather than as a special\ncharacter or string delimiter. For instance, it is common to escape single quotes inside a string literal using the single quote delimiter like\n\u003ccode\u003e\u0027It\\\u0027s a beautiful day\u0027\u003c/code\u003e. Escaping is only meaningful for special characters. Escaping non-special characters in strings, template\nliterals, and regular expressions doesnâ€™t affect their value.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /[\\[]/;  // Noncompliant: \u0027[\u0027 does not need to be escaped when inside a character class \u0027[]\u0027\nconst octal \u003d \u0027\\8\u0027;    // Noncompliant: \u00278\u0027 is not valid octal number\nconst hello \u003d \u0027Hello, world\\!\u0027;    // Noncompliant: \u0027!\u0027 is not a special character\nconst path  \u003d `\\/${some}\\/${dir}`; // Noncompliant: \u0027/\u0027 is not a special character\n\u003c/pre\u003e\n\u003cp\u003eTherefore, useless escapes impact code readability and could even denote a bug in the code if the developer left it by mistake or intended to\nescape another special character instead.\u003c/p\u003e\n\u003cp\u003eYou should check if the escape character was not misplaced. Useless character escapes can safely be removed without changing the original\nvalue.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /[[]/;\nconst octal \u003d \u00278\u0027;\nconst hello \u003d \u0027Hello, world!\u0027;\nconst path  \u003d `/${some}/${dir}`;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#escaping\"\u003eEscaping in Regular\n  expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3Schools - \u003ca href\u003d\"https://www.w3schools.com/js/js_strings.asp\"\u003eJavaScript strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003e\\\u003c/code\u003e (backslash) character indicates that the next character should be treated as a literal character rather than as a special\ncharacter or string delimiter. For instance, it is common to escape single quotes inside a string literal using the single quote delimiter like\n\u003ccode\u003e\u0027It\\\u0027s a beautiful day\u0027\u003c/code\u003e. Escaping is only meaningful for special characters. Escaping non-special characters in strings, template\nliterals, and regular expressions doesnâ€™t affect their value.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /[\\[]/;  // Noncompliant: \u0027[\u0027 does not need to be escaped when inside a character class \u0027[]\u0027\nconst octal \u003d \u0027\\8\u0027;    // Noncompliant: \u00278\u0027 is not valid octal number\nconst hello \u003d \u0027Hello, world\\!\u0027;    // Noncompliant: \u0027!\u0027 is not a special character\nconst path  \u003d `\\/${some}\\/${dir}`; // Noncompliant: \u0027/\u0027 is not a special character\n\u003c/pre\u003e\n\u003cp\u003eTherefore, useless escapes impact code readability and could even denote a bug in the code if the developer left it by mistake or intended to\nescape another special character instead.\u003c/p\u003e\n\u003cp\u003eYou should check if the escape character was not misplaced. Useless character escapes can safely be removed without changing the original\nvalue.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /[[]/;\nconst octal \u003d \u00278\u0027;\nconst hello \u003d \u0027Hello, world!\u0027;\nconst path  \u003d `/${some}/${dir}`;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions#escaping\"\u003eEscaping in Regular\n  expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3Schools - \u003ca href\u003d\"https://www.w3schools.com/js/js_strings.asp\"\u003eJavaScript strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6657",
    "name": "Octal escape sequences should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOctal escape sequences in string literals have been deprecated since ECMAScript 5 and should not be used in modern JavaScript code.\u003c/p\u003e\n\u003cp\u003eMany developers may not have experience with this format and may confuse it with the decimal notation.\u003c/p\u003e\n\u003cpre\u003e\nlet message \u003d \"Copyright \\251\"; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThe better way to insert special characters is to use Unicode or hexadecimal escape sequences.\u003c/p\u003e\n\u003cpre\u003e\nlet message1 \u003d \"Copyright \\u00A9\";  // unicode\nlet message2 \u003d \"Copyright \\xA9\";    // hexadecimal\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals\"\u003eString literals\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\"\u003eSyntaxError: Octal escape\n  sequences are deprecated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOctal escape sequences in string literals have been deprecated since ECMAScript 5 and should not be used in modern JavaScript code.\u003c/p\u003e\n\u003cp\u003eMany developers may not have experience with this format and may confuse it with the decimal notation.\u003c/p\u003e\n\u003cpre\u003e\nlet message \u003d \"Copyright \\251\"; // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThe better way to insert special characters is to use Unicode or hexadecimal escape sequences.\u003c/p\u003e\n\u003cpre\u003e\nlet message1 \u003d \"Copyright \\u00A9\";  // unicode\nlet message2 \u003d \"Copyright \\xA9\";    // hexadecimal\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#string_literals\"\u003eString literals\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\"\u003eSyntaxError: Octal escape\n  sequences are deprecated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5689",
    "name": "Disclosing fingerprints from web application technologies is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDisclosure of version information, usually overlooked by developers but disclosed by default by the systems and frameworks in use, can pose a\nsignificant security risk depending on the production environement.\u003c/p\u003e\n\u003cp\u003eOnce this information is public, attackers can use it to identify potential security holes or vulnerabilities specific to that version.\u003c/p\u003e\n\u003cp\u003eFurthermore, if the published version information indicates the use of outdated or unsupported software, it becomes easier for attackers to exploit\nknown vulnerabilities. They can search for published vulnerabilities related to that version and launch attacks that specifically target those\nvulnerabilities.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Version information is accessible to end users. \u003c/li\u003e\n  \u003cli\u003e Internal systems do not benefit from timely patch management workflows. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn \u003ca href\u003d\"https://www.npmjs.com/package/express\"\u003eExpress.js\u003c/a\u003e, version information is disclosed by default in the \u003ccode\u003ex-powered-by\u003c/code\u003e\nHTTP header:\u003c/p\u003e\n\u003cpre\u003e\nlet express \u003d require(\u0027express\u0027);\n\nlet example \u003d express(); // Sensitive\n\nexample.get(\u0027/\u0027, function (req, res) {\n  res.send(\u0027example\u0027)\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eIn general, it is recommended to keep internal technical information within internal systems to control what attackers know about the underlying\narchitectures. This is known as the \"need to know\" principle.\u003c/p\u003e\n\u003cp\u003eThe most effective solution is to remove version information disclosure from what end users can see, such as the \"x-powered-by\" header.\u003cbr\u003e This\ncan be achieved directly through the web application code, server (nginx, apache) or firewalls.\u003c/p\u003e\n\u003cp\u003eDisabling the server signature provides additional protection by reducing the amount of information available to attackers. Note, however, that\nthis does not provide as much protection as regular updates and patches.\u003cbr\u003e Security by obscurity is the least foolproof solution of all. It should\nnever be the only defense mechanism and should always be combined with other security measures.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ex-powered-by\u003c/code\u003e HTTP header should be disabled in \u003ca href\u003d\"https://www.npmjs.com/package/express\"\u003eExpress.js\u003c/a\u003e with\n\u003ccode\u003eapp.disable\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nlet express \u003d require(\u0027express\u0027);\n\nlet example \u003d express();\nexample.disable(\"x-powered-by\");\n\u003c/pre\u003e\n\u003cp\u003eOr with helmetâ€™s \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehidePoweredBy\u003c/a\u003e middleware:\u003c/p\u003e\n\u003cpre\u003e\nlet helmet \u003d require(\"helmet\");\n\nlet example \u003d express();\nexample.use(helmet.hidePoweredBy());\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html\"\u003eOWASP Testing Guide - OTG-INFO-008\u003c/a\u003e - Fingerprint Web Application Framework \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/200\"\u003eMITRE, CWE-200\u003c/a\u003e - Information Exposure \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6761",
    "name": "\"children\" and \"dangerouslySetInnerHTML\" should not be used together",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact has a special prop called \u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e that allows you to assign a raw HTML string to the underlying DOM\n\u003ccode\u003einnerHTML\u003c/code\u003e property. Changing \u003ccode\u003einnerHTML\u003c/code\u003e will replace the elementâ€™s child nodes or text content. For this reason,\n\u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e should never be used together with component \u003ccode\u003echildren\u003c/code\u003e as they will conflict with each other, both\ntrying to set the inner content of the same element.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent() {\n    return ( // Noncompliant: don\u0027t use children and dangerouslySetInnerHTML at the same time\n        \u0026lt;div dangerouslySetInnerHTML\u003d{{ __html: \"HTML\" }}\u0026gt;\n            Children\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue leave either the elementâ€™s \u003ccode\u003echildren\u003c/code\u003e or \u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e, but not both.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent() {\n    return (\n        \u0026lt;div dangerouslySetInnerHTML\u003d{{ __html: \"HTML\" }} /\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children\"\u003ePassing JSX as children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\"\u003eDangerously setting\n  the inner HTML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact has a special prop called \u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e that allows you to assign a raw HTML string to the underlying DOM\n\u003ccode\u003einnerHTML\u003c/code\u003e property. Changing \u003ccode\u003einnerHTML\u003c/code\u003e will replace the elementâ€™s child nodes or text content. For this reason,\n\u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e should never be used together with component \u003ccode\u003echildren\u003c/code\u003e as they will conflict with each other, both\ntrying to set the inner content of the same element.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent() {\n    return ( // Noncompliant: don\u0027t use children and dangerouslySetInnerHTML at the same time\n        \u0026lt;div dangerouslySetInnerHTML\u003d{{ __html: \"HTML\" }}\u0026gt;\n            Children\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue leave either the elementâ€™s \u003ccode\u003echildren\u003c/code\u003e or \u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e, but not both.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent() {\n    return (\n        \u0026lt;div dangerouslySetInnerHTML\u003d{{ __html: \"HTML\" }} /\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children\"\u003ePassing JSX as children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\"\u003eDangerously setting\n  the inner HTML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1192",
    "name": "String literals should not be duplicated",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching \u003ccode\u003e/^\\w*$/\u003c/code\u003e.\nString literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. \u003ccode\u003e\u0027use\nstrict\u0027;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction run() {\n    prepare(\"action_to_launch\");  // Noncompliant - \"action_to_launch\" is duplicated 3 times\n    execute(\"action_to_launch\");\n    release(\"action_to_launch\");\n}\n\nfunction printInQuotes(a, b) {\n  console.log(\"\u0027\" + a + \"\u0027\" + b + \"\u0027\");               // Compliant - literal \"\u0027\" has less than 10 characters and is excluded\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar ACTION_1 \u003d \"action_to_launch\";\n\nfunction run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching \u003ccode\u003e/^\\w*$/\u003c/code\u003e.\nString literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. \u003ccode\u003e\u0027use\nstrict\u0027;\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction run() {\n    prepare(\"action_to_launch\");  // Noncompliant - \"action_to_launch\" is duplicated 3 times\n    execute(\"action_to_launch\");\n    release(\"action_to_launch\");\n}\n\nfunction printInQuotes(a, b) {\n  console.log(\"\u0027\" + a + \"\u0027\" + b + \"\u0027\");               // Compliant - literal \"\u0027\" has less than 10 characters and is excluded\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar ACTION_1 \u003d \"action_to_launch\";\n\nfunction run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "ignoreStrings": {
        "key": "ignoreStrings",
        "name": "ignoreStrings",
        "description": "Comma-separated list of strings that must be ignored.",
        "defaultValue": "application/json",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      },
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "Number of times a literal must be duplicated to trigger an issue.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "ignoreStrings": "application/json",
      "threshold": "3"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6643",
    "name": "Prototypes of builtin objects should not be modified",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003ePrototypes of builtin objects should not be modified.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy default, JavaScript allows you to modify native object prototypes, such as \u003ccode\u003eArray\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eObject\u003c/code\u003e, and so\non. This means you can add new properties or methods to native objects or override existing ones. While this flexibility can be useful in some\ninstances, it can lead to unexpected behavior, bugs, and compatibility issues.\u003c/p\u003e\n\u003cp\u003eThe rule forbids extending or modifying native JavaScript objects or prototypes, as prototypes of builtin objects should not be modified\naltogether.\u003c/p\u003e\n\u003cpre\u003e\nObject.prototype.universe \u003d 42;\nObject.defineProperty(Array.prototype, \"size\", { value: 0 });\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eObject prototypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"\u003e\u003ccode\u003eObject.defineProperty()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003ePrototypes of builtin objects should not be modified.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy default, JavaScript allows you to modify native object prototypes, such as \u003ccode\u003eArray\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eObject\u003c/code\u003e, and so\non. This means you can add new properties or methods to native objects or override existing ones. While this flexibility can be useful in some\ninstances, it can lead to unexpected behavior, bugs, and compatibility issues.\u003c/p\u003e\n\u003cp\u003eThe rule forbids extending or modifying native JavaScript objects or prototypes, as prototypes of builtin objects should not be modified\naltogether.\u003c/p\u003e\n\u003cpre\u003e\nObject.prototype.universe \u003d 42;\nObject.defineProperty(Array.prototype, \"size\", { value: 0 });\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\"\u003eObject prototypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"\u003e\u003ccode\u003eObject.defineProperty()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6522",
    "name": "Import variables should not be reassigned",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssigning a value to an import variable will cause a runtime error and will raise a compilation error in TypeScript.\u003c/p\u003e\n\u003ch3\u003eNamed imports\u003c/h3\u003e\n\u003cp\u003eWhen using named imports, the imported identifier is a \u003cem\u003elive binding\u003c/em\u003e exported by another module. Live bindings can be updated or reassigned\nby the exporting module, and the imported value would also change. The importing module cannot reassign it.\u003c/p\u003e\n\u003cpre\u003e\nimport { exportedObject } from \u0027module.js\u0027;\nexportedObject \u003d \u0027hello world!\u0027;   // Noncompliant: TypeError: Assignment to constant variable.\n\u003c/pre\u003e\n\u003cp\u003eThis rule will \u003cstrong\u003enot\u003c/strong\u003e raise an issue when a module mutates the imported object. Be aware that all other modules importing the same\nvalue will observe the mutated value.\u003c/p\u003e\n\u003cpre\u003e\nimport { exportedObject } from \u0027module.js\u0027;\nexportedObject.newAttribute \u003d \u0027hello world!\u0027; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n\u003c/pre\u003e\n\u003ch3\u003eNamespace and dynamic imports\u003c/h3\u003e\n\u003cp\u003eThis rule will raise an issue when modifying members of a \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object\"\u003e\u003cem\u003emodule namespace\nobject\u003c/em\u003e\u003c/a\u003e. A module namespace object is a \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"\u003esealed object\u003c/a\u003e that describes all exports from\na module.\u003c/p\u003e\n\u003cp\u003eThis can be done using\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a namespace import \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nimport * as module from \u0027module.js\u0027;\nmodule.newObject \u003d module.exportedObject; // Noncompliant: TypeError: Cannot add property readPath, object is not extensible\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the fulfillment value of a dynamic import. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nimport(\u0027module.js\u0027).then(module \u003d\u0026gt; {\n  module.newObject \u003d module.exportedObject; // Noncompliant: TypeError: Cannot add property readPath, object is not extensible\n})\n\u003c/pre\u003e\n\u003ch3\u003eDefault imports\u003c/h3\u003e\n\u003cp\u003eDefault imports are live bindings to the \u003ccode\u003edefault\u003c/code\u003e export. As with the other forms of \u003ccode\u003eimport\u003c/code\u003e declarations, the importing\nmodule cannot reassign it.\u003c/p\u003e\n\u003cpre\u003e\nimport module from \u0027module.js\u0027;\nmodule \u003d \u0027hello world!\u0027;   // Noncompliant: TypeError: Assignment to constant variable.\n\u003c/pre\u003e\n\u003cp\u003eHowever, the object which \u003ccode\u003edefault\u003c/code\u003e refers to is not a \u003cem\u003elive binding\u003c/em\u003e and may still be mutated by importing modules.\u003c/p\u003e\n\u003cpre\u003e\nimport moduleDefault from \u0027module.js\u0027;\nmoduleDefault.newAttribute \u003d \u0027hello world!\u0027; // module.default now contains newAttribute and can be seen from all other modules importing it\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object\"\u003eModule\n  namespace object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed#description\"\u003eSealed\n  Objects\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssigning a value to an import variable will cause a runtime error and will raise a compilation error in TypeScript.\u003c/p\u003e\n\u003ch3\u003eNamed imports\u003c/h3\u003e\n\u003cp\u003eWhen using named imports, the imported identifier is a \u003cem\u003elive binding\u003c/em\u003e exported by another module. Live bindings can be updated or reassigned\nby the exporting module, and the imported value would also change. The importing module cannot reassign it.\u003c/p\u003e\n\u003cpre\u003e\nimport { exportedObject } from \u0027module.js\u0027;\nexportedObject \u003d \u0027hello world!\u0027;   // Noncompliant: TypeError: Assignment to constant variable.\n\u003c/pre\u003e\n\u003cp\u003eThis rule will \u003cstrong\u003enot\u003c/strong\u003e raise an issue when a module mutates the imported object. Be aware that all other modules importing the same\nvalue will observe the mutated value.\u003c/p\u003e\n\u003cpre\u003e\nimport { exportedObject } from \u0027module.js\u0027;\nexportedObject.newAttribute \u003d \u0027hello world!\u0027; // exportedObject now contains newAttribute and can be seen from all other modules importing it\n\u003c/pre\u003e\n\u003ch3\u003eNamespace and dynamic imports\u003c/h3\u003e\n\u003cp\u003eThis rule will raise an issue when modifying members of a \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object\"\u003e\u003cem\u003emodule namespace\nobject\u003c/em\u003e\u003c/a\u003e. A module namespace object is a \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"\u003esealed object\u003c/a\u003e that describes all exports from\na module.\u003c/p\u003e\n\u003cp\u003eThis can be done using\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a namespace import \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nimport * as module from \u0027module.js\u0027;\nmodule.newObject \u003d module.exportedObject; // Noncompliant: TypeError: Cannot add property readPath, object is not extensible\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the fulfillment value of a dynamic import. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nimport(\u0027module.js\u0027).then(module \u003d\u0026gt; {\n  module.newObject \u003d module.exportedObject; // Noncompliant: TypeError: Cannot add property readPath, object is not extensible\n})\n\u003c/pre\u003e\n\u003ch3\u003eDefault imports\u003c/h3\u003e\n\u003cp\u003eDefault imports are live bindings to the \u003ccode\u003edefault\u003c/code\u003e export. As with the other forms of \u003ccode\u003eimport\u003c/code\u003e declarations, the importing\nmodule cannot reassign it.\u003c/p\u003e\n\u003cpre\u003e\nimport module from \u0027module.js\u0027;\nmodule \u003d \u0027hello world!\u0027;   // Noncompliant: TypeError: Assignment to constant variable.\n\u003c/pre\u003e\n\u003cp\u003eHowever, the object which \u003ccode\u003edefault\u003c/code\u003e refers to is not a \u003cem\u003elive binding\u003c/em\u003e and may still be mutated by importing modules.\u003c/p\u003e\n\u003cpre\u003e\nimport moduleDefault from \u0027module.js\u0027;\nmoduleDefault.newAttribute \u003d \u0027hello world!\u0027; // module.default now contains newAttribute and can be seen from all other modules importing it\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object\"\u003eModule\n  namespace object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed#description\"\u003eSealed\n  Objects\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6644",
    "name": "Ternary operator should not be used instead of simpler alternatives",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTernary operator should not be used to select between two boolean values, or instead of a logical \u003ccode\u003eOR\u003c/code\u003e operation. Ternary expressions\nare often difficult to read, so if a simpler syntax exists, it should be used instead of a ternary expression. This happens when\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the expression returns two boolean values \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet isGood \u003d value \u0026gt; 0 ? true : false; // Non-compliant, replace with value \u0026gt; 0\nlet isBad \u003d value \u0026gt; 0 ? false : true; // Non-compliant, replace with !(value \u0026gt; 0)\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the same value is used for both the conditional test and the consequent \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet a \u003d x ? x : y;  // Non-compliant, replace with x || y\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\"\u003eTernary operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\"\u003eLogical NOT (!)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR (||)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTernary operator should not be used to select between two boolean values, or instead of a logical \u003ccode\u003eOR\u003c/code\u003e operation. Ternary expressions\nare often difficult to read, so if a simpler syntax exists, it should be used instead of a ternary expression. This happens when\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the expression returns two boolean values \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet isGood \u003d value \u0026gt; 0 ? true : false; // Non-compliant, replace with value \u0026gt; 0\nlet isBad \u003d value \u0026gt; 0 ? false : true; // Non-compliant, replace with !(value \u0026gt; 0)\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e the same value is used for both the conditional test and the consequent \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet a \u003d x ? x : y;  // Non-compliant, replace with x || y\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\"\u003eTernary operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\"\u003eLogical NOT (!)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR (||)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6523",
    "name": "Optional chaining should not be used if returning \"undefined\" throws an error",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe optional chaining operator \u003ccode\u003e?.\u003c/code\u003e allows to access a deeply nested property, returning \u003ccode\u003eundefined\u003c/code\u003e if the property or any\nintermediate object is \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis usually means that the expression is expected to evaluate as \u003ccode\u003eundefined\u003c/code\u003e in some cases. Therefore, using the optional chaining\noperator in a context where returning \u003ccode\u003eundefined\u003c/code\u003e throws an error can lead to runtime exceptions.\u003c/p\u003e\n\u003cpre\u003e\n(event?.callback)(); // Noncompliant: when \u0027event\u0027 does not have \u0027callback\u0027 property TypeError is thrown\nconst { code } \u003d event?.error; // Noncompliant: when \u0027event\u0027 does not have \u0027error\u0027 property TypeError is thrown\nfunc(...event?.values); // Noncompliant: when \u0027event\u0027 does not have \u0027values\u0027 property TypeError is thrown\n\u003c/pre\u003e\n\u003cp\u003eSince optional chaining represents multiple execution branches, having an error thrown in such a context can be hard to debug.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIn order to prevent runtime errors, you should provide fallbacks for when the optional chaining operator short-circuits to\n\u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Nullish coalescing operator \u003ccode\u003e??\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback ?? defaultCallback)();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Logical OR operator \u003ccode\u003e||\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback || defaultCallback)();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Ternary operator \u003ccode\u003econdition ? exprIfTrue : exprIfFalse\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback ? event?.callback : defaultCallback)();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\n  (?.)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\"\u003eNullish coalescing\n  operator (??)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR (||)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\"\u003eConditional (ternary)\n  operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe optional chaining operator \u003ccode\u003e?.\u003c/code\u003e allows to access a deeply nested property, returning \u003ccode\u003eundefined\u003c/code\u003e if the property or any\nintermediate object is \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis usually means that the expression is expected to evaluate as \u003ccode\u003eundefined\u003c/code\u003e in some cases. Therefore, using the optional chaining\noperator in a context where returning \u003ccode\u003eundefined\u003c/code\u003e throws an error can lead to runtime exceptions.\u003c/p\u003e\n\u003cpre\u003e\n(event?.callback)(); // Noncompliant: when \u0027event\u0027 does not have \u0027callback\u0027 property TypeError is thrown\nconst { code } \u003d event?.error; // Noncompliant: when \u0027event\u0027 does not have \u0027error\u0027 property TypeError is thrown\nfunc(...event?.values); // Noncompliant: when \u0027event\u0027 does not have \u0027values\u0027 property TypeError is thrown\n\u003c/pre\u003e\n\u003cp\u003eSince optional chaining represents multiple execution branches, having an error thrown in such a context can be hard to debug.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn order to prevent runtime errors, you should provide fallbacks for when the optional chaining operator short-circuits to\n\u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Nullish coalescing operator \u003ccode\u003e??\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback ?? defaultCallback)();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Logical OR operator \u003ccode\u003e||\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback || defaultCallback)();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Ternary operator \u003ccode\u003econdition ? exprIfTrue : exprIfFalse\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n(event?.callback ? event?.callback : defaultCallback)();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\n  (?.)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\"\u003eNullish coalescing\n  operator (??)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR (||)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\"\u003eConditional (ternary)\n  operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1077",
    "name": "Image, area, button with image and object elements should have an alternative text",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e and \u003ccode\u003earia-labelledby\u003c/code\u003e attributes provide a textual alternative to an image.\u003c/p\u003e\n\u003cp\u003eIt is used whenever the actual image cannot be rendered.\u003c/p\u003e\n\u003cp\u003eCommon reasons for that include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The image can no longer be found \u003c/li\u003e\n  \u003cli\u003e Visually impaired users using a screen reader software \u003c/li\u003e\n  \u003cli\u003e Image loading is disabled, to reduce data consumption on mobile phones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also very important not to set an alternative text attribute to a non-informative value. For example, \u003ccode\u003e\u0026lt;img ... alt\u003d\"logo\"\u0026gt;\u003c/code\u003e\nis useless as it doesnâ€™t give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image\ninstead of an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag. If using CSS \u003ccode\u003ebackground-image\u003c/code\u003e is not possible, an empty \u003ccode\u003ealt\u003d\"\"\u003c/code\u003e is tolerated. See\nExceptions below.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e element has no \u003ccode\u003ealt\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;input type\u003d\"image\"\u0026gt;\u003c/code\u003e element has no \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e attribute\n  or they hold an empty string. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e element within an image map has no \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e\n  attribute. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;object\u0026gt;\u003c/code\u003e element has no inner text, \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e\n  attribute. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements with an empty string\u0026nbsp;\u003ccode\u003ealt\u003d\"\"\u003c/code\u003e attribute wonâ€™t raise any issue. However, this way should be used\nin two cases only:\u003c/p\u003e\n\u003cp\u003eWhen the image is decorative and it is not possible to use a CSS background image. For example, when the decorative \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e is\ngenerated via javascript with a source image coming from a database, it is better to use an \u003ccode\u003e\u0026lt;img alt\u003d\"\"\u0026gt;\u003c/code\u003e tag rather than generate\nCSS code.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;li *ngFor\u003d\"let image of images\"\u0026gt;\n    \u0026lt;img [src]\u003d\"image\" alt\u003d\"\"\u0026gt;\n\u0026lt;/li\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen the image is not decorative but its \u003ccode\u003ealt\u003c/code\u003e text would repeat a nearby text. For example, images contained in links should not\nduplicate the linkâ€™s text in their \u003ccode\u003ealt\u003c/code\u003e attribute, as it would make the screen reader repeat the text twice.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;a href\u003d\"flowers.html\"\u0026gt;\n    \u0026lt;img src\u003d\"tulip.gif\" alt\u003d\"\" /\u0026gt;\n    A blooming tulip\n\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eIn all other cases you should use CSS background images.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eAdd an alternative text to the HTML element.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;img src\u003d\"foo.png\" /\u0026gt; \u0026lt;!-- missing `alt` attribute --\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" /\u0026gt; \u0026lt;!-- missing alternative text attribute --\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" alt\u003d\"\" /\u0026gt; \u0026lt;!-- empty alternative text attribute on \u0026lt;input\u0026gt; --\u0026gt;\n\n\u0026lt;img src\u003d\"house.gif\" usemap\u003d\"#map1\"\n    alt\u003d\"rooms of the house.\" /\u0026gt;\n\u0026lt;map id\u003d\"map1\" name\u003d\"map1\"\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,42,42\"\n    href\u003d\"bedroom.html\"/\u0026gt; \u0026lt;!-- missing alternative text attribute on \u0026lt;area\u0026gt; --\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,21,21\"\n    href\u003d\"lounge.html\" alt\u003d\"\"/\u0026gt; \u0026lt;!-- empty `alt` attribute on \u0026lt;area\u0026gt; --\u0026gt;\n\u0026lt;/map\u0026gt;\n\n\u0026lt;object {...props} /\u0026gt;  \u0026lt;!-- missing alternative text attribute on \u0026lt;area\u0026gt; --\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;img src\u003d\"foo.png\" alt\u003d\"Some textual description of foo.png\" /\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" aria-labelledby\u003d\"Textual description of bar.png\" /\u0026gt;\n\n\u0026lt;img src\u003d\"house.gif\" usemap\u003d\"#map1\"\n    alt\u003d\"rooms of the house.\" /\u0026gt;\n\u0026lt;map id\u003d\"map1\" name\u003d\"map1\"\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,42,42\"\n    href\u003d\"bedroom.html\" alt\u003d\"Bedroom\" /\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,21,21\"\n    href\u003d\"lounge.html\" aria-label\u003d\"Lounge\"/\u0026gt;\n\u0026lt;/map\u0026gt;\n\n\u0026lt;object\u0026gt;My welcoming Bar\u0026lt;/object\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/tutorials/images/decision-tree/\"\u003eW3C WAI\u0026nbsp;Web Accessibility Tutorials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\"\u003eProviding text alternatives for the area elements of image maps\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\"\u003eUsing alt attributes on images used as submit buttons\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\"\u003eUsing alt attributes on img elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H67.html\"\u003eUsing null alt text and no title attribute on img elements for images that AT\n  should ignore\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H2.html\"\u003eCombining adjacent image and text links for the same resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-text-equiv-all\"\u003eNon-text Content\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-navigation-mechanisms-refs\"\u003eLink Purpose (In Context)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-navigation-mechanisms-link\"\u003eLink Purpose (Link Only)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e and \u003ccode\u003earia-labelledby\u003c/code\u003e attributes provide a textual alternative to an image.\u003c/p\u003e\n\u003cp\u003eIt is used whenever the actual image cannot be rendered.\u003c/p\u003e\n\u003cp\u003eCommon reasons for that include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The image can no longer be found \u003c/li\u003e\n  \u003cli\u003e Visually impaired users using a screen reader software \u003c/li\u003e\n  \u003cli\u003e Image loading is disabled, to reduce data consumption on mobile phones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also very important not to set an alternative text attribute to a non-informative value. For example, \u003ccode\u003e\u0026lt;img ... alt\u003d\"logo\"\u0026gt;\u003c/code\u003e\nis useless as it doesnâ€™t give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image\ninstead of an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag. If using CSS \u003ccode\u003ebackground-image\u003c/code\u003e is not possible, an empty \u003ccode\u003ealt\u003d\"\"\u003c/code\u003e is tolerated. See\nExceptions below.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e element has no \u003ccode\u003ealt\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;input type\u003d\"image\"\u0026gt;\u003c/code\u003e element has no \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e attribute\n  or they hold an empty string. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e element within an image map has no \u003ccode\u003ealt\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e\n  attribute. \u003c/li\u003e\n  \u003cli\u003e An \u003ccode\u003e\u0026lt;object\u0026gt;\u003c/code\u003e element has no inner text, \u003ccode\u003etitle\u003c/code\u003e, \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003earia-labelledby\u003c/code\u003e\n  attribute. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements with an empty string\u0026nbsp;\u003ccode\u003ealt\u003d\"\"\u003c/code\u003e attribute wonâ€™t raise any issue. However, this way should be used\nin two cases only:\u003c/p\u003e\n\u003cp\u003eWhen the image is decorative and it is not possible to use a CSS background image. For example, when the decorative \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e is\ngenerated via javascript with a source image coming from a database, it is better to use an \u003ccode\u003e\u0026lt;img alt\u003d\"\"\u0026gt;\u003c/code\u003e tag rather than generate\nCSS code.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;li *ngFor\u003d\"let image of images\"\u0026gt;\n    \u0026lt;img [src]\u003d\"image\" alt\u003d\"\"\u0026gt;\n\u0026lt;/li\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen the image is not decorative but its \u003ccode\u003ealt\u003c/code\u003e text would repeat a nearby text. For example, images contained in links should not\nduplicate the linkâ€™s text in their \u003ccode\u003ealt\u003c/code\u003e attribute, as it would make the screen reader repeat the text twice.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;a href\u003d\"flowers.html\"\u0026gt;\n    \u0026lt;img src\u003d\"tulip.gif\" alt\u003d\"\" /\u0026gt;\n    A blooming tulip\n\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eIn all other cases you should use CSS background images.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAdd an alternative text to the HTML element.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;img src\u003d\"foo.png\" /\u0026gt; \u0026lt;!-- missing `alt` attribute --\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" /\u0026gt; \u0026lt;!-- missing alternative text attribute --\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" alt\u003d\"\" /\u0026gt; \u0026lt;!-- empty alternative text attribute on \u0026lt;input\u0026gt; --\u0026gt;\n\n\u0026lt;img src\u003d\"house.gif\" usemap\u003d\"#map1\"\n    alt\u003d\"rooms of the house.\" /\u0026gt;\n\u0026lt;map id\u003d\"map1\" name\u003d\"map1\"\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,42,42\"\n    href\u003d\"bedroom.html\"/\u0026gt; \u0026lt;!-- missing alternative text attribute on \u0026lt;area\u0026gt; --\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,21,21\"\n    href\u003d\"lounge.html\" alt\u003d\"\"/\u0026gt; \u0026lt;!-- empty `alt` attribute on \u0026lt;area\u0026gt; --\u0026gt;\n\u0026lt;/map\u0026gt;\n\n\u0026lt;object {...props} /\u0026gt;  \u0026lt;!-- missing alternative text attribute on \u0026lt;area\u0026gt; --\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;img src\u003d\"foo.png\" alt\u003d\"Some textual description of foo.png\" /\u0026gt;\n\u0026lt;input type\u003d\"image\" src\u003d\"bar.png\" aria-labelledby\u003d\"Textual description of bar.png\" /\u0026gt;\n\n\u0026lt;img src\u003d\"house.gif\" usemap\u003d\"#map1\"\n    alt\u003d\"rooms of the house.\" /\u0026gt;\n\u0026lt;map id\u003d\"map1\" name\u003d\"map1\"\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,42,42\"\n    href\u003d\"bedroom.html\" alt\u003d\"Bedroom\" /\u0026gt;\n  \u0026lt;area shape\u003d\"rect\" coords\u003d\"0,0,21,21\"\n    href\u003d\"lounge.html\" aria-label\u003d\"Lounge\"/\u0026gt;\n\u0026lt;/map\u0026gt;\n\n\u0026lt;object\u0026gt;My welcoming Bar\u0026lt;/object\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/tutorials/images/decision-tree/\"\u003eW3C WAI\u0026nbsp;Web Accessibility Tutorials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\"\u003eProviding text alternatives for the area elements of image maps\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\"\u003eUsing alt attributes on images used as submit buttons\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\"\u003eUsing alt attributes on img elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H67.html\"\u003eUsing null alt text and no title attribute on img elements for images that AT\n  should ignore\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H2.html\"\u003eCombining adjacent image and text links for the same resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-text-equiv-all\"\u003eNon-text Content\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-navigation-mechanisms-refs\"\u003eLink Purpose (In Context)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/quickref/?versions\u003d2.0#qr-navigation-mechanisms-link\"\u003eLink Purpose (Link Only)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react",
      "wcag2-a"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6763",
    "name": "\"shouldComponentUpdate\" should not be defined when extending \"React.PureComponent\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, a \u003ccode\u003ePureComponent\u003c/code\u003e is a class component that is optimized for performance by implementing a shallow comparison of props and\nstate. It is a subclass of the regular React \u003ccode\u003eComponent\u003c/code\u003e class and provides a default implementation of the\n\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is responsible for determining whether a component should re-render or not. By default, it returns\ntrue and triggers a re-render every time the component receives new props or state. However, \u003ccode\u003ePureComponent\u003c/code\u003e overrides this method and\nperforms a shallow comparison of the current and next props and state. If there are no changes, it prevents unnecessary re-renders by returning\nfalse.\u003c/p\u003e\n\u003cp\u003eTherefore, defining a \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method while extending \u003ccode\u003ePureComponent\u003c/code\u003e is redundant and should be avoided. By\nnot defining \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, you allow \u003ccode\u003eReact.PureComponent\u003c/code\u003e to handle the optimization for you.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.PureComponent { // Noncompliant\n  shouldComponentUpdate() {\n    // does something\n  }\n\n  render() {\n    return \u0026lt;div\u0026gt;Hello!\u0026lt;/div\u0026gt;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should either remove the redundant method \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e or turn your component into a regular one by extending\n\u003ccode\u003eComponent\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  shouldComponentUpdate() {\n    // does something\n  }\n\n  render() {\n    return \u0026lt;div\u0026gt;Hello!\u0026lt;/div\u0026gt;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#shouldcomponentupdate\"\u003eshouldComponentUpdate\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/PureComponent\"\u003ePureComponent\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, a \u003ccode\u003ePureComponent\u003c/code\u003e is a class component that is optimized for performance by implementing a shallow comparison of props and\nstate. It is a subclass of the regular React \u003ccode\u003eComponent\u003c/code\u003e class and provides a default implementation of the\n\u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method is responsible for determining whether a component should re-render or not. By default, it returns\ntrue and triggers a re-render every time the component receives new props or state. However, \u003ccode\u003ePureComponent\u003c/code\u003e overrides this method and\nperforms a shallow comparison of the current and next props and state. If there are no changes, it prevents unnecessary re-renders by returning\nfalse.\u003c/p\u003e\n\u003cp\u003eTherefore, defining a \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e method while extending \u003ccode\u003ePureComponent\u003c/code\u003e is redundant and should be avoided. By\nnot defining \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e, you allow \u003ccode\u003eReact.PureComponent\u003c/code\u003e to handle the optimization for you.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.PureComponent { // Noncompliant\n  shouldComponentUpdate() {\n    // does something\n  }\n\n  render() {\n    return \u0026lt;div\u0026gt;Hello!\u0026lt;/div\u0026gt;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should either remove the redundant method \u003ccode\u003eshouldComponentUpdate\u003c/code\u003e or turn your component into a regular one by extending\n\u003ccode\u003eComponent\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  shouldComponentUpdate() {\n    // does something\n  }\n\n  render() {\n    return \u0026lt;div\u0026gt;Hello!\u0026lt;/div\u0026gt;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#shouldcomponentupdate\"\u003eshouldComponentUpdate\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/PureComponent\"\u003ePureComponent\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3498",
    "name": "Object literal shorthand syntax should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, object shorthand syntax is a more concise way to define properties on objects. It was introduced to make object literals more\nreadable and expressive.\u003c/p\u003e\n\u003cp\u003eIn the shorthand syntax, if a variable exists in the scope with the same name as the object key youâ€™re defining, you can omit the key-value pair\nand just write the variable name. The interpreter will automatically understand that the key and the variable are linked.\u003c/p\u003e\n\u003cp\u003eUsing object shorthand syntax can make your code cleaner and easier to read. It can also reduce the chance of making errors, as you donâ€™t have to\nrepeat yourself by writing the variable name twice.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d 1;\n\nlet myObj \u003d {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou can omit the property name and the colon if it is the same as the local variable name. Similarly, you can omit the \u003ccode\u003efunction\u003c/code\u003e\nkeyword for method definitions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 1;\n\nlet myObj \u003d {\n  a,\n  fun () {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\"\u003eObject initializer\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\"\u003eProperty definitions\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#method_definitions\"\u003eMethod definitions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, object shorthand syntax is a more concise way to define properties on objects. It was introduced to make object literals more\nreadable and expressive.\u003c/p\u003e\n\u003cp\u003eIn the shorthand syntax, if a variable exists in the scope with the same name as the object key youâ€™re defining, you can omit the key-value pair\nand just write the variable name. The interpreter will automatically understand that the key and the variable are linked.\u003c/p\u003e\n\u003cp\u003eUsing object shorthand syntax can make your code cleaner and easier to read. It can also reduce the chance of making errors, as you donâ€™t have to\nrepeat yourself by writing the variable name twice.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d 1;\n\nlet myObj \u003d {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou can omit the property name and the colon if it is the same as the local variable name. Similarly, you can omit the \u003ccode\u003efunction\u003c/code\u003e\nkeyword for method definitions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 1;\n\nlet myObj \u003d {\n  a,\n  fun () {\n    //...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\"\u003eObject initializer\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\"\u003eProperty definitions\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#method_definitions\"\u003eMethod definitions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1199",
    "name": "Nested code blocks should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested code blocks can be used to create a new scope: variables declared within that block cannot be accessed from the outside, and their lifetime\nend at the end of the block. However, this only happens when you use ES6 \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e keywords, a class declaration or a\nfunction declaration (in strict mode). Otherwise, the nested block is redundant and should be removed.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not apply to the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Block statements containing variable declarations using \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e keywords or class declarations are not redundant\n  as they create a new scope. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n{\n    let x \u003d 1;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The same applies to function declarations in \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict\n  mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n\"use strict\";\n{\n    function foo() {}\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule also does not apply to the blocks that are part of the \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Control_flow\"\u003econtrol flow\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (condition) {\n    doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe nested code blocks should be extracted into separate methods.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n{   // Noncompliant: redundant code block\n    var foo \u003d bar();\n}\n\nif (condition) {\n    doSomething();\n    {   // Noncompliant: redundant code block\n        doOtherStuff();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar foo \u003d bar();\n\nif (condition) {\n    doSomething();\n    doOtherStuff();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Single-responsibility_principle\"\u003eSingle Responsibility Principle\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"\u003eblock statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\"\u003eclass declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\"\u003efunction declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested code blocks can be used to create a new scope: variables declared within that block cannot be accessed from the outside, and their lifetime\nend at the end of the block. However, this only happens when you use ES6 \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e keywords, a class declaration or a\nfunction declaration (in strict mode). Otherwise, the nested block is redundant and should be removed.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not apply to the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Block statements containing variable declarations using \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e keywords or class declarations are not redundant\n  as they create a new scope. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n{\n    let x \u003d 1;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The same applies to function declarations in \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict\n  mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n\"use strict\";\n{\n    function foo() {}\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule also does not apply to the blocks that are part of the \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Control_flow\"\u003econtrol flow\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (condition) {\n    doSomething();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe nested code blocks should be extracted into separate methods.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n{   // Noncompliant: redundant code block\n    var foo \u003d bar();\n}\n\nif (condition) {\n    doSomething();\n    {   // Noncompliant: redundant code block\n        doOtherStuff();\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar foo \u003d bar();\n\nif (condition) {\n    doSomething();\n    doOtherStuff();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Single-responsibility_principle\"\u003eSingle Responsibility Principle\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"\u003eblock statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\"\u003eclass declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\"\u003efunction declaration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6647",
    "name": "Unnecessary constructors should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf the class declaration does not include a constructor, one is automatically created, so there is no need to provide an empty constructor, or one\nthat just delegates to the parent class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo {\n    constructor() {}  // Noncompliant, empty\n}\n\nclass Bar extends Foo {\n    constructor(params) { // Noncompliant: just delegates to the parent\n        super(params);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, you can safely remove the empty constructor without affecting the functionality.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Foo {}\n\nclass Bar extends Foo {}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf the class declaration does not include a constructor, one is automatically created, so there is no need to provide an empty constructor, or one\nthat just delegates to the parent class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo {\n    constructor() {}  // Noncompliant, empty\n}\n\nclass Bar extends Foo {\n    constructor(params) { // Noncompliant: just delegates to the parent\n        super(params);\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, you can safely remove the empty constructor without affecting the functionality.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Foo {}\n\nclass Bar extends Foo {}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3499",
    "name": "Shorthand object properties should be grouped at the beginning or end of an object declaration",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eGrouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eGrouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nlet obj1 \u003d {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6645",
    "name": "Variables should not be initialized to undefined",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInitializing a variable to \u003ccode\u003eundefined\u003c/code\u003e is unnecessary and should be avoided. A variable will automatically be set to\n\u003ccode\u003eundefined\u003c/code\u003e if you declare it without initialization, so the initialization code is redundant in this case.\u003c/p\u003e\n\u003cpre\u003e\nvar foo \u003d undefined; // Noncompliant: replace with var foo;\nlet bar \u003d undefined; // Noncompliant: replace with let foo;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003e\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003ehoisting\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInitializing a variable to \u003ccode\u003eundefined\u003c/code\u003e is unnecessary and should be avoided. A variable will automatically be set to\n\u003ccode\u003eundefined\u003c/code\u003e if you declare it without initialization, so the initialization code is redundant in this case.\u003c/p\u003e\n\u003cpre\u003e\nvar foo \u003d undefined; // Noncompliant: replace with var foo;\nlet bar \u003d undefined; // Noncompliant: replace with let foo;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003e\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003ehoisting\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6767",
    "name": "Unused React typed props should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLeaving unused props in a React component can make the code harder to understand and maintain. Other developers may wonder why certain props are\npassed to a component if they are not used. Unused props can also increase the size of the componentâ€™s memory footprint and impact performance. This\nis especially true if the unused props are large objects or arrays. Furthermore, if a prop is unused, it may indicate that the developer did not\ncomplete the implementation as he intended initially or made a mistake while writing the component.\u003c/p\u003e\n\u003cp\u003eTo avoid these issues, you should remove any unused props from React components. This helps keep the codebase clean, improves performance, and\nenhances code readability.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in PropTypes\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\nimport React from \u0027react\u0027;\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;\n    );\n  }\n}\n\nHello.propTypes \u003d {\n  name: PropTypes.string\n};\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\nimport React from \u0027react\u0027;\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      \u0026lt;h1\u0026gt;Hello {this.props.name}\u0026lt;/h1\u0026gt;\n    );\n  }\n}\n\nHello.propTypes \u003d {\n  name: PropTypes.string\n};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#static-proptypes\"\u003estatic propTypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/typescript#typescript-with-react-components\"\u003eTypeScript with React Components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLeaving unused props in a React component can make the code harder to understand and maintain. Other developers may wonder why certain props are\npassed to a component if they are not used. Unused props can also increase the size of the componentâ€™s memory footprint and impact performance. This\nis especially true if the unused props are large objects or arrays. Furthermore, if a prop is unused, it may indicate that the developer did not\ncomplete the implementation as he intended initially or made a mistake while writing the component.\u003c/p\u003e\n\u003cp\u003eTo avoid these issues, you should remove any unused props from React components. This helps keep the codebase clean, improves performance, and\nenhances code readability.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\nimport React from \u0027react\u0027;\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;\n    );\n  }\n}\n\nHello.propTypes \u003d {\n  name: PropTypes.string\n};\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport PropTypes from \u0027prop-types\u0027;\nimport React from \u0027react\u0027;\n\nclass Hello extends React.Component {\n  render() {\n    return (\n      \u0026lt;h1\u0026gt;Hello {this.props.name}\u0026lt;/h1\u0026gt;\n    );\n  }\n}\n\nHello.propTypes \u003d {\n  name: PropTypes.string\n};\n\u003c/pre\u003e",
        "context": {
          "key": "proptypes",
          "displayName": "PropTypes"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nimport React from \u0027react\u0027;\n\ntype Props \u003d {\n  name: string;\n}\n\nclass Hello extends React.Component\u0026lt;Props\u0026gt; {\n  render() {\n    return \u0026lt;div\u0026gt;Hello\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nimport React from \u0027react\u0027;\n\ntype Props \u003d {\n  name: string;\n};\n\nclass Hello extends React.Component\u0026lt;Props\u0026gt; {\n  render() {\n    return \u0026lt;div\u0026gt;Hello {this.props.name}\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e",
        "context": {
          "key": "typescript",
          "displayName": "TypeScript"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#static-proptypes\"\u003estatic propTypes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/typescript#typescript-with-react-components\"\u003eTypeScript with React Components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6766",
    "name": "JSX special characters should be escaped",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf JSX special characters (\u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e) appear unescaped in the element body, this may be either because you simply forgot to\nescape them or because there is a problem with the JSX tag or expression (for example, misplaced or duplicate closing \u003ccode\u003e\u0026gt;\u003c/code\u003e or\n\u003ccode\u003e}\u003c/code\u003e brackets).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;MyComponent\n  name\u003d\"abc\"\n  foo\u003d\"bar\"\u0026gt;\n  x\u003d\"y\"\u0026gt; {/* Noncompliant: closing \u0026gt; should only be on this line */}\n  Body Text\n\u0026lt;/MyComponent\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, check the structure of your JSX tag or expression - are the closing brackets correct and in the right place? If the special\ncharacter is there on purpose - you need to change it to the appropriate HTML entity.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e replace \u003ccode\u003e\u0026gt;\u003c/code\u003e with \u003ccode\u003e\u0026amp;gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e replace \u003ccode\u003e}\u003c/code\u003e with \u003ccode\u003e\u0026amp;#125;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;MyComponent\n  name\u003d\"abc\"\n  foo\u003d\"bar\"\n  x\u003d\"y\"\u0026gt;\n  Body Text\n\u0026lt;/MyComponent\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eThe characters \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e{\u003c/code\u003e should also be escaped, but they are not checked by this rule because it is a syntax error to\ninclude those tokens inside of a tag.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#writing-markup-with-jsx\"\u003eWriting markup with JSX\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\"\u003eEntity codes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf JSX special characters (\u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e) appear unescaped in the element body, this may be either because you simply forgot to\nescape them or because there is a problem with the JSX tag or expression (for example, misplaced or duplicate closing \u003ccode\u003e\u0026gt;\u003c/code\u003e or\n\u003ccode\u003e}\u003c/code\u003e brackets).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;MyComponent\n  name\u003d\"abc\"\n  foo\u003d\"bar\"\u0026gt;\n  x\u003d\"y\"\u0026gt; {/* Noncompliant: closing \u0026gt; should only be on this line */}\n  Body Text\n\u0026lt;/MyComponent\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, check the structure of your JSX tag or expression - are the closing brackets correct and in the right place? If the special\ncharacter is there on purpose - you need to change it to the appropriate HTML entity.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e replace \u003ccode\u003e\u0026gt;\u003c/code\u003e with \u003ccode\u003e\u0026amp;gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e replace \u003ccode\u003e}\u003c/code\u003e with \u003ccode\u003e\u0026amp;#125;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;MyComponent\n  name\u003d\"abc\"\n  foo\u003d\"bar\"\n  x\u003d\"y\"\u0026gt;\n  Body Text\n\u0026lt;/MyComponent\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eThe characters \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e{\u003c/code\u003e should also be escaped, but they are not checked by this rule because it is a syntax error to\ninclude those tokens inside of a tag.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn#writing-markup-with-jsx\"\u003eWriting markup with JSX\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\"\u003eEntity codes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6790",
    "name": "String references should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact Refs provide a way to access DOM nodes or React elements created in the render method.\u003c/p\u003e\n\u003cp\u003eOlder React versions allowed the ref attribute to be a string, like \u003ccode\u003e\"textInput\"\u003c/code\u003e, later accessible as \u003ccode\u003ethis.refs.textInput\u003c/code\u003e.\nThis is considered legacy code due to multiple reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e String \u003ccode\u003erefs\u003c/code\u003e make React slower as they force React to keep track of what component is currently executing. \u003c/li\u003e\n  \u003cli\u003e String \u003ccode\u003erefs\u003c/code\u003e are not composable: if a library puts a ref on the passed child, the user canâ€™t put another ref on it. \u003c/li\u003e\n  \u003cli\u003e The owner of a string \u003ccode\u003eref\u003c/code\u003e is determined by the currently executing component. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Hello \u003d createReactClass({\n  componentDidMount() {\n    const component \u003d this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return \u0026lt;div ref\u003d\"hello\"\u0026gt;Hello, world.\u0026lt;/div\u0026gt;;\n  }\n});\n\u003c/pre\u003e\n\u003cp\u003eInstead, reference callbacks should be used. These do not have the limitations mentioned above. When the DOM node is added to the screen, React\nwill call the \u003ccode\u003eref\u003c/code\u003e callback with the DOM node as the argument. When that DOM node is removed, React will call your \u003ccode\u003eref\u003c/code\u003e\ncallback with \u003ccode\u003enull\u003c/code\u003e. One should return \u003ccode\u003eundefined\u003c/code\u003e from the \u003ccode\u003eref\u003c/code\u003e callback.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst Hello \u003d createReactClass({\n  componentDidMount() {\n    const component \u003d this.hello;\n    // ...\n  },\n  render() {\n    return \u0026lt;div ref\u003d{(c) \u003d\u0026gt; { this.hello \u003d c; }}\u0026gt;Hello, world.\u0026lt;/div\u0026gt;;\n  }\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#ref-callback\"\u003e\u003ccode\u003eref\u003c/code\u003e callback function\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/refs-and-the-dom.html\"\u003eRefs and the DOM\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/manipulating-the-dom-with-refs\"\u003eManipulating the DOM with Refs\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useRef\"\u003e\u003ccode\u003euseRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/createRef#createref\"\u003e\u003ccode\u003ecreateRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact Refs provide a way to access DOM nodes or React elements created in the render method.\u003c/p\u003e\n\u003cp\u003eOlder React versions allowed the ref attribute to be a string, like \u003ccode\u003e\"textInput\"\u003c/code\u003e, later accessible as \u003ccode\u003ethis.refs.textInput\u003c/code\u003e.\nThis is considered legacy code due to multiple reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e String \u003ccode\u003erefs\u003c/code\u003e make React slower as they force React to keep track of what component is currently executing. \u003c/li\u003e\n  \u003cli\u003e String \u003ccode\u003erefs\u003c/code\u003e are not composable: if a library puts a ref on the passed child, the user canâ€™t put another ref on it. \u003c/li\u003e\n  \u003cli\u003e The owner of a string \u003ccode\u003eref\u003c/code\u003e is determined by the currently executing component. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Hello \u003d createReactClass({\n  componentDidMount() {\n    const component \u003d this.refs.hello; // Noncompliant\n    // ...\n  },\n  render() {\n    return \u0026lt;div ref\u003d\"hello\"\u0026gt;Hello, world.\u0026lt;/div\u0026gt;;\n  }\n});\n\u003c/pre\u003e\n\u003cp\u003eInstead, reference callbacks should be used. These do not have the limitations mentioned above. When the DOM node is added to the screen, React\nwill call the \u003ccode\u003eref\u003c/code\u003e callback with the DOM node as the argument. When that DOM node is removed, React will call your \u003ccode\u003eref\u003c/code\u003e\ncallback with \u003ccode\u003enull\u003c/code\u003e. One should return \u003ccode\u003eundefined\u003c/code\u003e from the \u003ccode\u003eref\u003c/code\u003e callback.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst Hello \u003d createReactClass({\n  componentDidMount() {\n    const component \u003d this.hello;\n    // ...\n  },\n  render() {\n    return \u0026lt;div ref\u003d{(c) \u003d\u0026gt; { this.hello \u003d c; }}\u0026gt;Hello, world.\u0026lt;/div\u0026gt;;\n  }\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#ref-callback\"\u003e\u003ccode\u003eref\u003c/code\u003e callback function\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/docs/refs-and-the-dom.html\"\u003eRefs and the DOM\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/manipulating-the-dom-with-refs\"\u003eManipulating the DOM with Refs\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useRef\"\u003e\u003ccode\u003euseRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/createRef#createref\"\u003e\u003ccode\u003ecreateRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S117",
    "name": "Variable, property and parameter names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eVariables, properties, and parameters should be named consistently to communicate intent and improve maintainability. Rename your variable,\nproperty, or parameter to follow your projectâ€™s naming convention to address this issue.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.\u003cbr\u003e Variables,\nproperties, and parameters hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily recognizable\npattern.\u003cbr\u003e Adhering to a consistent naming convention helps to make the code more readable and understandable, which makes it easier to maintain and\ndebug. It also ensures consistency in the code, especially when multiple developers are working on the same project.\u003c/p\u003e\n\u003cp\u003eThis rule checks that variable, property, and parameter names match a provided regular expression.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInconsistent naming of variables, properties, and parameters can lead to several issues in your code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Reduced Readability: inconsistent variable, property, and parameter names make the code harder to read and understand; consequently, it is more\n  difficult to identify the purpose of each variable, spot errors, or comprehend the logic. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Identifying Variables: variables, properties, and parameters that donâ€™t adhere to a standard naming convention are challenging to\n  identify; thus, the coding process slows down, especially when dealing with a large codebase. \u003c/li\u003e\n  \u003cli\u003e Increased Risk of Errors: inconsistent or unclear variable, property, and parameter names lead to misunderstandings about what the variable\n  represents. This ambiguity leads to incorrect assumptions and, consequently, bugs in the code. \u003c/li\u003e\n  \u003cli\u003e Collaboration Difficulties: in a team setting, inconsistent naming conventions lead to confusion and miscommunication among team members. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Code Maintenance: inconsistent naming leads to an inconsistent codebase. The code is difficult to understand, and making changes\n  feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, not adhering to a naming convention for variables, properties, and parameters can lead to confusion, errors, and inefficiencies, making\nthe code harder to read, understand, and maintain.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eFirst, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo_bar \u003d 1; // Noncompliant\nconst baz_ \u003d 2; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst fooBar \u003d 1;\nconst _baz \u003d 2;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript#variable_names\"\u003eGuidelines for\n  writing JavaScript code: Variable names\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\"\u003eNaming Convention (programming)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S100} - Function and method names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S101} - Class names should comply with a naming convention \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eVariables, properties, and parameters should be named consistently to communicate intent and improve maintainability. Rename your variable,\nproperty, or parameter to follow your projectâ€™s naming convention to address this issue.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.\u003cbr\u003e Variables,\nproperties, and parameters hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily recognizable\npattern.\u003cbr\u003e Adhering to a consistent naming convention helps to make the code more readable and understandable, which makes it easier to maintain and\ndebug. It also ensures consistency in the code, especially when multiple developers are working on the same project.\u003c/p\u003e\n\u003cp\u003eThis rule checks that variable, property, and parameter names match a provided regular expression.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInconsistent naming of variables, properties, and parameters can lead to several issues in your code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Reduced Readability: inconsistent variable, property, and parameter names make the code harder to read and understand; consequently, it is more\n  difficult to identify the purpose of each variable, spot errors, or comprehend the logic. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Identifying Variables: variables, properties, and parameters that donâ€™t adhere to a standard naming convention are challenging to\n  identify; thus, the coding process slows down, especially when dealing with a large codebase. \u003c/li\u003e\n  \u003cli\u003e Increased Risk of Errors: inconsistent or unclear variable, property, and parameter names lead to misunderstandings about what the variable\n  represents. This ambiguity leads to incorrect assumptions and, consequently, bugs in the code. \u003c/li\u003e\n  \u003cli\u003e Collaboration Difficulties: in a team setting, inconsistent naming conventions lead to confusion and miscommunication among team members. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Code Maintenance: inconsistent naming leads to an inconsistent codebase. The code is difficult to understand, and making changes\n  feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, not adhering to a naming convention for variables, properties, and parameters can lead to confusion, errors, and inefficiencies, making\nthe code harder to read, understand, and maintain.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eFirst, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo_bar \u003d 1; // Noncompliant\nconst baz_ \u003d 2; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst fooBar \u003d 1;\nconst _baz \u003d 2;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Writing_style_guide/Code_style_guide/JavaScript#variable_names\"\u003eGuidelines for\n  writing JavaScript code: Variable names\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\"\u003eNaming Convention (programming)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S100} - Function and method names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S101} - Class names should comply with a naming convention \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the names against.",
        "defaultValue": "^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6551",
    "name": "Objects and classes converted or coerced to strings should define a \"toString()\" method",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eWhen calling \u003ccode\u003etoString()\u003c/code\u003e or coercing into a string an object that doesnâ€™t implement its own \u003ccode\u003etoString\u003c/code\u003e method, it returns\n\u003ccode\u003e[object Object]\u003c/code\u003e which is often not what was intended.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using an object in a string context, a developer wants to get the string representation of the state of an object, so obtaining \u003ccode\u003e[object\nObject]\u003c/code\u003e is probably not the intended behaviour and might even denote a bug.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eYou can simply define a \u003ccode\u003etoString()\u003c/code\u003e method for the object or class.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo {};\nconst foo \u003d new Foo();\n\nfoo + \u0027\u0027; // Noncompliant - evaluates to \"[object Object]\"\n`Foo: ${foo}`; // Noncompliant - evaluates to \"Foo: [object Object]\"\nfoo.toString(); // Noncompliant - evaluates to \"[object Object]\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Foo {\n  toString() {\n    return \u0027Foo\u0027;\n  }\n}\nconst foo \u003d new Foo();\n\nfoo + \u0027\u0027;\n`Foo: ${foo}`;\nfoo.toString();\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo \u003d {};\nfoo + \u0027\u0027; // Noncompliant - evaluates to \"[object Object]\"\n`Foo: ${foo}`; // Noncompliant - evaluates to \"Foo: [object Object]\"\nfoo.toString(); // Noncompliant - evaluates to \"[object Object]\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst foo \u003d {\n  toString: () \u003d\u0026gt; {\n    return \u0027Foo\u0027;\n  }\n}\nfoo + \u0027\u0027;\n`Foo: ${foo}`;\nfoo.toString();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"\u003e\u003ccode\u003eObject.prototype.toString()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eWhen calling \u003ccode\u003etoString()\u003c/code\u003e or coercing into a string an object that doesnâ€™t implement its own \u003ccode\u003etoString\u003c/code\u003e method, it returns\n\u003ccode\u003e[object Object]\u003c/code\u003e which is often not what was intended.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using an object in a string context, a developer wants to get the string representation of the state of an object, so obtaining \u003ccode\u003e[object\nObject]\u003c/code\u003e is probably not the intended behaviour and might even denote a bug.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eYou can simply define a \u003ccode\u003etoString()\u003c/code\u003e method for the object or class.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Foo {};\nconst foo \u003d new Foo();\n\nfoo + \u0027\u0027; // Noncompliant - evaluates to \"[object Object]\"\n`Foo: ${foo}`; // Noncompliant - evaluates to \"Foo: [object Object]\"\nfoo.toString(); // Noncompliant - evaluates to \"[object Object]\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Foo {\n  toString() {\n    return \u0027Foo\u0027;\n  }\n}\nconst foo \u003d new Foo();\n\nfoo + \u0027\u0027;\n`Foo: ${foo}`;\nfoo.toString();\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo \u003d {};\nfoo + \u0027\u0027; // Noncompliant - evaluates to \"[object Object]\"\n`Foo: ${foo}`; // Noncompliant - evaluates to \"Foo: [object Object]\"\nfoo.toString(); // Noncompliant - evaluates to \"[object Object]\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst foo \u003d {\n  toString: () \u003d\u0026gt; {\n    return \u0027Foo\u0027;\n  }\n}\nfoo + \u0027\u0027;\n`Foo: ${foo}`;\nfoo.toString();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"\u003e\u003ccode\u003eObject.prototype.toString()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "object",
      "string",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6793",
    "name": "ARIA properties in DOM elements should have valid values",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that the values of ARIA attributes \"aria-*\" in DOM elements are valid.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eCheck that each element with a defined ARIA attribute has a valid value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;span aria-hidden\u003d\"ok\"\u0026gt;foo\u0026lt;/span\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code use a valid value for the aria-* attribute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;span aria-hidden\u003d\"true\"\u0026gt;foo\u0026lt;/span\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that the values of ARIA attributes \"aria-*\" in DOM elements are valid.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck that each element with a defined ARIA attribute has a valid value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;span aria-hidden\u003d\"ok\"\u0026gt;foo\u0026lt;/span\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code use a valid value for the aria-* attribute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;span aria-hidden\u003d\"true\"\u0026gt;foo\u0026lt;/span\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S113",
    "name": "Files should end with a newline",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSome tools work better when files end with a newline.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test {\n+}\n\\ No newline at end of file\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSome tools work better when files end with a newline.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test {\n+}\n\\ No newline at end of file\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:MissingNewlineAtEndOfFile"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6791",
    "name": "React legacy lifecycle methods should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact works in two phases: render and commit.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The render phase determines what changes need to be made to e.g. the DOM. During this phase, React calls render and then compares the result to\n  the previous render. \u003c/li\u003e\n  \u003cli\u003e The commit phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.)\n  React also calls lifecycles like \u003ccode\u003ecomponentDidMount\u003c/code\u003e and \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e during this phase. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRender phase lifecycles include among others, the following lifecycle methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillMount\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillMount\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillReceiveProps\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillUpdate\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillUpdate\u003c/code\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese are considered unsafe and also happen to be the lifecycles that cause the most confusion within the React community and tend to encourage\nunsafe coding practices.\u003c/p\u003e\n\u003cpre\u003e\nclass Foo extends React.Component {\n  UNSAFE_componentWillMount() {}         // Noncompliant\n  UNSAFE_componentWillReceiveProps() {}  // Noncompliant\n  UNSAFE_componentWillUpdate() {}        // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of \u003ccode\u003ecomponentWillUpdate\u003c/code\u003e, use \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e together with \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. The\n\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e lifecycle is called right before mutations are made. The return value for this lifecycle will be passed as the\nthird parameter to \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInstead of \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e, Use \u003ccode\u003egetDerivedStateFromProps\u003c/code\u003e together with \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. The\n\u003ccode\u003egetDerivedStateFromProps\u003c/code\u003e lifecycle is invoked after a component is instantiated as well as before it is re-rendered. It can return an\nobject to update state, or null to indicate that the new props do not require any state updates.\u003c/p\u003e\n\u003cp\u003eAs for \u003ccode\u003ecomponentWillMount\u003c/code\u003e, React will call it immediately after the constructor. It only exists for historical reasons and should not\nbe used. Instead, use one of the alternatives:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e To initialize state, declare \u003ccode\u003estate\u003c/code\u003e as a class field or set \u003ccode\u003ethis.state\u003c/code\u003e inside the \u003ccode\u003econstructor\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If you need to run a side effect or set up a subscription, move that logic to \u003ccode\u003ecomponentDidMount\u003c/code\u003e instead. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass myComponent extends React.Component {\n  constructor(props) {\n      super(props);\n  }\n\n  componentWillMount() { // Noncompliant: \"componentWillMount\" is deprecated\n      if (localStorage.getItem(\"token\")) {\n          this.setState({logged_in: true});\n      }\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass myComponent extends React.Component {\n  constructor(props) {\n      super(props);\n\n      if (localStorage.getItem(\"token\")) {\n          this.setState({logged_in: true});\n      }\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillmount\"\u003e\u003ccode\u003eUNSAFE_componentWillMount\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillreceiveprops\"\u003e\u003ccode\u003eUNSAFE_componentWillReceiveProps\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillupdate\"\u003e\u003ccode\u003eUNSAFE_componentWillUpdate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles\"\u003eMigrating from Legacy\n  Lifecycles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact works in two phases: render and commit.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The render phase determines what changes need to be made to e.g. the DOM. During this phase, React calls render and then compares the result to\n  the previous render. \u003c/li\u003e\n  \u003cli\u003e The commit phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.)\n  React also calls lifecycles like \u003ccode\u003ecomponentDidMount\u003c/code\u003e and \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e during this phase. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRender phase lifecycles include among others, the following lifecycle methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillMount\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillMount\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillReceiveProps\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecomponentWillUpdate\u003c/code\u003e (or its alias \u003ccode\u003eUNSAFE_componentWillUpdate\u003c/code\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese are considered unsafe and also happen to be the lifecycles that cause the most confusion within the React community and tend to encourage\nunsafe coding practices.\u003c/p\u003e\n\u003cpre\u003e\nclass Foo extends React.Component {\n  UNSAFE_componentWillMount() {}         // Noncompliant\n  UNSAFE_componentWillReceiveProps() {}  // Noncompliant\n  UNSAFE_componentWillUpdate() {}        // Noncompliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of \u003ccode\u003ecomponentWillUpdate\u003c/code\u003e, use \u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e together with \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. The\n\u003ccode\u003egetSnapshotBeforeUpdate\u003c/code\u003e lifecycle is called right before mutations are made. The return value for this lifecycle will be passed as the\nthird parameter to \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInstead of \u003ccode\u003ecomponentWillReceiveProps\u003c/code\u003e, Use \u003ccode\u003egetDerivedStateFromProps\u003c/code\u003e together with \u003ccode\u003ecomponentDidUpdate\u003c/code\u003e. The\n\u003ccode\u003egetDerivedStateFromProps\u003c/code\u003e lifecycle is invoked after a component is instantiated as well as before it is re-rendered. It can return an\nobject to update state, or null to indicate that the new props do not require any state updates.\u003c/p\u003e\n\u003cp\u003eAs for \u003ccode\u003ecomponentWillMount\u003c/code\u003e, React will call it immediately after the constructor. It only exists for historical reasons and should not\nbe used. Instead, use one of the alternatives:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e To initialize state, declare \u003ccode\u003estate\u003c/code\u003e as a class field or set \u003ccode\u003ethis.state\u003c/code\u003e inside the \u003ccode\u003econstructor\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e If you need to run a side effect or set up a subscription, move that logic to \u003ccode\u003ecomponentDidMount\u003c/code\u003e instead. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nclass myComponent extends React.Component {\n  constructor(props) {\n      super(props);\n  }\n\n  componentWillMount() { // Noncompliant: \"componentWillMount\" is deprecated\n      if (localStorage.getItem(\"token\")) {\n          this.setState({logged_in: true});\n      }\n  }\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nclass myComponent extends React.Component {\n  constructor(props) {\n      super(props);\n\n      if (localStorage.getItem(\"token\")) {\n          this.setState({logged_in: true});\n      }\n  }\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillmount\"\u003e\u003ccode\u003eUNSAFE_componentWillMount\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillreceiveprops\"\u003e\u003ccode\u003eUNSAFE_componentWillReceiveProps\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://react.dev/reference/react/Component#unsafe_componentwillupdate\"\u003e\u003ccode\u003eUNSAFE_componentWillUpdate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca\n  href\u003d\"https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles\"\u003eMigrating from Legacy\n  Lifecycles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6671",
    "name": "Literals should not be used for promise rejection",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of literals (primitive values such as strings, numbers, booleans, etc.) for promise rejection is generally discouraged. While it is\nsyntactically valid to provide literals as a rejected promise value, it is considered best practice to use instances of the Error class or its\nsubclasses instead.\u003c/p\u003e\n\u003cp\u003eUsing an instance of the Error class allows you to provide more meaningful information about the error. The Error class and its subclasses provide\nproperties such as message and stack that can be used to convey useful details about the error, such as a description of the problem, the context in\nwhich it occurred, or a stack trace for debugging.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew Promise(function(resolve, reject) {\n  reject(); // Noncompliant: use Error object to provide rejection reason\n});\n\nnew Promise(function(resolve, reject) {\n  reject(\u0027Something went wrong\u0027); // Noncompliant: use Error object instead of literal\n});\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code provide an instanse of the Error class to the promise reject function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nnew Promise(function(resolve, reject) {\n  reject(new Error(\u0027Network timeout\u0027));\n});\n\nnew Promise(function(resolve, reject) {\n  reject(new Error(\u0027Something went wrong\u0027));\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S3696} - Literals should not be thrown \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of literals (primitive values such as strings, numbers, booleans, etc.) for promise rejection is generally discouraged. While it is\nsyntactically valid to provide literals as a rejected promise value, it is considered best practice to use instances of the Error class or its\nsubclasses instead.\u003c/p\u003e\n\u003cp\u003eUsing an instance of the Error class allows you to provide more meaningful information about the error. The Error class and its subclasses provide\nproperties such as message and stack that can be used to convey useful details about the error, such as a description of the problem, the context in\nwhich it occurred, or a stack trace for debugging.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew Promise(function(resolve, reject) {\n  reject(); // Noncompliant: use Error object to provide rejection reason\n});\n\nnew Promise(function(resolve, reject) {\n  reject(\u0027Something went wrong\u0027); // Noncompliant: use Error object instead of literal\n});\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code provide an instanse of the Error class to the promise reject function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nnew Promise(function(resolve, reject) {\n  reject(new Error(\u0027Network timeout\u0027));\n});\n\nnew Promise(function(resolve, reject) {\n  reject(new Error(\u0027Something went wrong\u0027));\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S3696} - Literals should not be thrown \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6319",
    "name": "Using unencrypted SageMaker notebook instances is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon SageMaker is a managed machine learning service in a hosted production-ready environment. To train machine learning models, SageMaker\ninstances can process potentially sensitive data, such as personal information that should not be stored unencrypted. In the event that adversaries\nphysically access the storage media, they cannot decrypt encrypted data.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The instance contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sagemaker.CfnNotebookInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sagemaker.CfnNotebookInstance\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnNotebookInstance } from \u0027aws-cdk-lib/aws-sagemaker\u0027;\n\nnew CfnNotebookInstance(this, \u0027example\u0027, {\n      instanceType: \u0027instanceType\u0027,\n      roleArn: \u0027roleArn\u0027\n}); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to encrypt SageMaker notebook instances that contain sensitive information. Encryption and decryption are handled transparently by\nSageMaker, so no further modifications to the application are necessary.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sagemaker.CfnNotebookInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws-sagemaker.CfnNotebookInstance\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnNotebookInstance } from \u0027aws-cdk-lib/aws-sagemaker\u0027;\n\nconst encryptionKey \u003d new Key(this, \u0027example\u0027, {\n    enableKeyRotation: true,\n});\nnew CfnNotebookInstance(this, \u0027example\u0027, {\n    instanceType: \u0027instanceType\u0027,\n    roleArn: \u0027roleArn\u0027,\n    kmsKeyId: encryptionKey.keyId\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\"\u003eProtect Data at Rest Using Encryption\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6676",
    "name": "Calls to \".call()\" and \".apply()\" methods should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf the function call can be written in a normal way, then calling that function with \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods is\nredundant and can be removed without affecting the behavior of the code.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e methods are traditionally used to explicitely set the value of \u003ccode\u003ethis\u003c/code\u003e keyword when\nexecuting a function or an object method. When calling a method of an object the value of \u003ccode\u003ethis\u003c/code\u003e by default will be the reference to that\nobject. But if you call a function or a method using \u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e you can set the value of \u003ccode\u003ethis\u003c/code\u003e to any\nobject, whatever you put into the first argument.\u003c/p\u003e\n\u003cpre\u003e\nlet obj \u003d {\n    checkThis() {\n        this \u003d\u003d\u003d obj; // true, if called the normal way: obj.checkThis()\n    }\n};\n\nlet otherObject \u003d {};\n\nobj.checkThis.call(otherObject); // this \u003d\u003d\u003d otherObject, if called this way\n\u003c/pre\u003e\n\u003cp\u003eThere is also a special case when your code is not in \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict mode\u003c/a\u003e and the first argument to the\n\u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e methods is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. In this case the value of \u003ccode\u003ethis\u003c/code\u003e is\nsubstituted with the \u003ccode\u003eglobalThis\u003c/code\u003e object, usually \u003ccode\u003ewindow\u003c/code\u003e when in browser context, and it make such call equivalent to just\ncalling the function the normal way.\u003c/p\u003e\n\u003cp\u003eSo if you are calling a function using \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods and the first argument is \u003ccode\u003enull\u003c/code\u003e or\n\u003ccode\u003eundefined\u003c/code\u003e, or you are calling an object method and the first argument is the object itself, then \u003ccode\u003e.call()\u003c/code\u003e or\n\u003ccode\u003e.apply()\u003c/code\u003e methods become redundant, and should be removed to make the code more simple and easier to understand.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfoo.call(null, 1, 2); // Noncompliant: .call() is redundant\nobj.foo.call(obj, arg1, arg2); // Noncompliant: .call() is redundant\nbar.apply(undefined, [x, y, z]); // Noncompliant: .apply() is redundant\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code remove redundant \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo(1, 2);\nobj.foo(arg1, arg2);\nbar(x, y, z);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"\u003eFunction.prototype.call()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003eFunction.prototype.apply()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003ethis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003eglobalThis\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf the function call can be written in a normal way, then calling that function with \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods is\nredundant and can be removed without affecting the behavior of the code.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e methods are traditionally used to explicitely set the value of \u003ccode\u003ethis\u003c/code\u003e keyword when\nexecuting a function or an object method. When calling a method of an object the value of \u003ccode\u003ethis\u003c/code\u003e by default will be the reference to that\nobject. But if you call a function or a method using \u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e you can set the value of \u003ccode\u003ethis\u003c/code\u003e to any\nobject, whatever you put into the first argument.\u003c/p\u003e\n\u003cpre\u003e\nlet obj \u003d {\n    checkThis() {\n        this \u003d\u003d\u003d obj; // true, if called the normal way: obj.checkThis()\n    }\n};\n\nlet otherObject \u003d {};\n\nobj.checkThis.call(otherObject); // this \u003d\u003d\u003d otherObject, if called this way\n\u003c/pre\u003e\n\u003cp\u003eThere is also a special case when your code is not in \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003estrict mode\u003c/a\u003e and the first argument to the\n\u003ccode\u003e.call()\u003c/code\u003e and \u003ccode\u003e.apply()\u003c/code\u003e methods is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. In this case the value of \u003ccode\u003ethis\u003c/code\u003e is\nsubstituted with the \u003ccode\u003eglobalThis\u003c/code\u003e object, usually \u003ccode\u003ewindow\u003c/code\u003e when in browser context, and it make such call equivalent to just\ncalling the function the normal way.\u003c/p\u003e\n\u003cp\u003eSo if you are calling a function using \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods and the first argument is \u003ccode\u003enull\u003c/code\u003e or\n\u003ccode\u003eundefined\u003c/code\u003e, or you are calling an object method and the first argument is the object itself, then \u003ccode\u003e.call()\u003c/code\u003e or\n\u003ccode\u003e.apply()\u003c/code\u003e methods become redundant, and should be removed to make the code more simple and easier to understand.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfoo.call(null, 1, 2); // Noncompliant: .call() is redundant\nobj.foo.call(obj, arg1, arg2); // Noncompliant: .call() is redundant\nbar.apply(undefined, [x, y, z]); // Noncompliant: .apply() is redundant\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code remove redundant \u003ccode\u003e.call()\u003c/code\u003e or \u003ccode\u003e.apply()\u003c/code\u003e methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo(1, 2);\nobj.foo(arg1, arg2);\nbar(x, y, z);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"\u003eFunction.prototype.call()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003eFunction.prototype.apply()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"\u003ethis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003eglobalThis\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S122",
    "name": "Statements should be on separate lines",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nfoo(); bar(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nfoo();\nbar();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nfoo(); bar(); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nfoo();\nbar();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:OneStatementPerLine"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2077",
    "name": "Formatting SQL queries is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesnâ€™t detect SQL injections (unlike rule {rule:javascript:S3649}), the goal is only to highlight complex/formatted\nqueries.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis ruleâ€™s current implementation does not follow variables. It will only detect SQL queries which are formatted directly in the function\ncall.\u003c/p\u003e\n\u003cpre\u003e\nconst sql \u003d \u0027SELECT * FROM users WHERE id \u003d \u0027 + userinput;\nmycon.query(sql, (err, res) \u003d\u0026gt; {}); // Sensitive but no issue is raised.\n\u003c/pre\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Some parts of the query come from untrusted values (like user inputs). \u003c/li\u003e\n  \u003cli\u003e The query is repeated/duplicated in other parts of the code. \u003c/li\u003e\n  \u003cli\u003e The application must support different types of relational databases. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d MySQL \u003d\u003d\u003d\nconst mysql \u003d require(\u0027mysql\u0027);\nconst mycon \u003d mysql.createConnection({ host: host, user: user, password: pass, database: db });\nmycon.connect(function(err) {\n  mycon.query(\u0027SELECT * FROM users WHERE id \u003d \u0027 + userinput, (err, res) \u003d\u0026gt; {}); // Sensitive\n});\n\n// \u003d\u003d\u003d PostgreSQL \u003d\u003d\u003d\nconst pg \u003d require(\u0027pg\u0027);\nconst pgcon \u003d new pg.Client({ host: host, user: user, password: pass, database: db });\npgcon.connect();\npgcon.query(\u0027SELECT * FROM users WHERE id \u003d \u0027 + userinput, (err, res) \u003d\u0026gt; {}); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\"\u003eparameterized queries, prepared\n  statements, or stored procedures\u003c/a\u003e and bind variables to SQL query parameters. \u003c/li\u003e\n  \u003cli\u003e Consider using ORM frameworks if there is a need to have an abstract layer to access data. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d MySQL \u003d\u003d\u003d\nconst mysql \u003d require(\u0027mysql\u0027);\nconst mycon \u003d mysql.createConnection({ host: host, user: user, password: pass, database: db });\nmycon.connect(function(err) {\n  mycon.query(\u0027SELECT name FROM users WHERE id \u003d ?\u0027, [userinput], (err, res) \u003d\u0026gt; {});\n});\n\n// \u003d\u003d\u003d PostgreSQL \u003d\u003d\u003d\nconst pg \u003d require(\u0027pg\u0027);\nconst pgcon \u003d new pg.Client({ host: host, user: user, password: pass, database: db });\npgcon.connect();\npgcon.query(\u0027SELECT name FROM users WHERE id \u003d $1\u0027, [userinput], (err, res) \u003d\u0026gt; {});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/20\"\u003eMITRE, CWE-20\u003c/a\u003e - Improper Input Validation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89\"\u003eMITRE, CWE-89\u003c/a\u003e - Improper Neutralization of Special Elements used in an SQL Command\n  \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rules \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\"\u003ePotential SQL/JPQL Injection\n  (JPA)\u003c/a\u003e, \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\"\u003ePotential SQL/JDOQL Injection (JDO)\u003c/a\u003e, \u003ca\n  href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\"\u003ePotential SQL/HQL Injection (Hibernate)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "cwe",
      "sql"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S6435",
    "name": "React \"render\" functions should return a value",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, the \u003ccode\u003erender\u003c/code\u003e function is a required method in a class component that defines what will be rendered to the user interface (UI).\nIt is responsible for returning a value, typically a JSX (JavaScript XML) expression, that describes the structure and appearance of the componentâ€™s\nUI.\u003c/p\u003e\n\u003cp\u003eWhen writing the \u003ccode\u003erender\u003c/code\u003e function in a component, it is easy to forget to return the JSX content, which means the component will render\nnothing. Thus having a \u003ccode\u003erender\u003c/code\u003e function without a single \u003ccode\u003ereturn\u003c/code\u003e statement is usually a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    \u0026lt;div\u0026gt;Contents\u0026lt;/div\u0026gt;; // Noncompliant: The render function returns nothing\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eMake sure that the \u003ccode\u003erender\u003c/code\u003e function returns the JSX expression describing the structure and appearance of the component.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Contents\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eIf itâ€™s required that the component renders nothing, the \u003ccode\u003erender\u003c/code\u003e function should explicitly return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    return null;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component\"\u003eComponent\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#render\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, the \u003ccode\u003erender\u003c/code\u003e function is a required method in a class component that defines what will be rendered to the user interface (UI).\nIt is responsible for returning a value, typically a JSX (JavaScript XML) expression, that describes the structure and appearance of the componentâ€™s\nUI.\u003c/p\u003e\n\u003cp\u003eWhen writing the \u003ccode\u003erender\u003c/code\u003e function in a component, it is easy to forget to return the JSX content, which means the component will render\nnothing. Thus having a \u003ccode\u003erender\u003c/code\u003e function without a single \u003ccode\u003ereturn\u003c/code\u003e statement is usually a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    \u0026lt;div\u0026gt;Contents\u0026lt;/div\u0026gt;; // Noncompliant: The render function returns nothing\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eMake sure that the \u003ccode\u003erender\u003c/code\u003e function returns the JSX expression describing the structure and appearance of the component.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    return \u0026lt;div\u0026gt;Contents\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eIf itâ€™s required that the component renders nothing, the \u003ccode\u003erender\u003c/code\u003e function should explicitly return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nconst React \u003d require(\u0027react\u0027);\nclass MyComponent extends React.Component {\n  render() {\n    return null;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component\"\u003eComponent\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#render\"\u003e\u003ccode\u003erender()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S121",
    "name": "Control structures should use curly braces",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eControl structures are code statements that impact the programâ€™s control flow (e.g., if statements, for loops, etc.)\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003cp\u003eIn the following example, the two calls seem to be attached to the \u003ccode\u003eif\u003c/code\u003e statement, but only the first one is, and\n\u003ccode\u003echeckSomething\u003c/code\u003e will always be executed:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();\n\u003c/pre\u003e\n\u003cp\u003eAdding curly braces improves the code readability and its robustness:\u003c/p\u003e\n\u003cpre\u003e\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule raises an issue when a control structure has no curly braces.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eControl structures are code statements that impact the programâ€™s control flow (e.g., if statements, for loops, etc.)\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003cp\u003eIn the following example, the two calls seem to be attached to the \u003ccode\u003eif\u003c/code\u003e statement, but only the first one is, and\n\u003ccode\u003echeckSomething\u003c/code\u003e will always be executed:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();\n\u003c/pre\u003e\n\u003cp\u003eAdding curly braces improves the code readability and its robustness:\u003c/p\u003e\n\u003cpre\u003e\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule raises an issue when a control structure has no curly braces.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:CurlyBraces"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6317",
    "name": "AWS IAM policies should limit the scope of permissions given",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eWithin IAM, identity-based policies grant permissions to users, groups, or roles, and enable specific actions to be performed on designated\nresources. When an identity policy inadvertently grants more privileges than intended, certain users or roles might be able to perform more actions\nthan expected. This can lead to potential security risks, as it enables malicious users to escalate their privileges from a lower level to a higher\nlevel of access.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy\nwhich, when attached to an identity or a resource, defines its permissions. Policies granting permission to an identity (a user, a group or a role)\nare called identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.\u003c/p\u003e\n\u003cp\u003eFor such policies, it is easy to define very broad permissions (by using wildcard \u003ccode\u003e\"*\"\u003c/code\u003e permissions for example.) This is especially\ntrue if it is not yet clear which permissions will be required for a specific workload or use case. However, it is important to limit the amount of\npermissions that are granted and the amount of resources to which these permissions are granted. Doing so ensures that there are no users or roles\nthat have more permissions than they need.\u003c/p\u003e\n\u003cp\u003eIf this is not done, it can potentially carry security risks in the case that an attacker gets access to one of these identities.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAWS IAM policies that contain overly broad permissions can lead to privilege escalation by granting users more access than necessary. They may be\nable to perform actions beyond their intended scope.\u003c/p\u003e\n\u003ch4\u003ePrivilege escalation\u003c/h4\u003e\n\u003cp\u003eWhen IAM policies are too permissive, they grant users more privileges than necessary, allowing them to perform actions that they should not be\nable to. This can be exploited by attackers to gain unauthorized access to sensitive resources and perform malicious activities.\u003c/p\u003e\n\u003cp\u003eFor example, if an IAM policy grants a user unrestricted access to all S3 buckets in an AWS account, the user can potentially read, write, and\ndelete any object within those buckets. If an attacker gains access to this userâ€™s credentials, they can exploit this overly permissive policy to\nexfiltrate sensitive data, modify or delete critical files, or even launch further attacks within the AWS environment. This can have severe\nconsequences, such as data breaches, service disruptions, or unauthorized access to other resources within the AWS account.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in AWS CDK\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eIn this example, the IAM policy allows an attacker to update the code of any Lambda function. An attacker can achieve privilege escalation by\naltering the code of a Lambda that executes with high privileges.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: [\"lambda:UpdateFunctionCode\"],\n        resources: [\"*\"], // Noncompliant\n    })],\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe policy is narrowed such that only updates to the code of certain Lambda functions (without high privileges) are allowed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: [\"lambda:UpdateFunctionCode\"],\n        resources: [\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"],\n    })],\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003ePrinciple of least privilege\u003c/h4\u003e\n\u003cp\u003eWhen creating IAM policies, it is important to adhere to the principle of least privilege. This means that any user or role should only be granted\nenough permissions to perform the tasks that they are supposed to, and \u003cem\u003enothing else\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eTo successfully implement this, it is easier to start from nothing and gradually build up all the needed permissions. When starting from a policy\nwith overly broad permissions which is made stricter at a later time, it can be harder to ensure that there are no gaps that might be forgotten about.\nIn this case, it might be useful to monitor the users or roles to verify which permissions are used.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e AWS Documentation - \u003ca href\u003d\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#grant-least-priv\"\u003ePolicies and permissions\n  in IAM: Grant least privilege\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Rhino Security Labs - \u003ca href\u003d\"https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/\"\u003eAWS IAM Privilege Escalation -\n  Methods and Mitigation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-269\u003c/a\u003e - Improper Privilege Management \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eWithin IAM, identity-based policies grant permissions to users, groups, or roles, and enable specific actions to be performed on designated\nresources. When an identity policy inadvertently grants more privileges than intended, certain users or roles might be able to perform more actions\nthan expected. This can lead to potential security risks, as it enables malicious users to escalate their privileges from a lower level to a higher\nlevel of access.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy\nwhich, when attached to an identity or a resource, defines its permissions. Policies granting permission to an identity (a user, a group or a role)\nare called identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.\u003c/p\u003e\n\u003cp\u003eFor such policies, it is easy to define very broad permissions (by using wildcard \u003ccode\u003e\"*\"\u003c/code\u003e permissions for example.) This is especially\ntrue if it is not yet clear which permissions will be required for a specific workload or use case. However, it is important to limit the amount of\npermissions that are granted and the amount of resources to which these permissions are granted. Doing so ensures that there are no users or roles\nthat have more permissions than they need.\u003c/p\u003e\n\u003cp\u003eIf this is not done, it can potentially carry security risks in the case that an attacker gets access to one of these identities.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAWS IAM policies that contain overly broad permissions can lead to privilege escalation by granting users more access than necessary. They may be\nable to perform actions beyond their intended scope.\u003c/p\u003e\n\u003ch4\u003ePrivilege escalation\u003c/h4\u003e\n\u003cp\u003eWhen IAM policies are too permissive, they grant users more privileges than necessary, allowing them to perform actions that they should not be\nable to. This can be exploited by attackers to gain unauthorized access to sensitive resources and perform malicious activities.\u003c/p\u003e\n\u003cp\u003eFor example, if an IAM policy grants a user unrestricted access to all S3 buckets in an AWS account, the user can potentially read, write, and\ndelete any object within those buckets. If an attacker gains access to this userâ€™s credentials, they can exploit this overly permissive policy to\nexfiltrate sensitive data, modify or delete critical files, or even launch further attacks within the AWS environment. This can have severe\nconsequences, such as data breaches, service disruptions, or unauthorized access to other resources within the AWS account.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn this example, the IAM policy allows an attacker to update the code of any Lambda function. An attacker can achieve privilege escalation by\naltering the code of a Lambda that executes with high privileges.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: [\"lambda:UpdateFunctionCode\"],\n        resources: [\"*\"], // Noncompliant\n    })],\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe policy is narrowed such that only updates to the code of certain Lambda functions (without high privileges) are allowed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [new iam.PolicyStatement({\n        effect: iam.Effect.ALLOW,\n        actions: [\"lambda:UpdateFunctionCode\"],\n        resources: [\"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"],\n    })],\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003ePrinciple of least privilege\u003c/h4\u003e\n\u003cp\u003eWhen creating IAM policies, it is important to adhere to the principle of least privilege. This means that any user or role should only be granted\nenough permissions to perform the tasks that they are supposed to, and \u003cem\u003enothing else\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eTo successfully implement this, it is easier to start from nothing and gradually build up all the needed permissions. When starting from a policy\nwith overly broad permissions which is made stricter at a later time, it can be harder to ensure that there are no gaps that might be forgotten about.\nIn this case, it might be useful to monitor the users or roles to verify which permissions are used.\u003c/p\u003e",
        "context": {
          "key": "aws_cdk",
          "displayName": "AWS CDK"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e AWS Documentation - \u003ca href\u003d\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#grant-least-priv\"\u003ePolicies and permissions\n  in IAM: Grant least privilege\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Rhino Security Labs - \u003ca href\u003d\"https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/\"\u003eAWS IAM Privilege Escalation -\n  Methods and Mitigation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-269\u003c/a\u003e - Improper Privilege Management \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6438",
    "name": "Comments inside JSX expressions should be enclosed in curly braces",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJSX lets you write HTML-like markup inside a JavaScript file, commonly used in React.\u003c/p\u003e\n\u003cp\u003eAdding comments inside JSX might be tricky as JSX code is neither a plain HTML nor JavaScript.\u003c/p\u003e\n\u003cp\u003eHTML comments (\u003ccode\u003e\u0026lt;!-- comment here --\u0026gt;\u003c/code\u003e) are not valid syntax in JSX.\u003c/p\u003e\n\u003cp\u003eJavaScript-style comments, single or multiline, will create an additional text node in the browser, which is probably not expected.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  // Noncompliant: text inside node\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo avoid that, use JavaScript multiline comments enclosed in curly braces. Single-line comments can also be used, but avoid having the ending\nbracket in the same line.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  {\n    /*\n      multi-line\n      comment\n    */\n  }\n  {\n    // single-line comment\n  }\n  { /* short form comment */ }\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eNote that JavaScript comments around attributes are also allowed (\u003ccode\u003e\u0026lt;div /* comment */\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIf the additional text node is intentional, prefer using a JavaScript string literal containing that comment.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  { \u0027// text inside node\u0027 }\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/javascript-in-jsx-with-curly-braces\"\u003eJavaScript in JSX with Curly Braces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJSX lets you write HTML-like markup inside a JavaScript file, commonly used in React.\u003c/p\u003e\n\u003cp\u003eAdding comments inside JSX might be tricky as JSX code is neither a plain HTML nor JavaScript.\u003c/p\u003e\n\u003cp\u003eHTML comments (\u003ccode\u003e\u0026lt;!-- comment here --\u0026gt;\u003c/code\u003e) are not valid syntax in JSX.\u003c/p\u003e\n\u003cp\u003eJavaScript-style comments, single or multiline, will create an additional text node in the browser, which is probably not expected.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  // Noncompliant: text inside node\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo avoid that, use JavaScript multiline comments enclosed in curly braces. Single-line comments can also be used, but avoid having the ending\nbracket in the same line.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  {\n    /*\n      multi-line\n      comment\n    */\n  }\n  {\n    // single-line comment\n  }\n  { /* short form comment */ }\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eNote that JavaScript comments around attributes are also allowed (\u003ccode\u003e\u0026lt;div /* comment */\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIf the additional text node is intentional, prefer using a JavaScript string literal containing that comment.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;\n  { \u0027// text inside node\u0027 }\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/javascript-in-jsx-with-curly-braces\"\u003eJavaScript in JSX with Curly Braces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4139",
    "name": "\"for in\" should not be used with iterables",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the \u003ccode\u003efor of\u003c/code\u003e syntax. Use\n\u003ccode\u003efor in\u003c/code\u003e and youâ€™ll iterate the properties, rather than the values.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value in arr) {  // Noncompliant\n  console.log(value);  // logs 0, 1, 2, 3\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf you have an iterable, such as an array, set, or list, your best option for looping through its values is the \u003ccode\u003efor of\u003c/code\u003e syntax. Use\n\u003ccode\u003efor in\u003c/code\u003e and youâ€™ll iterate the properties, rather than the values.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value in arr) {  // Noncompliant\n  console.log(value);  // logs 0, 1, 2, 3\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6439",
    "name": "React components should not render non-boolean condition values",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLogical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator is sometimes used to conditionally render in React (aka short-circuit evaluation). For example,\n\u003ccode\u003emyCondition \u0026amp;\u0026amp; \u0026lt;MyElement /\u0026gt;\u003c/code\u003e will return \u003ccode\u003e\u0026lt;MyElement /\u0026gt;\u003c/code\u003e if \u003ccode\u003emyCondition\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e\nand \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cp\u003eReact considers \u003ccode\u003efalse\u003c/code\u003e as a \u0027hole\u0027 in the JSX tree, just like \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e, and doesnâ€™t render anything\nin its place. But if the condition has a \u003ccode\u003efalsy\u003c/code\u003e non-boolean value (e.g. \u003ccode\u003e0\u003c/code\u003e), that value will leak into the rendered\nresult.\u003c/p\u003e\n\u003cp\u003eThis rule will report when the condition has type \u003ccode\u003enumber\u003c/code\u003e or \u003ccode\u003ebigint\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case of React Native, the type \u003ccode\u003estring\u003c/code\u003e will also raise an error, as your render method will crash if you render \u003ccode\u003e0\u003c/code\u003e,\n\u003ccode\u003e\u0027\u0027\u003c/code\u003e, or \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders \u0026amp;\u0026amp; \u0026lt;Orders /\u0026gt; } { /* Noncompliant: 0 will be rendered if no orders available */ }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, make the left-hand side a boolean to avoid accidental renderings.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders \u0026gt; 0 \u0026amp;\u0026amp; \u0026lt;Orders /\u0026gt; }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother alternative to achieve conditional rendering is using the ternary operator (\u003ccode\u003emyCondition ? \u0026lt;MyElement /\u0026gt; : null\u003c/code\u003e), which\nis less error-prone in this case as both return values are explicit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders ? \u0026lt;Orders /\u0026gt; : null }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/conditional-rendering#logical-and-operator-\"\u003eConditional Rendering\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLogical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator is sometimes used to conditionally render in React (aka short-circuit evaluation). For example,\n\u003ccode\u003emyCondition \u0026amp;\u0026amp; \u0026lt;MyElement /\u0026gt;\u003c/code\u003e will return \u003ccode\u003e\u0026lt;MyElement /\u0026gt;\u003c/code\u003e if \u003ccode\u003emyCondition\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e\nand \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cp\u003eReact considers \u003ccode\u003efalse\u003c/code\u003e as a \u0027hole\u0027 in the JSX tree, just like \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e, and doesnâ€™t render anything\nin its place. But if the condition has a \u003ccode\u003efalsy\u003c/code\u003e non-boolean value (e.g. \u003ccode\u003e0\u003c/code\u003e), that value will leak into the rendered\nresult.\u003c/p\u003e\n\u003cp\u003eThis rule will report when the condition has type \u003ccode\u003enumber\u003c/code\u003e or \u003ccode\u003ebigint\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case of React Native, the type \u003ccode\u003estring\u003c/code\u003e will also raise an error, as your render method will crash if you render \u003ccode\u003e0\u003c/code\u003e,\n\u003ccode\u003e\u0027\u0027\u003c/code\u003e, or \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders \u0026amp;\u0026amp; \u0026lt;Orders /\u0026gt; } { /* Noncompliant: 0 will be rendered if no orders available */ }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, make the left-hand side a boolean to avoid accidental renderings.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders \u0026gt; 0 \u0026amp;\u0026amp; \u0026lt;Orders /\u0026gt; }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eAnother alternative to achieve conditional rendering is using the ternary operator (\u003ccode\u003emyCondition ? \u0026lt;MyElement /\u0026gt; : null\u003c/code\u003e), which\nis less error-prone in this case as both return values are explicit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Profile(props) {\n  return \u0026lt;div\u0026gt;\n    \u0026lt;h1\u0026gt;{ props.username }\u0026lt;/h1\u0026gt;\n    { props.orders ? \u0026lt;Orders /\u0026gt; : null }\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/conditional-rendering#logical-and-operator-\"\u003eConditional Rendering\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6557",
    "name": "Ends of strings should be checked with \"startsWith()\" and \"endsWith()\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen writing code, it is quite common to test patterns against string ends. For a long time, JavaScript did not provide proper support for this use\ncase. As a result, developers have been relying on various programming subtleties to check the start or end of a string. Examples are getting the\nindex of a substring, slicing the beginning of a string, extracting a substring from the head, matching a regular expression beginning or ending with\na pattern, and so on.\u003c/p\u003e\n\u003cp\u003eWhile these approaches are all technically valid, they look more like hacking than anything else, blur the developerâ€™s intent, but more importantly\naffect code readability.\u003c/p\u003e\n\u003cp\u003eSince ES2015, JavaScript provides \u003ccode\u003eString#startsWith\u003c/code\u003e and \u003ccode\u003eString#endsWith\u003c/code\u003e, which are the preferred ways to test patterns\nagainst string ends.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eOne should use \u003ccode\u003eString#startsWith\u003c/code\u003e to check the start of a string and \u003ccode\u003eString#endsWith\u003c/code\u003e to check the end.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst str \u003d \u0027abc\u0027;\n\nstr[0] \u003d\u003d\u003d \u0027a\u0027;\nstr.charAt(0) \u003d\u003d\u003d \u0027a\u0027;\nstr.indexOf(\u0027abc\u0027) \u003d\u003d\u003d 0;\nstr.slice(0, 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.substring(0, 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.match(/^abc/) !\u003d null;\n/^abc/.test(str);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nstr.startsWith(\u0027abc\u0027);\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst str \u003d \u0027abc\u0027;\n\nstr[str.length - 1] \u003d\u003d\u003d \u0027c\u0027;\nstr.charAt(str.length - 1) \u003d\u003d\u003d \u0027c\u0027;\nstr.lastIndexOf(\u0027abc\u0027) \u003d\u003d\u003d str.length - 3;\nstr.slice(-3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.substring(str.length - 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.match(/abc$/) !\u003d null;\n/abc$/.test(str);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nstr.endsWith(\u0027abc\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"\u003eString#startsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"\u003eString#endsWith\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen writing code, it is quite common to test patterns against string ends. For a long time, JavaScript did not provide proper support for this use\ncase. As a result, developers have been relying on various programming subtleties to check the start or end of a string. Examples are getting the\nindex of a substring, slicing the beginning of a string, extracting a substring from the head, matching a regular expression beginning or ending with\na pattern, and so on.\u003c/p\u003e\n\u003cp\u003eWhile these approaches are all technically valid, they look more like hacking than anything else, blur the developerâ€™s intent, but more importantly\naffect code readability.\u003c/p\u003e\n\u003cp\u003eSince ES2015, JavaScript provides \u003ccode\u003eString#startsWith\u003c/code\u003e and \u003ccode\u003eString#endsWith\u003c/code\u003e, which are the preferred ways to test patterns\nagainst string ends.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eOne should use \u003ccode\u003eString#startsWith\u003c/code\u003e to check the start of a string and \u003ccode\u003eString#endsWith\u003c/code\u003e to check the end.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst str \u003d \u0027abc\u0027;\n\nstr[0] \u003d\u003d\u003d \u0027a\u0027;\nstr.charAt(0) \u003d\u003d\u003d \u0027a\u0027;\nstr.indexOf(\u0027abc\u0027) \u003d\u003d\u003d 0;\nstr.slice(0, 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.substring(0, 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.match(/^abc/) !\u003d null;\n/^abc/.test(str);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nstr.startsWith(\u0027abc\u0027);\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nconst str \u003d \u0027abc\u0027;\n\nstr[str.length - 1] \u003d\u003d\u003d \u0027c\u0027;\nstr.charAt(str.length - 1) \u003d\u003d\u003d \u0027c\u0027;\nstr.lastIndexOf(\u0027abc\u0027) \u003d\u003d\u003d str.length - 3;\nstr.slice(-3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.substring(str.length - 3) \u003d\u003d\u003d \u0027abc\u0027;\nstr.match(/abc$/) !\u003d null;\n/abc$/.test(str);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nstr.endsWith(\u0027abc\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\"\u003eString#startsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\"\u003eString#endsWith\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6679",
    "name": "\"Number.isNaN()\" should be used to check for \"NaN\" value",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eComparing the value to itself may be either a refactoring error or an outdated way of checking if the value is of a numeric data type but not a\nvalid number. This special numeric value is represented by \u003ccode\u003eNaN\u003c/code\u003e global property, where \u003ccode\u003eNaN\u003c/code\u003e stands for \"Not-a-Number\".\n\u003ccode\u003eNaN\u003c/code\u003e is returned as a result when an arithmetic operation or mathematical function is performed, and the result is undefined or\nunrepresentable as a valid number.\u003c/p\u003e\n\u003cp\u003eDetecting whether a value is \u003ccode\u003eNaN\u003c/code\u003e in JavaScript was previously problematic because of the way \u003ccode\u003eNaN\u003c/code\u003e behaves in comparison\noperations. \u003ccode\u003eNaN\u003c/code\u003e is not equal to any value, including itself, so comparing the value to \u003ccode\u003eNaN\u003c/code\u003e will always return false. In\nother words, if a value is not equal to itself, it can only be \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis method of detecting \u003ccode\u003eNaN\u003c/code\u003e can be confusing and should be avoided. ES6 introduced a special function \u003ccode\u003eNumber.isNaN()\u003c/code\u003e\nwhich only returns \u003ccode\u003etrue\u003c/code\u003e if the argument is \u003ccode\u003eNaN\u003c/code\u003e value. For clarity and consistency this function should be used to detect\n\u003ccode\u003eNaN\u003c/code\u003e instead of all other methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (value !\u003d\u003d value){ // Noncompliant: use Number.isNaN()\n    processNaN(value);\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code replace self-comparison with \u003ccode\u003eNumber.isNaN()\u003c/code\u003e function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (Number.isNaN(value)){\n    processNaN(value);\n}\n\u003c/pre\u003e\n\u003cp\u003eDo not confuse \u003ccode\u003eNumber.isNaN()\u003c/code\u003e with the legacy global \u003ccode\u003eisNaN()\u003c/code\u003e function. While they serve a similar purpose, the behavior\nis very different - the global \u003ccode\u003eisNaN()\u003c/code\u003e tries to convert its argument into a number before checking if it is \u003ccode\u003eNaN\u003c/code\u003e. If the\nargument cannot be converted into a number, \u003ccode\u003eisNaN()\u003c/code\u003e will return true, which may not be the desired behavior in all cases.\u003c/p\u003e\n\u003cpre\u003e\nisNaN(\u0027some text\u0027);          // true: Number(\u0027some text\u0027) returns NaN\nNumber.isNaN(\u0027some text\u0027);   // false: \u0027some text\u0027 is not NaN\n\u003c/pre\u003e\n\u003cp\u003eYou should use the \u003ccode\u003eNumber.isNaN()\u003c/code\u003e method over \u003ccode\u003eisNaN()\u003c/code\u003e to perform a strict check for \u003ccode\u003eNaN\u003c/code\u003e without any type\nconversion.\u003c/p\u003e\n\u003cp\u003eIf the intention was not to detect whether a value was NaN, fix the issue by not comparing the variable against itself.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (value !\u003d\u003d anotherValue){\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"\u003e\u003ccode\u003eisNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\"\u003eType conversion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1764} - Identical expressions should not be used on both sides of a binary operator \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S2688} - \"NaN\" should not be used in comparisons \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eComparing the value to itself may be either a refactoring error or an outdated way of checking if the value is of a numeric data type but not a\nvalid number. This special numeric value is represented by \u003ccode\u003eNaN\u003c/code\u003e global property, where \u003ccode\u003eNaN\u003c/code\u003e stands for \"Not-a-Number\".\n\u003ccode\u003eNaN\u003c/code\u003e is returned as a result when an arithmetic operation or mathematical function is performed, and the result is undefined or\nunrepresentable as a valid number.\u003c/p\u003e\n\u003cp\u003eDetecting whether a value is \u003ccode\u003eNaN\u003c/code\u003e in JavaScript was previously problematic because of the way \u003ccode\u003eNaN\u003c/code\u003e behaves in comparison\noperations. \u003ccode\u003eNaN\u003c/code\u003e is not equal to any value, including itself, so comparing the value to \u003ccode\u003eNaN\u003c/code\u003e will always return false. In\nother words, if a value is not equal to itself, it can only be \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis method of detecting \u003ccode\u003eNaN\u003c/code\u003e can be confusing and should be avoided. ES6 introduced a special function \u003ccode\u003eNumber.isNaN()\u003c/code\u003e\nwhich only returns \u003ccode\u003etrue\u003c/code\u003e if the argument is \u003ccode\u003eNaN\u003c/code\u003e value. For clarity and consistency this function should be used to detect\n\u003ccode\u003eNaN\u003c/code\u003e instead of all other methods.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (value !\u003d\u003d value){ // Noncompliant: use Number.isNaN()\n    processNaN(value);\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix your code replace self-comparison with \u003ccode\u003eNumber.isNaN()\u003c/code\u003e function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (Number.isNaN(value)){\n    processNaN(value);\n}\n\u003c/pre\u003e\n\u003cp\u003eDo not confuse \u003ccode\u003eNumber.isNaN()\u003c/code\u003e with the legacy global \u003ccode\u003eisNaN()\u003c/code\u003e function. While they serve a similar purpose, the behavior\nis very different - the global \u003ccode\u003eisNaN()\u003c/code\u003e tries to convert its argument into a number before checking if it is \u003ccode\u003eNaN\u003c/code\u003e. If the\nargument cannot be converted into a number, \u003ccode\u003eisNaN()\u003c/code\u003e will return true, which may not be the desired behavior in all cases.\u003c/p\u003e\n\u003cpre\u003e\nisNaN(\u0027some text\u0027);          // true: Number(\u0027some text\u0027) returns NaN\nNumber.isNaN(\u0027some text\u0027);   // false: \u0027some text\u0027 is not NaN\n\u003c/pre\u003e\n\u003cp\u003eYou should use the \u003ccode\u003eNumber.isNaN()\u003c/code\u003e method over \u003ccode\u003eisNaN()\u003c/code\u003e to perform a strict check for \u003ccode\u003eNaN\u003c/code\u003e without any type\nconversion.\u003c/p\u003e\n\u003cp\u003eIf the intention was not to detect whether a value was NaN, fix the issue by not comparing the variable against itself.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (value !\u003d\u003d anotherValue){\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"\u003e\u003ccode\u003eisNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\"\u003eType conversion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1764} - Identical expressions should not be used on both sides of a binary operator \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S2688} - \"NaN\" should not be used in comparisons \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4138",
    "name": "\"for of\" should be used with Iterables",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003efor...of\u003c/code\u003e statements are used to iterate over the values of an iterable object. \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\"\u003eIterables\u003c/a\u003e are objects\nimplementing the \u003ccode\u003e@@iterator\u003c/code\u003e method, which returns an object conforming to the \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\"\u003eiterator protocol\u003c/a\u003e. JavaScript\nprovides many \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables\"\u003ebuilt-in\niterables\u003c/a\u003e that can and should be used with this looping statement.\u003c/p\u003e\n\u003cp\u003eThe use of the \u003ccode\u003efor...of\u003c/code\u003e statement is recommended over the \u003ccode\u003efor\u003c/code\u003e statement when iterating through iterable objects as\nsimplifies the syntax and eliminates the need for a counter variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let i \u003d 0; i \u0026lt; arr.length; i++) {  // Noncompliant: arr is an iterable object\n  console.log(arr[i]);\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen looping over an iterable, use the \u003ccode\u003efor...of\u003c/code\u003e for better readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\"\u003eIterator\n  protocol\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003efor...of\u003c/code\u003e statements are used to iterate over the values of an iterable object. \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\"\u003eIterables\u003c/a\u003e are objects\nimplementing the \u003ccode\u003e@@iterator\u003c/code\u003e method, which returns an object conforming to the \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\"\u003eiterator protocol\u003c/a\u003e. JavaScript\nprovides many \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#built-in_iterables\"\u003ebuilt-in\niterables\u003c/a\u003e that can and should be used with this looping statement.\u003c/p\u003e\n\u003cp\u003eThe use of the \u003ccode\u003efor...of\u003c/code\u003e statement is recommended over the \u003ccode\u003efor\u003c/code\u003e statement when iterating through iterable objects as\nsimplifies the syntax and eliminates the need for a counter variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let i \u003d 0; i \u0026lt; arr.length; i++) {  // Noncompliant: arr is an iterable object\n  console.log(arr[i]);\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen looping over an iterable, use the \u003ccode\u003efor...of\u003c/code\u003e for better readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst arr \u003d [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol\"\u003eIterator\n  protocol\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S108",
    "name": "Nested blocks of code should not be left empty",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; length; i++) {}  // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e code blocks that contain comments \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecatch\u003c/code\u003e blocks \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; length; i++) {}  // Noncompliant: is the block empty on purpose, or is code missing?\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e code blocks that contain comments \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecatch\u003c/code\u003e blocks \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:EmptyBlock"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S109",
    "name": "Magic numbers should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eA magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less\nreadable and maintainable.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMagic numbers make the code more complex to understand as it requires the reader to have knowledge about the global context to understand the\nnumber itself. Their usage may seem obvious when writing the code, but it may not be the case for another developer or later once the context faded\naway. -1, 0, and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e the following numbers used in arithmetic operations: -1, 0, 1, as well as powers of 2 and 10 \u003c/li\u003e\n  \u003cli\u003e time-related constants such as 24 and 60 are excluded \u003c/li\u003e\n  \u003cli\u003e numbers used in JSX elements are excluded \u003c/li\u003e\n  \u003cli\u003e enum values, default values, and other assignments are excluded \u003c/li\u003e\n  \u003cli\u003e arguments to \u003ccode\u003eparseInt()\u003c/code\u003e and \u003ccode\u003eJSON.stringify()\u003c/code\u003e are excluded \u003c/li\u003e\n  \u003cli\u003e numbers used in bitwise operations are excluded \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplacing them with a constant allows us to provide a meaningful name associated with the value. Instead of adding complexity to the code, it\nbrings clarity and helps to understand the context and the global meaning.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  for (let i \u003d 0; i \u0026lt; 4; i++) { // Noncompliant, 4 is a magic number\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething() {\n  const numberOfCycles \u003d 4;\n  for (let i \u003d 0; i \u0026lt; numberOfCycles; i++) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eA magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less\nreadable and maintainable.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMagic numbers make the code more complex to understand as it requires the reader to have knowledge about the global context to understand the\nnumber itself. Their usage may seem obvious when writing the code, but it may not be the case for another developer or later once the context faded\naway. -1, 0, and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e the following numbers used in arithmetic operations: -1, 0, 1, as well as powers of 2 and 10 \u003c/li\u003e\n  \u003cli\u003e time-related constants such as 24 and 60 are excluded \u003c/li\u003e\n  \u003cli\u003e numbers used in JSX elements are excluded \u003c/li\u003e\n  \u003cli\u003e enum values, default values, and other assignments are excluded \u003c/li\u003e\n  \u003cli\u003e arguments to \u003ccode\u003eparseInt()\u003c/code\u003e and \u003ccode\u003eJSON.stringify()\u003c/code\u003e are excluded \u003c/li\u003e\n  \u003cli\u003e numbers used in bitwise operations are excluded \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplacing them with a constant allows us to provide a meaningful name associated with the value. Instead of adding complexity to the code, it\nbrings clarity and helps to understand the context and the global meaning.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  for (let i \u003d 0; i \u0026lt; 4; i++) { // Noncompliant, 4 is a magic number\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething() {\n  const numberOfCycles \u003d 4;\n  for (let i \u003d 0; i \u0026lt; numberOfCycles; i++) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S106",
    "name": "Standard outputs should not be used directly to log anything",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is\nessential to ensure that the logs are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e easily accessible \u003c/li\u003e\n  \u003cli\u003e uniformly formatted for readability \u003c/li\u003e\n  \u003cli\u003e properly recorded \u003c/li\u003e\n  \u003cli\u003e securely logged when dealing with sensitive data \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose requirements are not met if a program directly writes to the standard outputs (e.g., console). That is why defining and using a dedicated\nlogger is highly recommended.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following noncompliant code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  // ...\n  console.log(\"My Message\");\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003eNode.js\u003c/code\u003e could be replaced by the \u003ccode\u003ewinston\u003c/code\u003e logging library:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst winston \u003d require(\"winston\");\n\nconst logger \u003d winston.createLogger({\n  level: \"debug\",\n  format: winston.format.json(),\n  transports: [new winston.transports.Console()],\n});\n\n\nfunction doSomething() {\n  // ...\n  logger.info(\"My Message\");\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is\nessential to ensure that the logs are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e easily accessible \u003c/li\u003e\n  \u003cli\u003e uniformly formatted for readability \u003c/li\u003e\n  \u003cli\u003e properly recorded \u003c/li\u003e\n  \u003cli\u003e securely logged when dealing with sensitive data \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose requirements are not met if a program directly writes to the standard outputs (e.g., console). That is why defining and using a dedicated\nlogger is highly recommended.\u003c/p\u003e\n\n\u003cp\u003eThe following noncompliant code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  // ...\n  console.log(\"My Message\");\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003eNode.js\u003c/code\u003e could be replaced by the \u003ccode\u003ewinston\u003c/code\u003e logging library:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst winston \u003d require(\"winston\");\n\nconst logger \u003d winston.createLogger({\n  level: \"debug\",\n  format: winston.format.json(),\n  transports: [new winston.transports.Console()],\n});\n\n\nfunction doSomething() {\n  // ...\n  logger.info(\"My Message\");\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "bad-practice",
      "user-experience"
    ],
    "deprecatedKeys": [
      "javascript:S2228"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S107",
    "name": "Functions should not have too many parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFunctions with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nfunction setCoordinates(x1, y1, z1, x2, y2, z2) { // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the function into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nfunction setOrigin(x, y, z) {\n   // ...\n}\n\nfunction setSize(width, height, depth) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// In geometry, Point is a logical structure to group data\nlet point1 \u003d { x: x1, y: y1, z: z1};\nlet point2 \u003d { x: x1, y: y1, z: z1};\nsetCoordinates(point1, point2);\n\nfunction setCoordinates(p1, p2) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a function has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores TypeScript parameter properties when counting parameters:\u003c/p\u003e\n\u003cpre\u003e\nclass C {\n  constructor(\n    private param1: number,     // ignored\n    param2: boolean,            // counted\n    public param3: string,      // ignored\n    readonly param4: string[],  // ignored\n    param5: number | string     // counted\n  ) {} // Compliant by exception\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores Angular component constructors:\u003c/p\u003e\n\u003cpre\u003e\nimport { Component } from \u0027@angular/core\u0027;\n\n@Component({/* ... */})\nclass Component {\n  constructor(p1, p2, p3, p4, p5) {} // Compliant by exception\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFunctions with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nfunction setCoordinates(x1, y1, z1, x2, y2, z2) { // Noncompliant\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the function into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nfunction setOrigin(x, y, z) {\n   // ...\n}\n\nfunction setSize(width, height, depth) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// In geometry, Point is a logical structure to group data\nlet point1 \u003d { x: x1, y: y1, z: z1};\nlet point2 \u003d { x: x1, y: y1, z: z1};\nsetCoordinates(point1, point2);\n\nfunction setCoordinates(p1, p2) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a function has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores TypeScript parameter properties when counting parameters:\u003c/p\u003e\n\u003cpre\u003e\nclass C {\n  constructor(\n    private param1: number,     // ignored\n    param2: boolean,            // counted\n    public param3: string,      // ignored\n    readonly param4: string[],  // ignored\n    param5: number | string     // counted\n  ) {} // Compliant by exception\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores Angular component constructors:\u003c/p\u003e\n\u003cpre\u003e\nimport { Component } from \u0027@angular/core\u0027;\n\n@Component({/* ... */})\nclass Component {\n  constructor(p1, p2, p3, p4, p5) {} // Compliant by exception\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "maximumFunctionParameters": {
        "key": "maximumFunctionParameters",
        "name": "maximumFunctionParameters",
        "description": "The maximum authorized number of parameters",
        "defaultValue": "7",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFunctionParameters": "7"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [
      "javascript:ExcessiveParameterList"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5693",
    "name": "Allowing requests with excessive content length is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevent DoS attacks.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e size limits are not defined for the different resources of the web application. \u003c/li\u003e\n  \u003cli\u003e the web application is not protected by \u003ca href\u003d\"https://en.wikipedia.org/wiki/Rate_limiting\"\u003erate limiting\u003c/a\u003e features. \u003c/li\u003e\n  \u003cli\u003e the web application infrastructure has limited resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/formidable\"\u003eformidable\u003c/a\u003e file upload module:\u003c/p\u003e\n\u003cpre\u003e\nconst form \u003d new Formidable();\nform.maxFileSize \u003d 10000000; // Sensitive: 10MB is more than the recommended limit of 8MB\n\nconst formDefault \u003d new Formidable(); // Sensitive, the default value is 200MB\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/multer\"\u003emulter\u003c/a\u003e (Express.js middleware) file upload module:\u003c/p\u003e\n\u003cpre\u003e\nlet diskUpload \u003d multer({\n  storage: diskStorage,\n  limits: {\n    fileSize: 10000000; // Sensitive: 10MB is more than the recommended limit of 8MB\n  }\n});\n\nlet diskUploadUnlimited \u003d multer({ // Sensitive: the default value is no limit\n  storage: diskStorage,\n});\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/body-parser\"\u003ebody-parser\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\n// 4MB is more than the recommended limit of 2MB for non-file-upload requests\nlet jsonParser \u003d bodyParser.json({ limit: \"4mb\" }); // Sensitive\nlet urlencodedParser \u003d bodyParser.urlencoded({ extended: false, limit: \"4mb\" }); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For most of the features of an application, it is recommended to limit the size of requests to:\n    \u003cul\u003e\n      \u003cli\u003e lower or equal to 8mb for file uploads. \u003c/li\u003e\n      \u003cli\u003e lower or equal to 2mb for other requests. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to customize the rule with the limit values that correspond to the web application.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/formidable\"\u003eformidable\u003c/a\u003e file upload module:\u003c/p\u003e\n\u003cpre\u003e\nconst form \u003d new Formidable();\nform.maxFileSize \u003d 8000000; // Compliant: 8MB\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/multer\"\u003emulter\u003c/a\u003e (Express.js middleware) file upload module:\u003c/p\u003e\n\u003cpre\u003e\nlet diskUpload \u003d multer({\n  storage: diskStorage,\n  limits: {\n     fileSize: 8000000 // Compliant: 8MB\n  }\n});\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/body-parser\"\u003ebody-parser\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet jsonParser \u003d bodyParser.json(); // Compliant, when the limit is not defined, the default value is set to 100kb\nlet urlencodedParser \u003d bodyParser.urlencoded({ extended: false, limit: \"2mb\" }); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html\"\u003eOwasp Cheat Sheet\u003c/a\u003e - Owasp Denial of Service\n  Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/770\"\u003eMITRE, CWE-770\u003c/a\u003e - Allocation of Resources Without Limits or Throttling \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eMITRE, CWE-400\u003c/a\u003e - Uncontrolled Resource Consumption \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "standardSizeLimit": {
        "key": "standardSizeLimit",
        "name": "standardSizeLimit",
        "description": "The maximum size of regular HTTP requests (in bytes)",
        "defaultValue": "2000000",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      },
      "fileUploadSizeLimit": {
        "key": "fileUploadSizeLimit",
        "name": "fileUploadSizeLimit",
        "description": "The maximum size of HTTP requests handling file uploads (in bytes)",
        "defaultValue": "8000000",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "standardSizeLimit": "2000000",
      "fileUploadSizeLimit": "8000000"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6661",
    "name": "Object spread syntax should be used instead of \"Object.assign\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen merging objects or copying properties from one object to another, use object spread syntax instead of \u003ccode\u003eObject.assign()\u003c/code\u003e. Object\nspread syntax was introduced in ES2018 and allows shallow-cloning or merging of objects with a more concise and readable syntax.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eObject.assign()\u003c/code\u003e also allows to mutate an object, which is not possible with the spread syntax, so the rule only applies to cases\nwhere the first argument of the \u003ccode\u003eObject.assign()\u003c/code\u003e is an object literal.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst a \u003d Object.assign({}, foo); // Noncompliant: Use spread syntax to clone or merge objects\nconst b \u003d Object.assign({}, foo, bar); // Noncompliant: Use spread syntax to clone or merge objects\nconst c \u003d Object.assign({foo: 123}, bar); // Noncompliant: Use spread syntax to clone or merge objects\nconst d \u003d Object.assign({}); // Noncompliant: Use spread syntax to clone or merge objects\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code replace \u003ccode\u003eObject.assign()\u003c/code\u003e with a spread syntax.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d {...foo};\nconst b \u003d {...foo, ...bar};\nconst c \u003d {foo: 123, ...bar};\nconst d \u003d {};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\"\u003eSpread in object\n  literals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen merging objects or copying properties from one object to another, use object spread syntax instead of \u003ccode\u003eObject.assign()\u003c/code\u003e. Object\nspread syntax was introduced in ES2018 and allows shallow-cloning or merging of objects with a more concise and readable syntax.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eObject.assign()\u003c/code\u003e also allows to mutate an object, which is not possible with the spread syntax, so the rule only applies to cases\nwhere the first argument of the \u003ccode\u003eObject.assign()\u003c/code\u003e is an object literal.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst a \u003d Object.assign({}, foo); // Noncompliant: Use spread syntax to clone or merge objects\nconst b \u003d Object.assign({}, foo, bar); // Noncompliant: Use spread syntax to clone or merge objects\nconst c \u003d Object.assign({foo: 123}, bar); // Noncompliant: Use spread syntax to clone or merge objects\nconst d \u003d Object.assign({}); // Noncompliant: Use spread syntax to clone or merge objects\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code replace \u003ccode\u003eObject.assign()\u003c/code\u003e with a spread syntax.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d {...foo};\nconst b \u003d {...foo, ...bar};\nconst c \u003d {foo: 123, ...bar};\nconst d \u003d {};\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\"\u003eSpread in object\n  literals\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2018"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S104",
    "name": "Files should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximum": {
        "key": "maximum",
        "name": "maximum",
        "description": "Maximum authorized lines in a file.",
        "defaultValue": "1000",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximum": "1000"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S105",
    "name": "Tabulation characters should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:TabCharacter"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5691",
    "name": "Statically serving hidden files is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHidden files are created automatically by many tools to save user-preferences, well-known examples are \u003ccode\u003e.profile\u003c/code\u003e, \u003ccode\u003e.bashrc\u003c/code\u003e,\n\u003ccode\u003e.bash_history\u003c/code\u003e or .\u003ccode\u003egit\u003c/code\u003e. To simplify the view these files are not displayed by default using operating system commands like\n\u003ccode\u003els\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOutside of the user environment, hidden files are sensitive because they are used to store privacy-related information or even hard-coded\nsecrets.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Hidden files may have been inadvertently uploaded to the static serverâ€™s public directory and it accepts requests to hidden files. \u003c/li\u003e\n  \u003cli\u003e There is no business use cases linked to serve files in \u003ccode\u003e.name\u003c/code\u003e format but the server is not configured to reject requests to this\n  type of files. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/serve-static\"\u003eExpress.js serve-static\u003c/a\u003e middleware:\u003c/p\u003e\n\u003cpre\u003e\nlet serveStatic \u003d require(\"serve-static\");\nlet app \u003d express();\nlet serveStaticMiddleware \u003d serveStatic(\u0027public\u0027, { \u0027index\u0027: false, \u0027dotfiles\u0027: \u0027allow\u0027});   // Sensitive\napp.use(serveStaticMiddleware);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Disable the serving of hidden files. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/serve-static\"\u003eExpress.js serve-static\u003c/a\u003e middleware:\u003c/p\u003e\n\u003cpre\u003e\nlet serveStatic \u003d require(\"serve-static\");\nlet app \u003d express();\nlet serveStaticMiddleware \u003d serveStatic(\u0027public\u0027, { \u0027index\u0027: false, \u0027dotfiles\u0027: \u0027ignore\u0027});   // Compliant: ignore or deny are recommended values\nlet serveStaticDefault \u003d serveStatic(\u0027public\u0027, { \u0027index\u0027: false});   // Compliant: by default, \"dotfiles\" (file or directory that begins with a dot) are not served (with the exception that files within a directory that begins with a dot are not ignored), see serve-static module documentation\napp.use(serveStaticMiddleware);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/mtojek/go-url-fuzzer\"\u003egithub.com/mtojek/go-url-fuzzer\u003c/a\u003e - Discover hidden files and directories on a web server.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Web Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/538\"\u003eMITRE, CWE-538\u003c/a\u003e - File and Directory Information Exposure \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S103",
    "name": "Lines should not be too long",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumLineLength": {
        "key": "maximumLineLength",
        "name": "maximumLineLength",
        "description": "The maximum authorized line length.",
        "defaultValue": "180",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumLineLength": "180"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:LineLength"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6660",
    "name": "If statements should not be the only statement in else blocks",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003eif\u003c/code\u003e is the only statement in the \u003ccode\u003eelse\u003c/code\u003e block, it is better to use \u003ccode\u003eelse if\u003c/code\u003e because it simplifies the code\nand makes it more readable.\u003c/p\u003e\n\u003cp\u003eWhen using nested \u003ccode\u003eif\u003c/code\u003e statements, it can be difficult to keep track of the logic and understand the flow of the code. Using \u003ccode\u003eelse\nif\u003c/code\u003e makes the code more concise and easier to follow.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: \u0027if\u0027 statement is the only statement in the \u0027else\u0027 block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: \u0027if\u0027 statement is the only statement in the \u0027else\u0027 block\n        // ...\n    } else {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eFix your code by using \u003ccode\u003eelse if\u003c/code\u003e if the nested \u003ccode\u003eif\u003c/code\u003e is the only statement in the \u003ccode\u003eelse\u003c/code\u003e block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen \u003ccode\u003eif\u003c/code\u003e is the only statement in the \u003ccode\u003eelse\u003c/code\u003e block, it is better to use \u003ccode\u003eelse if\u003c/code\u003e because it simplifies the code\nand makes it more readable.\u003c/p\u003e\n\u003cp\u003eWhen using nested \u003ccode\u003eif\u003c/code\u003e statements, it can be difficult to keep track of the logic and understand the flow of the code. Using \u003ccode\u003eelse\nif\u003c/code\u003e makes the code more concise and easier to follow.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n    // ...\n} else {\n    if (condition2) {  // Noncompliant: \u0027if\u0027 statement is the only statement in the \u0027else\u0027 block\n        // ...\n    }\n}\n\n\nif (condition3) {\n    // ...\n} else {\n    if (condition4) { // Noncompliant: \u0027if\u0027 statement is the only statement in the \u0027else\u0027 block\n        // ...\n    } else {\n        // ...\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eFix your code by using \u003ccode\u003eelse if\u003c/code\u003e if the nested \u003ccode\u003eif\u003c/code\u003e is the only statement in the \u003ccode\u003eelse\u003c/code\u003e block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n    // ...\n} else if (condition2) {\n    // ...\n}\n\n\nif (condition3) {\n    // ...\n} else if (condition4) {\n    // ...\n} else {\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6308",
    "name": "Using unencrypted Elasticsearch domains is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon OpenSearch Service is a managed service to host OpenSearch instances. It replaces Elasticsearch Service, which has been deprecated.\u003c/p\u003e\n\u003cp\u003eTo harden domain (cluster) data in case of unauthorized access, OpenSearch provides data-at-rest encryption if the engine is OpenSearch (any\nversion), or Elasticsearch with a version of 5.1 or above. Enabling encryption at rest will help protect:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e indices \u003c/li\u003e\n  \u003cli\u003e logs \u003c/li\u003e\n  \u003cli\u003e swap files \u003c/li\u003e\n  \u003cli\u003e data in the application directory \u003c/li\u003e\n  \u003cli\u003e automated snapshots \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThus, adversaries cannot access the data if they gain physical access to the storage medium.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The database contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.Domain.html\"\u003eaws-cdk-lib.aws_opensearchservice.Domain\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_opensearchservice as opensearchservice } from \u0027aws-cdk-lib\u0027;\n\nconst exampleDomain \u003d new opensearchservice.Domain(this, \u0027ExampleDomain\u0027, {\n  version: EngineVersion.OPENSEARCH_1_3,\n}); // Sensitive, encryption must be explicitly enabled\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.CfnDomain.html\"\u003eaws-cdk-lib.aws_opensearchservice.CfnDomain\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_opensearchservice as opensearchservice } from \u0027aws-cdk-lib\u0027;\n\nconst exampleCfnDomain \u003d new opensearchservice.CfnDomain(this, \u0027ExampleCfnDomain\u0027, {\n  engineVersion: \u0027OpenSearch_1.3\u0027,\n}); // Sensitive, encryption must be explicitly enabled\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eIt is recommended to encrypt OpenSearch domains that contain sensitive information.\u003c/p\u003e\n\u003cp\u003eOpenSearch handles encryption and decryption transparently, so no further modifications to the application are necessary.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.Domain.html\"\u003eaws-cdk-lib.aws_opensearchservice.Domain\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_opensearchservice as opensearchservice } from \u0027aws-cdk-lib\u0027;\n\nconst exampleDomain \u003d new opensearchservice.Domain(this, \u0027ExampleDomain\u0027, {\n  version: EngineVersion.OPENSEARCH_1_3,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.CfnDomain.html\"\u003eaws-cdk-lib.aws_opensearchservice.CfnDomain\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_opensearchservice as opensearchservice } from \u0027aws-cdk-lib\u0027;\n\nconst exampleCfnDomain \u003d new opensearchservice.CfnDomain(this, \u0027ExampleCfnDomain\u0027, {\n  engineVersion: \u0027OpenSearch_1.3\u0027,\n  encryptionAtRestOptions: {\n    enabled: true,\n  },\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html\"\u003eAWS Documentation\u003c/a\u003e - Encryption of\n  data at rest for Amazon OpenSearch Service \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6302",
    "name": "Policies granting all privileges are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA policy that grants all permissions may indicate an improper access control, which violates \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\"\u003ethe principle of least privilege\u003c/a\u003e. Suppose an identity is granted full\npermissions to a resource even though it only requires read permission to work as expected. In this case, an unintentional overwriting of resources\nmay occur and therefore result in loss of information.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eIdentities obtaining all the permissions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e only require a subset of these permissions to perform the intended function. \u003c/li\u003e\n  \u003cli\u003e have monitored activity showing that only a subset of these permissions is actually used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eA customer-managed policy that grants all permissions by using the wildcard (*) in the \u003ccode\u003eAction\u003c/code\u003e property:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    actions: [\"*\"], // Sensitive\n    resources: [\"arn:aws:iam:::user/*\"],\n})\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to apply the least privilege principle, i.e. by only granting the necessary permissions to identities. A good practice is to start\nwith the very minimum set of permissions and to refine the policy over time. In order to fix overly permissive policies already deployed in\nproduction, a strategy could be to review the monitored activity in order to reduce the set of permissions to those most used.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eA customer-managed policy that grants only the required permissions:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    actions: [\"iam:GetAccountSummary\"],\n    resources: [\"arn:aws:iam:::user/*\"],\n})\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\"\u003eAWS Documentation\u003c/a\u003e - Grant least\n  privilege \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/iam/docs/understanding-roles\"\u003eGoogle Cloud Documentation\u003c/a\u003e - Understanding roles \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eMITRE, CWE-732\u003c/a\u003e - Incorrect Permission Assignment for Critical Resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S2187",
    "name": "Test files should contain at least one test case",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTest files in JavaScript and TypeScript are meant to contain test cases. These test cases are used to verify the functionality of your code and\nensure that it behaves as expected. If a test file doesnâ€™t contain any test cases, itâ€™s not serving its purpose.\u003c/p\u003e\n\u003cp\u003eA test file without test cases might indicate:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An incomplete test suite: Perhaps the developer started writing tests but didnâ€™t finish. \u003c/li\u003e\n  \u003cli\u003e A mistake: The developer might have accidentally deleted the test cases or moved them to another file. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule flags any file that has \u003ccode\u003e.test\u003c/code\u003e or \u003ccode\u003e.spec\u003c/code\u003e as part of its suffix but does not contain any test cases defined using\nthe different forms of the \u003ccode\u003eit\u003c/code\u003e and \u003ccode\u003etest\u003c/code\u003e functions from Jasmine, Jest, Mocha, or Node.js testing API.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eAdd test cases to the file or delete it if it isnâ€™t needed anymore.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// eval.test.js\n\n/* no test cases */\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// eval.test.js\n\nit(\u00271 + 2 should give 3\u0027, () \u003d\u0026gt; {\n    expect(1 + 2).toBe(3);\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Jasmine docs - \u003ca href\u003d\"https://jasmine.github.io/api/edge/global\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest docs - \u003ca href\u003d\"https://jestjs.io/docs/api\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha docs - \u003ca href\u003d\"https://mochajs.org/#getting-started\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js docs - \u003ca href\u003d\"https://nodejs.org/api/test.html\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTest files in JavaScript and TypeScript are meant to contain test cases. These test cases are used to verify the functionality of your code and\nensure that it behaves as expected. If a test file doesnâ€™t contain any test cases, itâ€™s not serving its purpose.\u003c/p\u003e\n\u003cp\u003eA test file without test cases might indicate:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An incomplete test suite: Perhaps the developer started writing tests but didnâ€™t finish. \u003c/li\u003e\n  \u003cli\u003e A mistake: The developer might have accidentally deleted the test cases or moved them to another file. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule flags any file that has \u003ccode\u003e.test\u003c/code\u003e or \u003ccode\u003e.spec\u003c/code\u003e as part of its suffix but does not contain any test cases defined using\nthe different forms of the \u003ccode\u003eit\u003c/code\u003e and \u003ccode\u003etest\u003c/code\u003e functions from Jasmine, Jest, Mocha, or Node.js testing API.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAdd test cases to the file or delete it if it isnâ€™t needed anymore.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// eval.test.js\n\n/* no test cases */\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// eval.test.js\n\nit(\u00271 + 2 should give 3\u0027, () \u003d\u0026gt; {\n    expect(1 + 2).toBe(3);\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Jasmine docs - \u003ca href\u003d\"https://jasmine.github.io/api/edge/global\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest docs - \u003ca href\u003d\"https://jestjs.io/docs/api\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha docs - \u003ca href\u003d\"https://mochajs.org/#getting-started\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js docs - \u003ca href\u003d\"https://nodejs.org/api/test.html\"\u003eAPI\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing",
      "jasmine",
      "jest",
      "mocha",
      "node",
      "tests",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6544",
    "name": "Promises should not be misused",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePromises need to be resolved or awaited to return the expected value, otherwise, they return the promise object.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eUnresolved promises:\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eForgetting to await a promise is a frequent mistake. There are places where the use of a promise object is confusing or unclear because the\ndeveloper forgot to resolve it.\u003c/p\u003e\n\u003cp\u003eThis rule forbids returning promises where another type is expected such as in:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e conditionals \u003c/li\u003e\n  \u003cli\u003e void returns \u003c/li\u003e\n  \u003cli\u003e spread operators \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUsing a promise instead of its resolved value can have unexpected results leading to bugs.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In conditionals, it will always return a truthy value. \u003c/li\u003e\n  \u003cli\u003e In places where the expected type is void, returning a promise is often a mistake. \u003c/li\u003e\n  \u003cli\u003e Using the spread operator on a promise will raise an exception. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe executor function of a promise can also be an async function. However, this usually denotes a mistake:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If an async executor function throws an error, the error wonâ€™t cause the created promise to reject and will be lost. Therefore, this could make\n  it difficult to debug and handle runtime errors. \u003c/li\u003e\n  \u003cli\u003e If a promise executor function is using \u003ccode\u003eawait\u003c/code\u003e, this means that itâ€™s not necessary to use the \u003ccode\u003ePromise\u003c/code\u003e constructor, or\n  the scope of the Promise constructor can be reduced. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule can be ignored for promises that you know will always resolve like timers.\u003c/p\u003e\n\u003cpre\u003e\nawait new Promise(resolve \u003d\u0026gt; time.setTimeout(1000));\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you mistakenly treated a promise as its resolved value, you can ensure it is properly resolved by using await or resolve on the promise. In some\ncases, you may need to use an \"immediately invoked function expression\" (IIFE):\u003c/p\u003e\n\u003cpre\u003e\n(async function foo() {\n  const result \u003d await bar();\n  // work with result\n})();\n\u003c/pre\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst promise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // ...\n  resolve(false)\n});\nif (promise) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst promise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // ...\n  resolve(false)\n});\nif (await promise) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst p \u003d new Promise(async (resolve, reject) \u003d\u0026gt; {\n  doSomething(\u0027Hey, there!\u0027, function(error, result) {\n    if (error) {\n      reject(error);\n      return;\n    }\n    await saveResult(result)\n    resolve(result);\n  });\n});\n\nawait p;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst p \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  doSomething(\u0027Hey, there!\u0027, function(error, result) {\n    if (error) {\n      reject(error);\n      return;\n    }\n    resolve(result);\n  });\n});\n\nconst result \u003d await p;\nawait saveResult(result);\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\napiCalls.forEach(async (apiCall) \u003d\u0026gt; {\n  await apiCall.send();\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nfor (const apiCall of apiCalls) {\n  await apiCall.send();\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eIn JavaScript, a promise is a mechanism to perform tasks asynchronously. To this end, the language provides the \u003ccode\u003ePromise\u003c/code\u003e object which\nrepresents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n\u003ccode\u003ePromise\u003c/code\u003e constructor accepting an executor function as an argument, which has \u003ccode\u003eresolve\u003c/code\u003e and \u003ccode\u003ereject\u003c/code\u003e parameters that\nare invoked when the promise completes or fails.\u003c/p\u003e\n\u003cp\u003eThe logic of the promise is executed when it is called, however, its result is obtained only when the promise is resolved or awaited.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"\u003eUsing promises\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"\u003eAsync function\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePromises need to be resolved or awaited to return the expected value, otherwise, they return the promise object.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eUnresolved promises:\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eForgetting to await a promise is a frequent mistake. There are places where the use of a promise object is confusing or unclear because the\ndeveloper forgot to resolve it.\u003c/p\u003e\n\u003cp\u003eThis rule forbids returning promises where another type is expected such as in:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e conditionals \u003c/li\u003e\n  \u003cli\u003e void returns \u003c/li\u003e\n  \u003cli\u003e spread operators \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUsing a promise instead of its resolved value can have unexpected results leading to bugs.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In conditionals, it will always return a truthy value. \u003c/li\u003e\n  \u003cli\u003e In places where the expected type is void, returning a promise is often a mistake. \u003c/li\u003e\n  \u003cli\u003e Using the spread operator on a promise will raise an exception. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe executor function of a promise can also be an async function. However, this usually denotes a mistake:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If an async executor function throws an error, the error wonâ€™t cause the created promise to reject and will be lost. Therefore, this could make\n  it difficult to debug and handle runtime errors. \u003c/li\u003e\n  \u003cli\u003e If a promise executor function is using \u003ccode\u003eawait\u003c/code\u003e, this means that itâ€™s not necessary to use the \u003ccode\u003ePromise\u003c/code\u003e constructor, or\n  the scope of the Promise constructor can be reduced. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule can be ignored for promises that you know will always resolve like timers.\u003c/p\u003e\n\u003cpre\u003e\nawait new Promise(resolve \u003d\u0026gt; time.setTimeout(1000));\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you mistakenly treated a promise as its resolved value, you can ensure it is properly resolved by using await or resolve on the promise. In some\ncases, you may need to use an \"immediately invoked function expression\" (IIFE):\u003c/p\u003e\n\u003cpre\u003e\n(async function foo() {\n  const result \u003d await bar();\n  // work with result\n})();\n\u003c/pre\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst promise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // ...\n  resolve(false)\n});\nif (promise) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst promise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // ...\n  resolve(false)\n});\nif (await promise) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst p \u003d new Promise(async (resolve, reject) \u003d\u0026gt; {\n  doSomething(\u0027Hey, there!\u0027, function(error, result) {\n    if (error) {\n      reject(error);\n      return;\n    }\n    await saveResult(result)\n    resolve(result);\n  });\n});\n\nawait p;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst p \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  doSomething(\u0027Hey, there!\u0027, function(error, result) {\n    if (error) {\n      reject(error);\n      return;\n    }\n    resolve(result);\n  });\n});\n\nconst result \u003d await p;\nawait saveResult(result);\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\napiCalls.forEach(async (apiCall) \u003d\u0026gt; {\n  await apiCall.send();\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nfor (const apiCall of apiCalls) {\n  await apiCall.send();\n}\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eIn JavaScript, a promise is a mechanism to perform tasks asynchronously. To this end, the language provides the \u003ccode\u003ePromise\u003c/code\u003e object which\nrepresents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n\u003ccode\u003ePromise\u003c/code\u003e constructor accepting an executor function as an argument, which has \u003ccode\u003eresolve\u003c/code\u003e and \u003ccode\u003ereject\u003c/code\u003e parameters that\nare invoked when the promise completes or fails.\u003c/p\u003e\n\u003cp\u003eThe logic of the promise is executed when it is called, however, its result is obtained only when the promise is resolved or awaited.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"\u003eUsing promises\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"\u003eAsync function\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "async",
      "promise",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6303",
    "name": "Using unencrypted RDS DB resources is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing unencrypted RDS DB resources exposes data to unauthorized access.\u003cbr\u003e This includes database data, logs, automatic backups, read replicas,\nsnapshots, and cluster metadata.\u003c/p\u003e\n\u003cp\u003eThis situation can occur in a variety of scenarios, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A malicious insider working at the cloud provider gains physical access to the storage device. \u003c/li\u003e\n  \u003cli\u003e Unknown attackers penetrate the cloud providerâ€™s logical infrastructure and systems. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter a successful intrusion, the underlying applications are exposed to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e theft of intellectual property and/or personal data \u003c/li\u003e\n  \u003cli\u003e extortion \u003c/li\u003e\n  \u003cli\u003e denial of services and security bypasses via data corruption or deletion \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAWS-managed encryption at rest reduces this risk with a simple switch.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The database contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.CfnDBCluster\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\nnew rds.CfnDBCluster(this, \u0027example\u0027, {\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.CfnDBInstance\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\nnew rds.CfnDBInstance(this, \u0027example\u0027, {\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseCluster\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\nimport { aws_ec2 as ec2 } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nconst cluster \u003d new rds.DatabaseCluster(this, \u0027example\u0027, {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  instanceProps: {\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n    },\n    vpc,\n  },\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseClusterFromSnapshot.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseClusterFromSnapshot\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nnew rds.DatabaseClusterFromSnapshot(this, \u0027example\u0027, {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: \u0027exampleSnapshot\u0027,\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseInstance\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nnew rds.DatabaseInstance(this, \u0027example\u0027, {\n  engine: rds.DatabaseInstanceEngine.POSTGRES,\n  vpc,\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstanceReadReplica.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseInstanceReadReplica\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n\nnew rds.DatabaseInstanceReadReplica(this, \u0027example\u0027, {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eIt is recommended to enable encryption at rest on any RDS DB resource, regardless of the engine.\u003cbr\u003e In any case, no further maintenance is\nrequired as encryption at rest is fully managed by AWS.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.CfnDBCluster\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\nnew rds.CfnDBCluster(this, \u0027example\u0027, {\n  storageEncrypted: true,\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.CfnDBInstance\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\nnew rds.CfnDBInstance(this, \u0027example\u0027, {\n  storageEncrypted: true,\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseCluster\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nconst cluster \u003d new rds.DatabaseCluster(this, \u0027example\u0027, {\n  engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),\n  instanceProps: {\n    vpcSubnets: {\n      subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,\n    },\n    vpc,\n  },\n  storageEncrypted: false, // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseClusterFromSnapshot.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseClusterFromSnapshot\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nnew rds.DatabaseClusterFromSnapshot(this, \u0027example\u0027, {\n  engine: rds.DatabaseClusterEngine.aurora({ version: rds.AuroraEngineVersion.VER_1_22_2 }),\n  instanceProps: {\n    vpc,\n  },\n  snapshotIdentifier: \u0027exampleSnapshot\u0027,\n  storageEncrypted: true,\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseInstance\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const vpc: ec2.Vpc;\n\nnew rds.DatabaseInstance(this, \u0027example\u0027, {\n  engine: rds.DatabaseInstanceEngine.POSTGRES,\n  vpc,\n  storageEncrypted: true,\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstanceReadReplica.html\"\u003e\u003ccode\u003eaws-cdk-lib.aws_rds.DatabaseInstanceReadReplica\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_rds as rds } from \u0027aws-cdk-lib\u0027;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n\nnew rds.DatabaseInstanceReadReplica(this, \u0027example\u0027, {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n  storageEncrypted: true,\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html\"\u003eAWS Documentation\u003c/a\u003e - Encrypting Amazon RDS\n  resources \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6666",
    "name": "Spread syntax should be used instead of \"apply()\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe spread operator is a more concise and more readable way to pass arguments to a function that takes a variable number of arguments (variadic\nfunction). Prior to ES2015, the only way to call such functions with a variable number of arguments was to use the \u003ccode\u003e.apply()\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfoo.apply(undefined, args); // Noncompliant: use spread syntax instead of .apply()\nfoo.apply(null, args); // Noncompliant: use spread syntax instead of .apply()\nobj.foo.apply(obj, args); // Noncompliant: use spread syntax instead of .apply()\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e.apply()\u003c/code\u003e is no longer necessary in such cases - replace it with a spread operator applied to the array of arguments.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo( ...args);\nfoo( ...args);\nobj.foo( ...args);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_function_calls\"\u003espread syntax\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003e\u003ccode\u003eapply()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe spread operator is a more concise and more readable way to pass arguments to a function that takes a variable number of arguments (variadic\nfunction). Prior to ES2015, the only way to call such functions with a variable number of arguments was to use the \u003ccode\u003e.apply()\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfoo.apply(undefined, args); // Noncompliant: use spread syntax instead of .apply()\nfoo.apply(null, args); // Noncompliant: use spread syntax instead of .apply()\nobj.foo.apply(obj, args); // Noncompliant: use spread syntax instead of .apply()\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003e.apply()\u003c/code\u003e is no longer necessary in such cases - replace it with a spread operator applied to the array of arguments.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo( ...args);\nfoo( ...args);\nobj.foo( ...args);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_function_calls\"\u003espread syntax\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003e\u003ccode\u003eapply()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4125",
    "name": "\"typeof\" expressions should only be compared to valid values",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003etypeof\u003c/code\u003e operator returns a string indicating the type of its argument, and the set of returned values is limited:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e\"undefined\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"boolean\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"number\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"string\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"symbol\"\u003c/code\u003e (since ECMAScript 2015) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"function\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"object\"\u003c/code\u003e (for \u003ccode\u003enull\u003c/code\u003e and any other object) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"bigint\"\u003c/code\u003e (since ECMAScript 2020) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCompare a \u003ccode\u003etypeof\u003c/code\u003e expression to anything else, and the result will always be \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction isNumber(x) {\n  return typeof x \u003d\u003d\u003d \"Number\"; // Noncompliant: the function always returns \u0027false\u0027\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, make sure you are always comparing the expression against one of the seven possible values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction isNumber(x) {\n  return typeof x \u003d\u003d\u003d \"number\";\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\"\u003etypeof\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\"\u003ePrimitive values\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003etypeof\u003c/code\u003e operator returns a string indicating the type of its argument, and the set of returned values is limited:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e\"undefined\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"boolean\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"number\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"string\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"symbol\"\u003c/code\u003e (since ECMAScript 2015) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"function\"\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"object\"\u003c/code\u003e (for \u003ccode\u003enull\u003c/code\u003e and any other object) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\"bigint\"\u003c/code\u003e (since ECMAScript 2020) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCompare a \u003ccode\u003etypeof\u003c/code\u003e expression to anything else, and the result will always be \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction isNumber(x) {\n  return typeof x \u003d\u003d\u003d \"Number\"; // Noncompliant: the function always returns \u0027false\u0027\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, make sure you are always comparing the expression against one of the seven possible values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction isNumber(x) {\n  return typeof x \u003d\u003d\u003d \"number\";\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\"\u003etypeof\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\"\u003ePrimitive values\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2068",
    "name": "Hard-coded credentials are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eItâ€™s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", â€¦â€‹\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar mysql \u003d require(\u0027mysql\u0027);\n\nvar connection \u003d mysql.createConnection(\n{\n  host:\u0027localhost\u0027,\n  user: \"admin\",\n  database: \"project\",\n  password: \"mypassword\", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud providerâ€™s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar mysql \u003d require(\u0027mysql\u0027);\n\nvar connection \u003d mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e - Broken Authentication\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "credentialWords": {
        "key": "credentialWords",
        "name": "credentialWords",
        "description": "Comma separated list of words identifying potential credentials.",
        "defaultValue": "password, pwd, passwd",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "credentialWords": "password, pwd, passwd"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S2189",
    "name": "Loops should not be infinite",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA loop is a control structure that allows a block of code to be executed repeatedly until a certain condition is met. The basic idea behind a loop\nis to automate repetitive tasks, such as iterating over a collection of data or performing a calculation multiple times with different inputs.\u003c/p\u003e\n\u003cp\u003eAn infinite loop is a loop that runs indefinitely without ever terminating. In other words, the loop condition is always true, and the loop never\nexits. This can happen when the loop condition is not defined or when the loop condition is never met.\u003c/p\u003e\n\u003cp\u003eInfinite loops can cause a program to hang or crash, as the program will continue to execute the loop indefinitely.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue on \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003edo...while\u003c/code\u003e loops where no clear exit condition has been\nfound.\u003c/p\u003e\n\u003cp\u003eThere are some known limitations for this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e False positives: when an exception is raised by a function invoked within the loop. \u003c/li\u003e\n  \u003cli\u003e False negatives: when a loop condition is based on an element of an array or object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (;;) {  // Noncompliant: end condition omitted\n  // ...\n}\n\nlet j \u003d 0;\nwhile (true) { // Noncompliant: constant end condition\n  j++;\n}\n\nlet k;\nlet b \u003d true;\nwhile (b) { // Noncompliant: constant end condition\n  k++;\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure the loop condition is defined or use a \u003ccode\u003ebreak\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  // ...\n}\n\nlet j \u003d 0;\nwhile (true) {\n  j++;\n  if (j \u0026lt; 5) {\n    break;\n  }\n}\n\nlet k;\nlet b \u003d true;\nwhile (b) {\n  k++;\n  b \u003d k \u0026lt; 10;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while\"\u003e\u003ccode\u003edo...while\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Infinite_loop\"\u003eInfinite loop\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA loop is a control structure that allows a block of code to be executed repeatedly until a certain condition is met. The basic idea behind a loop\nis to automate repetitive tasks, such as iterating over a collection of data or performing a calculation multiple times with different inputs.\u003c/p\u003e\n\u003cp\u003eAn infinite loop is a loop that runs indefinitely without ever terminating. In other words, the loop condition is always true, and the loop never\nexits. This can happen when the loop condition is not defined or when the loop condition is never met.\u003c/p\u003e\n\u003cp\u003eInfinite loops can cause a program to hang or crash, as the program will continue to execute the loop indefinitely.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue on \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003edo...while\u003c/code\u003e loops where no clear exit condition has been\nfound.\u003c/p\u003e\n\u003cp\u003eThere are some known limitations for this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e False positives: when an exception is raised by a function invoked within the loop. \u003c/li\u003e\n  \u003cli\u003e False negatives: when a loop condition is based on an element of an array or object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (;;) {  // Noncompliant: end condition omitted\n  // ...\n}\n\nlet j \u003d 0;\nwhile (true) { // Noncompliant: constant end condition\n  j++;\n}\n\nlet k;\nlet b \u003d true;\nwhile (b) { // Noncompliant: constant end condition\n  k++;\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure the loop condition is defined or use a \u003ccode\u003ebreak\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  // ...\n}\n\nlet j \u003d 0;\nwhile (true) {\n  j++;\n  if (j \u0026lt; 5) {\n    break;\n  }\n}\n\nlet k;\nlet b \u003d true;\nwhile (b) {\n  k++;\n  b \u003d k \u0026lt; 10;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while\"\u003e\u003ccode\u003edo...while\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Infinite_loop\"\u003eInfinite loop\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5332",
    "name": "Using clear-text protocols is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eClear-text protocols such as \u003ccode\u003eftp\u003c/code\u003e, \u003ccode\u003etelnet\u003c/code\u003e, or \u003ccode\u003ehttp\u003c/code\u003e lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e sensitive data exposure \u003c/li\u003e\n  \u003cli\u003e traffic redirected to a malicious endpoint \u003c/li\u003e\n  \u003cli\u003e malware-infected software update or installer \u003c/li\u003e\n  \u003cli\u003e execution of client-side code \u003c/li\u003e\n  \u003cli\u003e corruption of critical information \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.\u003c/p\u003e\n\u003cp\u003eFor example, attackers could successfully compromise prior security layers by:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e bypassing isolation mechanisms \u003c/li\u003e\n  \u003cli\u003e compromising a component of the network \u003c/li\u003e\n  \u003cli\u003e getting the credentials of an internal IAM account (either from a service account or an actual person) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n\u003cem\u003edefense-in-depth\u003c/em\u003e principle.\u003c/p\u003e\n\u003cp\u003eNote that using the \u003ccode\u003ehttp\u003c/code\u003e protocol is being deprecated by \u003ca\nhref\u003d\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\"\u003emajor web browsers\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\"\u003eCVE-2019-6169\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\"\u003eCVE-2019-12327\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\"\u003eCVE-2019-11065\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or \u003ccode\u003elocalhost\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Application data needs to be protected against falsifications or leaks when transiting over the network. \u003c/li\u003e\n  \u003cli\u003e Application data transits over an untrusted network. \u003c/li\u003e\n  \u003cli\u003e Compliance rules require the service to encrypt data in transit. \u003c/li\u003e\n  \u003cli\u003e Your application renders web pages with a relaxed mixed content policy. \u003c/li\u003e\n  \u003cli\u003e OS-level protections against clear-text traffic are deactivated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nurl \u003d \"http://example.com\"; // Sensitive\nurl \u003d \"ftp://anonymous@example.com\"; // Sensitive\nurl \u003d \"telnet://anonymous@example.com\"; // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://nodemailer.com\"\u003enodemailer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst nodemailer \u003d require(\"nodemailer\");\nlet transporter \u003d nodemailer.createTransport({\n  secure: false, // Sensitive\n  requireTLS: false // Sensitive\n});\n\u003c/pre\u003e\n\u003cpre\u003e\nconst nodemailer \u003d require(\"nodemailer\");\nlet transporter \u003d nodemailer.createTransport({}); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/mscdex/node-ftp\"\u003eftp\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nvar Client \u003d require(\u0027ftp\u0027);\nvar c \u003d new Client();\nc.connect({\n  \u0027secure\u0027: false // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/mkozjak/node-telnet-client\"\u003etelnet-client\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst Telnet \u003d require(\u0027telnet-client\u0027); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.ApplicationLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { ApplicationLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nconst alb \u003d new ApplicationLoadBalancer(this, \u0027ALB\u0027, {\n  vpc: vpc,\n  internetFacing: true\n});\n\nalb.addListener(\u0027listener-http-default\u0027, {\n  port: 8080,\n  open: true\n}); // Sensitive\n\nalb.addListener(\u0027listener-http-explicit\u0027, {\n  protocol: ApplicationProtocol.HTTP, // Sensitive\n  port: 8080,\n  open: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.ApplicationListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { ApplicationListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew ApplicationListener(this, \u0027listener-http-explicit-constructor\u0027, {\n  loadBalancer: alb,\n  protocol: ApplicationProtocol.HTTP, // Sensitive\n  port: 8080,\n  open: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.NetworkLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.NetworkLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { NetworkLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nconst nlb \u003d new NetworkLoadBalancer(this, \u0027nlb\u0027, {\n  vpc: vpc,\n  internetFacing: true\n});\n\nvar listenerNLB \u003d nlb.addListener(\u0027listener-tcp-default\u0027, {\n  port: 1234\n}); // Sensitive\n\nlistenerNLB \u003d nlb.addListener(\u0027listener-tcp-explicit\u0027, {\n  protocol: Protocol.TCP, // Sensitive\n  port: 1234\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.NetworkListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.NetworkListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { NetworkListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew NetworkListener(this, \u0027listener-tcp-explicit-constructor\u0027, {\n  loadBalancer: nlb,\n  protocol: Protocol.TCP, // Sensitive\n  port: 8080\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.CfnListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.CfnListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew CfnListener(this, \u0027listener-http\u0027, {\n  defaultActions: defaultActions,\n  loadBalancerArn: alb.loadBalancerArn,\n  protocol: \"HTTP\", // Sensitive\n  port: 80\n});\n\nnew CfnListener(this, \u0027listener-tcp\u0027, {\n  defaultActions: defaultActions,\n  loadBalancerArn: alb.loadBalancerArn,\n  protocol: \"TCP\", // Sensitive\n  port: 80\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancing.CfnLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancing.CfnLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancing\u0027;\n\nnew CfnLoadBalancer(this, \u0027elb-tcp\u0027, {\n  listeners: [{\n    instancePort: \u00271000\u0027,\n    loadBalancerPort: \u00271000\u0027,\n    protocol: \u0027tcp\u0027 // Sensitive\n  }]\n});\n\nnew CfnLoadBalancer(this, \u0027elb-http\u0027, {\n  listeners: [{\n    instancePort: \u00271000\u0027,\n    loadBalancerPort: \u00271000\u0027,\n    protocol: \u0027http\u0027 // Sensitive\n  }]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancing.LoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancing.LoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { LoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancing\u0027;\n\nconst loadBalancer \u003d new LoadBalancer(this, \u0027elb-tcp-dict\u0027, {\n    vpc,\n    internetFacing: true,\n    healthCheck: {\n    port: 80,\n    },\n    listeners: [\n    {\n        externalPort:10000,\n        externalProtocol: LoadBalancingProtocol.TCP, // Sensitive\n        internalPort:10000\n    }]\n});\n\nloadBalancer.addListener({\n  externalPort:10001,\n  externalProtocol:LoadBalancingProtocol.TCP, // Sensitive\n  internalPort:10001\n});\nloadBalancer.addListener({\n  externalPort:10002,\n  externalProtocol:LoadBalancingProtocol.HTTP, // Sensitive\n  internalPort:10002\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticache.CfnReplicationGroup.html\"\u003eaws-cdk-lib.aws-elasticache.CfnReplicationGroup\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnReplicationGroup } from \u0027aws-cdk-lib/aws-elasticache\u0027;\n\nnew CfnReplicationGroup(this, \u0027unencrypted-implicit\u0027, {\n  replicationGroupDescription: \u0027exampleDescription\u0027\n}); // Sensitive\n\nnew CfnReplicationGroup(this, \u0027unencrypted-explicit\u0027, {\n  replicationGroupDescription: \u0027exampleDescription\u0027,\n  transitEncryptionEnabled: false // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_kinesis.CfnStream.html\"\u003eaws-cdk-lib.aws-kinesis.CfnStream\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnStream } from \u0027aws-cdk-lib/aws-kinesis\u0027;\n\nnew CfnStream(this, \u0027cfnstream-implicit-unencrytped\u0027, undefined); // Sensitive\n\nnew CfnStream(this, \u0027cfnstream-explicit-unencrytped\u0027, {\n  streamEncryption: undefined // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_kinesis.Stream.html\"\u003eaws-cdk-lib.aws-kinesis.Stream\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { Stream } from \u0027aws-cdk-lib/aws-kinesis\u0027;\n\nnew Stream(this, \u0027stream-explicit-unencrypted\u0027, {\n  encryption: StreamEncryption.UNENCRYPTED // Sensitive\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    \u003cul\u003e\n      \u003cli\u003e Use \u003ccode\u003essh\u003c/code\u003e as an alternative to \u003ccode\u003etelnet\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003esftp\u003c/code\u003e, \u003ccode\u003escp\u003c/code\u003e, or \u003ccode\u003eftps\u003c/code\u003e instead of \u003ccode\u003eftp\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003ehttps\u003c/code\u003e instead of \u003ccode\u003ehttp\u003c/code\u003e. \u003c/li\u003e\n      \u003cli\u003e Use \u003ccode\u003eSMTP\u003c/code\u003e over \u003ccode\u003eSSL/TLS\u003c/code\u003e or \u003ccode\u003eSMTP\u003c/code\u003e with \u003ccode\u003eSTARTTLS\u003c/code\u003e instead of clear-text SMTP. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Enable encryption of cloud components communications whenever it is possible. \u003c/li\u003e\n  \u003cli\u003e Configure your application to block mixed content when rendering web pages. \u003c/li\u003e\n  \u003cli\u003e If available, enforce OS-level deactivation of all clear-text traffic. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nurl \u003d \"https://example.com\";\nurl \u003d \"sftp://anonymous@example.com\";\nurl \u003d \"ssh://anonymous@example.com\";\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://nodemailer.com\"\u003enodemailer\u003c/a\u003e one of the following options must be set:\u003c/p\u003e\n\u003cpre\u003e\nconst nodemailer \u003d require(\"nodemailer\");\nlet transporter \u003d nodemailer.createTransport({\n  secure: true,\n  requireTLS: true,\n  port: 465,\n  secured: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/mscdex/node-ftp\"\u003eftp\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nvar Client \u003d require(\u0027ftp\u0027);\nvar c \u003d new Client();\nc.connect({\n  \u0027secure\u0027: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.ApplicationLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { ApplicationLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nconst alb \u003d new ApplicationLoadBalancer(this, \u0027ALB\u0027, {\n  vpc: vpc,\n  internetFacing: true\n});\n\nalb.addListener(\u0027listener-https-explicit\u0027, {\n  protocol: ApplicationProtocol.HTTPS,\n  port: 8080,\n  open: true,\n  certificates: [certificate]\n});\n\nalb.addListener(\u0027listener-https-implicit\u0027, {\n  port: 8080,\n  open: true,\n  certificates: [certificate]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.ApplicationListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.ApplicationListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { ApplicationListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew ApplicationListener(this, \u0027listener-https-explicit\u0027, {\n  loadBalancer: loadBalancer,\n  protocol: ApplicationProtocol.HTTPS,\n  port: 8080,\n  open: true,\n  certificates: [certificate]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.NetworkLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.NetworkLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { NetworkLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nconst nlb \u003d new NetworkLoadBalancer(this, \u0027nlb\u0027, {\n  vpc: vpc,\n  internetFacing: true\n});\n\nnlb.addListener(\u0027listener-tls-explicit\u0027, {\n  protocol: Protocol.TLS,\n  port: 1234,\n  certificates: [certificate]\n});\n\nnlb.addListener(\u0027listener-tls-implicit\u0027, {\n  port: 1234,\n  certificates: [certificate]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.NetworkListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.NetworkListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { NetworkListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew NetworkListener(this, \u0027listener-tls-explicit\u0027, {\n  loadBalancer: loadBalancer,\n  protocol: Protocol.TLS,\n  port: 8080,\n  certificates: [certificate]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancingv2.CfnListener.html\"\u003eaws-cdk-lib.aws-elasticloadbalancingv2.CfnListener\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnListener } from \u0027aws-cdk-lib/aws-elasticloadbalancingv2\u0027;\n\nnew CfnListener(this, \u0027listener-https\u0027, {\n  defaultActions: defaultActions,\n  loadBalancerArn: loadBalancerArn,\n  protocol: \"HTTPS\",\n  port: 80\n  certificates: [certificate]\n});\n\nnew CfnListener(this, \u0027listener-tls\u0027, {\n  defaultActions: defaultActions,\n  loadBalancerArn: loadBalancerArn,\n  protocol: \"TLS\",\n  port: 80\n  certificates: [certificate]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancing.CfnLoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancing.CfnLoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnLoadBalancer } from \u0027aws-cdk-lib/aws-elasticloadbalancing\u0027;\n\nnew CfnLoadBalancer(this, \u0027elb-ssl\u0027, {\n  listeners: [{\n    instancePort: \u00271000\u0027,\n    loadBalancerPort: \u00271000\u0027,\n    protocol: \u0027ssl\u0027,\n    sslCertificateId: sslCertificateId\n  }]\n});\n\nnew CfnLoadBalancer(this, \u0027elb-https\u0027, {\n  listeners: [{\n    instancePort: \u00271000\u0027,\n    loadBalancerPort: \u00271000\u0027,\n    protocol: \u0027https\u0027,\n    sslCertificateId: sslCertificateId\n  }]\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticloadbalancing.LoadBalancer.html\"\u003eaws-cdk-lib.aws-elasticloadbalancing.LoadBalancer\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { LoadBalancer, LoadBalancingProtocol } from \u0027aws-cdk-lib/aws-elasticloadbalancing\u0027;\n\nconst lb \u003d new LoadBalancer(this, \u0027elb-ssl\u0027, {\n  vpc,\n  internetFacing: true,\n  healthCheck: {\n    port: 80,\n  },\n  listeners: [\n    {\n      externalPort:10000,\n      externalProtocol:LoadBalancingProtocol.SSL,\n      internalPort:10000\n    }]\n});\n\nlb.addListener({\n  externalPort:10001,\n  externalProtocol:LoadBalancingProtocol.SSL,\n  internalPort:10001\n});\nlb.addListener({\n  externalPort:10002,\n  externalProtocol:LoadBalancingProtocol.HTTPS,\n  internalPort:10002\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca\nhref\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_elasticache.CfnReplicationGroup.html\"\u003eaws-cdk-lib.aws-elasticache.CfnReplicationGroup\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnReplicationGroup } from \u0027aws-cdk-lib/aws-elasticache\u0027;\n\nnew CfnReplicationGroup(this, \u0027encrypted-explicit\u0027, {\n  replicationGroupDescription: \u0027example\u0027,\n  transitEncryptionEnabled: true\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_kinesis.Stream.html\"\u003eaws-cdk-lib.aws-kinesis.Stream\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { Stream } from \u0027aws-cdk-lib/aws-kinesis\u0027;\n\nnew Stream(this, \u0027stream-implicit-encrypted\u0027);\n\nnew Stream(this, \u0027stream-explicit-encrypted-selfmanaged\u0027, {\n  encryption: StreamEncryption.KMS,\n  encryptionKey: encryptionKey,\n});\n\nnew Stream(this, \u0027stream-explicit-encrypted-managed\u0027, {\n  encryption: StreamEncryption.MANAGED\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_kinesis.CfnStream.html\"\u003eaws-cdk-lib.aws-kinesis.CfnStream\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { CfnStream } from \u0027aws-cdk-lib/aws-kinesis\u0027;\n\nnew CfnStream(this, \u0027cfnstream-explicit-encrypted\u0027, {\n  streamEncryption: {\n    encryptionType: encryptionType,\n    keyId: encryptionKey.keyId,\n  }\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec Verification\n  Standard\u003c/a\u003e - Network Communication Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eOWASP Mobile Top 10 2016 Category M3\u003c/a\u003e - Insecure\n  Communication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/200\"\u003eMITRE, CWE-200\u003c/a\u003e - Exposure of Sensitive Information to an Unauthorized Actor \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/319\"\u003eMITRE, CWE-319\u003c/a\u003e - Cleartext Transmission of Sensitive Information \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\"\u003eGoogle, Moving towards more secure web\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\"\u003eMozilla, Deprecating non secure http\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\"\u003eAWS Documentation\u003c/a\u003e - Listeners\n  for your Application Load Balancers \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\"\u003eAWS\n  Documentation\u003c/a\u003e - Stream Encryption \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S4123",
    "name": "\"await\" should only be used with promises",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePromises are objects that represent the eventual completion or failure of an asynchronous operation. They provide a way to handle asynchronous\noperations in a more organized and manageable manner. To use \u003ccode\u003eawait\u003c/code\u003e, you need to ensure that you are calling a function or an expression\nthat returns a promise.\u003c/p\u003e\n\u003cp\u003eThe reason \u003ccode\u003eawait\u003c/code\u003e should only be used on a promise is that it expects the operand to be a promise object. When you use\n\u003ccode\u003eawait\u003c/code\u003e, it waits for the promise to be resolved or rejected and then returns the resolved value or throws the rejection reason,\nrespectively. If the operand of \u003ccode\u003eawait\u003c/code\u003e is not a promise, awaiting it is redundant and might not have been the developerâ€™s intent.\u003c/p\u003e\n\u003cp\u003eIf you try to use \u003ccode\u003eawait\u003c/code\u003e on a non-promise value, such as a regular object or a primitive type, it will not pause the execution of the\nfunction because there is no asynchronous behavior involved. Instead, \u003ccode\u003eawait\u003c/code\u003e will convert the value to a resolved promise, and waits for\nit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst x \u003d 42;\nawait x; // Noncompliant: x is a number, not a promise\n\u003c/pre\u003e\n\u003cp\u003eYou should only use \u003ccode\u003eawait\u003c/code\u003e on promises because it is designed to handle asynchronous operations and works in conjunction with the\nPromise API to provide a clean and intuitive way to write asynchronous code in JavaScript.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst x \u003d Promise.resolve(42);\nawait x;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"\u003eawait\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#conversion_to_promise\"\u003eConversion to\n  promise\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePromises are objects that represent the eventual completion or failure of an asynchronous operation. They provide a way to handle asynchronous\noperations in a more organized and manageable manner. To use \u003ccode\u003eawait\u003c/code\u003e, you need to ensure that you are calling a function or an expression\nthat returns a promise.\u003c/p\u003e\n\u003cp\u003eThe reason \u003ccode\u003eawait\u003c/code\u003e should only be used on a promise is that it expects the operand to be a promise object. When you use\n\u003ccode\u003eawait\u003c/code\u003e, it waits for the promise to be resolved or rejected and then returns the resolved value or throws the rejection reason,\nrespectively. If the operand of \u003ccode\u003eawait\u003c/code\u003e is not a promise, awaiting it is redundant and might not have been the developerâ€™s intent.\u003c/p\u003e\n\u003cp\u003eIf you try to use \u003ccode\u003eawait\u003c/code\u003e on a non-promise value, such as a regular object or a primitive type, it will not pause the execution of the\nfunction because there is no asynchronous behavior involved. Instead, \u003ccode\u003eawait\u003c/code\u003e will convert the value to a resolved promise, and waits for\nit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst x \u003d 42;\nawait x; // Noncompliant: x is a number, not a promise\n\u003c/pre\u003e\n\u003cp\u003eYou should only use \u003ccode\u003eawait\u003c/code\u003e on promises because it is designed to handle asynchronous operations and works in conjunction with the\nPromise API to provide a clean and intuitive way to write asynchronous code in JavaScript.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst x \u003d Promise.resolve(42);\nawait x;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"\u003eawait\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#conversion_to_promise\"\u003eConversion to\n  promise\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6304",
    "name": "Policies granting access to all resources of an account are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA policy that allows identities to access all resources in an AWS account may violate \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\"\u003ethe principle of least privilege\u003c/a\u003e. Suppose an identity has permission to access\nall resources even though it only requires access to some non-sensitive ones. In this case, unauthorized access and disclosure of sensitive\ninformation will occur.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Should not be raised on key policies (when AWS KMS actions are used.) \u003c/li\u003e\n  \u003cli\u003e Should not be raised on policies not using any resources (if and only if all actions in the policy never require resources.) \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe AWS account has more than one resource with different levels of sensitivity.\u003c/p\u003e\n\u003cp\u003eA risk exists if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThe wildcard \u003ccode\u003e\"*\"\u003c/code\u003e is specified as the resource for this \u003ccode\u003ePolicyStatement\u003c/code\u003e. This grants the update permission for all\npolicies of the account:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [\n        new iam.PolicyStatement({\n            effect: iam.Effect.ALLOW,\n            actions: [\"iam:CreatePolicyVersion\"],\n            resources: [\"*\"] // Sensitive\n        })\n    ]\n})\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to apply the least privilege principle, i.e., by only granting access to necessary resources. A good practice to achieve this is\nto organize or \u003ca\nhref\u003d\"https://aws.amazon.com/blogs/security/simplify-granting-access-to-your-aws-resources-by-using-tags-on-aws-iam-users-and-roles/\"\u003etag\u003c/a\u003e\nresources depending on the sensitivity level of data they store or process. Therefore, managing a secure access control is less prone to errors.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eRestrict the update permission to the appropriate subset of policies:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\n\nnew iam.PolicyDocument({\n    statements: [\n        new iam.PolicyStatement({\n            effect: iam.Effect.ALLOW,\n            actions: [\"iam:CreatePolicyVersion\"],\n            resources: [\"arn:aws:iam:::policy/team1/*\"]\n        })\n    ]\n})\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\"\u003eAWS Documentation\u003c/a\u003e - Grant least\n  privilege \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eMITRE, CWE-732\u003c/a\u003e - Incorrect Permission Assignment for Critical Resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6789",
    "name": "React\u0027s \"isMounted\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact \u003ccode\u003eisMounted()\u003c/code\u003e is primarily used to avoid calling \u003ccode\u003esetState()\u003c/code\u003e after a component has unmounted, because calling\n\u003ccode\u003esetState()\u003c/code\u003e after a component has unmounted will emit a warning. Checking \u003ccode\u003eisMounted()\u003c/code\u003e before calling \u003ccode\u003esetState()\u003c/code\u003e\ndoes eliminate the warning, but it also defeats the purpose of the warning, which is raising awareness that the app is still holding a reference to\nthe component after the component has been unmounted.\u003c/p\u003e\n\u003cp\u003eWhen using ES6 classes, using \u003ccode\u003eisMounted()\u003c/code\u003e is already prohibited.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};\n\u003c/pre\u003e\n\u003cp\u003eFind places where \u003ccode\u003esetState()\u003c/code\u003e might be called after a component has unmounted, and fix them. Such situations most commonly occur due to\ncallbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in\n\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, before the component unmounts.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/blog/2015/12/16/ismounted-antipattern.html\"\u003e\u003ccode\u003eisMounted\u003c/code\u003e is an\n  Antipattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact \u003ccode\u003eisMounted()\u003c/code\u003e is primarily used to avoid calling \u003ccode\u003esetState()\u003c/code\u003e after a component has unmounted, because calling\n\u003ccode\u003esetState()\u003c/code\u003e after a component has unmounted will emit a warning. Checking \u003ccode\u003eisMounted()\u003c/code\u003e before calling \u003ccode\u003esetState()\u003c/code\u003e\ndoes eliminate the warning, but it also defeats the purpose of the warning, which is raising awareness that the app is still holding a reference to\nthe component after the component has been unmounted.\u003c/p\u003e\n\u003cp\u003eWhen using ES6 classes, using \u003ccode\u003eisMounted()\u003c/code\u003e is already prohibited.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    if (this.isMounted()) { // Noncompliant: isMounted() hides the error\n      //...\n    }\n  }\n  render() {\n    //... calls dataHandler()\n  }\n};\n\u003c/pre\u003e\n\u003cp\u003eFind places where \u003ccode\u003esetState()\u003c/code\u003e might be called after a component has unmounted, and fix them. Such situations most commonly occur due to\ncallbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in\n\u003ccode\u003ecomponentWillUnmount\u003c/code\u003e, before the component unmounts.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  componentDidMount() {\n    mydatastore.subscribe(this);\n  }\n  dataHandler() {\n    //...\n  }\n  render() {\n    //...\n  }\n  componentWillUnmount() {\n    mydatastore.unsubscribe(this);\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://legacy.reactjs.org/blog/2015/12/16/ismounted-antipattern.html\"\u003e\u003ccode\u003eisMounted\u003c/code\u003e is an\n  Antipattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6426",
    "name": "Exclusive tests should not be commited to version control",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using testing frameworks like Mocha and Jest, appending \u003ccode\u003e.only()\u003c/code\u003e to the test function allows running a single test case for a\nfile. Using \u003ccode\u003e.only()\u003c/code\u003e means no other test from this file is executed. This is useful when debugging a specific use case.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndescribe(\"MyClass\", function () {\n    it.only(\"should run correctly\", function () { // Noncompliant\n        /*...*/\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eHowever, it should not be used in production or development, as it is likely a leftover from debugging and serves no purpose in those contexts. It\nis strongly recommended not to include \u003ccode\u003e.only()\u003c/code\u003e usages in version control.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndescribe(\"MyClass\", function () {\n    it(\"should run correctly\", function () {\n        /*...*/\n    });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#exclusive-tests\"\u003eExclusive tests\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest Documentation - \u003ca href\u003d\"https://jestjs.io/docs/next/api#testonlyname-fn-timeout\"\u003e\u003ccode\u003etest.only()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest Documentation - \u003ca href\u003d\"https://jestjs.io/docs/next/api#describeonlyname-fn\"\u003e\u003ccode\u003edescribe.only()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using testing frameworks like Mocha and Jest, appending \u003ccode\u003e.only()\u003c/code\u003e to the test function allows running a single test case for a\nfile. Using \u003ccode\u003e.only()\u003c/code\u003e means no other test from this file is executed. This is useful when debugging a specific use case.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndescribe(\"MyClass\", function () {\n    it.only(\"should run correctly\", function () { // Noncompliant\n        /*...*/\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eHowever, it should not be used in production or development, as it is likely a leftover from debugging and serves no purpose in those contexts. It\nis strongly recommended not to include \u003ccode\u003e.only()\u003c/code\u003e usages in version control.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndescribe(\"MyClass\", function () {\n    it(\"should run correctly\", function () {\n        /*...*/\n    });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#exclusive-tests\"\u003eExclusive tests\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest Documentation - \u003ca href\u003d\"https://jestjs.io/docs/next/api#testonlyname-fn-timeout\"\u003e\u003ccode\u003etest.only()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Jest Documentation - \u003ca href\u003d\"https://jestjs.io/docs/next/api#describeonlyname-fn\"\u003e\u003ccode\u003edescribe.only()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6788",
    "name": "React\u0027s \"findDOMNode\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, \u003ccode\u003efindDOMNode\u003c/code\u003e is used to get the browser DOM node given a component instance. However, using \u003ccode\u003efindDOMNode\u003c/code\u003e is\nfragile because the connection between the JSX node and the code manipulating the corresponding DOM node is not explicit. For example, changing the\nexternal structure of returned JSX will affect the return value of \u003ccode\u003efindDOMNode\u003c/code\u003e. There are also other \u003ca\nhref\u003d\"https://react.dev/reference/react-dom/findDOMNode#caveats\"\u003ecaveats\u003c/a\u003e when using \u003ccode\u003efindDOMNode\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { Component } from \u0027react\u0027;\nimport { findDOMNode } from \u0027react-dom\u0027;\n\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input \u003d findDOMNode(this); // Noncompliant: findDOMNode is deprecated\n    input.select();\n  }\n\n  render() {\n    return \u0026lt;input defaultValue\u003d\"Hello\" /\u0026gt;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should get the componentâ€™s own DOM node from a ref. Pass your ref as the \u003ccode\u003eref\u003c/code\u003e attribute to the JSX tag for which you want\nto get the DOM node. This tells React to put this \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003eâ€™s DOM node into \u003ccode\u003einputRef.current\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003ecreateRef\u003c/code\u003e to manage a specific DOM node. In modern React without class components, the equivalent code would call\n\u003ccode\u003euseRef\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { createRef, Component } from \u0027react\u0027;\n\nclass AutoselectingInput extends Component {\n  inputRef \u003d createRef(null);\n\n  componentDidMount() {\n    const input \u003d this.inputRef.current; // Always points to the input element\n    input.select();\n  }\n\n  render() {\n    return (\n      \u0026lt;input ref\u003d{this.inputRef} defaultValue\u003d\"Hello\" /\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/findDOMNode\"\u003e\u003ccode\u003efindDOMNode\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/createRef\"\u003e\u003ccode\u003ecreateRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useRef\"\u003e\u003ccode\u003euseRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/manipulating-the-dom-with-refs\"\u003eManipulating the DOM with Refs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, \u003ccode\u003efindDOMNode\u003c/code\u003e is used to get the browser DOM node given a component instance. However, using \u003ccode\u003efindDOMNode\u003c/code\u003e is\nfragile because the connection between the JSX node and the code manipulating the corresponding DOM node is not explicit. For example, changing the\nexternal structure of returned JSX will affect the return value of \u003ccode\u003efindDOMNode\u003c/code\u003e. There are also other \u003ca\nhref\u003d\"https://react.dev/reference/react-dom/findDOMNode#caveats\"\u003ecaveats\u003c/a\u003e when using \u003ccode\u003efindDOMNode\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { Component } from \u0027react\u0027;\nimport { findDOMNode } from \u0027react-dom\u0027;\n\nclass AutoselectingInput extends Component {\n  componentDidMount() {\n    const input \u003d findDOMNode(this); // Noncompliant: findDOMNode is deprecated\n    input.select();\n  }\n\n  render() {\n    return \u0026lt;input defaultValue\u003d\"Hello\" /\u0026gt;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should get the componentâ€™s own DOM node from a ref. Pass your ref as the \u003ccode\u003eref\u003c/code\u003e attribute to the JSX tag for which you want\nto get the DOM node. This tells React to put this \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003eâ€™s DOM node into \u003ccode\u003einputRef.current\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003ecreateRef\u003c/code\u003e to manage a specific DOM node. In modern React without class components, the equivalent code would call\n\u003ccode\u003euseRef\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { createRef, Component } from \u0027react\u0027;\n\nclass AutoselectingInput extends Component {\n  inputRef \u003d createRef(null);\n\n  componentDidMount() {\n    const input \u003d this.inputRef.current; // Always points to the input element\n    input.select();\n  }\n\n  render() {\n    return (\n      \u0026lt;input ref\u003d{this.inputRef} defaultValue\u003d\"Hello\" /\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/findDOMNode\"\u003e\u003ccode\u003efindDOMNode\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/createRef\"\u003e\u003ccode\u003ecreateRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useRef\"\u003e\u003ccode\u003euseRef\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/manipulating-the-dom-with-refs\"\u003eManipulating the DOM with Refs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S139",
    "name": "Comments should not be located at the end of lines of code",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar a1 \u003d b + c; // This is a trailing comment that can be very very long\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// This very long comment is better placed before the line of code\nvar a2 \u003d b + c;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar a1 \u003d b + c; // This is a trailing comment that can be very very long\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// This very long comment is better placed before the line of code\nvar a2 \u003d b + c;\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "pattern": {
        "key": "pattern",
        "name": "pattern",
        "description": "Pattern (JavaScript syntax) for text of trailing comments that are allowed.",
        "defaultValue": "^\\s*[^\\s]+$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "pattern": "^\\s*[^\\s]+$"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:TrailingComment"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6299",
    "name": "Disabling Vue.js built-in escaping is security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVue.js framework prevents XSS vulnerabilities by automatically escaping HTML contents with the use of native API browsers like\n\u003ccode\u003einnerText\u003c/code\u003e instead of \u003ccode\u003einnerHtml\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eItâ€™s still possible to explicity use \u003ccode\u003einnerHtml\u003c/code\u003e and similar APIs to render HTML. Accidentally rendering malicious HTML data will\nintroduce an XSS vulnerability in the application and enable a wide range of serious attacks like accessing/modifying sensitive information or\nimpersonating other users.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe application needs to render HTML content which:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e could be user-controlled and not previously sanitized. \u003c/li\u003e\n  \u003cli\u003e is difficult to understand how it was constructed. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWhen using Vue.js templates, the \u003ccode\u003ev-html\u003c/code\u003e directive enables HTML rendering without any sanitization:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div v-html\u003d\"htmlContent\"\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- Noncompliant --\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen using a rendering function, the \u003ccode\u003einnerHTML\u003c/code\u003e attribute enables HTML rendering without any sanitization:\u003c/p\u003e\n\u003cpre\u003e\nVue.component(\u0027element\u0027, {\n  render: function (createElement) {\n    return createElement(\n      \u0027div\u0027,\n      {\n        domProps: {\n          innerHTML: this.htmlContent, // Noncompliant\n        }\n      }\n    );\n  },\n});\n\u003c/pre\u003e\n\u003cp\u003eWhen using JSX, the \u003ccode\u003edomPropsInnerHTML\u003c/code\u003e attribute enables HTML rendering without any sanitization:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div domPropsInnerHTML\u003d{this.htmlContent}\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- Noncompliant --\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Avoid injecting HTML content with \u003ccode\u003ev-html\u003c/code\u003e directive unless the content can be considered 100% safe, instead try to rely as much as\n  possible on built-in auto-escaping Vue.js features. \u003c/li\u003e\n  \u003cli\u003e Take care when using the \u003ccode\u003ev-bind:href\u003c/code\u003e directive to set URLs which can contain malicious Javascript\n  (\u003ccode\u003ejavascript:onClick(...)\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Event directives like \u003ccode\u003e:onmouseover\u003c/code\u003e are also prone to Javascript injection and should not be used with unsafe values. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eWhen using Vue.js templates, putting the content as a child node of the element is safe:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;{{ htmlContent }}\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen using a rendering function, using the \u003ccode\u003einnerText\u003c/code\u003e attribute or putting the content as a child node of the element is safe:\u003c/p\u003e\n\u003cpre\u003e\nVue.component(\u0027element\u0027, {\n  render: function (createElement) {\n    return createElement(\n      \u0027div\u0027,\n      {\n        domProps: {\n          innerText: this.htmlContent,\n        }\n      },\n      this.htmlContent // Child node\n    );\n  },\n});\n\u003c/pre\u003e\n\u003cp\u003eWhen using JSX, putting the content as a child node of the element is safe:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;div\u0026gt;{this.htmlContent}\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eOWASP Top 10 2017 Category A7\u003c/a\u003e - Cross-Site\n  Scripting (XSS) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79\"\u003eMITRE, CWE-79\u003c/a\u003e - Improper Neutralization of Input During Web Page Generation\n  (\u0027Cross-site Scripting\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://vuejs.org/v2/guide/security.html#Injecting-HTML\"\u003eVue.js - Security - Injecting HTML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S138",
    "name": "Functions should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned a\nname.\u003c/p\u003e\n\u003cpre\u003e\n(function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n\u003c/pre\u003e\n\u003cp\u003eThis rule also ignores React Functional Components, which are JavaScript functions named with a capital letter and returning a React element (JSX\nsyntax).\u003c/p\u003e\n\u003cpre\u003e\nfunction Welcome() {\n  const greeting \u003d \u0027Hello, World!\u0027;\n\n  // ...\n\n  return (\n    \u0026lt;div className\u003d\"Welcome\"\u0026gt;\n      \u0026lt;p\u0026gt;{greeting}\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA function that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch functions inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller functions will not only be easier to understand, but also probably easier to test.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned a\nname.\u003c/p\u003e\n\u003cpre\u003e\n(function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n\u003c/pre\u003e\n\u003cp\u003eThis rule also ignores React Functional Components, which are JavaScript functions named with a capital letter and returning a React element (JSX\nsyntax).\u003c/p\u003e\n\u003cpre\u003e\nfunction Welcome() {\n  const greeting \u003d \u0027Hello, World!\u0027;\n\n  // ...\n\n  return (\n    \u0026lt;div className\u003d\"Welcome\"\u0026gt;\n      \u0026lt;p\u0026gt;{greeting}\u0026lt;/p\u0026gt;\n    \u0026lt;/div\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized lines in a function",
        "defaultValue": "200",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "200"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S135",
    "name": "Loops should not contain more than a single \"break\" or \"continue\" statement",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e statements increases the complexity of the control flow and makes it harder to understand\nthe program logic. In order to keep a good program structure, they should not be applied more than once per loop.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when there is more than one \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statement in a loop. The code should be\nrefactored to increase readability if there is more than one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i \u0026lt;\u003d 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 \u003d\u003d 0) {\n    continue;\n  }\n\n  if (i % 3 \u003d\u003d 0) {\n    continue;\n  }\n\n  alert(\"i \u003d \" + i);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e statements increases the complexity of the control flow and makes it harder to understand\nthe program logic. In order to keep a good program structure, they should not be applied more than once per loop.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when there is more than one \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statement in a loop. The code should be\nrefactored to increase readability if there is more than one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (var i \u003d 1; i \u0026lt;\u003d 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 \u003d\u003d 0) {\n    continue;\n  }\n\n  if (i % 3 \u003d\u003d 0) {\n    continue;\n  }\n\n  alert(\"i \u003d \" + i);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [
      "javascript:TooManyBreakOrContinueInLoop"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2814",
    "name": "Variables and functions should not be redeclared",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRedeclaration refers to the act of declaring a variable or function with the same name more than once within the same scope. In JavaScript,\nvariable and function redeclarations are allowed but can lead to unexpected behavior and potential bugs in your code.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function declarations can be redeclared using the \u003ccode\u003efunction\u003c/code\u003e keyword. In this case, the latest function declaration will overwrite\n  the previous one. \u003c/li\u003e\n  \u003cli\u003e Variables declared using \u003ccode\u003evar\u003c/code\u003e can be redeclared within the same scope without any errors. The subsequent redeclaration will not\n  affect the previous variable. \u003c/li\u003e\n  \u003cli\u003e Variable declarations with \u003ccode\u003evar\u003c/code\u003e in the same scope as a function named the same override the functionâ€™s value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule checks that a declaration doesnâ€™t use a name already in use, whether variables, functions, or parameters. Such redeclarations are\nmisleading and could have been made by mistake, the developer not realizing that the new assignment overwrites the symbol value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar a \u003d \u0027foo\u0027;\nfunction a() {} // Noncompliant: Overriden by the variable \u0027a\u0027\nconsole.log(a); // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg \u003d \"event\"; // Noncompliant: Shadows the parameter \u0027arg\u0027\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() { // Noncompliant: Replaces the previous declaration of \u0027fun\u0027\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n\u003c/pre\u003e\n\u003cp\u003eTo avoid issues with variable and function redeclarations, you should use unique names as much as possible and declare variables with\n\u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e only.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d \u0027foo\u0027;\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  const newName \u003d \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#redeclarations\"\u003eMDN - Variable redeclarations\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#redeclarations\"\u003eMDN - Function\n  redeclarations\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN - \u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN - \u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN - \u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRedeclaration refers to the act of declaring a variable or function with the same name more than once within the same scope. In JavaScript,\nvariable and function redeclarations are allowed but can lead to unexpected behavior and potential bugs in your code.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function declarations can be redeclared using the \u003ccode\u003efunction\u003c/code\u003e keyword. In this case, the latest function declaration will overwrite\n  the previous one. \u003c/li\u003e\n  \u003cli\u003e Variables declared using \u003ccode\u003evar\u003c/code\u003e can be redeclared within the same scope without any errors. The subsequent redeclaration will not\n  affect the previous variable. \u003c/li\u003e\n  \u003cli\u003e Variable declarations with \u003ccode\u003evar\u003c/code\u003e in the same scope as a function named the same override the functionâ€™s value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule checks that a declaration doesnâ€™t use a name already in use, whether variables, functions, or parameters. Such redeclarations are\nmisleading and could have been made by mistake, the developer not realizing that the new assignment overwrites the symbol value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar a \u003d \u0027foo\u0027;\nfunction a() {} // Noncompliant: Overriden by the variable \u0027a\u0027\nconsole.log(a); // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg \u003d \"event\"; // Noncompliant: Shadows the parameter \u0027arg\u0027\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() { // Noncompliant: Replaces the previous declaration of \u0027fun\u0027\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n\u003c/pre\u003e\n\u003cp\u003eTo avoid issues with variable and function redeclarations, you should use unique names as much as possible and declare variables with\n\u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e only.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d \u0027foo\u0027;\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  const newName \u003d \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#redeclarations\"\u003eMDN - Variable redeclarations\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function#redeclarations\"\u003eMDN - Function\n  redeclarations\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN - \u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN - \u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN - \u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1848",
    "name": "Objects should not be created to be dropped immediately without being used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating an object without assigning it to a variable or using it in any function means the object is essentially created for no reason and may be\ndropped immediately without being used. Most of the time, this is due to a missing piece of code and could lead to an unexpected behavior.\u003c/p\u003e\n\u003cp\u003eIf itâ€™s intended because the constructor has side effects, that side effect should be moved into a separate method and called directly. This can\nhelp to improve the performance and readability of the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew MyConstructor(); // Noncompliant: object may be dropped\n\u003c/pre\u003e\n\u003cp\u003eDetermine if the objects are necessary for the code to function correctly. If they are not required, remove them from the code. Otherwise, assign\nthem to a variable for later use.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet something \u003d new MyConstructor();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Creating new objects inside a \u003ccode\u003etry\u003c/code\u003e block is ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ntry {\n  new MyConstructor();\n} catch (e) {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Known constructors with side effects like \u003ccode\u003eNotification\u003c/code\u003e or \u003ccode\u003eVue\u003c/code\u003e are also ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"\u003e\u003ccode\u003eObject.prototype.constructor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating an object without assigning it to a variable or using it in any function means the object is essentially created for no reason and may be\ndropped immediately without being used. Most of the time, this is due to a missing piece of code and could lead to an unexpected behavior.\u003c/p\u003e\n\u003cp\u003eIf itâ€™s intended because the constructor has side effects, that side effect should be moved into a separate method and called directly. This can\nhelp to improve the performance and readability of the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nnew MyConstructor(); // Noncompliant: object may be dropped\n\u003c/pre\u003e\n\u003cp\u003eDetermine if the objects are necessary for the code to function correctly. If they are not required, remove them from the code. Otherwise, assign\nthem to a variable for later use.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet something \u003d new MyConstructor();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Creating new objects inside a \u003ccode\u003etry\u003c/code\u003e block is ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ntry {\n  new MyConstructor();\n} catch (e) {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Known constructors with side effects like \u003ccode\u003eNotification\u003c/code\u003e or \u003ccode\u003eVue\u003c/code\u003e are also ignored. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"\u003e\u003ccode\u003eObject.prototype.constructor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:ConstructorFunctionsForSideEffects"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2817",
    "name": "Web SQL databases should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some\nbrowsers. (It is not supported in Firefox or IE.)\u003c/p\u003e\n\u003cp\u003eFurther, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar db \u003d window.openDatabase(\"myDb\", \"1.0\", \"Personal secrets stored here\", 2*1024*1024);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eOWASP Top 10 2017 Category A9\u003c/a\u003e -\n  Using Components with Known Vulnerabilities \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some\nbrowsers. (It is not supported in Firefox or IE.)\u003c/p\u003e\n\u003cp\u003eFurther, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar db \u003d window.openDatabase(\"myDb\", \"1.0\", \"Personal secrets stored here\", 2*1024*1024);  // Noncompliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eOWASP Top 10 2017 Category A9\u003c/a\u003e -\n  Using Components with Known Vulnerabilities \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6281",
    "name": "Allowing public ACLs or policies on a S3 bucket is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy default S3 buckets are private, it means that only the bucket owner can access it.\u003c/p\u003e\n\u003cp\u003eThis access control can be relaxed with ACLs or policies.\u003c/p\u003e\n\u003cp\u003eTo prevent permissive policies or ACLs to be set on a S3 bucket the following booleans settings can be enabled:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eblockPublicAcls\u003c/code\u003e: to block or not public ACLs to be set to the S3 bucket. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eignorePublicAcls\u003c/code\u003e: to consider or not existing public ACLs set to the S3 bucket. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eblockPublicPolicy\u003c/code\u003e: to block or not public policies to be set to the S3 bucket. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003erestrictPublicBuckets\u003c/code\u003e: to restrict or not the access to the S3 endpoints of public policies to the principals within the bucket\n  owner account. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe other attribute \u003ccode\u003eBlockPublicAccess.BLOCK_ACLS\u003c/code\u003e only turns on \u003ccode\u003eblockPublicAcls\u003c/code\u003e and \u003ccode\u003eignorePublicAcls\u003c/code\u003e. The\npublic policies can still affect the S3 bucket.\u003c/p\u003e\n\u003cp\u003eHowever, all of those options can be enabled by setting the \u003ccode\u003eblockPublicAccess\u003c/code\u003e property of the S3 bucket to\n\u003ccode\u003eBlockPublicAccess.BLOCK_ALL\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The S3 bucket stores sensitive data. \u003c/li\u003e\n  \u003cli\u003e The S3 bucket is not used to store static resources of websites (images, css â€¦â€‹). \u003c/li\u003e\n  \u003cli\u003e Many users have the permission to set ACL or policy to the S3 bucket. \u003c/li\u003e\n  \u003cli\u003e These settings are not already enforced to true at the account level. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eBy default, when not set, the \u003ccode\u003eblockPublicAccess\u003c/code\u003e is fully deactivated (nothing is blocked):\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027\n}); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eThis \u003ccode\u003eblock_public_access\u003c/code\u003e allows public ACL to be set:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    blockPublicAccess: new s3.BlockPublicAccess({\n        blockPublicAcls         : false, // Sensitive\n        blockPublicPolicy       : true,\n        ignorePublicAcls        : true,\n        restrictPublicBuckets   : true\n    })\n});\n\u003c/pre\u003e\n\u003cp\u003eThe attribute \u003ccode\u003eBLOCK_ACLS\u003c/code\u003e only blocks and ignores public ACLs:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ACLS // Sensitive\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to configure:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eblockPublicAcls\u003c/code\u003e to \u003ccode\u003eTrue\u003c/code\u003e to block new attempts to set public ACLs. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eignorePublicAcls\u003c/code\u003e to \u003ccode\u003eTrue\u003c/code\u003e to block existing public ACLs. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eblockPublicPolicy\u003c/code\u003e to \u003ccode\u003eTrue\u003c/code\u003e to block new attempts to set public policies. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003erestrictPublicBuckets\u003c/code\u003e to \u003ccode\u003eTrue\u003c/code\u003e to restrict existing public policies. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eThis \u003ccode\u003eblockPublicAccess\u003c/code\u003e blocks public ACLs and policies, ignores existing public ACLs and restricts existing public policies:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL\n});\n\u003c/pre\u003e\n\u003cp\u003eA similar configuration to the one above can be obtained by setting all parameters of the \u003ccode\u003eblockPublicAccess\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    blockPublicAccess: new s3.BlockPublicAccess({\n        blockPublicAcls         : true,\n        blockPublicPolicy       : true,\n        ignorePublicAcls        : true,\n        restrictPublicBuckets   : true\n    })\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\"\u003eAWS Documentation\u003c/a\u003e - Blocking public\n  access to your Amazon S3 storage \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.BlockPublicAccess.html\"\u003eAWS CDK version 2\u003c/a\u003e - BlockPublicAccess \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S128",
    "name": "Switch cases should end with an unconditional \"break\" statement",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both \u0027doSomething()\u0027 and \u0027doSomethingElse()\u0027 will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule is relaxed in the following cases:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/484\"\u003eMITRE, CWE-484\u003c/a\u003e - Omitted Break Statement in Switch \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both \u0027doSomething()\u0027 and \u0027doSomethingElse()\u0027 will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule is relaxed in the following cases:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/484\"\u003eMITRE, CWE-484\u003c/a\u003e - Omitted Break Statement in Switch \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:NonEmptyCaseWithoutBreak"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S126",
    "name": "\"if ... else if\" constructs should end with \"else\" clauses",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw \"Unexpected value for x\";\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw \"Unexpected value for x\";\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:ElseIfWithoutElse"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S125",
    "name": "Sections of code should not be commented out",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCommented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.\u003c/p\u003e\n\u003cp\u003eCommented-out code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCommented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.\u003c/p\u003e\n\u003cp\u003eCommented-out code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [
      "javascript:CommentedCode"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S134",
    "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested control flow statements such as \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e are often\nkey ingredients in creating whatâ€™s known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the codeâ€™s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {                  // Compliant - depth \u003d 1\n  /* ... */\n  if (condition2) {                // Compliant - depth \u003d 2\n    /* ... */\n    for (let i \u003d 0; i \u0026lt; 10; i++) {  // Compliant - depth \u003d 3\n      /* ... */\n      if (condition4) {            // Noncompliant - depth \u003d 4, which exceeds the limit\n        if (condition5) {          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!condition1) {\n  return;\n}\n/* ... */\nif (!condition2) {\n  return;\n}\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  /* ... */\n  if (condition4) {\n    if (condition5) {\n      /* ... */\n    }\n    return;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Guard_(computer_science)\"\u003eGuard clauses in programming\u003c/a\u003e - one of the approaches to reducing the depth\n  of nesting \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested control flow statements such as \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e are often\nkey ingredients in creating whatâ€™s known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the codeâ€™s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {                  // Compliant - depth \u003d 1\n  /* ... */\n  if (condition2) {                // Compliant - depth \u003d 2\n    /* ... */\n    for (let i \u003d 0; i \u0026lt; 10; i++) {  // Compliant - depth \u003d 3\n      /* ... */\n      if (condition4) {            // Noncompliant - depth \u003d 4, which exceeds the limit\n        if (condition5) {          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!condition1) {\n  return;\n}\n/* ... */\nif (!condition2) {\n  return;\n}\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  /* ... */\n  if (condition4) {\n    if (condition5) {\n      /* ... */\n    }\n    return;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Guard_(computer_science)\"\u003eGuard clauses in programming\u003c/a\u003e - one of the approaches to reducing the depth\n  of nesting \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "maximumNestingLevel": {
        "key": "maximumNestingLevel",
        "name": "maximumNestingLevel",
        "description": "Maximum allowed \"if/for/while/switch/try\" statements nesting depth",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumNestingLevel": "3"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [
      "javascript:NestedIfDepth"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S131",
    "name": "\"switch\" statements should have \"default\" clauses",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores \u003ccode\u003eswitch\u003c/code\u003e statements where the discriminant is a TypeScript union and there is a \u003ccode\u003ecase\u003c/code\u003e branch for each\nconstituent.\u003c/p\u003e\n\u003cpre\u003e\ntype Season \u003d \u0027Spring\u0027 | \u0027Summer\u0027 | \u0027Fall\u0027 | \u0027Winter\u0027;\nlet season: Season;\nswitch (season) {\n  case \u0027Spring\u0027:\n    wakeUp();\n    break;\n  case \u0027Summer\u0027:\n    getOut();\n    break;\n  case \u0027Fall\u0027:\n    saveFood();\n    break;\n  case \u0027Winter\u0027:\n    sleep();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe same applies for TypeScript enums.\u003c/p\u003e\n\u003cpre\u003e\nenum Direction {\n  Up,\n  Down\n}\n\nlet dir: Direction;\nswitch (dir) {\n  case Direction.Up:\n    getUp();\n    break;\n  case Direction.Down:\n    getDown();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores \u003ccode\u003eswitch\u003c/code\u003e statements where the discriminant is a TypeScript union and there is a \u003ccode\u003ecase\u003c/code\u003e branch for each\nconstituent.\u003c/p\u003e\n\u003cpre\u003e\ntype Season \u003d \u0027Spring\u0027 | \u0027Summer\u0027 | \u0027Fall\u0027 | \u0027Winter\u0027;\nlet season: Season;\nswitch (season) {\n  case \u0027Spring\u0027:\n    wakeUp();\n    break;\n  case \u0027Summer\u0027:\n    getOut();\n    break;\n  case \u0027Fall\u0027:\n    saveFood();\n    break;\n  case \u0027Winter\u0027:\n    sleep();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eThe same applies for TypeScript enums.\u003c/p\u003e\n\u003cpre\u003e\nenum Direction {\n  Up,\n  Down\n}\n\nlet dir: Direction;\nswitch (dir) {\n  case Direction.Up:\n    getUp();\n    break;\n  case Direction.Down:\n    getDown();\n    break;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "cwe",
      "type-dependent"
    ],
    "deprecatedKeys": [
      "javascript:SwitchWithoutDefault"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6079",
    "name": "Tests should not execute any code after \"done()\" is called",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003edone\u003c/code\u003e callback of Mocha is used to signal the end of an asynchronous test. It is called when the test is complete, either\nsuccessfully or with an error. It is important not to follow the \u003ccode\u003edone\u003c/code\u003e callback with code because the test may not have completed yet, and\nthe code may execute before the test is finished. This can lead to unpredictable results and make it difficult to debug issues.\u003c/p\u003e\n\u003cp\u003eIt is recommended to use the \u003ccode\u003edone\u003c/code\u003e callback only to signal the end of the test and handle any necessary cleanup or assertions before\nthe callback.\u003c/p\u003e\n\u003cp\u003eHereâ€™s a bad example of using Mochaâ€™s \u003ccode\u003edone\u003c/code\u003e callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\u0027My test suite\u0027, function() {\n  it(\u0027should do something asynchronously\u0027, function(done) {\n    setTimeout(function() {\n        expect(2 + 2).to.equal(4);\n        expect(\u0027hello\u0027).to.have.lengthOf(5);\n        done();\n\n        console.log(\u0027Test has completed.\u0027); // Noncompliant: Code after calling done, which may produce unexpected behavior\n    }, 1000);\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eSince the \u003ccode\u003econsole.log\u003c/code\u003e statement is executed after calling \u003ccode\u003edone()\u003c/code\u003e, there is no guarantee that it will run after the test\nhas fully completed. It may be correctly executed, but it might as well be assigned to a different test, no test, or even completely ignored.\u003c/p\u003e\n\u003cp\u003eTo fix this, the \u003ccode\u003edone\u003c/code\u003e callback should be called after the \u003ccode\u003econsole.log\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\u0027My test suite\u0027, function() {\n  it(\u0027should do something asynchronously\u0027, function(done) {\n    setTimeout(function() {\n        expect(2 + 2).to.equal(4);\n        expect(\u0027hello\u0027).to.have.lengthOf(5);\n\n        console.log(\u0027Test has completed.\u0027);\n        done();\n    }, 1000);\n  });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#asynchronous-code\"\u003eAsynchronous code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003edone\u003c/code\u003e callback of Mocha is used to signal the end of an asynchronous test. It is called when the test is complete, either\nsuccessfully or with an error. It is important not to follow the \u003ccode\u003edone\u003c/code\u003e callback with code because the test may not have completed yet, and\nthe code may execute before the test is finished. This can lead to unpredictable results and make it difficult to debug issues.\u003c/p\u003e\n\u003cp\u003eIt is recommended to use the \u003ccode\u003edone\u003c/code\u003e callback only to signal the end of the test and handle any necessary cleanup or assertions before\nthe callback.\u003c/p\u003e\n\u003cp\u003eHereâ€™s a bad example of using Mochaâ€™s \u003ccode\u003edone\u003c/code\u003e callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\u0027My test suite\u0027, function() {\n  it(\u0027should do something asynchronously\u0027, function(done) {\n    setTimeout(function() {\n        expect(2 + 2).to.equal(4);\n        expect(\u0027hello\u0027).to.have.lengthOf(5);\n        done();\n\n        console.log(\u0027Test has completed.\u0027); // Noncompliant: Code after calling done, which may produce unexpected behavior\n    }, 1000);\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eSince the \u003ccode\u003econsole.log\u003c/code\u003e statement is executed after calling \u003ccode\u003edone()\u003c/code\u003e, there is no guarantee that it will run after the test\nhas fully completed. It may be correctly executed, but it might as well be assigned to a different test, no test, or even completely ignored.\u003c/p\u003e\n\u003cp\u003eTo fix this, the \u003ccode\u003edone\u003c/code\u003e callback should be called after the \u003ccode\u003econsole.log\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\u0027My test suite\u0027, function() {\n  it(\u0027should do something asynchronously\u0027, function(done) {\n    setTimeout(function() {\n        expect(2 + 2).to.equal(4);\n        expect(\u0027hello\u0027).to.have.lengthOf(5);\n\n        console.log(\u0027Test has completed.\u0027);\n        done();\n    }, 1000);\n  });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#asynchronous-code\"\u003eAsynchronous code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "mocha",
      "tests",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3801",
    "name": "Functions should use \"return\" consistently",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.\u003c/p\u003e\n\u003cp\u003eIn particular a function, in JavaScript, will return \u003ccode\u003eundefined\u003c/code\u003e in any of the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It exits without a \u003ccode\u003ereturn\u003c/code\u003e statement. \u003c/li\u003e\n  \u003cli\u003e It executes a \u003ccode\u003ereturn\u003c/code\u003e with no value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule verifies that return values are either always or never specified for each path through a function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(a) { // Noncompliant, function exits without \"return\"\n  if (a \u003d\u003d 1) {\n    return true;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(a) {\n  if (a \u003d\u003d 1) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.\u003c/p\u003e\n\u003cp\u003eIn particular a function, in JavaScript, will return \u003ccode\u003eundefined\u003c/code\u003e in any of the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It exits without a \u003ccode\u003ereturn\u003c/code\u003e statement. \u003c/li\u003e\n  \u003cli\u003e It executes a \u003ccode\u003ereturn\u003c/code\u003e with no value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule verifies that return values are either always or never specified for each path through a function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(a) { // Noncompliant, function exits without \"return\"\n  if (a \u003d\u003d 1) {\n    return true;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(a) {\n  if (a \u003d\u003d 1) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "api-design",
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3800",
    "name": "Functions should always return the same type",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values.\u003c/p\u003e\n\u003cp\u003eReturning different types from a function can make the code less readable and harder to understand. Maintainers may have to spend more time\nfiguring out how the function works and what it returns. Additionally, it can be harder to ensure that the code is free of type-related errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(a) {  // Noncompliant: function returns \u0027boolean\u0027 or \u0027number\u0027\n  if (a \u003d\u003d\u003d 1) {\n    return true;\n  }\n  return 3;\n}\n\u003c/pre\u003e\n\u003cp\u003eRework the function so that it always returns the same type. This makes the code more consistent and easier to understand. Maintainers can rely on\nthe function to behave in a predictable way.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(a) {\n  if (a \u003d\u003d\u003d 1) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions returning \u003ccode\u003ethis\u003c/code\u003e are ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfunction foo() {\n  // ...\n  return this;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions returning expressions having type \u003ccode\u003eany\u003c/code\u003e are ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values.\u003c/p\u003e\n\u003cp\u003eReturning different types from a function can make the code less readable and harder to understand. Maintainers may have to spend more time\nfiguring out how the function works and what it returns. Additionally, it can be harder to ensure that the code is free of type-related errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(a) {  // Noncompliant: function returns \u0027boolean\u0027 or \u0027number\u0027\n  if (a \u003d\u003d\u003d 1) {\n    return true;\n  }\n  return 3;\n}\n\u003c/pre\u003e\n\u003cp\u003eRework the function so that it always returns the same type. This makes the code more consistent and easier to understand. Maintainers can rely on\nthe function to behave in a predictable way.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(a) {\n  if (a \u003d\u003d\u003d 1) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions returning \u003ccode\u003ethis\u003c/code\u003e are ignored. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfunction foo() {\n  // ...\n  return this;\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Functions returning expressions having type \u003ccode\u003eany\u003c/code\u003e are ignored. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3923",
    "name": "All branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a \u003d (b \u003d\u003d 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif(b \u003d\u003d 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b \u003d\u003d 1) {\n  doSomething();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving all branches of a \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nif (b \u003d\u003d 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a \u003d (b \u003d\u003d 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eswitch\u003c/code\u003e or \u003ccode\u003eif\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e, nor to \u003ccode\u003eswitch\u003c/code\u003e without a \u003ccode\u003edefault\u003c/code\u003e clause.\u003c/p\u003e\n\u003cpre\u003e\nif(b \u003d\u003d 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b \u003d\u003d 1) {\n  doSomething();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1862",
    "name": "\"if/else if\" chains and \"switch\" cases should not have the same condition",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth \u003ccode\u003eif-else\u003c/code\u003e chains and \u003ccode\u003eswitch\u003c/code\u003e statements are used for conditional branching, but they differ in their syntax and the way\nthey handle multiple conditions.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In an \u003ccode\u003eif-else\u003c/code\u003e chain, each condition is checked in order, and only the block associated with the first true condition is executed.\n  If no condition is true, the code inside the \u003ccode\u003eelse\u003c/code\u003e block (if present) will be executed. \u003c/li\u003e\n  \u003cli\u003e In a \u003ccode\u003eswitch\u003c/code\u003e statement, the expression is evaluated once, and its value is compared against each case. If a matching case is found,\n  the corresponding block of code is executed. The \u003ccode\u003ebreak\u003c/code\u003e statement is used to exit the \u003ccode\u003eswitch\u003c/code\u003e block after a match. If no\n  case matches the expression, the code inside the \u003ccode\u003edefault\u003c/code\u003e block (if present) will be executed. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHaving the same condition in both \u003ccode\u003eif-else\u003c/code\u003e chains and \u003ccode\u003eswitch\u003c/code\u003e cases can lead to unreachable code and a potential source of\nbugs. It defeats the purpose of conditional branching and can make the code harder to read and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (event \u003d\u003d\u003d 1) {\n  openWindow();\n} else if (event \u003d\u003d\u003d 2) {\n  closeWindow();\n} else if (event \u003d\u003d\u003d 1) {  // Noncompliant: Duplicated condition \u0027event \u003d\u003d\u003d 1\u0027\n  moveWindowToTheBackground();\n}\n\nswitch (event) {\n  case 1:\n    openWindow();\n    break;\n  case 2:\n    closeWindow();\n    break;\n  case 1: // Noncompliant: Duplicated case \u00271\u0027\n    moveWindowToTheBackground();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eCarefully review your conditions and ensure that they are not duplicated across the \u003ccode\u003eif-else\u003c/code\u003e chain or \u003ccode\u003eswitch\u003c/code\u003e statement.\nUse distinct conditions and default blocks to cover all scenarios without redundant checks.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (event \u003d\u003d\u003d 1) {\n  openWindow();\n} else if (event \u003d\u003d\u003d 2) {\n  closeWindow();\n} else if (event \u003d\u003d\u003d 3) {\n  moveWindowToTheBackground();\n}\n\nswitch (event) {\n  case 1:\n    openWindow();\n    break;\n  case 2:\n    closeWindow();\n    break;\n  case 3:\n    moveWindowToTheBackground();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth \u003ccode\u003eif-else\u003c/code\u003e chains and \u003ccode\u003eswitch\u003c/code\u003e statements are used for conditional branching, but they differ in their syntax and the way\nthey handle multiple conditions.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In an \u003ccode\u003eif-else\u003c/code\u003e chain, each condition is checked in order, and only the block associated with the first true condition is executed.\n  If no condition is true, the code inside the \u003ccode\u003eelse\u003c/code\u003e block (if present) will be executed. \u003c/li\u003e\n  \u003cli\u003e In a \u003ccode\u003eswitch\u003c/code\u003e statement, the expression is evaluated once, and its value is compared against each case. If a matching case is found,\n  the corresponding block of code is executed. The \u003ccode\u003ebreak\u003c/code\u003e statement is used to exit the \u003ccode\u003eswitch\u003c/code\u003e block after a match. If no\n  case matches the expression, the code inside the \u003ccode\u003edefault\u003c/code\u003e block (if present) will be executed. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHaving the same condition in both \u003ccode\u003eif-else\u003c/code\u003e chains and \u003ccode\u003eswitch\u003c/code\u003e cases can lead to unreachable code and a potential source of\nbugs. It defeats the purpose of conditional branching and can make the code harder to read and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (event \u003d\u003d\u003d 1) {\n  openWindow();\n} else if (event \u003d\u003d\u003d 2) {\n  closeWindow();\n} else if (event \u003d\u003d\u003d 1) {  // Noncompliant: Duplicated condition \u0027event \u003d\u003d\u003d 1\u0027\n  moveWindowToTheBackground();\n}\n\nswitch (event) {\n  case 1:\n    openWindow();\n    break;\n  case 2:\n    closeWindow();\n    break;\n  case 1: // Noncompliant: Duplicated case \u00271\u0027\n    moveWindowToTheBackground();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eCarefully review your conditions and ensure that they are not duplicated across the \u003ccode\u003eif-else\u003c/code\u003e chain or \u003ccode\u003eswitch\u003c/code\u003e statement.\nUse distinct conditions and default blocks to cover all scenarios without redundant checks.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (event \u003d\u003d\u003d 1) {\n  openWindow();\n} else if (event \u003d\u003d\u003d 2) {\n  closeWindow();\n} else if (event \u003d\u003d\u003d 3) {\n  moveWindowToTheBackground();\n}\n\nswitch (event) {\n  case 1:\n    openWindow();\n    break;\n  case 2:\n    closeWindow();\n    break;\n  case 3:\n    moveWindowToTheBackground();\n    break;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2819",
    "name": "Origins should be verified during cross-origin communications",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eCross-origin communication allows different websites to interact with each other. This interaction is typically achieved through mechanisms like\nAJAX requests, WebSockets, or postMessage API. However, a vulnerability can arise when these communications are not properly secured by verifying\ntheir origins.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWithout origin verification, the target website cannot distinguish between legitimate requests from its own pages and malicious requests from an\nattackerâ€™s site. The attacker can craft a malicious website or script that sends requests to a target website where the user is already\nauthenticated.\u003c/p\u003e\n\u003cp\u003eThis vulnerability class is not about a single specific user input or action, but rather a series of actions that lead to an insecure cross-origin\ncommunication.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe absence of origin verification during cross-origin communications can lead to serious security issues.\u003c/p\u003e\n\u003ch4\u003eData Breach\u003c/h4\u003e\n\u003cp\u003eIf an attacker can successfully exploit this vulnerability, they may gain unauthorized access to sensitive data. For instance, a userâ€™s personal\ninformation, financial details, or other confidential data could be exposed. This not only compromises the userâ€™s privacy but can also lead to\nidentity theft or financial loss.\u003c/p\u003e\n\u003ch4\u003eUnauthorized Actions\u003c/h4\u003e\n\u003cp\u003eAn attacker could manipulate the communication between websites to perform actions on behalf of the user without their knowledge. This could range\nfrom making unauthorized purchases to changing user settings or even deleting accounts.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhen sending a message, avoid using \u003ccode\u003e*\u003c/code\u003e for the target origin (it means no preference). Instead define it explicitly so the message will\nonly be dispatched to this URI. When receiving the message, verify the orgin to be sure that it is sent by an authorized sender.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWhen sending a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar iframe \u003d document.getElementById(\"testiframe\");\niframe.contentWindow.postMessage(\"hello\", \"*\"); // Noncompliant: * is used\n\u003c/pre\u003e\n\u003cp\u003eWhen receiving a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nwindow.addEventListener(\"message\", function(event) { // Noncompliant: no checks are done on the origin property.\n  console.log(event.data);\n });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWhen sending a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar iframe \u003d document.getElementById(\"testiframe\");\niframe.contentWindow.postMessage(\"hello\", \"https://secure.example.com\");\n\u003c/pre\u003e\n\u003cp\u003eWhen receiving a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nwindow.addEventListener(\"message\", function(event) {\n  if (event.origin !\u003d\u003d \"http://example.org\")\n    return;\n\n  console.log(event.data)\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"\u003epostMessage API\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/345.html\"\u003eCWE-345 - Insufficient Verification of Data Authenticity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eCross-origin communication allows different websites to interact with each other. This interaction is typically achieved through mechanisms like\nAJAX requests, WebSockets, or postMessage API. However, a vulnerability can arise when these communications are not properly secured by verifying\ntheir origins.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWithout origin verification, the target website cannot distinguish between legitimate requests from its own pages and malicious requests from an\nattackerâ€™s site. The attacker can craft a malicious website or script that sends requests to a target website where the user is already\nauthenticated.\u003c/p\u003e\n\u003cp\u003eThis vulnerability class is not about a single specific user input or action, but rather a series of actions that lead to an insecure cross-origin\ncommunication.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe absence of origin verification during cross-origin communications can lead to serious security issues.\u003c/p\u003e\n\u003ch4\u003eData Breach\u003c/h4\u003e\n\u003cp\u003eIf an attacker can successfully exploit this vulnerability, they may gain unauthorized access to sensitive data. For instance, a userâ€™s personal\ninformation, financial details, or other confidential data could be exposed. This not only compromises the userâ€™s privacy but can also lead to\nidentity theft or financial loss.\u003c/p\u003e\n\u003ch4\u003eUnauthorized Actions\u003c/h4\u003e\n\u003cp\u003eAn attacker could manipulate the communication between websites to perform actions on behalf of the user without their knowledge. This could range\nfrom making unauthorized purchases to changing user settings or even deleting accounts.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhen sending a message, avoid using \u003ccode\u003e*\u003c/code\u003e for the target origin (it means no preference). Instead define it explicitly so the message will\nonly be dispatched to this URI. When receiving the message, verify the orgin to be sure that it is sent by an authorized sender.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWhen sending a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar iframe \u003d document.getElementById(\"testiframe\");\niframe.contentWindow.postMessage(\"hello\", \"*\"); // Noncompliant: * is used\n\u003c/pre\u003e\n\u003cp\u003eWhen receiving a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nwindow.addEventListener(\"message\", function(event) { // Noncompliant: no checks are done on the origin property.\n  console.log(event.data);\n });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWhen sending a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar iframe \u003d document.getElementById(\"testiframe\");\niframe.contentWindow.postMessage(\"hello\", \"https://secure.example.com\");\n\u003c/pre\u003e\n\u003cp\u003eWhen receiving a message:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nwindow.addEventListener(\"message\", function(event) {\n  if (event.origin !\u003d\u003d \"http://example.org\")\n    return;\n\n  console.log(event.data)\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"\u003epostMessage API\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/345.html\"\u003eCWE-345 - Insufficient Verification of Data Authenticity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "html5",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1854",
    "name": "Unused assignments should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and donâ€™t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the programâ€™s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Initializations to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003e[]\u003c/code\u003e, \u003ccode\u003e{}\u003c/code\u003e,\n  \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e and \u003ccode\u003e\"\"\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Variables that start with an underscore (e.g. \u003ccode\u003e_unused\u003c/code\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Assignment of \u003ccode\u003enull\u003c/code\u003e is ignored because it is sometimes used to help garbage collection \u003c/li\u003e\n  \u003cli\u003e Increment and decrement expressions are ignored because they are often used idiomatically instead of \u003ccode\u003ex+1\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet {a, b, ...rest} \u003d obj;  // \u0027a\u0027 and \u0027b\u0027 are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] \u003d arr;     // \u0027x1\u0027 is noncompliant, as omitting syntax can be used: \"let [, x2, x3] \u003d arr;\"\ndoSomething(x2, x3);\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(y) {\n  let x \u003d 100; // Noncompliant: dead store\n  x \u003d 150;     // Noncompliant: dead store\n  x \u003d 200;\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(y) {\n  let x \u003d 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003e563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1763} - All code should be reachable \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S2589} - Boolean expressions should not be gratuitous \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S3516} - Function returns should not be invariant \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S3626} - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and donâ€™t contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the programâ€™s correctness, they are - at best - a waste\nof computing resources.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Initializations to \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003e[]\u003c/code\u003e, \u003ccode\u003e{}\u003c/code\u003e,\n  \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e and \u003ccode\u003e\"\"\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Variables that start with an underscore (e.g. \u003ccode\u003e_unused\u003c/code\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Assignment of \u003ccode\u003enull\u003c/code\u003e is ignored because it is sometimes used to help garbage collection \u003c/li\u003e\n  \u003cli\u003e Increment and decrement expressions are ignored because they are often used idiomatically instead of \u003ccode\u003ex+1\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object) \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet {a, b, ...rest} \u003d obj;  // \u0027a\u0027 and \u0027b\u0027 are compliant\ndoSomething(rest);\n\nlet [x1, x2, x3] \u003d arr;     // \u0027x1\u0027 is noncompliant, as omitting syntax can be used: \"let [, x2, x3] \u003d arr;\"\ndoSomething(x2, x3);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove the unnecesarry assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(y) {\n  let x \u003d 100; // Noncompliant: dead store\n  x \u003d 150;     // Noncompliant: dead store\n  x \u003d 200;\n  return x + y;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(y) {\n  let x \u003d 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563\"\u003e563 - Assignment to Variable without Use (\u0027Unused Variable\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1763} - All code should be reachable \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S2589} - Boolean expressions should not be gratuitous \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S3516} - Function returns should not be invariant \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S3626} - Jump statements should not be redundant \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2703",
    "name": "Variables should be declared explicitly",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVariable declaration is the process of creating a new variable and specifying its name. JavaScript provides three ways to declare variables: using\nthe \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003econst\u003c/code\u003e keywords.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003evar\u003c/code\u003e keyword is used to declare function-scoped or global-scoped variables, i.e. they are accessible throughout the function or\n  the entire program, respectively. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003elet\u003c/code\u003e keyword is used to declare block-scoped variables, that is, variables accessible only within the nearest curly braces\n  block where it is defined. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003econst\u003c/code\u003e keyword is used to declare variables that are constant, meaning their values cannot be reassigned. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExplicitly declaring variables improves code readability and maintainability. It makes it clear to other developers that you are creating a new\nvariable and sets expectations about its scope. It also helps catch typos and avoid potential issues caused by accidentally reusing variable\nnames.\u003c/p\u003e\n\u003cp\u003eIf you assign a value to a variable without declaring it with \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e, JavaScript treats it as an\nimplicit global variable. Implicit globals can lead to unintended consequences and make it difficult to track and manage variables. They can cause\nnaming conflicts, make code harder to understand, and introduce bugs that are hard to trace.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction f() {\n  i \u003d 1; // Noncompliant: i is global\n\n  for (j \u003d 0; j \u0026lt; array.length; j++) { // Noncompliant: j is global too\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should explicitly declare all the variables of your code. Use the \u003ccode\u003econst\u003c/code\u003e keyword if the variable is only assigned once and the\n\u003ccode\u003elet\u003c/code\u003e keyword otherwise.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction f() {\n  const i \u003d 1;\n\n  for (let j \u003d 0; j \u0026lt; array.length; j++) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Variable\"\u003eVariable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declaring_variables\"\u003eDeclaring\n  variables\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_scope\"\u003eVariable scope\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVariable declaration is the process of creating a new variable and specifying its name. JavaScript provides three ways to declare variables: using\nthe \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003econst\u003c/code\u003e keywords.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003evar\u003c/code\u003e keyword is used to declare function-scoped or global-scoped variables, i.e. they are accessible throughout the function or\n  the entire program, respectively. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003elet\u003c/code\u003e keyword is used to declare block-scoped variables, that is, variables accessible only within the nearest curly braces\n  block where it is defined. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003econst\u003c/code\u003e keyword is used to declare variables that are constant, meaning their values cannot be reassigned. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExplicitly declaring variables improves code readability and maintainability. It makes it clear to other developers that you are creating a new\nvariable and sets expectations about its scope. It also helps catch typos and avoid potential issues caused by accidentally reusing variable\nnames.\u003c/p\u003e\n\u003cp\u003eIf you assign a value to a variable without declaring it with \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e, JavaScript treats it as an\nimplicit global variable. Implicit globals can lead to unintended consequences and make it difficult to track and manage variables. They can cause\nnaming conflicts, make code harder to understand, and introduce bugs that are hard to trace.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction f() {\n  i \u003d 1; // Noncompliant: i is global\n\n  for (j \u003d 0; j \u0026lt; array.length; j++) { // Noncompliant: j is global too\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should explicitly declare all the variables of your code. Use the \u003ccode\u003econst\u003c/code\u003e keyword if the variable is only assigned once and the\n\u003ccode\u003elet\u003c/code\u003e keyword otherwise.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction f() {\n  const i \u003d 1;\n\n  for (let j \u003d 0; j \u0026lt; array.length; j++) {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Variable\"\u003eVariable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#declaring_variables\"\u003eDeclaring\n  variables\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_scope\"\u003eVariable scope\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6252",
    "name": "Disabling versioning of S3 buckets is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eS3 buckets can be versioned. When the S3 bucket is unversioned it means that a new version of an object overwrites an existing one in the S3\nbucket.\u003c/p\u003e\n\u003cp\u003eIt can lead to unintentional or intentional information loss.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The bucket stores information that require high availability. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    versioned: false // Sensitive\n});\n\u003c/pre\u003e\n\u003cp\u003eThe default value of \u003ccode\u003eversioned\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e so the absence of this parameter is also sensitive.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to enable S3 versioning and thus to have the possibility to retrieve and restore different versions of an object.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027bucket\u0027,\n    versioned: true\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html\"\u003eAWS documentation\u003c/a\u003e - Using versioning in S3 buckets \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html#versioned\"\u003eAWS CDK version 2\u003c/a\u003e - Using versioning in S3\n  buckets \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5042",
    "name": "Expanding archive files without controlling resource consumption is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme \u003ca href\u003d\"https://en.wikipedia.org/wiki/Data_compression_ratio\"\u003ecompression ratio\u003c/a\u003e, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eArchives to expand are untrusted and:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e There is no validation of the number of entries in the archive. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the ratio between the compressed and uncompressed archive entry. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/npm/node-tar\"\u003etar\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst tar \u003d require(\u0027tar\u0027);\n\ntar.x({ // Sensitive\n  file: \u0027foo.tar.gz\u0027\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/cthackers/adm-zip\"\u003eadm-zip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst AdmZip \u003d require(\u0027adm-zip\u0027);\n\nlet zip \u003d new AdmZip(\"./foo.zip\");\nzip.extractAllTo(\".\"); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://stuk.github.io/jszip/\"\u003ejszip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst fs \u003d require(\"fs\");\nconst JSZip \u003d require(\"jszip\");\n\nfs.readFile(\"foo.zip\", function(err, data) {\n  if (err) throw err;\n  JSZip.loadAsync(data).then(function (zip) { // Sensitive\n    zip.forEach(function (relativePath, zipEntry) {\n      if (!zip.file(zipEntry.name)) {\n        fs.mkdirSync(zipEntry.name);\n      } else {\n        zip.file(zipEntry.name).async(\u0027nodebuffer\u0027).then(function (content) {\n          fs.writeFileSync(zipEntry.name, content);\n        });\n      }\n    });\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/thejoshwolfe/yauzl\"\u003eyauzl\u003c/a\u003e module\u003c/p\u003e\n\u003cpre\u003e\nconst yauzl \u003d require(\u0027yauzl\u0027);\n\nyauzl.open(\u0027foo.zip\u0027, function (err, zipfile) {\n  if (err) throw err;\n\n  zipfile.on(\"entry\", function(entry) {\n    zipfile.openReadStream(entry, function(err, readStream) {\n      if (err) throw err;\n      // TODO: extract\n    });\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/maxogden/extract-zip\"\u003eextract-zip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst extract \u003d require(\u0027extract-zip\u0027)\n\nasync function main() {\n  let target \u003d __dirname + \u0027/test\u0027;\n  await extract(\u0027test.zip\u0027, { dir: target }); // Sensitive\n}\nmain();\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. \u003c/li\u003e\n  \u003cli\u003e Define and control the threshold for maximum total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular itâ€™s not recommended to recursively expand archives (an entry of an archive could be also an archive). \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/npm/node-tar\"\u003etar\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst tar \u003d require(\u0027tar\u0027);\nconst MAX_FILES \u003d 10000;\nconst MAX_SIZE \u003d 1000000000; // 1 GB\n\nlet fileCount \u003d 0;\nlet totalSize \u003d 0;\n\ntar.x({\n  file: \u0027foo.tar.gz\u0027,\n  filter: (path, entry) \u003d\u0026gt; {\n    fileCount++;\n    if (fileCount \u0026gt; MAX_FILES) {\n      throw \u0027Reached max. number of files\u0027;\n    }\n\n    totalSize +\u003d entry.size;\n    if (totalSize \u0026gt; MAX_SIZE) {\n      throw \u0027Reached max. size\u0027;\n    }\n\n    return true;\n  }\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/cthackers/adm-zip\"\u003eadm-zip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst AdmZip \u003d require(\u0027adm-zip\u0027);\nconst MAX_FILES \u003d 10000;\nconst MAX_SIZE \u003d 1000000000; // 1 GB\nconst THRESHOLD_RATIO \u003d 10;\n\nlet fileCount \u003d 0;\nlet totalSize \u003d 0;\nlet zip \u003d new AdmZip(\"./foo.zip\");\nlet zipEntries \u003d zip.getEntries();\nzipEntries.forEach(function(zipEntry) {\n    fileCount++;\n    if (fileCount \u0026gt; MAX_FILES) {\n        throw \u0027Reached max. number of files\u0027;\n    }\n\n    let entrySize \u003d zipEntry.getData().length;\n    totalSize +\u003d entrySize;\n    if (totalSize \u0026gt; MAX_SIZE) {\n        throw \u0027Reached max. size\u0027;\n    }\n\n    let compressionRatio \u003d entrySize / zipEntry.header.compressedSize;\n    if (compressionRatio \u0026gt; THRESHOLD_RATIO) {\n        throw \u0027Reached max. compression ratio\u0027;\n    }\n\n    if (!zipEntry.isDirectory) {\n        zip.extractEntryTo(zipEntry.entryName, \".\");\n    }\n});\n\u003c/pre\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://stuk.github.io/jszip/\"\u003ejszip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst fs \u003d require(\"fs\");\nconst pathmodule \u003d require(\"path\");\nconst JSZip \u003d require(\"jszip\");\n\nconst MAX_FILES \u003d 10000;\nconst MAX_SIZE \u003d 1000000000; // 1 GB\n\nlet fileCount \u003d 0;\nlet totalSize \u003d 0;\nlet targetDirectory \u003d __dirname + \u0027/archive_tmp\u0027;\n\nfs.readFile(\"foo.zip\", function(err, data) {\n  if (err) throw err;\n  JSZip.loadAsync(data).then(function (zip) {\n    zip.forEach(function (relativePath, zipEntry) {\n      fileCount++;\n      if (fileCount \u0026gt; MAX_FILES) {\n        throw \u0027Reached max. number of files\u0027;\n      }\n\n      // Prevent ZipSlip path traversal (S6096)\n      const resolvedPath \u003d pathmodule.join(targetDirectory, zipEntry.name);\n      if (!resolvedPath.startsWith(targetDirectory)) {\n        throw \u0027Path traversal detected\u0027;\n      }\n\n      if (!zip.file(zipEntry.name)) {\n        fs.mkdirSync(resolvedPath);\n      } else {\n        zip.file(zipEntry.name).async(\u0027nodebuffer\u0027).then(function (content) {\n          totalSize +\u003d content.length;\n          if (totalSize \u0026gt; MAX_SIZE) {\n            throw \u0027Reached max. size\u0027;\n          }\n\n          fs.writeFileSync(resolvedPath, content);\n        });\n      }\n    });\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\u003c/p\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/thejoshwolfe/yauzl\"\u003eyauzl\u003c/a\u003e module\u003c/p\u003e\n\u003cpre\u003e\nconst yauzl \u003d require(\u0027yauzl\u0027);\n\nconst MAX_FILES \u003d 10000;\nconst MAX_SIZE \u003d 1000000000; // 1 GB\nconst THRESHOLD_RATIO \u003d 10;\n\nyauzl.open(\u0027foo.zip\u0027, function (err, zipfile) {\n  if (err) throw err;\n\n  let fileCount \u003d 0;\n  let totalSize \u003d 0;\n\n  zipfile.on(\"entry\", function(entry) {\n    fileCount++;\n    if (fileCount \u0026gt; MAX_FILES) {\n      throw \u0027Reached max. number of files\u0027;\n    }\n\n    // The uncompressedSize comes from the zip headers, so it might not be trustworthy.\n    // Alternatively, calculate the size from the readStream.\n    let entrySize \u003d entry.uncompressedSize;\n    totalSize +\u003d entrySize;\n    if (totalSize \u0026gt; MAX_SIZE) {\n      throw \u0027Reached max. size\u0027;\n    }\n\n    if (entry.compressedSize \u0026gt; 0) {\n      let compressionRatio \u003d entrySize / entry.compressedSize;\n      if (compressionRatio \u0026gt; THRESHOLD_RATIO) {\n        throw \u0027Reached max. compression ratio\u0027;\n      }\n    }\n\n    zipfile.openReadStream(entry, function(err, readStream) {\n      if (err) throw err;\n      // TODO: extract\n    });\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eBe aware that due to the similar structure of sensitive and compliant code the issue will be raised in both cases. It is up to the developer to\ndecide if the implementation is secure.\u003c/p\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://github.com/maxogden/extract-zip\"\u003eextract-zip\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst extract \u003d require(\u0027extract-zip\u0027)\n\nconst MAX_FILES \u003d 10000;\nconst MAX_SIZE \u003d 1000000000; // 1 GB\nconst THRESHOLD_RATIO \u003d 10;\n\nasync function main() {\n  let fileCount \u003d 0;\n  let totalSize \u003d 0;\n\n  let target \u003d __dirname + \u0027/foo\u0027;\n  await extract(\u0027foo.zip\u0027, {\n    dir: target,\n    onEntry: function(entry, zipfile) {\n      fileCount++;\n      if (fileCount \u0026gt; MAX_FILES) {\n        throw \u0027Reached max. number of files\u0027;\n      }\n\n      // The uncompressedSize comes from the zip headers, so it might not be trustworthy.\n      // Alternatively, calculate the size from the readStream.\n      let entrySize \u003d entry.uncompressedSize;\n      totalSize +\u003d entrySize;\n      if (totalSize \u0026gt; MAX_SIZE) {\n        throw \u0027Reached max. size\u0027;\n      }\n\n      if (entry.compressedSize \u0026gt; 0) {\n        let compressionRatio \u003d entrySize / entry.compressedSize;\n        if (compressionRatio \u0026gt; THRESHOLD_RATIO) {\n          throw \u0027Reached max. compression ratio\u0027;\n        }\n      }\n    }\n  });\n}\nmain();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e -\n  Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/409\"\u003eMITRE, CWE-409\u003c/a\u003e - Improper Handling of Highly Compressed Data (Data Amplification)\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.bamsoftware.com/hacks/zipbomb/\"\u003ebamsoftware.com\u003c/a\u003e - A better Zip Bomb \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6019",
    "name": "Reluctant quantifiers in regular expressions should be followed by an expression that can\u0027t match the empty string",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always\nmatch zero times for \u003ccode\u003e*?\u003c/code\u003e or one time for \u003ccode\u003e+?\u003c/code\u003e. If a reluctant quantifier is followed directly by the end anchor\n(\u003ccode\u003e$\u003c/code\u003e), it behaves indistinguishably from a greedy quantifier while being less efficient.\u003c/p\u003e\n\u003cp\u003eThis is likely a sign that the regex does not work as intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstr.split(/.*?x?/); // Noncompliant, this will behave just like \"x?\"\n/^.*?$/.test(str); // Noncompliant, replace with \".*\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstr.split(/.*?x/);\n/^.*$/.test(str);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always\nmatch zero times for \u003ccode\u003e*?\u003c/code\u003e or one time for \u003ccode\u003e+?\u003c/code\u003e. If a reluctant quantifier is followed directly by the end anchor\n(\u003ccode\u003e$\u003c/code\u003e), it behaves indistinguishably from a greedy quantifier while being less efficient.\u003c/p\u003e\n\u003cp\u003eThis is likely a sign that the regex does not work as intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstr.split(/.*?x?/); // Noncompliant, this will behave just like \"x?\"\n/^.*?$/.test(str); // Noncompliant, replace with \".*\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstr.split(/.*?x/);\n/^.*$/.test(str);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6481",
    "name": "React Context Provider values should have stable identities",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhenever the \u003ccode\u003evalue\u003c/code\u003e property of React context changes, React will rerender the context and all its child nodes and consumers. In\nJavaScript, things like object literals or function expressions will create a new identity every time they are evaluated. Such constructions should\nnot be directly used as context \u003ccode\u003evalue\u003c/code\u003e because React will always consider they have changed. This can significantly impact\nperformance.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  return (\n    \u0026lt;SomeContext.Provider value\u003d{{foo: \u0027bar\u0027}}\u0026gt; { /* Noncompliant: value is an object literal */ }\n      \u0026lt;SomeComponent /\u0026gt;\n    \u0026lt;/SomeContext.Provider\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid additional rerenders wrap the value in a \u003ccode\u003euseMemo\u003c/code\u003e hook. Use the \u003ccode\u003euseCallback()\u003c/code\u003e hook if the value is a\nfunction.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  const obj \u003d useMemo(() \u003d\u0026gt; ({foo: \u0027bar\u0027}), []); // value is cached by useMemo\n  return (\n    \u0026lt;SomeContext.Provider value\u003d{obj}\u0026gt; { /* Compliant */ }\n      \u0026lt;SomeComponent /\u0026gt;\n    \u0026lt;/SomeContext.Provider\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/context.html#caveats\"\u003eContext Caveats\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-data-deeply-with-context\"\u003ePassing Data Deeply with Context\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useCallback\"\u003e\u003ccode\u003euseCallback\u003c/code\u003e hook\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useMemo\"\u003e\u003ccode\u003euseMemo\u003c/code\u003e hook\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhenever the \u003ccode\u003evalue\u003c/code\u003e property of React context changes, React will rerender the context and all its child nodes and consumers. In\nJavaScript, things like object literals or function expressions will create a new identity every time they are evaluated. Such constructions should\nnot be directly used as context \u003ccode\u003evalue\u003c/code\u003e because React will always consider they have changed. This can significantly impact\nperformance.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  return (\n    \u0026lt;SomeContext.Provider value\u003d{{foo: \u0027bar\u0027}}\u0026gt; { /* Noncompliant: value is an object literal */ }\n      \u0026lt;SomeComponent /\u0026gt;\n    \u0026lt;/SomeContext.Provider\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid additional rerenders wrap the value in a \u003ccode\u003euseMemo\u003c/code\u003e hook. Use the \u003ccode\u003euseCallback()\u003c/code\u003e hook if the value is a\nfunction.\u003c/p\u003e\n\u003cpre\u003e\nfunction Component() {\n  const obj \u003d useMemo(() \u003d\u0026gt; ({foo: \u0027bar\u0027}), []); // value is cached by useMemo\n  return (\n    \u0026lt;SomeContext.Provider value\u003d{obj}\u0026gt; { /* Compliant */ }\n      \u0026lt;SomeComponent /\u0026gt;\n    \u0026lt;/SomeContext.Provider\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/context.html#caveats\"\u003eContext Caveats\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-data-deeply-with-context\"\u003ePassing Data Deeply with Context\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useCallback\"\u003e\u003ccode\u003euseCallback\u003c/code\u003e hook\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useMemo\"\u003e\u003ccode\u003euseMemo\u003c/code\u003e hook\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6480",
    "name": "Disallow `.bind()` and arrow functions in JSX props",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eFunction.prototype.bind\u003c/code\u003e and arrows functions as attributes will negatively impact performance in React. Each time the parent is\nrendered, the function will be re-created and trigger a render of the component causing excessive renders and more memory use. Wrapping the function\nin a \u003ccode\u003euseCallback\u003c/code\u003e hook will avoid additional renders. This rule ignores \u003ccode\u003eRefs\u003c/code\u003e. This rule does not raise findings on DOM nodes\nsince that may require wrapping the DOM in a component. Still, better performance can be achieved if this rule is respected in DOM nodes too.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Component onClick\u003d{this._handleClick.bind(this)}\u0026gt;\u0026lt;/Component\u0026gt;\n\n\u0026lt;Component onClick\u003d{() \u003d\u0026gt; handleClick()}\u0026gt;\u0026lt;/Component\u0026gt;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction handleClick() {\n    //...\n}\n\n\u0026lt;Component onClick\u003d{handleClick}\u0026gt;\u0026lt;/Component\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eSituation can become more complicated when you need to pass additional parameters to the handler. Consider following component printing the list of\nletters. Consider following non-compliant example\u003c/p\u003e\n\u003cpre\u003e\nclass Alphabet extends React.Component {\n    handleClick(letter) {\n        console.log(`clicked ${letter}`);\n    }\n    render() {\n        return (\u0026lt;div\u0026gt;\u0026lt;ul\u0026gt;\n            {letters.map(letter \u003d\u0026gt;\n                \u0026lt;li key\u003d{letter} onClick\u003d{() \u003d\u0026gt; this.handleClick(letter)}\u0026gt;{letter}\u0026lt;/li\u0026gt;\n            )}\n        \u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;)\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid creating the arrow function you can factor out \u003ccode\u003eli\u003c/code\u003e element as separate child component and use \u003ccode\u003eprops\u003c/code\u003e to pass the\n\u003ccode\u003eletter\u003c/code\u003e and \u003ccode\u003eonClick\u003c/code\u003e handler.\u003c/p\u003e\n\u003cpre\u003e\nclass Alphabet extends React.Component {\n    handleClick(letter) {\n        console.log(`clicked ${letter}`);\n    }\n    render() {\n        return (\u0026lt;div\u0026gt;\u0026lt;ul\u0026gt;\n            {letters.map(letter \u003d\u0026gt;\n                \u0026lt;Letter key\u003d{letter} letter\u003d{letter} handleClick\u003d{this.handleClick}\u0026gt;\u0026lt;/Letter\u0026gt;\n            )}\n        \u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;)\n    }\n}\n\nclass Letter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick \u003d this.handleClick.bind(this)\n    }\n    handleClick() {\n        this.props.handleClick(this.props.letter);\n    }\n    render() {\n        return \u0026lt;li onClick\u003d{this.handleClick}\u0026gt; {this.props.letter} \u0026lt;/li\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003ealternatively you could rewrite \u003ccode\u003eLetter\u003c/code\u003e as a function and use \u003ccode\u003euseCallback\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nfunction Letter({ handleClick, letter }) {\n    const onClick \u003d React.useCallback(() \u003d\u0026gt; handleClick(letter), [letter])\n\n    return \u0026lt;li onClick\u003d{onClick}\u0026gt;{letter}\u0026lt;/li\u0026gt;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://reactjs.org/docs/faq-functions.html\"\u003ePassing Functions to Components\u003c/a\u003e - React documentation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eFunction.prototype.bind\u003c/code\u003e and arrows functions as attributes will negatively impact performance in React. Each time the parent is\nrendered, the function will be re-created and trigger a render of the component causing excessive renders and more memory use. Wrapping the function\nin a \u003ccode\u003euseCallback\u003c/code\u003e hook will avoid additional renders. This rule ignores \u003ccode\u003eRefs\u003c/code\u003e. This rule does not raise findings on DOM nodes\nsince that may require wrapping the DOM in a component. Still, better performance can be achieved if this rule is respected in DOM nodes too.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Component onClick\u003d{this._handleClick.bind(this)}\u0026gt;\u0026lt;/Component\u0026gt;\n\n\u0026lt;Component onClick\u003d{() \u003d\u0026gt; handleClick()}\u0026gt;\u0026lt;/Component\u0026gt;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction handleClick() {\n    //...\n}\n\n\u0026lt;Component onClick\u003d{handleClick}\u0026gt;\u0026lt;/Component\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eSituation can become more complicated when you need to pass additional parameters to the handler. Consider following component printing the list of\nletters. Consider following non-compliant example\u003c/p\u003e\n\u003cpre\u003e\nclass Alphabet extends React.Component {\n    handleClick(letter) {\n        console.log(`clicked ${letter}`);\n    }\n    render() {\n        return (\u0026lt;div\u0026gt;\u0026lt;ul\u0026gt;\n            {letters.map(letter \u003d\u0026gt;\n                \u0026lt;li key\u003d{letter} onClick\u003d{() \u003d\u0026gt; this.handleClick(letter)}\u0026gt;{letter}\u0026lt;/li\u0026gt;\n            )}\n        \u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;)\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid creating the arrow function you can factor out \u003ccode\u003eli\u003c/code\u003e element as separate child component and use \u003ccode\u003eprops\u003c/code\u003e to pass the\n\u003ccode\u003eletter\u003c/code\u003e and \u003ccode\u003eonClick\u003c/code\u003e handler.\u003c/p\u003e\n\u003cpre\u003e\nclass Alphabet extends React.Component {\n    handleClick(letter) {\n        console.log(`clicked ${letter}`);\n    }\n    render() {\n        return (\u0026lt;div\u0026gt;\u0026lt;ul\u0026gt;\n            {letters.map(letter \u003d\u0026gt;\n                \u0026lt;Letter key\u003d{letter} letter\u003d{letter} handleClick\u003d{this.handleClick}\u0026gt;\u0026lt;/Letter\u0026gt;\n            )}\n        \u0026lt;/ul\u0026gt;\u0026lt;/div\u0026gt;)\n    }\n}\n\nclass Letter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick \u003d this.handleClick.bind(this)\n    }\n    handleClick() {\n        this.props.handleClick(this.props.letter);\n    }\n    render() {\n        return \u0026lt;li onClick\u003d{this.handleClick}\u0026gt; {this.props.letter} \u0026lt;/li\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003ealternatively you could rewrite \u003ccode\u003eLetter\u003c/code\u003e as a function and use \u003ccode\u003euseCallback\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nfunction Letter({ handleClick, letter }) {\n    const onClick \u003d React.useCallback(() \u003d\u0026gt; handleClick(letter), [letter])\n\n    return \u0026lt;li onClick\u003d{onClick}\u0026gt;{letter}\u0026lt;/li\u0026gt;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://reactjs.org/docs/faq-functions.html\"\u003ePassing Functions to Components\u003c/a\u003e - React documentation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6486",
    "name": "JSX list components keys should match up between renders",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required in the \u003ccode\u003ekey\u003c/code\u003e attribute for each list item.\nThis UID lets React identify the item throughout its lifetime. Using generated values like \u003ccode\u003eMath.random()\u003c/code\u003e or \u003ccode\u003eDate.now()\u003c/code\u003e is\ndiscouraged as their return value will differ between calls, causing the keys to not match up between renders, recreating the DOM. Also, this may\ncause bugs if values collide.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{Math.random()}\u0026gt; \u0026lt;!-- Noncompliant: Since the \u0027key\u0027 will be different on each render, React will update the DOM unnecessarily --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cp\u003eAvoid using array indexes since, even if they are unique, the order of the elements may change.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6477} - JSX list components should have a key property \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6479} - JSX list components should not use array indexes as key \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo optimize the rendering of React list components, a unique identifier (UID) is required in the \u003ccode\u003ekey\u003c/code\u003e attribute for each list item.\nThis UID lets React identify the item throughout its lifetime. Using generated values like \u003ccode\u003eMath.random()\u003c/code\u003e or \u003ccode\u003eDate.now()\u003c/code\u003e is\ndiscouraged as their return value will differ between calls, causing the keys to not match up between renders, recreating the DOM. Also, this may\ncause bugs if values collide.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{Math.random()}\u0026gt; \u0026lt;!-- Noncompliant: Since the \u0027key\u0027 will be different on each render, React will update the DOM unnecessarily --\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix it, use a string or a number that uniquely identifies the list item. The key must be unique among its siblings, not globally.\u003c/p\u003e\n\u003cp\u003eIf the data comes from a database, database IDs are already unique and are the best option. Otherwise, use a counter or a UUID generator.\u003c/p\u003e\n\u003cp\u003eAvoid using array indexes since, even if they are unique, the order of the elements may change.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction Blog(props) {\n  return (\n    \u0026lt;ul\u0026gt;\n      {props.posts.map((post) \u003d\u0026gt;\n        \u0026lt;li key\u003d{post.id}\u0026gt;\n          {post.title}\n        \u0026lt;/li\u0026gt;\n      )}\n    \u0026lt;/ul\u0026gt;\n  );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/rendering-lists#rules-of-keys\"\u003eRendering lists\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\"\u003eRecursing On Children\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\"\u003eCrypto: randomUUID() method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S6477} - JSX list components should have a key property \u003c/li\u003e\n  \u003cli\u003e {rule:javascript:S6479} - JSX list components should not use array indexes as key \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "jsx",
      "performance",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6245",
    "name": "Disabling server-side encryption of S3 buckets is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eServer-side encryption (SSE) encrypts an object (not the metadata) as it is written to disk (where the S3 bucket resides) and decrypts it as it is\nread from disk. This doesnâ€™t change the way the objects are accessed, as long as the user has the necessary permissions, objects are retrieved as if\nthey were unencrypted. Thus, SSE only helps in the event of disk thefts, improper disposals of disks and other attacks on the AWS infrastructure\nitself.\u003c/p\u003e\n\u003cp\u003eThere are three SSE options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)\n    \u003cul\u003e\n      \u003cli\u003e AWS manages encryption keys and the encryption itself (with AES-256) on its own. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS)\n    \u003cul\u003e\n      \u003cli\u003e AWS manages the encryption (AES-256) of objects and encryption keys provided by the AWS KMS service. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Server-Side Encryption with Customer-Provided Keys (SSE-C)\n    \u003cul\u003e\n      \u003cli\u003e AWS manages only the encryption (AES-256) of objects with encryption keys provided by the customer. AWS doesnâ€™t store the customerâ€™s\n      encryption keys. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The S3 bucket stores sensitive information. \u003c/li\u003e\n  \u003cli\u003e The infrastructure needs to comply to some regulations, like HIPAA or PCI DSS, and other standards. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eServer-side encryption is not used:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    bucketName: \u0027default\u0027\n}); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eBucket encryption is disabled by default.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to use SSE. Choosing the appropriate option depends on the level of control required for the management of encryption keys.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eServer-side encryption with Amazon S3-Managed Keys is used:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    encryption: s3.BucketEncryption.KMS_MANAGED\n});\n\n# Alternatively with a KMS key managed by the user.\n\nnew s3.Bucket(this, \u0027id\u0027, {\n    encryption: s3.BucketEncryption.KMS_MANAGED,\n    encryptionKey: access_key\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html\"\u003eAWS documentation\u003c/a\u003e - Protecting data using\n  server-side encryption \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.BucketEncryption.html\"\u003eAWS CDK version 2\u003c/a\u003e - BucketEncryption \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6249",
    "name": "Authorizing HTTP communications with S3 buckets is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy default, S3 buckets can be accessed through HTTP and HTTPs protocols.\u003c/p\u003e\n\u003cp\u003eAs HTTP is a clear-text protocol, it lacks the encryption of transported data, as well as the capability to build an authenticated connection. It\nmeans that a malicious actor who is able to intercept traffic from the network can read, modify or corrupt the transported content.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The S3 bucket stores sensitive information. \u003c/li\u003e\n  \u003cli\u003e The infrastructure has to comply with AWS Foundational Security Best Practices standard. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eS3 bucket objects access through TLS is not enforced by default:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nconst bucket \u003d new s3.Bucket(this, \u0027example\u0027); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to enforce HTTPS only access by setting \u003ccode\u003eenforceSSL\u003c/code\u003e property to \u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nconst bucket \u003d new s3.Bucket(this, \u0027example\u0027, {\n    bucketName: \u0027example\u0027,\n    versioned: true,\n    publicReadAccess: false,\n    enforceSSL: true\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html#transit\"\u003eAWS documentation\u003c/a\u003e - Enforce encryption\n  of data in transit \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-s3-5\"\u003eAWS Foundational Security\n  Best Practices controls\u003c/a\u003e - S3 buckets should require requests to use Secure Socket Layer \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/319\"\u003eMITRE, CWE-319\u003c/a\u003e - Cleartext Transmission of Sensitive Information \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html\"\u003eAWS CDK version 2\u003c/a\u003e - Bucket \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6270",
    "name": "Policies authorizing public access to resources are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eResource-based policies granting access to all users can lead to information leakage.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The AWS resource stores or processes sensitive data. \u003c/li\u003e\n  \u003cli\u003e The AWS resource is designed to be private. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThis policy allows all users, including anonymous ones, to access an S3 bucket:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\nimport { aws_s3 as s3 } from \u0027aws-cdk-lib\u0027\n\nconst bucket \u003d new s3.Bucket(this, \"ExampleBucket\")\n\nbucket.addToResourcePolicy(new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    actions: [\"s3:*\"],\n    resources: [bucket.arnForObjects(\"*\")],\n    principals: [new iam.AnyPrincipal()] // Sensitive\n}))\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to implement the least privilege principle, i.e. to grant necessary permissions only to users for their required tasks. In the\ncontext of resource-based policies, list the principals that need the access and grant to them only the required privileges.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eThis policy allows only the authorized users:\u003c/p\u003e\n\u003cpre\u003e\nimport { aws_iam as iam } from \u0027aws-cdk-lib\u0027\nimport { aws_s3 as s3 } from \u0027aws-cdk-lib\u0027\n\nconst bucket \u003d new s3.Bucket(this, \"ExampleBucket\")\n\nbucket.addToResourcePolicy(new iam.PolicyStatement({\n    effect: iam.Effect.ALLOW,\n    actions: [\"s3:*\"],\n    resources: [bucket.arnForObjects(\"*\")],\n    principals: [new iam.AccountRootPrincipal()]\n}))\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\"\u003eAWS Documentation\u003c/a\u003e - Grant least\n  privilege \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eMITRE, CWE-732\u003c/a\u003e - Incorrect Permission Assignment for Critical Resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6397",
    "name": "Character classes in regular expressions should not contain only one character",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.\u003c/p\u003e\n\u003cp\u003eThus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/a[b]c/\n/[\\^]/\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/abc/\n/\\^/\n/a[*]c/ // Compliant, see Exceptions\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n\u003ccode\u003e[.]{3}\u003c/code\u003e to match three dots).\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.\u003c/p\u003e\n\u003cp\u003eThus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/a[b]c/\n/[\\^]/\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/abc/\n/\\^/\n/a[*]c/ // Compliant, see Exceptions\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n\u003ccode\u003e[.]{3}\u003c/code\u003e to match three dots).\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6035",
    "name": "Single-character alternations in regular expressions should be replaced with character classes",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:javascript:S5998}).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/a|b|c/; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/[abc]/;\n// or\n/[a-c]/;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:javascript:S5998}).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/a|b|c/; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/[abc]/;\n// or\n/[a-c]/;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6275",
    "name": "Using unencrypted EBS volumes is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon Elastic Block Store (EBS) is a block-storage service for Amazon Elastic Compute Cloud (EC2). EBS volumes can be encrypted, ensuring the\nsecurity of both data-at-rest and data-in-transit between an instance and its attached EBS storage. In the case that adversaries gain physical access\nto the storage medium they are not able to access the data. Encryption can be enabled for specific volumes or for \u003ca\nhref\u003d\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\"\u003eall new volumes and snapshots\u003c/a\u003e. Volumes created\nfrom snapshots inherit their encryption configuration. A volume created from an encrypted snapshot will also be encrypted by default.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The disk contains sensitive data that could cause harm when leaked. \u003c/li\u003e\n  \u003cli\u003e There are compliance requirements for the service to store data encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\"\u003eaws_cdk.aws_ec2.Volume\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { Size } from \u0027aws-cdk-lib\u0027;\nimport { Volume } from \u0027aws-cdk-lib/aws-ec2\u0027;\n\nnew Volume(this, \u0027unencrypted-explicit\u0027, {\n      availabilityZone: \u0027us-west-2a\u0027,\n      size: Size.gibibytes(1),\n      encrypted: false // Sensitive\n    });\n\u003c/pre\u003e\n\u003cpre\u003e\nimport { Size } from \u0027aws-cdk-lib\u0027;\nimport { Volume } from \u0027aws-cdk-lib/aws-ec2\u0027;\n\nnew Volume(this, \u0027unencrypted-implicit\u0027, {\n      availabilityZone: \u0027eu-west-1a\u0027,\n      size: Size.gibibytes(1),\n    }); // Sensitive as encryption is disabled by default\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to encrypt EBS volumes that contain sensitive information. Encryption and decryption are handled transparently by EC2, so no\nfurther modifications to the application are necessary. Instead of enabling encryption for every volume, it is also possible to enable encryption\nglobally for a specific region. While creating volumes from encrypted snapshots will result in them being encrypted, explicitly enabling this security\nparameter will prevent any future unexpected security downgrade.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eFor \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\"\u003eaws_cdk.aws_ec2.Volume\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nimport { Size } from \u0027aws-cdk-lib\u0027;\nimport { Volume } from \u0027aws-cdk-lib/aws-ec2\u0027;\n\nnew Volume(this, \u0027encrypted-explicit\u0027, {\n      availabilityZone: \u0027eu-west-1a\u0027,\n      size: Size.gibibytes(1),\n      encrypted: true\n    });\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\"\u003eAmazon EBS encryption\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/311\"\u003eMITRE, CWE-311\u003c/a\u003e - Missing Encryption of Sensitive Data \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S1821",
    "name": "\"switch\" statements should not be nested",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(n, m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(n, m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nfunction bar(m) {\n  switch(m) {\n    // ...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements, but if you cannot, then consider moving\nthe inner \u003ccode\u003eswitch\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(n, m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo(n, m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nfunction bar(m) {\n  switch(m) {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1940",
    "name": "Boolean checks should not be inverted",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (!(a \u003d\u003d\u003d 2)) { ... }  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d\u003d 2) { ... }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (!(a \u003d\u003d\u003d 2)) { ... }  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (a !\u003d\u003d 2) { ... }\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6265",
    "name": "Granting access to S3 buckets to all or authenticated users is security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePredefined permissions, also known as \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\"\u003ecanned ACLs\u003c/a\u003e,\nare an easy way to grant large privileges to predefined groups or users.\u003c/p\u003e\n\u003cp\u003eThe following canned ACLs are security-sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ePUBLIC_READ\u003c/code\u003e, \u003ccode\u003ePUBLIC_READ_WRITE\u003c/code\u003e grant respectively \"read\" and \"read and write\" privileges to anyone, either\n  authenticated or anonymous (\u003ccode\u003eAllUsers\u003c/code\u003e group). \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAUTHENTICATED_READ\u003c/code\u003e grants \"read\" privilege to all authenticated users (\u003ccode\u003eAuthenticatedUsers\u003c/code\u003e group). \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The S3 bucket stores sensitive data. \u003c/li\u003e\n  \u003cli\u003e The S3 bucket is not used to store static resources of websites (images, css â€¦â€‹). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eAll users, either authenticated or anonymous, have read and write permissions with the \u003ccode\u003ePUBLIC_READ_WRITE\u003c/code\u003e access control:\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027bucket\u0027, {\n    accessControl: s3.BucketAccessControl.PUBLIC_READ_WRITE // Sensitive\n});\n\nnew s3deploy.BucketDeployment(this, \u0027DeployWebsite\u0027, {\n    accessControl: s3.BucketAccessControl.PUBLIC_READ_WRITE // Sensitive\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eItâ€™s recommended to implement the least privilege policy, i.e., to only grant users the necessary permissions for their required tasks. In the\ncontext of canned ACL, set it to \u003ccode\u003ePRIVATE\u003c/code\u003e (the default one), and if needed more granularity then use an appropriate S3 policy.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eWith the \u003ccode\u003ePRIVATE\u003c/code\u003e access control (default), only the bucket owner has the read/write permissions on the bucket and its ACL.\u003c/p\u003e\n\u003cpre\u003e\nconst s3 \u003d require(\u0027aws-cdk-lib/aws-s3\u0027);\n\nnew s3.Bucket(this, \u0027bucket\u0027, {\n    accessControl: s3.BucketAccessControl.PRIVATE\n});\n\nnew s3deploy.BucketDeployment(this, \u0027DeployWebsite\u0027, {\n    accessControl: s3.BucketAccessControl.PRIVATE\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\"\u003eAWS Documentation\u003c/a\u003e - Access control list (ACL)\n  overview (canned ACLs) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/walkthrough1.html\"\u003eAWS Documentation\u003c/a\u003e - Controlling access to a bucket with\n  user policies \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eMITRE, CWE-732\u003c/a\u003e - Incorrect Permission Assignment for Critical Resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284\"\u003eMITRE, CWE-284\u003c/a\u003e - Improper Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html\"\u003eAWS CDK version 2\u003c/a\u003e - Class Bucket (construct) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "aws",
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6268",
    "name": "Disabling Angular built-in sanitization is security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAngular prevents XSS vulnerabilities by treating all values as untrusted by default. Untrusted values are systematically sanitized by the framework\nbefore they are inserted into the DOM.\u003c/p\u003e\n\u003cp\u003eStill, developers have the ability to manually mark a value as trusted if they are sure that the value is already sanitized. Accidentally trusting\nmalicious data will introduce an XSS vulnerability in the application and enable a wide range of serious attacks like accessing/modifying sensitive\ninformation or impersonating other users.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The value for which sanitization has been disabled is user-controlled. \u003c/li\u003e\n  \u003cli\u003e Itâ€™s difficult to understand how this value is constructed. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport { Component, OnInit } from \u0027@angular/core\u0027;\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\nimport { ActivatedRoute } from \u0027@angular/router\u0027;\n\n@Component({\n  template: \u0027\u0026lt;div id\u003d\"hello\" [innerHTML]\u003d\"hello\"\u0026gt;\u0026lt;/div\u0026gt;\u0027\n})\nexport class HelloComponent implements OnInit {\n  hello: SafeHtml;\n\n  constructor(private sanitizer: DomSanitizer, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    let name \u003d this.route.snapshot.queryParams.name;\n    let html \u003d \"\u0026lt;h1\u0026gt;Hello \" + name + \"\u0026lt;/h1\u0026gt;\";\n    this.hello \u003d this.sanitizer.bypassSecurityTrustHtml(html); // Sensitive\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Avoid including dynamic executable code and thus disabling Angularâ€™s built-in sanitization unless itâ€™s absolutely necessary. Try instead to\n  rely as much as possible on static templates and Angular built-in sanitization to define web page content. \u003c/li\u003e\n  \u003cli\u003e Make sure to understand how the value to consider as trusted is constructed and never concatenate it with user-controlled data. \u003c/li\u003e\n  \u003cli\u003e Make sure to choose the correct \u003ca href\u003d\"https://angular.io/api/platform-browser/DomSanitizer\"\u003eDomSanitizer\u003c/a\u003e \"bypass\" method based on the\n  context. For instance, only use \u003ccode\u003ebypassSecurityTrustUrl\u003c/code\u003e to trust urls in an \u003ccode\u003ehref\u003c/code\u003e attribute context. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport { Component, OnInit } from \u0027@angular/core\u0027;\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { ActivatedRoute } from \u0027@angular/router\u0027;\n\n@Component({\n  template: \u0027\u0026lt;div id\u003d\"hello\"\u0026gt;\u0026lt;h1\u0026gt;Hello {{name}}\u0026lt;/h1\u0026gt;\u0026lt;/div\u0026gt;\u0027,\n})\nexport class HelloComponent implements OnInit {\n  name: string;\n\n  constructor(private sanitizer: DomSanitizer, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.name \u003d this.route.snapshot.queryParams.name;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eOWASP Top 10 2017 Category A7\u003c/a\u003e - Cross-Site\n  Scripting (XSS) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79\"\u003eMITRE, CWE-79\u003c/a\u003e - Improper Neutralization of Input During Web Page Generation\n  (\u0027Cross-site Scripting\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://angular.io/guide/security\"\u003eAngular - Best Practices - Security\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S3504",
    "name": "Variables should be declared with \"let\" or \"const\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e are function-scoped, meaning they are accessible within the entire function in which they are defined. If\na variable is declared using \u003ccode\u003evar\u003c/code\u003e outside of any function, it becomes a global variable and is accessible throughout the entire JavaScript\nprogram.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e were introduced in ECMAScript 6 (ES6) as a block-scoped alternative to \u003ccode\u003evar\u003c/code\u003e. Variables declared\nwith \u003ccode\u003elet\u003c/code\u003e have block scope, meaning they are limited to the block of code in which they are defined. A block is typically delimited by\ncurly braces \u003ccode\u003e{}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eVariables declared with \u003ccode\u003econst\u003c/code\u003e are also block-scoped, similar to \u003ccode\u003elet\u003c/code\u003e. However, \u003ccode\u003econst\u003c/code\u003e variables are immutable,\nmeaning their value cannot be changed after assignment. This applies to the binding between the variable name and its value, but it does not mean the\nvalue itself is immutable if it is an object or an array.\u003c/p\u003e\n\u003cp\u003eA variable declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e is said to be in a \"temporal dead zone\", meaning the period between entering a\nscope and declaring a \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e variable. During this phase, accessing the variable results in a\n\u003ccode\u003eReferenceError\u003c/code\u003e. This helps catch potential errors and encourages proper variable declaration.\u003c/p\u003e\n\u003cp\u003eUnlike \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e, variables declared with \u003ccode\u003evar\u003c/code\u003e are subject to \"hoisting\", which means that they are moved\nto the top of their scope during the compilation phase, even if the actual declaration is placed lower in the code.\u003c/p\u003e\n\u003cp\u003eHoisting can sometimes lead to unexpected behavior. For example, variables declared with \u003ccode\u003evar\u003c/code\u003e are accessible before they are declared,\nalthough they will have the value \u003ccode\u003eundefined\u003c/code\u003e until the declaration is reached.\u003c/p\u003e\n\u003cp\u003eThe distinction between the variable types created by \u003ccode\u003evar\u003c/code\u003e and by \u003ccode\u003elet\u003c/code\u003e is significant, and a switch to \u003ccode\u003elet\u003c/code\u003e\nwill help alleviate many of the variable scope issues which have caused confusion in the past.\u003c/p\u003e\n\u003cp\u003eBecause these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from \u003ccode\u003evar\u003c/code\u003e to \u003ccode\u003elet\u003c/code\u003e, and you should be aware that they raise \u003ccode\u003eSyntaxError\u003c/code\u003es\nin pre-ECMAScript 2015 environments.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003evar\u003c/code\u003e is used instead of \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar color \u003d \"blue\"; // Noncompliant\nvar size \u003d 4;       // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eYou should declare your variables with either \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e depending on whether you are going to modify them\nafterwards.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst color \u003d \"blue\";\nlet size \u003d 4;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003eHoisting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\"\u003eTemporal dead\n  zone (TDZ)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e are function-scoped, meaning they are accessible within the entire function in which they are defined. If\na variable is declared using \u003ccode\u003evar\u003c/code\u003e outside of any function, it becomes a global variable and is accessible throughout the entire JavaScript\nprogram.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e were introduced in ECMAScript 6 (ES6) as a block-scoped alternative to \u003ccode\u003evar\u003c/code\u003e. Variables declared\nwith \u003ccode\u003elet\u003c/code\u003e have block scope, meaning they are limited to the block of code in which they are defined. A block is typically delimited by\ncurly braces \u003ccode\u003e{}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eVariables declared with \u003ccode\u003econst\u003c/code\u003e are also block-scoped, similar to \u003ccode\u003elet\u003c/code\u003e. However, \u003ccode\u003econst\u003c/code\u003e variables are immutable,\nmeaning their value cannot be changed after assignment. This applies to the binding between the variable name and its value, but it does not mean the\nvalue itself is immutable if it is an object or an array.\u003c/p\u003e\n\u003cp\u003eA variable declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e is said to be in a \"temporal dead zone\", meaning the period between entering a\nscope and declaring a \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e variable. During this phase, accessing the variable results in a\n\u003ccode\u003eReferenceError\u003c/code\u003e. This helps catch potential errors and encourages proper variable declaration.\u003c/p\u003e\n\u003cp\u003eUnlike \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e, variables declared with \u003ccode\u003evar\u003c/code\u003e are subject to \"hoisting\", which means that they are moved\nto the top of their scope during the compilation phase, even if the actual declaration is placed lower in the code.\u003c/p\u003e\n\u003cp\u003eHoisting can sometimes lead to unexpected behavior. For example, variables declared with \u003ccode\u003evar\u003c/code\u003e are accessible before they are declared,\nalthough they will have the value \u003ccode\u003eundefined\u003c/code\u003e until the declaration is reached.\u003c/p\u003e\n\u003cp\u003eThe distinction between the variable types created by \u003ccode\u003evar\u003c/code\u003e and by \u003ccode\u003elet\u003c/code\u003e is significant, and a switch to \u003ccode\u003elet\u003c/code\u003e\nwill help alleviate many of the variable scope issues which have caused confusion in the past.\u003c/p\u003e\n\u003cp\u003eBecause these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from \u003ccode\u003evar\u003c/code\u003e to \u003ccode\u003elet\u003c/code\u003e, and you should be aware that they raise \u003ccode\u003eSyntaxError\u003c/code\u003es\nin pre-ECMAScript 2015 environments.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003evar\u003c/code\u003e is used instead of \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar color \u003d \"blue\"; // Noncompliant\nvar size \u003d 4;       // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eYou should declare your variables with either \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e depending on whether you are going to modify them\nafterwards.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst color \u003d \"blue\";\nlet size \u003d 4;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003evar\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003eHoisting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\"\u003eTemporal dead\n  zone (TDZ)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3626",
    "name": "Jump statements should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJump statements, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e, are used to change the normal flow of execution in a\nprogram. They are useful because they allow for more complex and flexible code. However, it is important to use jump statements judiciously, as\noveruse or misuse can make code difficult to read and maintain.\u003c/p\u003e\n\u003cp\u003eJump statements are redundant when they do not affect the program flow or behavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction redundantJump(x) {\n  if (x \u003d\u003d 1) {\n    console.log(\"x \u003d\u003d 1\");\n    return; // Noncompliant: The function would return \u0027undefined\u0027 also without this \u0027return\u0027 statement\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove any jump statements that are unnecessary or redundant.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction redundantJump(x) {\n  if (x \u003d\u003d 1) {\n    console.log(\"x \u003d\u003d 1\");\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003ereturn\u003c/code\u003e inside \u003ccode\u003eswitch\u003c/code\u003e statements are ignored, because they are often used for consistency.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003econtinue\u003c/code\u003e associated with a label is ignored, because it is usually used for clarity. \u003c/li\u003e\n  \u003cli\u003e Jump statements are ignored when they are the only statement inside a block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJump statements, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e, are used to change the normal flow of execution in a\nprogram. They are useful because they allow for more complex and flexible code. However, it is important to use jump statements judiciously, as\noveruse or misuse can make code difficult to read and maintain.\u003c/p\u003e\n\u003cp\u003eJump statements are redundant when they do not affect the program flow or behavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction redundantJump(x) {\n  if (x \u003d\u003d 1) {\n    console.log(\"x \u003d\u003d 1\");\n    return; // Noncompliant: The function would return \u0027undefined\u0027 also without this \u0027return\u0027 statement\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove any jump statements that are unnecessary or redundant.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction redundantJump(x) {\n  if (x \u003d\u003d 1) {\n    console.log(\"x \u003d\u003d 1\");\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003ereturn\u003c/code\u003e inside \u003ccode\u003eswitch\u003c/code\u003e statements are ignored, because they are often used for consistency.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003econtinue\u003c/code\u003e associated with a label is ignored, because it is usually used for clarity. \u003c/li\u003e\n  \u003cli\u003e Jump statements are ignored when they are the only statement inside a block. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy",
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1440",
    "name": "\"\u003d\u003d\u003d\" and \"!\u003d\u003d\" should be used instead of \"\u003d\u003d\" and \"!\u003d\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, there are two types of comparison operators: strict and non-strict.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Strict operators: These operators compare both value and type. They are represented as \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e (strict equality) and \u003ccode\u003e!\u003d\u003d\u003c/code\u003e\n  (strict inequality). For example, \u003ccode\u003e5 \u003d\u003d\u003d \"5\"\u003c/code\u003e would return \u003ccode\u003efalse\u003c/code\u003e because, although the values are the same, the types are\n  different (one is a number, the other is a string). \u003c/li\u003e\n  \u003cli\u003e Non-Strict operators: These operators compare only value, not type. They are represented as \u003ccode\u003e\u003d\u003d\u003c/code\u003e (equality) and \u003ccode\u003e!\u003d\u003c/code\u003e\n  (inequality). For example, \u003ccode\u003e5 \u003d\u003d \"5\"\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e because the values are the same, even though the types are\n  different. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eItâ€™s generally recommended to use strict operators in JavaScript to avoid unexpected results due to JavaScriptâ€™s type coercion. This is because\nnon-strict operators can lead to some counter-intuitive results. For example, \u003ccode\u003e0 \u003d\u003d false\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e, which might not\nbe the expected outcome.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction checkEqual(a, b) {\n  if (a \u003d\u003d b) { // Noncompliant: using non-strict equality \u0027\u003d\u003d\u0027\n    return \"Equal\";\n  } else {\n    return \"Not equal\";\n  }\n}\n\nconsole.log(checkEqual(0, false)); // Output: \"Equal\"\n\u003c/pre\u003e\n\u003cp\u003eYou should use the strict equality and inequality operators to prevent type coercion, avoid unexpected outcomes when comparing values of different\ntypes, and provide more predictable results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction checkEqual(a, b) {\n  if (a \u003d\u003d\u003d b) {\n    return \"Equal\";\n  } else {\n    return \"Not equal\";\n  }\n}\n\nconsole.log(checkEqual(0, false)); // Output: \"Not equal\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Comparing two literal values \u003c/li\u003e\n  \u003cli\u003e Evaluating the value of \u003ccode\u003etypeof\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Comparing against \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\"\u003eStrict equality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\"\u003eStrict inequality\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\"\u003eEquality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\"\u003eInequality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, there are two types of comparison operators: strict and non-strict.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Strict operators: These operators compare both value and type. They are represented as \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e (strict equality) and \u003ccode\u003e!\u003d\u003d\u003c/code\u003e\n  (strict inequality). For example, \u003ccode\u003e5 \u003d\u003d\u003d \"5\"\u003c/code\u003e would return \u003ccode\u003efalse\u003c/code\u003e because, although the values are the same, the types are\n  different (one is a number, the other is a string). \u003c/li\u003e\n  \u003cli\u003e Non-Strict operators: These operators compare only value, not type. They are represented as \u003ccode\u003e\u003d\u003d\u003c/code\u003e (equality) and \u003ccode\u003e!\u003d\u003c/code\u003e\n  (inequality). For example, \u003ccode\u003e5 \u003d\u003d \"5\"\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e because the values are the same, even though the types are\n  different. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eItâ€™s generally recommended to use strict operators in JavaScript to avoid unexpected results due to JavaScriptâ€™s type coercion. This is because\nnon-strict operators can lead to some counter-intuitive results. For example, \u003ccode\u003e0 \u003d\u003d false\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e, which might not\nbe the expected outcome.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction checkEqual(a, b) {\n  if (a \u003d\u003d b) { // Noncompliant: using non-strict equality \u0027\u003d\u003d\u0027\n    return \"Equal\";\n  } else {\n    return \"Not equal\";\n  }\n}\n\nconsole.log(checkEqual(0, false)); // Output: \"Equal\"\n\u003c/pre\u003e\n\u003cp\u003eYou should use the strict equality and inequality operators to prevent type coercion, avoid unexpected outcomes when comparing values of different\ntypes, and provide more predictable results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction checkEqual(a, b) {\n  if (a \u003d\u003d\u003d b) {\n    return \"Equal\";\n  } else {\n    return \"Not equal\";\n  }\n}\n\nconsole.log(checkEqual(0, false)); // Output: \"Not equal\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not report on these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Comparing two literal values \u003c/li\u003e\n  \u003cli\u003e Evaluating the value of \u003ccode\u003etypeof\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Comparing against \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\"\u003eStrict equality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\"\u003eStrict inequality\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\"\u003eEquality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\"\u003eInequality\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:EqEqEq"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3981",
    "name": "Collection size and array length comparisons should make sense",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesnâ€™t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (someSet.size \u0026gt;\u003d 0) {...} // Noncompliant always true\n\nconst result \u003d someArray.length \u0026gt;\u003d 0;  // Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (someMap.size \u0026lt; 0) {...} // Noncompliant always false\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesnâ€™t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (someSet.size \u0026gt;\u003d 0) {...} // Noncompliant always true\n\nconst result \u003d someArray.length \u0026gt;\u003d 0;  // Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (someMap.size \u0026lt; 0) {...} // Noncompliant always false\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1441",
    "name": "Quotes for string literals should be used consistently",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule checks that all string literals use the same kind of quotes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eUsing the parameter default (forcing single quotes):\u003c/p\u003e\n\u003cpre\u003e\nvar firstParameter \u003d \"something\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar firstParameter \u003d \u0027something\u0027;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eStrings that contain quotes are ignored.\u003c/p\u003e\n\u003cpre\u003e\nlet heSaid \u003d \"Then he said \u0027What?\u0027.\"  // ignored\nlet sheSaid \u003d \u0027\"Whatever!\" she replied.\u0027  // ignored\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule checks that all string literals use the same kind of quotes.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eUsing the parameter default (forcing single quotes):\u003c/p\u003e\n\u003cpre\u003e\nvar firstParameter \u003d \"something\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar firstParameter \u003d \u0027something\u0027;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eStrings that contain quotes are ignored.\u003c/p\u003e\n\u003cpre\u003e\nlet heSaid \u003d \"Then he said \u0027What?\u0027.\"  // ignored\nlet sheSaid \u003d \u0027\"Whatever!\" she replied.\u0027  // ignored\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "singleQuotes": {
        "key": "singleQuotes",
        "name": "singleQuotes",
        "description": "Set to true to require single quotes, false for double quotes.",
        "defaultValue": "true",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "singleQuotes": "true"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:SingleQuote"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1442",
    "name": "\"alert(...)\" should not be used",
    "defaultSeverity": "MINOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S4507} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ealert(...)\u003c/code\u003e as well as \u003ccode\u003econfirm(...)\u003c/code\u003e and \u003ccode\u003eprompt(...)\u003c/code\u003e can be useful for debugging during development, but in\nproduction mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif(unexpectedCondition) {\n  alert(\"Unexpected Condition\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S4507} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003ealert(...)\u003c/code\u003e as well as \u003ccode\u003econfirm(...)\u003c/code\u003e and \u003ccode\u003eprompt(...)\u003c/code\u003e can be useful for debugging during development, but in\nproduction mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif(unexpectedCondition) {\n  alert(\"Unexpected Condition\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3984",
    "name": "Errors should not be created without being thrown",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eErrors should not be created without being thrown because they can confuse and make it difficult to debug code. When an error is thrown, it means\nthat something unexpected has happened, and the program cannot continue executing as expected. By creating an error without throwing it, it may appear\nas if everything is working correctly, but in reality, an underlying issue must be addressed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (x \u0026lt; 0) {\n  new Error(\"x must be nonnegative\"); // Noncompliant: Creating an error without throwing it\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should make sure to always throw an error that you create using the \u003ccode\u003ethrow\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (x \u0026lt; 0) {\n  throw new Error(\"x must be nonnegative\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003ethrow\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\"\u003eControl flow and error\n  handling\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eErrors should not be created without being thrown because they can confuse and make it difficult to debug code. When an error is thrown, it means\nthat something unexpected has happened, and the program cannot continue executing as expected. By creating an error without throwing it, it may appear\nas if everything is working correctly, but in reality, an underlying issue must be addressed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (x \u0026lt; 0) {\n  new Error(\"x must be nonnegative\"); // Noncompliant: Creating an error without throwing it\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should make sure to always throw an error that you create using the \u003ccode\u003ethrow\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (x \u0026lt; 0) {\n  throw new Error(\"x must be nonnegative\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003ethrow\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\"\u003eControl flow and error\n  handling\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3863",
    "name": "Imports from the same module should be merged",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving the same module imported multiple times can affect code readability and maintainability. It makes hard to identify which modules are being\nused.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { B1 } from \u0027b\u0027;\nimport { B2 } from \u0027b\u0027; // Noncompliant: there is already an import from module \u0027b\u0027.\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should consolidate the imports from the same module into a single statement. By consolidating all imports from the same module in a\nsingle \u003ccode\u003eimport\u003c/code\u003e statement, the code becomes more concise and easier to read, as there is only one import statement to keep track of.\nAdditionally, it can make it easier to identify which modules are used in the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { B1, B2 } from \u0027b\u0027;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003e\u003ccode\u003eimport\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\"\u003eJavaScript modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving the same module imported multiple times can affect code readability and maintainability. It makes hard to identify which modules are being\nused.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { B1 } from \u0027b\u0027;\nimport { B2 } from \u0027b\u0027; // Noncompliant: there is already an import from module \u0027b\u0027.\n\u003c/pre\u003e\n\u003cp\u003eInstead, one should consolidate the imports from the same module into a single statement. By consolidating all imports from the same module in a\nsingle \u003ccode\u003eimport\u003c/code\u003e statement, the code becomes more concise and easier to read, as there is only one import statement to keep track of.\nAdditionally, it can make it easier to identify which modules are used in the code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { B1, B2 } from \u0027b\u0027;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003e\u003ccode\u003eimport\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\"\u003eJavaScript modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3500",
    "name": "\"const\" variables should not be reassigned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVariables declared with \u003ccode\u003econst\u003c/code\u003e cannot be reassigned using the assignment operator.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e declaration creates an immutable reference to a value. This does not mean the value it holds is immutable, but the\nidentifier cannot be reassigned. For example, if the constant is an object, its properties can still be altered. Use \u003ccode\u003eObject.freeze()\u003c/code\u003e to\nmake an object immutable.\u003c/p\u003e\n\u003cp\u003eYou must always specify an initializer in a \u003ccode\u003econst\u003c/code\u003e declaration as it can not be changed later. Trying to declare a constant without an\ninitializer (\u003ccode\u003econst foo;\u003c/code\u003e) will throw a SyntaxError.\u003c/p\u003e\n\u003cp\u003eTrying to reassign a constant will throw a TypeError. In a non-ES2015 environment, it might simply be ignored.\u003c/p\u003e\n\u003cpre\u003e\nconst pi \u003d 3.14;\npi \u003d 3.14159; // Noncompliant: TypeError: invalid assignment to const \u0027pi\u0027\n\u003c/pre\u003e\n\u003cp\u003eIf a variable will need to be reassigned, use \u003ccode\u003elet\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre\u003e\nlet pi \u003d 3.14;\npi \u003d 3.14159;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"\u003e\u003ccode\u003eObject.freeze()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/ECMAScript_version_history#ES2015\"\u003eECMAScript 2015\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVariables declared with \u003ccode\u003econst\u003c/code\u003e cannot be reassigned using the assignment operator.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e declaration creates an immutable reference to a value. This does not mean the value it holds is immutable, but the\nidentifier cannot be reassigned. For example, if the constant is an object, its properties can still be altered. Use \u003ccode\u003eObject.freeze()\u003c/code\u003e to\nmake an object immutable.\u003c/p\u003e\n\u003cp\u003eYou must always specify an initializer in a \u003ccode\u003econst\u003c/code\u003e declaration as it can not be changed later. Trying to declare a constant without an\ninitializer (\u003ccode\u003econst foo;\u003c/code\u003e) will throw a SyntaxError.\u003c/p\u003e\n\u003cp\u003eTrying to reassign a constant will throw a TypeError. In a non-ES2015 environment, it might simply be ignored.\u003c/p\u003e\n\u003cpre\u003e\nconst pi \u003d 3.14;\npi \u003d 3.14159; // Noncompliant: TypeError: invalid assignment to const \u0027pi\u0027\n\u003c/pre\u003e\n\u003cp\u003eIf a variable will need to be reassigned, use \u003ccode\u003elet\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre\u003e\nlet pi \u003d 3.14;\npi \u003d 3.14159;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"\u003e\u003ccode\u003eObject.freeze()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/ECMAScript_version_history#ES2015\"\u003eECMAScript 2015\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1321",
    "name": "\"with\" statements should not be used",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ewith\u003c/code\u003e statement introduces a new scope, where properties of an object can be accessed directly without having to specify the\nobjectâ€™s name explicitly. However, using it is generally considered a bad practice and is strongly discouraged.\u003c/p\u003e\n\u003cp\u003eWhile it might seem convenient at first, it can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003ewith\u003c/code\u003e statement can make code more ambiguous and harder to read. When reading the code, it becomes unclear where variables or\n  properties are coming from, as they can be from the object in the \u003ccode\u003ewith\u003c/code\u003e statement or any of its parent scopes. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003ewith\u003c/code\u003e statement negatively impacts performance. JavaScript engines have a harder time optimizing code with \u003ccode\u003ewith\u003c/code\u003e\n  because it adds uncertainty to variable lookups, which can result in slower execution. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003ewith\u003c/code\u003e can lead to bugs that are difficult to identify and troubleshoot. If a variable is not found in the object within the\n  \u003ccode\u003ewith\u003c/code\u003e statement or its parent scopes, JavaScript will create a new global variable instead, potentially leading to unexpected behavior.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a result of these issues, ECMAScript 5 (ES5) strict mode explicitly forbids the use of the \u003ccode\u003ewith\u003c/code\u003e statement. Strict mode was\nintroduced to enhance code safety and maintainability, and it helps to catch potential issues and discourage the use of problematic language\nfeatures.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d \u0027a\u0027;\n\nlet foo \u003d {\n  y: 1\n};\n\nwith (foo) { // Noncompliant\n  y \u003d 4;     // Updates \u0027foo.y\u0027\n  x \u003d 3;     // Does not add a \u0027foo.x\u0027 property; updates the variable \u0027x\u0027 in the outer scope instead\n}\n\nconsole.log(foo.x + \" \" + x); // Prints: undefined 3\n\u003c/pre\u003e\n\u003cp\u003eInstead of using \u003ccode\u003ewith\u003c/code\u003e, itâ€™s best to write more explicit code, accessing object properties directly without relying on the with\nconstruct.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d \u0027a\u0027;\n\nlet foo \u003d {\n  y: 1\n};\n\nfoo.y \u003d 4;\nfoo.x \u003d 3;\n\nconsole.log(foo.x + \" \" + x); // Prints: 3 a\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\"\u003e\u003ccode\u003ewith\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003ewith\u003c/code\u003e statement introduces a new scope, where properties of an object can be accessed directly without having to specify the\nobjectâ€™s name explicitly. However, using it is generally considered a bad practice and is strongly discouraged.\u003c/p\u003e\n\u003cp\u003eWhile it might seem convenient at first, it can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003ewith\u003c/code\u003e statement can make code more ambiguous and harder to read. When reading the code, it becomes unclear where variables or\n  properties are coming from, as they can be from the object in the \u003ccode\u003ewith\u003c/code\u003e statement or any of its parent scopes. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003ewith\u003c/code\u003e statement negatively impacts performance. JavaScript engines have a harder time optimizing code with \u003ccode\u003ewith\u003c/code\u003e\n  because it adds uncertainty to variable lookups, which can result in slower execution. \u003c/li\u003e\n  \u003cli\u003e Using \u003ccode\u003ewith\u003c/code\u003e can lead to bugs that are difficult to identify and troubleshoot. If a variable is not found in the object within the\n  \u003ccode\u003ewith\u003c/code\u003e statement or its parent scopes, JavaScript will create a new global variable instead, potentially leading to unexpected behavior.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a result of these issues, ECMAScript 5 (ES5) strict mode explicitly forbids the use of the \u003ccode\u003ewith\u003c/code\u003e statement. Strict mode was\nintroduced to enhance code safety and maintainability, and it helps to catch potential issues and discourage the use of problematic language\nfeatures.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d \u0027a\u0027;\n\nlet foo \u003d {\n  y: 1\n};\n\nwith (foo) { // Noncompliant\n  y \u003d 4;     // Updates \u0027foo.y\u0027\n  x \u003d 3;     // Does not add a \u0027foo.x\u0027 property; updates the variable \u0027x\u0027 in the outer scope instead\n}\n\nconsole.log(foo.x + \" \" + x); // Prints: undefined 3\n\u003c/pre\u003e\n\u003cp\u003eInstead of using \u003ccode\u003ewith\u003c/code\u003e, itâ€™s best to write more explicit code, accessing object properties directly without relying on the with\nconstruct.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d \u0027a\u0027;\n\nlet foo \u003d {\n  y: 1\n};\n\nfoo.y \u003d 4;\nfoo.x \u003d 3;\n\nconsole.log(foo.x + \" \" + x); // Prints: 3 a\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\"\u003e\u003ccode\u003ewith\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:WithStatement"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4830",
    "name": "Server certificates should be verified during SSL/TLS connections",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bankâ€™s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of disabled certificate validation.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by setting \u003ccode\u003erejectUnauthorized\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e. To enable validation set the value to\n\u003ccode\u003etrue\u003c/code\u003e or do not set \u003ccode\u003erejectUnauthorized\u003c/code\u003e at all to use the secure default value.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  rejectUnauthorized: false,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n}); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n    rejectUnauthorized: false,\n    secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n}); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n    secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eOWASP Mobile Top 10 2016 Category M3\u003c/a\u003e - Insecure\n  Communication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec Verification\n  Standard\u003c/a\u003e - Network Communication Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eMITRE, CWE-295\u003c/a\u003e - Improper Certificate Validation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bankâ€™s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of disabled certificate validation.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by setting \u003ccode\u003erejectUnauthorized\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e. To enable validation set the value to\n\u003ccode\u003etrue\u003c/code\u003e or do not set \u003ccode\u003erejectUnauthorized\u003c/code\u003e at all to use the secure default value.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  rejectUnauthorized: false,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n}); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n    rejectUnauthorized: false,\n    secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n}); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n    secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of disabled certificate validation.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by setting \u003ccode\u003erejectUnauthorized\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e. To enable validation set the value to\n\u003ccode\u003etrue\u003c/code\u003e or do not set \u003ccode\u003erejectUnauthorized\u003c/code\u003e at all to use the secure default value.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nconst request \u003d require(\u0027request\u0027);\n\nlet socket \u003d request.get({\n  url: \u0027www.example.com\u0027,\n  rejectUnauthorized: false, // Noncompliant\n  secureProtocol: \u0027TLSv1_2_method\u0027\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nconst request \u003d require(\u0027request\u0027);\n\nlet socket \u003d request.get({\n  url: \u0027https://www.example.com/\u0027,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e",
        "context": {
          "key": "request",
          "displayName": "Request"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eOWASP Mobile Top 10 2016 Category M3\u003c/a\u003e - Insecure\n  Communication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec Verification\n  Standard\u003c/a\u003e - Network Communication Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eMITRE, CWE-295\u003c/a\u003e - Improper Certificate Validation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy",
      "ssl"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1314",
    "name": "Octal values should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\u003c/p\u003e\n\u003cp\u003eAdditionally, these literals will throw SyntaxError in strict mode. 0-prefixed octal literals have been deprecated since ECMAScript 5 and should\nnot be used in modern JavaScript code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst myNumber \u003d 010; // Noncompliant: Deprecated format\n\u003c/pre\u003e\n\u003cp\u003eUse decimal syntax when possible as it is more readable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst myNumber \u003d 8;\n\u003c/pre\u003e\n\u003cp\u003eIf octal notation is required, use the standard syntax: a leading zero followed by a lowercase or uppercase Latin letter \"O\" (\u003ccode\u003e0o\u003c/code\u003e or\n\u003ccode\u003e0O\u003c/code\u003e).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst myNumber \u003d 0o10;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#octal_numbers\"\u003eOctal numbers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\"\u003eSyntaxError: \"0\"-prefixed\n  octal literals are deprecated\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\u003c/p\u003e\n\u003cp\u003eAdditionally, these literals will throw SyntaxError in strict mode. 0-prefixed octal literals have been deprecated since ECMAScript 5 and should\nnot be used in modern JavaScript code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst myNumber \u003d 010; // Noncompliant: Deprecated format\n\u003c/pre\u003e\n\u003cp\u003eUse decimal syntax when possible as it is more readable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst myNumber \u003d 8;\n\u003c/pre\u003e\n\u003cp\u003eIf octal notation is required, use the standard syntax: a leading zero followed by a lowercase or uppercase Latin letter \"O\" (\u003ccode\u003e0o\u003c/code\u003e or\n\u003ccode\u003e0O\u003c/code\u003e).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst myNumber \u003d 0o10;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#octal_numbers\"\u003eOctal numbers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\"\u003eSyntaxError: \"0\"-prefixed\n  octal literals are deprecated\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:OctalNumber"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3735",
    "name": "\"void\" should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evoid\u003c/code\u003e operator evaluates its argument and always returns \u003ccode\u003eundefined\u003c/code\u003e. \u003ccode\u003evoid\u003c/code\u003e allows using any expression\nwhere an \u003ccode\u003eundefined\u003c/code\u003e is expected. However, using \u003ccode\u003evoid\u003c/code\u003e makes code more difficult to understand, as the intent is often\nunclear.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (parameter \u003d\u003d\u003d void 42) { // Noncompliant\n   // ...\n}\ndoSomethingElse(void doSomething()); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eInstead of using \u003ccode\u003evoid\u003c/code\u003e to get the \u003ccode\u003eundefined\u003c/code\u003e value, use the \u003ccode\u003eundefined\u003c/code\u003e global property. In ECMAScript5 and\nnewer environments, \u003ccode\u003eundefined\u003c/code\u003e cannot be reassigned. In other cases, remove the \u003ccode\u003evoid\u003c/code\u003e operator to avoid confusion for\nmaintainers.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (parameter \u003d\u003d\u003d undefined) {\n   // ...\n}\ndoSomething();\ndoSomethingElse();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid 0\u003c/code\u003e (or the equivalent \u003ccode\u003evoid(0)\u003c/code\u003e) is allowed as it was a conventional way to obtain the \u003ccode\u003eundefined\u003c/code\u003e value\n  in environments before ECMAScript 5. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (parameter \u003d\u003d\u003d void 0) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid\u003c/code\u003e is allowed with immediately invoked function expressions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvoid function() {\n   // ...\n}();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid\u003c/code\u003e is allowed with Promise-like objects to mark a promise as intentionally not awaited, as advised by \u003ca\n  href\u003d\"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.md\"\u003e@typescript-eslint/no-floating-promises\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst runPromise \u003d () \u003d\u0026gt; Promise.resolve();\nvoid runPromise();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\"\u003e\u003ccode\u003evoid\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE (Immediately Invoked Function Expression)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003evoid\u003c/code\u003e operator evaluates its argument and always returns \u003ccode\u003eundefined\u003c/code\u003e. \u003ccode\u003evoid\u003c/code\u003e allows using any expression\nwhere an \u003ccode\u003eundefined\u003c/code\u003e is expected. However, using \u003ccode\u003evoid\u003c/code\u003e makes code more difficult to understand, as the intent is often\nunclear.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (parameter \u003d\u003d\u003d void 42) { // Noncompliant\n   // ...\n}\ndoSomethingElse(void doSomething()); // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eInstead of using \u003ccode\u003evoid\u003c/code\u003e to get the \u003ccode\u003eundefined\u003c/code\u003e value, use the \u003ccode\u003eundefined\u003c/code\u003e global property. In ECMAScript5 and\nnewer environments, \u003ccode\u003eundefined\u003c/code\u003e cannot be reassigned. In other cases, remove the \u003ccode\u003evoid\u003c/code\u003e operator to avoid confusion for\nmaintainers.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (parameter \u003d\u003d\u003d undefined) {\n   // ...\n}\ndoSomething();\ndoSomethingElse();\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid 0\u003c/code\u003e (or the equivalent \u003ccode\u003evoid(0)\u003c/code\u003e) is allowed as it was a conventional way to obtain the \u003ccode\u003eundefined\u003c/code\u003e value\n  in environments before ECMAScript 5. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif (parameter \u003d\u003d\u003d void 0) {\n   // ...\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid\u003c/code\u003e is allowed with immediately invoked function expressions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvoid function() {\n   // ...\n}();\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003evoid\u003c/code\u003e is allowed with Promise-like objects to mark a promise as intentionally not awaited, as advised by \u003ca\n  href\u003d\"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.md\"\u003e@typescript-eslint/no-floating-promises\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst runPromise \u003d () \u003d\u0026gt; Promise.resolve();\nvoid runPromise();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\"\u003e\u003ccode\u003evoid\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE (Immediately Invoked Function Expression)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3616",
    "name": "Comma and logical OR operators should not be used in switch cases",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of the comma operator and logical OR (||) operator within switch cases is not recommended. The switch statement is designed to evaluate a\nsingle expression and compare it against multiple values. When you use the comma operator or logical OR operator within a case, youâ€™re essentially\ntrying to match multiple values or conditions simultaneously: only the rightmost value will ever be considered with the comma operator, and the first\ntruthy operand will be handled with the logical OR operator.\u003c/p\u003e\n\u003cp\u003eThis behavior is not well-defined and can lead to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (a) {\n  case 1, 2:   // Noncompliant: only 2 is matched by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant: only 3 is matched by this case\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\u0027Neener, neener!\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eUsing the comma operator or logical OR operator to combine multiple values or conditions within a single case can make the code more complex and\ndifficult to read. It goes against the intention of the switch statement, which is to provide a concise and clear structure for branching based on a\nsingle value.\u003c/p\u003e\n\u003cp\u003eThe switch statement should solely be used to rely on exact value matching instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (a) {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\u0027Neener, neener!\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule makes an exception for the \u003ccode\u003eswitch (true)\u003c/code\u003e pattern, which is sometimes used as a workaround to achieve a similar effect to a\nseries of \u003ccode\u003eif-else\u003c/code\u003e statements. This pattern allows you to evaluate multiple conditions acting as guards and execute corresponding code\nblocks based on the first matching condition.\u003c/p\u003e\n\u003cpre\u003e\nfunction weekStatus (day) {\n  let status;\n  switch (true) {\n    case (day \u003d\u003d\u003d \u0027MON\u0027 || day \u003d\u003d\u003d \u0027TUE\u0027 || day \u003d\u003d\u003d \u0027WED\u0027 || day \u003d\u003d\u003d \u0027THU\u0027 || day \u003d\u003d\u003d \u0027FRI\u0027):\n      status \u003d \u0027Weekday\u0027;\n      break;\n    case (day \u003d\u003d\u003d \u0027SAT\u0027 || day \u003d\u003d\u003d \u0027SUN\u0027):\n      status \u003d \u0027Weekend\u0027;\n      break;\n  }\n  return status;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\"\u003eComma operator\n  \u003ccode\u003e(,)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR\n  \u003ccode\u003e(||)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of the comma operator and logical OR (||) operator within switch cases is not recommended. The switch statement is designed to evaluate a\nsingle expression and compare it against multiple values. When you use the comma operator or logical OR operator within a case, youâ€™re essentially\ntrying to match multiple values or conditions simultaneously: only the rightmost value will ever be considered with the comma operator, and the first\ntruthy operand will be handled with the logical OR operator.\u003c/p\u003e\n\u003cp\u003eThis behavior is not well-defined and can lead to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (a) {\n  case 1, 2:   // Noncompliant: only 2 is matched by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant: only 3 is matched by this case\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\u0027Neener, neener!\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eUsing the comma operator or logical OR operator to combine multiple values or conditions within a single case can make the code more complex and\ndifficult to read. It goes against the intention of the switch statement, which is to provide a concise and clear structure for branching based on a\nsingle value.\u003c/p\u003e\n\u003cp\u003eThe switch statement should solely be used to rely on exact value matching instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (a) {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\u0027Neener, neener!\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule makes an exception for the \u003ccode\u003eswitch (true)\u003c/code\u003e pattern, which is sometimes used as a workaround to achieve a similar effect to a\nseries of \u003ccode\u003eif-else\u003c/code\u003e statements. This pattern allows you to evaluate multiple conditions acting as guards and execute corresponding code\nblocks based on the first matching condition.\u003c/p\u003e\n\u003cpre\u003e\nfunction weekStatus (day) {\n  let status;\n  switch (true) {\n    case (day \u003d\u003d\u003d \u0027MON\u0027 || day \u003d\u003d\u003d \u0027TUE\u0027 || day \u003d\u003d\u003d \u0027WED\u0027 || day \u003d\u003d\u003d \u0027THU\u0027 || day \u003d\u003d\u003d \u0027FRI\u0027):\n      status \u003d \u0027Weekday\u0027;\n      break;\n    case (day \u003d\u003d\u003d \u0027SAT\u0027 || day \u003d\u003d\u003d \u0027SUN\u0027):\n      status \u003d \u0027Weekend\u0027;\n      break;\n  }\n  return status;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\"\u003eComma operator\n  \u003ccode\u003e(,)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR\n  \u003ccode\u003e(||)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4823",
    "name": "Using command line arguments is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eUsing command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-7281\"\u003eCVE-2018-7281\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-12326\"\u003eCVE-2018-12326\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2011-3198\"\u003eCVE-2011-3198\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCommand line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.\u003c/p\u003e\n\u003cp\u003eRemember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when on every program entry points (\u003ccode\u003emain\u003c/code\u003e methods) when command line arguments are used. The goal is to guide\nsecurity code reviews.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e any of the command line arguments are used without being sanitized first. \u003c/li\u003e\n  \u003cli\u003e your application accepts sensitive information via command line arguments. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you answered yes to any of these questions you are at risk.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// The process object is a global that provides information about, and control over, the current Node.js process\nvar param \u003d process.argv[2]; // Sensitive: check how the argument is used\nconsole.log(\u0027Param: \u0027 + param);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\"\u003eSanitize\u003c/a\u003e all command line arguments before using them.\u003c/p\u003e\n\u003cp\u003eAny user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process\u0027 standard input, or give the\npath to a file containing the information.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/88\"\u003eMITRE, CWE-88\u003c/a\u003e - Argument Injection or Modification \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/214\"\u003eMITRE, CWE-214\u003c/a\u003e - Information Exposure Through Process Environment \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S1438",
    "name": "Statements should end with semicolons",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, the semicolon (\u003ccode\u003e;\u003c/code\u003e) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction fun() {\n  return  // Noncompliant. \u0027;\u0027 implicitly inserted at end of line\n       5   // Noncompliant. \u0027;\u0027 implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction fun() {\n  return 5;\n}\nprint(fun());\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, the semicolon (\u003ccode\u003e;\u003c/code\u003e) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction fun() {\n  return  // Noncompliant. \u0027;\u0027 implicitly inserted at end of line\n       5   // Noncompliant. \u0027;\u0027 implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction fun() {\n  return 5;\n}\nprint(fun());\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:Semicolon"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1439",
    "name": "Only \"while\", \"do\", \"for\" and \"switch\" statements should be labelled",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLabels allow specifying a target statement to jump to using the \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statements. Itâ€™s possible to assign a\nlabel to any statement or block of statements. However, using it with any statement can create a complex control flow path, making the code harder to\nunderstand and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nmyLabel: if (i % 2 \u003d\u003d 0) { // Noncompliant: Labeling an if statement\n  if (i \u003d\u003d 12) {\n    console.log(\"12\");\n    break myLabel;\n  }\n  console.log(\"Even number, but not 12\");\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead of using a label with these nested \u003ccode\u003eif\u003c/code\u003e statements, this code block should be refactored.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (i % 2 \u003d\u003d 0) { // Compliant\n  if (i \u003d\u003d 12) {\n    console.log(\"12\");\n  } else {\n    console.log(\"Even number, but not 12\");\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule considers that \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo-while\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, and \u003ccode\u003eswitch\u003c/code\u003e statements donâ€™t create complex\ncontrol flow paths, thus these statements are not reported.\u003c/p\u003e\n\u003cpre\u003e\nouterLoop: for (let i \u003d 0; i \u0026lt; 10; i++) { // Compliant\n  for (let j \u003d 0; j \u0026lt; 10; j++) {\n    if (condition(i, j)) {\n      break outerLoop;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\"\u003elabel\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1119} - Labels should not be used \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLabels allow specifying a target statement to jump to using the \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statements. Itâ€™s possible to assign a\nlabel to any statement or block of statements. However, using it with any statement can create a complex control flow path, making the code harder to\nunderstand and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nmyLabel: if (i % 2 \u003d\u003d 0) { // Noncompliant: Labeling an if statement\n  if (i \u003d\u003d 12) {\n    console.log(\"12\");\n    break myLabel;\n  }\n  console.log(\"Even number, but not 12\");\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead of using a label with these nested \u003ccode\u003eif\u003c/code\u003e statements, this code block should be refactored.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (i % 2 \u003d\u003d 0) { // Compliant\n  if (i \u003d\u003d 12) {\n    console.log(\"12\");\n  } else {\n    console.log(\"Even number, but not 12\");\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule considers that \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo-while\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, and \u003ccode\u003eswitch\u003c/code\u003e statements donâ€™t create complex\ncontrol flow paths, thus these statements are not reported.\u003c/p\u003e\n\u003cpre\u003e\nouterLoop: for (let i \u003d 0; i \u0026lt; 10; i++) { // Compliant\n  for (let j \u003d 0; j \u0026lt; 10; j++) {\n    if (condition(i, j)) {\n      break outerLoop;\n    }\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\"\u003elabel\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1119} - Labels should not be used \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:LabelPlacement"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4829",
    "name": "Reading the Standard Input is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eReading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-2337\"\u003eCVE-2005-2337\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-11449\"\u003eCVE-2017-11449\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.\u003c/p\u003e\n\u003cp\u003eThis rule flags code that reads from the standard input.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e data read from the standard input is not sanitized before being used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are at risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// The process object is a global that provides information about, and control over, the current Node.js process\n// All uses of process.stdin are security-sensitive and should be reviewed\n\nprocess.stdin.on(\u0027readable\u0027, () \u003d\u0026gt; {\n\tconst chunk \u003d process.stdin.read(); // Sensitive\n\tif (chunk !\u003d\u003d null) {\n\t\tdosomething(chunk);\n\t}\n});\n\nconst readline \u003d require(\u0027readline\u0027);\nreadline.createInterface({\n\tinput: process.stdin // Sensitive\n}).on(\u0027line\u0027, (input) \u003d\u0026gt; {\n\tdosomething(input);\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\"\u003eSanitize\u003c/a\u003e all data read from the standard input before using it.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/20\"\u003eMITRE, CWE-20\u003c/a\u003e - Improper Input Validation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S3973",
    "name": "A conditionally executed single line should be denoted by indentation",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the line immediately after a conditional has neither curly braces nor indentation, the intent of the code is unclear and perhaps not what is\nexecuted. Additionally, such code is confusing to maintainers.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\ndoTheThing();\ndoTheOtherThing(); // Was the intent to call this function unconditionally?\n\u003c/pre\u003e\n\u003cp\u003eIt becomes even more confusing and bug-prone if lines get commented out.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n//  doTheThing();\ndoTheOtherThing(); // Was the intent to call this function conditionally?\n\u003c/pre\u003e\n\u003cp\u003eIndentation alone or together with curly braces makes the intent clear.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  doTheThing();\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition) {\n  doTheThing();\n}\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue if the line controlled by a conditional has the same indentation as the conditional and is not enclosed in curly\nbraces.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the line immediately after a conditional has neither curly braces nor indentation, the intent of the code is unclear and perhaps not what is\nexecuted. Additionally, such code is confusing to maintainers.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\ndoTheThing();\ndoTheOtherThing(); // Was the intent to call this function unconditionally?\n\u003c/pre\u003e\n\u003cp\u003eIt becomes even more confusing and bug-prone if lines get commented out.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n//  doTheThing();\ndoTheOtherThing(); // Was the intent to call this function conditionally?\n\u003c/pre\u003e\n\u003cp\u003eIndentation alone or together with curly braces makes the intent clear.\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  doTheThing();\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition) {\n  doTheThing();\n}\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue if the line controlled by a conditional has the same indentation as the conditional and is not enclosed in curly\nbraces.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3972",
    "name": "Conditionals should start on new lines",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePlacing an \u003ccode\u003eif\u003c/code\u003e statement on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, or\n\u003ccode\u003eelse if\u003c/code\u003e block can lead to confusion and potential errors. It may indicate a missing \u003ccode\u003eelse\u003c/code\u003e statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003cp\u003eThe following code snippet is confusing:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEither the two conditions are unrelated and they should be visually separated:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr they were supposed to be exclusive and you should use \u003ccode\u003eelse if\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePlacing an \u003ccode\u003eif\u003c/code\u003e statement on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, or\n\u003ccode\u003eelse if\u003c/code\u003e block can lead to confusion and potential errors. It may indicate a missing \u003ccode\u003eelse\u003c/code\u003e statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003cp\u003eThe following code snippet is confusing:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEither the two conditions are unrelated and they should be visually separated:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr they were supposed to be exclusive and you should use \u003ccode\u003eelse if\u003c/code\u003e instead:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4822",
    "name": "Promise rejections should not be caught by \"try\" blocks",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn exception thrown inside a promise will not be caught by a nesting \u003ccode\u003etry\u003c/code\u003e block due to the asynchronous nature of execution.\u003c/p\u003e\n\u003cp\u003ePromises are designed to propagate errors to the next error handler or catch() block in the promise chain. Promises are asynchronous and operate\noutside of the normal call stack. When a Promise is created, it is added to the microtask queue, which is processed after the current call stack has\ncompleted. This means that the try-catch block surrounding the Promise will have already completed by the time the Promise is resolved or rejected.\nTherefore, any error occurring within the Promise will not be caught by the try-catch block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo() {\n  try { // Noncompliant: Promise rejection will not be caught\n    runPromiseThatRejects();\n  } catch (e) {\n    console.log(\"Failed to run promise\", e);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead of using a try-catch block to handle errors in a Promise chain, use the Promise.catch() method. This method allows you to specify a\ncallback function that will be executed if the Promise is rejected.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo() {\n  runPromiseThatRejects().catch(e \u003d\u0026gt; console.log(\"Failed to run promise\", e));\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, wait for the Promise fulfillment value using \u003ccode\u003eawait\u003c/code\u003e. It is used to unwrap promises and pauses the execution of its\nsurrounding \u003ccode\u003easync\u003c/code\u003e function until the promise is settled (that is, fulfilled or rejected). Any errors that occur within the Promise will\nbe thrown as exceptions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nasync function foo() {\n  try {\n    await runPromiseThatRejects();\n  } catch (e) {\n    console.log(\"Failed to run promise\", e);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule reports \u003ccode\u003etry...catch\u003c/code\u003e statements containing nothing else but call(s) to a function returning a \u003ccode\u003ePromise\u003c/code\u003e (thus,\nitâ€™s less likely that \u003ccode\u003ecatch\u003c/code\u003e is intended to catch something else than \u003ccode\u003ePromise\u003c/code\u003e rejection).\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"\u003e\u003ccode\u003easync\n  function\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\"\u003eMicrotasks\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn exception thrown inside a promise will not be caught by a nesting \u003ccode\u003etry\u003c/code\u003e block due to the asynchronous nature of execution.\u003c/p\u003e\n\u003cp\u003ePromises are designed to propagate errors to the next error handler or catch() block in the promise chain. Promises are asynchronous and operate\noutside of the normal call stack. When a Promise is created, it is added to the microtask queue, which is processed after the current call stack has\ncompleted. This means that the try-catch block surrounding the Promise will have already completed by the time the Promise is resolved or rejected.\nTherefore, any error occurring within the Promise will not be caught by the try-catch block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo() {\n  try { // Noncompliant: Promise rejection will not be caught\n    runPromiseThatRejects();\n  } catch (e) {\n    console.log(\"Failed to run promise\", e);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead of using a try-catch block to handle errors in a Promise chain, use the Promise.catch() method. This method allows you to specify a\ncallback function that will be executed if the Promise is rejected.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo() {\n  runPromiseThatRejects().catch(e \u003d\u0026gt; console.log(\"Failed to run promise\", e));\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, wait for the Promise fulfillment value using \u003ccode\u003eawait\u003c/code\u003e. It is used to unwrap promises and pauses the execution of its\nsurrounding \u003ccode\u003easync\u003c/code\u003e function until the promise is settled (that is, fulfilled or rejected). Any errors that occur within the Promise will\nbe thrown as exceptions.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nasync function foo() {\n  try {\n    await runPromiseThatRejects();\n  } catch (e) {\n    console.log(\"Failed to run promise\", e);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule reports \u003ccode\u003etry...catch\u003c/code\u003e statements containing nothing else but call(s) to a function returning a \u003ccode\u003ePromise\u003c/code\u003e (thus,\nitâ€™s less likely that \u003ccode\u003ecatch\u003c/code\u003e is intended to catch something else than \u003ccode\u003ePromise\u003c/code\u003e rejection).\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\"\u003e\u003ccode\u003eawait\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"\u003e\u003ccode\u003easync\n  function\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide\"\u003eMicrotasks\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3854",
    "name": "\"super()\" should be invoked appropriately",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, the \u003ccode\u003esuper\u003c/code\u003e keyword is used to call the constructor and methods of an objectâ€™s parent class, and to access its\nproperties.\u003c/p\u003e\n\u003cp\u003eThe expression \u003ccode\u003esuper(...args)\u003c/code\u003e is used to call the parentâ€™s constructor. It must be used carefully and correctly to avoid errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name \u003d name;\n    super(); // Noncompliant: constructor is called twice.\n    super.doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eFollow these instructions when invoking the parentâ€™s constructor:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e cannot be invoked in the constructor of a non-derived class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked in the constructor of a derived class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked before the \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003esuper\u003c/code\u003e keywords can be used. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked with the same number of arguments as the base class\u0027 constructor. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e can only be invoked in a constructor - not in any other method. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e cannot be invoked multiple times in the same constructor. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name \u003d name;\n    super.doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eSome issues are not raised if the base class is not defined in the same file as the current class. This is a known limitation of this rule.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\"\u003e\u003ccode\u003esuper\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eInheritance and the\n  prototype chain\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, the \u003ccode\u003esuper\u003c/code\u003e keyword is used to call the constructor and methods of an objectâ€™s parent class, and to access its\nproperties.\u003c/p\u003e\n\u003cp\u003eThe expression \u003ccode\u003esuper(...args)\u003c/code\u003e is used to call the parentâ€™s constructor. It must be used carefully and correctly to avoid errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name \u003d name;\n    super(); // Noncompliant: constructor is called twice.\n    super.doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eFollow these instructions when invoking the parentâ€™s constructor:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e cannot be invoked in the constructor of a non-derived class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked in the constructor of a derived class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked before the \u003ccode\u003ethis\u003c/code\u003e and \u003ccode\u003esuper\u003c/code\u003e keywords can be used. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e must be invoked with the same number of arguments as the base class\u0027 constructor. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e can only be invoked in a constructor - not in any other method. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper()\u003c/code\u003e cannot be invoked multiple times in the same constructor. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name \u003d name;\n    super.doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eSome issues are not raised if the base class is not defined in the same file as the current class. This is a known limitation of this rule.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\"\u003e\u003ccode\u003esuper\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eInheritance and the\n  prototype chain\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1313",
    "name": "Using hardcoded IP addresses is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTodayâ€™s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attackâ€™s impact.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID). \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the 2001:db8::/32 range, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e Itâ€™s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nip \u003d \"192.168.12.42\"; // Sensitive\n\nconst net \u003d require(\u0027net\u0027);\nvar client \u003d new net.Socket();\nclient.connect(80, ip, function() {\n  // ...\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDonâ€™t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nip \u003d process.env.IP_ADDRESS; // Compliant\n\nconst net \u003d require(\u0027net\u0027);\nvar client \u003d new net.Socket();\nclient.connect(80, ip, function() {\n  // ...\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S1105",
    "name": "An open curly brace should be located at the end of a line",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention\nsetup in parameter:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#K\u0026amp;R_style\"\u003e1tbs\u003c/a\u003e (default) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#Allman_style\"\u003eallman\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup\"\u003estroustrup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eUsing the parameter default (1tbs):\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}                                                      //Noncompliant\nelse {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (condition) {                                   //Compliant\n  doSomething();\n} else {                                           //Compliant\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Object literals appearing as arguments can start on their own line. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfunctionWithObject(\n   {                                                 //Compliant\n        g: \"someValue\"\n   }\n);\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When blocks are inlined (left and right curly braces on the same line), no issue is triggered. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}                       //Compliant\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention\nsetup in parameter:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#K\u0026amp;R_style\"\u003e1tbs\u003c/a\u003e (default) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#Allman_style\"\u003eallman\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup\"\u003estroustrup\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eUsing the parameter default (1tbs):\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}                                                      //Noncompliant\nelse {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (condition) {                                   //Compliant\n  doSomething();\n} else {                                           //Compliant\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Object literals appearing as arguments can start on their own line. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfunctionWithObject(\n   {                                                 //Compliant\n        g: \"someValue\"\n   }\n);\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When blocks are inlined (left and right curly braces on the same line), no issue is triggered. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}                       //Compliant\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "braceStyle": {
        "key": "braceStyle",
        "name": "braceStyle",
        "description": "enforced brace-style: 1tbs, stroustrup or allman.",
        "defaultValue": "1tbs",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "braceStyle": "1tbs"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1226",
    "name": "Initial values of parameters, caught exceptions, and loop variables should not be ignored",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIgnoring function parameters or overwriting them with a new value without reading them can lead to confusion and errors in the code. Developers\nwonâ€™t be able to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. It may\nindicate that the function is not properly designed or that there is a mistake in the code.\u003c/p\u003e\n\u003cp\u003eMoreover, some developers might also expect assignments of function parameters to be visible to callers, which is not the case. Arguments are\nalways passed by value and never passed by reference. If a function reassigns a parameter, the value wonâ€™t change outside the function. It is not\npossible to simulate an assignment on that variable in the callerâ€™s scope. However, objects are passed by value to their reference (\u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\"\u003epassed by sharing\u003c/a\u003e), which means if the objectâ€™s properties are mutated,\nthe change will impact the outside of the function.\u003c/p\u003e\n\u003cp\u003eThe same logic applies to caught exceptions and variable declarations inside \u003ccode\u003efor...in\u003c/code\u003e and \u003ccode\u003efor...of\u003c/code\u003e statements: their\ninitial values should not be ignored.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myFunction(name, strings) {\n  name \u003d foo; // Noncompliant: initial value of \u0027name\u0027 is ignored\n\n  for (let str of strings) {\n    str \u003d \"\";  // Noncompliant: initial value of \u0027str\u0027 is ignored\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eFunction parameters, caught exceptions, and variables initialized in \u003ccode\u003efor...in\u003c/code\u003e and \u003ccode\u003efor...of\u003c/code\u003estatements should be read at\nleast once before reassigning them. If they do not need to be read, the code should be refactored to avoid confusion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myFunction(name, strings) {\n  const nameCopy \u003d name;\n  name \u003d foo;\n\n  for (let str of strings) {\n    const strCopy \u003d str;\n    str \u003d \"\";\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThere is a common pattern in JavaScript to overwrite certain parameters depending on other parameters that are optional. For example, a callback\nis, by convention, always passed in the last position. If a parameter in a previous position was not passed, the callback will be passed in its\nposition instead.\u003c/p\u003e\n\u003cp\u003eTherefore, the rule ignores parameter reassignments that are inside an \u003ccode\u003eif\u003c/code\u003e statement block.\u003c/p\u003e\n\u003cpre\u003e\nfunction myFunction(param, optionalParam, cb) {\n  if (typeof optionalParam \u003d\u003d\u003d \u0027function\u0027) {\n    cb \u003d optionalParam;\n    optionalParam \u003d {};\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#catch_binding\"\u003eCatch\n  binding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003e\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\"\u003eCall by sharing\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIgnoring function parameters or overwriting them with a new value without reading them can lead to confusion and errors in the code. Developers\nwonâ€™t be able to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. It may\nindicate that the function is not properly designed or that there is a mistake in the code.\u003c/p\u003e\n\u003cp\u003eMoreover, some developers might also expect assignments of function parameters to be visible to callers, which is not the case. Arguments are\nalways passed by value and never passed by reference. If a function reassigns a parameter, the value wonâ€™t change outside the function. It is not\npossible to simulate an assignment on that variable in the callerâ€™s scope. However, objects are passed by value to their reference (\u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\"\u003epassed by sharing\u003c/a\u003e), which means if the objectâ€™s properties are mutated,\nthe change will impact the outside of the function.\u003c/p\u003e\n\u003cp\u003eThe same logic applies to caught exceptions and variable declarations inside \u003ccode\u003efor...in\u003c/code\u003e and \u003ccode\u003efor...of\u003c/code\u003e statements: their\ninitial values should not be ignored.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myFunction(name, strings) {\n  name \u003d foo; // Noncompliant: initial value of \u0027name\u0027 is ignored\n\n  for (let str of strings) {\n    str \u003d \"\";  // Noncompliant: initial value of \u0027str\u0027 is ignored\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eFunction parameters, caught exceptions, and variables initialized in \u003ccode\u003efor...in\u003c/code\u003e and \u003ccode\u003efor...of\u003c/code\u003estatements should be read at\nleast once before reassigning them. If they do not need to be read, the code should be refactored to avoid confusion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myFunction(name, strings) {\n  const nameCopy \u003d name;\n  name \u003d foo;\n\n  for (let str of strings) {\n    const strCopy \u003d str;\n    str \u003d \"\";\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThere is a common pattern in JavaScript to overwrite certain parameters depending on other parameters that are optional. For example, a callback\nis, by convention, always passed in the last position. If a parameter in a previous position was not passed, the callback will be passed in its\nposition instead.\u003c/p\u003e\n\u003cp\u003eTherefore, the rule ignores parameter reassignments that are inside an \u003ccode\u003eif\u003c/code\u003e statement block.\u003c/p\u003e\n\u003cpre\u003e\nfunction myFunction(param, optionalParam, cb) {\n  if (typeof optionalParam \u003d\u003d\u003d \u0027function\u0027) {\n    cb \u003d optionalParam;\n    optionalParam \u003d {};\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#catch_binding\"\u003eCatch\n  binding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003e\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing\"\u003eCall by sharing\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3525",
    "name": "Class methods should be used instead of \"prototype\" assignments",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOriginally JavaScript didnâ€™t support \u003ccode\u003eclass\u003c/code\u003ees, and class-like behavior had to be kludged using things like \u003ccode\u003eprototype\u003c/code\u003e\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering \u003ccode\u003eprototype\u003c/code\u003e uses should be converted to\ntrue \u003ccode\u003eclass\u003c/code\u003ees. The new syntax is more expressive and clearer, especially to those with experience in other languages.\u003c/p\u003e\n\u003cp\u003eSpecifically, with ES2015, you should simply declare a \u003ccode\u003eclass\u003c/code\u003e and define its methods inside the class declaration.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction MyNonClass(initializerArgs \u003d []) {\n  this._values \u003d [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething \u003d function () {  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass {\n  constructor(initializerArgs \u003d []) {\n    this._values \u003d [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOriginally JavaScript didnâ€™t support \u003ccode\u003eclass\u003c/code\u003ees, and class-like behavior had to be kludged using things like \u003ccode\u003eprototype\u003c/code\u003e\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering \u003ccode\u003eprototype\u003c/code\u003e uses should be converted to\ntrue \u003ccode\u003eclass\u003c/code\u003ees. The new syntax is more expressive and clearer, especially to those with experience in other languages.\u003c/p\u003e\n\u003cp\u003eSpecifically, with ES2015, you should simply declare a \u003ccode\u003eclass\u003c/code\u003e and define its methods inside the class declaration.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction MyNonClass(initializerArgs \u003d []) {\n  this._values \u003d [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething \u003d function () {  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nclass MyClass {\n  constructor(initializerArgs \u003d []) {\n    this._values \u003d [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "es2015",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4619",
    "name": "\"in\" should not be used on arrays",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e operator is used to check if a property is in an object or its \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eprototype chain\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen used on an array, it will compare against the indexes of the array, not the values. This is likely not to be the expected behavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction func() {\n    const arr \u003d [\"a\", \"b\", \"c\"];\n\n    const expectedValue \u003d \"b\";\n    if (expectedValue in arr) { // Noncompliant: will be always false\n        return expectedValue + \" found in the array\";\n    } else {\n        return expectedValue + \" not found\";\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eUse the method \u003ccode\u003eArray.prototype.includes()\u003c/code\u003e to determine whether an array contains a certain value. If the actual intention is to check\nfor an array slot, use \u003ccode\u003eObject.prototype.hasOwnProperty()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction func() {\n    const arr \u003d [\"a\", \"b\", \"c\"];\n\n    const expectedValue \u003d \"b\";\n    if (arr.includes(expectedValue)) {\n        return expectedValue + \" found in the array\";\n    } else {\n        return expectedValue + \" not found\";\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003e\u003ccode\u003ein\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003e\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"\u003e\u003ccode\u003eArray.prototype.includes()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e operator is used to check if a property is in an object or its \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eprototype chain\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen used on an array, it will compare against the indexes of the array, not the values. This is likely not to be the expected behavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction func() {\n    const arr \u003d [\"a\", \"b\", \"c\"];\n\n    const expectedValue \u003d \"b\";\n    if (expectedValue in arr) { // Noncompliant: will be always false\n        return expectedValue + \" found in the array\";\n    } else {\n        return expectedValue + \" not found\";\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eUse the method \u003ccode\u003eArray.prototype.includes()\u003c/code\u003e to determine whether an array contains a certain value. If the actual intention is to check\nfor an array slot, use \u003ccode\u003eObject.prototype.hasOwnProperty()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction func() {\n    const arr \u003d [\"a\", \"b\", \"c\"];\n\n    const expectedValue \u003d \"b\";\n    if (arr.includes(expectedValue)) {\n        return expectedValue + \" found in the array\";\n    } else {\n        return expectedValue + \" not found\";\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003e\u003ccode\u003ein\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003e\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"\u003e\u003ccode\u003eArray.prototype.includes()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3760",
    "name": "Arithmetic operators should only have numbers as operands",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eExpressions with arithmetic (\u003ccode\u003e/, *, %, ++, --, -, -\u003d, *\u003d, /\u003d, %\u003d, +\u003d, +\u003c/code\u003e), unary (\u003ccode\u003e-\u003c/code\u003e), or comparison operators (\u003ccode\u003e\u0026gt;,\n\u0026lt;, \u0026gt;\u003d, \u0026lt;\u003d\u003c/code\u003e) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstr \u003d \"80\";\nquarter \u003d str / 4; // Noncompliant\n\nif (str \u0026lt; 10) { // Noncompliant\n   // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstr \u003d \"80\";\nparsedStr \u003d parseInt(str);\nquarter \u003d parsedStr / 4;\n\nif (parsedStr \u0026lt; 10) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Expressions using the binary \u003ccode\u003e+\u003c/code\u003e operator with at least one \u003ccode\u003eString\u003c/code\u003e operand are ignored because the \u003ccode\u003e+\u003c/code\u003e\n  operator will perform a concatenation in that case. \u003c/li\u003e\n  \u003cli\u003e Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExpressions with arithmetic (\u003ccode\u003e/, *, %, ++, --, -, -\u003d, *\u003d, /\u003d, %\u003d, +\u003d, +\u003c/code\u003e), unary (\u003ccode\u003e-\u003c/code\u003e), or comparison operators (\u003ccode\u003e\u0026gt;,\n\u0026lt;, \u0026gt;\u003d, \u0026lt;\u003d\u003c/code\u003e) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nstr \u003d \"80\";\nquarter \u003d str / 4; // Noncompliant\n\nif (str \u0026lt; 10) { // Noncompliant\n   // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nstr \u003d \"80\";\nparsedStr \u003d parseInt(str);\nquarter \u003d parsedStr / 4;\n\nif (parsedStr \u0026lt; 10) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Expressions using the binary \u003ccode\u003e+\u003c/code\u003e operator with at least one \u003ccode\u003eString\u003c/code\u003e operand are ignored because the \u003ccode\u003e+\u003c/code\u003e\n  operator will perform a concatenation in that case. \u003c/li\u003e\n  \u003cli\u003e Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "confusing",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2310",
    "name": "Loop counters should not be assigned within the loop body",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLoop counters, such as variables used to track the iteration count in loops, should not be assigned from within the loop body to avoid unexpected\nbehavior and bugs. It can inadvertently lead to an infinite loop or make the loop behavior more complex and harder to reason about.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (let i \u003d 0; i \u0026lt; names.length; i++) {\n  if (!names[i]) {\n    i \u003d names.length; // Noncompliant: The loop counter i is assigned within the loop body\n  } else {\n    console.log(names[i]);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid these issues, you should update the loop counter only in the loopâ€™s update statement, typically located at the end of the loop body or\nwithin the loop header.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (let i \u003d 0; i \u0026lt; names.length; i++) {\n  if (!names[i]) {\n    break;\n  } else {\n    console.log(names[i]);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, you should use the \u003ccode\u003eforâ€¦â€‹of\u003c/code\u003e statement if your intention is only to iterate over the values of an iterable object.\u003c/p\u003e\n\u003cpre\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (const name of names) {\n  if (!name) {\n    break;\n  } else {\n    console.log(name);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003efor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"\u003eIteration protocols\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLoop counters, such as variables used to track the iteration count in loops, should not be assigned from within the loop body to avoid unexpected\nbehavior and bugs. It can inadvertently lead to an infinite loop or make the loop behavior more complex and harder to reason about.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (let i \u003d 0; i \u0026lt; names.length; i++) {\n  if (!names[i]) {\n    i \u003d names.length; // Noncompliant: The loop counter i is assigned within the loop body\n  } else {\n    console.log(names[i]);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo avoid these issues, you should update the loop counter only in the loopâ€™s update statement, typically located at the end of the loop body or\nwithin the loop header.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (let i \u003d 0; i \u0026lt; names.length; i++) {\n  if (!names[i]) {\n    break;\n  } else {\n    console.log(names[i]);\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, you should use the \u003ccode\u003eforâ€¦â€‹of\u003c/code\u003e statement if your intention is only to iterate over the values of an iterable object.\u003c/p\u003e\n\u003cpre\u003e\nconst names \u003d [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (const name of names) {\n  if (!name) {\n    break;\n  } else {\n    console.log(name);\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003efor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"\u003eIteration protocols\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2430",
    "name": "Constructor names should start with an upper case letter",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy convention, constructor function names should start with an upper case letter as a reminder that they should be called with the \u003ccode\u003enew\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\u003cp\u003eA function is considered to be a constructor when it sets all of its arguments as object properties, and returns no value.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction person (firstName, middleInitial, lastName) {  // Noncompliant\n  this.firstName \u003d firstName;\n  this.middleInitial \u003d middleInitial;\n  this.lastName \u003d lastName;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction Person (firstName, middleInitial, lastName) {\n  this.firstName \u003d firstName;\n  this.middleInitial \u003d middleInitial;\n  this.lastName \u003d lastName;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy convention, constructor function names should start with an upper case letter as a reminder that they should be called with the \u003ccode\u003enew\u003c/code\u003e\nkeyword.\u003c/p\u003e\n\u003cp\u003eA function is considered to be a constructor when it sets all of its arguments as object properties, and returns no value.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction person (firstName, middleInitial, lastName) {  // Noncompliant\n  this.firstName \u003d firstName;\n  this.middleInitial \u003d middleInitial;\n  this.lastName \u003d lastName;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction Person (firstName, middleInitial, lastName) {\n  this.firstName \u003d firstName;\n  this.middleInitial \u003d middleInitial;\n  this.lastName \u003d lastName;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2432",
    "name": "Setters should not return values",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, a setter is a special type of function that is used to set the value of a property on an object. Setters are defined using the\n\u003ccode\u003eset\u003c/code\u003e keyword followed by the name of the property that the setter is associated with.\u003c/p\u003e\n\u003cp\u003eTo set the property, we simply assign a value to it as if it were a regular property. The setter function is automatically called with the value\nthat we assign to the property.\u003c/p\u003e\n\u003cp\u003eFunctions declared with the \u003ccode\u003eset\u003c/code\u003e keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet person \u003d {\n  // ...\n  set firstname(first) {\n    this.first \u003d first;\n    return 42;  // Noncompliant: The return value 42 will be ignored\n  }\n};\nconsole.log(person.firstname \u003d \u0027bob\u0027); // Prints \u0027bob\u0027\n\u003c/pre\u003e\n\u003cp\u003eSince return values in setters are ignored, you should remove return statements altogether.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet person \u003d {\n  // ...\n  set firstname(first) {\n    this.first \u003d first;\n  }\n};\nconsole.log(person.firstname \u003d \u0027bob\u0027); // Prints \u0027bob\u0027\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003eset\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, a setter is a special type of function that is used to set the value of a property on an object. Setters are defined using the\n\u003ccode\u003eset\u003c/code\u003e keyword followed by the name of the property that the setter is associated with.\u003c/p\u003e\n\u003cp\u003eTo set the property, we simply assign a value to it as if it were a regular property. The setter function is automatically called with the value\nthat we assign to the property.\u003c/p\u003e\n\u003cp\u003eFunctions declared with the \u003ccode\u003eset\u003c/code\u003e keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is a mistake.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet person \u003d {\n  // ...\n  set firstname(first) {\n    this.first \u003d first;\n    return 42;  // Noncompliant: The return value 42 will be ignored\n  }\n};\nconsole.log(person.firstname \u003d \u0027bob\u0027); // Prints \u0027bob\u0027\n\u003c/pre\u003e\n\u003cp\u003eSince return values in setters are ignored, you should remove return statements altogether.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet person \u003d {\n  // ...\n  set firstname(first) {\n    this.first \u003d first;\n  }\n};\nconsole.log(person.firstname \u003d \u0027bob\u0027); // Prints \u0027bob\u0027\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set\"\u003eset\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3524",
    "name": "Braces and parentheses should be used consistently with arrow functions",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eArrow functions in JavaScript provide a concise syntax to write function expressions. However, the use of braces \u003ccode\u003e{}\u003c/code\u003e and parentheses\n\u003ccode\u003e()\u003c/code\u003e should be consistent in arrow functions for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Readability: Consistent use of braces and parentheses improves the readability of the code. It makes it easier for other developers to\n  understand the code quickly and reduces the chances of misinterpretation. \u003c/li\u003e\n  \u003cli\u003e Predictability: When braces and parentheses are used consistently, it makes the code more predictable. Developers can easily predict the\n  outcome of the function. \u003c/li\u003e\n  \u003cli\u003e Avoid Errors: Inconsistent use of braces and parentheses can lead to errors. For example, if braces are omitted for a function that has more\n  than one statement, it will result in a syntax error. \u003c/li\u003e\n  \u003cli\u003e Code Maintenance: Consistent use of braces and parentheses makes the code easier to maintain. Itâ€™s easier to add or remove code lines without\n  worrying about adjusting braces or parentheses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate effectively. This rule raises an issue when using parentheses and curly braces with an arrow\nfunction does not conform to the configured requirements.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eUse parentheses and curly braces with arrow functions consistently. By default, the rule forbids arrow functions to have parentheses around single\nparameters and curly braces around single-return bodies.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo \u003d (a) \u003d\u0026gt; { /* ... */ };  // Noncompliant; remove the parentheses from the parameter\nconst bar \u003d (a, b) \u003d\u0026gt; { return 0; };  // Noncompliant; remove the curly braces from the body\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst foo \u003d a \u003d\u0026gt; { /* ... */ };\nconst bar \u003d (a, b) \u003d\u0026gt; 0;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eArrow function\n  expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArrow functions in JavaScript provide a concise syntax to write function expressions. However, the use of braces \u003ccode\u003e{}\u003c/code\u003e and parentheses\n\u003ccode\u003e()\u003c/code\u003e should be consistent in arrow functions for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Readability: Consistent use of braces and parentheses improves the readability of the code. It makes it easier for other developers to\n  understand the code quickly and reduces the chances of misinterpretation. \u003c/li\u003e\n  \u003cli\u003e Predictability: When braces and parentheses are used consistently, it makes the code more predictable. Developers can easily predict the\n  outcome of the function. \u003c/li\u003e\n  \u003cli\u003e Avoid Errors: Inconsistent use of braces and parentheses can lead to errors. For example, if braces are omitted for a function that has more\n  than one statement, it will result in a syntax error. \u003c/li\u003e\n  \u003cli\u003e Code Maintenance: Consistent use of braces and parentheses makes the code easier to maintain. Itâ€™s easier to add or remove code lines without\n  worrying about adjusting braces or parentheses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate effectively. This rule raises an issue when using parentheses and curly braces with an arrow\nfunction does not conform to the configured requirements.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eUse parentheses and curly braces with arrow functions consistently. By default, the rule forbids arrow functions to have parentheses around single\nparameters and curly braces around single-return bodies.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst foo \u003d (a) \u003d\u0026gt; { /* ... */ };  // Noncompliant; remove the parentheses from the parameter\nconst bar \u003d (a, b) \u003d\u0026gt; { return 0; };  // Noncompliant; remove the curly braces from the body\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst foo \u003d a \u003d\u0026gt; { /* ... */ };\nconst bar \u003d (a, b) \u003d\u0026gt; 0;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003eArrow function\n  expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "body_braces": {
        "key": "body_braces",
        "name": "body_braces",
        "description": "True to require curly braces around function body. False to forbid them for single-return bodies.",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      },
      "parameter_parens": {
        "key": "parameter_parens",
        "name": "parameter_parens",
        "description": "True to require parentheses around parameters. False to forbid them for single parameter.",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "body_braces": "false",
      "parameter_parens": "false"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3403",
    "name": "Strict equality operators should not be used with dissimilar types",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule raises an issue when a strict equality operator is used to compare objects of different types.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe strict equality operator in JavaScript is represented by three equal signs (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e), the strict inequality with (\u003ccode\u003e!\u003d\u003d\u003c/code\u003e).\nIt is used to compare two values for equality, but with an important difference from the regular equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e). The strict\nequality operator compares both value and type, while the regular equality operator only compares values after performing type coercion if\nnecessary.\u003c/p\u003e\n\u003cp\u003eThe problem with using the strict equality operator (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e) with operands of dissimilar types lies in the way JavaScript handles the\ncomparison. When you use \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e to compare two values of different types, it will always return false since their types are different,\nregardless of whether the values could be considered equal under certain conditions.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d\u003d b) { // Noncompliant: Always false since \u0027a\u0027 is a number and \u0027b\u0027 a string\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eTo address this issue, you can use the loose equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e), which performs type coercion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d b) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, use the strict equality operator (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e) but ensure that the operands have the same type before performing the\ncomparison. You can explicitly convert the operands to a common type using functions like \u003ccode\u003eNumber()\u003c/code\u003e, \u003ccode\u003eString()\u003c/code\u003e, or other\nappropriate methods depending on the situation.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d\u003d Number(b)) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\"\u003eStrict equality\n  (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\"\u003eStrict inequality\n  (\u003ccode\u003e!\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\"\u003eEquality (\u003ccode\u003e\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\"\u003eInequality (\u003ccode\u003e!\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003e\u003ccode\u003eNumber()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003e\u003ccode\u003eString()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003e\u003ccode\u003eBoolean()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a strict equality operator is used to compare objects of different types.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe strict equality operator in JavaScript is represented by three equal signs (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e), the strict inequality with (\u003ccode\u003e!\u003d\u003d\u003c/code\u003e).\nIt is used to compare two values for equality, but with an important difference from the regular equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e). The strict\nequality operator compares both value and type, while the regular equality operator only compares values after performing type coercion if\nnecessary.\u003c/p\u003e\n\u003cp\u003eThe problem with using the strict equality operator (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e) with operands of dissimilar types lies in the way JavaScript handles the\ncomparison. When you use \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e to compare two values of different types, it will always return false since their types are different,\nregardless of whether the values could be considered equal under certain conditions.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d\u003d b) { // Noncompliant: Always false since \u0027a\u0027 is a number and \u0027b\u0027 a string\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eTo address this issue, you can use the loose equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e), which performs type coercion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d b) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, use the strict equality operator (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e) but ensure that the operands have the same type before performing the\ncomparison. You can explicitly convert the operands to a common type using functions like \u003ccode\u003eNumber()\u003c/code\u003e, \u003ccode\u003eString()\u003c/code\u003e, or other\nappropriate methods depending on the situation.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet a \u003d 8;\nlet b \u003d \"8\";\n\nif (a \u003d\u003d\u003d Number(b)) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\"\u003eStrict equality\n  (\u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\"\u003eStrict inequality\n  (\u003ccode\u003e!\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\"\u003eEquality (\u003ccode\u003e\u003d\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\"\u003eInequality (\u003ccode\u003e!\u003d\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003e\u003ccode\u003eNumber()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003e\u003ccode\u003eString()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003e\u003ccode\u003eBoolean()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3523",
    "name": "Function constructors should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S1523} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructorâ€™s string\narguments similar to the way \u003ccode\u003eeval\u003c/code\u003e works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.\u003c/p\u003e\n\u003cp\u003eIn general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5â€™s built-in JSON functions or\na dedicated library.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d  new Function(\"return \" + data)();  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d JSON.parse(data);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFunction calls where the argument is a string literal (e.g. \u003ccode\u003e(Function(\u0027return this\u0027))()\u003c/code\u003e) are ignored.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP Top 10 2017 Category A1 - Injection \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S1523} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructorâ€™s string\narguments similar to the way \u003ccode\u003eeval\u003c/code\u003e works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.\u003c/p\u003e\n\u003cp\u003eIn general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5â€™s built-in JSON functions or\na dedicated library.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d  new Function(\"return \" + data)();  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d JSON.parse(data);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eFunction calls where the argument is a string literal (e.g. \u003ccode\u003e(Function(\u0027return this\u0027))()\u003c/code\u003e) are ignored.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP Top 10 2017 Category A1 - Injection \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3402",
    "name": "Strings and non-strings should not be added",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUse a \u003ccode\u003e+\u003c/code\u003e with two numbers and youâ€™ll get addition. But use it with a string and anything else, and youâ€™ll get concatenation. This could\nbe confusing, especially if itâ€™s not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e+\u003d\u003c/code\u003e is used with a string and a non-string.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo() {\n  let x \u003d 5 + 8;  // okay\n  let z \u003d \"8\"\n  return x + z;  // Noncompliant; yields string \"138\"\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo() {\n  let x \u003d 5 + 8;\n  let z \u003d \"8\"\n  return x + Number(z);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUse a \u003ccode\u003e+\u003c/code\u003e with two numbers and youâ€™ll get addition. But use it with a string and anything else, and youâ€™ll get concatenation. This could\nbe confusing, especially if itâ€™s not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e+\u003d\u003c/code\u003e is used with a string and a non-string.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo() {\n  let x \u003d 5 + 8;  // okay\n  let z \u003d \"8\"\n  return x + z;  // Noncompliant; yields string \"138\"\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo() {\n  let x \u003d 5 + 8;\n  let z \u003d \"8\"\n  return x + Number(z);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "confusing",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3757",
    "name": "Arithmetic operations should not result in \"NaN\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe result of an expression with an arithmetic operator \u003ccode\u003e/, *, %, ++, --, -, +\u003d, -\u003d, *\u003d, /\u003d, %\u003d, +\u003c/code\u003e or unary operator \u003ccode\u003e+, -\u003c/code\u003e\nwhen at least one operand is \u003ccode\u003eObject\u003c/code\u003e or \u003ccode\u003eUndefined\u003c/code\u003e will be always a \u003ccode\u003eNaN\u003c/code\u003e (Not a Number).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nx \u003d [1, 2];\nvar y \u003d x / 4;  //Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDate\u003c/code\u003e operands: they are implicitly converted to numbers. \u003c/li\u003e\n  \u003cli\u003e The binary \u003ccode\u003e+\u003c/code\u003e operator with \u003ccode\u003eObject\u003c/code\u003e operand (concatenation). \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe result of an expression with an arithmetic operator \u003ccode\u003e/, *, %, ++, --, -, +\u003d, -\u003d, *\u003d, /\u003d, %\u003d, +\u003c/code\u003e or unary operator \u003ccode\u003e+, -\u003c/code\u003e\nwhen at least one operand is \u003ccode\u003eObject\u003c/code\u003e or \u003ccode\u003eUndefined\u003c/code\u003e will be always a \u003ccode\u003eNaN\u003c/code\u003e (Not a Number).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nx \u003d [1, 2];\nvar y \u003d x / 4;  //Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDate\u003c/code\u003e operands: they are implicitly converted to numbers. \u003c/li\u003e\n  \u003cli\u003e The binary \u003ccode\u003e+\u003c/code\u003e operator with \u003ccode\u003eObject\u003c/code\u003e operand (concatenation). \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3514",
    "name": "Destructuring syntax should be used for assignments",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo (obj1, obj2, array) {\n  var a \u003d obj1.a;  // Noncompliant\n  var b \u003d obj1.b;\n\n  var name \u003d obj2.name;  // ignored; there\u0027s only one extraction-and-assignment\n\n  var zero \u003d array[0];  // Noncompliant\n  var one \u003d array[1];\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo (obj1, obj2, array) {\n  var {a, b} \u003d obj1;\n\n  var {name} \u003d obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] \u003d array;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo (obj1, obj2, array) {\n  var a \u003d obj1.a;  // Noncompliant\n  var b \u003d obj1.b;\n\n  var name \u003d obj2.name;  // ignored; there\u0027s only one extraction-and-assignment\n\n  var zero \u003d array[0];  // Noncompliant\n  var one \u003d array[1];\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction foo (obj1, obj2, array) {\n  var {a, b} \u003d obj1;\n\n  var {name} \u003d obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] \u003d array;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "clumsy",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2428",
    "name": "Object literal syntax should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eObject literal syntax, which initializes an objectâ€™s properties inside the object declaration is cleaner and clearer than the alternative: creating\nan empty object, and then giving it properties one by one.\u003c/p\u003e\n\u003cp\u003eAn issue is raised when the following pattern is met:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An empty object is created. \u003c/li\u003e\n  \u003cli\u003e A consecutive single-line statement adds a property to the created object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet person \u003d {};  // Noncompliant\nperson.firstName \u003d \"John\";\nperson.middleInitial \u003d \"Q\";\nperson.lastName \u003d \"Public\";\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet person \u003d {\n  firstName: \"John\",\n  middleInitial: \"Q\",\n  lastName: \"Public\",\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eObject literal syntax, which initializes an objectâ€™s properties inside the object declaration is cleaner and clearer than the alternative: creating\nan empty object, and then giving it properties one by one.\u003c/p\u003e\n\u003cp\u003eAn issue is raised when the following pattern is met:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An empty object is created. \u003c/li\u003e\n  \u003cli\u003e A consecutive single-line statement adds a property to the created object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet person \u003d {};  // Noncompliant\nperson.firstName \u003d \"John\";\nperson.middleInitial \u003d \"Q\";\nperson.lastName \u003d \"Public\";\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet person \u003d {\n  firstName: \"John\",\n  middleInitial: \"Q\",\n  lastName: \"Public\",\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3516",
    "name": "Function returns should not be invariant",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a function has multiple \u003ccode\u003ereturn\u003c/code\u003e statements and returns the same value in more than one of them, it can lead to several potential\nproblems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can make the code more difficult to understand and maintain, as the reader may be unsure why the same value is being returned multiple\n  times. This can introduce ambiguity and increase the chances of misunderstanding the functionâ€™s intent. \u003c/li\u003e\n  \u003cli\u003e The use of multiple return statements with the same value might lead someone to assume that each return corresponds to a distinct case or\n  outcome. However, if they all return the same value, it can be misleading and may indicate an oversight or mistake in the code. \u003c/li\u003e\n  \u003cli\u003e When the function needs to be modified or extended in the future, having multiple identical return statements can make it harder to implement\n  changes correctly across all occurrences. This can introduce bugs and inconsistencies in the codebase. \u003c/li\u003e\n  \u003cli\u003e Code readability is crucial for maintainability and collaboration. Having repetitive return statements can lead to unnecessary code\n  duplication, which should be avoided in favor of creating modular and clean code. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when a function contains several \u003ccode\u003ereturn\u003c/code\u003e statements that all return the same value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction f(a, g) { // Noncompliant: \u0027f\u0027 returns \u0027b\u0027 on two different return statements\n  const b \u003d 42;\n  if (a) {\n    g(a);\n    return b;\n  }\n  return b;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo address this, you should refactor the function to use a single return statement with a variable storing the value to be returned. This way, the\ncode becomes more concise, easier to understand, and reduces the likelihood of introducing errors when making changes in the future. By using a single\nreturn point, you can also enforce consistency and prevent unexpected return values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction f(a, g) {\n  const b \u003d 42;\n  if (a) {\n    g(a);\n  }\n  return b;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\"\u003eFunction return values\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a function has multiple \u003ccode\u003ereturn\u003c/code\u003e statements and returns the same value in more than one of them, it can lead to several potential\nproblems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can make the code more difficult to understand and maintain, as the reader may be unsure why the same value is being returned multiple\n  times. This can introduce ambiguity and increase the chances of misunderstanding the functionâ€™s intent. \u003c/li\u003e\n  \u003cli\u003e The use of multiple return statements with the same value might lead someone to assume that each return corresponds to a distinct case or\n  outcome. However, if they all return the same value, it can be misleading and may indicate an oversight or mistake in the code. \u003c/li\u003e\n  \u003cli\u003e When the function needs to be modified or extended in the future, having multiple identical return statements can make it harder to implement\n  changes correctly across all occurrences. This can introduce bugs and inconsistencies in the codebase. \u003c/li\u003e\n  \u003cli\u003e Code readability is crucial for maintainability and collaboration. Having repetitive return statements can lead to unnecessary code\n  duplication, which should be avoided in favor of creating modular and clean code. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue when a function contains several \u003ccode\u003ereturn\u003c/code\u003e statements that all return the same value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction f(a, g) { // Noncompliant: \u0027f\u0027 returns \u0027b\u0027 on two different return statements\n  const b \u003d 42;\n  if (a) {\n    g(a);\n    return b;\n  }\n  return b;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo address this, you should refactor the function to use a single return statement with a variable storing the value to be returned. This way, the\ncode becomes more concise, easier to understand, and reduces the likelihood of introducing errors when making changes in the future. By using a single\nreturn point, you can also enforce consistency and prevent unexpected return values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction f(a, g) {\n  const b \u003d 42;\n  if (a) {\n    g(a);\n  }\n  return b;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Return_values\"\u003eFunction return values\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2427",
    "name": "The base should be provided to \"parseInt\"",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eparseInt\u003c/code\u003e function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nparseInt(\"010\");  // Noncompliant; pre-2013 browsers may return 8\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nparseInt(\"010\", 10);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eparseInt\u003c/code\u003e function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nparseInt(\"010\");  // Noncompliant; pre-2013 browsers may return 8\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nparseInt(\"010\", 10);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "user-experience"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3758",
    "name": "Values not convertible to numbers should not be used in numeric comparisons",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn a Zen-like manner, \u003ccode\u003eNaN\u003c/code\u003e isnâ€™t equal to anything, even itself. So comparisons (\u003ccode\u003e\u0026gt;, \u0026lt;, \u0026gt;\u003d, \u0026lt;\u003d\u003c/code\u003e) where one\noperand is \u003ccode\u003eNaN\u003c/code\u003e or evaluates to \u003ccode\u003eNaN\u003c/code\u003e always return \u003ccode\u003efalse\u003c/code\u003e. Specifically, \u003ccode\u003eundefined\u003c/code\u003e and objects that\ncannot be converted to numbers evaluate to \u003ccode\u003eNaN\u003c/code\u003e when used in numerical comparisons.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is at least one path through the code where one of the operands to a comparison is \u003ccode\u003eNaN\u003c/code\u003e,\n\u003ccode\u003eundefined\u003c/code\u003e or an \u003ccode\u003eObject\u003c/code\u003e which cannot be converted to a number.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x;  // x is currently \"undefined\"\nif (someCondition()) {\n  x \u003d 42;\n}\n\nif (42 \u0026gt; x) {  // Noncompliant; \"x\" might still be \"undefined\"\n  doSomething();\n}\n\nvar obj \u003d {prop: 42};\nif (obj \u0026gt; 24) { // Noncompliant\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x;\nif (someCondition()) {\n  x \u003d 42;\n} else {\n  x \u003d foo();\n}\n\nif (42 \u0026gt; x) {\n  doSomething();\n}\n\nvar obj \u003d {prop: 42};\nif (obj.prop \u0026gt; 24) {\n  doSomething();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn a Zen-like manner, \u003ccode\u003eNaN\u003c/code\u003e isnâ€™t equal to anything, even itself. So comparisons (\u003ccode\u003e\u0026gt;, \u0026lt;, \u0026gt;\u003d, \u0026lt;\u003d\u003c/code\u003e) where one\noperand is \u003ccode\u003eNaN\u003c/code\u003e or evaluates to \u003ccode\u003eNaN\u003c/code\u003e always return \u003ccode\u003efalse\u003c/code\u003e. Specifically, \u003ccode\u003eundefined\u003c/code\u003e and objects that\ncannot be converted to numbers evaluate to \u003ccode\u003eNaN\u003c/code\u003e when used in numerical comparisons.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is at least one path through the code where one of the operands to a comparison is \u003ccode\u003eNaN\u003c/code\u003e,\n\u003ccode\u003eundefined\u003c/code\u003e or an \u003ccode\u003eObject\u003c/code\u003e which cannot be converted to a number.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x;  // x is currently \"undefined\"\nif (someCondition()) {\n  x \u003d 42;\n}\n\nif (42 \u0026gt; x) {  // Noncompliant; \"x\" might still be \"undefined\"\n  doSomething();\n}\n\nvar obj \u003d {prop: 42};\nif (obj \u0026gt; 24) { // Noncompliant\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x;\nif (someCondition()) {\n  x \u003d 42;\n} else {\n  x \u003d foo();\n}\n\nif (42 \u0026gt; x) {\n  doSomething();\n}\n\nvar obj \u003d {prop: 42};\nif (obj.prop \u0026gt; 24) {\n  doSomething();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1219",
    "name": "\"switch\" statements should not contain non-case labels",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eCase 1, the code is syntactically correct but the behavior is not the expected one\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eCase 2, the code is correct and behaves as expected but is hardly readable\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i \u003d 0 ; i \u0026lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn\u0027t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eCase 1\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eCase 2\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eCase 1, the code is syntactically correct but the behavior is not the expected one\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eCase 2, the code is correct and behaves as expected but is hardly readable\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i \u003d 0 ; i \u0026lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn\u0027t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eCase 1\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\u003c/pre\u003e\n\u003cp\u003eCase 2\u003c/p\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1451",
    "name": "Track lack of copyright and license headers",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LAWFUL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "headerFormat": {
        "key": "headerFormat",
        "name": "headerFormat",
        "description": "Expected copyright and license header",
        "type": "TEXT",
        "multiple": false,
        "possibleValues": []
      },
      "isRegularExpression": {
        "key": "isRegularExpression",
        "name": "isRegularExpression",
        "description": "Whether the headerFormat is a regular expression",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "isRegularExpression": "false"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3513",
    "name": "\"arguments\" should not be accessed directly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe magic of JavaScript is that you can pass arguments to functions that donâ€™t declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args \u003ccode\u003efunction\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut just because you can, that doesâ€™t mean you should. The expectation and use of arguments inside functions that donâ€™t explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently.\u003c/p\u003e\n\u003cp\u003eIf you donâ€™t want to name arguments explicitly, use the \u003ccode\u003e...\u003c/code\u003e syntax to specify that an a variable number of arguments is expected. Then\ninside the function, youâ€™ll be dealing with a first-class array, rather than an array-like structure.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction concatenate() {\n  let args \u003d Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(\u0027, \u0027);\n}\n\nfunction doSomething(isTrue) {\n  var args \u003d Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction concatenate(...args) {\n  return args.join(\u0027, \u0027);\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe magic of JavaScript is that you can pass arguments to functions that donâ€™t declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args \u003ccode\u003efunction\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut just because you can, that doesâ€™t mean you should. The expectation and use of arguments inside functions that donâ€™t explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently.\u003c/p\u003e\n\u003cp\u003eIf you donâ€™t want to name arguments explicitly, use the \u003ccode\u003e...\u003c/code\u003e syntax to specify that an a variable number of arguments is expected. Then\ninside the function, youâ€™ll be dealing with a first-class array, rather than an array-like structure.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction concatenate() {\n  let args \u003d Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(\u0027, \u0027);\n}\n\nfunction doSomething(isTrue) {\n  var args \u003d Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction concatenate(...args) {\n  return args.join(\u0027, \u0027);\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "api-design",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2424",
    "name": "Built-in objects should not be overridden",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOverriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.\u003c/p\u003e\n\u003cp\u003eThis rule detects overrides of the following native objects:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError \u003c/li\u003e\n  \u003cli\u003e Numbers and dates - Number, Math, Date \u003c/li\u003e\n  \u003cli\u003e Text processing - String, RegExp \u003c/li\u003e\n  \u003cli\u003e Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array \u003c/li\u003e\n  \u003cli\u003e Keyed collections - Map, Set, WeakMap, WeakSet \u003c/li\u003e\n  \u003cli\u003e Structured data - ArrayBuffer, DataView, JSON \u003c/li\u003e\n  \u003cli\u003e Control abstraction objects - Promise \u003c/li\u003e\n  \u003cli\u003e Reflection - Reflect, Proxy \u003c/li\u003e\n  \u003cli\u003e Internationalization - Intl \u003c/li\u003e\n  \u003cli\u003e Non-standard objects - Generator, Iterator, ParallelArray, StopIteration \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOverriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.\u003c/p\u003e\n\u003cp\u003eThis rule detects overrides of the following native objects:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError \u003c/li\u003e\n  \u003cli\u003e Numbers and dates - Number, Math, Date \u003c/li\u003e\n  \u003cli\u003e Text processing - String, RegExp \u003c/li\u003e\n  \u003cli\u003e Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array \u003c/li\u003e\n  \u003cli\u003e Keyed collections - Map, Set, WeakMap, WeakSet \u003c/li\u003e\n  \u003cli\u003e Structured data - ArrayBuffer, DataView, JSON \u003c/li\u003e\n  \u003cli\u003e Control abstraction objects - Promise \u003c/li\u003e\n  \u003cli\u003e Reflection - Reflect, Proxy \u003c/li\u003e\n  \u003cli\u003e Internationalization - Intl \u003c/li\u003e\n  \u003cli\u003e Non-standard objects - Generator, Iterator, ParallelArray, StopIteration \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4721",
    "name": "Using shell interpreter when executing OS commands is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OS command name or parameters are user-controlled. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst cp \u003d require(\u0027child_process\u0027);\n\n// A shell will be spawn in these following cases:\ncp.exec(cmd); // Sensitive\ncp.execSync(cmd); // Sensitive\n\ncp.spawn(cmd, { shell: true }); // Sensitive\ncp.spawnSync(cmd, { shell: true }); // Sensitive\ncp.execFile(cmd, { shell: true }); // Sensitive\ncp.execFileSync(cmd, { shell: true }); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eUse functions that donâ€™t spawn a shell.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst cp \u003d require(\u0027child_process\u0027);\n\ncp.spawnSync(\"/usr/bin/file.exe\", { shell: false }); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78\"\u003eMITRE, CWE-78\u003c/a\u003e - Improper Neutralization of Special Elements used in an OS Command \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S3512",
    "name": "Template strings should be used instead of concatenation",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction sayHello(name) {\n  console.log(\"hello \" + name);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction sayHello(name) {\n  console.log(`hello ${name}`);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction sayHello(name) {\n  console.log(\"hello \" + name);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction sayHello(name) {\n  console.log(`hello ${name}`);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "clumsy",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6092",
    "name": "Chai assertions should have only one reason to succeed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA unit test assertion should have only one reason to succeed because it helps to ensure that the test is focused and specific. When a test has\nmultiple reasons to succeed, it becomes difficult to determine the root cause of a failure if the test fails. This can lead to confusion and wasted\ntime trying to debug the test.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following Chai.js assertions are found:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_throw\"\u003e\u003ccode\u003e.throw\u003c/code\u003e\u003c/a\u003e are used together and at least one\n  argument is provided to \u003ccode\u003e.throw\u003c/code\u003e. Such assertions succeed when the target either does not throw any exception, or when it throws an\n  exception different from the one provided. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_include\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e are used together and an\n  \u003ccode\u003eobject\u003c/code\u003e is given to \u003ccode\u003e.include\u003c/code\u003e. Such assertions succeed when one or multiple key/values are missing. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_property\"\u003e\u003ccode\u003e.property\u003c/code\u003e\u003c/a\u003e are used together and\n  \u003ccode\u003e.property\u003c/code\u003e is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have the requested property, or when\n  this property exists but has a different value. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor\"\u003e\u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e\u003c/a\u003e are\n  used together and \u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have\n  the requested property descriptor, or its property descriptor is not deeply equal to the given descriptor \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_members\"\u003e\u003ccode\u003e.members\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when one or multiple members are missing. \u003c/li\u003e\n  \u003cli\u003e When \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_change\"\u003e\u003ccode\u003e.change\u003c/code\u003e\u003c/a\u003e and \u003ca\n  href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e are used together. Such assertions succeed when the target either decreases or\n  increases by the given delta \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_increase\"\u003e\u003ccode\u003e.increase\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when the target either decreases or stays the same. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_decrease\"\u003e\u003ccode\u003e.decrease\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when the target either increases or stays the same. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e negates \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e. Such assertions succeed when the\n  target didnâ€™t change by one specific delta among all the possible deltas. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_finite\"\u003e\u003ccode\u003e.finite\u003c/code\u003e\u003c/a\u003e are used together. Such assertions\n  succeed when the target either is not a \u003ccode\u003enumber\u003c/code\u003e, or is one of \u003ccode\u003eNan\u003c/code\u003e, positive \u003ccode\u003eInfinity\u003c/code\u003e, negative\n  \u003ccode\u003eInfinity\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"Each Chai.js assertion\", function() {\n    const throwsTypeError \u003d () \u003d\u0026gt; { throw new TypeError() }\n\n    it(\"has more than one reason to succeed\", function() {\n        expect(throwsTypeError).to.not.throw(ReferenceError) // Noncompliant\n        expect({a: 42}).to.not.include({b: 10, c: 20});  // Noncompliant\n        expect({a: 21}).to.not.have.property(\u0027b\u0027, 42); // Noncompliant\n        expect({a: 21}).to.not.have.ownPropertyDescriptor(\u0027b\u0027, {   // Noncompliant\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: 42,\n        });\n        expect([21, 42]).to.not.have.members([1, 2]); // Noncompliant\n\n        let myObj \u003d { value: 1 }\n        const incThree \u003d () \u003d\u0026gt; { myObj.value +\u003d 3; };\n        const decThree \u003d () \u003d\u0026gt; { myObj.value -\u003d 3; };\n        const doNothing \u003d () \u003d\u0026gt; {};\n\n        expect(incThree).to.change(myObj, \u0027value\u0027).by(3); // Noncompliant\n        expect(decThree).to.change(myObj, \u0027value\u0027).by(3); // Noncompliant\n\n        expect(decThree).to.not.increase(myObj, \u0027value\u0027); // Noncompliant\n        expect(incThree).to.not.decrease(myObj, \u0027value\u0027); // Noncompliant\n\n        expect(doNothing).to.not.increase(myObj, \u0027value\u0027); // Noncompliant\n        expect(doNothing).to.not.decrease(myObj, \u0027value\u0027); // Noncompliant\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).but.not.by(1); // Noncompliant\n\n        let toCheck;\n        expect(toCheck).to.not.be.finite; // Noncompliant\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eBy having only one reason to succeed, the test is more precise and easier to understand. It also helps to ensure that the test is testing only one\nspecific behavior or functionality of the code, which makes it easier to identify and fix any issues that arise.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"Each Chai.js assertion\", function() {\n    const throwsTypeError \u003d () \u003d\u0026gt; { throw new TypeError() }\n\n    it(\"has only one reason to succeed\", function() {\n        expect(throwsTypeError).to.throw(TypeError)\n        expect({a: 42}).to.not.have.any.keys(\u0027b\u0027, \u0027c\u0027);\n        expect({a: 21}).to.not.have.property(\u0027b\u0027);\n        expect({a: 21}).to.not.have.ownPropertyDescriptor(\u0027b\u0027);\n        expect([21, 42]).to.not.include(1).and.not.include(2);\n\n        let myObj \u003d { value: 1 }\n        const incThree \u003d () \u003d\u0026gt; { myObj.value +\u003d 3; };\n        const decThree \u003d () \u003d\u0026gt; { myObj.value -\u003d 3; };\n        const doNothing \u003d () \u003d\u0026gt; {};\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n        expect(decThree).to.decrease(myObj, \u0027value\u0027).by(3);\n\n        expect(decThree).to.decrease(myObj, \u0027value\u0027).by(3);\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n\n        expect(doNothing).to.not.change(myObj, \u0027value\u0027);\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n\n        let toCheck;\n        // Either of the following is valid\n        expect(toCheck).to.be.a(\u0027string\u0027);\n        expect(toCheck).to.be.NaN;\n        expect(toCheck).to.equal(Infinity);\n        expect(toCheck).to.equal(-Infinity);\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eHaving only one reason to succeed also helps to make the test more maintainable. If the test needs to be updated or modified in the future, it is\neasier to do so when the test is focused on a single behavior or functionality.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_change\"\u003e\u003ccode\u003e.change\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_decrease\"\u003e\u003ccode\u003e.decrease\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_finite\"\u003e\u003ccode\u003e.finite\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_include\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_increase\"\u003e\u003ccode\u003e.increase\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_members\"\u003e\u003ccode\u003e.members\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor\"\u003e\u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_property\"\u003e\u003ccode\u003e.property\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_throw\"\u003e\u003ccode\u003e.throw\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA unit test assertion should have only one reason to succeed because it helps to ensure that the test is focused and specific. When a test has\nmultiple reasons to succeed, it becomes difficult to determine the root cause of a failure if the test fails. This can lead to confusion and wasted\ntime trying to debug the test.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following Chai.js assertions are found:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_throw\"\u003e\u003ccode\u003e.throw\u003c/code\u003e\u003c/a\u003e are used together and at least one\n  argument is provided to \u003ccode\u003e.throw\u003c/code\u003e. Such assertions succeed when the target either does not throw any exception, or when it throws an\n  exception different from the one provided. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_include\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e are used together and an\n  \u003ccode\u003eobject\u003c/code\u003e is given to \u003ccode\u003e.include\u003c/code\u003e. Such assertions succeed when one or multiple key/values are missing. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_property\"\u003e\u003ccode\u003e.property\u003c/code\u003e\u003c/a\u003e are used together and\n  \u003ccode\u003e.property\u003c/code\u003e is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have the requested property, or when\n  this property exists but has a different value. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor\"\u003e\u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e\u003c/a\u003e are\n  used together and \u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e is given at least two arguments. Such assertions succeed when the target either doesnâ€™t have\n  the requested property descriptor, or its property descriptor is not deeply equal to the given descriptor \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_members\"\u003e\u003ccode\u003e.members\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when one or multiple members are missing. \u003c/li\u003e\n  \u003cli\u003e When \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_change\"\u003e\u003ccode\u003e.change\u003c/code\u003e\u003c/a\u003e and \u003ca\n  href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e are used together. Such assertions succeed when the target either decreases or\n  increases by the given delta \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_increase\"\u003e\u003ccode\u003e.increase\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when the target either decreases or stays the same. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_decrease\"\u003e\u003ccode\u003e.decrease\u003c/code\u003e\u003c/a\u003e are used together. Such\n  assertions succeed when the target either increases or stays the same. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e negates \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e. Such assertions succeed when the\n  target didnâ€™t change by one specific delta among all the possible deltas. \u003c/li\u003e\n  \u003cli\u003e When \u003ccode\u003e.not\u003c/code\u003e and \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_finite\"\u003e\u003ccode\u003e.finite\u003c/code\u003e\u003c/a\u003e are used together. Such assertions\n  succeed when the target either is not a \u003ccode\u003enumber\u003c/code\u003e, or is one of \u003ccode\u003eNan\u003c/code\u003e, positive \u003ccode\u003eInfinity\u003c/code\u003e, negative\n  \u003ccode\u003eInfinity\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"Each Chai.js assertion\", function() {\n    const throwsTypeError \u003d () \u003d\u0026gt; { throw new TypeError() }\n\n    it(\"has more than one reason to succeed\", function() {\n        expect(throwsTypeError).to.not.throw(ReferenceError) // Noncompliant\n        expect({a: 42}).to.not.include({b: 10, c: 20});  // Noncompliant\n        expect({a: 21}).to.not.have.property(\u0027b\u0027, 42); // Noncompliant\n        expect({a: 21}).to.not.have.ownPropertyDescriptor(\u0027b\u0027, {   // Noncompliant\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: 42,\n        });\n        expect([21, 42]).to.not.have.members([1, 2]); // Noncompliant\n\n        let myObj \u003d { value: 1 }\n        const incThree \u003d () \u003d\u0026gt; { myObj.value +\u003d 3; };\n        const decThree \u003d () \u003d\u0026gt; { myObj.value -\u003d 3; };\n        const doNothing \u003d () \u003d\u0026gt; {};\n\n        expect(incThree).to.change(myObj, \u0027value\u0027).by(3); // Noncompliant\n        expect(decThree).to.change(myObj, \u0027value\u0027).by(3); // Noncompliant\n\n        expect(decThree).to.not.increase(myObj, \u0027value\u0027); // Noncompliant\n        expect(incThree).to.not.decrease(myObj, \u0027value\u0027); // Noncompliant\n\n        expect(doNothing).to.not.increase(myObj, \u0027value\u0027); // Noncompliant\n        expect(doNothing).to.not.decrease(myObj, \u0027value\u0027); // Noncompliant\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).but.not.by(1); // Noncompliant\n\n        let toCheck;\n        expect(toCheck).to.not.be.finite; // Noncompliant\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eBy having only one reason to succeed, the test is more precise and easier to understand. It also helps to ensure that the test is testing only one\nspecific behavior or functionality of the code, which makes it easier to identify and fix any issues that arise.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"Each Chai.js assertion\", function() {\n    const throwsTypeError \u003d () \u003d\u0026gt; { throw new TypeError() }\n\n    it(\"has only one reason to succeed\", function() {\n        expect(throwsTypeError).to.throw(TypeError)\n        expect({a: 42}).to.not.have.any.keys(\u0027b\u0027, \u0027c\u0027);\n        expect({a: 21}).to.not.have.property(\u0027b\u0027);\n        expect({a: 21}).to.not.have.ownPropertyDescriptor(\u0027b\u0027);\n        expect([21, 42]).to.not.include(1).and.not.include(2);\n\n        let myObj \u003d { value: 1 }\n        const incThree \u003d () \u003d\u0026gt; { myObj.value +\u003d 3; };\n        const decThree \u003d () \u003d\u0026gt; { myObj.value -\u003d 3; };\n        const doNothing \u003d () \u003d\u0026gt; {};\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n        expect(decThree).to.decrease(myObj, \u0027value\u0027).by(3);\n\n        expect(decThree).to.decrease(myObj, \u0027value\u0027).by(3);\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n\n        expect(doNothing).to.not.change(myObj, \u0027value\u0027);\n\n        expect(incThree).to.increase(myObj, \u0027value\u0027).by(3);\n\n        let toCheck;\n        // Either of the following is valid\n        expect(toCheck).to.be.a(\u0027string\u0027);\n        expect(toCheck).to.be.NaN;\n        expect(toCheck).to.equal(Infinity);\n        expect(toCheck).to.equal(-Infinity);\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eHaving only one reason to succeed also helps to make the test more maintainable. If the test needs to be updated or modified in the future, it is\neasier to do so when the test is focused on a single behavior or functionality.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_by\"\u003e\u003ccode\u003e.by\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_change\"\u003e\u003ccode\u003e.change\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_decrease\"\u003e\u003ccode\u003e.decrease\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_finite\"\u003e\u003ccode\u003e.finite\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_include\"\u003e\u003ccode\u003e.include\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_increase\"\u003e\u003ccode\u003e.increase\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_members\"\u003e\u003ccode\u003e.members\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_ownpropertydescriptor\"\u003e\u003ccode\u003e.ownPropertyDescriptor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_property\"\u003e\u003ccode\u003e.property\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd/#method_throw\"\u003e\u003ccode\u003e.throw\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "chai",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1523",
    "name": "Dynamically executing code is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExecuting code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-9807\"\u003eCVE-2017-9807\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-9802\"\u003eCVE-2017-9802\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon as they also increase the risk of \u003ca\nhref\u003d\"https://owasp.org/www-community/attacks/Code_Injection\"\u003eInjected Code\u003c/a\u003e. Such attacks can either run on the server or in the client (exemple:\nXSS attack) and have a huge impact on an applicationâ€™s security.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues on calls to \u003ccode\u003eeval\u003c/code\u003e and \u003ccode\u003eFunction\u003c/code\u003e constructor. This rule does not detect code injections. It only\nhighlights the use of APIs which should be used sparingly and very carefully. The goal is to guide security code reviews.\u003c/p\u003e\n\u003cp\u003eThe rule also flags string literals starting with \u003ccode\u003ejavascript:\u003c/code\u003e as the code passed in \u003ccode\u003ejavascript:\u003c/code\u003e URLs is evaluated the\nsame way as calls to \u003ccode\u003eeval\u003c/code\u003e or \u003ccode\u003eFunction\u003c/code\u003e constructor.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule will not raise an issue when the argument of the \u003ccode\u003eeval\u003c/code\u003e or \u003ccode\u003eFunction\u003c/code\u003e is a literal string as it is reasonably\nsafe.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the executed code may come from an untrusted source and hasnâ€™t been sanitized. \u003c/li\u003e\n  \u003cli\u003e you really need to run code dynamically. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlet value \u003d eval(\u0027obj.\u0027 + propName); // Sensitive\nlet func \u003d Function(\u0027obj\u0027 + propName); // Sensitive\nlocation.href \u003d \u0027javascript:void(0)\u0027; // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eRegarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\"\u003esandboxed\u003c/a\u003e environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: \u003ca\nhref\u003d\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\"\u003eSecurity Managers\u003c/a\u003e in java, \u003ca\nhref\u003d\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\"\u003eiframes\u003c/a\u003e and \u003ca href\u003d\"https://en.wikipedia.org/wiki/Same-origin_policy\"\u003esame-origin\npolicy\u003c/a\u003e for javascript in a web browser).\u003c/p\u003e\n\u003cp\u003eDo not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.\u003c/p\u003e\n\u003cp\u003eAvoid using dynamic code APIs whenever possible. Hard-coded code is always safer.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eOWASP Top 10 2021 Category A3\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/95\"\u003eMITRE, CWE-95\u003c/a\u003e - Improper Neutralization of Directives in Dynamically Evaluated Code\n  (\u0027Eval Injection\u0027) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [
      "javascript:Eval"
    ],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S2612",
    "name": "Setting loose POSIX file permissions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Unix file system permissions, the \"\u003ccode\u003eothers\u003c/code\u003e\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.\u003c/p\u003e\n\u003cp\u003eGranting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The application is designed to be run on a multi-user environment. \u003c/li\u003e\n  \u003cli\u003e Corresponding files and directories may contain confidential information. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eNode.js \u003ca href\u003d\"https://nodejs.org/api/fs.html\"\u003e\u003ccode\u003efs\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\n\nfs.chmodSync(\"/tmp/fs\", 0o777); // Sensitive\n\u003c/pre\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\nconst fsPromises \u003d fs.promises;\n\nfsPromises.chmod(\"/tmp/fsPromises\", 0o777); // Sensitive\n\u003c/pre\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\nconst fsPromises \u003d fs.promises\n\nasync function fileHandler() {\n  let filehandle;\n  try {\n    filehandle \u003d fsPromises.open(\u0027/tmp/fsPromises\u0027, \u0027r\u0027);\n    filehandle.chmod(0o777); // Sensitive\n  } finally {\n    if (filehandle !\u003d\u003d undefined)\n      filehandle.close();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eNode.js \u003ca href\u003d\"https://nodejs.org/api/process.html#process_process_umask_mask\"\u003e\u003ccode\u003eprocess.umask\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nconst process \u003d require(\u0027process\u0027);\n\nprocess.umask(0o000); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eThe most restrictive possible permissions should be assigned to files and directories.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eNode.js \u003ca href\u003d\"https://nodejs.org/api/fs.html\"\u003e\u003ccode\u003efs\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\n\nfs.chmodSync(\"/tmp/fs\", 0o770); // Compliant\n\u003c/pre\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\nconst fsPromises \u003d fs.promises;\n\nfsPromises.chmod(\"/tmp/fsPromises\", 0o770); // Compliant\n\u003c/pre\u003e\n\u003cpre\u003e\nconst fs \u003d require(\u0027fs\u0027);\nconst fsPromises \u003d fs.promises\n\nasync function fileHandler() {\n  let filehandle;\n  try {\n    filehandle \u003d fsPromises.open(\u0027/tmp/fsPromises\u0027, \u0027r\u0027);\n    filehandle.chmod(0o770); // Compliant\n  } finally {\n    if (filehandle !\u003d\u003d undefined)\n      filehandle.close();\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eNode.js \u003ca href\u003d\"https://nodejs.org/api/process.html#process_process_umask_mask\"\u003e\u003ccode\u003eprocess.umask\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nconst process \u003d require(\u0027process\u0027);\n\nprocess.umask(0o007); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eOWASP Top 10 2017 Category A5\u003c/a\u003e - Broken Access Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\"\u003eOWASP File Permission\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eMITRE, CWE-732\u003c/a\u003e - Incorrect Permission Assignment for Critical Resource \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/266\"\u003eMITRE, CWE-266\u003c/a\u003e - Incorrect Privilege Assignment \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S1525",
    "name": "Debugger statements should not be used",
    "defaultSeverity": "MINOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S4507} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 1; i\u0026lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 1; i\u0026lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S4507} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 1; i\u0026lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 1; i\u0026lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:DebuggerStatement"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1526",
    "name": "Variables declared with \"var\" should be declared before they are used",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e have the special property that regardless of where theyâ€™re declared in a function they \"float\" to the top\nof the function and are available for use even before theyâ€™re declared. That makes scoping confusing, especially for new coders.\u003c/p\u003e\n\u003cp\u003eTo keep confusion to a minimum, \u003ccode\u003evar\u003c/code\u003e declarations should happen before they are used for the first time.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x \u003d 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts \"undefined\" instead of \"1\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x \u003d 42;\n  }\n}\n\nfun(); // Print \"1\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVariables declared with \u003ccode\u003evar\u003c/code\u003e have the special property that regardless of where theyâ€™re declared in a function they \"float\" to the top\nof the function and are available for use even before theyâ€™re declared. That makes scoping confusing, especially for new coders.\u003c/p\u003e\n\u003cp\u003eTo keep confusion to a minimum, \u003ccode\u003evar\u003c/code\u003e declarations should happen before they are used for the first time.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x \u003d 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts \"undefined\" instead of \"1\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x \u003d 42;\n  }\n}\n\nfun(); // Print \"1\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:VariableDeclarationAfterUsage"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1527",
    "name": "Future reserved words should not be used as identifiers",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe ECMAScript specification defines a set of special words as future keywords of the language. They donâ€™t have particular meaning for now, but\nthey might at some future time.\u003c/p\u003e\n\u003cp\u003eThe list contains the following words:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eawait\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eclass\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003econst\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eenum\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexport\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eextends\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eimplements\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eimport\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003einterface\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elet\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epackage\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprotected\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estatic\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eyield\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome of these words have already been adopted by current versions of ECMAScript, but they are kept to consider legacy JavaScript codebases as well.\nOthers are only reserved when used in strict mode.\u003c/p\u003e\n\u003cp\u003eThese future reserved words should be avoided because they may cause syntax errors if they are ever adopted.\u003c/p\u003e\n\u003cpre\u003e\nconst package \u003d document.getElementsByName(\"foo\"); // Noncompliant: `package` is used as an identifier here\n\u003c/pre\u003e\n\u003cp\u003eThese future keywords can be used anywhere if it is not identifiers.\u003c/p\u003e\n\u003cpre\u003e\nconst someData \u003d { package: true };                // Compliant: `package` is not used as an identifier here\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#future_reserved_words\"\u003eFuture\n  reserved words\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Syntax_error\"\u003eSyntax error\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe ECMAScript specification defines a set of special words as future keywords of the language. They donâ€™t have particular meaning for now, but\nthey might at some future time.\u003c/p\u003e\n\u003cp\u003eThe list contains the following words:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eawait\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eclass\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003econst\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eenum\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eexport\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eextends\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eimplements\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eimport\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003einterface\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elet\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epackage\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprotected\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003epublic\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estatic\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eyield\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome of these words have already been adopted by current versions of ECMAScript, but they are kept to consider legacy JavaScript codebases as well.\nOthers are only reserved when used in strict mode.\u003c/p\u003e\n\u003cp\u003eThese future reserved words should be avoided because they may cause syntax errors if they are ever adopted.\u003c/p\u003e\n\u003cpre\u003e\nconst package \u003d document.getElementsByName(\"foo\"); // Noncompliant: `package` is used as an identifier here\n\u003c/pre\u003e\n\u003cp\u003eThese future keywords can be used anywhere if it is not identifiers.\u003c/p\u003e\n\u003cpre\u003e\nconst someData \u003d { package: true };                // Compliant: `package` is not used as an identifier here\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#future_reserved_words\"\u003eFuture\n  reserved words\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Syntax_error\"\u003eSyntax error\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "lock-in",
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:FutureReservedWords"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3827",
    "name": "Variables should be defined before being used",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a non-existent variable is referenced a \u003ccode\u003eReferenceError\u003c/code\u003e is raised.\u003c/p\u003e\n\u003cp\u003eDue to the dynamic nature of JavaScript this can happen in a number of scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When typo was made in a symbolâ€™s name. \u003c/li\u003e\n  \u003cli\u003e When using variable declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e before declaration (unlike \u003ccode\u003evar\u003c/code\u003e-declarations, they are not\n  hoisted to the top of the scope). \u003c/li\u003e\n  \u003cli\u003e Due to confusion with scopes of \u003ccode\u003elet\u003c/code\u003e- and \u003ccode\u003econst\u003c/code\u003e-declarations (they have block scope, unlike\n  \u003ccode\u003evar\u003c/code\u003e-declarations, having function scope). \u003c/li\u003e\n  \u003cli\u003e When accessing a property in the wrong scope (e.g. forgetting to specify \u003ccode\u003ethis.\u003c/code\u003e). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule does not raise issues on global variables which are defined with \u003ccode\u003esonar.javascript.globals\u003c/code\u003e and\n\u003ccode\u003esonar.javascript.environments\u003c/code\u003e properties.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar john \u003d {\n  firstName: \"john\",\n  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined\n}\njohn.show();\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar john \u003d {\n  firstName: \"john\",\n  show: function() { console.log(this.firstName); }\n}\njohn.show();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a non-existent variable is referenced a \u003ccode\u003eReferenceError\u003c/code\u003e is raised.\u003c/p\u003e\n\u003cp\u003eDue to the dynamic nature of JavaScript this can happen in a number of scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When typo was made in a symbolâ€™s name. \u003c/li\u003e\n  \u003cli\u003e When using variable declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e before declaration (unlike \u003ccode\u003evar\u003c/code\u003e-declarations, they are not\n  hoisted to the top of the scope). \u003c/li\u003e\n  \u003cli\u003e Due to confusion with scopes of \u003ccode\u003elet\u003c/code\u003e- and \u003ccode\u003econst\u003c/code\u003e-declarations (they have block scope, unlike\n  \u003ccode\u003evar\u003c/code\u003e-declarations, having function scope). \u003c/li\u003e\n  \u003cli\u003e When accessing a property in the wrong scope (e.g. forgetting to specify \u003ccode\u003ethis.\u003c/code\u003e). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule does not raise issues on global variables which are defined with \u003ccode\u003esonar.javascript.globals\u003c/code\u003e and\n\u003ccode\u003esonar.javascript.environments\u003c/code\u003e properties.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar john \u003d {\n  firstName: \"john\",\n  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined\n}\njohn.show();\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar john \u003d {\n  firstName: \"john\",\n  show: function() { console.log(this.firstName); }\n}\njohn.show();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1528",
    "name": "Array constructors should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eArray literals should always be preferred to Array constructors.\u003c/p\u003e\n\u003cp\u003eArray constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the argument is a number and it is a natural number the length will be equal to the value of the argument. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(3); // [empty Ã— 3]\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e If the argument is a number, but not a natural number an exception will be thrown. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(3.14);  // RangeError: Invalid array length\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Otherwise the array will have one element with the argument as its value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(\"3\");  // [\"3\"]\n\u003c/pre\u003e\n\u003cp\u003eNote that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they wonâ€™t\ncontain anything, so no callbacks will be applied to the array elements.\u003c/p\u003e\n\u003cp\u003eFor these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet myArray \u003d new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.\nlet emptyArray \u003d new Array();          // Noncompliant. Results in 0-element array.\n\nlet unstableArray \u003d new Array(n);      // Noncompliant. Variable in results.\n\nlet arr \u003d new Array(3); // Noncompliant; empty array of length 3\narr.foreach((x) \u003d\u0026gt; alert(\"Hello \" + x)); // callback is not executed because there\u0027s nothing in arr\nlet anotherArr \u003d arr.map(() \u003d\u0026gt; 42); // anotherArr is also empty because callback didn\u0027t execute\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet myArray \u003d [x1, x2, x3];\nlet emptyArray \u003d [];\n\n// if \"n\" is the only array element\nlet unstableArray \u003d [n];\n// or,  if \"n\" is the array length (since ES 2015)\nlet unstableArray \u003d Array.from({length: n});\n\nlet arr \u003d [\"Elena\", \"Mike\", \"Sarah\"];\narr.foreach((x) \u003d\u0026gt; alert(\"Hello \" + x));\nlet anotherArr \u003d arr.map(() \u003d\u0026gt; 42);  // anotherArr now holds 42 in each element\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArray literals should always be preferred to Array constructors.\u003c/p\u003e\n\u003cp\u003eArray constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If the argument is a number and it is a natural number the length will be equal to the value of the argument. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(3); // [empty Ã— 3]\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e If the argument is a number, but not a natural number an exception will be thrown. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(3.14);  // RangeError: Invalid array length\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Otherwise the array will have one element with the argument as its value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nlet arr \u003d new Array(\"3\");  // [\"3\"]\n\u003c/pre\u003e\n\u003cp\u003eNote that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they wonâ€™t\ncontain anything, so no callbacks will be applied to the array elements.\u003c/p\u003e\n\u003cp\u003eFor these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nlet myArray \u003d new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.\nlet emptyArray \u003d new Array();          // Noncompliant. Results in 0-element array.\n\nlet unstableArray \u003d new Array(n);      // Noncompliant. Variable in results.\n\nlet arr \u003d new Array(3); // Noncompliant; empty array of length 3\narr.foreach((x) \u003d\u0026gt; alert(\"Hello \" + x)); // callback is not executed because there\u0027s nothing in arr\nlet anotherArr \u003d arr.map(() \u003d\u0026gt; 42); // anotherArr is also empty because callback didn\u0027t execute\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nlet myArray \u003d [x1, x2, x3];\nlet emptyArray \u003d [];\n\n// if \"n\" is the only array element\nlet unstableArray \u003d [n];\n// or,  if \"n\" is the array length (since ES 2015)\nlet unstableArray \u003d Array.from({length: n});\n\nlet arr \u003d [\"Elena\", \"Mike\", \"Sarah\"];\narr.foreach((x) \u003d\u0026gt; alert(\"Hello \" + x));\nlet anotherArr \u003d arr.map(() \u003d\u0026gt; 42);  // anotherArr now holds 42 in each element\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:ArrayAndObjectConstructors"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2737",
    "name": "\"catch\" clauses should do more than rethrow",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  doSomething();\n} catch (ex) {  // Noncompliant\n  throw ex;\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\ndoSomething();\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  doSomething();\n} catch (ex) {\n  console.err(ex);\n  throw ex;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  doSomething();\n} catch (ex) {  // Noncompliant\n  throw ex;\n}\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\ndoSomething();\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  doSomething();\n} catch (ex) {\n  console.err(ex);\n  throw ex;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy",
      "error-handling",
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1529",
    "name": "Bitwise operators should not be used in boolean contexts",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBitwise operations are operations that manipulate individual bits in binary representations of numbers. These operations work at the binary level,\ntreating numbers as sequences of 32 bits (in 32-bit environments) or 64 bits (in 64-bit environments). However, they should not be used in a boolean\ncontext because they have different behaviors compared to logical operators when applied to boolean values:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When applied to boolean values, bitwise AND (\u003ccode\u003e\u0026amp;\u003c/code\u003e) and OR (\u003ccode\u003e|\u003c/code\u003e) perform bitwise operations on the binary\n  representation of the numbers. They treat the operands as 32-bit signed integers and manipulate their individual bits. \u003c/li\u003e\n  \u003cli\u003e Logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) and OR (\u003ccode\u003e||\u003c/code\u003e) are specifically designed for boolean operations. They return a boolean value\n  based on the truthiness or falsiness of the operands.\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if both operands are truthy; otherwise, it\n  returns \u003ccode\u003efalse\u003c/code\u003e. \u003ccode\u003e||\u003c/code\u003e operator returns \u003ccode\u003etrue\u003c/code\u003e if at least one of the operands is truthy; otherwise, it returns\n  \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBitwise operators \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e|\u003c/code\u003e can be easily mistaken for logical operators \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e,\nespecially for those who are not familiar with the distinction between them or their specific use cases.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u0026amp;\u003c/code\u003e or \u003ccode\u003e|\u003c/code\u003e is used in a boolean context.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026amp; b) { /* ... */ } // Noncompliant: The operator \u0026amp; is used in a boolean context\n\u003c/pre\u003e\n\u003cp\u003eYou should use the logical variant of the bitwise operator, that is, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e instead of \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e\ninstead of \u003ccode\u003e|\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (a \u0026amp;\u0026amp; b) { /* ... */ }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen a file contains other bitwise operations, (\u003ccode\u003e^\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e~\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003d\u003c/code\u003e, \u003ccode\u003e^\u003d\u003c/code\u003e, \u003ccode\u003e|\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003d\u003c/code\u003e, and\n\u003ccode\u003e\u0026amp;\u003c/code\u003e or \u003ccode\u003e|\u003c/code\u003e used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations were truly intended.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\"\u003eBitwise AND\n  (\u003ccode\u003e\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\"\u003eBitwise OR (\u003ccode\u003e|\u003c/code\u003e)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"\u003eLogical AND\n  (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR\n  (\u003ccode\u003e||\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBitwise operations are operations that manipulate individual bits in binary representations of numbers. These operations work at the binary level,\ntreating numbers as sequences of 32 bits (in 32-bit environments) or 64 bits (in 64-bit environments). However, they should not be used in a boolean\ncontext because they have different behaviors compared to logical operators when applied to boolean values:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When applied to boolean values, bitwise AND (\u003ccode\u003e\u0026amp;\u003c/code\u003e) and OR (\u003ccode\u003e|\u003c/code\u003e) perform bitwise operations on the binary\n  representation of the numbers. They treat the operands as 32-bit signed integers and manipulate their individual bits. \u003c/li\u003e\n  \u003cli\u003e Logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) and OR (\u003ccode\u003e||\u003c/code\u003e) are specifically designed for boolean operations. They return a boolean value\n  based on the truthiness or falsiness of the operands.\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e if both operands are truthy; otherwise, it\n  returns \u003ccode\u003efalse\u003c/code\u003e. \u003ccode\u003e||\u003c/code\u003e operator returns \u003ccode\u003etrue\u003c/code\u003e if at least one of the operands is truthy; otherwise, it returns\n  \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBitwise operators \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e|\u003c/code\u003e can be easily mistaken for logical operators \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e,\nespecially for those who are not familiar with the distinction between them or their specific use cases.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u0026amp;\u003c/code\u003e or \u003ccode\u003e|\u003c/code\u003e is used in a boolean context.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026amp; b) { /* ... */ } // Noncompliant: The operator \u0026amp; is used in a boolean context\n\u003c/pre\u003e\n\u003cp\u003eYou should use the logical variant of the bitwise operator, that is, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e instead of \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e\ninstead of \u003ccode\u003e|\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (a \u0026amp;\u0026amp; b) { /* ... */ }\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen a file contains other bitwise operations, (\u003ccode\u003e^\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e~\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003d\u003c/code\u003e, \u003ccode\u003e^\u003d\u003c/code\u003e, \u003ccode\u003e|\u003d\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003d\u003c/code\u003e, and\n\u003ccode\u003e\u0026amp;\u003c/code\u003e or \u003ccode\u003e|\u003c/code\u003e used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations were truly intended.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\"\u003eBitwise AND\n  (\u003ccode\u003e\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\"\u003eBitwise OR (\u003ccode\u003e|\u003c/code\u003e)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"\u003eLogical AND\n  (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\"\u003eLogical OR\n  (\u003ccode\u003e||\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:BitwiseOperators"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2970",
    "name": "Assertions should be complete",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eAn incomplete assertion refers to a situation where an assertion is written but lacks some necessary components or conditions, making it\ninsufficient to fully validate the expected behavior of the code being tested. Writing incomplete assertions can lead to false positives or false\nnegatives in your test suite, making it less reliable.\u003c/p\u003e\n\u003cp\u003eThis rule checks for incomplete assertions with Chai.js in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When \u003ccode\u003eassert.fail\u003c/code\u003e, \u003ccode\u003eexpect.fail\u003c/code\u003e or \u003ccode\u003eshould.fail\u003c/code\u003e are present but not called. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect(...)\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion is not followed by an assertion method, such as \u003ccode\u003eequal\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion ends with a \u003ca\n  href\u003d\"https://www.chaijs.com/api/bdd/#method_language-chains\"\u003echainable getters\u003c/a\u003e, such as \u003ccode\u003e.that\u003c/code\u003e, or a modifier, such as\n  \u003ccode\u003e.deep\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion function, such as \u003ccode\u003e.throw\u003c/code\u003e, is not called. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, what is intended to be an assertion doesnâ€™t actually assert anything.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"incomplete assertions\", function() {\n    const value \u003d 42;\n\n    it(\"uses chai \u0027assert\u0027\", function() {\n        assert.fail; // Noncompliant: Missing the call to \u0027fail\u0027\n    });\n\n    it(\"uses chai \u0027expect\u0027\", function() {\n        expect(1 \u003d\u003d 1); // Noncompliant: Should chain with \u0027to.equal\u0027\n        expect(value.toString).to.throw; // Noncompliant: Missing the type of the exception\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eMake sure to write complete and precise assertions. Always include the necessary comparison methods (e.g., \u003ccode\u003e.to.equal()\u003c/code\u003e,\n\u003ccode\u003e.to.be.true\u003c/code\u003e, etc.) to make the expectations clear and leave no room for ambiguity.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"complete assertions\", function() {\n    const value \u003d 42;\n\n    it(\"uses chai \u0027assert\u0027\", function() {\n        assert.fail();\n    });\n\n    it(\"uses chai \u0027expect\u0027\", function() {\n        expect(1).to.equal(1);\n        expect(value.toString).to.throw(TypeError);\n    });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eAn incomplete assertion refers to a situation where an assertion is written but lacks some necessary components or conditions, making it\ninsufficient to fully validate the expected behavior of the code being tested. Writing incomplete assertions can lead to false positives or false\nnegatives in your test suite, making it less reliable.\u003c/p\u003e\n\u003cp\u003eThis rule checks for incomplete assertions with Chai.js in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When \u003ccode\u003eassert.fail\u003c/code\u003e, \u003ccode\u003eexpect.fail\u003c/code\u003e or \u003ccode\u003eshould.fail\u003c/code\u003e are present but not called. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect(...)\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion is not followed by an assertion method, such as \u003ccode\u003eequal\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion ends with a \u003ca\n  href\u003d\"https://www.chaijs.com/api/bdd/#method_language-chains\"\u003echainable getters\u003c/a\u003e, such as \u003ccode\u003e.that\u003c/code\u003e, or a modifier, such as\n  \u003ccode\u003e.deep\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e When an \u003ccode\u003eexpect\u003c/code\u003e or \u003ccode\u003eshould\u003c/code\u003e assertion function, such as \u003ccode\u003e.throw\u003c/code\u003e, is not called. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, what is intended to be an assertion doesnâ€™t actually assert anything.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"incomplete assertions\", function() {\n    const value \u003d 42;\n\n    it(\"uses chai \u0027assert\u0027\", function() {\n        assert.fail; // Noncompliant: Missing the call to \u0027fail\u0027\n    });\n\n    it(\"uses chai \u0027expect\u0027\", function() {\n        expect(1 \u003d\u003d 1); // Noncompliant: Should chain with \u0027to.equal\u0027\n        expect(value.toString).to.throw; // Noncompliant: Missing the type of the exception\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eMake sure to write complete and precise assertions. Always include the necessary comparison methods (e.g., \u003ccode\u003e.to.equal()\u003c/code\u003e,\n\u003ccode\u003e.to.be.true\u003c/code\u003e, etc.) to make the expectations clear and leave no room for ambiguity.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\n\ndescribe(\"complete assertions\", function() {\n    const value \u003d 42;\n\n    it(\"uses chai \u0027assert\u0027\", function() {\n        assert.fail();\n    });\n\n    it(\"uses chai \u0027expect\u0027\", function() {\n        expect(1).to.equal(1);\n        expect(value.toString).to.throw(TypeError);\n    });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1763",
    "name": "All code should be reachable",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnreachable code is the code whose statements cannot be executed under any circumstances. Jump statements, like \u003ccode\u003ereturn\u003c/code\u003e,\n\u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, and \u003ccode\u003ethrow\u003c/code\u003e, alter the normal flow of control within a program, making it possible to skip\ncertain parts of the code, terminate loops prematurely, or exit from functions. So any statements that come after a jump are effectively\nunreachable.\u003c/p\u003e\n\u003cp\u003eUnreachable statements can be a sign of a logical error or oversight in the programâ€™s design, leading to unexpected behavior at runtime.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction func(a) {\n  let i \u003d 10;\n  return i + a;\n  i++; // Noncompliant: this is never executed\n}\n\u003c/pre\u003e\n\u003cp\u003eIdentify and remove unreachable statements from your code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction func(a) {\n  let i \u003d 10;\n  return i + a;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\"\u003eWarning: unreachable code\n  after return statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnreachable code is the code whose statements cannot be executed under any circumstances. Jump statements, like \u003ccode\u003ereturn\u003c/code\u003e,\n\u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, and \u003ccode\u003ethrow\u003c/code\u003e, alter the normal flow of control within a program, making it possible to skip\ncertain parts of the code, terminate loops prematurely, or exit from functions. So any statements that come after a jump are effectively\nunreachable.\u003c/p\u003e\n\u003cp\u003eUnreachable statements can be a sign of a logical error or oversight in the programâ€™s design, leading to unexpected behavior at runtime.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction func(a) {\n  let i \u003d 10;\n  return i + a;\n  i++; // Noncompliant: this is never executed\n}\n\u003c/pre\u003e\n\u003cp\u003eIdentify and remove unreachable statements from your code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction func(a) {\n  let i \u003d 10;\n  return i + a;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\"\u003eWarning: unreachable code\n  after return statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "unused"
    ],
    "deprecatedKeys": [
      "javascript:UnreachableCode",
      "javascript:S1736"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1764",
    "name": "Identical expressions should not be used on both sides of a binary operator",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b) { // if the first one is true, the second one is too\n  doX();\n}\nif (a \u0026gt; a) { // always false\n  doW();\n}\n\nvar j \u003d 5 / 5; //always 1\nvar k \u003d 5 - 5; //always 0\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe specific case of testing one variable against itself is a valid test for \u003ccode\u003eNaN\u003c/code\u003e and is therefore ignored.\u003c/p\u003e\n\u003cp\u003eSimilarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.\u003c/p\u003e\n\u003cp\u003eMoreover comma operator \u003ccode\u003e,\u003c/code\u003e and \u003ccode\u003einstanceof\u003c/code\u003e operator are ignored as there are use-cases when there usage is valid.\u003c/p\u003e\n\u003cpre\u003e\nif (f !\u003d\u003d f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i \u003d 1 \u0026lt;\u0026lt; 1; // Compliant\nvar j \u003d a \u0026lt;\u0026lt; a; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1656} - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (a \u003d\u003d b \u0026amp;\u0026amp; a \u003d\u003d b) { // if the first one is true, the second one is too\n  doX();\n}\nif (a \u0026gt; a) { // always false\n  doW();\n}\n\nvar j \u003d 5 / 5; //always 1\nvar k \u003d 5 - 5; //always 0\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe specific case of testing one variable against itself is a valid test for \u003ccode\u003eNaN\u003c/code\u003e and is therefore ignored.\u003c/p\u003e\n\u003cp\u003eSimilarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.\u003c/p\u003e\n\u003cp\u003eMoreover comma operator \u003ccode\u003e,\u003c/code\u003e and \u003ccode\u003einstanceof\u003c/code\u003e operator are ignored as there are use-cases when there usage is valid.\u003c/p\u003e\n\u003cpre\u003e\nif (f !\u003d\u003d f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i \u003d 1 \u0026lt;\u0026lt; 1; // Compliant\nvar j \u003d a \u0026lt;\u0026lt; a; // Noncompliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1656} - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6080",
    "name": "Disabling Mocha timeouts should be explicit",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSetting timeouts with Mocha allows you to control the maximum time a test case or suite can take to execute. However, incorrect usage or excessive\ntimeout values can lead to undesired consequences and impact the effectiveness of your test suite. For example, setting a timeout by calling\n\u003ccode\u003ethis.timeout()\u003c/code\u003e with a value greater than the \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value\"\u003emaximum delay\u003c/a\u003e (2,147,483,647 ms)\nwill cause the timeout to be disabled.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"unexpectedly disables the timeout\", function(done) {\n    this.timeout(2147483648); // Noncompliant: the timeout is disabled\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003ethis.timeout()\u003c/code\u003e, make sure to set a reasonable value that allows your tests to complete within a reasonable timeframe.\u003c/p\u003e\n\u003cpre\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"sets the timeout to 1\u0027000 milliseconds\", function(done) {\n    this.timeout(1000);\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eIf the goal is really to disable the timeout, set it to zero instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"disables the timeout as expected\", function(done) {\n    this.timeout(0);\n  });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#timeouts\"\u003eTimeouts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#hook-level\"\u003eDisabling timeouts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\"\u003eMaximum_delay_value\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSetting timeouts with Mocha allows you to control the maximum time a test case or suite can take to execute. However, incorrect usage or excessive\ntimeout values can lead to undesired consequences and impact the effectiveness of your test suite. For example, setting a timeout by calling\n\u003ccode\u003ethis.timeout()\u003c/code\u003e with a value greater than the \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value\"\u003emaximum delay\u003c/a\u003e (2,147,483,647 ms)\nwill cause the timeout to be disabled.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"unexpectedly disables the timeout\", function(done) {\n    this.timeout(2147483648); // Noncompliant: the timeout is disabled\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003ethis.timeout()\u003c/code\u003e, make sure to set a reasonable value that allows your tests to complete within a reasonable timeframe.\u003c/p\u003e\n\u003cpre\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"sets the timeout to 1\u0027000 milliseconds\", function(done) {\n    this.timeout(1000);\n  });\n});\n\u003c/pre\u003e\n\u003cp\u003eIf the goal is really to disable the timeout, set it to zero instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\ndescribe(\"testing this.timeout\", function() {\n  it(\"disables the timeout as expected\", function(done) {\n    this.timeout(0);\n  });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#timeouts\"\u003eTimeouts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha Documentation - \u003ca href\u003d\"https://mochajs.org/#hook-level\"\u003eDisabling timeouts\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\"\u003eMaximum_delay_value\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3812",
    "name": "Parentheses should be used when negating \"in\" and \"instanceof\" operations",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOperator precedence determines the order in which different operators are evaluated when an expression contains multiple ones. It helps determine\nhow the expression is parsed and executed. JavaScript follows a specific set of rules to determine operator precedence.\u003c/p\u003e\n\u003cp\u003eNot being aware of JavaScriptâ€™s operator precedence rules can lead to unexpected and potentially incorrect results when evaluating expressions.\nThis is common when misapplying the logical negation operator (\u003ccode\u003e!\u003c/code\u003e). For instance, consider the difference between \u003ccode\u003e!key in\ndict\u003c/code\u003e and \u003ccode\u003e!(key in dict)\u003c/code\u003e. The first looks for a boolean value (\u003ccode\u003e!key\u003c/code\u003e) in \u003ccode\u003edict\u003c/code\u003e, and the other looks for a\nstring and inverts the result. The same applies for \u003ccode\u003e!obj instanceof SomeClass\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the left operand of an \u003ccode\u003ein\u003c/code\u003e or \u003ccode\u003einstanceof\u003c/code\u003e operator is negated with \u003ccode\u003e!\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (!\"prop\" in myObj) { // Noncompliant: checks whether !\"prop\", that is, false is in myObj\n  doTheThing(); // this block is never executed\n}\n\nif (!foo instanceof MyClass) { // Noncompliant: \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing(); // this block is never executed either\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should use parentheses to force the order of evaluation of expressions mixing negation and \u003ccode\u003ein\u003c/code\u003e or \u003ccode\u003einstanceof\u003c/code\u003e\noperators.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence\"\u003eOperator\n  precedence\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\"\u003eOperator\n  precedence table\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\"\u003eLogical NOT\n  (\u003ccode\u003e!\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\"\u003e\u003ccode\u003einstanceof\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003e\u003ccode\u003ein\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOperator precedence determines the order in which different operators are evaluated when an expression contains multiple ones. It helps determine\nhow the expression is parsed and executed. JavaScript follows a specific set of rules to determine operator precedence.\u003c/p\u003e\n\u003cp\u003eNot being aware of JavaScriptâ€™s operator precedence rules can lead to unexpected and potentially incorrect results when evaluating expressions.\nThis is common when misapplying the logical negation operator (\u003ccode\u003e!\u003c/code\u003e). For instance, consider the difference between \u003ccode\u003e!key in\ndict\u003c/code\u003e and \u003ccode\u003e!(key in dict)\u003c/code\u003e. The first looks for a boolean value (\u003ccode\u003e!key\u003c/code\u003e) in \u003ccode\u003edict\u003c/code\u003e, and the other looks for a\nstring and inverts the result. The same applies for \u003ccode\u003e!obj instanceof SomeClass\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the left operand of an \u003ccode\u003ein\u003c/code\u003e or \u003ccode\u003einstanceof\u003c/code\u003e operator is negated with \u003ccode\u003e!\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (!\"prop\" in myObj) { // Noncompliant: checks whether !\"prop\", that is, false is in myObj\n  doTheThing(); // this block is never executed\n}\n\nif (!foo instanceof MyClass) { // Noncompliant: \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing(); // this block is never executed either\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should use parentheses to force the order of evaluation of expressions mixing negation and \u003ccode\u003ein\u003c/code\u003e or \u003ccode\u003einstanceof\u003c/code\u003e\noperators.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence\"\u003eOperator\n  precedence\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence#table\"\u003eOperator\n  precedence table\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\"\u003eLogical NOT\n  (\u003ccode\u003e!\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\"\u003e\u003ccode\u003einstanceof\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003e\u003ccode\u003ein\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1515",
    "name": "Functions should not be defined inside loops",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDefining functions inside loops in JavaScript can lead to several issues and is generally considered bad practice. The main problems associated\nwith this approach are related to performance, scope, and potential unintended behavior:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When a function is defined inside a loop, the function is re-created on each iteration of the loop. This can cause unnecessary overhead and\n  lead to performance issues, especially if the loop runs repeatedly. Defining the function outside the loop is more efficient so that it is created\n  only once. \u003c/li\u003e\n  \u003cli\u003e Functions defined inside loops have access to the loopâ€™s variables and parameters. This can sometimes lead to unintended behavior or bugs due\n  to closures. Closures in JavaScript capture the environment in which they are created, including variables and parameters, and this can cause\n  unexpected results when those variables change during the loop. \u003c/li\u003e\n  \u003cli\u003e Code that defines functions inside loops can be harder to read and maintain, especially for other developers who might not expect functions to\n  be redefined within the loop. Keeping functions separate and clearly defined is better, improving code organization and understandability. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  function processItem(item) { // Noncompliant: Function \u0027processItem\u0027 inside a for loop\n    // Some processing logic\n    console.log(item);\n  }\n\n  processItem(i);\n}\n\u003c/pre\u003e\n\u003cp\u003eDefine the function outside the loop and use the function parameters to pass any needed variables instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction processItem(item) {\n  // Some processing logic\n  console.log(item);\n}\n\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  processItem(i);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\"\u003eClosures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDefining functions inside loops in JavaScript can lead to several issues and is generally considered bad practice. The main problems associated\nwith this approach are related to performance, scope, and potential unintended behavior:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When a function is defined inside a loop, the function is re-created on each iteration of the loop. This can cause unnecessary overhead and\n  lead to performance issues, especially if the loop runs repeatedly. Defining the function outside the loop is more efficient so that it is created\n  only once. \u003c/li\u003e\n  \u003cli\u003e Functions defined inside loops have access to the loopâ€™s variables and parameters. This can sometimes lead to unintended behavior or bugs due\n  to closures. Closures in JavaScript capture the environment in which they are created, including variables and parameters, and this can cause\n  unexpected results when those variables change during the loop. \u003c/li\u003e\n  \u003cli\u003e Code that defines functions inside loops can be harder to read and maintain, especially for other developers who might not expect functions to\n  be redefined within the loop. Keeping functions separate and clearly defined is better, improving code organization and understandability. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  function processItem(item) { // Noncompliant: Function \u0027processItem\u0027 inside a for loop\n    // Some processing logic\n    console.log(item);\n  }\n\n  processItem(i);\n}\n\u003c/pre\u003e\n\u003cp\u003eDefine the function outside the loop and use the function parameters to pass any needed variables instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction processItem(item) {\n  // Some processing logic\n  console.log(item);\n}\n\nfor (let i \u003d 0; i \u0026lt; 5; i++) {\n  processItem(i);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\"\u003eClosures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:FunctionDefinitionInsideLoop"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1516",
    "name": "Multiline string literals should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating multiline strings by using a backslash (\u003ccode\u003e\\\u003c/code\u003e) before a newline is known as \"line continuation\" or \"line breaking.\" While it may\nseem like a convenient way to format multiline strings, it is generally considered bad practice.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Line continuation can make the code harder to read and understand, especially when dealing with long strings. It introduces an extra character\n  at the end of each line, which can clutter the code and reduce its readability. \u003c/li\u003e\n  \u003cli\u003e If the string content changes, it might require reformatting the entire multiline string, involving adjusting the line breaks and ensuring the\n  backslashes are correctly placed. This can be error-prone and cumbersome, leading to maintenance issues. \u003c/li\u003e\n  \u003cli\u003e Line continuation can sometimes behave unexpectedly, particularly when there are trailing spaces or tabs after the backslash. This can lead to\n  subtle bugs that are difficult to spot and debug. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet myString \u003d \u0027A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\\u0027ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.\u0027;  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eInstead, you should use string concatenation for multiline strings, which involves combining multiple strings to create a single string that spans\nmultiple lines.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet myString \u003d \u0027A rather long string of English text, an error message \u0027 +\n               \u0027actually that just keeps going and going -- an error \u0027 +\n               \u0027message to make the Energizer bunny blush (right through \u0027 +\n               \u0027those Schwarzenegger shades)! Where was I? Oh yes, \u0027 +\n               \u0027you\\\u0027ve got an error and all the extraneous whitespace is \u0027 +\n               \u0027just gravy.  Have a nice day.\u0027;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#string_operators\"\u003eString\n  operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating multiline strings by using a backslash (\u003ccode\u003e\\\u003c/code\u003e) before a newline is known as \"line continuation\" or \"line breaking.\" While it may\nseem like a convenient way to format multiline strings, it is generally considered bad practice.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Line continuation can make the code harder to read and understand, especially when dealing with long strings. It introduces an extra character\n  at the end of each line, which can clutter the code and reduce its readability. \u003c/li\u003e\n  \u003cli\u003e If the string content changes, it might require reformatting the entire multiline string, involving adjusting the line breaks and ensuring the\n  backslashes are correctly placed. This can be error-prone and cumbersome, leading to maintenance issues. \u003c/li\u003e\n  \u003cli\u003e Line continuation can sometimes behave unexpectedly, particularly when there are trailing spaces or tabs after the backslash. This can lead to\n  subtle bugs that are difficult to spot and debug. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet myString \u003d \u0027A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\\u0027ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.\u0027;  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eInstead, you should use string concatenation for multiline strings, which involves combining multiple strings to create a single string that spans\nmultiple lines.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet myString \u003d \u0027A rather long string of English text, an error message \u0027 +\n               \u0027actually that just keeps going and going -- an error \u0027 +\n               \u0027message to make the Energizer bunny blush (right through \u0027 +\n               \u0027those Schwarzenegger shades)! Where was I? Oh yes, \u0027 +\n               \u0027you\\\u0027ve got an error and all the extraneous whitespace is \u0027 +\n               \u0027just gravy.  Have a nice day.\u0027;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#string_operators\"\u003eString\n  operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [
      "javascript:MultilineStringLiterals"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1871",
    "name": "Two branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is truly needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eif\u003c/code\u003e chain they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif ((a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) || (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50)) { // Compliant\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nswitch (i) {\n  case 1:\n  case 3: // Compliant\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen all blocks are identical, either this rule will trigger if there is no default clause or rule {rule:javascript:S3923} will raise if there is a\ndefault clause.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnless all blocks are identical, blocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored. The same applies to blocks in a\n\u003ccode\u003eswitch\u003c/code\u003e statement that contains a single line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  // Compliant, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is truly needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eif\u003c/code\u003e chain they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif ((a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) || (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50)) { // Compliant\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nswitch (i) {\n  case 1:\n  case 3: // Compliant\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen all blocks are identical, either this rule will trigger if there is no default clause or rule {rule:javascript:S3923} will raise if there is a\ndefault clause.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnless all blocks are identical, blocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored. The same applies to blocks in a\n\u003ccode\u003eswitch\u003c/code\u003e statement that contains a single line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  // Compliant, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "design",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1751",
    "name": "Loops with at most one iteration should be refactored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA loop with at most one iteration is equivalent to the use of an \u003ccode\u003eif\u003c/code\u003e statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n\u003ccode\u003eif\u003c/code\u003e statement should be used instead.\u003c/p\u003e\n\u003cp\u003eAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested \u003ccode\u003ereturn\u003c/code\u003e,\n\u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e statements in a more appropriate way.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; 10; i++) { // noncompliant, loop only executes once\n  console.log(\"i is \" + i);\n  break;\n}\n...\nfor (let i \u003d 0; i \u0026lt; 10; i++) { // noncompliant, loop only executes once\n  if (i \u003d\u003d x) {\n    break;\n  } else {\n    console.log(\"i is \" + i);\n    return;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n...\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  if (i \u003d\u003d x) {\n    break;\n  } else {\n    console.log(\"i is \" + i);\n  }\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA loop with at most one iteration is equivalent to the use of an \u003ccode\u003eif\u003c/code\u003e statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n\u003ccode\u003eif\u003c/code\u003e statement should be used instead.\u003c/p\u003e\n\u003cp\u003eAt worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested \u003ccode\u003ereturn\u003c/code\u003e,\n\u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e statements in a more appropriate way.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; 10; i++) { // noncompliant, loop only executes once\n  console.log(\"i is \" + i);\n  break;\n}\n...\nfor (let i \u003d 0; i \u0026lt; 10; i++) { // noncompliant, loop only executes once\n  if (i \u003d\u003d x) {\n    break;\n  } else {\n    console.log(\"i is \" + i);\n    return;\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n...\nfor (let i \u003d 0; i \u0026lt; 10; i++) {\n  if (i \u003d\u003d x) {\n    break;\n  } else {\n    console.log(\"i is \" + i);\n  }\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1994",
    "name": "\"for\" loop increment clauses should modify the loops\u0027 counters",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loopâ€™s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loopâ€™s increment clause if at all possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++, j++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++) {\n  // ...\n  j++;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loopâ€™s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loopâ€™s increment clause if at all possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++, j++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++) {\n  // ...\n  j++;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1874",
    "name": "Deprecated APIs should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCode is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.\u003c/p\u003e\n\u003cp\u003eDeprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.\u003c/p\u003e\n\u003cp\u003eDeprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.\u003c/p\u003e\n\u003cp\u003eCheck the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.\u003c/p\u003e\n\u003cpre\u003e\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCode is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.\u003c/p\u003e\n\u003cp\u003eDeprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.\u003c/p\u003e\n\u003cp\u003eDeprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.\u003c/p\u003e\n\u003cp\u003eCheck the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.\u003c/p\u003e\n\u003cpre\u003e\n/**\n * @deprecated Use newFunction instead.\n */\nfunction oldFunction() {\n  console.log(\"This is the old function.\");\n}\n\nfunction newFunction() {\n  console.log(\"This is the new function.\");\n}\noldFunction(); // Noncompliant: \"oldFunction is deprecated\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "obsolete",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1788",
    "name": "Function parameters with default values should be last",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDefault parameter values allow callers to specify as many or as few arguments as they want while getting the same functionality and minimizing\nboilerplate, wrapper code, making a function easier to use.\u003c/p\u003e\n\u003cp\u003eAll function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass \u003ccode\u003eundefined\u003c/code\u003e to be able to specify\nthe non-default parameters.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction multiply(a \u003d 1, b) { // Noncompliant: parameter with default value should be last\n  return a*b;\n}\n\nlet x \u003d multiply(1, 42); // Cannot benefit from default value\n\u003c/pre\u003e\n\u003cp\u003eReorder the function parameters so that the ones with default values come after the ones without default values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction multiply(b, a \u003d 1) {\n  return a*b;\n}\n\nlet x \u003d multiply(42);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen writing Redux reducers, there is a convention to use default argument syntax to provide initial state (first argument), while action (second\nargument) is mandatory. A reducer may be called with \u003ccode\u003eundefined\u003c/code\u003e as the state value when the application is being initialized.\u003c/p\u003e\n\u003cpre\u003e\n// Use the initialState as a default value\nexport default function appReducer(state \u003d initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\"\u003eDefault parameters\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Redux Documentation - \u003ca href\u003d\"https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers#writing-reducers\"\u003eWriting Reducers\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDefault parameter values allow callers to specify as many or as few arguments as they want while getting the same functionality and minimizing\nboilerplate, wrapper code, making a function easier to use.\u003c/p\u003e\n\u003cp\u003eAll function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass \u003ccode\u003eundefined\u003c/code\u003e to be able to specify\nthe non-default parameters.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction multiply(a \u003d 1, b) { // Noncompliant: parameter with default value should be last\n  return a*b;\n}\n\nlet x \u003d multiply(1, 42); // Cannot benefit from default value\n\u003c/pre\u003e\n\u003cp\u003eReorder the function parameters so that the ones with default values come after the ones without default values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction multiply(b, a \u003d 1) {\n  return a*b;\n}\n\nlet x \u003d multiply(42);\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen writing Redux reducers, there is a convention to use default argument syntax to provide initial state (first argument), while action (second\nargument) is mandatory. A reducer may be called with \u003ccode\u003eundefined\u003c/code\u003e as the state value when the application is being initialized.\u003c/p\u003e\n\u003cpre\u003e\n// Use the initialState as a default value\nexport default function appReducer(state \u003d initialState, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\"\u003eDefault parameters\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Redux Documentation - \u003ca href\u003d\"https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers#writing-reducers\"\u003eWriting Reducers\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3723",
    "name": "Trailing commas should be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eModern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless youâ€™re supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in a multiline construct (array or object\nliteral, import or export statement, function declaration or call) does not end with a trailing comma and does not lie on the same line as the closing\ncurly brace, bracket or parenthesis.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\"      // Noncompliant\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\",    // OK\n};\n\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\"};   // OK\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eModern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless youâ€™re supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in a multiline construct (array or object\nliteral, import or export statement, function declaration or call) does not end with a trailing comma and does not lie on the same line as the closing\ncurly brace, bracket or parenthesis.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\"      // Noncompliant\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\",    // OK\n};\n\nvar joe \u003d {\n  fname: \"Joe\",\n  lname: \"Smith\"};   // OK\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2755",
    "name": "XML parsers should not be vulnerable to XXE attacks",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows the usage of external entities in XML.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eExternal Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eExposing sensitive data\u003c/h4\u003e\n\u003cp\u003eOne significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.\u003c/p\u003e\n\u003ch4\u003eExhausting system resources\u003c/h4\u003e\n\u003cp\u003eAnother consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the systemâ€™s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.\u003c/p\u003e\n\u003ch4\u003eForging requests\u003c/h4\u003e\n\u003cp\u003eXXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in libxmljs\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar libxmljs \u003d require(\u0027libxmljs\u0027);\nvar fs \u003d require(\u0027fs\u0027);\n\nvar xml \u003d fs.readFileSync(\u0027xxe.xml\u0027, \u0027utf8\u0027);\nlibxmljs.parseXmlString(xml, {\n    noblanks: true,\n    noent: true, // Noncompliant\n    nocdata: true\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eparseXmlString\u003c/code\u003e is safe by default.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar libxmljs \u003d require(\u0027libxmljs\u0027);\nvar fs \u003d require(\u0027fs\u0027);\n\nvar xml \u003d fs.readFileSync(\u0027xxe.xml\u0027, \u0027utf8\u0027);\nlibxmljs.parseXmlString(xml);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eDisable external entities\u003c/h4\u003e\n\u003cp\u003eThe most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.\u003c/p\u003e\n\u003cp\u003eIf external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.\u003cbr\u003e You should rely on features provided by your XML parser to restrict the external entities.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\"\u003eOWASP Top 10 2017 Category A4\u003c/a\u003e - XML External\n  Entities (XXE) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/611\"\u003eMITRE, CWE-611\u003c/a\u003e - Information Exposure Through XML External Entity Reference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/827\"\u003eMITRE, CWE-827\u003c/a\u003e - Improper Control of Document Type Definition \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows the usage of external entities in XML.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExternal Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eExposing sensitive data\u003c/h4\u003e\n\u003cp\u003eOne significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.\u003c/p\u003e\n\u003ch4\u003eExhausting system resources\u003c/h4\u003e\n\u003cp\u003eAnother consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the systemâ€™s memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.\u003c/p\u003e\n\u003ch4\u003eForging requests\u003c/h4\u003e\n\u003cp\u003eXXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nvar libxmljs \u003d require(\u0027libxmljs\u0027);\nvar fs \u003d require(\u0027fs\u0027);\n\nvar xml \u003d fs.readFileSync(\u0027xxe.xml\u0027, \u0027utf8\u0027);\nlibxmljs.parseXmlString(xml, {\n    noblanks: true,\n    noent: true, // Noncompliant\n    nocdata: true\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eparseXmlString\u003c/code\u003e is safe by default.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nvar libxmljs \u003d require(\u0027libxmljs\u0027);\nvar fs \u003d require(\u0027fs\u0027);\n\nvar xml \u003d fs.readFileSync(\u0027xxe.xml\u0027, \u0027utf8\u0027);\nlibxmljs.parseXmlString(xml);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eDisable external entities\u003c/h4\u003e\n\u003cp\u003eThe most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.\u003c/p\u003e\n\u003cp\u003eIf external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.\u003cbr\u003e You should rely on features provided by your XML parser to restrict the external entities.\u003c/p\u003e",
        "context": {
          "key": "libxmljs",
          "displayName": "libxmljs"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\"\u003eOWASP Top 10 2017 Category A4\u003c/a\u003e - XML External\n  Entities (XXE) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/611\"\u003eMITRE, CWE-611\u003c/a\u003e - Information Exposure Through XML External Entity Reference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/827\"\u003eMITRE, CWE-827\u003c/a\u003e - Improper Control of Document Type Definition \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2999",
    "name": "\"new\" should only be used with functions and classes",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript has the \u003ccode\u003enew\u003c/code\u003e keyword that is used in conjunction with constructor functions to create new instances of objects. When you use\nthe \u003ccode\u003enew\u003c/code\u003e keyword with a function, it signifies that the function is intended to be used as a constructor function to create objects.\u003c/p\u003e\n\u003cp\u003eAny function can be used as a constructor function by convention. Constructor functions are used to create new objects with the same structure or\nproperties. They are typically named with an initial capital letter to distinguish them from regular functions.\u003c/p\u003e\n\u003cp\u003eTo create a new instance of an object using the constructor function, you use the \u003ccode\u003enew\u003c/code\u003e keyword before the function call.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e keyword should only be used with objects that define a constructor function. Attempting to use it with an object or a variable\nthat is not a constructor will raise a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyClass() {\n  this.foo \u003d \u0027bar\u0027;\n}\n\nconst someClass \u003d 1;\n\nconst obj1 \u003d new someClass;    // Noncompliant: someClass is a variable\nconst obj2 \u003d new MyClass();    // Noncompliant if parameter considerJSDoc is true. Compliant when considerJSDoc is false\n\u003c/pre\u003e\n\u003cp\u003eAlways use the \u003ccode\u003enew\u003c/code\u003e keyword with constructor functions or classes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo \u003d \u0027bar\u0027;\n}\n\nconst someClass \u003d function(){\n  this.prop \u003d 1;\n}\n\nconst obj1 \u003d new someClass;\nconst obj2 \u003d new MyClass();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Constructor\"\u003eConstructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\"\u003e\u003ccode\u003eTypeError: \"x\" is not\n  a constructor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript has the \u003ccode\u003enew\u003c/code\u003e keyword that is used in conjunction with constructor functions to create new instances of objects. When you use\nthe \u003ccode\u003enew\u003c/code\u003e keyword with a function, it signifies that the function is intended to be used as a constructor function to create objects.\u003c/p\u003e\n\u003cp\u003eAny function can be used as a constructor function by convention. Constructor functions are used to create new objects with the same structure or\nproperties. They are typically named with an initial capital letter to distinguish them from regular functions.\u003c/p\u003e\n\u003cp\u003eTo create a new instance of an object using the constructor function, you use the \u003ccode\u003enew\u003c/code\u003e keyword before the function call.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e keyword should only be used with objects that define a constructor function. Attempting to use it with an object or a variable\nthat is not a constructor will raise a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyClass() {\n  this.foo \u003d \u0027bar\u0027;\n}\n\nconst someClass \u003d 1;\n\nconst obj1 \u003d new someClass;    // Noncompliant: someClass is a variable\nconst obj2 \u003d new MyClass();    // Noncompliant if parameter considerJSDoc is true. Compliant when considerJSDoc is false\n\u003c/pre\u003e\n\u003cp\u003eAlways use the \u003ccode\u003enew\u003c/code\u003e keyword with constructor functions or classes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo \u003d \u0027bar\u0027;\n}\n\nconst someClass \u003d function(){\n  this.prop \u003d 1;\n}\n\nconst obj1 \u003d new someClass;\nconst obj2 \u003d new MyClass();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Constructor\"\u003eConstructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\"\u003e\u003ccode\u003eTypeError: \"x\" is not\n  a constructor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "considerJSDoc": {
        "key": "considerJSDoc",
        "name": "considerJSDoc",
        "description": "Consider only functions with @constructor tag as constructor functions",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "considerJSDoc": "false"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2757",
    "name": "Non-existent operators \u0027\u003d+\u0027, \u0027\u003d-\u0027 and \u0027\u003d!\u0027 should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the expected behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget \u003d - num;  // target \u003d -3\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e,\n\u003ccode\u003e-\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget \u003d- num;  // Noncompliant: target \u003d -3. Is that the expected behavior?\ntarget \u003d+ num; // Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e, \u003ccode\u003e\u003d-\u003c/code\u003e, or \u003ccode\u003e\u003d!\u003c/code\u003e are used without any space between the operators and when there\nis at least one whitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget -\u003d num;  // target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nlet target \u003d-5;\nlet num \u003d 3;\n\ntarget \u003d - num;  // target \u003d -3\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2639",
    "name": "Empty character classes should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCharacter classes in regular expressions will match any of the characters enclosed in the square brackets (\u003ccode\u003e[abc]\u003c/code\u003e will match\n\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e or \u003ccode\u003ec\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eYou can specify a range of characters using a hyphen (\u003ccode\u003e-\u003c/code\u003e). If the hyphen appears as the first or last character, it will be matched as\na literal hyphen.\u003c/p\u003e\n\u003cp\u003eAn empty character class (\u003ccode\u003e[]\u003c/code\u003e) will not match any character because the set of matching characters is empty. So the regular expression\nwill not work as you intended.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/^foo[]/.test(str); // Noncompliant: always returns \"false\"\n\u003c/pre\u003e\n\u003cp\u003eUse a non-empty character class or a different regular expression pattern that achieves the desired result.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/^foo/.test(str);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCharacter classes in regular expressions will match any of the characters enclosed in the square brackets (\u003ccode\u003e[abc]\u003c/code\u003e will match\n\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e or \u003ccode\u003ec\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eYou can specify a range of characters using a hyphen (\u003ccode\u003e-\u003c/code\u003e). If the hyphen appears as the first or last character, it will be matched as\na literal hyphen.\u003c/p\u003e\n\u003cp\u003eAn empty character class (\u003ccode\u003e[]\u003c/code\u003e) will not match any character because the set of matching characters is empty. So the regular expression\nwill not work as you intended.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/^foo[]/.test(str); // Noncompliant: always returns \"false\"\n\u003c/pre\u003e\n\u003cp\u003eUse a non-empty character class or a different regular expression pattern that achieves the desired result.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/^foo/.test(str);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4818",
    "name": "Using Sockets is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eUsing sockets is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2011-1785\"\u003eCVE-2011-178\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-5645\"\u003eCVE-2017-5645\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-6597\"\u003eCVE-2018-6597\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSockets are vulnerable in multiple ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. \u003c/li\u003e\n  \u003cli\u003e The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e sockets are created without any limit every time a user performs an action. \u003c/li\u003e\n  \u003cli\u003e input received from sockets is used without being sanitized. \u003c/li\u003e\n  \u003cli\u003e sensitive data is sent via sockets without being encrypted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst net \u003d require(\u0027net\u0027);\n\nvar socket \u003d new net.Socket(); // Sensitive\nsocket.connect(80, \u0027google.com\u0027);\n\n// net.createConnection creates a new net.Socket, initiates connection with socket.connect(), then returns the net.Socket that starts the connection\nnet.createConnection({ port: port }, () \u003d\u0026gt; {}); // Sensitive\n\n// net.connect is an alias to net.createConnection\nnet.connect({ port: port }, () \u003d\u0026gt; {}); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. \u003c/li\u003e\n  \u003cli\u003e Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\"\u003eSanitize\u003c/a\u003e any input read from the socket. \u003c/li\u003e\n  \u003cli\u003e Limit the number of sockets a given user can create. Close the sockets as soon as possible. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/20\"\u003eMITRE, CWE-20\u003c/a\u003e - Improper Input Validation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eMITRE, CWE-400\u003c/a\u003e - Uncontrolled Resource Consumption (\u0027Resource Exhaustion\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/200\"\u003eMITRE, CWE-200\u003c/a\u003e - Exposure of Sensitive Information to an Unauthorized Actor \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S4817",
    "name": "Executing XPath expressions is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eExecuting XPATH expressions is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2016-6272\"\u003eCVE-2016-6272\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2016-9149\"\u003eCVE-2016-9149\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2012-4837\"\u003eCVE-2012-4837\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUser-provided data such as URL parameters should always be considered as untrusted and tainted. Constructing XPath expressions directly from\ntainted data enables attackers to inject specially crafted values that changes the initial meaning of the expression itself. Successful XPath\ninjections attacks can read sensitive information from the XML document.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the XPATH expression might contain some unsafe input coming from a user. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are at risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Server side \u003d\u003d\u003d\n\nvar xpath \u003d require(\u0027xpath\u0027);\nvar xmldom \u003d require(\u0027xmldom\u0027);\n\nvar doc \u003d new xmldom.DOMParser().parseFromString(xml);\nvar nodes \u003d xpath.select(userinput, doc); // Sensitive\nvar node \u003d xpath.select1(userinput, doc); // Sensitive\n\u003c/pre\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Client side \u003d\u003d\u003d\n\n// Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:\nvar nodes \u003d document.evaluate(userinput, xmlDoc, null, XPathResult.ANY_TYPE, null); // Sensitive\n\n// Internet Explorer uses its own methods to select nodes:\nvar nodes \u003d xmlDoc.selectNodes(userinput); // Sensitive\nvar node \u003d xmlDoc.SelectSingleNode(userinput); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eSanitize any user input before using it in an XPATH expression.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/643\"\u003eMITRE, CWE-643\u003c/a\u003e - Improper Neutralization of Data within XPath Expressions \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S2990",
    "name": "The global \"this\" object should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe value of \u003ccode\u003ethis\u003c/code\u003e depends on which context it appears:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function: The value of \u003ccode\u003ethis\u003c/code\u003e will depend on how a function was called. The value of \u003ccode\u003ethis\u003c/code\u003e is not always the object that\n  has the function as an \u003cem\u003eown\u003c/em\u003e property, but the object that is used to call the function. The methods \u003ccode\u003eFunction.prototype.call()\u003c/code\u003e,\n  \u003ccode\u003eFunction.prototype.apply()\u003c/code\u003e, or \u003ccode\u003eReflect.apply()\u003c/code\u003e can be used to explicitly set the value of \u003ccode\u003ethis\u003c/code\u003e. Is it also\n  possible to create a new function with a specific value of this that doesnâ€™t change regardless of how the function is called with\n  \u003ccode\u003eFunction.prototype.bind()\u003c/code\u003e. In non-strict mode, \u003ccode\u003ethis\u003c/code\u003e will always be an object and will default to \u003ccode\u003eglobalThis\u003c/code\u003e\n  if set to \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Arrow function: The value of \u003ccode\u003ethis\u003c/code\u003e will be the same as the enclosing context. Arrow functions will not create a new\n  \u003ccode\u003ethis\u003c/code\u003e binding. When invoking arrow functions using \u003ccode\u003ecall()\u003c/code\u003e, \u003ccode\u003ebind()\u003c/code\u003e, or \u003ccode\u003eapply()\u003c/code\u003e, the\n  \u003ccode\u003ethisArg\u003c/code\u003e parameter is ignored. \u003c/li\u003e\n  \u003cli\u003e Class: Class methods behave like methods in other objects: the \u003ccode\u003ethis\u003c/code\u003e value is the object that the method was accessed on. If the\n  method is not transferred to another object, \u003ccode\u003ethis\u003c/code\u003e is generally an instance of the class. However, for static methods, the value of\n  \u003ccode\u003ethis\u003c/code\u003e is the class instead of the instance. \u003c/li\u003e\n  \u003cli\u003e Global: outside of any functions or classes (also inside blocks or arrow functions defined in the global scope), the value of \u003ccode\u003ethis\u003c/code\u003e\n  depends on what execution context the script runs in. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen a function is called without an explicit object context, the \u003ccode\u003ethis\u003c/code\u003e keyword refers to the global object. This also applies when it\nis used outside of an object or function. The global \u003ccode\u003ethis\u003c/code\u003e object refers to the global context in which the JavaScript code is executed.\nThis can cause problems when the code is executed in different contexts, such as in a browser or in a Node.js environment, where the global object is\ndifferent. Such uses could confuse maintainers as the actual value depends on the execution context, and it can be unclear what object the\n\u003ccode\u003ethis\u003c/code\u003e keyword is referring to.\u003c/p\u003e\n\u003cp\u003eIn JavaScriptâ€™s \"strict mode\", using \u003ccode\u003ethis\u003c/code\u003e in the global context will always be \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nthis.foo \u003d 1;   // Noncompliant: \u0027this\u0027 refers to global \u0027this\u0027\nconsole.log(this.foo); // Noncompliant: \u0027this\u0027 refers to global \u0027this\u0027\n\nfunction MyObj() {\n  this.foo \u003d 1; // Compliant\n}\n\nMyObj.func1 \u003d function() {\n  if (this.foo \u003d\u003d\u003d 1) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, simply drop the \u003ccode\u003ethis\u003c/code\u003e, or replace it with \u003ccode\u003eglobalThis\u003c/code\u003e. The \u003ccode\u003eglobalThis\u003c/code\u003e global property gives access to\nthe global object regardless of the current environment.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo \u003d 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo \u003d 1;\n}\n\nMyObj.func1 \u003d function() {\n  if (this.foo \u003d\u003d\u003d 1) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\"\u003ethis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution\"\u003eNo this\n  substitution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003eglobalThis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Global_object\"\u003eGlobal object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\"\u003eReflect.apply()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"\u003eFunction.prototype.call()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003eFunction.prototype.apply()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"\u003eFunction.prototype.bind()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe value of \u003ccode\u003ethis\u003c/code\u003e depends on which context it appears:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function: The value of \u003ccode\u003ethis\u003c/code\u003e will depend on how a function was called. The value of \u003ccode\u003ethis\u003c/code\u003e is not always the object that\n  has the function as an \u003cem\u003eown\u003c/em\u003e property, but the object that is used to call the function. The methods \u003ccode\u003eFunction.prototype.call()\u003c/code\u003e,\n  \u003ccode\u003eFunction.prototype.apply()\u003c/code\u003e, or \u003ccode\u003eReflect.apply()\u003c/code\u003e can be used to explicitly set the value of \u003ccode\u003ethis\u003c/code\u003e. Is it also\n  possible to create a new function with a specific value of this that doesnâ€™t change regardless of how the function is called with\n  \u003ccode\u003eFunction.prototype.bind()\u003c/code\u003e. In non-strict mode, \u003ccode\u003ethis\u003c/code\u003e will always be an object and will default to \u003ccode\u003eglobalThis\u003c/code\u003e\n  if set to \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Arrow function: The value of \u003ccode\u003ethis\u003c/code\u003e will be the same as the enclosing context. Arrow functions will not create a new\n  \u003ccode\u003ethis\u003c/code\u003e binding. When invoking arrow functions using \u003ccode\u003ecall()\u003c/code\u003e, \u003ccode\u003ebind()\u003c/code\u003e, or \u003ccode\u003eapply()\u003c/code\u003e, the\n  \u003ccode\u003ethisArg\u003c/code\u003e parameter is ignored. \u003c/li\u003e\n  \u003cli\u003e Class: Class methods behave like methods in other objects: the \u003ccode\u003ethis\u003c/code\u003e value is the object that the method was accessed on. If the\n  method is not transferred to another object, \u003ccode\u003ethis\u003c/code\u003e is generally an instance of the class. However, for static methods, the value of\n  \u003ccode\u003ethis\u003c/code\u003e is the class instead of the instance. \u003c/li\u003e\n  \u003cli\u003e Global: outside of any functions or classes (also inside blocks or arrow functions defined in the global scope), the value of \u003ccode\u003ethis\u003c/code\u003e\n  depends on what execution context the script runs in. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen a function is called without an explicit object context, the \u003ccode\u003ethis\u003c/code\u003e keyword refers to the global object. This also applies when it\nis used outside of an object or function. The global \u003ccode\u003ethis\u003c/code\u003e object refers to the global context in which the JavaScript code is executed.\nThis can cause problems when the code is executed in different contexts, such as in a browser or in a Node.js environment, where the global object is\ndifferent. Such uses could confuse maintainers as the actual value depends on the execution context, and it can be unclear what object the\n\u003ccode\u003ethis\u003c/code\u003e keyword is referring to.\u003c/p\u003e\n\u003cp\u003eIn JavaScriptâ€™s \"strict mode\", using \u003ccode\u003ethis\u003c/code\u003e in the global context will always be \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nthis.foo \u003d 1;   // Noncompliant: \u0027this\u0027 refers to global \u0027this\u0027\nconsole.log(this.foo); // Noncompliant: \u0027this\u0027 refers to global \u0027this\u0027\n\nfunction MyObj() {\n  this.foo \u003d 1; // Compliant\n}\n\nMyObj.func1 \u003d function() {\n  if (this.foo \u003d\u003d\u003d 1) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, simply drop the \u003ccode\u003ethis\u003c/code\u003e, or replace it with \u003ccode\u003eglobalThis\u003c/code\u003e. The \u003ccode\u003eglobalThis\u003c/code\u003e global property gives access to\nthe global object regardless of the current environment.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo \u003d 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo \u003d 1;\n}\n\nMyObj.func1 \u003d function() {\n  if (this.foo \u003d\u003d\u003d 1) {\n    // ...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\"\u003ethis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution\"\u003eNo this\n  substitution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003eglobalThis\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Global_object\"\u003eGlobal object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\"\u003eReflect.apply()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"\u003eFunction.prototype.call()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"\u003eFunction.prototype.apply()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"\u003eFunction.prototype.bind()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2871",
    "name": "\"Array.prototype.sort()\" and \"Array.prototype.toSorted()\" should use a compare function",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript provides built-in methods to sort arrays, making it convenient for developers to manipulate data. There are two primary ways to sort an\narray:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.sort()\u003c/code\u003e: This method sorts the elements of an array in place and returns the sorted array. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.toSorted()\u003c/code\u003e: This method is designed to return a new sorted array, leaving the original array unchanged. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe default sort order is lexicographic (dictionary) order, based on the string representation of the elements. This means that when sorting an\narray of strings, numbers, or other elements, they are converted to strings and sorted according to their Unicode code points (UTF-16). For most\ncases, this default behavior is suitable when sorting an array of strings.\u003c/p\u003e\n\u003cp\u003eHowever, itâ€™s essential to be aware of potential pitfalls when sorting arrays of non-string elements, particularly numbers. The lexicographic order\nmay not always produce the expected results for numbers:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst numbers \u003d [10, 2, 30, 1, 5];\nnumbers.sort(); // Noncompliant: lexicographic sort\nconsole.log(numbers); // Output: [1, 10, 2, 30, 5]\n\u003c/pre\u003e\n\u003cp\u003eTo sort numbers correctly, you must provide a custom comparison function that returns the correct ordering:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst numbers \u003d [10, 2, 30, 1, 5];\nnumbers.sort((a, b) \u003d\u0026gt; a - b);\nconsole.log(numbers); // Output: [1, 2, 5, 10, 30]\n\u003c/pre\u003e\n\u003cp\u003eEven to sort strings, the default sort order may give unexpected results. Not only does it not support localization, it also doesnâ€™t fully support\nUnicode, as it only considers UTF-16 code units. For example, in the code below, \u003ccode\u003e\"eÎ”\"\u003c/code\u003e is surprisingly before and after\n\u003ccode\u003e\"Ã©Î”\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nconst code1 \u003d \u0027\\u00e9\\u0394\u0027; // \"Ã©Î”\"\nconst code2 \u003d \u0027\\u0065\\u0301\\u0394\u0027; // \"Ã©Î”\" using Unicode combining marks\nconst code3 \u003d \u0027\\u0065\\u0394\u0027; // \"eÎ”\"\nconsole.log([code1, code2, code3].sort()); // Noncompliant: [\"Ã©Î”\", \"eÎ”\", \"Ã©Î”\"], \"eÎ”\" position is inconsistent\nconsole.log([code1, code2, code3].sort((a, b) \u003d\u0026gt; a.localeCompare(b))); // [\"eÎ”\", \"Ã©Î”\", \"Ã©Î”\"]\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003e\u003ccode\u003eArray.prototype.sort()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003e\u003ccode\u003eArray.prototype.toSorted()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"\u003e\u003ccode\u003eString.prototype.localeCompare()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript provides built-in methods to sort arrays, making it convenient for developers to manipulate data. There are two primary ways to sort an\narray:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.sort()\u003c/code\u003e: This method sorts the elements of an array in place and returns the sorted array. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.toSorted()\u003c/code\u003e: This method is designed to return a new sorted array, leaving the original array unchanged. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe default sort order is lexicographic (dictionary) order, based on the string representation of the elements. This means that when sorting an\narray of strings, numbers, or other elements, they are converted to strings and sorted according to their Unicode code points (UTF-16). For most\ncases, this default behavior is suitable when sorting an array of strings.\u003c/p\u003e\n\u003cp\u003eHowever, itâ€™s essential to be aware of potential pitfalls when sorting arrays of non-string elements, particularly numbers. The lexicographic order\nmay not always produce the expected results for numbers:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst numbers \u003d [10, 2, 30, 1, 5];\nnumbers.sort(); // Noncompliant: lexicographic sort\nconsole.log(numbers); // Output: [1, 10, 2, 30, 5]\n\u003c/pre\u003e\n\u003cp\u003eTo sort numbers correctly, you must provide a custom comparison function that returns the correct ordering:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst numbers \u003d [10, 2, 30, 1, 5];\nnumbers.sort((a, b) \u003d\u0026gt; a - b);\nconsole.log(numbers); // Output: [1, 2, 5, 10, 30]\n\u003c/pre\u003e\n\u003cp\u003eEven to sort strings, the default sort order may give unexpected results. Not only does it not support localization, it also doesnâ€™t fully support\nUnicode, as it only considers UTF-16 code units. For example, in the code below, \u003ccode\u003e\"eÎ”\"\u003c/code\u003e is surprisingly before and after\n\u003ccode\u003e\"Ã©Î”\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nconst code1 \u003d \u0027\\u00e9\\u0394\u0027; // \"Ã©Î”\"\nconst code2 \u003d \u0027\\u0065\\u0301\\u0394\u0027; // \"Ã©Î”\" using Unicode combining marks\nconst code3 \u003d \u0027\\u0065\\u0394\u0027; // \"eÎ”\"\nconsole.log([code1, code2, code3].sort()); // Noncompliant: [\"Ã©Î”\", \"eÎ”\", \"Ã©Î”\"], \"eÎ”\" position is inconsistent\nconsole.log([code1, code2, code3].sort((a, b) \u003d\u0026gt; a.localeCompare(b))); // [\"eÎ”\", \"Ã©Î”\", \"Ã©Î”\"]\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003e\u003ccode\u003eArray.prototype.sort()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003e\u003ccode\u003eArray.prototype.toSorted()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"\u003e\u003ccode\u003eString.prototype.localeCompare()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2870",
    "name": "\"delete\" should not be used on arrays",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003edelete\u003c/code\u003e operator can be used to remove a property from any object. Arrays are objects, so the \u003ccode\u003edelete\u003c/code\u003e operator can be\nused on them too.\u003c/p\u003e\n\u003cp\u003eWhen you delete an element from an array using the \u003ccode\u003edelete\u003c/code\u003e keyword, it will remove the value but still leave behind an empty slot at\nthat index. Therefore, a hole will be created in the array because the indexes wonâ€™t be shifted to reflect the deletion. This means that the array\nwill still have that index, but the value will be \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eArrays that have gaps or missing indexes between elements are known as sparse arrays.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet myArray \u003d [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027];\n\ndelete myArray[2]; // Noncompliant: myArray \u003d\u0026gt; [\u0027a\u0027, \u0027b\u0027, undefined, \u0027d\u0027]\nconsole.log(myArray[2]); // expected value was \u0027d\u0027 but output is undefined\n\u003c/pre\u003e\n\u003cp\u003eThe proper method for removing an element from an array should be one of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.splice()\u003c/code\u003e - removes element(s) from an array at certain indexe(s) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.pop()\u003c/code\u003e - removes the last element from an array \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.shift()\u003c/code\u003e - removes the first element from an array \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that these methods mutate arrays in-place. Alternatively, you could create new arrays using copying methods and exclude the element you want\nto remove.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet myArray \u003d [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027];\n\n// removes 1 element from index 2\nremoved \u003d myArray.splice(2, 1);  // myArray \u003d\u0026gt; [\u0027a\u0027, \u0027b\u0027, \u0027d\u0027]\nconsole.log(myArray[2]); // outputs \u0027d\u0027\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003edelete operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\"\u003eSparse arrays\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#deleting_array_elements\"\u003eDeleting\n  array elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\"\u003eCopying methods\n  and mutating methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"\u003eArray.prototype.pop()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"\u003eArray.prototype.shift()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003eArray.prototype.splice()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003edelete\u003c/code\u003e operator can be used to remove a property from any object. Arrays are objects, so the \u003ccode\u003edelete\u003c/code\u003e operator can be\nused on them too.\u003c/p\u003e\n\u003cp\u003eWhen you delete an element from an array using the \u003ccode\u003edelete\u003c/code\u003e keyword, it will remove the value but still leave behind an empty slot at\nthat index. Therefore, a hole will be created in the array because the indexes wonâ€™t be shifted to reflect the deletion. This means that the array\nwill still have that index, but the value will be \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eArrays that have gaps or missing indexes between elements are known as sparse arrays.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet myArray \u003d [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027];\n\ndelete myArray[2]; // Noncompliant: myArray \u003d\u0026gt; [\u0027a\u0027, \u0027b\u0027, undefined, \u0027d\u0027]\nconsole.log(myArray[2]); // expected value was \u0027d\u0027 but output is undefined\n\u003c/pre\u003e\n\u003cp\u003eThe proper method for removing an element from an array should be one of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.splice()\u003c/code\u003e - removes element(s) from an array at certain indexe(s) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.pop()\u003c/code\u003e - removes the last element from an array \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eArray.prototype.shift()\u003c/code\u003e - removes the first element from an array \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that these methods mutate arrays in-place. Alternatively, you could create new arrays using copying methods and exclude the element you want\nto remove.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet myArray \u003d [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027];\n\n// removes 1 element from index 2\nremoved \u003d myArray.splice(2, 1);  // myArray \u003d\u0026gt; [\u0027a\u0027, \u0027b\u0027, \u0027d\u0027]\nconsole.log(myArray[2]); // outputs \u0027d\u0027\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003edelete operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays\"\u003eSparse arrays\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#deleting_array_elements\"\u003eDeleting\n  array elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods\"\u003eCopying methods\n  and mutating methods\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\"\u003eArray.prototype.pop()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"\u003eArray.prototype.shift()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003eArray.prototype.splice()\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1541",
    "name": "Cyclomatic Complexity of functions should not be too high",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumFunctionComplexityThreshold": {
        "key": "maximumFunctionComplexityThreshold",
        "name": "maximumFunctionComplexityThreshold",
        "description": "The maximum authorized complexity in function",
        "defaultValue": "10",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFunctionComplexityThreshold": "10"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [
      "javascript:FunctionComplexity"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1301",
    "name": "\"switch\" statements should have at least 3 \"case\" clauses",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003eswitch\u003c/code\u003e statement is a control flow statement that allows you to execute different blocks of code based on the value of an\nexpression. It provides a more concise way to handle multiple conditions compared to using multiple \u003ccode\u003eif-else\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003eIf you only have a single condition to check, using an \u003ccode\u003eif\u003c/code\u003e statement is simpler and more concise. \u003ccode\u003eswitch\u003c/code\u003e statements are\ndesigned for handling multiple cases, so using them for a single condition can be overkill and less readable.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eswitch\u003c/code\u003e statement has only one \u003ccode\u003ecase\u003c/code\u003e clause and possibly a \u003ccode\u003edefault\u003c/code\u003e one.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (condition) { // Noncompliant: The switch has only one case and a default\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eUse a \u003ccode\u003eswitch\u003c/code\u003e statement when you have multiple cases to handle and an \u003ccode\u003eif\u003c/code\u003e statement when you have only one condition to\ncheck.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition \u003d\u003d\u003d 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003eswitch\u003c/code\u003e statement is a control flow statement that allows you to execute different blocks of code based on the value of an\nexpression. It provides a more concise way to handle multiple conditions compared to using multiple \u003ccode\u003eif-else\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003eIf you only have a single condition to check, using an \u003ccode\u003eif\u003c/code\u003e statement is simpler and more concise. \u003ccode\u003eswitch\u003c/code\u003e statements are\ndesigned for handling multiple cases, so using them for a single condition can be overkill and less readable.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eswitch\u003c/code\u003e statement has only one \u003ccode\u003ecase\u003c/code\u003e clause and possibly a \u003ccode\u003edefault\u003c/code\u003e one.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (condition) { // Noncompliant: The switch has only one case and a default\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003cp\u003eUse a \u003ccode\u003eswitch\u003c/code\u003e statement when you have multiple cases to handle and an \u003ccode\u003eif\u003c/code\u003e statement when you have only one condition to\ncheck.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (condition \u003d\u003d\u003d 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S909",
    "name": "\"continue\" should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003econtinue\u003c/code\u003e is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as \u003ccode\u003eif\u003c/code\u003e should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n  for (i \u003d 0; i \u0026lt; 10; i++) {\n    if (i \u003d\u003d 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i \u003d \" + i);\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n  for (i \u003d 0; i \u0026lt; 10; i++) {\n    if (i !\u003d 5) {  /* Compliant */\n      alert(\"i \u003d \" + i);\n    }\n  }\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003econtinue\u003c/code\u003e is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as \u003ccode\u003eif\u003c/code\u003e should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n  for (i \u003d 0; i \u0026lt; 10; i++) {\n    if (i \u003d\u003d 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i \u003d \" + i);\n  }\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n  for (i \u003d 0; i \u0026lt; 10; i++) {\n    if (i !\u003d 5) {  /* Compliant */\n      alert(\"i \u003d \" + i);\n    }\n  }\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [
      "javascript:ContinueStatement"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S905",
    "name": "Non-empty statements should change control flow or have at least one side-effect",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eStatements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. \u003c/li\u003e\n  \u003cli\u003e The statements are residual after a refactoring. \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not raise an issue on statements containing only a semicolon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIdentify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getResult() {\n    let result \u003d 42;\n    if (shouldBeZero()) {\n        result \u003d\u003d 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nvar msg \u003d \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten \u0027+\u0027 operator on previous line?\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction getResult() {\n    let result \u003d 42;\n    if (shouldBeZero()) {\n        result \u003d 0; // Compliant\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nvar msg \u003d \"Hello, \" +\n  \"World!\"; // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/482\"\u003e482 Comparing instead of Assigning\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eStatements with no side effects and no change of control flow do not contribute to the functionality of the code and can indicate a programming\nerror.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen writing code, it is important to ensure that each statement serves a purpose and contributes to the overall functionality of the program. When\nthey have no side effects or do not change the control flow, they can either indicate a programming error or be redundant:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e The code does not behave as intended: The statements are expected to have an effect but they do not. This can be caused by mistyping,\n  copy-and-paste errors, etc. \u003c/li\u003e\n  \u003cli\u003e The statements are residual after a refactoring. \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not raise an issue on statements containing only a semicolon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIdentify statements that do not contribute to the functionality of the code and verify if they are intended to be part of the logic. If they are,\nthere is a bug to be fixed. If they are not, then they are redundant and should be removed.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getResult() {\n    let result \u003d 42;\n    if (shouldBeZero()) {\n        result \u003d\u003d 0; // Noncompliant: no side effect, was an assignment intended?\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nvar msg \u003d \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten \u0027+\u0027 operator on previous line?\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction getResult() {\n    let result \u003d 42;\n    if (shouldBeZero()) {\n        result \u003d 0; // Compliant\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nvar msg \u003d \"Hello, \" +\n  \"World!\"; // Compliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/482\"\u003e482 Comparing instead of Assigning\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1534",
    "name": "Member names should not be duplicated within a class or object literal",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript allows duplicate property names in classes and object literals. The last occurrence will overwrite previous definitions. Therefore,\nhaving more than one occurrence will have no effect and may cause misunderstandings and bugs.\u003c/p\u003e\n\u003cpre\u003e\nlet data \u003d {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  \u0027key\u0027: \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n\nclass Foo {\n  bar() { }\n  bar() { }  // Noncompliant - duplicate of \"bar\"\n}\n\u003c/pre\u003e\n\u003cp\u003eDefining a \u003ccode\u003eclass\u003c/code\u003e with a duplicated \u003ccode\u003econstructor\u003c/code\u003e will generate an error.\u003c/p\u003e\n\u003cpre\u003e\nclass Class {\n  constructor() {\n  }\n  constructor(value) { // Noncompliant: A class may only have one constructor\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eBefore ECMAScript 2015, using duplicate names generated an error in JavaScript strict mode code.\u003c/p\u003e\n\u003cp\u003eThis rule will also report on duplicate properties in JSX.\u003c/p\u003e\n\u003cpre\u003e\nfunction MyComponent(props) {\n  return \u0026lt;div prop\u003d{props.prop1} prop\u003d{props.prop2}\u0026gt; { /* Noncompliant, \u0027prop\u0027 is defined twice */ }\n    This is my component\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\"\u003eProperty definitions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript allows duplicate property names in classes and object literals. The last occurrence will overwrite previous definitions. Therefore,\nhaving more than one occurrence will have no effect and may cause misunderstandings and bugs.\u003c/p\u003e\n\u003cpre\u003e\nlet data \u003d {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  \u0027key\u0027: \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n\nclass Foo {\n  bar() { }\n  bar() { }  // Noncompliant - duplicate of \"bar\"\n}\n\u003c/pre\u003e\n\u003cp\u003eDefining a \u003ccode\u003eclass\u003c/code\u003e with a duplicated \u003ccode\u003econstructor\u003c/code\u003e will generate an error.\u003c/p\u003e\n\u003cpre\u003e\nclass Class {\n  constructor() {\n  }\n  constructor(value) { // Noncompliant: A class may only have one constructor\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eBefore ECMAScript 2015, using duplicate names generated an error in JavaScript strict mode code.\u003c/p\u003e\n\u003cp\u003eThis rule will also report on duplicate properties in JSX.\u003c/p\u003e\n\u003cpre\u003e\nfunction MyComponent(props) {\n  return \u0026lt;div prop\u003d{props.prop1} prop\u003d{props.prop2}\u0026gt; { /* Noncompliant, \u0027prop\u0027 is defined twice */ }\n    This is my component\n  \u0026lt;/div\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\"\u003eProperty definitions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:DuplicatePropertyName"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3834",
    "name": "\"new\" operator should not be used with Symbol and BigInt",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the \u003ccode\u003enew\u003c/code\u003e operator with \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e will throw a \u003ccode\u003eTypeError\u003c/code\u003e because they are not\nintended to be used as constructors. \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e are primitive types in JavaScript and should be used as such.\u003c/p\u003e\n\u003cp\u003eThis is different from the other primitive types, such as string, number or boolean, where it was possible to call global \u003ccode\u003eString\u003c/code\u003e or\n\u003ccode\u003eNumber\u003c/code\u003e as functions that return primitive types, but also use them as constructors with the \u003ccode\u003enew\u003c/code\u003e operator to create wrapper\nobjects. This confusing double behavior is not implemented for \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e types that were introduced later in the\nlanguage.\u003c/p\u003e\n\u003cp\u003eThis behavior would be especially problematic for symbols that have reference identity and already behave like objects in some way. For example,\nthey are garbage collectable and therefore can be used as keys in WeakMap and WeakSet objects.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet foo \u003d new Symbol(\u0027abc\u0027); // Noncompliant: TypeError: Symbol is not a constructor\nlet bar \u003d new BigInt(123);   // Noncompliant: TypeError: BigInt is not a constructor\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove the \u003ccode\u003enew\u003c/code\u003e operator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d Symbol(\u0027abc\u0027);\nlet bar \u003d BigInt(123);\n\u003c/pre\u003e\n\u003cp\u003eFor the \u003ccode\u003eBigInt\u003c/code\u003e type to be recognized correctly, the environment should be \u003ccode\u003ees2020\u003c/code\u003e or higher.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol\"\u003eSymbol\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"\u003eBigInt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003enew operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the \u003ccode\u003enew\u003c/code\u003e operator with \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e will throw a \u003ccode\u003eTypeError\u003c/code\u003e because they are not\nintended to be used as constructors. \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e are primitive types in JavaScript and should be used as such.\u003c/p\u003e\n\u003cp\u003eThis is different from the other primitive types, such as string, number or boolean, where it was possible to call global \u003ccode\u003eString\u003c/code\u003e or\n\u003ccode\u003eNumber\u003c/code\u003e as functions that return primitive types, but also use them as constructors with the \u003ccode\u003enew\u003c/code\u003e operator to create wrapper\nobjects. This confusing double behavior is not implemented for \u003ccode\u003eSymbol\u003c/code\u003e and \u003ccode\u003eBigInt\u003c/code\u003e types that were introduced later in the\nlanguage.\u003c/p\u003e\n\u003cp\u003eThis behavior would be especially problematic for symbols that have reference identity and already behave like objects in some way. For example,\nthey are garbage collectable and therefore can be used as keys in WeakMap and WeakSet objects.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet foo \u003d new Symbol(\u0027abc\u0027); // Noncompliant: TypeError: Symbol is not a constructor\nlet bar \u003d new BigInt(123);   // Noncompliant: TypeError: BigInt is not a constructor\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove the \u003ccode\u003enew\u003c/code\u003e operator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d Symbol(\u0027abc\u0027);\nlet bar \u003d BigInt(123);\n\u003c/pre\u003e\n\u003cp\u003eFor the \u003ccode\u003eBigInt\u003c/code\u003e type to be recognized correctly, the environment should be \u003ccode\u003ees2020\u003c/code\u003e or higher.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol\"\u003eSymbol\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"\u003eBigInt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003enew operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1535",
    "name": "\"for...in\" loops should filter properties before acting on them",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that donâ€™t take this into account can fail.\u003c/p\u003e\n\u003cp\u003eTherefore, the body of every \u003ccode\u003efor...in\u003c/code\u003e statement should be wrapped in an \u003ccode\u003eif\u003c/code\u003e statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eLoops used to clone objects are ignored.\u003c/p\u003e\n\u003cpre\u003e\nfor (prop in obj) {\n  a[prop] \u003d obj[prop];  // Compliant by exception\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that donâ€™t take this into account can fail.\u003c/p\u003e\n\u003cp\u003eTherefore, the body of every \u003ccode\u003efor...in\u003c/code\u003e statement should be wrapped in an \u003ccode\u003eif\u003c/code\u003e statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eLoops used to clone objects are ignored.\u003c/p\u003e\n\u003cpre\u003e\nfor (prop in obj) {\n  a[prop] \u003d obj[prop];  // Compliant by exception\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:ForIn"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1656",
    "name": "Variables should not be self-assigned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction setName(name) {\n    name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction setName(name) {\n    this.name \u003d name;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction setName(name) {\n    name \u003d name;\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction setName(name) {\n    this.name \u003d name;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1536",
    "name": "Function argument names should be unique",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFunction parameter names should be unique in JavaScript. Unique parameter names ensure that there is no ambiguity in referring to specific\nparameters within the function body. If multiple parameters share the same name, it becomes unclear which parameter is being referred to when using\nthat name within the function.\u003c/p\u003e\n\u003cp\u003eUnique parameter names improve the readability and maintainability of code. When parameter names are descriptive and distinct, it becomes easier\nfor other developers (including yourself) to understand the purpose and functionality of the function.\u003c/p\u003e\n\u003cp\u003eWhen parameter names are not unique, the later occurrence of a parameter will overwrite the earlier occurrence, potentially leading to unintended\nconsequences or bugs. This behavior can cause confusion and make the code harder to debug.\u003c/p\u003e\n\u003cpre\u003e\nfunction f(a, b, a) { // Noncompliant: The first occurrence of `a` will be overwritten by the later occurrence\n  console.log(a, b);\n}\n\nf(1, 2, 3);           // Outputs 5\n\u003c/pre\u003e\n\u003cp\u003eIn strict mode, JavaScript enforces stricter rules and detects potential issues. Duplicate parameter names are considered a syntax error in strict\nmode. By using unique parameter names, you ensure compatibility with strict mode and can benefit from the enhanced error checking and code quality\nimprovements it provides.\u003c/p\u003e\n\u003cpre\u003e\n\u0027use strict\u0027;\n\nfunction f(a, b, a) { // Noncompliant: SyntaxError: Duplicate parameter name not allowed in this context\n  console.log(a, b);\n}\n\nf(1, 2, 3);\n\u003c/pre\u003e\n\u003cp\u003eYou should remove the duplicates or rename them while carefully ensuring you are not altering the semantics of your code.\u003c/p\u003e\n\u003cpre\u003e\nfunction f(a, b, c) {\n  console.log(a, b, c);\n}\n\nf(1, 2, 3);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe arguments object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFunction parameter names should be unique in JavaScript. Unique parameter names ensure that there is no ambiguity in referring to specific\nparameters within the function body. If multiple parameters share the same name, it becomes unclear which parameter is being referred to when using\nthat name within the function.\u003c/p\u003e\n\u003cp\u003eUnique parameter names improve the readability and maintainability of code. When parameter names are descriptive and distinct, it becomes easier\nfor other developers (including yourself) to understand the purpose and functionality of the function.\u003c/p\u003e\n\u003cp\u003eWhen parameter names are not unique, the later occurrence of a parameter will overwrite the earlier occurrence, potentially leading to unintended\nconsequences or bugs. This behavior can cause confusion and make the code harder to debug.\u003c/p\u003e\n\u003cpre\u003e\nfunction f(a, b, a) { // Noncompliant: The first occurrence of `a` will be overwritten by the later occurrence\n  console.log(a, b);\n}\n\nf(1, 2, 3);           // Outputs 5\n\u003c/pre\u003e\n\u003cp\u003eIn strict mode, JavaScript enforces stricter rules and detects potential issues. Duplicate parameter names are considered a syntax error in strict\nmode. By using unique parameter names, you ensure compatibility with strict mode and can benefit from the enhanced error checking and code quality\nimprovements it provides.\u003c/p\u003e\n\u003cpre\u003e\n\u0027use strict\u0027;\n\nfunction f(a, b, a) { // Noncompliant: SyntaxError: Duplicate parameter name not allowed in this context\n  console.log(a, b);\n}\n\nf(1, 2, 3);\n\u003c/pre\u003e\n\u003cp\u003eYou should remove the duplicates or rename them while carefully ensuring you are not altering the semantics of your code.\u003c/p\u003e\n\u003cpre\u003e\nfunction f(a, b, c) {\n  console.log(a, b, c);\n}\n\nf(1, 2, 3);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe arguments object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"\u003eStrict mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:DuplicateFunctionArgument"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1537",
    "name": "Trailing commas should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost browsers parse and discard a meaningless, trailing comma. Unfortunately, thatâ€™s not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar settings \u003d {\n    \u0027foo\u0027  : oof,\n    \u0027bar\u0027 : rab,    // Noncompliant - trailing comma\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar settings \u003d {\n    \u0027foo\u0027  : oof,\n    \u0027bar\u0027 : rab\n};\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost browsers parse and discard a meaningless, trailing comma. Unfortunately, thatâ€™s not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar settings \u003d {\n    \u0027foo\u0027  : oof,\n    \u0027bar\u0027 : rab,    // Noncompliant - trailing comma\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar settings \u003d {\n    \u0027foo\u0027  : oof,\n    \u0027bar\u0027 : rab\n};\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:TrailingComma"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1539",
    "name": "\"strict\" mode should be used with caution",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEven though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction strict() {\n  \u0027use strict\u0027;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEven though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction strict() {\n  \u0027use strict\u0027;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "cross-browser",
      "user-experience"
    ],
    "deprecatedKeys": [
      "javascript:StrictMode"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1530",
    "name": "Function declarations should not be made within blocks",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each\nother.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x) {\n  function foo() {} //foo is hoisted in Chrome, Firefox and Safari, but not in Edge.\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x) {\n  const foo \u003d function() {}\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each\nother.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nif (x) {\n  function foo() {} //foo is hoisted in Chrome, Firefox and Safari, but not in Edge.\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nif (x) {\n  const foo \u003d function() {}\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "cross-browser",
      "user-experience"
    ],
    "deprecatedKeys": [
      "javascript:FunctionDeclarationsWithinBlocks"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1774",
    "name": "The ternary operator should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTernary expressions, while concise, can often lead to code that is difficult to read and understand, especially when they are nested or complex.\nPrioritizing readability fosters maintainability and reduces the likelihood of bugs. Therefore, they should be removed in favor of more explicit\ncontrol structures, such as \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statements, to improve the clarity and readability of the code.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(a) {\n  var b \u003d (a \u003d\u003d\u003d \u0027A\u0027) ? \u0027is A\u0027 : \u0027is not A\u0027; // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(a) {\n  var b;\n  if (a \u003d\u003d\u003d \u0027A\u0027) {\n    b \u003d \u0027is A\u0027;\n  }\n  else {\n    b \u003d \u0027is not A\u0027;\n  }\n  // ...\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTernary expressions, while concise, can often lead to code that is difficult to read and understand, especially when they are nested or complex.\nPrioritizing readability fosters maintainability and reduces the likelihood of bugs. Therefore, they should be removed in favor of more explicit\ncontrol structures, such as \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statements, to improve the clarity and readability of the code.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo(a) {\n  var b \u003d (a \u003d\u003d\u003d \u0027A\u0027) ? \u0027is A\u0027 : \u0027is not A\u0027; // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo(a) {\n  var b;\n  if (a \u003d\u003d\u003d \u0027A\u0027) {\n    b \u003d \u0027is A\u0027;\n  }\n  else {\n    b \u003d \u0027is not A\u0027;\n  }\n  // ...\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [
      "javascript:ConditionalOperator"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1533",
    "name": "Wrapper objects should not be used for primitive types",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe JavaScript wrapper objects \u003ccode\u003eNumber\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eBoolean\u003c/code\u003e provide a way to work with their respective\nprimitive types (\u003ccode\u003enumber\u003c/code\u003e, \u003ccode\u003estring\u003c/code\u003e and \u003ccode\u003eboolean\u003c/code\u003e) as objects.\u003c/p\u003e\n\u003cp\u003eUsing wrapper can lead to unexpected behavior due to the differences in how they are compared and used in operations compared to primitive types.\nIt can also lead to unnecessary memory allocation and slower code execution.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d new Number(\"0\"); // Noncompliant: x is an object, not a primitive\nif (x) {\n  alert(\u0027hi\u0027);  // Shows \u0027hi\u0027.\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove the \u003ccode\u003enew\u003c/code\u003e keyword to get the primitive value instead of a wrapper object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d Number(\"0\");\nif (x) {\n  alert(\u0027hi\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, it is generally recommended to use primitive types directly instead of wrapper objects, which makes the code more consistent and easier to\nunderstand.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d 0;\nif (x) {\n  alert(\u0027hi\u0027);\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\"\u003ePrimitive\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003e\u003ccode\u003e Number()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003e\u003ccode\u003e String()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003e\u003ccode\u003eBoolean()\u003c/code\u003e constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe JavaScript wrapper objects \u003ccode\u003eNumber\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, and \u003ccode\u003eBoolean\u003c/code\u003e provide a way to work with their respective\nprimitive types (\u003ccode\u003enumber\u003c/code\u003e, \u003ccode\u003estring\u003c/code\u003e and \u003ccode\u003eboolean\u003c/code\u003e) as objects.\u003c/p\u003e\n\u003cp\u003eUsing wrapper can lead to unexpected behavior due to the differences in how they are compared and used in operations compared to primitive types.\nIt can also lead to unnecessary memory allocation and slower code execution.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d new Number(\"0\"); // Noncompliant: x is an object, not a primitive\nif (x) {\n  alert(\u0027hi\u0027);  // Shows \u0027hi\u0027.\n}\n\u003c/pre\u003e\n\u003cp\u003eRemove the \u003ccode\u003enew\u003c/code\u003e keyword to get the primitive value instead of a wrapper object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d Number(\"0\");\nif (x) {\n  alert(\u0027hi\u0027);\n}\n\u003c/pre\u003e\n\u003cp\u003eHowever, it is generally recommended to use primitive types directly instead of wrapper objects, which makes the code more consistent and easier to\nunderstand.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d 0;\nif (x) {\n  alert(\u0027hi\u0027);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\"\u003ePrimitive\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003e\u003ccode\u003e Number()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003e\u003ccode\u003e String()\u003c/code\u003e\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003e\u003ccode\u003eBoolean()\u003c/code\u003e constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [
      "javascript:PrimitiveWrappers"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S930",
    "name": "Function calls should not pass extra arguments",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you call a function in JavaScript and provide more arguments than the function expects, the extra arguments are simply ignored by the\nfunction.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction sum(a, b) {\n  return a + b;\n}\n\nsum(1, 2, 3); // Noncompliant: The last argument is unexpected and will be ignored\n\u003c/pre\u003e\n\u003cp\u003ePassing extra arguments in JavaScript is not inherently \"bad,\" but it can lead to some potential issues or confusion if not handled correctly:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The function signature is an essential part of its interface. Passing extra arguments can obscure the functionâ€™s intended use and make it less\n  clear what the function actually requires. \u003c/li\u003e\n  \u003cli\u003e This can lead to unexpected behavior, as the function might not work as intended or produce incorrect results. \u003c/li\u003e\n  \u003cli\u003e Code that passes extra arguments can become harder to understand and maintain, especially when revisiting it at a later time. \u003c/li\u003e\n  \u003cli\u003e Other developers might find it challenging to comprehend the functionâ€™s purpose if extra arguments are scattered throughout the codebase. \u003c/li\u003e\n  \u003cli\u003e If you refactor the function later or rely on an external library that changes the expected number of arguments, your code with extra arguments\n  could break unexpectedly. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile itâ€™s possible to pass extra arguments, itâ€™s essential to note that accessing those extra arguments directly inside the function is not\nstraightforward. One common approach to handling extra arguments is to use the \u003ccode\u003earguments\u003c/code\u003e object, which is an array-like object available\nwithin all function scopes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction sum() {\n  let total \u003d 0;\n  for (let i \u003d 0; i \u0026lt; arguments.length; i++) {\n    total +\u003d arguments[i];\n  }\n  return total;\n}\n\nsum(1, 2, 3); // Compliant\n\u003c/pre\u003e\n\u003cp\u003eHowever, itâ€™s generally recommended to use the rest parameter syntax (\u003ccode\u003e...args\u003c/code\u003e) or utilize other techniques like the spread operator to\ndeal with variable numbers of arguments in a more readable and maintainable way.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction sum(...args) {\n  return args.reduce((a,b) \u003d\u0026gt; a + b, 0);\n}\n\nsum(1, 2, 3); // Compliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003earguments\u003c/code\u003e is used in the body of the function being called.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe \u003ccode\u003earguments\u003c/code\u003e\n  object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\"\u003eRest parameters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\u003eSpread syntax\n  (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you call a function in JavaScript and provide more arguments than the function expects, the extra arguments are simply ignored by the\nfunction.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction sum(a, b) {\n  return a + b;\n}\n\nsum(1, 2, 3); // Noncompliant: The last argument is unexpected and will be ignored\n\u003c/pre\u003e\n\u003cp\u003ePassing extra arguments in JavaScript is not inherently \"bad,\" but it can lead to some potential issues or confusion if not handled correctly:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The function signature is an essential part of its interface. Passing extra arguments can obscure the functionâ€™s intended use and make it less\n  clear what the function actually requires. \u003c/li\u003e\n  \u003cli\u003e This can lead to unexpected behavior, as the function might not work as intended or produce incorrect results. \u003c/li\u003e\n  \u003cli\u003e Code that passes extra arguments can become harder to understand and maintain, especially when revisiting it at a later time. \u003c/li\u003e\n  \u003cli\u003e Other developers might find it challenging to comprehend the functionâ€™s purpose if extra arguments are scattered throughout the codebase. \u003c/li\u003e\n  \u003cli\u003e If you refactor the function later or rely on an external library that changes the expected number of arguments, your code with extra arguments\n  could break unexpectedly. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile itâ€™s possible to pass extra arguments, itâ€™s essential to note that accessing those extra arguments directly inside the function is not\nstraightforward. One common approach to handling extra arguments is to use the \u003ccode\u003earguments\u003c/code\u003e object, which is an array-like object available\nwithin all function scopes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction sum() {\n  let total \u003d 0;\n  for (let i \u003d 0; i \u0026lt; arguments.length; i++) {\n    total +\u003d arguments[i];\n  }\n  return total;\n}\n\nsum(1, 2, 3); // Compliant\n\u003c/pre\u003e\n\u003cp\u003eHowever, itâ€™s generally recommended to use the rest parameter syntax (\u003ccode\u003e...args\u003c/code\u003e) or utilize other techniques like the spread operator to\ndeal with variable numbers of arguments in a more readable and maintainable way.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction sum(...args) {\n  return args.reduce((a,b) \u003d\u0026gt; a + b, 0);\n}\n\nsum(1, 2, 3); // Compliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003earguments\u003c/code\u003e is used in the body of the function being called.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3); // Compliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe \u003ccode\u003earguments\u003c/code\u003e\n  object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\"\u003eRest parameters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"\u003eSpread syntax\n  (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2251",
    "name": "A \"for\" loop update clause should move the counter in the right direction",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn a \u003ccode\u003efor\u003c/code\u003e loop, the update clause is responsible for modifying the loop counter variable in the appropriate direction to control the\nloopâ€™s iteration. It determines how the loop counter variable changes with each iteration of the loop. The loop counter should move in the right\ndirection to prevent infinite loops or unexpected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the loop counter is updated in the wrong direction with respect to the loop termination condition.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; strings.length; i--) { // Noncompliant: The counter \u0027i\u0027 is decremented, making the loop infinite\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eTo ensure the \u003ccode\u003efor\u003c/code\u003e loop behaves as expected, you should specify the correct update clause that moves the loop counter in the right\ndirection based on the loopâ€™s logic and desired outcome.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; strings.length; i++) {\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Infinite_loop\"\u003eInfinite loop\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn a \u003ccode\u003efor\u003c/code\u003e loop, the update clause is responsible for modifying the loop counter variable in the appropriate direction to control the\nloopâ€™s iteration. It determines how the loop counter variable changes with each iteration of the loop. The loop counter should move in the right\ndirection to prevent infinite loops or unexpected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the loop counter is updated in the wrong direction with respect to the loop termination condition.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; strings.length; i--) { // Noncompliant: The counter \u0027i\u0027 is decremented, making the loop infinite\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eTo ensure the \u003ccode\u003efor\u003c/code\u003e loop behaves as expected, you should specify the correct update clause that moves the loop counter in the right\ndirection based on the loopâ€™s logic and desired outcome.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfor (let i \u003d 0; i \u0026lt; strings.length; i++) {\n  //...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Infinite_loop\"\u003eInfinite loop\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4790",
    "name": "Using weak hashing algorithms is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCryptographic hash algorithms such as \u003ccode\u003eMD2\u003c/code\u003e, \u003ccode\u003eMD4\u003c/code\u003e, \u003ccode\u003eMD5\u003c/code\u003e, \u003ccode\u003eMD6\u003c/code\u003e, \u003ccode\u003eHAVAL-128\u003c/code\u003e,\n\u003ccode\u003eHMAC-MD5\u003c/code\u003e, \u003ccode\u003eDSA\u003c/code\u003e (which uses \u003ccode\u003eSHA-1\u003c/code\u003e), \u003ccode\u003eRIPEMD\u003c/code\u003e, \u003ccode\u003eRIPEMD-128\u003c/code\u003e, \u003ccode\u003eRIPEMD-160\u003c/code\u003e,\n\u003ccode\u003eHMACRIPEMD160\u003c/code\u003e and \u003ccode\u003eSHA-1\u003c/code\u003e are no longer considered secure, because it is possible to have \u003ccode\u003ecollisions\u003c/code\u003e (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe hashed value is used in a security context like:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e User-password storage. \u003c/li\u003e\n  \u003cli\u003e Security token generation (used to confirm e-mail when registering on a website, reset password, etc â€¦â€‹). \u003c/li\u003e\n  \u003cli\u003e To compute some message integrity. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst crypto \u003d require(\"crypto\");\n\nconst hash \u003d crypto.createHash(\u0027sha1\u0027); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eSafer alternatives, such as \u003ccode\u003eSHA-256\u003c/code\u003e, \u003ccode\u003eSHA-512\u003c/code\u003e, \u003ccode\u003eSHA-3\u003c/code\u003e are recommended, and for password hashing, itâ€™s even\nbetter to use algorithms that do not compute too \"quickly\", like \u003ccode\u003ebcrypt\u003c/code\u003e, \u003ccode\u003escrypt\u003c/code\u003e, \u003ccode\u003eargon2\u003c/code\u003e or \u003ccode\u003epbkdf2\u003c/code\u003e\nbecause it slows down \u003ccode\u003ebrute force attacks\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nconst crypto \u003d require(\"crypto\");\n\nconst hash \u003d crypto.createHash(\u0027sha512\u0027); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard\u003c/a\u003e - Cryptography Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eOWASP Mobile Top 10 2016 Category M5\u003c/a\u003e -\n  Insufficient Cryptography \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1240\"\u003eMITRE, CWE-1240\u003c/a\u003e - Use of a Risky Cryptographic Primitive \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6859",
    "name": "Imports should not use absolute paths",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn Node.js, itâ€™s possible to import modules by specifying an absolute path, such as \u003ccode\u003e/lib/foo/bar.js\u003c/code\u003e. However, this approach can limit\nthe portability of your code, as it becomes tied to your computerâ€™s file system. This could potentially lead to problems when the code is distributed,\nfor instance, via NPM packages. Therefore, itâ€™s advisable to use relative paths or module names for importing modules to enhance the portability and\ncompatibility of your code across different systems.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplace the absolute path with one that is relative to your current file.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { foo } from \u0027/home/project/api/bar.js\u0027;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { foo } from \u0027../api/bar.js\u0027;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js docs - \u003ca href\u003d\"https://nodejs.org/api/esm.html\"\u003eECMAScript modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Node.js, itâ€™s possible to import modules by specifying an absolute path, such as \u003ccode\u003e/lib/foo/bar.js\u003c/code\u003e. However, this approach can limit\nthe portability of your code, as it becomes tied to your computerâ€™s file system. This could potentially lead to problems when the code is distributed,\nfor instance, via NPM packages. Therefore, itâ€™s advisable to use relative paths or module names for importing modules to enhance the portability and\ncompatibility of your code across different systems.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplace the absolute path with one that is relative to your current file.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { foo } from \u0027/home/project/api/bar.js\u0027;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { foo } from \u0027../api/bar.js\u0027;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003eimport\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js docs - \u003ca href\u003d\"https://nodejs.org/api/esm.html\"\u003eECMAScript modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "paths",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5527",
    "name": "Server hostnames should be verified during SSL/TLS connections",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows attackers to impersonate a trusted host.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.\u003c/p\u003e\n\u003cp\u003eWhen hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003cp\u003eTo do so, an attacker would obtain a valid certificate authenticating \u003ccode\u003eexample.com\u003c/code\u003e, serve it using a different hostname, and the\napplication code would still accept it.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bankâ€™s server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of disabled hostname validation.\u003c/p\u003e\n\u003cp\u003eThe hostname validation gets disabled by overriding \u003ccode\u003echeckServerIdentity\u003c/code\u003e with an empty implementation. It is highly recommended to use\nthe original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  checkServerIdentity: function() {}, // Noncompliant\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  checkServerIdentity: function() {}, // Noncompliant\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eTo fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.\u003c/p\u003e\n\u003ch4\u003eUse valid certificates\u003c/h4\u003e\n\u003cp\u003eIf a hostname validation failure prevents connecting to the target server, keep in mind that \u003cstrong\u003eone systemâ€™s code should not work around\nanother systemâ€™s problems\u003c/strong\u003e, as this creates unnecessary dependencies and can lead to reliability issues.\u003c/p\u003e\n\u003cp\u003eTherefore, the first solution is to change the remote hostâ€™s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.\u003c/p\u003e\n\u003cp\u003eIn case the contacted host is located on a development machine, and if there is no other choice, try following this solution:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Create a self-signed certificate for that machine. \u003c/li\u003e\n  \u003cli\u003e Add this self-signed certificate to the systemâ€™s trust store. \u003c/li\u003e\n  \u003cli\u003e If the hostname is not \u003ccode\u003elocalhost\u003c/code\u003e, add the hostname in the \u003ccode\u003e/etc/hosts\u003c/code\u003e file. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec Verification\n  Standard\u003c/a\u003e - Network Communication Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eOWASP Mobile Top 10 2016 Category M3\u003c/a\u003e - Insecure\n  Communication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/297\"\u003eMITRE, CWE-297\u003c/a\u003e - Improper Validation of Certificate with Host Mismatch \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows attackers to impersonate a trusted host.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.\u003c/p\u003e\n\u003cp\u003eWhen hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003cp\u003eTo do so, an attacker would obtain a valid certificate authenticating \u003ccode\u003eexample.com\u003c/code\u003e, serve it using a different hostname, and the\napplication code would still accept it.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bankâ€™s server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of disabled hostname validation.\u003c/p\u003e\n\u003cp\u003eThe hostname validation gets disabled by overriding \u003ccode\u003echeckServerIdentity\u003c/code\u003e with an empty implementation. It is highly recommended to use\nthe original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  checkServerIdentity: function() {}, // Noncompliant\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  checkServerIdentity: function() {}, // Noncompliant\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\n\nlet options \u003d {\n  hostname: \u0027www.example.com\u0027,\n  port: 443,\n  path: \u0027/\u0027,\n  method: \u0027GET\u0027,\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req \u003d https.request(options, (res) \u003d\u0026gt; {\n  res.on(\u0027data\u0027, (d) \u003d\u0026gt; {\n    process.stdout.write(d);\n  });\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst tls \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; {\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eTo fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.\u003c/p\u003e\n\u003ch4\u003eUse valid certificates\u003c/h4\u003e\n\u003cp\u003eIf a hostname validation failure prevents connecting to the target server, keep in mind that \u003cstrong\u003eone systemâ€™s code should not work around\nanother systemâ€™s problems\u003c/strong\u003e, as this creates unnecessary dependencies and can lead to reliability issues.\u003c/p\u003e\n\u003cp\u003eTherefore, the first solution is to change the remote hostâ€™s certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.\u003c/p\u003e\n\u003cp\u003eIn case the contacted host is located on a development machine, and if there is no other choice, try following this solution:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Create a self-signed certificate for that machine. \u003c/li\u003e\n  \u003cli\u003e Add this self-signed certificate to the systemâ€™s trust store. \u003c/li\u003e\n  \u003cli\u003e If the hostname is not \u003ccode\u003elocalhost\u003c/code\u003e, add the hostname in the \u003ccode\u003e/etc/hosts\u003c/code\u003e file. \u003c/li\u003e\n\u003c/ul\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec Verification\n  Standard\u003c/a\u003e - Network Communication Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eOWASP Mobile Top 10 2016 Category M3\u003c/a\u003e - Insecure\n  Communication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/297\"\u003eMITRE, CWE-297\u003c/a\u003e - Improper Validation of Certificate with Host Mismatch \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy",
      "ssl"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6853",
    "name": "Label elements should have a text label and an associated control",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eA \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e element should wrap a control element or have an \u003ccode\u003e\u0026lt;htmlFor\u0026gt;\u003c/code\u003e attribute referencing a control and text\ncontent.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a label element lacks a text label or an associated control, it can lead to several issues:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003cstrong\u003ePoor Accessibility\u003c/strong\u003e: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eConfusing User Interface\u003c/strong\u003e: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eCode Maintainability\u003c/strong\u003e: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eControl elements are: * \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;meter\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;output\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;progress\u0026gt;\u003c/code\u003e *\n\u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCustom components may contain control elements, therefore label elements containing custom elements do not raise issues.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you have a pair of control and \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e elements, make sure that the \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e wraps the control element. If\nyou lack a control element, add one.\u003c/p\u003e\n\u003cp\u003eIt is strongly recommended to avoid using generated \u003ccode\u003eid\u003c/code\u003es since they must be deterministic.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;input type\u003d\"text\" /\u0026gt;\n\u0026lt;label\u0026gt;Favorite food\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;label\u0026gt;\n  \u0026lt;input type\u003d\"text\" /\u0026gt;\n  Favorite food\n\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;label\u0026gt;Favorite food\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;label\u0026gt;\n  \u0026lt;MyCustomInput /\u0026gt;\n  Favorite food\n\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"\u003eThe Label element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\"\u003eInfo and Relationships\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\"\u003eLabels or Instructions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e element should wrap a control element or have an \u003ccode\u003e\u0026lt;htmlFor\u0026gt;\u003c/code\u003e attribute referencing a control and text\ncontent.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a label element lacks a text label or an associated control, it can lead to several issues:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003cstrong\u003ePoor Accessibility\u003c/strong\u003e: Screen readers rely on correctly associated labels to describe the function of the form control. If the\n  label is not properly associated with a control, it can make the form difficult or impossible for visually impaired users to understand or interact\n  with. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eConfusing User Interface\u003c/strong\u003e: Labels provide users with clear instructions about what information is required in a form control.\n  Without a properly associated label, users might not understand what input is expected, leading to confusion and potential misuse of the form. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eCode Maintainability\u003c/strong\u003e: Properly structured and labeled code is easier to read, understand, and maintain. When labels are not\n  correctly associated, it can make the code more difficult to navigate and debug, especially for new developers or those unfamiliar with the\n  codebase. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eControl elements are: * \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;meter\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;output\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;progress\u0026gt;\u003c/code\u003e *\n\u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e * \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCustom components may contain control elements, therefore label elements containing custom elements do not raise issues.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you have a pair of control and \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e elements, make sure that the \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e wraps the control element. If\nyou lack a control element, add one.\u003c/p\u003e\n\u003cp\u003eIt is strongly recommended to avoid using generated \u003ccode\u003eid\u003c/code\u003es since they must be deterministic.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;input type\u003d\"text\" /\u0026gt;\n\u0026lt;label\u0026gt;Favorite food\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;label\u0026gt;\n  \u0026lt;input type\u003d\"text\" /\u0026gt;\n  Favorite food\n\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;label\u0026gt;Favorite food\u0026lt;/label\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;label\u0026gt;\n  \u0026lt;MyCustomInput /\u0026gt;\n  Favorite food\n\u0026lt;/label\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"\u003eThe Label element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships\"\u003eInfo and Relationships\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions\"\u003eLabels or Instructions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6852",
    "name": "Elements with an interactive role should support focus",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eInteractive elements being focusable is vital for website accessibility. It enables users, including those using assistive technologies, to\ninteract effectively with the website. Without this, some users may be unable to access certain features, leading to a poor user experience and\npotential non-compliance with accessibility standards.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eLack of focusability can hinder navigation and interaction with the website, resulting in an exclusionary user experience and possible violation of\naccessibility guidelines.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure that all interactive elements on your website can receive focus. This can be achieved by using standard HTML interactive elements, or by\nassigning a \u003ccode\u003etabindex\u003c/code\u003e attribute of \"0\" to custom interactive components.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;!-- Element with mouse/keyboard handler has no tabindex --\u0026gt;\n\u0026lt;span onclick\u003d\"submitForm();\" role\u003d\"button\"\u0026gt;Submit\u0026lt;/span\u0026gt;\n\n\u0026lt;!-- Anchor element without href is not focusable --\u0026gt;\n\u0026lt;a onclick\u003d\"showNextPage();\" role\u003d\"button\"\u0026gt;Next page\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;!-- Element with mouse handler has tabIndex --\u0026gt;\n\u0026lt;span onClick\u003d\"doSomething();\" tabIndex\u003d\"0\" role\u003d\"button\"\u0026gt;Submit\u0026lt;/span\u0026gt;\n\n\u0026lt;!-- Focusable anchor with mouse handler --\u0026gt;\n\u0026lt;a href\u003d\"javascript:void(0);\" onClick\u003d\"doSomething();\"\u0026gt; Next page \u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H4.html\"\u003eCreating a logical tab order through links, form controls, and objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav\"\u003eFundamental Keyboard Navigation Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role#accessibility_concerns\"\u003eARIA: button role -\n  Accessibility concerns\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eInteractive elements being focusable is vital for website accessibility. It enables users, including those using assistive technologies, to\ninteract effectively with the website. Without this, some users may be unable to access certain features, leading to a poor user experience and\npotential non-compliance with accessibility standards.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLack of focusability can hinder navigation and interaction with the website, resulting in an exclusionary user experience and possible violation of\naccessibility guidelines.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure that all interactive elements on your website can receive focus. This can be achieved by using standard HTML interactive elements, or by\nassigning a \u003ccode\u003etabindex\u003c/code\u003e attribute of \"0\" to custom interactive components.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;!-- Element with mouse/keyboard handler has no tabindex --\u0026gt;\n\u0026lt;span onclick\u003d\"submitForm();\" role\u003d\"button\"\u0026gt;Submit\u0026lt;/span\u0026gt;\n\n\u0026lt;!-- Anchor element without href is not focusable --\u0026gt;\n\u0026lt;a onclick\u003d\"showNextPage();\" role\u003d\"button\"\u0026gt;Next page\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;!-- Element with mouse handler has tabIndex --\u0026gt;\n\u0026lt;span onClick\u003d\"doSomething();\" tabIndex\u003d\"0\" role\u003d\"button\"\u0026gt;Submit\u0026lt;/span\u0026gt;\n\n\u0026lt;!-- Focusable anchor with mouse handler --\u0026gt;\n\u0026lt;a href\u003d\"javascript:void(0);\" onClick\u003d\"doSomething();\"\u0026gt; Next page \u0026lt;/a\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H4.html\"\u003eCreating a logical tab order through links, form controls, and objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav\"\u003eFundamental Keyboard Navigation Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role#accessibility_concerns\"\u003eARIA: button role -\n  Accessibility concerns\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2255",
    "name": "Writing cookies is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eUsing cookies is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-11639\"\u003eCVE-2018-11639\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2016-6537\"\u003eCVE-2016-6537\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAttackers can use widely-available tools to read cookies. Any sensitive information they may contain will be exposed.\u003c/p\u003e\n\u003cp\u003eThis rule flags code that writes cookies.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e sensitive information is stored inside the cookie. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are at risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Built-in NodeJS modules \u003d\u003d\u003d\nconst http \u003d require(\u0027http\u0027);\nconst https \u003d require(\u0027https\u0027);\n\nhttp.createServer(function(req, res) {\n  res.setHeader(\u0027Set-Cookie\u0027, [\u0027type\u003dninja\u0027, \u0027lang\u003djs\u0027]); // Sensitive\n});\nhttps.createServer(function(req, res) {\n  res.setHeader(\u0027Set-Cookie\u0027, [\u0027type\u003dninja\u0027, \u0027lang\u003djs\u0027]); // Sensitive\n});\n\u003c/pre\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d ExpressJS \u003d\u003d\u003d\nconst express \u003d require(\u0027express\u0027);\nconst app \u003d express();\napp.use(function(req, res, next) {\n  res.cookie(\u0027name\u0027, \u0027John\u0027); // Sensitive\n});\n\u003c/pre\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d In browser \u003d\u003d\u003d\n// Set cookie\ndocument.cookie \u003d \"name\u003dJohn\"; // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eCookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the\nuser session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer\nthan the user session.\u003c/p\u003e\n\u003cp\u003eDo not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the\noriginal information will be exposed.\u003c/p\u003e\n\u003cp\u003eUsing cookies only for session IDs doesnâ€™t make them secure. Follow \u003ca\nhref\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#cookies\"\u003eOWASP best practices\u003c/a\u003e when you configure your\ncookies.\u003c/p\u003e\n\u003cp\u003eAs a side note, every information read from a cookie should be \u003ca\nhref\u003d\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\"\u003eSanitized\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/312\"\u003eMITRE, CWE-312\u003c/a\u003e - Cleartext Storage of Sensitive Information \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/315\"\u003eMITRE, CWE-315\u003c/a\u003e - Cleartext Storage of Sensitive Information in a Cookie \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE\"\u003eCOOKIE_USAGE\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S2376",
    "name": "Property getters and setters should come in pairs",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.\u003c/p\u003e\n\u003cp\u003eThis rule also enforces the reverse situation (getter but no setter).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    set foo(value) {\n        this.fooval \u003d value;\n    }\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    set foo(value) {\n        this.fooval \u003d value;\n    },\n    get foo() {\n        return this.fooval;\n    }\n};\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    setFoo(value) {    // a standard method, not a setter\n        this.fooval \u003d value;\n    }\n};\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.\u003c/p\u003e\n\u003cp\u003eThis rule also enforces the reverse situation (getter but no setter).\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    set foo(value) {\n        this.fooval \u003d value;\n    }\n};\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    set foo(value) {\n        this.fooval \u003d value;\n    },\n    get foo() {\n        return this.fooval;\n    }\n};\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nvar obj \u003d {\n    setFoo(value) {    // a standard method, not a setter\n        this.fooval \u003d value;\n    }\n};\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "getWithoutSet": {
        "key": "getWithoutSet",
        "name": "getWithoutSet",
        "description": "Reports on getters without setters.",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "getWithoutSet": "false"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6851",
    "name": "Images should have a non-redundant alternate description",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ealt\u003c/code\u003e attributes, also known as \"alt tags\" or \"alt descriptions,\" are used to specify alternative text that is rendered when an image\ncannot be displayed. They are crucial for improving web accessibility, as they provide a text description of images for users who rely on screen\nreaders.\u003c/p\u003e\n\u003cp\u003eScreen readers announce the presence of an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e element and read its \u003ccode\u003ealt\u003c/code\u003e attribute aloud to describe the image. If\nthe \u003ccode\u003ealt\u003c/code\u003e attribute includes words like \"image\", \"picture\", or \"photo\", it leads to redundancy as the screen reader would repeat \"image\".\nFor instance, an \u003ccode\u003ealt\u003c/code\u003e attribute like \"image of a sunrise\" would be read as \"Image, image of a sunrise\", unnecessarily repeating\n\"image\".\u003c/p\u003e\n\u003cp\u003eInstead, the \u003ccode\u003ealt\u003c/code\u003e attribute should focus on describing the content of the image, not the fact that it is an image. This makes the\nbrowsing experience more efficient and enjoyable for users of screen readers, as they receive a concise and meaningful description of the image\nwithout unnecessary repetition.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, you should revise the \u003ccode\u003ealt\u003c/code\u003e attribute of your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements to remove any instances of the words\n\"image\", \"picture\", or \"photo\". Instead, provide a concise and accurate description of the image content that adds value for users who cannot see the\nimage.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyImage() {\n    return \u0026lt;img src\u003d\"sunrise.jpg\" alt\u003d\"image of a sunrise\" /\u0026gt;; // Noncompliant: \"Image, image of a sunrise\"\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyImage() {\n    return \u0026lt;img src\u003d\"sunrise.jpg\" alt\u003d\"a sunrise over a mountain range\" /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"\u003eimg element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt\"\u003ealt property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WebAIM - \u003ca href\u003d\"https://webaim.org/techniques/alttext/\"\u003eAlternative Text\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003ealt\u003c/code\u003e attributes, also known as \"alt tags\" or \"alt descriptions,\" are used to specify alternative text that is rendered when an image\ncannot be displayed. They are crucial for improving web accessibility, as they provide a text description of images for users who rely on screen\nreaders.\u003c/p\u003e\n\u003cp\u003eScreen readers announce the presence of an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e element and read its \u003ccode\u003ealt\u003c/code\u003e attribute aloud to describe the image. If\nthe \u003ccode\u003ealt\u003c/code\u003e attribute includes words like \"image\", \"picture\", or \"photo\", it leads to redundancy as the screen reader would repeat \"image\".\nFor instance, an \u003ccode\u003ealt\u003c/code\u003e attribute like \"image of a sunrise\" would be read as \"Image, image of a sunrise\", unnecessarily repeating\n\"image\".\u003c/p\u003e\n\u003cp\u003eInstead, the \u003ccode\u003ealt\u003c/code\u003e attribute should focus on describing the content of the image, not the fact that it is an image. This makes the\nbrowsing experience more efficient and enjoyable for users of screen readers, as they receive a concise and meaningful description of the image\nwithout unnecessary repetition.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, you should revise the \u003ccode\u003ealt\u003c/code\u003e attribute of your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e elements to remove any instances of the words\n\"image\", \"picture\", or \"photo\". Instead, provide a concise and accurate description of the image content that adds value for users who cannot see the\nimage.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyImage() {\n    return \u0026lt;img src\u003d\"sunrise.jpg\" alt\u003d\"image of a sunrise\" /\u0026gt;; // Noncompliant: \"Image, image of a sunrise\"\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyImage() {\n    return \u0026lt;img src\u003d\"sunrise.jpg\" alt\u003d\"a sunrise over a mountain range\" /\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"\u003eimg element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt\"\u003ealt property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WebAIM - \u003ca href\u003d\"https://webaim.org/techniques/alttext/\"\u003eAlternative Text\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6850",
    "name": "Header elements should have accessible content",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHeader elements are represented by the tags \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e through \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e, with \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e being the highest\nlevel and \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e being the lowest. These elements are used to structure the content of the page and create a hierarchical outline\nthat can be followed by users and search engines alike.\u003c/p\u003e\n\u003cp\u003eIn the context of accessibility, header elements play a crucial role. They provide a way for users, especially those using assistive technologies\nlike screen readers, to navigate through the content of a webpage. By reading out the headers, screen readers can give users an overview of the\ncontent and allow them to jump to the section theyâ€™re interested in.\u003c/p\u003e\n\u003cp\u003eIf a header element is empty, it can lead to confusion as it doesnâ€™t provide any information about the content that follows. This can make\nnavigation difficult for users relying on screen readers, resulting in a poor user experience and making the website less accessible for people with\nvisual impairments.\u003c/p\u003e\n\u003cp\u003eTherefore, to ensure your website is accessible to all users, itâ€™s important to always include meaningful content in your header elements.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDo not leave empty your header elements.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction JavaScript101() {\n    return (\n        \u0026lt;\u0026gt;\n            \u0026lt;h1\u0026gt;JavaScript Programming Guide\u0026lt;/h1\u0026gt;\n            \u0026lt;p\u0026gt;An introduction to JavaScript programming and its applications.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h2\u0026gt;JavaScript Basics\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;Understanding the basic concepts in JavaScript programming.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Variables\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Explanation of what variables are and how to declare them in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3 aria-hidden\u0026gt;Data Types\u0026lt;/h3\u0026gt; // Noncompliant\n            \u0026lt;p\u0026gt;Overview of the different data types in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3 /\u0026gt; // Noncompliant\n            \u0026lt;p\u0026gt;Understanding how to declare and use functions in JavaScript.\u0026lt;/p\u0026gt;\n        \u0026lt;/\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction JavaScript101() {\n    return (\n        \u0026lt;\u0026gt;\n            \u0026lt;h1\u0026gt;JavaScript Programming Guide\u0026lt;/h1\u0026gt;\n            \u0026lt;p\u0026gt;An introduction to JavaScript programming and its applications.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h2\u0026gt;JavaScript Basics\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;Understanding the basic concepts in JavaScript programming.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Variables\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Explanation of what variables are and how to declare them in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Data Types\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Overview of the different data types in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Functions\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Understanding how to declare and use functions in JavaScript.\u0026lt;/p\u0026gt;\n        \u0026lt;/\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"\u003eHeading elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003earia-hidden\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html\"\u003eHeadings and Labels\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHeader elements are represented by the tags \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e through \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e, with \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e being the highest\nlevel and \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e being the lowest. These elements are used to structure the content of the page and create a hierarchical outline\nthat can be followed by users and search engines alike.\u003c/p\u003e\n\u003cp\u003eIn the context of accessibility, header elements play a crucial role. They provide a way for users, especially those using assistive technologies\nlike screen readers, to navigate through the content of a webpage. By reading out the headers, screen readers can give users an overview of the\ncontent and allow them to jump to the section theyâ€™re interested in.\u003c/p\u003e\n\u003cp\u003eIf a header element is empty, it can lead to confusion as it doesnâ€™t provide any information about the content that follows. This can make\nnavigation difficult for users relying on screen readers, resulting in a poor user experience and making the website less accessible for people with\nvisual impairments.\u003c/p\u003e\n\u003cp\u003eTherefore, to ensure your website is accessible to all users, itâ€™s important to always include meaningful content in your header elements.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDo not leave empty your header elements.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction JavaScript101() {\n    return (\n        \u0026lt;\u0026gt;\n            \u0026lt;h1\u0026gt;JavaScript Programming Guide\u0026lt;/h1\u0026gt;\n            \u0026lt;p\u0026gt;An introduction to JavaScript programming and its applications.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h2\u0026gt;JavaScript Basics\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;Understanding the basic concepts in JavaScript programming.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Variables\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Explanation of what variables are and how to declare them in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3 aria-hidden\u0026gt;Data Types\u0026lt;/h3\u0026gt; // Noncompliant\n            \u0026lt;p\u0026gt;Overview of the different data types in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3 /\u0026gt; // Noncompliant\n            \u0026lt;p\u0026gt;Understanding how to declare and use functions in JavaScript.\u0026lt;/p\u0026gt;\n        \u0026lt;/\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction JavaScript101() {\n    return (\n        \u0026lt;\u0026gt;\n            \u0026lt;h1\u0026gt;JavaScript Programming Guide\u0026lt;/h1\u0026gt;\n            \u0026lt;p\u0026gt;An introduction to JavaScript programming and its applications.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h2\u0026gt;JavaScript Basics\u0026lt;/h2\u0026gt;\n            \u0026lt;p\u0026gt;Understanding the basic concepts in JavaScript programming.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Variables\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Explanation of what variables are and how to declare them in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Data Types\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Overview of the different data types in JavaScript.\u0026lt;/p\u0026gt;\n\n            \u0026lt;h3\u0026gt;Functions\u0026lt;/h3\u0026gt;\n            \u0026lt;p\u0026gt;Understanding how to declare and use functions in JavaScript.\u0026lt;/p\u0026gt;\n        \u0026lt;/\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements\"\u003eHeading elements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003earia-hidden\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html\"\u003eHeadings and Labels\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6855",
    "name": "Media elements should have captions",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCaptions in HTML media elements are text versions of the audio content, synchronized with the video. They are essential for individuals who are\ndeaf or hard of hearing, as they provide a text alternative for the audio information. They can also be beneficial for individuals who are not native\nspeakers of the language of the video, or for situations where the audio cannot be heard.\u003c/p\u003e\n\u003cp\u003eIn the context of accessibility, providing captions for media elements is a requirement under the Web Content Accessibility Guidelines (WCAG).\nWithout captions, you are excluding a portion of your audience who rely on them to understand the content of your media.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf captions are missing from your media elements, you can fix this by adding a \u003ccode\u003e\u0026lt;track\u0026gt;\u003c/code\u003e element with the\n\u003ccode\u003ekind\u003d\"captions\"\u003c/code\u003e attribute inside your \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element. However, for video elements that\nhave the \u003ccode\u003emuted\u003c/code\u003e attribute, captions are not required.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;audio {...props} /\u0026gt;; // Noncompliant\n\u0026lt;video {...props} /\u0026gt;; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;audio\u0026gt;\u0026lt;track kind\u003d\"captions\" {...props} /\u0026gt;\u0026lt;/audio\u0026gt;\n\u0026lt;video\u0026gt;\u0026lt;track kind\u003d\"captions\" {...props} /\u0026gt;\u0026lt;/video\u0026gt;\n\u0026lt;video muted {...props} \u0026gt;\u0026lt;/video\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\u003eaudio element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\u003evideo element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"\u003etrack element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/captions-prerecorded.html\"\u003eCaptions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/audio-description-or-media-alternative-prerecorded.html\"\u003eAudio Description or Media\n  Alternative\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCaptions in HTML media elements are text versions of the audio content, synchronized with the video. They are essential for individuals who are\ndeaf or hard of hearing, as they provide a text alternative for the audio information. They can also be beneficial for individuals who are not native\nspeakers of the language of the video, or for situations where the audio cannot be heard.\u003c/p\u003e\n\u003cp\u003eIn the context of accessibility, providing captions for media elements is a requirement under the Web Content Accessibility Guidelines (WCAG).\nWithout captions, you are excluding a portion of your audience who rely on them to understand the content of your media.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf captions are missing from your media elements, you can fix this by adding a \u003ccode\u003e\u0026lt;track\u0026gt;\u003c/code\u003e element with the\n\u003ccode\u003ekind\u003d\"captions\"\u003c/code\u003e attribute inside your \u003ccode\u003e\u0026lt;audio\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element. However, for video elements that\nhave the \u003ccode\u003emuted\u003c/code\u003e attribute, captions are not required.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;audio {...props} /\u0026gt;; // Noncompliant\n\u0026lt;video {...props} /\u0026gt;; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;audio\u0026gt;\u0026lt;track kind\u003d\"captions\" {...props} /\u0026gt;\u0026lt;/audio\u0026gt;\n\u0026lt;video\u0026gt;\u0026lt;track kind\u003d\"captions\" {...props} /\u0026gt;\u0026lt;/video\u0026gt;\n\u0026lt;video muted {...props} \u0026gt;\u0026lt;/video\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\u003eaudio element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\u003evideo element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"\u003etrack element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/captions-prerecorded.html\"\u003eCaptions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/audio-description-or-media-alternative-prerecorded.html\"\u003eAudio Description or Media\n  Alternative\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2259",
    "name": "Properties of variables with \"null\" or \"undefined\" values should not be accessed",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e are primitive values that do not have properties or methods. When accessing a property\non a \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e value, JavaScript tries to access the property of an object that does not exist, which results in a\n\u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis can cause the program to crash or behave unexpectedly, which can be difficult to debug.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo.bar); // Noncompliant: TypeError will be thrown\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe simplest solution is to check in a \u003ccode\u003eif\u003c/code\u003e condition the equality to \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. With the \u003ca\nhref\u003d\"https://262.ecma-international.org/6.0/#sec-abstract-equality-comparison\"\u003eabstract equality operator\u003c/a\u003e it is not required to check both, as\nthese operators consider \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e to be equals.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo;\nif (foo !\u003d null) {\n  console.log(foo.bar);\n}\n\u003c/pre\u003e\n\u003cp\u003eAlso, the logical AND operator (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) can be used to check if a variable is truthy before attempting to access its properties.\nThe expression will short-circuit and return the falsy value instead of attempting to access its properties.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo \u0026amp;\u0026amp; foo.bar);\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, use the optional chaining operator (\u003ccode\u003e?.\u003c/code\u003e) to check if the variable is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e before\nattempting to access its property. This operator is more readable and concise, especially when dealing with nested properties.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo?.bar);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null\"\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"\u003e\u003ccode\u003eTypeError\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\"\u003eTypeError: \"x\" has no\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\n  (\u003ccode\u003e?.\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"\u003eLogical AND\n  (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e are primitive values that do not have properties or methods. When accessing a property\non a \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e value, JavaScript tries to access the property of an object that does not exist, which results in a\n\u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis can cause the program to crash or behave unexpectedly, which can be difficult to debug.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo.bar); // Noncompliant: TypeError will be thrown\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe simplest solution is to check in a \u003ccode\u003eif\u003c/code\u003e condition the equality to \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. With the \u003ca\nhref\u003d\"https://262.ecma-international.org/6.0/#sec-abstract-equality-comparison\"\u003eabstract equality operator\u003c/a\u003e it is not required to check both, as\nthese operators consider \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e to be equals.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo;\nif (foo !\u003d null) {\n  console.log(foo.bar);\n}\n\u003c/pre\u003e\n\u003cp\u003eAlso, the logical AND operator (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) can be used to check if a variable is truthy before attempting to access its properties.\nThe expression will short-circuit and return the falsy value instead of attempting to access its properties.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo \u0026amp;\u0026amp; foo.bar);\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, use the optional chaining operator (\u003ccode\u003e?.\u003c/code\u003e) to check if the variable is \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e before\nattempting to access its property. This operator is more readable and concise, especially when dealing with nested properties.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet foo \u003d null;\nconsole.log(foo?.bar);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null\"\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"\u003e\u003ccode\u003eTypeError\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/No_properties\"\u003eTypeError: \"x\" has no\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\"\u003eOptional chaining\n  (\u003ccode\u003e?.\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\"\u003eLogical AND\n  (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2138",
    "name": "\"undefined\" should not be assigned",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eundefined\u003c/code\u003e is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n\u003ccode\u003enull\u003c/code\u003e should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar myObject \u003d {};\n\n// ...\nmyObject.fname \u003d undefined;  // Noncompliant\n// ...\n\nif (myObject.lname \u003d\u003d undefined) {\n  // property not yet created\n}\nif (myObject.fname \u003d\u003d undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar myObject \u003d {};\n\n// ...\nmyObject.fname \u003d null;\n// ...\n\nif (myObject.lname \u003d\u003d undefined) {\n  // property not yet created\n}\nif (myObject.fname \u003d\u003d undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eundefined\u003c/code\u003e is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n\u003ccode\u003enull\u003c/code\u003e should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar myObject \u003d {};\n\n// ...\nmyObject.fname \u003d undefined;  // Noncompliant\n// ...\n\nif (myObject.lname \u003d\u003d undefined) {\n  // property not yet created\n}\nif (myObject.fname \u003d\u003d undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar myObject \u003d {};\n\n// ...\nmyObject.fname \u003d null;\n// ...\n\nif (myObject.lname \u003d\u003d undefined) {\n  // property not yet created\n}\nif (myObject.fname \u003d\u003d undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2137",
    "name": "Special identifiers should not be bound or assigned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They form the JavaScript standard built-in\nobjects and global properties. They are available in all environments. Some examples are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Global objects: \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eFunction\u003c/code\u003e, \u003ccode\u003eError\u003c/code\u003e, â€¦â€‹ \u003c/li\u003e\n  \u003cli\u003e Global object function properties: \u003ccode\u003eeval()\u003c/code\u003e, \u003ccode\u003eisNan()\u003c/code\u003e, \u003ccode\u003eparseFloat()\u003c/code\u003e, \u003ccode\u003edecodeURI()\u003c/code\u003e, â€¦â€‹ \u003c/li\u003e\n  \u003cli\u003e Global object value properties: \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003eNaN\u003c/code\u003e, \u003ccode\u003eInfinity\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Identifiers with special meanings: \u003ccode\u003earguments\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. Whatâ€™s more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\neval \u003d 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nconst obj \u003d { set p(arguments) { } }; // Noncompliant\nlet eval; // Noncompliant\ntry { /* ... */ } catch (arguments) { } // Noncompliant\nfunction x(eval) { /* ... */ } // Noncompliant\nfunction arguments() { /* ... */ } // Noncompliant\nconst y \u003d function eval() { /* ... */ }; // Noncompliant\n\nfunction fun() {\n  if (arguments.length \u003d\u003d 0) { // Compliant\n    // do something\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nresult \u003d 17;\nargs++;\n++result;\nconst obj \u003d { set p(arg) { } };\nlet result;\ntry { /* ... */ } catch (args) { }\nfunction x(arg) { /* ... */ }\nfunction args() { /* ... */ }\nconst y \u003d function fun() { /* ... */ };\n\nfunction fun() {\n  if (arguments.length \u003d\u003d 0) {\n    // do something\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words\"\u003eReserved words\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers_with_special_meanings\"\u003eIdentifiers with special\n  meanings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\"\u003eGlobal Objects\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They form the JavaScript standard built-in\nobjects and global properties. They are available in all environments. Some examples are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Global objects: \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eFunction\u003c/code\u003e, \u003ccode\u003eError\u003c/code\u003e, â€¦â€‹ \u003c/li\u003e\n  \u003cli\u003e Global object function properties: \u003ccode\u003eeval()\u003c/code\u003e, \u003ccode\u003eisNan()\u003c/code\u003e, \u003ccode\u003eparseFloat()\u003c/code\u003e, \u003ccode\u003edecodeURI()\u003c/code\u003e, â€¦â€‹ \u003c/li\u003e\n  \u003cli\u003e Global object value properties: \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003eNaN\u003c/code\u003e, \u003ccode\u003eInfinity\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Identifiers with special meanings: \u003ccode\u003earguments\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. Whatâ€™s more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\neval \u003d 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nconst obj \u003d { set p(arguments) { } }; // Noncompliant\nlet eval; // Noncompliant\ntry { /* ... */ } catch (arguments) { } // Noncompliant\nfunction x(eval) { /* ... */ } // Noncompliant\nfunction arguments() { /* ... */ } // Noncompliant\nconst y \u003d function eval() { /* ... */ }; // Noncompliant\n\nfunction fun() {\n  if (arguments.length \u003d\u003d 0) { // Compliant\n    // do something\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nresult \u003d 17;\nargs++;\n++result;\nconst obj \u003d { set p(arg) { } };\nlet result;\ntry { /* ... */ } catch (args) { }\nfunction x(arg) { /* ... */ }\nfunction args() { /* ... */ }\nconst y \u003d function fun() { /* ... */ };\n\nfunction fun() {\n  if (arguments.length \u003d\u003d 0) {\n    // do something\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words\"\u003eReserved words\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#identifiers_with_special_meanings\"\u003eIdentifiers with special\n  meanings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\"\u003eGlobal Objects\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6854",
    "name": "iFrames must have a title",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn iframe, or inline frame, is an HTML document embedded inside another HTML document on a website. The iframe HTML element is often used to insert\ncontent from another source, such as an advertisement, into a web page.\u003c/p\u003e\n\u003cp\u003eIn the context of web accessibility, \u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e\u0027s should have a \u003ccode\u003etitle\u003c/code\u003e attribute. This is because screen readers for\nthe visually impaired use this title to help users understand the content of the iframe.\u003c/p\u003e\n\u003cp\u003eWithout a title, it can be difficult for these users to understand the context or purpose of the iframeâ€™s content.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix missing iframe titles, you simply need to add a \u003ccode\u003etitle\u003c/code\u003e attribute to your \u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e element. The value of this\nattribute should be a brief description of the iframeâ€™s content.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction iframe() {\n    return (\n        \u0026lt;iframe src\u003d\"https://openweathermap.org\"\u0026gt;\u0026lt;/iframe\u0026gt; // Noncompliant\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction iframe() {\n    return (\n        \u0026lt;iframe src\u003d\"https://openweathermap.org\" title\u003d\"Weather forecasts, nowcasts and history\"\u0026gt;\u0026lt;/iframe\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eiframe element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/bypass-blocks\"\u003eBypass Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn iframe, or inline frame, is an HTML document embedded inside another HTML document on a website. The iframe HTML element is often used to insert\ncontent from another source, such as an advertisement, into a web page.\u003c/p\u003e\n\u003cp\u003eIn the context of web accessibility, \u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e\u0027s should have a \u003ccode\u003etitle\u003c/code\u003e attribute. This is because screen readers for\nthe visually impaired use this title to help users understand the content of the iframe.\u003c/p\u003e\n\u003cp\u003eWithout a title, it can be difficult for these users to understand the context or purpose of the iframeâ€™s content.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix missing iframe titles, you simply need to add a \u003ccode\u003etitle\u003c/code\u003e attribute to your \u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e element. The value of this\nattribute should be a brief description of the iframeâ€™s content.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction iframe() {\n    return (\n        \u0026lt;iframe src\u003d\"https://openweathermap.org\"\u0026gt;\u0026lt;/iframe\u0026gt; // Noncompliant\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction iframe() {\n    return (\n        \u0026lt;iframe src\u003d\"https://openweathermap.org\" title\u003d\"Weather forecasts, nowcasts and history\"\u0026gt;\u0026lt;/iframe\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\u003eiframe element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/bypass-blocks\"\u003eBypass Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6849",
    "name": "HTML elements should have a valid language attribute",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eHTML documents should have a valid IETFâ€™s BCP 47 \u003ccode\u003elang\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScreen readers require a specified language to function correctly. Without it, they default to the userâ€™s set language, causing issues for\nmultilingual users. Specifying a valid language ensures correct pronunciation and a less confusing experience.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eAdd a \u003ccode\u003elang\u003c/code\u003e attribute with a valid IETF BCP 47 value.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;html lang\u003d\"en\"\u0026gt;\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C, \u003ca href\u003d\"https://www.w3.org/International/articles/language-tags/\"\u003eLanguage tags in HTML and XML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eHTML documents should have a valid IETFâ€™s BCP 47 \u003ccode\u003elang\u003c/code\u003e attribute.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eScreen readers require a specified language to function correctly. Without it, they default to the userâ€™s set language, causing issues for\nmultilingual users. Specifying a valid language ensures correct pronunciation and a less confusing experience.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAdd a \u003ccode\u003elang\u003c/code\u003e attribute with a valid IETF BCP 47 value.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;html lang\u003d\"en\"\u0026gt;\u0026lt;/html\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C, \u003ca href\u003d\"https://www.w3.org/International/articles/language-tags/\"\u003eLanguage tags in HTML and XML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6848",
    "name": "Non-interactive DOM elements should not have an interactive handler",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNon-interactive DOM elements are HTML elements that are not designed to be interacted with by the user, for instance \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e, etc. They are typically used to structure content and do not have built-in interactivity\nor keyboard accessibility.\u003c/p\u003e\n\u003cp\u003eInteractive handlers, on the other hand, are event handlers that respond to user interactions. These include handlers like \u003ccode\u003eonClick\u003c/code\u003e,\n\u003ccode\u003eonKeyDown\u003c/code\u003e, \u003ccode\u003eonMouseUp\u003c/code\u003e, and more. When these handlers are added to an HTML element, they make the element respond to the\nspecified user interaction.\u003c/p\u003e\n\u003cp\u003eWhen non-interactive elements have interactive handlers, it can lead to several problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Unexpected behavior: Non-interactive elements are not designed to be interactive, so adding interactive handlers can cause unexpected behavior.\n  For example, non-interactive elements do not naturally receive keyboard focus, so keyboard users might not be able to activate the handler. \u003c/li\u003e\n  \u003cli\u003e Confusing for assistive technologies: Assistive technologies might not announce non-interactive elements with interactive handlers correctly.\n  This can make it difficult for users to understand how to interact with the content. \u003c/li\u003e\n  \u003cli\u003e Violation of HTML standards: Using interactive handlers on non-interactive elements can be seen as a misuse of HTML, as it goes against the\n  intended use of these elements. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy enforcing that interactive handlers are only used on interactive elements, this rule helps create a more predictable and user-friendly\nexperience for all users, and ensures that web content adheres to accessibility standards and best practices.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe simplest and most recommended way is to replace the non-interactive elements with interactive ones. If for some reason you canâ€™t replace the\nnon-interactive element, you can add an interactive \u003ccode\u003erole\u003c/code\u003e attribute to it and manually manage its keyboard event handlers and focus.\nCommon interactive roles include \u003ccode\u003ebutton\u003c/code\u003e, \u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003echeckbox\u003c/code\u003e, \u003ccode\u003emenuitem\u003c/code\u003e, \u003ccode\u003emenuitemcheckbox\u003c/code\u003e,\n\u003ccode\u003emenuitemradio\u003c/code\u003e, \u003ccode\u003eoption\u003c/code\u003e, \u003ccode\u003eradio\u003c/code\u003e, \u003ccode\u003esearchbox\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etextbox\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} /\u0026gt;; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} role\u003d\"button\" /\u0026gt;;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNon-interactive DOM elements are HTML elements that are not designed to be interacted with by the user, for instance \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;footer\u0026gt;\u003c/code\u003e, etc. They are typically used to structure content and do not have built-in interactivity\nor keyboard accessibility.\u003c/p\u003e\n\u003cp\u003eInteractive handlers, on the other hand, are event handlers that respond to user interactions. These include handlers like \u003ccode\u003eonClick\u003c/code\u003e,\n\u003ccode\u003eonKeyDown\u003c/code\u003e, \u003ccode\u003eonMouseUp\u003c/code\u003e, and more. When these handlers are added to an HTML element, they make the element respond to the\nspecified user interaction.\u003c/p\u003e\n\u003cp\u003eWhen non-interactive elements have interactive handlers, it can lead to several problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Unexpected behavior: Non-interactive elements are not designed to be interactive, so adding interactive handlers can cause unexpected behavior.\n  For example, non-interactive elements do not naturally receive keyboard focus, so keyboard users might not be able to activate the handler. \u003c/li\u003e\n  \u003cli\u003e Confusing for assistive technologies: Assistive technologies might not announce non-interactive elements with interactive handlers correctly.\n  This can make it difficult for users to understand how to interact with the content. \u003c/li\u003e\n  \u003cli\u003e Violation of HTML standards: Using interactive handlers on non-interactive elements can be seen as a misuse of HTML, as it goes against the\n  intended use of these elements. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy enforcing that interactive handlers are only used on interactive elements, this rule helps create a more predictable and user-friendly\nexperience for all users, and ensures that web content adheres to accessibility standards and best practices.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe simplest and most recommended way is to replace the non-interactive elements with interactive ones. If for some reason you canâ€™t replace the\nnon-interactive element, you can add an interactive \u003ccode\u003erole\u003c/code\u003e attribute to it and manually manage its keyboard event handlers and focus.\nCommon interactive roles include \u003ccode\u003ebutton\u003c/code\u003e, \u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003echeckbox\u003c/code\u003e, \u003ccode\u003emenuitem\u003c/code\u003e, \u003ccode\u003emenuitemcheckbox\u003c/code\u003e,\n\u003ccode\u003emenuitemradio\u003c/code\u003e, \u003ccode\u003eoption\u003c/code\u003e, \u003ccode\u003eradio\u003c/code\u003e, \u003ccode\u003esearchbox\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etextbox\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} /\u0026gt;; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; {}} role\u003d\"button\" /\u0026gt;;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5759",
    "name": "Forwarding client IP address is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsers often connect to web servers through HTTP proxies.\u003c/p\u003e\n\u003cp\u003eProxy can be configured to forward the client IP address via the \u003ccode\u003eX-Forwarded-For\u003c/code\u003e or \u003ccode\u003eForwarded\u003c/code\u003e HTTP headers.\u003c/p\u003e\n\u003cp\u003eIP address is a personal information which can identify a single user and thus impact his privacy.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The web application uses reverse proxies or similar but doesnâ€™t need to know the IP address of the user. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://github.com/http-party/node-http-proxy\"\u003enode-http-proxy\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nvar httpProxy \u003d require(\u0027http-proxy\u0027);\n\nhttpProxy.createProxyServer({target:\u0027http://localhost:9000\u0027, xfwd:true}) // Noncompliant\n  .listen(8000);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://github.com/chimurai/http-proxy-middleware\"\u003ehttp-proxy-middleware\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nvar express \u003d require(\u0027express\u0027);\n\nconst { createProxyMiddleware } \u003d require(\u0027http-proxy-middleware\u0027);\n\nconst app \u003d express();\n\napp.use(\u0027/proxy\u0027, createProxyMiddleware({ target: \u0027http://localhost:9000\u0027, changeOrigin: true, xfwd: true })); // Noncompliant\napp.listen(3000);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eUser IP address should not be forwarded unless the application needs it, as part of an authentication, authorization scheme or log management for\nexamples.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://github.com/http-party/node-http-proxy\"\u003enode-http-proxy\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nvar httpProxy \u003d require(\u0027http-proxy\u0027);\n\n// By default xfwd option is false\nhttpProxy.createProxyServer({target:\u0027http://localhost:9000\u0027}) // Compliant\n  .listen(8000);\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://github.com/chimurai/http-proxy-middleware\"\u003ehttp-proxy-middleware\u003c/a\u003e\u003c/p\u003e\n\u003cpre\u003e\nvar express \u003d require(\u0027express\u0027);\n\nconst { createProxyMiddleware } \u003d require(\u0027http-proxy-middleware\u0027);\n\nconst app \u003d express();\n\n// By default xfwd option is false\napp.use(\u0027/proxy\u0027, createProxyMiddleware({ target: \u0027http://localhost:9000\u0027, changeOrigin: true})); // Compliant\napp.listen(3000);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\"\u003eOWASP Top 10 2017 Category\n  A3\u003c/a\u003e - Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For\"\u003edeveloper.mozilla.org\u003c/a\u003e - X-Forwarded-For \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "express.js",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6847",
    "name": "Non-interactive elements shouldn\u0027t have event handlers",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003cp\u003eNon-interactive HTML elements, such as \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, are not designed to have event handlers. When these\nelements are given event handlers, it can lead to accessibility issues.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAttaching event handlers to non-interactive HTML elements can lead to significant accessibility issues. These elements, such as\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, are not designed to interact with assistive technologies like screen readers, making it\ndifficult for users with disabilities to navigate and interact with the website. Additionally, these elements may not be focusable or provide visual\nfeedback when interacted with, resulting in a confusing and potentially frustrating user experience. Therefore, to maintain an accessible and\nuser-friendly website, event handlers should be used exclusively with interactive elements.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, remove the event handler from the non-interactive element and attach it to an interactive element instead. If the element is not\ninteractive, it should not have an event handler.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;li onClick\u003d{() \u003d\u0026gt; void 0} /\u0026gt;\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"listitem\" /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"button\" /\u0026gt;\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"presentation\" /\u0026gt;\n\u0026lt;input type\u003d\"text\" onClick\u003d{() \u003d\u0026gt; void 0} /\u0026gt; // Interactive element does not require role.\n\u0026lt;button onClick\u003d{() \u003d\u0026gt; void 0} className\u003d\"foo\" /\u0026gt; // button is interactive.\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"button\" aria-hidden /\u0026gt; // This is hidden from the screenreader.\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex\"\u003eWAI-ARIA Authoring Practices Guide - Design Patterns and Widgets\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role#Keyboard_and_focus\"\u003eARIA\n  Techniques\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eNon-interactive HTML elements, such as \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, are not designed to have event handlers. When these\nelements are given event handlers, it can lead to accessibility issues.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAttaching event handlers to non-interactive HTML elements can lead to significant accessibility issues. These elements, such as\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e, are not designed to interact with assistive technologies like screen readers, making it\ndifficult for users with disabilities to navigate and interact with the website. Additionally, these elements may not be focusable or provide visual\nfeedback when interacted with, resulting in a confusing and potentially frustrating user experience. Therefore, to maintain an accessible and\nuser-friendly website, event handlers should be used exclusively with interactive elements.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, remove the event handler from the non-interactive element and attach it to an interactive element instead. If the element is not\ninteractive, it should not have an event handler.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;li onClick\u003d{() \u003d\u0026gt; void 0} /\u0026gt;\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"listitem\" /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"button\" /\u0026gt;\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"presentation\" /\u0026gt;\n\u0026lt;input type\u003d\"text\" onClick\u003d{() \u003d\u0026gt; void 0} /\u0026gt; // Interactive element does not require role.\n\u0026lt;button onClick\u003d{() \u003d\u0026gt; void 0} className\u003d\"foo\" /\u0026gt; // button is interactive.\n\u0026lt;div onClick\u003d{() \u003d\u0026gt; void 0} role\u003d\"button\" aria-hidden /\u0026gt; // This is hidden from the screenreader.\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex\"\u003eWAI-ARIA Authoring Practices Guide - Design Patterns and Widgets\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role#Keyboard_and_focus\"\u003eARIA\n  Techniques\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6842",
    "name": "Non-interactive DOM elements should not have interactive ARIA roles",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNon-interactive DOM elements are those that do not have built-in interactivity or do not require user interaction. Examples include\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e to \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e, and\n\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, among others. These elements are typically used to structure content and layout but do not have any inherent interactive\nbehavior.\u003c/p\u003e\n\u003cp\u003eInteractive ARIA roles, on the other hand, are used to make elements interactive and accessible. These roles include \u003ccode\u003ebutton\u003c/code\u003e,\n\u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003echeckbox\u003c/code\u003e, \u003ccode\u003emenuitem\u003c/code\u003e, \u003ccode\u003etab\u003c/code\u003e, and others. They are used to communicate the type of interaction\nthat users can expect from an element.\u003c/p\u003e\n\u003cp\u003eNon-interactive DOM elements should not use interactive ARIA roles because it can confuse assistive technologies and their users. For example, if a\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e (a non-interactive element) is given an interactive role like \"button\", assistive technologies like screen readers will\nannounce it as a button. However, since \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e doesnâ€™t have the inherent behavior of a button, it can confuse users who expect it to\nbehave like a button when interacted with.\u003c/p\u003e\n\u003cp\u003eThis can lead to a poor user experience and can make the website less accessible for users relying on assistive technologies. Therefore, itâ€™s\nimportant to ensure that non-interactive DOM elements are not given interactive ARIA roles.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure that non-interactive DOM elements do not use interactive ARIA roles.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myListElement() {\n    return \u0026lt;li role\u003d\"button\"\u0026gt;Foo\u0026lt;/li\u0026gt;; // Noncompliant; \"li\" isn\u0027t interactive, but \"button\" is\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myListElement() {\n    return \u0026lt;li role\u003d\"listitem\"\u0026gt;Foo\u0026lt;/li\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.1/#usage_intro\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNon-interactive DOM elements are those that do not have built-in interactivity or do not require user interaction. Examples include\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e to \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e, and\n\u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, among others. These elements are typically used to structure content and layout but do not have any inherent interactive\nbehavior.\u003c/p\u003e\n\u003cp\u003eInteractive ARIA roles, on the other hand, are used to make elements interactive and accessible. These roles include \u003ccode\u003ebutton\u003c/code\u003e,\n\u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003echeckbox\u003c/code\u003e, \u003ccode\u003emenuitem\u003c/code\u003e, \u003ccode\u003etab\u003c/code\u003e, and others. They are used to communicate the type of interaction\nthat users can expect from an element.\u003c/p\u003e\n\u003cp\u003eNon-interactive DOM elements should not use interactive ARIA roles because it can confuse assistive technologies and their users. For example, if a\n\u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e (a non-interactive element) is given an interactive role like \"button\", assistive technologies like screen readers will\nannounce it as a button. However, since \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e doesnâ€™t have the inherent behavior of a button, it can confuse users who expect it to\nbehave like a button when interacted with.\u003c/p\u003e\n\u003cp\u003eThis can lead to a poor user experience and can make the website less accessible for users relying on assistive technologies. Therefore, itâ€™s\nimportant to ensure that non-interactive DOM elements are not given interactive ARIA roles.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure that non-interactive DOM elements do not use interactive ARIA roles.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myListElement() {\n    return \u0026lt;li role\u003d\"button\"\u0026gt;Foo\u0026lt;/li\u0026gt;; // Noncompliant; \"li\" isn\u0027t interactive, but \"button\" is\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myListElement() {\n    return \u0026lt;li role\u003d\"listitem\"\u0026gt;Foo\u0026lt;/li\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.1/#usage_intro\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4784",
    "name": "Using regular expressions is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {},
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S5852} instead.\u003c/p\u003e\n\u003cp\u003eUsing regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-16021\"\u003eCVE-2017-16021\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-13863\"\u003eCVE-2018-13863\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n\u003ccode\u003e(a+)+s\u003c/code\u003e will take several seconds to evaluate the input string \u003ccode\u003eaaaaaaaaaaaaaaaaaaaaaaaaaaaaabs\u003c/code\u003e. The problem is that with\nevery additional \u003ccode\u003ea\u003c/code\u003e character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, \u003ccode\u003ea+s\u003c/code\u003e (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.\u003c/p\u003e\n\u003cp\u003eEvaluating such regular expressions opens the door to \u003ca\nhref\u003d\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003eRegular expression Denial of Service (ReDoS)\u003c/a\u003e attacks.\nIn the context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making\nthe service inaccessible to genuine users.\u003c/p\u003e\n\u003cp\u003eThis rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: \u003ccode\u003e*+{\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003e(a+)*\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eSome corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: \u003ccode\u003e(a|aa)+\u003c/code\u003e,\n\u003ccode\u003e(a|a?)+\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt is a good idea to test your regular expression if it has the same pattern on both side of a \"\u003ccode\u003e|\u003c/code\u003e\".\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. \u003c/li\u003e\n  \u003cli\u003e your regular expression engine performance decrease with specially crafted inputs and regular expressions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst regex \u003d /(a+)+b/; // Sensitive\nconst regex2 \u003d new RegExp(\"(a+)+b\"); // Sensitive\n\nstr.search(\"(a+)+b\"); // Sensitive\nstr.match(\"(a+)+b\"); // Sensitive\nstr.split(\"(a+)+b\"); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003eNote: String.matchAll does not raise any issue as it is not supported by NodeJS.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eCheck whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine youâ€™re are using.\u003c/p\u003e\n\u003cp\u003eUse if possible a library which is not vulnerable to Redos Attacks such as \u003ca href\u003d\"https://github.com/google/re2\"\u003eGoogle Re2\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eRemember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule wonâ€™t detect this kind of injection.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003eMITRE, CWE-624\u003c/a\u003e - Executable Regular\n  Expression Error \u003c/li\u003e\n  \u003cli\u003e OWASP Regular expression Denial of Service - ReDoS \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S3330",
    "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a cookie is configured with the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute set to \u003cem\u003etrue\u003c/em\u003e, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of \u003ccode\u003eHttpOnly\u003c/code\u003e is \u003cem\u003efalse\u003c/em\u003e and itâ€™s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute can help to reduce their impact as it wonâ€™t be possible to exploit the XSS\nvulnerability to steal session-cookies.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the cookie is sensitive, used to authenticate the user, for instance a \u003cem\u003esession-cookie\u003c/em\u003e \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003eHttpOnly\u003c/code\u003e attribute offer an additional protection (not the case for an \u003cem\u003eXSRF-TOKEN cookie\u003c/em\u003e / CSRF token for example)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookie-session\"\u003ecookie-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet session \u003d cookieSession({\n  httpOnly: false,// Sensitive\n});  // Sensitive\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express-session\"\u003eexpress-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027),\nconst session \u003d require(\u0027express-session\u0027),\n\nlet app \u003d express()\napp.use(session({\n  cookie:\n  {\n    httpOnly: false // Sensitive\n  }\n})),\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookies\"\u003ecookies\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet cookies \u003d new Cookies(req, res, { keys: keys });\n\ncookies.set(\u0027LastVisit\u0027, new Date().toISOString(), {\n  httpOnly: false // Sensitive\n}); // Sensitive\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003ecsurf\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst cookieParser \u003d require(\u0027cookie-parser\u0027);\nconst csrf \u003d require(\u0027csurf\u0027);\nconst express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie: { httpOnly: false }}); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e By default the \u003ccode\u003eHttpOnly\u003c/code\u003e flag should be set to \u003cem\u003etrue\u003c/em\u003e for most of the cookies and itâ€™s mandatory for session /\n  sensitive-security cookies. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookie-session\"\u003ecookie-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet session \u003d cookieSession({\n  httpOnly: true,// Compliant\n});  // Compliant\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/express-session\"\u003eexpress-session\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst session \u003d require(\u0027express-session\u0027);\n\nlet app \u003d express();\napp.use(session({\n  cookie:\n  {\n    httpOnly: true // Compliant\n  }\n}));\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/cookies\"\u003ecookies\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nlet cookies \u003d new Cookies(req, res, { keys: keys });\n\ncookies.set(\u0027LastVisit\u0027, new Date().toISOString(), {\n  httpOnly: true // Compliant\n}); // Compliant\n\u003c/pre\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003ecsurf\u003c/a\u003e module:\u003c/p\u003e\n\u003cpre\u003e\nconst cookieParser \u003d require(\u0027cookie-parser\u0027);\nconst csrf \u003d require(\u0027csurf\u0027);\nconst express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie: { httpOnly: true }}); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/HttpOnly\"\u003eOWASP HttpOnly\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eOWASP Top 10 2017 Category A7\u003c/a\u003e - Cross-Site\n  Scripting (XSS) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1004\"\u003eMITRE, CWE-1004\u003c/a\u003e - Sensitive Cookie Without \u0027HttpOnly\u0027 Flag \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\"\u003eHTTPONLY_COOKIE\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6841",
    "name": "\"tabIndex\" values should be 0 or -1",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePositive \u003ccode\u003etabIndex\u003c/code\u003e values can disrupt the natural tab order of the webpage. This can be confusing for screen reader users who rely on a\nlogical tab order to navigate through the content. If the tab order doesnâ€™t match the visual or logical order of elements, users may struggle to\nunderstand the page structure.\u003c/p\u003e\n\u003cp\u003eTherefore, itâ€™s recommended to avoid using positive \u003ccode\u003etabIndex\u003c/code\u003e values.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you need to make an element focusable that isnâ€™t by default (like a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e), you can use\n\u003ccode\u003etabIndex\u003d\"0\"\u003c/code\u003e. This will add the element to the natural tab order based on its position in the HTML. Otherwise, either remove the\n\u003ccode\u003etabIndex\u003c/code\u003e value or use \u003ccode\u003etabIndex\u003d\"-1\"\u003c/code\u003e to remove the element from the tab order.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyDiv() {\n    return (\n        \u0026lt;div\u0026gt;\n            \u0026lt;span tabIndex\u003d\"5\"\u0026gt;foo\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"3\"\u0026gt;bar\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"1\"\u0026gt;baz\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"2\"\u0026gt;qux\u0026lt;/span\u0026gt; // Noncompliant\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyDiv() {\n    return (\n        \u0026lt;div\u0026gt;\n            \u0026lt;span tabIndex\u003d\"0\"\u0026gt;foo\u0026lt;/span\u0026gt;\n            \u0026lt;span tabIndex\u003d\"-1\"\u0026gt;bar\u0026lt;/span\u0026gt;\n            \u0026lt;span tabIndex\u003d{0}\u0026gt;baz\u0026lt;/span\u0026gt;\n            \u0026lt;span\u0026gt;qux\u0026lt;/span\u0026gt;\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003etabindex\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/focus-order\"\u003eFocus Order\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePositive \u003ccode\u003etabIndex\u003c/code\u003e values can disrupt the natural tab order of the webpage. This can be confusing for screen reader users who rely on a\nlogical tab order to navigate through the content. If the tab order doesnâ€™t match the visual or logical order of elements, users may struggle to\nunderstand the page structure.\u003c/p\u003e\n\u003cp\u003eTherefore, itâ€™s recommended to avoid using positive \u003ccode\u003etabIndex\u003c/code\u003e values.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you need to make an element focusable that isnâ€™t by default (like a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e), you can use\n\u003ccode\u003etabIndex\u003d\"0\"\u003c/code\u003e. This will add the element to the natural tab order based on its position in the HTML. Otherwise, either remove the\n\u003ccode\u003etabIndex\u003c/code\u003e value or use \u003ccode\u003etabIndex\u003d\"-1\"\u003c/code\u003e to remove the element from the tab order.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyDiv() {\n    return (\n        \u0026lt;div\u0026gt;\n            \u0026lt;span tabIndex\u003d\"5\"\u0026gt;foo\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"3\"\u0026gt;bar\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"1\"\u0026gt;baz\u0026lt;/span\u0026gt; // Noncompliant\n            \u0026lt;span tabIndex\u003d\"2\"\u0026gt;qux\u0026lt;/span\u0026gt; // Noncompliant\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyDiv() {\n    return (\n        \u0026lt;div\u0026gt;\n            \u0026lt;span tabIndex\u003d\"0\"\u0026gt;foo\u0026lt;/span\u0026gt;\n            \u0026lt;span tabIndex\u003d\"-1\"\u0026gt;bar\u0026lt;/span\u0026gt;\n            \u0026lt;span tabIndex\u003d{0}\u0026gt;baz\u0026lt;/span\u0026gt;\n            \u0026lt;span\u0026gt;qux\u0026lt;/span\u0026gt;\n        \u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003etabindex\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/focus-order\"\u003eFocus Order\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6840",
    "name": "DOM elements should use the \"autocomplete\" attribute correctly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNot providing autocomplete values in form fields can lead to content inaccessibility. The function of each standard input field, which gathers a\npersonâ€™s personal data, is systematically determined according to the list of \u003ca href\u003d\"https://www.w3.org/TR/WCAG21/#input-purposes\"\u003e53 Input Purposes\nfor User Interface Components\u003c/a\u003e. If the necessary autocomplete attribute values are absent, screen readers will not be able to identify and read\nthese fields. This lack of information can hinder users, particularly those using screen readers, from properly navigating and interacting with\nforms.\u003c/p\u003e\n\u003cp\u003eFor screen readers to operate effectively, it is imperative that the autocomplete attribute values are not only valid but also correctly\napplied.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure the autocomplete attribute is correct and suitable for the form field it is used with:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Identify the input type: The autocomplete attribute should be used with form elements like \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e,\n  \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e. The type of input field should be clearly identified using the \u003ccode\u003etype\u003c/code\u003e\n  attribute, such as \u003ccode\u003etype\u003d\"text\"\u003c/code\u003e, \u003ccode\u003etype\u003d\"email\"\u003c/code\u003e, or \u003ccode\u003etype\u003d\"tel\"\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Specify the autocomplete value: The value of the autocomplete attribute should be a string that specifies what kind of input the browser should\n  autofill. For example, \u003ccode\u003eautocomplete\u003d\"name\"\u003c/code\u003e would suggest that the browser autofill the userâ€™s full name. \u003c/li\u003e\n  \u003cli\u003e Use appropriate autocomplete values: The value you use should be appropriate for the type of input. For example, for a credit card field, you\n  might use \u003ccode\u003eautocomplete\u003d\"cc-number\"\u003c/code\u003e. For a country field in an address form, you might use \u003ccode\u003eautocomplete\u003d\"country\"\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor additional details, please refer to the \u003ca\nhref\u003d\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete\"\u003eguidelines\u003c/a\u003e provided in the HTML standard.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyInput() {\n    return \u0026lt;input type\u003d\"text\" autocomplete\u003d\"foo\" /\u0026gt;; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyInput() {\n    return \u0026lt;input type\u003d\"text\" autocomplete\u003d\"name\" /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose\"\u003eIdentify Input Purpose\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/WCAG21/#input-purposes\"\u003eInput Purposes for User Interface Components\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e HTML Standard - \u003ca href\u003d\"https://html.spec.whatwg.org/multipage/forms.html#enabling-client-side-automatic-filling-of-form-controls\"\u003eEnabling\n  client-side automatic filling of form controls\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e HTML Standard - \u003ca href\u003d\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete\"\u003eAutofilling form\n  controls: the autocomplete attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNot providing autocomplete values in form fields can lead to content inaccessibility. The function of each standard input field, which gathers a\npersonâ€™s personal data, is systematically determined according to the list of \u003ca href\u003d\"https://www.w3.org/TR/WCAG21/#input-purposes\"\u003e53 Input Purposes\nfor User Interface Components\u003c/a\u003e. If the necessary autocomplete attribute values are absent, screen readers will not be able to identify and read\nthese fields. This lack of information can hinder users, particularly those using screen readers, from properly navigating and interacting with\nforms.\u003c/p\u003e\n\u003cp\u003eFor screen readers to operate effectively, it is imperative that the autocomplete attribute values are not only valid but also correctly\napplied.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure the autocomplete attribute is correct and suitable for the form field it is used with:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Identify the input type: The autocomplete attribute should be used with form elements like \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e,\n  \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;textarea\u0026gt;\u003c/code\u003e. The type of input field should be clearly identified using the \u003ccode\u003etype\u003c/code\u003e\n  attribute, such as \u003ccode\u003etype\u003d\"text\"\u003c/code\u003e, \u003ccode\u003etype\u003d\"email\"\u003c/code\u003e, or \u003ccode\u003etype\u003d\"tel\"\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Specify the autocomplete value: The value of the autocomplete attribute should be a string that specifies what kind of input the browser should\n  autofill. For example, \u003ccode\u003eautocomplete\u003d\"name\"\u003c/code\u003e would suggest that the browser autofill the userâ€™s full name. \u003c/li\u003e\n  \u003cli\u003e Use appropriate autocomplete values: The value you use should be appropriate for the type of input. For example, for a credit card field, you\n  might use \u003ccode\u003eautocomplete\u003d\"cc-number\"\u003c/code\u003e. For a country field in an address form, you might use \u003ccode\u003eautocomplete\u003d\"country\"\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor additional details, please refer to the \u003ca\nhref\u003d\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete\"\u003eguidelines\u003c/a\u003e provided in the HTML standard.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyInput() {\n    return \u0026lt;input type\u003d\"text\" autocomplete\u003d\"foo\" /\u0026gt;; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyInput() {\n    return \u0026lt;input type\u003d\"text\" autocomplete\u003d\"name\" /\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose\"\u003eIdentify Input Purpose\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/WCAG21/#input-purposes\"\u003eInput Purposes for User Interface Components\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e HTML Standard - \u003ca href\u003d\"https://html.spec.whatwg.org/multipage/forms.html#enabling-client-side-automatic-filling-of-form-controls\"\u003eEnabling\n  client-side automatic filling of form controls\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e HTML Standard - \u003ca href\u003d\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete\"\u003eAutofilling form\n  controls: the autocomplete attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2486",
    "name": "Exceptions should not be ignored",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eOWASP Top 10 2017 Category A10\u003c/a\u003e -\n  Insufficient Logging \u0026amp; Monitoring \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/390\"\u003eMITRE, CWE-390\u003c/a\u003e - Detection of Error Condition Without Action \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n  }\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction f() {\n  try {\n    doSomething();\n  } catch (err) {\n    console.log(`Exception while doing something: ${err}`);\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eOWASP Top 10 2017 Category A10\u003c/a\u003e -\n  Insufficient Logging \u0026amp; Monitoring \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/390\"\u003eMITRE, CWE-390\u003c/a\u003e - Detection of Error Condition Without Action \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "error-handling",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3696",
    "name": "Literals should not be thrown",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, throwing literals (primitive values like strings, numbers, booleans, etc.) as exceptions is generally discouraged. While it is\nsyntactically valid to throw literals, it is considered a best practice to throw instances of the \u003ccode\u003eError\u003c/code\u003e class or its subclasses\ninstead.\u003c/p\u003e\n\u003cp\u003eThrowing an instance of the \u003ccode\u003eError\u003c/code\u003e class allows you to provide more meaningful information about the error.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eError\u003c/code\u003e class and its subclasses provide properties like \u003ccode\u003emessage\u003c/code\u003e and \u003ccode\u003estack\u003c/code\u003e that can be used to convey\nuseful details about the error, such as a description of the problem, the context in which it occurred, or a stack trace for debugging.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nthrow 404;                              // Noncompliant\nthrow \"Invalid negative index.\";        // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThrowing literals can make it harder to handle and differentiate between different types of errors. Instead, you should use one of the exception\ntypes specifically created for the purpose or define your own subclass of the \u003ccode\u003eError\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nthrow new Error(\"Status: \" + 404);\nthrow new RangeError(\"Invalid negative index.\");\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, throwing literals (primitive values like strings, numbers, booleans, etc.) as exceptions is generally discouraged. While it is\nsyntactically valid to throw literals, it is considered a best practice to throw instances of the \u003ccode\u003eError\u003c/code\u003e class or its subclasses\ninstead.\u003c/p\u003e\n\u003cp\u003eThrowing an instance of the \u003ccode\u003eError\u003c/code\u003e class allows you to provide more meaningful information about the error.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eError\u003c/code\u003e class and its subclasses provide properties like \u003ccode\u003emessage\u003c/code\u003e and \u003ccode\u003estack\u003c/code\u003e that can be used to convey\nuseful details about the error, such as a description of the problem, the context in which it occurred, or a stack trace for debugging.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nthrow 404;                              // Noncompliant\nthrow \"Invalid negative index.\";        // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThrowing literals can make it harder to handle and differentiate between different types of errors. Instead, you should use one of the exception\ntypes specifically created for the purpose or define your own subclass of the \u003ccode\u003eError\u003c/code\u003e class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nthrow new Error(\"Status: \" + 404);\nthrow new RangeError(\"Invalid negative index.\");\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\"\u003eError\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "api-design",
      "error-handling",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2123",
    "name": "Values should not be uselessly incremented",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction pickNumber() {\n  let i \u003d 0;\n  i \u003d i++; // Noncompliant; i is still zero\n\n  return i++; // Noncompliant; 0 returned\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction pickNumber() {\n  let i \u003d 0;\n  i++;\n\n  return ++i;\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction pickNumber() {\n  let i \u003d 0;\n  i \u003d i++; // Noncompliant; i is still zero\n\n  return i++; // Noncompliant; 0 returned\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nfunction pickNumber() {\n  let i \u003d 0;\n  i++;\n\n  return ++i;\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1154",
    "name": "Results of operations on strings should not be ignored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S2201} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDoing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar str \u003d \"...\"\nstr.toUpperCase(); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar str \u003d \"...\"\nstr \u003d str.toUpperCase();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S2201} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDoing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar str \u003d \"...\"\nstr.toUpperCase(); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar str \u003d \"...\"\nstr \u003d str.toUpperCase();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6846",
    "name": "DOM elements should not use the \"accesskey\" property",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eaccesskey\u003c/code\u003e attribute, despite its potential utility, is fraught with numerous issues that limit its effectiveness and\nusability:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Screen readers\u0027 implementation of \u003ccode\u003eaccesskey\u003c/code\u003e largely depends on the browser used, as they rely on browsers for much of their\n  functionality. Some screen readers may repeatedly indicate the \u003ccode\u003eaccesskey\u003c/code\u003e value each time the element is encountered, potentially\n  causing unnecessary repetition and noise for the user. \u003c/li\u003e\n  \u003cli\u003e Conflicts between \u003ccode\u003eaccesskey\u003c/code\u003e shortcuts and other keyboard shortcuts, such as those of browsers, operating systems, assistive\n  technologies, or browser extensions, are frequent. This overlap can lead to uncertainty and potentially trigger unintended actions, causing user\n  confusion. \u003c/li\u003e\n  \u003cli\u003e While keyboard shortcuts are vital for screen reader functionality, conflicts can disable either the screen reader or \u003ccode\u003eaccesskey\u003c/code\u003e\n  shortcuts. Typically, screen reader shortcuts take precedence, disabling the \u003ccode\u003eaccesskey\u003c/code\u003e but preserving screen reader functionality.\n  However, this can cause confusion for users attempting to activate an \u003ccode\u003eaccesskey\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e No keystroke combinations can guarantee zero conflicts with all browsers, assistive technologies, or operating systems, particularly\n  considering foreign languages. For instance, an \u003ccode\u003eaccesskey\u003c/code\u003e shortcut that works in an English browser may conflict in the same browser\n  set in another language due to different menu naming conventions. \u003c/li\u003e\n  \u003cli\u003e While using numerals instead of letters for keyboard shortcuts could reduce conflicts, itâ€™s not a foolproof solution. Thereâ€™s no standard\n  correlation between numbers and web functions, which could lead to user confusion. \u003c/li\u003e\n  \u003cli\u003e Unlike the Windows environment that highlights keyboard shortcuts in menus, web pages or applications lack a standardized method to notify\n  users about available \u003ccode\u003eaccesskey\u003c/code\u003e shortcuts. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven these concerns, it is generally recommended to avoid using \u003ccode\u003eaccesskey\u003c/code\u003es.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction div() {\n    return \u0026lt;div accessKey\u003d\"h\" /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eDo not use \u003ccode\u003eaccesskey\u003c/code\u003es at all.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction div() {\n    return \u0026lt;div /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\"\u003eaccesskey\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\"\u003eAccessibility concerns\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eaccesskey\u003c/code\u003e attribute, despite its potential utility, is fraught with numerous issues that limit its effectiveness and\nusability:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Screen readers\u0027 implementation of \u003ccode\u003eaccesskey\u003c/code\u003e largely depends on the browser used, as they rely on browsers for much of their\n  functionality. Some screen readers may repeatedly indicate the \u003ccode\u003eaccesskey\u003c/code\u003e value each time the element is encountered, potentially\n  causing unnecessary repetition and noise for the user. \u003c/li\u003e\n  \u003cli\u003e Conflicts between \u003ccode\u003eaccesskey\u003c/code\u003e shortcuts and other keyboard shortcuts, such as those of browsers, operating systems, assistive\n  technologies, or browser extensions, are frequent. This overlap can lead to uncertainty and potentially trigger unintended actions, causing user\n  confusion. \u003c/li\u003e\n  \u003cli\u003e While keyboard shortcuts are vital for screen reader functionality, conflicts can disable either the screen reader or \u003ccode\u003eaccesskey\u003c/code\u003e\n  shortcuts. Typically, screen reader shortcuts take precedence, disabling the \u003ccode\u003eaccesskey\u003c/code\u003e but preserving screen reader functionality.\n  However, this can cause confusion for users attempting to activate an \u003ccode\u003eaccesskey\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e No keystroke combinations can guarantee zero conflicts with all browsers, assistive technologies, or operating systems, particularly\n  considering foreign languages. For instance, an \u003ccode\u003eaccesskey\u003c/code\u003e shortcut that works in an English browser may conflict in the same browser\n  set in another language due to different menu naming conventions. \u003c/li\u003e\n  \u003cli\u003e While using numerals instead of letters for keyboard shortcuts could reduce conflicts, itâ€™s not a foolproof solution. Thereâ€™s no standard\n  correlation between numbers and web functions, which could lead to user confusion. \u003c/li\u003e\n  \u003cli\u003e Unlike the Windows environment that highlights keyboard shortcuts in menus, web pages or applications lack a standardized method to notify\n  users about available \u003ccode\u003eaccesskey\u003c/code\u003e shortcuts. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven these concerns, it is generally recommended to avoid using \u003ccode\u003eaccesskey\u003c/code\u003es.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction div() {\n    return \u0026lt;div accessKey\u003d\"h\" /\u0026gt;;\n}\n\u003c/pre\u003e\n\u003cp\u003eDo not use \u003ccode\u003eaccesskey\u003c/code\u003es at all.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction div() {\n    return \u0026lt;div /\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\"\u003eaccesskey\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\"\u003eAccessibility concerns\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5757",
    "name": "Allowing confidential information to be logged is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eLog management is an important topic, especially for the security of a web application, to ensure user activity, including potential attackers, is\nrecorded and available for an analyst to understand whatâ€™s happened on the web application in case of malicious activities.\u003c/p\u003e\n\u003cp\u003eRetention of specific logs for a defined period of time is often necessary to comply with regulations such as GDPR, \u003ca\nhref\u003d\"https://www.pcisecuritystandards.org/documents/Effective-Daily-Log-Monitoring-Guidance.pdf\"\u003ePCI DSS\u003c/a\u003e and others. However, to protect userâ€™s\nprivacy, certain informations are forbidden or strongly discouraged from being logged, such as user passwords or credit card numbers, which obviously\nshould not be stored or at least not in clear text.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eIn a production environment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The web application uses confidential information and logs a significant amount of data. \u003c/li\u003e\n  \u003cli\u003e Logs are externalized to SIEM or Big Data repositories. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWith \u003ca href\u003d\"https://www.npmjs.com/package/signale\"\u003eSignale log management framework\u003c/a\u003e the code is sensitive when an empty list of secrets is\ndefined:\u003c/p\u003e\n\u003cpre\u003e\nconst { Signale } \u003d require(\u0027signale\u0027);\n\nconst CREDIT_CARD_NUMBERS \u003d fetchFromWebForm()\n// here we suppose the credit card numbers are retrieved somewhere and CREDIT_CARD_NUMBERS looks like [\"1234-5678-0000-9999\", \"1234-5678-0000-8888\"]; for instance\n\nconst options \u003d {\n  secrets: []         // empty list of secrets\n};\n\nconst logger \u003d new Signale(options); // Sensitive\n\nCREDIT_CARD_NUMBERS.forEach(function(CREDIT_CARD_NUMBER) {\n  logger.log(\u0027The customer ordered products with the credit card number \u003d %s\u0027, CREDIT_CARD_NUMBER);\n});\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eLoggers should be configured with a list of confidential, personal information that will be hidden/masked or removed from logs.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eWith \u003ca href\u003d\"https://www.npmjs.com/package/signale\"\u003eSignale log management framework\u003c/a\u003e it is possible to define a list of secrets that will be\nhidden in logs:\u003c/p\u003e\n\u003cpre\u003e\nconst { Signale } \u003d require(\u0027signale\u0027);\n\nconst CREDIT_CARD_NUMBERS \u003d fetchFromWebForm()\n// here we suppose the credit card numbers are retrieved somewhere and CREDIT_CARD_NUMBERS looks like [\"1234-5678-0000-9999\", \"1234-5678-0000-8888\"]; for instance\n\nconst options \u003d {\n  secrets: [\"([0-9]{4}-?)+\"]\n};\n\nconst logger \u003d new Signale(options); // Compliant\n\nCREDIT_CARD_NUMBERS.forEach(function(CREDIT_CARD_NUMBER) {\n  logger.log(\u0027The customer ordered products with the credit card number \u003d %s\u0027, CREDIT_CARD_NUMBER);\n});\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532\"\u003eMITRE, CWE-532\u003c/a\u003e - Insertion of Sensitive Information into Log File \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\"\u003eOWASP Top 10 2017 Category\n  A3\u003c/a\u003e - Sensitive Data Exposure \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6845",
    "name": "Non-interactive DOM elements should not have the `tabIndex` property",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eNavigation using the Tab key should be restricted to elements on the page that users can interact with.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe misuse of the \u003ccode\u003etabIndex\u003c/code\u003e attribute can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Navigation Confusion: It can confuse users who rely on keyboard navigation, as they might expect to tab through interactive elements like links\n  and buttons, not static content. \u003c/li\u003e\n  \u003cli\u003e Accessibility Issues: It can create accessibility problems, as assistive technologies provide their own page navigation mechanisms based on the\n  HTML of the page. Adding unnecessary tabindexes can disrupt this. \u003c/li\u003e\n  \u003cli\u003e Increased Tab Ring Size: It unnecessarily increases the size of the pageâ€™s tab ring, making navigation more cumbersome. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eSimply remove the \u003ccode\u003etabIndex\u003c/code\u003e attribute or set it to \u003ccode\u003e\"-1\"\u003c/code\u003e to fix the issue.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div tabIndex\u003d\"0\" /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div /\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003etabindex\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e The a11y project - \u003ca href\u003d\"https://www.a11yproject.com/posts/how-to-use-the-tabindex-attribute/\"\u003eUse the tabindex attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eNavigation using the Tab key should be restricted to elements on the page that users can interact with.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe misuse of the \u003ccode\u003etabIndex\u003c/code\u003e attribute can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Navigation Confusion: It can confuse users who rely on keyboard navigation, as they might expect to tab through interactive elements like links\n  and buttons, not static content. \u003c/li\u003e\n  \u003cli\u003e Accessibility Issues: It can create accessibility problems, as assistive technologies provide their own page navigation mechanisms based on the\n  HTML of the page. Adding unnecessary tabindexes can disrupt this. \u003c/li\u003e\n  \u003cli\u003e Increased Tab Ring Size: It unnecessarily increases the size of the pageâ€™s tab ring, making navigation more cumbersome. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eSimply remove the \u003ccode\u003etabIndex\u003c/code\u003e attribute or set it to \u003ccode\u003e\"-1\"\u003c/code\u003e to fix the issue.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div tabIndex\u003d\"0\" /\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div /\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003etabindex\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e The a11y project - \u003ca href\u003d\"https://www.a11yproject.com/posts/how-to-use-the-tabindex-attribute/\"\u003eUse the tabindex attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4426",
    "name": "Cryptographic keys should be robust",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn todayâ€™s cryptography, the length of the \u003cstrong\u003ekey\u003c/strong\u003e directly affects the security level of cryptographic algorithms.\u003c/p\u003e\n\u003cp\u003eNote that depending on the algorithm, the term \u003cstrong\u003ekey\u003c/strong\u003e refers to a different mathematical property. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For RSA, the key is the product of two large prime numbers, also called the \u003cstrong\u003emodulus\u003c/strong\u003e. \u003c/li\u003e\n  \u003cli\u003e For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    \u003cul\u003e\n      \u003cli\u003e In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf an application uses a key that is considered short and \u003cstrong\u003einsecure\u003c/strong\u003e, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.\u003c/p\u003e\n\u003cp\u003eIn general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâ€™s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.\u003c/p\u003e\n\u003cp\u003eDue to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.\u003cbr\u003e For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027rsa\u0027, {\n    modulusLength: 1024,  // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027dsa\u0027, {\n    modulusLength: 1024,  // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPair(\u0027ec\u0027, {\n    namedCurve: \u0027secp112r2\u0027, // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027rsa\u0027, {\n    modulusLength: 2048,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027dsa\u0027, {\n    modulusLength: 2048,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPair(\u0027ec\u0027, {\n    namedCurve: \u0027secp224k1\u0027,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eThe appropriate choices are the following.\u003c/p\u003e\n\u003ch4\u003eRSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)\u003c/h4\u003e\n\u003cp\u003eThe security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.\u003c/p\u003e\n\u003cp\u003eIn general, a minimum key size of \u003cstrong\u003e2048\u003c/strong\u003e bits is recommended for both.\u003c/p\u003e\n\u003ch4\u003eAES (Advanced Encryption Standard)\u003c/h4\u003e\n\u003cp\u003eAES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.\u003cbr\u003e A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e128 bits\u003c/strong\u003e is recommended for AES.\u003c/p\u003e\n\u003ch4\u003eElliptic Curve Cryptography (ECC)\u003c/h4\u003e\n\u003cp\u003eElliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms are mentioned directly in their names. For example, \u003ccode\u003esecp256k1\u003c/code\u003e generates a 256-bits long private key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e224 bits\u003c/strong\u003e is recommended for EC algorithms.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003ePre-Quantum Cryptography\u003c/h4\u003e\n\u003cp\u003eEncrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.\u003cbr\u003e It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.\u003c/p\u003e\n\u003cp\u003eThus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\"\u003eLearn more here\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard\u003c/a\u003e - Cryptography Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eOWASP Mobile Top 10 2016 Category M5\u003c/a\u003e -\n  Insufficient Cryptography \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\"\u003eNIST 800-131A\u003c/a\u003e - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths* \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eMITRE, CWE-326\u003c/a\u003e - Inadequate Encryption\n  Strength \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\"\u003eCERT, MSC61-J.\u003c/a\u003e - Do not use insecure or weak cryptographic algorithms \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn todayâ€™s cryptography, the length of the \u003cstrong\u003ekey\u003c/strong\u003e directly affects the security level of cryptographic algorithms.\u003c/p\u003e\n\u003cp\u003eNote that depending on the algorithm, the term \u003cstrong\u003ekey\u003c/strong\u003e refers to a different mathematical property. For example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For RSA, the key is the product of two large prime numbers, also called the \u003cstrong\u003emodulus\u003c/strong\u003e. \u003c/li\u003e\n  \u003cli\u003e For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    \u003cul\u003e\n      \u003cli\u003e In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf an application uses a key that is considered short and \u003cstrong\u003einsecure\u003c/strong\u003e, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.\u003c/p\u003e\n\u003cp\u003eIn general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâ€™s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.\u003c/p\u003e\n\u003cp\u003eDue to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.\u003cbr\u003e For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027rsa\u0027, {\n    modulusLength: 1024,  // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027dsa\u0027, {\n    modulusLength: 1024,  // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPair(\u0027ec\u0027, {\n    namedCurve: \u0027secp112r2\u0027, // Noncompliant\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eHere is an example of a private key generation with RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027rsa\u0027, {\n    modulusLength: 2048,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of a key generation with the Digital Signature Algorithm (DSA):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPairSync(\u0027dsa\u0027, {\n    modulusLength: 2048,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003cp\u003eHere is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the algorithm\nname:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\nfunction callback(err, pub, priv) {}\n\nvar { privateKey, publicKey } \u003d crypto.generateKeyPair(\u0027ec\u0027, {\n    namedCurve: \u0027secp224k1\u0027,\n    publicKeyEncoding:  { type: \u0027spki\u0027, format: \u0027pem\u0027 },\n    privateKeyEncoding: { type: \u0027pkcs8\u0027, format: \u0027pem\u0027 }\n  },\n  callback);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eThe appropriate choices are the following.\u003c/p\u003e\n\u003ch4\u003eRSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)\u003c/h4\u003e\n\u003cp\u003eThe security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.\u003c/p\u003e\n\u003cp\u003eIn general, a minimum key size of \u003cstrong\u003e2048\u003c/strong\u003e bits is recommended for both.\u003c/p\u003e\n\u003ch4\u003eAES (Advanced Encryption Standard)\u003c/h4\u003e\n\u003cp\u003eAES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.\u003cbr\u003e A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e128 bits\u003c/strong\u003e is recommended for AES.\u003c/p\u003e\n\u003ch4\u003eElliptic Curve Cryptography (ECC)\u003c/h4\u003e\n\u003cp\u003eElliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms are mentioned directly in their names. For example, \u003ccode\u003esecp256k1\u003c/code\u003e generates a 256-bits long private key.\u003c/p\u003e\n\u003cp\u003eCurrently, a minimum key size of \u003cstrong\u003e224 bits\u003c/strong\u003e is recommended for EC algorithms.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003ePre-Quantum Cryptography\u003c/h4\u003e\n\u003cp\u003eEncrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.\u003cbr\u003e It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.\u003c/p\u003e\n\u003cp\u003eThus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\"\u003eLearn more here\u003c/a\u003e.\u003c/p\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard\u003c/a\u003e - Cryptography Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eOWASP Mobile Top 10 2016 Category M5\u003c/a\u003e -\n  Insufficient Cryptography \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\"\u003eNIST 800-131A\u003c/a\u003e - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths* \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eMITRE, CWE-326\u003c/a\u003e - Inadequate Encryption\n  Strength \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\"\u003eCERT, MSC61-J.\u003c/a\u003e - Do not use insecure or weak cryptographic algorithms \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2245",
    "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2013-6386\"\u003eCVE-2013-6386\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-3419\"\u003eCVE-2006-3419\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2008-4102\"\u003eCVE-2008-4102\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.\u003c/p\u003e\n\u003cp\u003eAs the \u003ccode\u003eMath.random()\u003c/code\u003e function relies on a weak pseudorandom number generator, this function should not be used for security-critical\napplications or for protecting sensitive data. In such context, a cryptographically strong pseudorandom number generator (CSPRNG) should be used\ninstead.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. \u003c/li\u003e\n  \u003cli\u003e the function you use generates a value which can be predicted (pseudo-random). \u003c/li\u003e\n  \u003cli\u003e the generated value is used multiple times. \u003c/li\u003e\n  \u003cli\u003e an attacker can access the generated value. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nconst val \u003d Math.random(); // Sensitive\n// Check if val is used in a security context.\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a cryptographically strong pseudorandom number generator (CSPRNG) like \u003ccode\u003ecrypto.getRandomValues()\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Use the generated random values only once. \u003c/li\u003e\n  \u003cli\u003e You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Client side \u003d\u003d\u003d\nconst crypto \u003d window.crypto || window.msCrypto;\nvar array \u003d new Uint32Array(1);\ncrypto.getRandomValues(array); // Compliant for security-sensitive use cases\n\n// \u003d\u003d\u003d Server side \u003d\u003d\u003d\nconst crypto \u003d require(\u0027crypto\u0027);\nconst buf \u003d crypto.randomBytes(1); // Compliant for security-sensitive use cases\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard\u003c/a\u003e - Cryptography Requirements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eOWASP Mobile Top 10 2016 Category M5\u003c/a\u003e -\n  Insufficient Cryptography \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/338\"\u003eMITRE, CWE-338\u003c/a\u003e - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/330\"\u003eMITRE, CWE-330\u003c/a\u003e - Use of Insufficiently Random Values \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eMITRE, CWE-326\u003c/a\u003e - Inadequate Encryption Strength \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1241\"\u003eMITRE, CWE-1241\u003c/a\u003e - Use of Predictable Algorithm in Random Number Generator \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\"\u003ePredictable Pseudo Random Number\n  Generator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S6844",
    "name": "Anchor tags should not be used as buttons",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003cp\u003eThe \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag in HTML is designed to create hyperlinks, which can link to different sections of the same page, different pages, or\neven different websites. However, sometimes developers misuse \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags as buttons, which can lead to accessibility issues and\nunexpected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule checks that \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags are used correctly as hyperlinks and not misused as buttons. It verifies that each\n\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag has a \u003ccode\u003ehref\u003c/code\u003e attribute, which is necessary for it to function as a hyperlink. If an \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag\nis used without a \u003ccode\u003ehref\u003c/code\u003e attribute, it behaves like a button, which is not its intended use.\u003c/p\u003e\n\u003cp\u003eUsing the correct HTML elements for their intended purpose is crucial for accessibility and usability. It ensures that the website behaves as\nexpected and can be used by all users, including those using assistive technologies. Misusing HTML elements can lead to a poor user experience and\npotential accessibility violations.\u003c/p\u003e\n\u003cp\u003eCompliance with this rule will ensure that your HTML code is semantically correct, accessible, and behaves as expected.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMisusing \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags as buttons can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessibility: Screen readers and other assistive technologies rely on the correct use of HTML elements to interpret and interact with the\n  content. When \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags are used as buttons, it can confuse these technologies and make the website less accessible to users with\n  disabilities. \u003c/li\u003e\n  \u003cli\u003e Usability: The behavior of \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags and buttons is different. For example, buttons can be triggered using the space bar,\n  while \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags cannot. Misusing these elements can lead to unexpected behavior and a poor user experience. \u003c/li\u003e\n  \u003cli\u003e Semantic correctness: Each HTML element has a specific purpose and meaning. Using elements for purposes other than their intended use can make\n  the code harder to understand and maintain. \u003c/li\u003e\n  \u003cli\u003e SEO implications: Search engines use the structure and semantics of HTML to understand and rank web pages. Misusing HTML elements can\n  negatively impact a websiteâ€™s SEO. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, you should use the appropriate HTML elements for their intended purposes. If you need to create a hyperlink, use the\n\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag with a \u003ccode\u003ehref\u003c/code\u003e attribute. If you need to create a button, use the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;a href\u003d\"javascript:void(0)\" onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u0026lt;a href\u003d\"#\" onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u0026lt;a onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/button\u0026gt;\n\u0026lt;a href\u003d\"#section\" onClick\u003d{foo} /\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WebAIM - \u003ca href\u003d\"https://webaim.org/techniques/hypertext/\"\u003eIntroduction to Links and Hypertext\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://marcysutton.com/links-vs-buttons-in-modern-web-applications/\"\u003eLinks vs. Buttons in Modern Web Applications\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/anchor-is-valid.md#jsx-a11yanchor-is-valid:~:text\u003dUsing%20ARIA%20%2D%20Notes%20on%20ARIA%20use%20in%20HTML\"\u003eUsing ARIA - Notes on ARIA use in HTML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag in HTML is designed to create hyperlinks, which can link to different sections of the same page, different pages, or\neven different websites. However, sometimes developers misuse \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags as buttons, which can lead to accessibility issues and\nunexpected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule checks that \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags are used correctly as hyperlinks and not misused as buttons. It verifies that each\n\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag has a \u003ccode\u003ehref\u003c/code\u003e attribute, which is necessary for it to function as a hyperlink. If an \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag\nis used without a \u003ccode\u003ehref\u003c/code\u003e attribute, it behaves like a button, which is not its intended use.\u003c/p\u003e\n\u003cp\u003eUsing the correct HTML elements for their intended purpose is crucial for accessibility and usability. It ensures that the website behaves as\nexpected and can be used by all users, including those using assistive technologies. Misusing HTML elements can lead to a poor user experience and\npotential accessibility violations.\u003c/p\u003e\n\u003cp\u003eCompliance with this rule will ensure that your HTML code is semantically correct, accessible, and behaves as expected.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMisusing \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags as buttons can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessibility: Screen readers and other assistive technologies rely on the correct use of HTML elements to interpret and interact with the\n  content. When \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags are used as buttons, it can confuse these technologies and make the website less accessible to users with\n  disabilities. \u003c/li\u003e\n  \u003cli\u003e Usability: The behavior of \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags and buttons is different. For example, buttons can be triggered using the space bar,\n  while \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags cannot. Misusing these elements can lead to unexpected behavior and a poor user experience. \u003c/li\u003e\n  \u003cli\u003e Semantic correctness: Each HTML element has a specific purpose and meaning. Using elements for purposes other than their intended use can make\n  the code harder to understand and maintain. \u003c/li\u003e\n  \u003cli\u003e SEO implications: Search engines use the structure and semantics of HTML to understand and rank web pages. Misusing HTML elements can\n  negatively impact a websiteâ€™s SEO. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, you should use the appropriate HTML elements for their intended purposes. If you need to create a hyperlink, use the\n\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag with a \u003ccode\u003ehref\u003c/code\u003e attribute. If you need to create a button, use the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;a href\u003d\"javascript:void(0)\" onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u0026lt;a href\u003d\"#\" onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u0026lt;a onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{foo}\u0026gt;Perform action\u0026lt;/button\u0026gt;\n\u0026lt;a href\u003d\"#section\" onClick\u003d{foo} /\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WebAIM - \u003ca href\u003d\"https://webaim.org/techniques/hypertext/\"\u003eIntroduction to Links and Hypertext\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://marcysutton.com/links-vs-buttons-in-modern-web-applications/\"\u003eLinks vs. Buttons in Modern Web Applications\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/anchor-is-valid.md#jsx-a11yanchor-is-valid:~:text\u003dUsing%20ARIA%20%2D%20Notes%20on%20ARIA%20use%20in%20HTML\"\u003eUsing ARIA - Notes on ARIA use in HTML\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3579",
    "name": "Array indexes should be numeric",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, array indexes should be numeric because arrays are implemented as objects with numeric keys. When an array is created, it is\nactually an object with properties that are numeric keys. These keys are used to access and assign values stored in the array.\u003c/p\u003e\n\u003cp\u003eIf an array index is not numeric, it will be converted to a string and used as a property name. This can lead to unexpected behavior, as properties\nare not guaranteed to be ordered in the same way as numeric indexes. For example, if an array has both numeric and non-numeric keys, the non-numeric\nkeys may appear in a different order than the numeric keys.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [];\narr[0] \u003d \u0027a\u0027;\narr[\u0027name\u0027] \u003d \u0027bob\u0027; // Noncompliant: The \u0027name\u0027 property with value \u0027bob\u0027 appears after the elements \u0027a\u0027 and \u0027foo\u0027\narr[1] \u003d \u0027foo\u0027;\n\u003c/pre\u003e\n\u003cp\u003eUsing numeric indexes helps maintain consistency and clarity in your code. It follows the common convention of using numbers to represent positions\nor indices within an ordered sequence. This makes it easier for developers to understand and work with arrays. Furthermore, JavaScript engines can\noptimize memory allocation and retrieval of array elements in constant time.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [];\narr[0] \u003d \u0027a\u0027;\narr[1] \u003d \u0027foo\u0027;\narr[2] \u003d \u0027bob\u0027;\n\u003c/pre\u003e\n\u003cp\u003eIf you really need to use arrays with additional properties, you should wrap the array into another object, add new properties to that object, and\npreserve the ordered nature of the wrapped array.\u003c/p\u003e\n\u003cpre\u003e\nlet obj \u003d {\n  name: \u0027bob\u0027,\n  arr: [\u0027a\u0027, \u0027foo\u0027]\n};\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_indices\"\u003eArray indices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eObject\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, array indexes should be numeric because arrays are implemented as objects with numeric keys. When an array is created, it is\nactually an object with properties that are numeric keys. These keys are used to access and assign values stored in the array.\u003c/p\u003e\n\u003cp\u003eIf an array index is not numeric, it will be converted to a string and used as a property name. This can lead to unexpected behavior, as properties\nare not guaranteed to be ordered in the same way as numeric indexes. For example, if an array has both numeric and non-numeric keys, the non-numeric\nkeys may appear in a different order than the numeric keys.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [];\narr[0] \u003d \u0027a\u0027;\narr[\u0027name\u0027] \u003d \u0027bob\u0027; // Noncompliant: The \u0027name\u0027 property with value \u0027bob\u0027 appears after the elements \u0027a\u0027 and \u0027foo\u0027\narr[1] \u003d \u0027foo\u0027;\n\u003c/pre\u003e\n\u003cp\u003eUsing numeric indexes helps maintain consistency and clarity in your code. It follows the common convention of using numbers to represent positions\nor indices within an ordered sequence. This makes it easier for developers to understand and work with arrays. Furthermore, JavaScript engines can\noptimize memory allocation and retrieval of array elements in constant time.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [];\narr[0] \u003d \u0027a\u0027;\narr[1] \u003d \u0027foo\u0027;\narr[2] \u003d \u0027bob\u0027;\n\u003c/pre\u003e\n\u003cp\u003eIf you really need to use arrays with additional properties, you should wrap the array into another object, add new properties to that object, and\npreserve the ordered nature of the wrapped array.\u003c/p\u003e\n\u003cpre\u003e\nlet obj \u003d {\n  name: \u0027bob\u0027,\n  arr: [\u0027a\u0027, \u0027foo\u0027]\n};\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_indices\"\u003eArray indices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eObject\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "bad-practice",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4423",
    "name": "Weak SSL/TLS protocols should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâ€™s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eNodeJs offers multiple ways to set weak TLS protocols. For https and tls, \u003ca\nhref\u003d\"https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions\"\u003ethese options\u003c/a\u003e are used and are used in other third-party libraries as\nwell.\u003c/p\u003e\n\u003cp\u003eThe first is \u003ccode\u003esecureProtocol\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n secureProtocol: \u0027TLSv1_method\u0027 // Noncompliant\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eThe second is the combination of \u003ccode\u003eminVersion\u003c/code\u003e and \u003ccode\u003emaxVerison\u003c/code\u003e. Note that they cannot be specified along with the\n\u003ccode\u003esecureProtocol\u003c/code\u003e option:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"12\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  minVersion: \u0027TLSv1.1\u0027,  // Noncompliant\n  maxVersion: \u0027TLSv1.2\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eAnd \u003ccode\u003esecureOptions\u003c/code\u003e, which in this example instructs the OpenSSL protocol to turn off some algorithms altogether. In general, this\noption might trigger side effects and should be used carefully, if used at all.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"13\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https     \u003d require(\u0027node:https\u0027);\nconst tls       \u003d require(\u0027node:tls\u0027);\nconst constants \u003d require(\u0027node:crypto\u0027):\n\nlet options \u003d {\n  secureOptions:\n    constants.SSL_OP_NO_SSLv2\n    | constants.SSL_OP_NO_SSLv3\n    | constants.SSL_OP_NO_TLSv1\n}; // Noncompliant\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"12\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  minVersion: \u0027TLSv1.2\u0027,\n  maxVersion: \u0027TLSv1.2\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eHere, the goal is to turn on only TLSv1.2 and higher, by turning off all lower versions:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"13\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureOptions:\n    constants.SSL_OP_NO_SSLv2\n    | constants.SSL_OP_NO_SSLv3\n    | constants.SSL_OP_NO_TLSv1\n    | constants.SSL_OP_NO_TLSv1_1\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâ€™s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eNodeJs offers multiple ways to set weak TLS protocols. For https and tls, \u003ca\nhref\u003d\"https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions\"\u003ethese options\u003c/a\u003e are used and are used in other third-party libraries as\nwell.\u003c/p\u003e\n\u003cp\u003eThe first is \u003ccode\u003esecureProtocol\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n secureProtocol: \u0027TLSv1_method\u0027 // Noncompliant\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eThe second is the combination of \u003ccode\u003eminVersion\u003c/code\u003e and \u003ccode\u003emaxVerison\u003c/code\u003e. Note that they cannot be specified along with the\n\u003ccode\u003esecureProtocol\u003c/code\u003e option:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"12\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  minVersion: \u0027TLSv1.1\u0027,  // Noncompliant\n  maxVersion: \u0027TLSv1.2\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eAnd \u003ccode\u003esecureOptions\u003c/code\u003e, which in this example instructs the OpenSSL protocol to turn off some algorithms altogether. In general, this\noption might trigger side effects and should be used carefully, if used at all.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"13\" data-diff-type\u003d\"noncompliant\"\u003e\nconst https     \u003d require(\u0027node:https\u0027);\nconst tls       \u003d require(\u0027node:tls\u0027);\nconst constants \u003d require(\u0027node:crypto\u0027):\n\nlet options \u003d {\n  secureOptions:\n    constants.SSL_OP_NO_SSLv2\n    | constants.SSL_OP_NO_SSLv3\n    | constants.SSL_OP_NO_TLSv1\n}; // Noncompliant\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureProtocol: \u0027TLSv1_2_method\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"12\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  minVersion: \u0027TLSv1.2\u0027,\n  maxVersion: \u0027TLSv1.2\u0027\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003cp\u003eHere, the goal is to turn on only TLSv1.2 and higher, by turning off all lower versions:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"13\" data-diff-type\u003d\"compliant\"\u003e\nconst https \u003d require(\u0027node:https\u0027);\nconst tls   \u003d require(\u0027node:tls\u0027);\n\nlet options \u003d {\n  secureOptions:\n    constants.SSL_OP_NO_SSLv2\n    | constants.SSL_OP_NO_SSLv3\n    | constants.SSL_OP_NO_TLSv1\n    | constants.SSL_OP_NO_TLSv1_1\n};\n\nlet req    \u003d https.request(options, (res) \u003d\u0026gt; { });\nlet socket \u003d tls.connect(443, \"www.example.com\", options, () \u003d\u0026gt; { });\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { aws_apigateway as agw } from \u0027aws-cdk-lib\u0027;\nnew agw.DomainName(this, \u0027Example\u0027, {\n    certificate: certificate,\n    domainName: domainName,\n    securityPolicy: agw.SecurityPolicy.TLS_1_0, // Noncompliant\n});\n\u003c/pre\u003e\n\u003cp\u003eThe resource \u003ccode\u003eCfnDomain\u003c/code\u003e uses a weak TLS security policy, by default.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { aws_opensearchservice as os } from \u0027aws-cdk-lib\u0027;\n\nnew os.CfnDomain(this, \u0027Example\u0027, {\n  domainEndpointOptions: {\n    enforceHttps: true,\n  },\n}); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { aws_apigateway as agw } from \u0027aws-cdk-lib\u0027;\nnew agw.DomainName(this, \u0027Example\u0027, {\n    certificate: certificate,\n    domainName: domainName,\n    securityPolicy: agw.SecurityPolicy.TLS_1_2,\n});\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nimport { aws_opensearchservice as os } from \u0027aws-cdk-lib\u0027;\n\nnew os.CfnDomain(this, \u0027Example\u0027, {\n  domainEndpointOptions: {\n    enforceHttps: true,\n    tlsSecurityPolicy: \u0027Policy-Min-TLS-1-2-2019-07\u0027,\n  },\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e",
        "context": {
          "key": "aws_cdk",
          "displayName": "AWS CDK"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4787",
    "name": "Encrypting data is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:javascript:S4426}, {rule:javascript:S5542}, {rule:javascript:S5547} instead.\u003c/p\u003e\n\u003cp\u003eEncrypting data is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-7902\"\u003eCVE-2017-7902\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-1378\"\u003eCVE-2006-1378\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2003-1376\"\u003eCVE-2003-1376\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eProper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.\u003c/p\u003e\n\u003cp\u003eThis rule flags function calls that initiate encryption/decryption.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the private key might not be random, strong enough or the same key is reused for a long long time. \u003c/li\u003e\n  \u003cli\u003e the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. \u003c/li\u003e\n  \u003cli\u003e the key exchange is made without properly authenticating the receiver. \u003c/li\u003e\n  \u003cli\u003e the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. \u003c/li\u003e\n  \u003cli\u003e the chosen encryption library is deemed unsafe. \u003c/li\u003e\n  \u003cli\u003e a nonce is used, and the same value is reused multiple times, or the nonce is not random. \u003c/li\u003e\n  \u003cli\u003e the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  \u003c/li\u003e\n  \u003cli\u003e the CBC (Cypher Block Chaining) algorithm is used for encryption, and itâ€™s IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. \u003c/li\u003e\n  \u003cli\u003e the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are at risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Client side \u003d\u003d\u003d\ncrypto.subtle.encrypt(algo, key, plainData); // Sensitive\ncrypto.subtle.decrypt(algo, key, encData); // Sensitive\n\u003c/pre\u003e\n\u003cpre\u003e\n// \u003d\u003d\u003d Server side \u003d\u003d\u003d\nconst crypto \u003d require(\"crypto\");\nconst cipher \u003d crypto.createCipher(algo, key); // Sensitive\nconst cipheriv \u003d crypto.createCipheriv(algo, key, iv); // Sensitive\nconst decipher \u003d crypto.createDecipher(algo, key); // Sensitive\nconst decipheriv \u003d crypto.createDecipheriv(algo, key, iv); // Sensitive\nconst pubEnc \u003d crypto.publicEncrypt(key, buf); // Sensitive\nconst privDec \u003d crypto.privateDecrypt({ key: key, passphrase: secret }, pubEnc); // Sensitive\nconst privEnc \u003d crypto.privateEncrypt({ key: key, passphrase: secret }, buf); // Sensitive\nconst pubDec \u003d crypto.publicDecrypt(key, privEnc); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Generate encryption keys using secure random algorithms. \u003c/li\u003e\n  \u003cli\u003e When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  \u003c/li\u003e\n  \u003cli\u003e Regenerate the keys regularly. \u003c/li\u003e\n  \u003cli\u003e Always store the keys in a safe location and transfer them only over safe channels. \u003c/li\u003e\n  \u003cli\u003e If there is an exchange of cryptographic keys, check first the identity of the receiver. \u003c/li\u003e\n  \u003cli\u003e Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. \u003c/li\u003e\n  \u003cli\u003e When a nonce is used, generate it randomly every time. \u003c/li\u003e\n  \u003cli\u003e When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). \u003c/li\u003e\n  \u003cli\u003e When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IVâ€™s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. \u003c/li\u003e\n  \u003cli\u003e The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    \u003cul\u003e\n      \u003cli\u003e Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesnâ€™t provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. \u003c/li\u003e\n      \u003cli\u003e Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/321\"\u003eMITRE, CWE-321\u003c/a\u003e - Use of Hard-coded Cryptographic Key \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/322\"\u003eMITRE, CWE-322\u003c/a\u003e - Key Exchange without Entity Authentication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/323\"\u003eMITRE, CWE-323\u003c/a\u003e - Reusing a Nonce, Key Pair in Encryption \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/324\"\u003eMITRE, CWE-324\u003c/a\u003e - Use of a Key Past its Expiration Date \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/325\"\u003eMITRE, CWE-325\u003c/a\u003e - Missing Required Cryptographic Step \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/326\"\u003eMITRE, CWE-326\u003c/a\u003e - Inadequate Encryption Strength \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6843",
    "name": "Interactive DOM elements should not have non-interactive ARIA roles",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInteractive DOM elements are elements that users can interact with. These include buttons, links, form inputs, and other elements that can be\nclicked, focused, or otherwise manipulated by the user. ARIA roles, on the other hand, are used to improve accessibility by providing additional\nsemantic information about an elementâ€™s purpose and behavior. ARIA roles can be divided into two categories: interactive roles and non-interactive\nroles.\u003c/p\u003e\n\u003cp\u003eInteractive ARIA roles are used for elements that a user can interact with, such as buttons or sliders. Non-interactive ARIA roles are used for\nelements that are not meant to be interacted with, such as content containers or landmarks. Examples of non-interactive ARIA roles include\n\u003ccode\u003earticle\u003c/code\u003e, \u003ccode\u003ebanner\u003c/code\u003e, \u003ccode\u003ecomplementary\u003c/code\u003e, \u003ccode\u003econtentinfo\u003c/code\u003e, \u003ccode\u003edefinition\u003c/code\u003e, \u003ccode\u003edirectory\u003c/code\u003e,\n\u003ccode\u003edocument\u003c/code\u003e, \u003ccode\u003efeed\u003c/code\u003e, \u003ccode\u003efigure\u003c/code\u003e, \u003ccode\u003egroup\u003c/code\u003e, \u003ccode\u003eheading\u003c/code\u003e, \u003ccode\u003eimg\u003c/code\u003e, \u003ccode\u003elist\u003c/code\u003e,\n\u003ccode\u003elistitem\u003c/code\u003e, \u003ccode\u003emath\u003c/code\u003e, \u003ccode\u003enone\u003c/code\u003e, \u003ccode\u003enote\u003c/code\u003e, \u003ccode\u003epresentation\u003c/code\u003e, \u003ccode\u003eregion\u003c/code\u003e,\n\u003ccode\u003eseparator\u003c/code\u003e, \u003ccode\u003estatus\u003c/code\u003e, \u003ccode\u003eterm\u003c/code\u003e, and \u003ccode\u003etooltip\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInteractive DOM elements should not have non-interactive ARIA roles because it can confuse assistive technologies and their users. For example, if\na button (an interactive element) is given a non-interactive ARIA role like \u003ccode\u003earticle\u003c/code\u003e, it can mislead users into thinking that the button\nis just a piece of content, not something they can interact with. This can lead to a poor user experience, especially for users who rely on assistive\ntechnologies to navigate the web.\u003c/p\u003e\n\u003cp\u003eTherefore, itâ€™s important to ensure that interactive DOM elements are not given non-interactive ARIA roles.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEnsure that interactive DOM elements are not given non-interactive ARIA roles.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myButton() {\n    return \u0026lt;button role\u003d\"article\"\u0026gt;Click me!\u0026lt;/button\u0026gt;; // Noncompliant; \"button\" is interactive, but \"article\" isn\u0027t\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myButton() {\n    return \u0026lt;button role\u003d\"button\"\u0026gt;Click me!\u0026lt;/button\u0026gt;;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.1/#usage_intro\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInteractive DOM elements are elements that users can interact with. These include buttons, links, form inputs, and other elements that can be\nclicked, focused, or otherwise manipulated by the user. ARIA roles, on the other hand, are used to improve accessibility by providing additional\nsemantic information about an elementâ€™s purpose and behavior. ARIA roles can be divided into two categories: interactive roles and non-interactive\nroles.\u003c/p\u003e\n\u003cp\u003eInteractive ARIA roles are used for elements that a user can interact with, such as buttons or sliders. Non-interactive ARIA roles are used for\nelements that are not meant to be interacted with, such as content containers or landmarks. Examples of non-interactive ARIA roles include\n\u003ccode\u003earticle\u003c/code\u003e, \u003ccode\u003ebanner\u003c/code\u003e, \u003ccode\u003ecomplementary\u003c/code\u003e, \u003ccode\u003econtentinfo\u003c/code\u003e, \u003ccode\u003edefinition\u003c/code\u003e, \u003ccode\u003edirectory\u003c/code\u003e,\n\u003ccode\u003edocument\u003c/code\u003e, \u003ccode\u003efeed\u003c/code\u003e, \u003ccode\u003efigure\u003c/code\u003e, \u003ccode\u003egroup\u003c/code\u003e, \u003ccode\u003eheading\u003c/code\u003e, \u003ccode\u003eimg\u003c/code\u003e, \u003ccode\u003elist\u003c/code\u003e,\n\u003ccode\u003elistitem\u003c/code\u003e, \u003ccode\u003emath\u003c/code\u003e, \u003ccode\u003enone\u003c/code\u003e, \u003ccode\u003enote\u003c/code\u003e, \u003ccode\u003epresentation\u003c/code\u003e, \u003ccode\u003eregion\u003c/code\u003e,\n\u003ccode\u003eseparator\u003c/code\u003e, \u003ccode\u003estatus\u003c/code\u003e, \u003ccode\u003eterm\u003c/code\u003e, and \u003ccode\u003etooltip\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInteractive DOM elements should not have non-interactive ARIA roles because it can confuse assistive technologies and their users. For example, if\na button (an interactive element) is given a non-interactive ARIA role like \u003ccode\u003earticle\u003c/code\u003e, it can mislead users into thinking that the button\nis just a piece of content, not something they can interact with. This can lead to a poor user experience, especially for users who rely on assistive\ntechnologies to navigate the web.\u003c/p\u003e\n\u003cp\u003eTherefore, itâ€™s important to ensure that interactive DOM elements are not given non-interactive ARIA roles.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure that interactive DOM elements are not given non-interactive ARIA roles.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction myButton() {\n    return \u0026lt;button role\u003d\"article\"\u0026gt;Click me!\u0026lt;/button\u0026gt;; // Noncompliant; \"button\" is interactive, but \"article\" isn\u0027t\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction myButton() {\n    return \u0026lt;button role\u003d\"button\"\u0026gt;Click me!\u0026lt;/button\u0026gt;;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value\"\u003eName, Role, Value\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e WCAG - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.1/#usage_intro\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eWAI-ARIA Roles\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5876",
    "name": "A new session should be created during user authentication",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eAn attacker may trick a user into using a predetermined session identifier. Consequently, this attacker can gain unauthorized access and\nimpersonate the userâ€™s session. This kind of attack is called session fixation, and protections against it should not be disabled.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSession fixation attacks take advantage of the way web applications manage session identifiers. Hereâ€™s how a session fixation attack typically\nworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When a user visits a website or logs in, a session is created for them. \u003c/li\u003e\n  \u003cli\u003e This session is assigned a unique session identifier, stored in a cookie, in local storage, or through URL parameters. \u003c/li\u003e\n  \u003cli\u003e In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. For example,\n  the attacker sends the victim an email containing a link with this predetermined session identifier. \u003c/li\u003e\n  \u003cli\u003e When the victim clicks on the link, the web application does not create a new session identifier but uses this identifier known to the\n  attacker. \u003c/li\u003e\n  \u003cli\u003e At this point, the attacker can hijack and impersonate the victimâ€™s session. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSession fixation attacks pose a significant security risk to web applications and their users. By exploiting this vulnerability, attackers can gain\nunauthorized access to user sessions, potentially leading to various malicious activities. Some of the most relevant scenarios are the following:\u003c/p\u003e\n\u003ch4\u003eImpersonation\u003c/h4\u003e\n\u003cp\u003eOnce an attacker successfully fixes a session identifier, they can impersonate the victim and gain access to their account without providing valid\ncredentials. This can result in unauthorized actions, such as modifying personal information, making unauthorized transactions, or even performing\nmalicious activities on behalf of the victim. An attacker can also manipulate the victim into performing actions they wouldnâ€™t normally do, such as\nrevealing sensitive information or conducting financial transactions on the attackerâ€™s behalf.\u003c/p\u003e\n\u003ch4\u003eData Breach\u003c/h4\u003e\n\u003cp\u003eIf an attacker gains access to a userâ€™s session, they may also gain access to sensitive data associated with that session. This can include\npersonal information, financial details, or any other confidential data that the user has access to within the application. The compromised data can\nbe used for identity theft, financial fraud, or other malicious purposes.\u003c/p\u003e\n\u003ch4\u003ePrivilege Escalation\u003c/h4\u003e\n\u003cp\u003eIn some cases, session fixation attacks can be used to escalate privileges within a web application. By fixing a session identifier with higher\nprivileges, an attacker can bypass access controls and gain administrative or privileged access to the application. This can lead to unauthorized\nmodifications, data manipulation, or even complete compromise of the application and its underlying systems.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Passport\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eUpon user authentication, it is crucial to regenerate the session identifier to prevent fixation attacks. Passport provides a mechanism to achieve\nthis by using the \u003ccode\u003ereq.session.regenerate()\u003c/code\u003e method. By calling this method after successful authentication, you can ensure that each user\nis assigned a new and unique session ID.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\napp.post(\u0027/login\u0027,\n  passport.authenticate(\u0027local\u0027, { failureRedirect: \u0027/login\u0027 }),\n  function(req, res) {\n    // Noncompliant - no session.regenerate after login\n    res.redirect(\u0027/\u0027);\n  });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\napp.post(\u0027/login\u0027,\n  passport.authenticate(\u0027local\u0027, { failureRedirect: \u0027/login\u0027 }),\n  function(req, res) {\n    let prevSession \u003d req.session;\n    req.session.regenerate((err) \u003d\u0026gt; {\n      Object.assign(req.session, prevSession);\n      res.redirect(\u0027/\u0027);\n    });\n  });\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThe protection works by ensuring that the session identifier, which is used to identify and track a userâ€™s session, is changed or regenerated\nduring the authentication process.\u003c/p\u003e\n\u003cp\u003eHereâ€™s how session fixation protection typically works:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e When a user visits a website or logs in, a session is created for them. This session is assigned a unique session identifier, which is stored\n  in a cookie or passed through URL parameters. \u003c/li\u003e\n  \u003cli\u003e In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. This allows\n  the attacker to potentially gain unauthorized access to the userâ€™s session. \u003c/li\u003e\n  \u003cli\u003e To protect against session fixation attacks, session fixation protection mechanisms come into play during the authentication process. When a\n  user successfully authenticates, this mechanism generates a new session identifier for the userâ€™s session. \u003c/li\u003e\n  \u003cli\u003e The old session identifier, which may have been manipulated by the attacker, is invalidated and no longer associated with the userâ€™s session.\n  This ensures that any attempts by the attacker to use the fixed session identifier are rendered ineffective. \u003c/li\u003e\n  \u003cli\u003e The user is then assigned the new session identifier, which is used for subsequent requests and session tracking. This new session identifier\n  is typically stored in a new session cookie or passed through URL parameters. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy regenerating the session identifier upon authentication, session fixation protection helps ensure that the userâ€™s session is tied to a new,\nsecure identifier that the attacker cannot predict or control. This mitigates the risk of an attacker gaining unauthorized access to the userâ€™s\nsession and helps maintain the integrity and security of the applicationâ€™s session management process.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Express.js Documentation - \u003ca href\u003d\"http://expressjs.com/en/resources/middleware/session.html\"\u003eexpress-session\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://medium.com/passportjs/fixing-session-fixation-b2b68619c51d\"\u003eFixing Session Fixation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e -\n  Broken Authentication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Session_fixation\"\u003eOWASP Sesssion Fixation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/384\"\u003eMITRE, CWE-384\u003c/a\u003e - Session Fixation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eAn attacker may trick a user into using a predetermined session identifier. Consequently, this attacker can gain unauthorized access and\nimpersonate the userâ€™s session. This kind of attack is called session fixation, and protections against it should not be disabled.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSession fixation attacks take advantage of the way web applications manage session identifiers. Hereâ€™s how a session fixation attack typically\nworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When a user visits a website or logs in, a session is created for them. \u003c/li\u003e\n  \u003cli\u003e This session is assigned a unique session identifier, stored in a cookie, in local storage, or through URL parameters. \u003c/li\u003e\n  \u003cli\u003e In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. For example,\n  the attacker sends the victim an email containing a link with this predetermined session identifier. \u003c/li\u003e\n  \u003cli\u003e When the victim clicks on the link, the web application does not create a new session identifier but uses this identifier known to the\n  attacker. \u003c/li\u003e\n  \u003cli\u003e At this point, the attacker can hijack and impersonate the victimâ€™s session. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSession fixation attacks pose a significant security risk to web applications and their users. By exploiting this vulnerability, attackers can gain\nunauthorized access to user sessions, potentially leading to various malicious activities. Some of the most relevant scenarios are the following:\u003c/p\u003e\n\u003ch4\u003eImpersonation\u003c/h4\u003e\n\u003cp\u003eOnce an attacker successfully fixes a session identifier, they can impersonate the victim and gain access to their account without providing valid\ncredentials. This can result in unauthorized actions, such as modifying personal information, making unauthorized transactions, or even performing\nmalicious activities on behalf of the victim. An attacker can also manipulate the victim into performing actions they wouldnâ€™t normally do, such as\nrevealing sensitive information or conducting financial transactions on the attackerâ€™s behalf.\u003c/p\u003e\n\u003ch4\u003eData Breach\u003c/h4\u003e\n\u003cp\u003eIf an attacker gains access to a userâ€™s session, they may also gain access to sensitive data associated with that session. This can include\npersonal information, financial details, or any other confidential data that the user has access to within the application. The compromised data can\nbe used for identity theft, financial fraud, or other malicious purposes.\u003c/p\u003e\n\u003ch4\u003ePrivilege Escalation\u003c/h4\u003e\n\u003cp\u003eIn some cases, session fixation attacks can be used to escalate privileges within a web application. By fixing a session identifier with higher\nprivileges, an attacker can bypass access controls and gain administrative or privileged access to the application. This can lead to unauthorized\nmodifications, data manipulation, or even complete compromise of the application and its underlying systems.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eUpon user authentication, it is crucial to regenerate the session identifier to prevent fixation attacks. Passport provides a mechanism to achieve\nthis by using the \u003ccode\u003ereq.session.regenerate()\u003c/code\u003e method. By calling this method after successful authentication, you can ensure that each user\nis assigned a new and unique session ID.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\napp.post(\u0027/login\u0027,\n  passport.authenticate(\u0027local\u0027, { failureRedirect: \u0027/login\u0027 }),\n  function(req, res) {\n    // Noncompliant - no session.regenerate after login\n    res.redirect(\u0027/\u0027);\n  });\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\napp.post(\u0027/login\u0027,\n  passport.authenticate(\u0027local\u0027, { failureRedirect: \u0027/login\u0027 }),\n  function(req, res) {\n    let prevSession \u003d req.session;\n    req.session.regenerate((err) \u003d\u0026gt; {\n      Object.assign(req.session, prevSession);\n      res.redirect(\u0027/\u0027);\n    });\n  });\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThe protection works by ensuring that the session identifier, which is used to identify and track a userâ€™s session, is changed or regenerated\nduring the authentication process.\u003c/p\u003e\n\u003cp\u003eHereâ€™s how session fixation protection typically works:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e When a user visits a website or logs in, a session is created for them. This session is assigned a unique session identifier, which is stored\n  in a cookie or passed through URL parameters. \u003c/li\u003e\n  \u003cli\u003e In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. This allows\n  the attacker to potentially gain unauthorized access to the userâ€™s session. \u003c/li\u003e\n  \u003cli\u003e To protect against session fixation attacks, session fixation protection mechanisms come into play during the authentication process. When a\n  user successfully authenticates, this mechanism generates a new session identifier for the userâ€™s session. \u003c/li\u003e\n  \u003cli\u003e The old session identifier, which may have been manipulated by the attacker, is invalidated and no longer associated with the userâ€™s session.\n  This ensures that any attempts by the attacker to use the fixed session identifier are rendered ineffective. \u003c/li\u003e\n  \u003cli\u003e The user is then assigned the new session identifier, which is used for subsequent requests and session tracking. This new session identifier\n  is typically stored in a new session cookie or passed through URL parameters. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy regenerating the session identifier upon authentication, session fixation protection helps ensure that the userâ€™s session is tied to a new,\nsecure identifier that the attacker cannot predict or control. This mitigates the risk of an attacker gaining unauthorized access to the userâ€™s\nsession and helps maintain the integrity and security of the applicationâ€™s session management process.\u003c/p\u003e",
        "context": {
          "key": "passport",
          "displayName": "Passport"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Express.js Documentation - \u003ca href\u003d\"http://expressjs.com/en/resources/middleware/session.html\"\u003eexpress-session\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://medium.com/passportjs/fixing-session-fixation-b2b68619c51d\"\u003eFixing Session Fixation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\"\u003eOWASP Top 10 2017 Category A2\u003c/a\u003e -\n  Broken Authentication \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Session_fixation\"\u003eOWASP Sesssion Fixation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/384\"\u003eMITRE, CWE-384\u003c/a\u003e - Session Fixation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3699",
    "name": "The return value of void functions should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule raises an issue when a function call result is used, even though the function does not return anything.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a function in JavaScript does not have a return statement or if it has a return statement without a value, it implicitly returns\n\u003ccode\u003eundefined\u003c/code\u003e. This means that a function without a return statement or with an empty return statement is, in a way, a \"void\" function, as it\ndoesnâ€™t return any specific value.\u003c/p\u003e\n\u003cp\u003eTherefore, attempting to use the return value of a void function in JavaScript is meaningless, and it can lead to unexpected behavior or\nerrors.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nlet a \u003d foo(); // Noncompliant: Assigning the return value of a void function\n\u003c/pre\u003e\n\u003cp\u003eYou should not use in any way the return value of a void function.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nfoo();\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\n  global property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a function call result is used, even though the function does not return anything.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a function in JavaScript does not have a return statement or if it has a return statement without a value, it implicitly returns\n\u003ccode\u003eundefined\u003c/code\u003e. This means that a function without a return statement or with an empty return statement is, in a way, a \"void\" function, as it\ndoesnâ€™t return any specific value.\u003c/p\u003e\n\u003cp\u003eTherefore, attempting to use the return value of a void function in JavaScript is meaningless, and it can lead to unexpected behavior or\nerrors.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nlet a \u003d foo(); // Noncompliant: Assigning the return value of a void function\n\u003c/pre\u003e\n\u003cp\u003eYou should not use in any way the return value of a void function.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nfoo();\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"\u003e\u003ccode\u003eundefined\u003c/code\u003e\n  global property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2392",
    "name": "Variables should be used in the blocks where they are declared",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evar\u003c/code\u003e statement declares variables that are function-scoped or globally-scoped. \u003ccode\u003evar\u003c/code\u003e declarations are hoisted, meaning\ndeclaring a variable anywhere in the code is equivalent to declaring it at the top of the function or the script.\u003c/p\u003e\n\u003cp\u003eEven if hoisted, it is still recommended to declare the variable inside the block it is used. This improves readability and maintainability because\nit makes it clear where the variable is being used. The code then becomes easier to understand and follow, especially for other developers who may be\nworking on the same codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething(a, b) {\n  if (a \u0026gt; b) {\n    var x \u003d a - b;  // Noncompliant: \u0027x\u0027 is used later outside this block\n  }\n\n  if (a \u0026gt; 4) {\n    console.log(x);\n  }\n\n  for (var i \u003d 0; i \u0026lt; m; i++) { // Noncompliant: both loops use same variable\n  }\n\n  for (var i \u003d 0; i \u0026lt; n; i++) {\n  }\n\n  return a + b;\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen \u003ccode\u003evar\u003c/code\u003e declaration is used outside of a block, the declaration should be done at the uppermost level where it is used. When\npossible, use \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e, which allow for block-scoped variables.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(a, b) {\n  var x;\n\n  if (a \u0026gt; b) {\n    x \u003d a - b;\n  }\n\n  if (a \u0026gt; 4) {\n    console.log(x);\n  }\n\n  for (let i \u003d 0; i \u0026lt; m; i++) {\n  }\n\n  for (let i \u003d 0; i \u0026lt; n; i++) {\n  }\n\n\n  return a + b;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003e\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003eHoisting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003evar\u003c/code\u003e statement declares variables that are function-scoped or globally-scoped. \u003ccode\u003evar\u003c/code\u003e declarations are hoisted, meaning\ndeclaring a variable anywhere in the code is equivalent to declaring it at the top of the function or the script.\u003c/p\u003e\n\u003cp\u003eEven if hoisted, it is still recommended to declare the variable inside the block it is used. This improves readability and maintainability because\nit makes it clear where the variable is being used. The code then becomes easier to understand and follow, especially for other developers who may be\nworking on the same codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething(a, b) {\n  if (a \u0026gt; b) {\n    var x \u003d a - b;  // Noncompliant: \u0027x\u0027 is used later outside this block\n  }\n\n  if (a \u0026gt; 4) {\n    console.log(x);\n  }\n\n  for (var i \u003d 0; i \u0026lt; m; i++) { // Noncompliant: both loops use same variable\n  }\n\n  for (var i \u003d 0; i \u0026lt; n; i++) {\n  }\n\n  return a + b;\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen \u003ccode\u003evar\u003c/code\u003e declaration is used outside of a block, the declaration should be done at the uppermost level where it is used. When\npossible, use \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e, which allow for block-scoped variables.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(a, b) {\n  var x;\n\n  if (a \u0026gt; b) {\n    x \u003d a - b;\n  }\n\n  if (a \u0026gt; 4) {\n    console.log(x);\n  }\n\n  for (let i \u003d 0; i \u0026lt; m; i++) {\n  }\n\n  for (let i \u003d 0; i \u0026lt; n; i++) {\n  }\n\n\n  return a + b;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Scope\"\u003eScope\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003e\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\"\u003eHoisting\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6750",
    "name": "The return value of \"ReactDOM.render\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, the \u003ccode\u003eReactDOM.render()\u003c/code\u003e method is used to render a React component into a DOM element. It has a return value, but itâ€™s\ngenerally recommended not to use it. The method might return a reference to the root \u003ccode\u003eReactComponent\u003c/code\u003e instance, but it can be unpredictable\nand may not always be useful. Indeed, the return value can vary depending on the version of React youâ€™re using and the specific circumstances in which\nitâ€™s called.\u003c/p\u003e\n\u003cpre\u003e\nconst instance \u003d ReactDOM.render(\u0026lt;App /\u0026gt;, document.body); // Noncompliant: using the return value of \u0027ReactDOM.render\u0027\ndoSomething(instance);\n\u003c/pre\u003e\n\u003cpre\u003e\nReactDOM.render(\u0026lt;App /\u0026gt;, document.body);\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, if you really need a reference to the root \u003ccode\u003eReactComponent\u003c/code\u003e instance, the preferred solution is to attach a \"callback\nref\" to the root element.\u003c/p\u003e\n\u003cpre\u003e\nReactDOM.render(\u0026lt;App /\u0026gt;, document.body, callbackRef);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/render\"\u003eReactDom#render\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/referencing-values-with-refs#adding-a-ref-to-your-component\"\u003eAdding a ref to your\n  component\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, the \u003ccode\u003eReactDOM.render()\u003c/code\u003e method is used to render a React component into a DOM element. It has a return value, but itâ€™s\ngenerally recommended not to use it. The method might return a reference to the root \u003ccode\u003eReactComponent\u003c/code\u003e instance, but it can be unpredictable\nand may not always be useful. Indeed, the return value can vary depending on the version of React youâ€™re using and the specific circumstances in which\nitâ€™s called.\u003c/p\u003e\n\u003cpre\u003e\nconst instance \u003d ReactDOM.render(\u0026lt;App /\u0026gt;, document.body); // Noncompliant: using the return value of \u0027ReactDOM.render\u0027\ndoSomething(instance);\n\u003c/pre\u003e\n\u003cpre\u003e\nReactDOM.render(\u0026lt;App /\u0026gt;, document.body);\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, if you really need a reference to the root \u003ccode\u003eReactComponent\u003c/code\u003e instance, the preferred solution is to attach a \"callback\nref\" to the root element.\u003c/p\u003e\n\u003cpre\u003e\nReactDOM.render(\u0026lt;App /\u0026gt;, document.body, callbackRef);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/render\"\u003eReactDom#render\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/referencing-values-with-refs#adding-a-ref-to-your-component\"\u003eAdding a ref to your\n  component\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6638",
    "name": "Binary expressions should not always return the same value",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eComparisons that always evaluate to true or to false, logical expressions that either always or never short-circuit and comparisons to a newly\nconstructed object should not be used.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn expression that always produces the same result, regardless of the inputs, is unnecessary and likely indicates a programmerâ€™s error. This can\ncome from\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e confusing operator precedence \u003c/li\u003e\n  \u003cli\u003e expecting strict equality between different types \u003c/li\u003e\n  \u003cli\u003e expecting objects to be compared by value \u003c/li\u003e\n  \u003cli\u003e expecting empty objects to be \u003ccode\u003efalse\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e mistyping \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e for \u003ccode\u003eâ‡’\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis can also happen when you put an assignment in a logical sub-expression. While not strictly a bug, this practice is confusing and should be\navoided.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReview the code around the issue to find out why the expression always produces the same result. Pay attention to the operator precedence,\ncomparing objects of different types, and comparing objects by reference (not by value!).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n!foo \u003d\u003d null;\na + b ?? c;\nx \u003d\u003d\u003d [];\n(foo\u003d0) \u0026amp;\u0026amp; bar;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo !\u003d null;\na + (b ?? c);\nx.length \u003d\u003d\u003d 0;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eComparisons that always evaluate to true or to false, logical expressions that either always or never short-circuit and comparisons to a newly\nconstructed object should not be used.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn expression that always produces the same result, regardless of the inputs, is unnecessary and likely indicates a programmerâ€™s error. This can\ncome from\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e confusing operator precedence \u003c/li\u003e\n  \u003cli\u003e expecting strict equality between different types \u003c/li\u003e\n  \u003cli\u003e expecting objects to be compared by value \u003c/li\u003e\n  \u003cli\u003e expecting empty objects to be \u003ccode\u003efalse\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e mistyping \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e for \u003ccode\u003eâ‡’\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis can also happen when you put an assignment in a logical sub-expression. While not strictly a bug, this practice is confusing and should be\navoided.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReview the code around the issue to find out why the expression always produces the same result. Pay attention to the operator precedence,\ncomparing objects of different types, and comparing objects by reference (not by value!).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n!foo \u003d\u003d null;\na + b ?? c;\nx \u003d\u003d\u003d [];\n(foo\u003d0) \u0026amp;\u0026amp; bar;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfoo !\u003d null;\na + (b ?? c);\nx.length \u003d\u003d\u003d 0;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3001",
    "name": "\"delete\" should be used only with object properties",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003edelete\u003c/code\u003e operator is used to remove a property from an object. It only affects its \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"\u003eown\u003c/a\u003e properties. There are two valid ways to\nremove a property:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Using the dot notation: \u003ccode\u003edelete object.property\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Using the bracket notation: \u003ccode\u003edelete object[property]\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003edelete\u003c/code\u003e will throw a \u003ccode\u003eTypeError\u003c/code\u003e in strict mode if the property is a non-configurable property.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edelete identifier\u003c/code\u003e may work if \u003ccode\u003eidentifier\u003c/code\u003e is a \u003cstrong\u003econfigurable\u003c/strong\u003e property of the global object. For\n\u003ccode\u003eidentifier\u003c/code\u003e to be \u003cstrong\u003econfigurable\u003c/strong\u003e, it should have been declared directly as a \u003ccode\u003eglobalThis\u003c/code\u003e property\n(\u003ccode\u003eglobalThis.identifier \u003d 1\u003c/code\u003e). This form is not common practice and should be avoided. Use \u003ccode\u003edelete globalThis.identifier\u003c/code\u003e\ninstead if needed.\u003c/p\u003e\n\u003cp\u003eAside from that case, deleting variables, including function parameters, never works:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Variables declared with \u003ccode\u003evar\u003c/code\u003e cannot be deleted from the global or a functionâ€™s scope, because while they may be attached to the\n  global object, they are \u003cstrong\u003enon-configurable\u003c/strong\u003e. In CommonJS and ECMAScript modules, top-level variable declarations are scoped to the\n  module and not attached to the global object. \u003c/li\u003e\n  \u003cli\u003e Variables declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e are not attached to any object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar x \u003d 1;\ndelete x; // Noncompliant: depending on the context, this does nothing or throws TypeError\n\nfunction foo(){}\ndelete foo; // Noncompliant: depending on the context, this does nothing or throws TypeError\n\u003c/pre\u003e\n\u003cp\u003eAvoid using the \u003ccode\u003edelete identifier\u003c/code\u003e form. Instead, use one of the valid forms.\u003c/p\u003e\n\u003cpre\u003e\nvar obj \u003d {\n  x: 1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj[\u0027x\u0027];\ndelete obj.foo;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Global_object\"\u003eGlobal object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003e\u003ccode\u003eglobalThis\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\"\u003eECMAScript modules\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/modules.html\"\u003eCommonJS modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003edelete\u003c/code\u003e operator is used to remove a property from an object. It only affects its \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"\u003eown\u003c/a\u003e properties. There are two valid ways to\nremove a property:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Using the dot notation: \u003ccode\u003edelete object.property\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Using the bracket notation: \u003ccode\u003edelete object[property]\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003edelete\u003c/code\u003e will throw a \u003ccode\u003eTypeError\u003c/code\u003e in strict mode if the property is a non-configurable property.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edelete identifier\u003c/code\u003e may work if \u003ccode\u003eidentifier\u003c/code\u003e is a \u003cstrong\u003econfigurable\u003c/strong\u003e property of the global object. For\n\u003ccode\u003eidentifier\u003c/code\u003e to be \u003cstrong\u003econfigurable\u003c/strong\u003e, it should have been declared directly as a \u003ccode\u003eglobalThis\u003c/code\u003e property\n(\u003ccode\u003eglobalThis.identifier \u003d 1\u003c/code\u003e). This form is not common practice and should be avoided. Use \u003ccode\u003edelete globalThis.identifier\u003c/code\u003e\ninstead if needed.\u003c/p\u003e\n\u003cp\u003eAside from that case, deleting variables, including function parameters, never works:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Variables declared with \u003ccode\u003evar\u003c/code\u003e cannot be deleted from the global or a functionâ€™s scope, because while they may be attached to the\n  global object, they are \u003cstrong\u003enon-configurable\u003c/strong\u003e. In CommonJS and ECMAScript modules, top-level variable declarations are scoped to the\n  module and not attached to the global object. \u003c/li\u003e\n  \u003cli\u003e Variables declared with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e are not attached to any object. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nvar x \u003d 1;\ndelete x; // Noncompliant: depending on the context, this does nothing or throws TypeError\n\nfunction foo(){}\ndelete foo; // Noncompliant: depending on the context, this does nothing or throws TypeError\n\u003c/pre\u003e\n\u003cp\u003eAvoid using the \u003ccode\u003edelete identifier\u003c/code\u003e form. Instead, use one of the valid forms.\u003c/p\u003e\n\u003cpre\u003e\nvar obj \u003d {\n  x: 1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj[\u0027x\u0027];\ndelete obj.foo;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Global_object\"\u003eGlobal object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\"\u003e\u003ccode\u003eglobalThis\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\"\u003eECMAScript modules\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/modules.html\"\u003eCommonJS modules\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1186",
    "name": "Functions should not be empty",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis does not raise an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function expressions and arrow functions as they can denote default values \u003c/li\u003e\n  \u003cli\u003e Empty functions with a name starting with the prefix \u003ccode\u003eon\u003c/code\u003e like \u003ccode\u003eonClick\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstatic defaultProps \u003d {\n  listStyle: () \u003d\u0026gt; {}\n};\n\nfunction onClick() {\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction shouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\nfunction notImplemented() {  // Noncompliant - method is empty\n}\n\nfunction emptyOnPurpose() {  // Noncompliant - method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction shouldNotBeEmpty() {\n  doSomething();\n}\n\nfunction notImplemented() {\n  throw new Error(\"notImplemented() cannot be performed because ...\");\n}\n\nfunction emptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis does not raise an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Function expressions and arrow functions as they can denote default values \u003c/li\u003e\n  \u003cli\u003e Empty functions with a name starting with the prefix \u003ccode\u003eon\u003c/code\u003e like \u003ccode\u003eonClick\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nstatic defaultProps \u003d {\n  listStyle: () \u003d\u0026gt; {}\n};\n\nfunction onClick() {\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction shouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\nfunction notImplemented() {  // Noncompliant - method is empty\n}\n\nfunction emptyOnPurpose() {  // Noncompliant - method is empty\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction shouldNotBeEmpty() {\n  doSomething();\n}\n\nfunction notImplemented() {\n  throw new Error(\"notImplemented() cannot be performed because ...\");\n}\n\nfunction emptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6754",
    "name": "The return value of \"useState\" should be destructured and named symmetrically",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, \u003ccode\u003euseState\u003c/code\u003e is a hook that allows functional components to manage and update state in a manner similar to class components.\nWhen you use the \u003ccode\u003euseState\u003c/code\u003e hook, it returns an array with two values: the current state value and a function to update that state\nvalue.\u003c/p\u003e\n\u003cp\u003eDestructuring these values and naming them symmetrically (i.e., using consistent variable names for both the current state and the update function)\nis a recommended best practice:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When you destructure and name the values symmetrically, it makes your code more readable and self-explanatory. Other developers can quickly\n  understand the purpose of each variable without needing to refer back to the \u003ccode\u003euseState\u003c/code\u003e function call. \u003c/li\u003e\n  \u003cli\u003e Following a naming convention where the state variable and its corresponding update function have similar names is a common practice in the\n  React community. It helps maintain consistency and makes it easier for others to understand your code. \u003c/li\u003e\n  \u003cli\u003e If you donâ€™t name the variables symmetrically, it can lead to confusion, especially in larger components or when multiple state variables are\n  involved. You might accidentally use the wrong variable when updating the state, which can result in bugs that are hard to track down. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \u0027react\u0027;\nfunction MyComponent() {\n  const [count, update] \u003d useState(0); // Noncompliant\n  return \u0026lt;div onClick\u003d{() \u003d\u0026gt; update(count + 1)}\u0026gt;{count}\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should destructure the return value of \u003ccode\u003euseState\u003c/code\u003e calls in terms of the current state and a function to update that state and name\nthem symmetrically.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \u0027react\u0027;\nfunction MyComponent() {\n  const [count, setCount] \u003d useState(0);\n  return \u0026lt;div onClick\u003d{() \u003d\u0026gt; setCount(count + 1)}\u0026gt;{count}\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, \u003ccode\u003euseState\u003c/code\u003e is a hook that allows functional components to manage and update state in a manner similar to class components.\nWhen you use the \u003ccode\u003euseState\u003c/code\u003e hook, it returns an array with two values: the current state value and a function to update that state\nvalue.\u003c/p\u003e\n\u003cp\u003eDestructuring these values and naming them symmetrically (i.e., using consistent variable names for both the current state and the update function)\nis a recommended best practice:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When you destructure and name the values symmetrically, it makes your code more readable and self-explanatory. Other developers can quickly\n  understand the purpose of each variable without needing to refer back to the \u003ccode\u003euseState\u003c/code\u003e function call. \u003c/li\u003e\n  \u003cli\u003e Following a naming convention where the state variable and its corresponding update function have similar names is a common practice in the\n  React community. It helps maintain consistency and makes it easier for others to understand your code. \u003c/li\u003e\n  \u003cli\u003e If you donâ€™t name the variables symmetrically, it can lead to confusion, especially in larger components or when multiple state variables are\n  involved. You might accidentally use the wrong variable when updating the state, which can result in bugs that are hard to track down. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport { useState } from \u0027react\u0027;\nfunction MyComponent() {\n  const [count, update] \u003d useState(0); // Noncompliant\n  return \u0026lt;div onClick\u003d{() \u003d\u0026gt; update(count + 1)}\u0026gt;{count}\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e\n\u003cp\u003eYou should destructure the return value of \u003ccode\u003euseState\u003c/code\u003e calls in terms of the current state and a function to update that state and name\nthem symmetrically.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { useState } from \u0027react\u0027;\nfunction MyComponent() {\n  const [count, setCount] \u003d useState(0);\n  return \u0026lt;div onClick\u003d{() \u003d\u0026gt; setCount(count + 1)}\u0026gt;{count}\u0026lt;/div\u0026gt;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/useState\"\u003euseState\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1066",
    "name": "Mergeable \"if\" statements should be combined",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nif (x !\u003d undefined) {\n  if (y \u003d\u003d\u003d 2) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nif (x !\u003d undefined \u0026amp;\u0026amp; y \u003d\u003d\u003d 2) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif (file !\u003d undefined) {\n  if (file.isFile() || file.isDirectory()) {        // Noncompliant\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nfunction isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n\n/* ... */\n\nif (file. !\u003d undefined \u0026amp;\u0026amp; isFileOrDirectory(file)) { // Compliant\n  /* ... */\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nif (x !\u003d undefined) {\n  if (y \u003d\u003d\u003d 2) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nif (x !\u003d undefined \u0026amp;\u0026amp; y \u003d\u003d\u003d 2) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nif (file !\u003d undefined) {\n  if (file.isFile() || file.isDirectory()) {        // Noncompliant\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nfunction isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n\n/* ... */\n\nif (file. !\u003d undefined \u0026amp;\u0026amp; isFileOrDirectory(file)) { // Compliant\n  /* ... */\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [
      "javascript:CollapsibleIfStatements"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3003",
    "name": "Comparison operators should not be used with strings",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of comparison operators (\u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar appleNumber \u003d \"123\";\nvar orangeNumber \u003d \"45\";\nif (appleNumber \u0026lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert(\"There are more oranges\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar appleNumber \u003d \"123\";\nvar orangeNumber \u003d \"45\";\nif (Number(appleNumber) \u0026lt; Number(orangeNumber)) {\n  alert(\"There are more oranges\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores string comparisons occurring in the callback of a sort invocation, e.g.:\u003c/p\u003e\n\u003cpre\u003e\nconst fruits \u003d [\u0027orange\u0027, \u0027apple\u0027, \u0027banana\u0027];\nfruits.sort((a, b) \u003d\u0026gt; a \u0026lt; b);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of comparison operators (\u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003d\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar appleNumber \u003d \"123\";\nvar orangeNumber \u003d \"45\";\nif (appleNumber \u0026lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert(\"There are more oranges\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar appleNumber \u003d \"123\";\nvar orangeNumber \u003d \"45\";\nif (Number(appleNumber) \u0026lt; Number(orangeNumber)) {\n  alert(\"There are more oranges\");\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores string comparisons occurring in the callback of a sort invocation, e.g.:\u003c/p\u003e\n\u003cpre\u003e\nconst fruits \u003d [\u0027orange\u0027, \u0027apple\u0027, \u0027banana\u0027];\nfruits.sort((a, b) \u003d\u0026gt; a \u0026lt; b);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5542",
    "name": "Encryption algorithms should be used with secure mode and padding scheme",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-128-CBC\", key, iv); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-256-GCM\", key, iv);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-128-CBC\", key, iv); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-256-GCM\", key, iv);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1067",
    "name": "Expressions should not be too complex",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expressionâ€™s complexity should not become too high to keep the code readable.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expressionâ€™s complexity should not become too high to keep the code readable.\u003c/p\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of allowed conditional operators in an expression",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "3"
    },
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6757",
    "name": "\"this\" should not be used in functional components",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReferring to \u003ccode\u003ethis\u003c/code\u003e in React functional components would be an error because the components are just regular JavaScript functions and do\nnot have an object associated with them. Functional components receive their props as a first argument to the component function, so you can access\nthem directly, and it is a common practice to destructure them right away.\u003c/p\u003e\n\u003cpre\u003e\nfunction UserProfile({firstName, lastName}){\n    return (\n        \u0026lt;div className\u003d\"user\"\u0026gt;{firstName} {lastName}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eReact also supports legacy class-based components, where \u003ccode\u003ethis\u003c/code\u003e keyword refers to the component instance object, but this style of\nwriting components is no longer recommended, and mixing it with functional components will lead to errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent(props){\n    const foo \u003d this.props.bar; // Noncompliant: remove \u0027this\u0027\n    return (\n        \u0026lt;div\u0026gt;{foo}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, remove references to \u003ccode\u003ethis\u003c/code\u003e from your functional component code. Make also sure you are not mixing functional and\nclass-based component styles.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent({bar}){\n    const foo \u003d bar;\n    return (\n        \u0026lt;div\u0026gt;{foo}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/your-first-component#defining-a-component\"\u003eDefining a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component\"\u003eLegacy class components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReferring to \u003ccode\u003ethis\u003c/code\u003e in React functional components would be an error because the components are just regular JavaScript functions and do\nnot have an object associated with them. Functional components receive their props as a first argument to the component function, so you can access\nthem directly, and it is a common practice to destructure them right away.\u003c/p\u003e\n\u003cpre\u003e\nfunction UserProfile({firstName, lastName}){\n    return (\n        \u0026lt;div className\u003d\"user\"\u0026gt;{firstName} {lastName}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eReact also supports legacy class-based components, where \u003ccode\u003ethis\u003c/code\u003e keyword refers to the component instance object, but this style of\nwriting components is no longer recommended, and mixing it with functional components will lead to errors.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction MyComponent(props){\n    const foo \u003d this.props.bar; // Noncompliant: remove \u0027this\u0027\n    return (\n        \u0026lt;div\u0026gt;{foo}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the issue, remove references to \u003ccode\u003ethis\u003c/code\u003e from your functional component code. Make also sure you are not mixing functional and\nclass-based component styles.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction MyComponent({bar}){\n    const foo \u003d bar;\n    return (\n        \u0026lt;div\u0026gt;{foo}\u0026lt;/div\u0026gt;\n    );\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/your-first-component#defining-a-component\"\u003eDefining a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component\"\u003eLegacy class components\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1068",
    "name": "Unused private class members should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe private class members were introduced in ES2022 and use \u003ccode\u003e#\u003c/code\u003e (hash) symbol prefix. It is possible to declare private fields, methods,\ngetters and setters as well as their static counterparts. The private members are only accessible from within the current class body and arenâ€™t\ninherited by subclasses. They also cannot be removed with \u003ccode\u003edelete\u003c/code\u003e operator.\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n    #foo \u003d 123;\n    bar(){\n        return this.#foo; // ok\n    }\n}\n\nconst obj \u003d new MyClass();\nobj.#foo \u003d 345; // error: #foo is not accessible outside of the class\n\u003c/pre\u003e\n\u003cp\u003ePrivate class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring and should be\ncorrected or removed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass {\n    #privateField1;\n    #privateField2;  // Noncompliant: #privateField2 is unused\n    #privateMethod(){} // Noncompliant: #privateMethod is unused\n    publicMethod(){\n        return this.#privateField1;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove unused private member of the class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass {\n    #privateField1;\n    publicMethod(){\n        return this.#privateField1;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\"\u003ePrivate class\n  features\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe private class members were introduced in ES2022 and use \u003ccode\u003e#\u003c/code\u003e (hash) symbol prefix. It is possible to declare private fields, methods,\ngetters and setters as well as their static counterparts. The private members are only accessible from within the current class body and arenâ€™t\ninherited by subclasses. They also cannot be removed with \u003ccode\u003edelete\u003c/code\u003e operator.\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n    #foo \u003d 123;\n    bar(){\n        return this.#foo; // ok\n    }\n}\n\nconst obj \u003d new MyClass();\nobj.#foo \u003d 345; // error: #foo is not accessible outside of the class\n\u003c/pre\u003e\n\u003cp\u003ePrivate class members that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring and should be\ncorrected or removed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyClass {\n    #privateField1;\n    #privateField2;  // Noncompliant: #privateField2 is unused\n    #privateMethod(){} // Noncompliant: #privateMethod is unused\n    publicMethod(){\n        return this.#privateField1;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove unused private member of the class.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyClass {\n    #privateField1;\n    publicMethod(){\n        return this.#privateField1;\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\"\u003ePrivate class\n  features\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\u003eClasses\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5547",
    "name": "Cipher algorithms should be robust",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Node.js\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"DES\", key, iv); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-256-GCM\", key, iv);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"DES\", key, iv); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst crypto \u003d require(\u0027crypto\u0027);\n\ncrypto.createCipheriv(\"AES-256-GCM\", key, iv);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e",
        "context": {
          "key": "node_js",
          "displayName": "Node.js"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eMITRE, CWE-327\u003c/a\u003e - Use of a Broken or Risky Cryptographic Algorithm \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6637",
    "name": "Unnecessary calls to \".bind()\" should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eUnnecessary calls to \u003ccode\u003e.bind()\u003c/code\u003e should not be used.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e.bind()\u003c/code\u003e method allows specifying the value of \u003ccode\u003ethis\u003c/code\u003e and, optionally, the values of some function arguments. However,\nif \u003ccode\u003ethis\u003c/code\u003e is not used in the function body, calls to \u003ccode\u003e.bind()\u003c/code\u003e do nothing and should be removed.\u003c/p\u003e\n\u003cp\u003eCalling \u003ccode\u003e.bind()\u003c/code\u003e on arrow functions is a bug because the value of \u003ccode\u003ethis\u003c/code\u003e does not change when \u003ccode\u003e.bind()\u003c/code\u003e is\napplied to arrow functions.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove calls to \u003ccode\u003e.bind()\u003c/code\u003e method.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d function fn() {\n    return 123;\n}.bind({value: 456}); // Noncompliant\n\n\nlet y \u003d (() \u003d\u0026gt; this.body).bind(document); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d (function callback() {\n    return this.body;\n}).bind(document); // ok, not an arrow function\n\n\nlet y \u003d (function print(x) {\n    console.log(x);\n}).bind(this, foo); // ok, binds argument\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003eFunction.prototype.bind()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eUnnecessary calls to \u003ccode\u003e.bind()\u003c/code\u003e should not be used.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003e.bind()\u003c/code\u003e method allows specifying the value of \u003ccode\u003ethis\u003c/code\u003e and, optionally, the values of some function arguments. However,\nif \u003ccode\u003ethis\u003c/code\u003e is not used in the function body, calls to \u003ccode\u003e.bind()\u003c/code\u003e do nothing and should be removed.\u003c/p\u003e\n\u003cp\u003eCalling \u003ccode\u003e.bind()\u003c/code\u003e on arrow functions is a bug because the value of \u003ccode\u003ethis\u003c/code\u003e does not change when \u003ccode\u003e.bind()\u003c/code\u003e is\napplied to arrow functions.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove calls to \u003ccode\u003e.bind()\u003c/code\u003e method.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d function fn() {\n    return 123;\n}.bind({value: 456}); // Noncompliant\n\n\nlet y \u003d (() \u003d\u0026gt; this.body).bind(document); // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d (function callback() {\n    return this.body;\n}).bind(document); // ok, not an arrow function\n\n\nlet y \u003d (function print(x) {\n    console.log(x);\n}).bind(this, foo); // ok, binds argument\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\"\u003e\u003ccode\u003eFunction.prototype.bind()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6756",
    "name": "\"setState\" should use a callback when referencing the previous state",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn React, calling \u003ccode\u003esetState\u003c/code\u003e is the primary way to update a componentâ€™s state. However, calling \u003ccode\u003esetState\u003c/code\u003e is often\nasynchronous. React batches state updates for performance reasons, which means that when you call \u003ccode\u003esetState\u003c/code\u003e, React doesnâ€™t immediately\nupdate the state and trigger a re-render. Instead, it schedules the update for later, and multiple \u003ccode\u003esetState\u003c/code\u003e calls within the same event\nhandler or function may be batched together. This can lead to unexpected behavior if you assume that state updates are immediate. Therefore, you\nshould not rely on their values for calculating the next state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction increment() {\n  this.setState({count: this.state.count + 1}); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eTo mitigate this, you should use functional updates when the new state depends on the previous state, ensuring that youâ€™re always working with the\nlatest state. This can be done with a second form of \u003ccode\u003esetState\u003c/code\u003e that accepts a function rather than an object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction increment() {\n  this.setState(prevState \u003d\u0026gt; ({count: prevState.count + 1}));\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate\"\u003esetState\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate-caveats\"\u003esetState caveats\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn React, calling \u003ccode\u003esetState\u003c/code\u003e is the primary way to update a componentâ€™s state. However, calling \u003ccode\u003esetState\u003c/code\u003e is often\nasynchronous. React batches state updates for performance reasons, which means that when you call \u003ccode\u003esetState\u003c/code\u003e, React doesnâ€™t immediately\nupdate the state and trigger a re-render. Instead, it schedules the update for later, and multiple \u003ccode\u003esetState\u003c/code\u003e calls within the same event\nhandler or function may be batched together. This can lead to unexpected behavior if you assume that state updates are immediate. Therefore, you\nshould not rely on their values for calculating the next state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction increment() {\n  this.setState({count: this.state.count + 1}); // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eTo mitigate this, you should use functional updates when the new state depends on the previous state, ensuring that youâ€™re always working with the\nlatest state. This can be done with a second form of \u003ccode\u003esetState\u003c/code\u003e that accepts a function rather than an object.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction increment() {\n  this.setState(prevState \u003d\u0026gt; ({count: prevState.count + 1}));\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate\"\u003esetState\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate-caveats\"\u003esetState caveats\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6635",
    "name": "Constructors should not return values",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eConstructors should not return values.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript allows returning a value from a class constructor. This obscure feature is rarely used and is more likely a bug than the developerâ€™s\nintention.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDo not return anything from the constructor.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass TextMessage {\n    constructor(msg) {\n        this.text \u003d msg;\n        return msg; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass TextMsg1 {\n    constructor(msg) {\n        this.text \u003d msg;\n    }\n}\n\n\nclass TextMsg2 {\n    constructor(msg) {\n        if (!msg) {\n            return; // ok to return nothing for flow control\n        }\n        this.text \u003d msg;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eConstructors should not return values.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript allows returning a value from a class constructor. This obscure feature is rarely used and is more likely a bug than the developerâ€™s\nintention.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDo not return anything from the constructor.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass TextMessage {\n    constructor(msg) {\n        this.text \u003d msg;\n        return msg; // Noncompliant\n    }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass TextMsg1 {\n    constructor(msg) {\n        this.text \u003d msg;\n    }\n}\n\n\nclass TextMsg2 {\n    constructor(msg) {\n        if (!msg) {\n            return; // ok to return nothing for flow control\n        }\n        this.text \u003d msg;\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"\u003econstructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2260",
    "name": "JavaScript parser failure",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:ParsingError"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1172",
    "name": "Unused function parameters should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the functionâ€™s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the functionâ€™s behavior will be the same, but the programmerâ€™s intention wonâ€™t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen \u003ccode\u003earguments\u003c/code\u003e is used in the function body, no parameter is reported as unused.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores all parameters with names starting with an underscore (\u003ccode\u003e_\u003c/code\u003e). This practice is often used to indicate that some\nparameter is intentionally unused. This practice is frequently seen in the TypeScript compiler, for example.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(_a, b) {\n  return compute(b);\n}\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developerâ€™s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(b) {\n  return compute(b);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(_a, b) {\n  return compute(b);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the functionâ€™s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the functionâ€™s behavior will be the same, but the programmerâ€™s intention wonâ€™t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eWhen \u003ccode\u003earguments\u003c/code\u003e is used in the function body, no parameter is reported as unused.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n\u003c/pre\u003e\n\u003cp\u003eThe rule also ignores all parameters with names starting with an underscore (\u003ccode\u003e_\u003c/code\u003e). This practice is often used to indicate that some\nparameter is intentionally unused. This practice is frequently seen in the TypeScript compiler, for example.\u003c/p\u003e\n\u003cpre\u003e\nfunction doSomething(_a, b) {\n  return compute(b);\n}\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developerâ€™s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(b) {\n  return compute(b);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething(_a, b) {\n  return compute(b);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [
      "javascript:UnusedFunctionArgument"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6509",
    "name": "Extra boolean casts should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, every value can be coerced into a boolean value: either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Values that are coerced into\n\u003ccode\u003etrue\u003c/code\u003e are said to be \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003e\u003cem\u003etruthy\u003c/em\u003e\u003c/a\u003e, and those coerced into\n\u003ccode\u003efalse\u003c/code\u003e are said to be \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003e\u003cem\u003efalsy\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExplicit conversion to a boolean can be done with double negation (\u003ccode\u003e!!\u003c/code\u003e) or a \u003ccode\u003eBoolean\u003c/code\u003e call. Depending on the context, this\nmay be redundant as JavaScript uses implicit type coercion and automatically converts values to booleans when used with logical operators, conditional\nstatements, or any boolean context.\u003c/p\u003e\n\u003cpre\u003e\nif (!!foo) { // Noncompliant: redundant \u0027!!\u0027\n    // ...\n}\n\nif (Boolean(foo)) {  // Noncompliant: redundant \u0027Boolean\u0027 call\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eA redundant boolean cast affects code readability. Not only the condition becomes more verbose but it also misleads the reader who might question\nthe intent behind the extra cast. The condition can be written without the Boolean cast.\u003c/p\u003e\n\u003cpre\u003e\nif (foo) {\n    // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\"\u003eBoolean\n  coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.alexdevero.com/truthy-falsy-values-in-javascript/\"\u003eAlex Devero, How Truthy and Falsy Values in JavaScript Work\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, every value can be coerced into a boolean value: either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Values that are coerced into\n\u003ccode\u003etrue\u003c/code\u003e are said to be \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003e\u003cem\u003etruthy\u003c/em\u003e\u003c/a\u003e, and those coerced into\n\u003ccode\u003efalse\u003c/code\u003e are said to be \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003e\u003cem\u003efalsy\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExplicit conversion to a boolean can be done with double negation (\u003ccode\u003e!!\u003c/code\u003e) or a \u003ccode\u003eBoolean\u003c/code\u003e call. Depending on the context, this\nmay be redundant as JavaScript uses implicit type coercion and automatically converts values to booleans when used with logical operators, conditional\nstatements, or any boolean context.\u003c/p\u003e\n\u003cpre\u003e\nif (!!foo) { // Noncompliant: redundant \u0027!!\u0027\n    // ...\n}\n\nif (Boolean(foo)) {  // Noncompliant: redundant \u0027Boolean\u0027 call\n    // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eA redundant boolean cast affects code readability. Not only the condition becomes more verbose but it also misleads the reader who might question\nthe intent behind the extra cast. The condition can be written without the Boolean cast.\u003c/p\u003e\n\u003cpre\u003e\nif (foo) {\n    // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion\"\u003eBoolean\n  coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003eFalsy\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.alexdevero.com/truthy-falsy-values-in-javascript/\"\u003eAlex Devero, How Truthy and Falsy Values in JavaScript Work\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5659",
    "name": "JWT should be signed and verified with strong cipher algorithms",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the userâ€™s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in jsonwebtoken\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of JWT encoding and decoding without a strong cipher algorithm.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.sign(payload, key, { algorithm: \u0027none\u0027 }); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.verify(token, key, {\n    expiresIn: 360000,\n    algorithms: [\u0027none\u0027] // Noncompliant\n}, callbackcheck);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.sign(payload, key, { algorithm: \u0027HS256\u0027 });\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.verify(token, key, {\n    expiresIn: 360000,\n    algorithms: [\u0027HS256\u0027]\n}, callbackcheck);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eAlways sign your tokens\u003c/h4\u003e\n\u003cp\u003eThe foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.\u003c/p\u003e\n\u003ch4\u003eChoose a strong cipher algorithm\u003c/h4\u003e\n\u003cp\u003eIt is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.\u003c/p\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWTâ€™s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your applicationâ€™s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eMITRE, CWE-347\u003c/a\u003e - Improper Verification of Cryptographic Signature \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the userâ€™s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of JWT encoding and decoding without a strong cipher algorithm.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.sign(payload, key, { algorithm: \u0027none\u0027 }); // Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.verify(token, key, {\n    expiresIn: 360000,\n    algorithms: [\u0027none\u0027] // Noncompliant\n}, callbackcheck);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.sign(payload, key, { algorithm: \u0027HS256\u0027 });\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst jwt \u003d require(\u0027jsonwebtoken\u0027);\n\njwt.verify(token, key, {\n    expiresIn: 360000,\n    algorithms: [\u0027HS256\u0027]\n}, callbackcheck);\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eAlways sign your tokens\u003c/h4\u003e\n\u003cp\u003eThe foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.\u003c/p\u003e\n\u003ch4\u003eChoose a strong cipher algorithm\u003c/h4\u003e\n\u003cp\u003eIt is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.\u003c/p\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWTâ€™s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your applicationâ€™s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e",
        "context": {
          "key": "jsonwebtoken",
          "displayName": "jsonwebtoken"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eOWASP Top 10 2021 Category A2\u003c/a\u003e - Cryptographic Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eMITRE, CWE-347\u003c/a\u003e - Improper Verification of Cryptographic Signature \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6748",
    "name": "React \"children\" should not be passed as prop",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using JSX the component children should be passed between opening and closing tags. Passing children in a \u003ccode\u003echildren\u003c/code\u003e prop may work\nsometimes, but will lead to errors if children are passed both as nested components and \u003ccode\u003echildren\u003c/code\u003e prop at the same time.\u003c/p\u003e\n\u003cp\u003eWhen not using JSX, the children should be passed to \u003ccode\u003ecreateElement()\u003c/code\u003e method as extra arguments after the \u003ccode\u003eprops\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div children\u003d\u0027Children\u0027 /\u0026gt;\n\u0026lt;Foo children\u003d{\u0026lt;Bar /\u0026gt;} /\u0026gt;\n\nReact.createElement(\"div\", { children: \u0027Children\u0027 })\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code, remove the \u003ccode\u003echildren\u003c/code\u003e prop and pass the children between opening and closing JSX tags or as extra arguments to\n\u003ccode\u003ecreateElement()\u003c/code\u003e function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div\u0026gt;Children\u0026lt;/div\u0026gt;\n\u0026lt;Foo\u0026gt;\u0026lt;Bar /\u0026gt;\u0026lt;/Foo\u0026gt;\n\nReact.createElement(\"div\", {}, \u0027Children\u0027);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using JSX the component children should be passed between opening and closing tags. Passing children in a \u003ccode\u003echildren\u003c/code\u003e prop may work\nsometimes, but will lead to errors if children are passed both as nested components and \u003ccode\u003echildren\u003c/code\u003e prop at the same time.\u003c/p\u003e\n\u003cp\u003eWhen not using JSX, the children should be passed to \u003ccode\u003ecreateElement()\u003c/code\u003e method as extra arguments after the \u003ccode\u003eprops\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div children\u003d\u0027Children\u0027 /\u0026gt;\n\u0026lt;Foo children\u003d{\u0026lt;Bar /\u0026gt;} /\u0026gt;\n\nReact.createElement(\"div\", { children: \u0027Children\u0027 })\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code, remove the \u003ccode\u003echildren\u003c/code\u003e prop and pass the children between opening and closing JSX tags or as extra arguments to\n\u003ccode\u003ecreateElement()\u003c/code\u003e function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div\u0026gt;Children\u0026lt;/div\u0026gt;\n\u0026lt;Foo\u0026gt;\u0026lt;Bar /\u0026gt;\u0026lt;/Foo\u0026gt;\n\nReact.createElement(\"div\", {}, \u0027Children\u0027);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/passing-props-to-a-component\"\u003ePassing Props to a Component\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6749",
    "name": "Redundant React fragments should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact fragments are a feature in React that allows you to group multiple elements together without adding an extra DOM element. They are a way to\nreturn multiple elements from a componentâ€™s render method without requiring a wrapping parent element.\u003c/p\u003e\n\u003cp\u003eHowever, a fragment is redundant if it contains only one child, or if it is the child of an HTML element.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;\u0026gt;\u0026lt;Foo /\u0026gt;\u0026lt;/\u0026gt;;    // Noncompliant: The fragment has only one child\n\u0026lt;p\u0026gt;\u0026lt;\u0026gt;foo\u0026lt;/\u0026gt;\u0026lt;/p\u0026gt;; // Noncompliant: The fragment is the child of the HTML element \u0027p\u0027\n\u003c/pre\u003e\n\u003cp\u003eYou can safely remove the redundant fragment while preserving the original behaviour.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Foo /\u0026gt;;\n\u0026lt;p\u0026gt;foo\u0026lt;/p\u0026gt;;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Fragment\"\u003eFragments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact fragments are a feature in React that allows you to group multiple elements together without adding an extra DOM element. They are a way to\nreturn multiple elements from a componentâ€™s render method without requiring a wrapping parent element.\u003c/p\u003e\n\u003cp\u003eHowever, a fragment is redundant if it contains only one child, or if it is the child of an HTML element.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;\u0026gt;\u0026lt;Foo /\u0026gt;\u0026lt;/\u0026gt;;    // Noncompliant: The fragment has only one child\n\u0026lt;p\u0026gt;\u0026lt;\u0026gt;foo\u0026lt;/\u0026gt;\u0026lt;/p\u0026gt;; // Noncompliant: The fragment is the child of the HTML element \u0027p\u0027\n\u003c/pre\u003e\n\u003cp\u003eYou can safely remove the redundant fragment while preserving the original behaviour.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Foo /\u0026gt;;\n\u0026lt;p\u0026gt;foo\u0026lt;/p\u0026gt;;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Fragment\"\u003eFragments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3353",
    "name": "Unchanged variables should be marked as \"const\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf a variable that is not supposed to change is not marked as \u003ccode\u003econst\u003c/code\u003e, it could be accidentally reassigned elsewhere in the code,\nleading to unexpected behavior and bugs that can be hard to track down.\u003c/p\u003e\n\u003cp\u003eBy declaring a variable as \u003ccode\u003econst\u003c/code\u003e, you ensure that its value remains constant throughout the code. It also signals to other developers\nthat this value is intended to remain constant. This can make the code easier to understand and maintain.\u003c/p\u003e\n\u003cp\u003eIn some cases, using \u003ccode\u003econst\u003c/code\u003e can lead to performance improvements. The compiler might be able to make optimizations knowing that the\nvalue of a \u003ccode\u003econst\u003c/code\u003e variable will not change.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMark the given variable with the \u003ccode\u003econst\u003c/code\u003e modifier.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction seek(input) {\n  let target \u003d 32;  // Noncompliant\n  for (const i of input) {\n    if (i \u003d\u003d\u003d target) {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction seek(input) {\n  const target \u003d 32;\n  for (const i of input) {\n    if (i \u003d\u003d\u003d target) {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getUrl(protocol, domain, path) { \u0026nbsp;\u0026nbsp;\u0026nbsp;\n  let\u0026nbsp;url; // Noncompliant\n  url \u003d `${protocol}/${domain}/${path}`;\n  return url;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction getUrl(protocol, domain, path) { \u0026nbsp;\n  const\u0026nbsp;url \u003d `${protocol}/${domain}/${path}`;\n  return url;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf a variable that is not supposed to change is not marked as \u003ccode\u003econst\u003c/code\u003e, it could be accidentally reassigned elsewhere in the code,\nleading to unexpected behavior and bugs that can be hard to track down.\u003c/p\u003e\n\u003cp\u003eBy declaring a variable as \u003ccode\u003econst\u003c/code\u003e, you ensure that its value remains constant throughout the code. It also signals to other developers\nthat this value is intended to remain constant. This can make the code easier to understand and maintain.\u003c/p\u003e\n\u003cp\u003eIn some cases, using \u003ccode\u003econst\u003c/code\u003e can lead to performance improvements. The compiler might be able to make optimizations knowing that the\nvalue of a \u003ccode\u003econst\u003c/code\u003e variable will not change.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMark the given variable with the \u003ccode\u003econst\u003c/code\u003e modifier.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction seek(input) {\n  let target \u003d 32;  // Noncompliant\n  for (const i of input) {\n    if (i \u003d\u003d\u003d target) {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction seek(input) {\n  const target \u003d 32;\n  for (const i of input) {\n    if (i \u003d\u003d\u003d target) {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction getUrl(protocol, domain, path) { \u0026nbsp;\u0026nbsp;\u0026nbsp;\n  let\u0026nbsp;url; // Noncompliant\n  url \u003d `${protocol}/${domain}/${path}`;\n  return url;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction getUrl(protocol, domain, path) { \u0026nbsp;\n  const\u0026nbsp;url \u003d `${protocol}/${domain}/${path}`;\n  return url;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6861",
    "name": "Mutable variables should not be exported",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, a mutable variable is one whose value can be changed after it has been initially set. This is in contrast to immutable variables,\nwhose values cannot be changed once they are set.\u003c/p\u003e\n\u003cp\u003eExporting mutable variables can lead to unpredictable behavior and bugs in your code. This is because any module that imports the variable can\nchange its value. If multiple modules import and change the value of the same variable, it can become difficult to track what the current value of the\nvariable is and which module changed it last.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf the value of the variable does not need to change, you can declare it as a constant using the \u003ccode\u003econst\u003c/code\u003e keyword. Alternatively, if you\nhave a group of related variables that need to be mutable, consider using a class to encapsulate them. You can then export an instance of the class,\nor a factory function that creates instances of the class.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nlet mutableVar \u003d \"initial value\";\n\nexport { mutableVar }; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nconst immutableVar \u003d \"constant value\";\nexport { immutableVar };\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  constructor() {\n    this.mutableVar \u003d \"initial value\";\n  }\n}\n\nexport function createMyClass() {\n  return new MyClass();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Mutable\"\u003eMutable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Immutable\"\u003eImmutable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, a mutable variable is one whose value can be changed after it has been initially set. This is in contrast to immutable variables,\nwhose values cannot be changed once they are set.\u003c/p\u003e\n\u003cp\u003eExporting mutable variables can lead to unpredictable behavior and bugs in your code. This is because any module that imports the variable can\nchange its value. If multiple modules import and change the value of the same variable, it can become difficult to track what the current value of the\nvariable is and which module changed it last.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf the value of the variable does not need to change, you can declare it as a constant using the \u003ccode\u003econst\u003c/code\u003e keyword. Alternatively, if you\nhave a group of related variables that need to be mutable, consider using a class to encapsulate them. You can then export an instance of the class,\nor a factory function that creates instances of the class.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nlet mutableVar \u003d \"initial value\";\n\nexport { mutableVar }; // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre\u003e\nconst immutableVar \u003d \"constant value\";\nexport { immutableVar };\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  constructor() {\n    this.mutableVar \u003d \"initial value\";\n  }\n}\n\nexport function createMyClass() {\n  return new MyClass();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003elet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003econst\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Mutable\"\u003eMutable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Immutable\"\u003eImmutable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6746",
    "name": "In React \"this.state\" should not be mutated directly",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact does not always propagate component state changes to the underlying DOM elements immediately. If you modify the state during an already\nongoing update cycle, the change may be delayed until the next update. React tries to keep \u003ccode\u003ethis.state\u003c/code\u003e in sync with what is currently in\nthe DOM, so you should never directly modify \u003ccode\u003ethis.state\u003c/code\u003e yourself. Instead, use the asynchronous \u003ccode\u003esetState\u003c/code\u003e method instead,\nwhich allows React to properly manage the current state, trigger the new update cycle, or batch the updates together if necessary.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003esetState()\u003c/code\u003e is a \u003cem\u003erequest\u003c/em\u003e to change the state, not an immediate update. For example, if multiple components are\nchanging the state in response to a user event, React will wait until the event handler has finished executing and then render all the changes in a\nsingle update. In other cases, the updates may be executed one at a time, so you should never make assumptions about how the component state will\nchange in response to your request.\u003c/p\u003e\n\u003cp\u003eIf your next state is a function of the current state, you should pass an updater function to the \u003ccode\u003esetState()\u003c/code\u003e that will give you access\nto the correct component state at the time of the execution.\u003c/p\u003e\n\u003cp\u003eThe only place where you should directly modify the state is during the component initialization in a constructor function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.Component {\n  constructor() {\n    super();\n    this.state \u003d {\n      count: 0\n    };\n  }\n\n  incrementCount() {\n    this.state.count++; // Noncompliant: direct mutation of state object\n  }\n\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Count: {this.state.count}\u0026lt;/p\u0026gt;\n        \u0026lt;button onClick\u003d{this.incrementCount}\u0026gt;Increment\u0026lt;/button\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix this code use \u003ccode\u003esetState()\u003c/code\u003e method instead of directly mutating the state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  constructor() {\n    super();\n    this.state \u003d {\n      count: 0\n    };\n  }\n\n  incrementCount() {\n    this.setState(prevState \u003d\u0026gt; ({\n      count: prevState.count + 1\n    }));\n  }\n\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Count: {this.state.count}\u0026lt;/p\u0026gt;\n        \u0026lt;button onClick\u003d{this.incrementCount}\u0026gt;Increment\u0026lt;/button\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate\"\u003e\u003ccode\u003esetState()\u003c/code\u003e method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/managing-state\"\u003eManaging state\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact does not always propagate component state changes to the underlying DOM elements immediately. If you modify the state during an already\nongoing update cycle, the change may be delayed until the next update. React tries to keep \u003ccode\u003ethis.state\u003c/code\u003e in sync with what is currently in\nthe DOM, so you should never directly modify \u003ccode\u003ethis.state\u003c/code\u003e yourself. Instead, use the asynchronous \u003ccode\u003esetState\u003c/code\u003e method instead,\nwhich allows React to properly manage the current state, trigger the new update cycle, or batch the updates together if necessary.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003esetState()\u003c/code\u003e is a \u003cem\u003erequest\u003c/em\u003e to change the state, not an immediate update. For example, if multiple components are\nchanging the state in response to a user event, React will wait until the event handler has finished executing and then render all the changes in a\nsingle update. In other cases, the updates may be executed one at a time, so you should never make assumptions about how the component state will\nchange in response to your request.\u003c/p\u003e\n\u003cp\u003eIf your next state is a function of the current state, you should pass an updater function to the \u003ccode\u003esetState()\u003c/code\u003e that will give you access\nto the correct component state at the time of the execution.\u003c/p\u003e\n\u003cp\u003eThe only place where you should directly modify the state is during the component initialization in a constructor function.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass MyComponent extends React.Component {\n  constructor() {\n    super();\n    this.state \u003d {\n      count: 0\n    };\n  }\n\n  incrementCount() {\n    this.state.count++; // Noncompliant: direct mutation of state object\n  }\n\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Count: {this.state.count}\u0026lt;/p\u0026gt;\n        \u0026lt;button onClick\u003d{this.incrementCount}\u0026gt;Increment\u0026lt;/button\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix this code use \u003ccode\u003esetState()\u003c/code\u003e method instead of directly mutating the state.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass MyComponent extends React.Component {\n  constructor() {\n    super();\n    this.state \u003d {\n      count: 0\n    };\n  }\n\n  incrementCount() {\n    this.setState(prevState \u003d\u0026gt; ({\n      count: prevState.count + 1\n    }));\n  }\n\n  render() {\n    return (\n      \u0026lt;div\u0026gt;\n        \u0026lt;p\u0026gt;Count: {this.state.count}\u0026lt;/p\u0026gt;\n        \u0026lt;button onClick\u003d{this.incrementCount}\u0026gt;Increment\u0026lt;/button\u0026gt;\n      \u0026lt;/div\u0026gt;\n    );\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react/Component#setstate\"\u003e\u003ccode\u003esetState()\u003c/code\u003e method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/learn/managing-state\"\u003eManaging state\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4326",
    "name": "\"await\" should not be used redundantly",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn \u003ccode\u003easync\u003c/code\u003e function always wraps the return value in a \u003ccode\u003ePromise\u003c/code\u003e. Using \u003ccode\u003ereturn await\u003c/code\u003e is not required and comes\nat an extra performance cost. However, you might wish to keep it as it preserves the function call in the stack trace in case an error is thrown\nasynchronously.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nasync function foo() {\n  // ...\n}\n\nasync function bar() {\n  // ...\n  return await foo(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nasync function foo() {\n  // ...\n}\n\nasync function bar() {\n  // ...\n  return foo();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn \u003ccode\u003easync\u003c/code\u003e function always wraps the return value in a \u003ccode\u003ePromise\u003c/code\u003e. Using \u003ccode\u003ereturn await\u003c/code\u003e is not required and comes\nat an extra performance cost. However, you might wish to keep it as it preserves the function call in the stack trace in case an error is thrown\nasynchronously.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nasync function foo() {\n  // ...\n}\n\nasync function bar() {\n  // ...\n  return await foo(); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nasync function foo() {\n  // ...\n}\n\nasync function bar() {\n  // ...\n  return foo();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6747",
    "name": "JSX elements should not use unknown properties and attributes",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReact components often render HTML elements, and developers can pass various props (properties) to these elements. However, React has its own set\nof supported properties and attributes, and itâ€™s essential to avoid using unknown or invalid properties when working with such elements to prevent\nunexpected behavior at runtime.\u003c/p\u003e\n\u003cp\u003eThe rule reports any instances where you are using a property or attribute that is not recognized by React or the HTML element you are\nrendering.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReplace any unknown property or attribute with a known one, or add it to the list of exceptions.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Welcome extends React.Component {\n  render() {\n    return \u0026lt;div class\u003d\"hello\"\u0026gt;Hello, World!\u0026lt;/div\u0026gt;; // Noncompliant: \u0027class\u0027 is a reserved keyword in JavaScript\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Welcome extends React.Component {\n  render() {\n    return \u0026lt;div className\u003d\"hello\"\u0026gt;Hello, World!\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Image \u003d \u0026lt;img source\u003d{myImage} /\u0026gt;; // Noncompliant: The \u0027img\u0027 tag does not recognize any \u0027source\u0027 attribute\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst Image \u003d \u0026lt;img src\u003d{myImage} /\u0026gt;;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\"\u003eHTML attribute reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\"\u003eHTML global attributes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\"\u003eSVG attribute reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*\"\u003edata-*\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#common-props\"\u003eStandard DOM props\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReact components often render HTML elements, and developers can pass various props (properties) to these elements. However, React has its own set\nof supported properties and attributes, and itâ€™s essential to avoid using unknown or invalid properties when working with such elements to prevent\nunexpected behavior at runtime.\u003c/p\u003e\n\u003cp\u003eThe rule reports any instances where you are using a property or attribute that is not recognized by React or the HTML element you are\nrendering.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplace any unknown property or attribute with a known one, or add it to the list of exceptions.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nclass Welcome extends React.Component {\n  render() {\n    return \u0026lt;div class\u003d\"hello\"\u0026gt;Hello, World!\u0026lt;/div\u0026gt;; // Noncompliant: \u0027class\u0027 is a reserved keyword in JavaScript\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nclass Welcome extends React.Component {\n  render() {\n    return \u0026lt;div className\u003d\"hello\"\u0026gt;Hello, World!\u0026lt;/div\u0026gt;;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Image \u003d \u0026lt;img source\u003d{myImage} /\u0026gt;; // Noncompliant: The \u0027img\u0027 tag does not recognize any \u0027source\u0027 attribute\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst Image \u003d \u0026lt;img src\u003d{myImage} /\u0026gt;;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\"\u003eHTML attribute reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\"\u003eHTML global attributes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\"\u003eSVG attribute reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*\"\u003edata-*\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e React Documentation - \u003ca href\u003d\"https://react.dev/reference/react-dom/components/common#common-props\"\u003eStandard DOM props\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "whitelist": {
        "key": "whitelist",
        "name": "whitelist",
        "description": "Comma-separated list of property and attribute names to ignore",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3358",
    "name": "Ternary operators should not be nested",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\nfunction getReadableStatus(job) {\n  return job.isRunning() ? \"Running\" : job.hasErrors() ? \"Failed\" : \"Succeeded \";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\nfunction getReadableStatus(job) {\n  if (job.isRunning()) {\n    return \"Running\";\n  }\n  return job.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply in JSX expressions to support conditional rendering and conditional attributes.\u003c/p\u003e\n\u003cpre\u003e\nreturn (\n\u0026lt;\u0026gt;\n  {isLoading ? (\n    \u0026lt;Loader active /\u0026gt;\n  ) : (\n    \u0026lt;Panel label\u003d{isEditing ? \u0027Open\u0027 : \u0027Not open\u0027}\u0026gt;\n      \u0026lt;a\u0026gt;{isEditing ? \u0027Close now\u0027 : \u0027Start now\u0027}\u0026lt;/a\u0026gt;\n      \u0026lt;Checkbox onClick\u003d{!saving ? setSaving(saving \u003d\u0026gt; !saving) : null} /\u0026gt;\n    \u0026lt;/Panel\u0026gt;\n  )}\n\u0026lt;/\u0026gt;\n);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/blog/stop-nesting-ternaries-javascript/\"\u003eStop nesting ternaries in JavaScript\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\nfunction getReadableStatus(job) {\n  return job.isRunning() ? \"Running\" : job.hasErrors() ? \"Failed\" : \"Succeeded \";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\nfunction getReadableStatus(job) {\n  if (job.isRunning()) {\n    return \"Running\";\n  }\n  return job.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply in JSX expressions to support conditional rendering and conditional attributes.\u003c/p\u003e\n\u003cpre\u003e\nreturn (\n\u0026lt;\u0026gt;\n  {isLoading ? (\n    \u0026lt;Loader active /\u0026gt;\n  ) : (\n    \u0026lt;Panel label\u003d{isEditing ? \u0027Open\u0027 : \u0027Not open\u0027}\u0026gt;\n      \u0026lt;a\u0026gt;{isEditing ? \u0027Close now\u0027 : \u0027Start now\u0027}\u0026lt;/a\u0026gt;\n      \u0026lt;Checkbox onClick\u003d{!saving ? setSaving(saving \u003d\u0026gt; !saving) : null} /\u0026gt;\n    \u0026lt;/Panel\u0026gt;\n  )}\n\u0026lt;/\u0026gt;\n);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/blog/stop-nesting-ternaries-javascript/\"\u003eStop nesting ternaries in JavaScript\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1481",
    "name": "Unused local variables and functions should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eDead code\u003c/h4\u003e\n\u003cp\u003eAn unused variable or local function usually occurs because some logic is no longer required after a code change. In that case, such code becomes\nunused and never executed.\u003c/p\u003e\n\u003cp\u003eAlso, if you are writing code for the front-end, every unused variable or function remaining in your codebase is just extra bytes you have to send\nover the wire to your users. Unused code bloats your codebase unnecessarily and impacts the performance of your application.\u003c/p\u003e\n\u003ch4\u003eWrong logic\u003c/h4\u003e\n\u003cp\u003eIt could happen that due to a bad copy-paste or autocompletion, the wrong variable is used, while the right one is only declared. In that case, the\nunused variable should be used instead of deleted from the codebase.\u003c/p\u003e\n\u003ch4\u003eMemory leaks\u003c/h4\u003e\n\u003cp\u003eFinally, unused functions can also cause memory leaks. For example, an unused function can create a closure over a variable that would otherwise be\nreleased to the garbage collector.\u003c/p\u003e\n\u003cpre\u003e\nlet theThing \u003d null;\nconst replaceThing \u003d function () {\n  const originalThing \u003d theThing;\n  const unused \u003d function () {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n  theThing \u003d {\n    longStr: new Array(1000000).join(\"*\"),\n    someMethod: function () {\n      console.log(someMessage);\n    },\n  };\n};\nsetInterval(replaceThing, 1000);\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eUsually, the fix for this issue is straightforward, you just need to remove the unused variable declaration, or its name from the declaration\nstatement if it is declared along with other variables.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction numberOfMinutes(hours) {\n  var seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWhen an array destructuring is used and some element of the array is never referenced, one might simply remove it from the destructuring.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst [_, params] \u003d url.split(path);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst [, params] \u003d url.split(path);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#ignoring_some_returned_values\"\u003eDestructuring assignment / Ignoring some values\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/blog/common-typescript-issues-no-3-unused-local-variables-and-functions/\"\u003ePhil Nash, Common TypeScript\n  Issues NÂº 3: unused local variables and functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\"\u003e David Glasser, An interesting kind of JavaScript\n  memory leak\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003ch4\u003eDead code\u003c/h4\u003e\n\u003cp\u003eAn unused variable or local function usually occurs because some logic is no longer required after a code change. In that case, such code becomes\nunused and never executed.\u003c/p\u003e\n\u003cp\u003eAlso, if you are writing code for the front-end, every unused variable or function remaining in your codebase is just extra bytes you have to send\nover the wire to your users. Unused code bloats your codebase unnecessarily and impacts the performance of your application.\u003c/p\u003e\n\u003ch4\u003eWrong logic\u003c/h4\u003e\n\u003cp\u003eIt could happen that due to a bad copy-paste or autocompletion, the wrong variable is used, while the right one is only declared. In that case, the\nunused variable should be used instead of deleted from the codebase.\u003c/p\u003e\n\u003ch4\u003eMemory leaks\u003c/h4\u003e\n\u003cp\u003eFinally, unused functions can also cause memory leaks. For example, an unused function can create a closure over a variable that would otherwise be\nreleased to the garbage collector.\u003c/p\u003e\n\u003cpre\u003e\nlet theThing \u003d null;\nconst replaceThing \u003d function () {\n  const originalThing \u003d theThing;\n  const unused \u003d function () {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n  theThing \u003d {\n    longStr: new Array(1000000).join(\"*\"),\n    someMethod: function () {\n      console.log(someMessage);\n    },\n  };\n};\nsetInterval(replaceThing, 1000);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eUsually, the fix for this issue is straightforward, you just need to remove the unused variable declaration, or its name from the declaration\nstatement if it is declared along with other variables.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction numberOfMinutes(hours) {\n  var seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWhen an array destructuring is used and some element of the array is never referenced, one might simply remove it from the destructuring.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst [_, params] \u003d url.split(path);\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst [, params] \u003d url.split(path);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#ignoring_some_returned_values\"\u003eDestructuring assignment / Ignoring some values\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/blog/common-typescript-issues-no-3-unused-local-variables-and-functions/\"\u003ePhil Nash, Common TypeScript\n  Issues NÂº 3: unused local variables and functions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.meteor.com/an-interesting-kind-of-javascript-memory-leak-8b47d2e7f156\"\u003e David Glasser, An interesting kind of JavaScript\n  memory leak\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [
      "javascript:UnusedVariable"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5728",
    "name": "Disabling content security policy fetch directives is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eContent security policy (CSP) (fetch directives) is a \u003ca href\u003d\"https://www.w3.org/TR/CSP3/\"\u003eW3C standard \u003c/a\u003e which is used by a server to specify,\nvia a http header, the origins from where the browser is allowed to load resources. It can help to mitigate the risk of cross site scripting (XSS)\nattacks and reduce privileges used by an application. If the website doesnâ€™t define CSP header the browser will apply \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003esame-origin policy\u003c/a\u003e by default.\u003c/p\u003e\n\u003cpre\u003e\nContent-Security-Policy: default-src \u0027self\u0027; script-src â€˜self â€˜ http://www.example.com\n\u003c/pre\u003e\n\u003cp\u003eIn the above example, all resources are allowed from the website where this header is set and script resources fetched from example.com are also\nauthorized:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;img src\u003d\"selfhostedimage.png\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- will be loaded because default-src \u0027self\u0027; directive is applied  --\u0026gt;\n\u0026lt;img src\u003d\"http://www.example.com/image.png\u0026gt;\u0026lt;/script\u0026gt;  \u0026lt;!-- will NOT be loaded because default-src \u0027self\u0027; directive is applied  --\u0026gt;\n\u0026lt;script src\u003d\"http://www.example.com/library.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --\u0026gt;\n\u0026lt;script src\u003d\"selfhostedscript.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- will be loaded because script-src â€˜self â€˜ http://www.example.com directive is applied  --\u0026gt;\n\u0026lt;script src\u003d\"http://www.otherexample.com/library.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- will NOT be loaded because script-src â€˜self â€˜ http://www.example.comdirective is applied  --\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The resources of the application are fetched from various untrusted locations. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn a Express.js application, the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e contentSecurityPolicy\nmiddleware is disabled:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\napp.use(\n    helmet({\n      contentSecurityPolicy: false, // sensitive\n    })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement content security policy fetch directives, in particular \u003cem\u003edefault-src\u003c/em\u003e directive and continue to properly sanitize and validate all\ninputs of the application, indeed CSP fetch directives is only a tool to reduce the impact of cross site scripting attacks.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn a Express.js application, a standard way to implement CSP is the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet contentSecurityPolicy\nmiddleware\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\napp.use(helmet.contentSecurityPolicy()); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.w3.org/TR/CSP3/\"\u003ew3.org\u003c/a\u003e - Content Security Policy Level 3 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category\n  A6\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"\u003edeveloper.mozilla.org\u003c/a\u003e - Content Security Policy (CSP) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S1128",
    "name": "Unnecessary imports should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\nmaintainability issues.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport A from \u0027a\u0027; // Noncompliant: The imported symbol \u0027A\u0027 isn\u0027t used\nimport { B1 } from \u0027b\u0027;\n\nconsole.log(B1);\n\u003c/pre\u003e\n\u003cp\u003eTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\nmore optimized bundle size.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { B1 } from \u0027b\u0027;\n\nconsole.log(B1);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003e\u003ccode\u003eimport\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1481} - Unused local variables and functions should be removed \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnnecessary imports refer to importing modules, libraries, or dependencies that are not used or referenced anywhere in the code. These imports do\nnot contribute to the functionality of the application and only add extra weight to the JavaScript bundle, leading to potential performance and\nmaintainability issues.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport A from \u0027a\u0027; // Noncompliant: The imported symbol \u0027A\u0027 isn\u0027t used\nimport { B1 } from \u0027b\u0027;\n\nconsole.log(B1);\n\u003c/pre\u003e\n\u003cp\u003eTo mitigate the problems associated with unnecessary imports, you should regularly review and remove any imports that are not being used. Modern\nJavaScript build tools and bundlers often provide features like tree shaking, which eliminates unused code during the bundling process, resulting in a\nmore optimized bundle size.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport { B1 } from \u0027b\u0027;\n\nconsole.log(B1);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"\u003e\u003ccode\u003eimport\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S1481} - Unused local variables and functions should be removed \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "es2015",
      "type-dependent",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5725",
    "name": "Using remote artifacts without integrity checks is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing remote artifacts without integrity checks can lead to the unexpected execution of malicious code in the application.\u003c/p\u003e\n\u003cp\u003eOn the client side, where front-end code is executed, malicious code could:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e impersonate users\u0027 identities and take advantage of their privileges on the application. \u003c/li\u003e\n  \u003cli\u003e add quiet malware that monitors users\u0027 session and capture sensitive secrets. \u003c/li\u003e\n  \u003cli\u003e gain access to sensitive clients\u0027 personal data. \u003c/li\u003e\n  \u003cli\u003e deface, or otherwise affect the general availability of the application. \u003c/li\u003e\n  \u003cli\u003e mine cryptocurrencies in the background. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLikewise, a compromised software piece that would be deployed on a server-side application could badly affect the applicationâ€™s security. For\nexample, server-side malware could:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e access and modify sensitive technical and business data. \u003c/li\u003e\n  \u003cli\u003e elevate its privileges on the underlying operating system. \u003c/li\u003e\n  \u003cli\u003e Use the compromised application as a pivot to attack the local network. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy ensuring that a remote artifact is exactly what it is supposed to be before using it, the application is protected from unexpected changes\napplied to it before it is downloaded.\u003cbr\u003e Especially, integrity checks will allow for identifying an artifact replaced by malware on the publication\nwebsite or that was legitimately changed by its author, in a more benign scenario.\u003c/p\u003e\n\u003cp\u003eImportant note: downloading an artifact over HTTPS only protects it while in transit from one host to another. It provides authenticity and\nintegrity checks \u003cstrong\u003efor the network stream\u003c/strong\u003e only. It does not ensure the authenticity or security of the artifact itself.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The artifact is a file intended to execute code. \u003c/li\u003e\n  \u003cli\u003e The artifact is a file that is intended to configure or affect running code in some way. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThe following code sample uses neither integrity checks nor version pinning:\u003c/p\u003e\n\u003cpre\u003e\nlet script \u003d document.createElement(\"script\");\nscript.src \u003d \"https://cdn.example.com/latest/script.js\"; // Sensitive\nscript.crossOrigin \u003d \"anonymous\";\ndocument.head.appendChild(script);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eTo check the integrity of a remote artifact, hash verification is the most reliable solution. It does ensure that the file has not been modified\nsince the fingerprint was computed.\u003c/p\u003e\n\u003cp\u003eIn this case, the artifactâ€™s hash must:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Be computed with a secure hash algorithm such as \u003ccode\u003eSHA512\u003c/code\u003e, \u003ccode\u003eSHA384\u003c/code\u003e or \u003ccode\u003eSHA256\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Be compared with a secure hash that was \u003cstrong\u003enot\u003c/strong\u003e downloaded from the same source. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo do so, the best option is to add the hash in the code explicitly, by following \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity#tools_for_generating_sri_hashes\"\u003eMozillaâ€™s official documentation on\nhow to generate integrity strings\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote: Use this fix together with version binding on the remote file. Avoid downloading files named \"latest\" or similar, so that the\nfront-end pages do not break when the code of the latest remote artifact changes.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlet script \u003d document.createElement(\"script\");\nscript.src \u003d \"https://cdn.example.com/v5.3.6/script.js\";\nscript.integrity \u003d \"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\";\nscript.crossOrigin \u003d \"anonymous\";\ndocument.head.appendChild(script);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eOWASP Top 10 2021 Category A8\u003c/a\u003e - Software and Data\n  Integrity Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/353\"\u003eMITRE, CWE-353\u003c/a\u003e - Missing Support for Integrity Check \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration.html\"\u003eOWASP Top 10 2017 Category\n  A6\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\"\u003edeveloper.mozilla.org\u003c/a\u003e - Subresource Integrity \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Watering_hole_attack\"\u003eWikipedia, Watering Hole Attacks\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5604",
    "name": "Using intrusive permissions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://www.w3.org/TR/permissions/#powerful-feature\"\u003ePowerful features\u003c/a\u003e are browser features (geolocation, camera, microphone â€¦â€‹) that\ncan be accessed with JavaScript API and may require a permission granted by the user. These features can have a high impact on privacy and user\nsecurity thus they should only be used if they are really necessary to implement the critical parts of an application.\u003c/p\u003e\n\u003cp\u003eThis rule highlights intrusive permissions when requested with \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\"\u003ethe\nfuture standard (but currently experimental) web browser query API\u003c/a\u003e and specific APIs related to the permission. It is highly recommended to\ncustomize this rule with the permissions considered as intrusive in the context of the web application.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Some powerful features used by the application are not really necessary. \u003c/li\u003e\n  \u003cli\u003e Users are not clearly informed why and when powerful features are used by the application. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are at risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eWhen using \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API\"\u003egeolocation API\u003c/a\u003e, Firefox for example retrieves personal\ninformation like nearby wireless access points and IP address and sends it to the default geolocation service provider, \u003ca\nhref\u003d\"https://www.google.com/privacy/lsf.html\"\u003eGoogle Location Services\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nnavigator.permissions.query({name:\"geolocation\"}).then(function(result) {\n});  // Sensitive: geolocation is a powerful feature with high privacy concerns\n\nnavigator.geolocation.getCurrentPosition(function(position) {\n  console.log(\"coordinates x\u003d\"+position.coords.latitude+\" and y\u003d\"+position.coords.longitude);\n}); // Sensitive: geolocation is a powerful feature with high privacy concerns\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e In order to respect user privacy it is recommended to avoid using intrusive powerful features. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIf geolocation is required, always explain to the user why the application needs it and prefer requesting an approximate location when\npossible:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;html\u0026gt;\n\u0026lt;head\u0026gt;\n    \u0026lt;title\u0026gt;\n        Retailer website example\n    \u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;body\u0026gt;\n    Type a city, street or zip code where you want to retrieve the closest retail locations of our products:\n    \u0026lt;form method\u003dpost\u0026gt;\n        \u0026lt;input type\u003dtext value\u003d\"New York\"\u0026gt; \u0026lt;!-- Compliant --\u0026gt;\n    \u0026lt;/form\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Web Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/250\"\u003eMITRE, CWE-250\u003c/a\u003e - Execution with Unnecessary Privileges \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/359\"\u003eMITRE, CWE-359\u003c/a\u003e - Exposure of Private Information \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.w3.org/TR/permissions/\"\u003eW3C\u003c/a\u003e - Permissions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://support.mozilla.org/en-US/kb/does-firefox-share-my-location-websites\"\u003eMozilla\u003c/a\u003e - Does Firefox share my location with\n  websites? \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "permissions": {
        "key": "permissions",
        "name": "permissions",
        "description": "Comma-separated list of intrusive permissions to report (supported values: geolocation, camera, microphone, notifications, persistent-storage)",
        "defaultValue": "geolocation",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "permissions": "geolocation"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6819",
    "name": "Prefer tag over ARIA role",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) roles are used to make web content and web applications more accessible to people with disabilities.\nHowever, you should not use an ARIA role on a generic element (like \u003ccode\u003espan\u003c/code\u003e or \u003ccode\u003ediv\u003c/code\u003e) if there is a semantic HTML tag with\nsimilar functionality, just use that tag instead.\u003c/p\u003e\n\u003cp\u003eFor example, instead of using a div element with a button role (\u003ccode\u003e\u0026lt;div role\u003d\"button\"\u0026gt;Click me\u0026lt;/div\u0026gt;\u003c/code\u003e), you should just use a\nbutton element (\u003ccode\u003e\u0026lt;button\u0026gt;Click me\u0026lt;/button\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eSemantic HTML tags are generally preferred over ARIA roles for accessibility due to their built-in functionality, universal support by browsers and\nassistive technologies, simplicity, and maintainability. They come with inherent behaviors and keyboard interactions, reducing the need for additional\nJavaScript. Semantic HTML also enhances SEO by helping search engines better understand the content and structure of web pages. While ARIA roles are\nuseful, they should be considered a last resort when no suitable HTML element can provide the required behavior or semantics.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eReplace the ARIA role with an appropriate HTML tag.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"button\" onClick\u003d{handleClick}\u0026gt;Click me\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{handleClick}\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) roles are used to make web content and web applications more accessible to people with disabilities.\nHowever, you should not use an ARIA role on a generic element (like \u003ccode\u003espan\u003c/code\u003e or \u003ccode\u003ediv\u003c/code\u003e) if there is a semantic HTML tag with\nsimilar functionality, just use that tag instead.\u003c/p\u003e\n\u003cp\u003eFor example, instead of using a div element with a button role (\u003ccode\u003e\u0026lt;div role\u003d\"button\"\u0026gt;Click me\u0026lt;/div\u0026gt;\u003c/code\u003e), you should just use a\nbutton element (\u003ccode\u003e\u0026lt;button\u0026gt;Click me\u0026lt;/button\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eSemantic HTML tags are generally preferred over ARIA roles for accessibility due to their built-in functionality, universal support by browsers and\nassistive technologies, simplicity, and maintainability. They come with inherent behaviors and keyboard interactions, reducing the need for additional\nJavaScript. Semantic HTML also enhances SEO by helping search engines better understand the content and structure of web pages. While ARIA roles are\nuseful, they should be considered a last resort when no suitable HTML element can provide the required behavior or semantics.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReplace the ARIA role with an appropriate HTML tag.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"button\" onClick\u003d{handleClick}\u0026gt;Click me\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{handleClick}\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3782",
    "name": "Arguments to built-in functions should match documented types",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe types of the arguments that built-in functions accept are specified in the JavaScript language specification. Calls to these functions should\nconform to the documented types as they are designed to work with specific data types. If the arguments passed to these functions do not match the\nexpected types, it can lead to type errors or unexpected behavior.\u003c/p\u003e\n\u003cp\u003eAdditionally, passing the correct types of arguments to built-in functions can improve performance by reducing the need for type conversions and\nother operations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst isTooSmall \u003d Math.abs(x \u0026lt; 0.0042); // Noncompliant: \u0027Math.abs\u0027 takes a number as argument\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the arguments passed to built-in functions match the documented types. This is an important aspect of writing high-quality,\nmaintainable, and performant code. You can refer to the Mozilla Developer Network (MDN) documentation for the built-in functions. The documentation\ntypically includes information about the expected types of arguments, the return type of the function, and any other relevant details.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst isTooSmall \u003d Math.abs(x) \u0026lt; 0.0042;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\"\u003eGlobal Objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe types of the arguments that built-in functions accept are specified in the JavaScript language specification. Calls to these functions should\nconform to the documented types as they are designed to work with specific data types. If the arguments passed to these functions do not match the\nexpected types, it can lead to type errors or unexpected behavior.\u003c/p\u003e\n\u003cp\u003eAdditionally, passing the correct types of arguments to built-in functions can improve performance by reducing the need for type conversions and\nother operations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst isTooSmall \u003d Math.abs(x \u0026lt; 0.0042); // Noncompliant: \u0027Math.abs\u0027 takes a number as argument\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the arguments passed to built-in functions match the documented types. This is an important aspect of writing high-quality,\nmaintainable, and performant code. You can refer to the Mozilla Developer Network (MDN) documentation for the built-in functions. The documentation\ntypically includes information about the expected types of arguments, the return type of the function, and any other relevant details.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst isTooSmall \u003d Math.abs(x) \u0026lt; 0.0042;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\"\u003eGlobal Objects\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#type_coercion\"\u003eType coercion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2692",
    "name": "\"indexOf\" checks should not be for positive numbers",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost checks against an \u003ccode\u003eindexOf\u003c/code\u003e value compare it with -1 because 0 is a valid index. Checking against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignores the\nfirst element, which is likely a bug.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [\"blue\", \"red\"];\n\nif (arr.indexOf(\"blue\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eMoreover, if the intent is merely to check the presence of the element, and if your browser version supports it, consider using\n\u003ccode\u003eincludes\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [\"blue\", \"red\"];\n\nif (arr.includes(\"blue\")) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eindexOf\u003c/code\u003e value retrieved from an array is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"\u003e\u003ccode\u003eArray.prototype.includes()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost checks against an \u003ccode\u003eindexOf\u003c/code\u003e value compare it with -1 because 0 is a valid index. Checking against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignores the\nfirst element, which is likely a bug.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [\"blue\", \"red\"];\n\nif (arr.indexOf(\"blue\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eMoreover, if the intent is merely to check the presence of the element, and if your browser version supports it, consider using\n\u003ccode\u003eincludes\u003c/code\u003e instead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [\"blue\", \"red\"];\n\nif (arr.includes(\"blue\")) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eindexOf\u003c/code\u003e value retrieved from an array is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"\u003e\u003ccode\u003eArray.prototype.includes()\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1121",
    "name": "Assignments should not be made from within sub-expressions",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eMoreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: \u003ccode\u003elet x \u003d y \u003d 1;\u003c/code\u003e. If \u003ccode\u003ey\u003c/code\u003e is not declared, it will be hoisted as global.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not raise issues for the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e chained assignments: \u003ccode\u003ea \u003d b \u003d c \u003d 0;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e relational assignments: \u003ccode\u003e(a \u003d 0) !\u003d b\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e sequential assignments: \u003ccode\u003ea \u003d 0, b \u003d 1, c \u003d 2\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e assignments in lambda body: \u003ccode\u003e() \u003d\u0026gt; a \u003d 0\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e conditional assignment idiom: \u003ccode\u003ea || (a \u003d 0)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e assignments in (do-)while conditions: \u003ccode\u003ewhile (a \u003d 0);\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMaking assignments within sub-expressions can hinder the clarity of source code.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eExtracting assignments into separate statements is encouraged to keep the code clear and straightforward.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (val \u003d value() \u0026amp;\u0026amp; check()) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nval \u003d value();\nif (val \u0026amp;\u0026amp; check()) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481\"\u003eMITRE, CWE-481\u003c/a\u003e - Assigning instead of Comparing \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eMoreover, using chained assignments in declarations is also dangerous because one may accidentally create global variables. Consider the following\ncode snippet: \u003ccode\u003elet x \u003d y \u003d 1;\u003c/code\u003e. If \u003ccode\u003ey\u003c/code\u003e is not declared, it will be hoisted as global.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not raise issues for the following patterns:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e chained assignments: \u003ccode\u003ea \u003d b \u003d c \u003d 0;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e relational assignments: \u003ccode\u003e(a \u003d 0) !\u003d b\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e sequential assignments: \u003ccode\u003ea \u003d 0, b \u003d 1, c \u003d 2\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e assignments in lambda body: \u003ccode\u003e() \u003d\u0026gt; a \u003d 0\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e conditional assignment idiom: \u003ccode\u003ea || (a \u003d 0)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e assignments in (do-)while conditions: \u003ccode\u003ewhile (a \u003d 0);\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMaking assignments within sub-expressions can hinder the clarity of source code.\u003c/p\u003e\n\u003cp\u003eThis practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.\u003c/p\u003e\n\u003cp\u003eExtracting assignments into separate statements is encouraged to keep the code clear and straightforward.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (val \u003d value() \u0026amp;\u0026amp; check()) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nval \u003d value();\nif (val \u0026amp;\u0026amp; check()) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481\"\u003eMITRE, CWE-481\u003c/a\u003e - Assigning instead of Comparing \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:AssignmentWithinCondition"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4634",
    "name": "Shorthand promises should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, a promise is an object representing the eventual completion or failure of an asynchronous operation. It is a way to handle\nasynchronous operations more elegantly and avoid the \"callback hell\".\u003c/p\u003e\n\u003cp\u003eA promise can be in one of three states:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pending: The initial state of a promise. It represents that the asynchronous operation is still ongoing and has not yet been fulfilled or\n  rejected. \u003c/li\u003e\n  \u003cli\u003e Fulfilled: The state of a promise when the asynchronous operation has been successfully completed. It represents that the promised value is\n  available and can be consumed. \u003c/li\u003e\n  \u003cli\u003e Rejected: The state of a promise when the asynchronous operation encounters an error or fails to complete. It represents that an error has\n  occurred and the promised value is not available. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe basic syntax for creating a promise in JavaScript is as follows:\u003c/p\u003e\n\u003cpre\u003e\nconst myPromise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // Asynchronous operation\n  // If the operation is successful, call resolve(value)\n  // If the operation fails, call reject(error)\n});\n\u003c/pre\u003e\n\u003cp\u003eHowever, when it comes to immediately resolving or rejecting states, creating a new promise with the \u003ccode\u003ePromise\u003c/code\u003e constructor and manually\ncalling \u003ccode\u003eresolve\u003c/code\u003e or \u003ccode\u003ereject\u003c/code\u003e makes the code verbose and more difficult to read.\u003c/p\u003e\n\u003cpre\u003e\nconst result \u003d new Promise(resolve \u003d\u0026gt; resolve(42)); // Noncompliant: Redundant to explicitly create a promise to resolve 42\nresult.then(value \u003d\u0026gt; {\n  console.log(value); // Output: 42\n});\n\u003c/pre\u003e\n\u003cp\u003eInstead, a promise can be created with \u003ccode\u003ePromise.resolve\u003c/code\u003e. It is typically used when you want to create a new promise that is already\nresolved with a certain value. It is commonly used to wrap synchronous values or functions into promises.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you already have a synchronous value that you want to convert into a promise, using \u003ccode\u003ePromise.resolve\u003c/code\u003e is more concise and\nstraightforward. It immediately creates a promise that is already resolved with the provided value.\u003c/p\u003e\n\u003cpre\u003e\nconst result \u003d Promise.resolve(42);\nresult.then(value \u003d\u0026gt; {\n  console.log(value); // Output: 42\n});\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, if you have an error or an exceptional condition and want to create a promise that is immediately rejected with that error, using\n\u003ccode\u003ePromise.reject\u003c/code\u003e is more straightforward. It creates a promise in the rejected state with the provided error.\u003c/p\u003e\n\u003cpre\u003e\nconst error \u003d new Error(\u0027Something went wrong\u0027);\nconst promise \u003d Promise.reject(error);\n\u003c/pre\u003e\n\u003cp\u003eIf you have a condition and want to create a promise that is either resolved or rejected based on that condition, using\n\u003ccode\u003ePromise.resolve\u003c/code\u003e or \u003ccode\u003ePromise.reject\u003c/code\u003e helps make the code more readable and concise.\u003c/p\u003e\n\u003cpre\u003e\nfunction fetchData() {\n  if (cache) {\n    return Promise.resolve(cache);\n  } else if (shouldFetchData()) {\n    return fetchDataFromServer()\n        .then(data \u003d\u0026gt; {\n            cache \u003d data;\n            return data;\n        });\n  } else {\n    return Promise.reject(new Error(\u0027Data fetch is not required\u0027));\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen you have a promise chain and want to introduce an intermediate step with an immediately resolved value, using \u003ccode\u003ePromise.resolve\u003c/code\u003e\nallows you to continue the chain without introducing unnecessary complexity.\u003c/p\u003e\n\u003cpre\u003e\nconst data \u003d cache ? cache : fetchData();\n\nreturn Promise.resolve(data) // data may be a Promise or not, we need to wrap it\n    .then(data \u003d\u0026gt; {\n        return sanitizeData(data);\n    })\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003ePromise.resolve\u003c/code\u003e and \u003ccode\u003ePromise.reject\u003c/code\u003e is particularly useful when you want to simplify the creation of promises with\nimmediately resolved or rejected states. They provide a cleaner and more direct approach compared to creating a new promise with the\n\u003ccode\u003ePromise\u003c/code\u003e constructor and manually calling \u003ccode\u003eresolve\u003c/code\u003e or \u003ccode\u003ereject\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\"\u003eAsynchronous JavaScript\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"\u003ePromise.prototype.then()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"\u003ePromise.resolve()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"\u003ePromise.reject()\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, a promise is an object representing the eventual completion or failure of an asynchronous operation. It is a way to handle\nasynchronous operations more elegantly and avoid the \"callback hell\".\u003c/p\u003e\n\u003cp\u003eA promise can be in one of three states:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pending: The initial state of a promise. It represents that the asynchronous operation is still ongoing and has not yet been fulfilled or\n  rejected. \u003c/li\u003e\n  \u003cli\u003e Fulfilled: The state of a promise when the asynchronous operation has been successfully completed. It represents that the promised value is\n  available and can be consumed. \u003c/li\u003e\n  \u003cli\u003e Rejected: The state of a promise when the asynchronous operation encounters an error or fails to complete. It represents that an error has\n  occurred and the promised value is not available. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe basic syntax for creating a promise in JavaScript is as follows:\u003c/p\u003e\n\u003cpre\u003e\nconst myPromise \u003d new Promise((resolve, reject) \u003d\u0026gt; {\n  // Asynchronous operation\n  // If the operation is successful, call resolve(value)\n  // If the operation fails, call reject(error)\n});\n\u003c/pre\u003e\n\u003cp\u003eHowever, when it comes to immediately resolving or rejecting states, creating a new promise with the \u003ccode\u003ePromise\u003c/code\u003e constructor and manually\ncalling \u003ccode\u003eresolve\u003c/code\u003e or \u003ccode\u003ereject\u003c/code\u003e makes the code verbose and more difficult to read.\u003c/p\u003e\n\u003cpre\u003e\nconst result \u003d new Promise(resolve \u003d\u0026gt; resolve(42)); // Noncompliant: Redundant to explicitly create a promise to resolve 42\nresult.then(value \u003d\u0026gt; {\n  console.log(value); // Output: 42\n});\n\u003c/pre\u003e\n\u003cp\u003eInstead, a promise can be created with \u003ccode\u003ePromise.resolve\u003c/code\u003e. It is typically used when you want to create a new promise that is already\nresolved with a certain value. It is commonly used to wrap synchronous values or functions into promises.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you already have a synchronous value that you want to convert into a promise, using \u003ccode\u003ePromise.resolve\u003c/code\u003e is more concise and\nstraightforward. It immediately creates a promise that is already resolved with the provided value.\u003c/p\u003e\n\u003cpre\u003e\nconst result \u003d Promise.resolve(42);\nresult.then(value \u003d\u0026gt; {\n  console.log(value); // Output: 42\n});\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, if you have an error or an exceptional condition and want to create a promise that is immediately rejected with that error, using\n\u003ccode\u003ePromise.reject\u003c/code\u003e is more straightforward. It creates a promise in the rejected state with the provided error.\u003c/p\u003e\n\u003cpre\u003e\nconst error \u003d new Error(\u0027Something went wrong\u0027);\nconst promise \u003d Promise.reject(error);\n\u003c/pre\u003e\n\u003cp\u003eIf you have a condition and want to create a promise that is either resolved or rejected based on that condition, using\n\u003ccode\u003ePromise.resolve\u003c/code\u003e or \u003ccode\u003ePromise.reject\u003c/code\u003e helps make the code more readable and concise.\u003c/p\u003e\n\u003cpre\u003e\nfunction fetchData() {\n  if (cache) {\n    return Promise.resolve(cache);\n  } else if (shouldFetchData()) {\n    return fetchDataFromServer()\n        .then(data \u003d\u0026gt; {\n            cache \u003d data;\n            return data;\n        });\n  } else {\n    return Promise.reject(new Error(\u0027Data fetch is not required\u0027));\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen you have a promise chain and want to introduce an intermediate step with an immediately resolved value, using \u003ccode\u003ePromise.resolve\u003c/code\u003e\nallows you to continue the chain without introducing unnecessary complexity.\u003c/p\u003e\n\u003cpre\u003e\nconst data \u003d cache ? cache : fetchData();\n\nreturn Promise.resolve(data) // data may be a Promise or not, we need to wrap it\n    .then(data \u003d\u0026gt; {\n        return sanitizeData(data);\n    })\n\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003ePromise.resolve\u003c/code\u003e and \u003ccode\u003ePromise.reject\u003c/code\u003e is particularly useful when you want to simplify the creation of promises with\nimmediately resolved or rejected states. They provide a cleaner and more direct approach compared to creating a new promise with the\n\u003ccode\u003ePromise\u003c/code\u003e constructor and manually calling \u003ccode\u003eresolve\u003c/code\u003e or \u003ccode\u003ereject\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\"\u003eAsynchronous JavaScript\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\u003ePromise\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"\u003ePromise.prototype.then()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"\u003ePromise.resolve()\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"\u003ePromise.reject()\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "proficiency"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3786",
    "name": "Template literal placeholder syntax should not be used in regular strings",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTemplate strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like \u003ccode\u003e${variable} \u003c/code\u003e in a string between two back-ticks (\u003ccode\u003e`\u003c/code\u003e). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconsole.log(\"Today is ${date}\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconsole.log(`Today is ${date}`);\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTemplate strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like \u003ccode\u003e${variable} \u003c/code\u003e in a string between two back-ticks (\u003ccode\u003e`\u003c/code\u003e). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nconsole.log(\"Today is ${date}\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nconsole.log(`Today is ${date}`);\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3785",
    "name": "\"in\" should not be used with primitive types",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, the \u003ccode\u003ein\u003c/code\u003e operator is primarily used to check if a property exists in an object or if an index exists in an array.\nHowever, it is not suitable for use with primitive types such as numbers, strings, or booleans because they are not objects and do not have\nproperties.\u003c/p\u003e\n\u003cp\u003eIf the right operand is of primitive type, the \u003ccode\u003ein\u003c/code\u003e operator raises a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d \"Foo\";\n\"length\" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n\"foobar\" in x; // Noncompliant: TypeError\n\u003c/pre\u003e\n\u003cp\u003eYou should use the object equivalents of numbers, strings, or booleans if you really want to check property existence with the \u003ccode\u003ein\u003c/code\u003e\noperator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d new String(\"Foo\");\n\"length\" in x;    // true\n0 in x;           // true\n\"foobar\" in x;    // false\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003ein operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\"\u003ePrimitive\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003eNumber()\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003eString()\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003eBoolean()\n  constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, the \u003ccode\u003ein\u003c/code\u003e operator is primarily used to check if a property exists in an object or if an index exists in an array.\nHowever, it is not suitable for use with primitive types such as numbers, strings, or booleans because they are not objects and do not have\nproperties.\u003c/p\u003e\n\u003cp\u003eIf the right operand is of primitive type, the \u003ccode\u003ein\u003c/code\u003e operator raises a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d \"Foo\";\n\"length\" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n\"foobar\" in x; // Noncompliant: TypeError\n\u003c/pre\u003e\n\u003cp\u003eYou should use the object equivalents of numbers, strings, or booleans if you really want to check property existence with the \u003ccode\u003ein\u003c/code\u003e\noperator.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d new String(\"Foo\");\n\"length\" in x;    // true\n0 in x;           // true\n\"foobar\" in x;    // false\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\"\u003ein operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\"\u003ePrimitive\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number\"\u003eNumber()\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String\"\u003eString()\n  constructor\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\"\u003eBoolean()\n  constructor\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2699",
    "name": "Tests should include assertions",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn assertion is a statement within the unit test that checks whether a particular condition is true or false. It defines the expected behavior of\nthe unit being tested. Assertions are used to express the testâ€™s expected outcome, and they are the criteria against which the actual output of the\nunit is evaluated.\u003c/p\u003e\n\u003cp\u003eWhen the unit test is executed, the assertions are evaluated. If all the assertions in the test pass, it means the unit is functioning correctly\nfor that specific set of inputs. If any of the assertions fail, it indicates that there is a problem with the unitâ€™s implementation, and the test case\nhelps identify the issue.\u003c/p\u003e\n\u003cp\u003eWithout assertions, a unit test doesnâ€™t actually verify anything, making it ineffective in catching potential bugs or regressions. It will always\npass, regardless of the implementation of the unit. This can lead to a false sense of security, as you may believe that your code is working correctly\nwhen it might not be.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the assertion library \u003ccode\u003echai\u003c/code\u003e,\u003ccode\u003esinon\u003c/code\u003e or \u003ccode\u003evitest\u003c/code\u003e is imported but no assertion is\nused in a test.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\"No assertions\", function() {\n    it(\"don\u0027t test anything\", function() { // Noncompliant: The unit test doesn\u0027t assert anything\n        const str \u003d \"\";\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eTo write effective unit tests, you should define the expected behavior of the unit using assertions, allowing you to catch bugs early and ensure\nthe reliability of your codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\"Assertions\", function() {\n    it(\"test something\", function() {\n        const str \u003d \"\";\n        expect(str).to.be.a(\"string\");\n    });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/\"\u003eAPI Reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Sinon.js Documentation - \u003ca href\u003d\"https://sinonjs.org/releases/latest/assertions/\"\u003eAssertions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn assertion is a statement within the unit test that checks whether a particular condition is true or false. It defines the expected behavior of\nthe unit being tested. Assertions are used to express the testâ€™s expected outcome, and they are the criteria against which the actual output of the\nunit is evaluated.\u003c/p\u003e\n\u003cp\u003eWhen the unit test is executed, the assertions are evaluated. If all the assertions in the test pass, it means the unit is functioning correctly\nfor that specific set of inputs. If any of the assertions fail, it indicates that there is a problem with the unitâ€™s implementation, and the test case\nhelps identify the issue.\u003c/p\u003e\n\u003cp\u003eWithout assertions, a unit test doesnâ€™t actually verify anything, making it ineffective in catching potential bugs or regressions. It will always\npass, regardless of the implementation of the unit. This can lead to a false sense of security, as you may believe that your code is working correctly\nwhen it might not be.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the assertion library \u003ccode\u003echai\u003c/code\u003e,\u003ccode\u003esinon\u003c/code\u003e or \u003ccode\u003evitest\u003c/code\u003e is imported but no assertion is\nused in a test.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\"No assertions\", function() {\n    it(\"don\u0027t test anything\", function() { // Noncompliant: The unit test doesn\u0027t assert anything\n        const str \u003d \"\";\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eTo write effective unit tests, you should define the expected behavior of the unit using assertions, allowing you to catch bugs early and ensure\nthe reliability of your codebase.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\n\ndescribe(\"Assertions\", function() {\n    it(\"test something\", function() {\n        const str \u003d \"\";\n        expect(str).to.be.a(\"string\");\n    });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/\"\u003eAPI Reference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Sinon.js Documentation - \u003ca href\u003d\"https://sinonjs.org/releases/latest/assertions/\"\u003eAssertions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "chai",
      "mocha",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1125",
    "name": "Boolean literals should not be used in comparisons",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003e!, \u0026amp;\u0026amp;, ||, \u003d\u003d, !\u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.\u003c/p\u003e\n\u003ch2\u003eHow to tix it\u003c/h2\u003e\n\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (someValue \u003d\u003d true) { /* ... */ } // Noncompliant: Redundant comparison\nif (someBooleanValue !\u003d true) { /* ... */ } // Noncompliant: Redundant comparison\nif (booleanMethod() || false) { /* ... */ }  // Noncompliant: Redundant OR\ndoSomething(!false); // Noncompliant: Redundant negation\n\u003c/pre\u003e\n\u003cp\u003eRemove redundant boolean literals to improve readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (someValue) { /* ... */ }\nif (!someBooleanValue) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and\n  sameness\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"\u003eBoolean\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003e!, \u0026amp;\u0026amp;, ||, \u003d\u003d, !\u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.\u003c/p\u003e\n\u003ch2\u003eHow to tix it\u003c/h2\u003e\n\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (someValue \u003d\u003d true) { /* ... */ } // Noncompliant: Redundant comparison\nif (someBooleanValue !\u003d true) { /* ... */ } // Noncompliant: Redundant comparison\nif (booleanMethod() || false) { /* ... */ }  // Noncompliant: Redundant OR\ndoSomething(!false); // Noncompliant: Redundant negation\n\u003c/pre\u003e\n\u003cp\u003eRemove redundant boolean literals to improve readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (someValue) { /* ... */ }\nif (!someBooleanValue) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and\n  sameness\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"\u003eBoolean\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5842",
    "name": "Repeated patterns in regular expressions should not match the empty string",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/(?:)*/      // same as the empty regex, the \u0027*\u0027 accomplishes nothing\n/(?:|x)*/    // same as the empty regex, the alternative has no effect\n/(?:x|)*/    // same as \u0027x*\u0027, the empty alternative has no effect\n/(?:x*|y*)*/ // same as \u0027x*\u0027, the first alternative would always match, y* is never tried\n/(?:x?)*/    // same as \u0027x*\u0027\n/(?:x?)+/    // same as \u0027x*\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/x*/\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/(?:)*/      // same as the empty regex, the \u0027*\u0027 accomplishes nothing\n/(?:|x)*/    // same as the empty regex, the alternative has no effect\n/(?:x|)*/    // same as \u0027x*\u0027, the empty alternative has no effect\n/(?:x*|y*)*/ // same as \u0027x*\u0027, the first alternative would always match, y* is never tried\n/(?:x?)*/    // same as \u0027x*\u0027\n/(?:x?)+/    // same as \u0027x*\u0027\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/x*/\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1488",
    "name": "Local variables should not be declared and then immediately returned or thrown",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDeclaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. This\npractice can make the code harder to read and understand, as it introduces an extra step that doesnâ€™t add any value. Instead of declaring a variable\nand then immediately returning or throwing it, it is generally better to return or throw the value directly. This makes the code cleaner, simpler, and\neasier to understand.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDeclaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. To fix\nthe issue, return or throw the value directly.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction computeDurationInMilliseconds(hours, minutes, seconds) {\n  const duration \u003d (((hours * 60) + minutes) * 60 + seconds) * 1000;\n  return duration;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction computeDurationInMilliseconds(hours, minutes, seconds) {\n  return (((hours * 60) + minutes) * 60 + seconds) * 1000;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  const myError \u003d new Error();\n  throw myError;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething() {\n  throw new Error();\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDeclaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. This\npractice can make the code harder to read and understand, as it introduces an extra step that doesnâ€™t add any value. Instead of declaring a variable\nand then immediately returning or throwing it, it is generally better to return or throw the value directly. This makes the code cleaner, simpler, and\neasier to understand.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDeclaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. To fix\nthe issue, return or throw the value directly.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction computeDurationInMilliseconds(hours, minutes, seconds) {\n  const duration \u003d (((hours * 60) + minutes) * 60 + seconds) * 1000;\n  return duration;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction computeDurationInMilliseconds(hours, minutes, seconds) {\n  return (((hours * 60) + minutes) * 60 + seconds) * 1000;\n}\n\u003c/pre\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction doSomething() {\n  const myError \u003d new Error();\n  throw myError;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nfunction doSomething() {\n  throw new Error();\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6811",
    "name": "DOM elements with ARIA role should only have supported properties",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA properties, also known as \"aria-* properties\", are special attributes used in HTML to enhance the accessibility of web elements. They provide\nadditional semantics to help assistive technologies, like screen readers, interpret the element.\u003c/p\u003e\n\u003cp\u003eRoles, on the other hand, define what an element is or does in the context of a web page. Some elements have explicit roles, which are directly\ndefined by the developer. For example, a div element might be given a role of \"button\". Other elements have implicit roles, which are inferred based\non the type of the element. For example, an anchor tag \u0026lt;a href\u003d\"#\" /\u0026gt; has an implicit role of \"link\".\u003c/p\u003e\n\u003cp\u003eThis rule ensures that the ARIA properties used on an element are ones that are supported by the role of that element. For instance, the ARIA\nproperty \u003ccode\u003earia-required\u003c/code\u003e is not supported by the role \u003ccode\u003elink\u003c/code\u003e. Therefore, using \u003ccode\u003earia-required\u003c/code\u003e on an anchor tag would\nviolate this rule.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eCheck the spelling of the aria-* attributes and verify that they are actually supported by the element role.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-chekd\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt; {/* Noncompliant: aria-chekd is not supported */}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove non-compatible attributes or replace them with the correct ones.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-checked\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA properties, also known as \"aria-* properties\", are special attributes used in HTML to enhance the accessibility of web elements. They provide\nadditional semantics to help assistive technologies, like screen readers, interpret the element.\u003c/p\u003e\n\u003cp\u003eRoles, on the other hand, define what an element is or does in the context of a web page. Some elements have explicit roles, which are directly\ndefined by the developer. For example, a div element might be given a role of \"button\". Other elements have implicit roles, which are inferred based\non the type of the element. For example, an anchor tag \u0026lt;a href\u003d\"#\" /\u0026gt; has an implicit role of \"link\".\u003c/p\u003e\n\u003cp\u003eThis rule ensures that the ARIA properties used on an element are ones that are supported by the role of that element. For instance, the ARIA\nproperty \u003ccode\u003earia-required\u003c/code\u003e is not supported by the role \u003ccode\u003elink\u003c/code\u003e. Therefore, using \u003ccode\u003earia-required\u003c/code\u003e on an anchor tag would\nviolate this rule.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck the spelling of the aria-* attributes and verify that they are actually supported by the element role.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-chekd\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt; {/* Noncompliant: aria-chekd is not supported */}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code remove non-compatible attributes or replace them with the correct ones.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-checked\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5843",
    "name": "Regular expressions should not be too complicated",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA complex regular expression is one that exhibits several or all of the following characteristics. It can be quite lengthy, containing multiple\nnested or repeated groups, numerous alternations, extensive use of backreferences and escape characters, lookaheads, lookbehinds, and other advanced\nfeatures. Additionally, complex regular expressions may lack proper comments and documentation, making them challenging to comprehend and maintain.\nOverly complicated regular expressions are hard to read and maintain and can easily cause hard-to-find bugs.\u003c/p\u003e\n\u003cp\u003eTo determine the complexity of a regular expression, each of the following operators increases the complexity by an amount equal to the current\nnesting level and also increases the current nesting level by one for its arguments:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunctions (\u003ccode\u003e|\u003c/code\u003e)\u003c/a\u003e:\n  when multiple \u003ccode\u003e|\u003c/code\u003e operators are used together, the subsequent ones only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers\"\u003eQuantifiers\u003c/a\u003e (\u003ccode\u003e*\u003c/code\u003e,\n  \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e{n,m}\u003c/code\u003e, \u003ccode\u003e{n,}\u003c/code\u003e or \u003ccode\u003e{n}\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"\u003eLookahead\u003c/a\u003e and \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"\u003elookbehind\u003c/a\u003e assertions \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, each use of a \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003echaracter\nclass\u003c/a\u003e and \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003ebackreferences\u003c/a\u003e\nincrease the complexity by 1 regardless of nesting.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue when total complexity is above the threshold \u003ccode\u003emaxComplexity\u003c/code\u003e (20 by default).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst datePattern \u003d /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/; //Noncompliant: move some validation logic to regular code\nif (dateString.match(datePattern)) {\n    handleDate(dateString);\n}\n\u003c/pre\u003e\n\u003cp\u003eIf a regex is too complicated, you should consider replacing (partially or completely) it with regular code. Alternatively, split it apart into\nmultiple patterns. If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the\nwhole regular expression.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst datePattern \u003d /^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$/;\nif (dateString.match(datePattern)) {\n    const dateParts \u003d dateString.split(/[-/.]/);\n    const day \u003d parseInt(dateParts[0]);\n    const month \u003d parseInt(dateParts[1]);\n    const year \u003d parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunction:\n  \u003ccode\u003e|\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers\"\u003eQuantifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"\u003eLookahead\n  assertion: \u003ccode\u003e(?\u003d...), (?!...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"\u003eLookbehind\n  assertion: \u003ccode\u003e(?\u0026lt;\u003d...), (?\u0026lt;!...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003eGroups and\n  backreferences\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA complex regular expression is one that exhibits several or all of the following characteristics. It can be quite lengthy, containing multiple\nnested or repeated groups, numerous alternations, extensive use of backreferences and escape characters, lookaheads, lookbehinds, and other advanced\nfeatures. Additionally, complex regular expressions may lack proper comments and documentation, making them challenging to comprehend and maintain.\nOverly complicated regular expressions are hard to read and maintain and can easily cause hard-to-find bugs.\u003c/p\u003e\n\u003cp\u003eTo determine the complexity of a regular expression, each of the following operators increases the complexity by an amount equal to the current\nnesting level and also increases the current nesting level by one for its arguments:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunctions (\u003ccode\u003e|\u003c/code\u003e)\u003c/a\u003e:\n  when multiple \u003ccode\u003e|\u003c/code\u003e operators are used together, the subsequent ones only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers\"\u003eQuantifiers\u003c/a\u003e (\u003ccode\u003e*\u003c/code\u003e,\n  \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e{n,m}\u003c/code\u003e, \u003ccode\u003e{n,}\u003c/code\u003e or \u003ccode\u003e{n}\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"\u003eLookahead\u003c/a\u003e and \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"\u003elookbehind\u003c/a\u003e assertions \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, each use of a \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003echaracter\nclass\u003c/a\u003e and \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003ebackreferences\u003c/a\u003e\nincrease the complexity by 1 regardless of nesting.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue when total complexity is above the threshold \u003ccode\u003emaxComplexity\u003c/code\u003e (20 by default).\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst datePattern \u003d /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/; //Noncompliant: move some validation logic to regular code\nif (dateString.match(datePattern)) {\n    handleDate(dateString);\n}\n\u003c/pre\u003e\n\u003cp\u003eIf a regex is too complicated, you should consider replacing (partially or completely) it with regular code. Alternatively, split it apart into\nmultiple patterns. If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the\nwhole regular expression.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst datePattern \u003d /^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$/;\nif (dateString.match(datePattern)) {\n    const dateParts \u003d dateString.split(/[-/.]/);\n    const day \u003d parseInt(dateParts[0]);\n    const month \u003d parseInt(dateParts[1]);\n    const year \u003d parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunction:\n  \u003ccode\u003e|\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Quantifiers\"\u003eQuantifiers\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion\"\u003eLookahead\n  assertion: \u003ccode\u003e(?\u003d...), (?!...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion\"\u003eLookbehind\n  assertion: \u003ccode\u003e(?\u0026lt;\u003d...), (?\u0026lt;!...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003eGroups and\n  backreferences\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "maxComplexity": {
        "key": "maxComplexity",
        "name": "maxComplexity",
        "description": "The maximum authorized complexity.",
        "defaultValue": "20",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maxComplexity": "20"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1126",
    "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eif...else\u003c/code\u003e statement is used to make decisions based on the truthiness of a boolean expression, and the \u003ccode\u003eif\u003c/code\u003e block\nexecutes when the expression is \u003ccode\u003etrue\u003c/code\u003e, while the \u003ccode\u003eelse\u003c/code\u003e block executes when the expression is false.\u003c/p\u003e\n\u003cp\u003eWrapping a boolean expression in an \u003ccode\u003eif...else\u003c/code\u003e statement and returning \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e in the respective blocks\nis redundant and unnecessary. It can also make the code harder to maintain, as it adds unnecessary lines of code that need to be read and\nunderstood.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n\u003c/pre\u003e\n\u003cp\u003eSimplify the code and return the boolean expression (or its negation) directly to make the code more concise and easier to read and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nreturn expression;\n\u003c/pre\u003e\n\u003cp\u003eIf the caller expects a boolean and the result of the expression is not a boolean, use double negation for proper conversion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nreturn !!expression;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"\u003eBoolean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!\"\u003eDouble NOT\n  (\u003ccode\u003e!!\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eif...else\u003c/code\u003e statement is used to make decisions based on the truthiness of a boolean expression, and the \u003ccode\u003eif\u003c/code\u003e block\nexecutes when the expression is \u003ccode\u003etrue\u003c/code\u003e, while the \u003ccode\u003eelse\u003c/code\u003e block executes when the expression is false.\u003c/p\u003e\n\u003cp\u003eWrapping a boolean expression in an \u003ccode\u003eif...else\u003c/code\u003e statement and returning \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e in the respective blocks\nis redundant and unnecessary. It can also make the code harder to maintain, as it adds unnecessary lines of code that need to be read and\nunderstood.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n\u003c/pre\u003e\n\u003cp\u003eSimplify the code and return the boolean expression (or its negation) directly to make the code more concise and easier to read and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nreturn expression;\n\u003c/pre\u003e\n\u003cp\u003eIf the caller expects a boolean and the result of the expression is not a boolean, use double negation for proper conversion.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nreturn !!expression;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"\u003eBoolean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!\"\u003eDouble NOT\n  (\u003ccode\u003e!!\u003c/code\u003e)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1116",
    "name": "Extra semicolons should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eExtra semicolons (\u003ccode\u003e;\u003c/code\u003e) are usually introduced by mistake, for example because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It was meant to be replaced by an actual statement, but this was forgotten. \u003c/li\u003e\n  \u003cli\u003e There was a typo which lead the semicolon to be doubled, i.e. \u003ccode\u003e;;\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e There was a misunderstanding about where semicolons are required or useful. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;; // Noncompliant\n\nfunction foo() {\n};  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction foo() {\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply when the semicolon is after a line break and before \u003ccode\u003e(\u003c/code\u003e or \u003ccode\u003e[\u003c/code\u003e as it is often used in semicolon-less\nstyle.\u003c/p\u003e\n\u003cpre\u003e\nvar hello \u003d \u0027Hello\u0027\nvar world \u003d \u0027World!\u0027\nvar helloWorld \u003d hello + \u0027 \u0027 + world\n;[...helloWorld].forEach(c \u003d\u0026gt; console.log(c))\n\u003c/pre\u003e\n\u003cpre\u003e\nvar a \u003d 1\nvar b \u003d 2 * a\n;(a + b).toString()\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eExtra semicolons (\u003ccode\u003e;\u003c/code\u003e) are usually introduced by mistake, for example because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It was meant to be replaced by an actual statement, but this was forgotten. \u003c/li\u003e\n  \u003cli\u003e There was a typo which lead the semicolon to be doubled, i.e. \u003ccode\u003e;;\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e There was a misunderstanding about where semicolons are required or useful. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;; // Noncompliant\n\nfunction foo() {\n};  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nvar x \u003d 1;\n\nfunction foo() {\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply when the semicolon is after a line break and before \u003ccode\u003e(\u003c/code\u003e or \u003ccode\u003e[\u003c/code\u003e as it is often used in semicolon-less\nstyle.\u003c/p\u003e\n\u003cpre\u003e\nvar hello \u003d \u0027Hello\u0027\nvar world \u003d \u0027World!\u0027\nvar helloWorld \u003d hello + \u0027 \u0027 + world\n;[...helloWorld].forEach(c \u003d\u0026gt; console.log(c))\n\u003c/pre\u003e\n\u003cpre\u003e\nvar a \u003d 1\nvar b \u003d 2 * a\n;(a + b).toString()\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1479",
    "name": "\"switch\" statements should not have too many \"case\" clauses",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximum": {
        "key": "maximum",
        "name": "maximum",
        "description": "Maximum number of \"case\".",
        "defaultValue": "30",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximum": "30"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5958",
    "name": "Tests should check which exception is thrown",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eWhen the unit test is executed, the assertions are evaluated. If all the assertions in the test pass, it means the unit is functioning correctly\nfor that specific set of inputs. If any of the assertions fail, it indicates that there is a problem with the unitâ€™s implementation, and the test case\nhelps identify the issue.\u003c/p\u003e\n\u003cp\u003eIt is not good enough to test if an exception is raised, without checking which exception it is. Such tests will not be able to differentiate the\nexpected exception from an unexpected one.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When an asynchronous Mocha test calls the \u003ccode\u003edone()\u003c/code\u003e callback, without parameters, in a \u003ccode\u003ecatch\u003c/code\u003e block, and there is no\n  reference to the caught exception in this block. Either the error should be passed to \u003ccode\u003edone()\u003c/code\u003e or the exception should be checked\n  further. \u003c/li\u003e\n  \u003cli\u003e When Chai assertions are used to test if a function throws any exception, or an exception of type \u003ccode\u003eError\u003c/code\u003e without checking the\n  message. \u003c/li\u003e\n  \u003cli\u003e When Chai assertions are used to test if a function does not throw an exception of type \u003ccode\u003eError\u003c/code\u003e without checking the message. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule doesnâ€™t raise an issue when an assertion is negated. In such a case, the exception doesnâ€™t need to be specific.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\nconst fs \u003d require(\"fs\");\n\ndescribe(\"exceptions are not tested properly\", function() {\n    const funcThrows \u003d function () { throw new TypeError(\u0027What is this type?\u0027); };\n    const funcNoThrow \u003d function () { /*noop*/ };\n\n    it(\"forgot to pass the error to \u0027done()\u0027\", function(done) {\n        fs.readFile(\"/etc/zshrc\", \u0027utf8\u0027, function(err, data) {\n            try {\n                expect(data).to.match(/some expected string/);\n            } catch (e) {\n                done(); // Noncompliant: either the exception should be passed to done(e), or the exception should be tested further.\n            }\n        });\n    });\n\n    it(\"does not \u0027expect\u0027 a specific exception\", function() {\n        expect(funcThrows).to.throw(); // Noncompliant: the exception should be tested.\n        expect(funcThrows).to.throw(Error); // Noncompliant: the exception should be tested further.\n    });\n});\n\u003c/pre\u003e\n\u003cpre\u003e\nTests should instead validate the exception message and/or type. By checking for the specific exception that is expected to be thrown, the test case can verify that the code is behaving correctly and handling exceptions as expected. This helps to improve the overall quality and reliability of the code.\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\nconst { AssertionError } \u003d require(\u0027chai\u0027);\nconst fs \u003d require(\"fs\");\n\ndescribe(\"exceptions are tested properly\", function() {\n    const funcThrows \u003d function () { throw new TypeError(\u0027What is this type?\u0027); };\n    const funcNoThrow \u003d function () { /*noop*/ };\n\n    it(\"did not forget to pass the error to \u0027done()\u0027\", function(done) {\n        fs.readFile(\"/etc/zshrc\", \u0027utf8\u0027, function(err, data) {\n            try {\n                expect(data).to.match(/some expected string/);\n            } catch (e) {\n                expect(e).to.be.an.instanceof(AssertionError);\n                done();\n            }\n        });\n    });\n\n    it(\"does \u0027expect\u0027 a specific exception\", function() {\n        expect(funcThrows).to.throw(TypeError);\n        expect(funcNoThrow).to.not.throw(Error, /My error message/);\n    });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/assert.html\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eWhen the unit test is executed, the assertions are evaluated. If all the assertions in the test pass, it means the unit is functioning correctly\nfor that specific set of inputs. If any of the assertions fail, it indicates that there is a problem with the unitâ€™s implementation, and the test case\nhelps identify the issue.\u003c/p\u003e\n\u003cp\u003eIt is not good enough to test if an exception is raised, without checking which exception it is. Such tests will not be able to differentiate the\nexpected exception from an unexpected one.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When an asynchronous Mocha test calls the \u003ccode\u003edone()\u003c/code\u003e callback, without parameters, in a \u003ccode\u003ecatch\u003c/code\u003e block, and there is no\n  reference to the caught exception in this block. Either the error should be passed to \u003ccode\u003edone()\u003c/code\u003e or the exception should be checked\n  further. \u003c/li\u003e\n  \u003cli\u003e When Chai assertions are used to test if a function throws any exception, or an exception of type \u003ccode\u003eError\u003c/code\u003e without checking the\n  message. \u003c/li\u003e\n  \u003cli\u003e When Chai assertions are used to test if a function does not throw an exception of type \u003ccode\u003eError\u003c/code\u003e without checking the message. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule doesnâ€™t raise an issue when an assertion is negated. In such a case, the exception doesnâ€™t need to be specific.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\nconst fs \u003d require(\"fs\");\n\ndescribe(\"exceptions are not tested properly\", function() {\n    const funcThrows \u003d function () { throw new TypeError(\u0027What is this type?\u0027); };\n    const funcNoThrow \u003d function () { /*noop*/ };\n\n    it(\"forgot to pass the error to \u0027done()\u0027\", function(done) {\n        fs.readFile(\"/etc/zshrc\", \u0027utf8\u0027, function(err, data) {\n            try {\n                expect(data).to.match(/some expected string/);\n            } catch (e) {\n                done(); // Noncompliant: either the exception should be passed to done(e), or the exception should be tested further.\n            }\n        });\n    });\n\n    it(\"does not \u0027expect\u0027 a specific exception\", function() {\n        expect(funcThrows).to.throw(); // Noncompliant: the exception should be tested.\n        expect(funcThrows).to.throw(Error); // Noncompliant: the exception should be tested further.\n    });\n});\n\u003c/pre\u003e\n\u003cpre\u003e\nTests should instead validate the exception message and/or type. By checking for the specific exception that is expected to be thrown, the test case can verify that the code is behaving correctly and handling exceptions as expected. This helps to improve the overall quality and reliability of the code.\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst expect \u003d require(\"chai\").expect;\nconst { AssertionError } \u003d require(\u0027chai\u0027);\nconst fs \u003d require(\"fs\");\n\ndescribe(\"exceptions are tested properly\", function() {\n    const funcThrows \u003d function () { throw new TypeError(\u0027What is this type?\u0027); };\n    const funcNoThrow \u003d function () { /*noop*/ };\n\n    it(\"did not forget to pass the error to \u0027done()\u0027\", function(done) {\n        fs.readFile(\"/etc/zshrc\", \u0027utf8\u0027, function(err, data) {\n            try {\n                expect(data).to.match(/some expected string/);\n            } catch (e) {\n                expect(e).to.be.an.instanceof(AssertionError);\n                done();\n            }\n        });\n    });\n\n    it(\"does \u0027expect\u0027 a specific exception\", function() {\n        expect(funcThrows).to.throw(TypeError);\n        expect(funcNoThrow).to.not.throw(Error, /My error message/);\n    });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/assert.html\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "chai",
      "mocha",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3415",
    "name": "Assertion arguments should be passed in the correct order",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eThe convention for passing assertion arguments is to pass the expected value as the first argument and the actual value as the second argument.\nThis convention is based on the idea that the expected value is what the code is supposed to produce, and the actual value is what the code produces.\nBy passing the expected value first, it is easier to understand the intent of the assertion and to quickly identify any errors that may be present.\nAdditionally, many testing frameworks and libraries expect assertion arguments to be passed in this order, so following the convention can help ensure\nthat your code works correctly with these tools.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eYou should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\nconst should \u003d require(\u0027chai\u0027).should();\n\nit(\"inverts arguments\", function() {\n    assert.equal(42, aNumber); // Noncompliant: actual value is passed as first argument and expected as second argument\n    expect(42).to.equal(aNumber); // Noncompliant: actual value is passed as first argument and expected as second argument\n    should.fail(42, aNumber);  // Noncompliant: actual value is passed as first argument and expected as second argument\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eSwap the order of the assertion arguments so that the expected value is passed as the first argument and the actual value is passed as the second\nargument.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\nconst should \u003d require(\u0027chai\u0027).should();\n\nit(\"inverts arguments\", function() {\n    assert.equal(aNumber, 42);\n    expect(aNumber).to.equal(42);\n    should.fail(aNumber, 42);\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/assert.html\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eThe convention for passing assertion arguments is to pass the expected value as the first argument and the actual value as the second argument.\nThis convention is based on the idea that the expected value is what the code is supposed to produce, and the actual value is what the code produces.\nBy passing the expected value first, it is easier to understand the intent of the assertion and to quickly identify any errors that may be present.\nAdditionally, many testing frameworks and libraries expect assertion arguments to be passed in this order, so following the convention can help ensure\nthat your code works correctly with these tools.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eYou should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\nconst should \u003d require(\u0027chai\u0027).should();\n\nit(\"inverts arguments\", function() {\n    assert.equal(42, aNumber); // Noncompliant: actual value is passed as first argument and expected as second argument\n    expect(42).to.equal(aNumber); // Noncompliant: actual value is passed as first argument and expected as second argument\n    should.fail(42, aNumber);  // Noncompliant: actual value is passed as first argument and expected as second argument\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eSwap the order of the assertion arguments so that the expected value is passed as the first argument and the actual value is passed as the second\nargument.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\nconst expect \u003d require(\u0027chai\u0027).expect;\nconst should \u003d require(\u0027chai\u0027).should();\n\nit(\"inverts arguments\", function() {\n    assert.equal(aNumber, 42);\n    expect(aNumber).to.equal(42);\n    should.fail(aNumber, 42);\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Node.js Documentation - \u003ca href\u003d\"https://nodejs.org/api/assert.html\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/assert\"\u003eAssert\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/bdd\"\u003e\u003ccode\u003eexpect\u003c/code\u003e and \u003ccode\u003eshould\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "chai",
      "suspicious",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4507",
    "name": "Delivering code in production with debug features activated is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopment tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the applicationâ€™s path or file names.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. \u003c/li\u003e\n  \u003cli\u003e The application runs by default with debug features activated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/errorhandler\"\u003eerrorhandler Express.js middleware\u003c/a\u003e should not be used in production:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst errorhandler \u003d require(\u0027errorhandler\u0027);\n\nlet app \u003d express();\napp.use(errorhandler()); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDo not enable debugging features on production servers or applications distributed to end users.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/errorhandler\"\u003eerrorhandler Express.js middleware\u003c/a\u003e used only in development mode:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst errorhandler \u003d require(\u0027errorhandler\u0027);\n\nlet app \u003d express();\n\nif (process.env.NODE_ENV \u003d\u003d\u003d \u0027development\u0027) {\n  app.use(errorhandler());\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eMITRE, CWE-489\u003c/a\u003e - Active Debug Code \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/215\"\u003eMITRE, CWE-215\u003c/a\u003e - Information Exposure Through Debug Information \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "debug",
      "error-handling",
      "express.js",
      "user-experience"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S1117",
    "name": "Variables should not be shadowed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVariable shadowing happens when a variable declared in a specific scope has the same name as a variable in an outer scope.\u003c/p\u003e\n\u003cp\u003eThis can lead to three main problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. \u003c/li\u003e\n  \u003cli\u003e Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: If the inner variable is removed or renamed, the codeâ€™s behavior might change unexpectedly because the outer variable is\n  now being used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo avoid these problems, rename the shadowing, shadowed, or both variables to accurately represent their purpose with unique and meaningful\nnames.\u003c/p\u003e\n\u003cp\u003eNote that functions in JavaScript are first-class citizens. This means that they possess the same attributes as variables, including the ability to\nshadow other variables and, conversely, be shadowed by them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eThe example below shows the typical situations in which shadowing can occur.\u003c/p\u003e\n\u003cpre\u003e\nfunction outer(items) {\n  var counter \u003d 0;\n\n  function inner(items) { // Noncompliant: the parameter \"items\" is shadowed.\n    var counter \u003d counter + 1; // Noncompliant: the outer \"counter\" is shadowed.\n  }\n\n  inner(items);\n\n  return counter; // returns 0\n}\n\nfunction search(items, match) { // Noncompliant: the function \"match\" (below) is shadowed.\n  // ...\n}\n\nfunction match(value, key) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S2814} - Variables and functions should not be redeclared \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVariable shadowing happens when a variable declared in a specific scope has the same name as a variable in an outer scope.\u003c/p\u003e\n\u003cp\u003eThis can lead to three main problems:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. \u003c/li\u003e\n  \u003cli\u003e Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: If the inner variable is removed or renamed, the codeâ€™s behavior might change unexpectedly because the outer variable is\n  now being used. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo avoid these problems, rename the shadowing, shadowed, or both variables to accurately represent their purpose with unique and meaningful\nnames.\u003c/p\u003e\n\u003cp\u003eNote that functions in JavaScript are first-class citizens. This means that they possess the same attributes as variables, including the ability to\nshadow other variables and, conversely, be shadowed by them.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eThe example below shows the typical situations in which shadowing can occur.\u003c/p\u003e\n\u003cpre\u003e\nfunction outer(items) {\n  var counter \u003d 0;\n\n  function inner(items) { // Noncompliant: the parameter \"items\" is shadowed.\n    var counter \u003d counter + 1; // Noncompliant: the outer \"counter\" is shadowed.\n  }\n\n  inner(items);\n\n  return counter; // returns 0\n}\n\nfunction search(items, match) { // Noncompliant: the function \"match\" (below) is shadowed.\n  // ...\n}\n\nfunction match(value, key) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:javascript:S2814} - Variables and functions should not be redeclared \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "pitfall",
      "suspicious"
    ],
    "deprecatedKeys": [
      "javascript:S1524"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2208",
    "name": "Wildcard imports should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOn the principle that clearer code is better code, you should explicitly \u003ccode\u003eimport\u003c/code\u003e the things you want to use in a module. Using\n\u003ccode\u003eimport *\u003c/code\u003e imports everything in the module and risks confusing maintainers. Similarly, \u003ccode\u003eexport * from \"module\";\u003c/code\u003e imports and\nthen re-exports everything in the module and risks confusing not just maintainers but also the moduleâ€™s users.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport * as Imported from \"aModule\";  // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport {aType, aFunction} from \"aModule\";\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOn the principle that clearer code is better code, you should explicitly \u003ccode\u003eimport\u003c/code\u003e the things you want to use in a module. Using\n\u003ccode\u003eimport *\u003c/code\u003e imports everything in the module and risks confusing maintainers. Similarly, \u003ccode\u003eexport * from \"module\";\u003c/code\u003e imports and\nthen re-exports everything in the module and risks confusing not just maintainers but also the moduleâ€™s users.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nimport * as Imported from \"aModule\";  // Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport {aType, aFunction} from \"aModule\";\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "es2015",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1119",
    "name": "Labels should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, labels are identifiers that allow you to name blocks of code, such as loops and conditional statements. They are used in conjunction\nwith statements like \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e to control the flow of execution within nested loops and conditionals.\u003c/p\u003e\n\u003cp\u003eItâ€™s worth noting that labels are not widely used in modern JavaScript programming because they can lead to complex and hard-to-maintain code. In\nmost cases, there are better alternatives to achieve the desired control flow without resorting to labels.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nmyLabel: {\n  let x \u003d doSomething();\n  if (x \u0026gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf you find yourself using labels, you should reevaluate your code structure and explore other options for better code clarity and\nmaintainability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d doSomething();\nif (x \u0026lt;\u003d 0) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\"\u003elabel\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, labels are identifiers that allow you to name blocks of code, such as loops and conditional statements. They are used in conjunction\nwith statements like \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e to control the flow of execution within nested loops and conditionals.\u003c/p\u003e\n\u003cp\u003eItâ€™s worth noting that labels are not widely used in modern JavaScript programming because they can lead to complex and hard-to-maintain code. In\nmost cases, there are better alternatives to achieve the desired control flow without resorting to labels.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nmyLabel: {\n  let x \u003d doSomething();\n  if (x \u0026gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003cp\u003eIf you find yourself using labels, you should reevaluate your code structure and explore other options for better code clarity and\nmaintainability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d doSomething();\nif (x \u0026lt;\u003d 0) {\n  doSomethingElse();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\"\u003elabel\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6807",
    "name": "DOM elements with ARIA roles should have the required properties",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eEach role in ARIA has a set of required attributes that must be included for the role to be properly understood by assistive technologies. These\nattributes are known as \"required aria-* properties\".\u003c/p\u003e\n\u003cp\u003eFor example, if an element has a role of \"checkbox\", it must also include the aria-checked property. This property indicates whether the checkbox\nis checked (true), unchecked (false), or in a mixed state (mixed).\u003c/p\u003e\n\u003cp\u003eThis rule checks that each element with a defined ARIA role also has all required attributes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eCheck that each element with a defined ARIA role also has all required attributes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\"\u0026gt;Unchecked\u0026lt;/div\u0026gt; {/* Noncompliant: aria-checked is missing */}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code add missing aria-* attributes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-checked\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eEach role in ARIA has a set of required attributes that must be included for the role to be properly understood by assistive technologies. These\nattributes are known as \"required aria-* properties\".\u003c/p\u003e\n\u003cp\u003eFor example, if an element has a role of \"checkbox\", it must also include the aria-checked property. This property indicates whether the checkbox\nis checked (true), unchecked (false), or in a mixed state (mixed).\u003c/p\u003e\n\u003cp\u003eThis rule checks that each element with a defined ARIA role also has all required attributes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck that each element with a defined ARIA role also has all required attributes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\"\u0026gt;Unchecked\u0026lt;/div\u0026gt; {/* Noncompliant: aria-checked is missing */}\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code add missing aria-* attributes.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"checkbox\" aria-checked\u003d{isChecked}\u0026gt;Unchecked\u0026lt;/div\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\"\u003eARIA states and properties (Reference)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1472",
    "name": "Function call arguments should not start on new lines",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript will automatically insert semicolons when parsing the code so invalid sequences can be \"fixed\" to valid syntax. This behavior, called \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion\"\u003e\"Automatic semicolon\ninsertion\"\u003c/a\u003e or \u003cstrong\u003eASI\u003c/strong\u003e, makes semicolons at the end of statements optional and attempts to make JavaScript more approachable and\nconvenient.\u003c/p\u003e\n\u003cp\u003eHowever, sometimes, relying on ASI can lead to unexpected results. ASI will only be triggered if a line break separates tokens that would otherwise\nproduce invalid syntax. JavaScript will not insert semicolons if the next token can be parsed as part of a valid structure.\u003c/p\u003e\n\u003cp\u003eIn the case of function call arguments, they are allowed to be on a separate line. But, depending on the developerâ€™s intent and, especially when\nworking with \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE\u003c/a\u003e (or any other design pattern using \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\"\u003eGrouping operator\u003c/a\u003e), it can lead to errors and most\nlikely \u003cem\u003ewill\u003c/em\u003e lead to questions for maintainers.\u003c/p\u003e\n\u003cp\u003eWhat was the initial intent of the developer?\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Defining a function and then executing some unrelated code inside a closure? \u003c/li\u003e\n  \u003cli\u003e Passing the second function as a parameter to the first one? \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe first option will be the one chosen by the JavaScript interpreter.\u003c/p\u003e\n\u003cpre\u003e\nconst fn \u003d function () {\n  //...\n}\n\n(function () { // Noncompliant: function is passed as a parameter to fn\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eBy extension, and to improve readability, any kind of function call argument should not start on a new line.\u003c/p\u003e\n\u003cpre\u003e\n// Define a function\nconst fn \u003d function () {\n  //...\n}; // \u0026lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nvar fn \u003d function () {\n  //...\n}(function () { // \u0026lt;-- start function call arguments on same line\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\"\u003etagged templates\u003c/a\u003e\nallow for advanced forms of string interpolation by evaluating the tag as a function to call, passing the template literal elements as arguments.\u003c/p\u003e\n\u003cpre\u003e\nconst foo \u003d function() {\n  return \u0027foo\u0027;\n}\n\n`bar`; // Noncompliant: `bar` passed as a parameter to function. foo is a string, not a function\n\u003c/pre\u003e\n\u003cp\u003eTherefore, the rule also verifies that template literals donâ€™t start on a separate line.\u003c/p\u003e\n\u003cpre\u003e\nfunction foo() {  // \u0026lt;-- Use a function declaration\n  return \u0027foo\u0027;\n}\n\n`bar`;\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nconst foo \u003d function() {\n  return \u0027foo\u0027;\n}`bar`; // \u0026lt;-- start template literal on same line\n\u003c/pre\u003e\n\u003ch2\u003eResouces\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion\"\u003eAutomatic semicolon\n  insertion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping#grouping_operator_and_automatic_semicolon_insertion\"\u003eGrouping operator and automatic semicolon insertion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\"\u003eTagged\n  templates\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript will automatically insert semicolons when parsing the code so invalid sequences can be \"fixed\" to valid syntax. This behavior, called \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion\"\u003e\"Automatic semicolon\ninsertion\"\u003c/a\u003e or \u003cstrong\u003eASI\u003c/strong\u003e, makes semicolons at the end of statements optional and attempts to make JavaScript more approachable and\nconvenient.\u003c/p\u003e\n\u003cp\u003eHowever, sometimes, relying on ASI can lead to unexpected results. ASI will only be triggered if a line break separates tokens that would otherwise\nproduce invalid syntax. JavaScript will not insert semicolons if the next token can be parsed as part of a valid structure.\u003c/p\u003e\n\u003cp\u003eIn the case of function call arguments, they are allowed to be on a separate line. But, depending on the developerâ€™s intent and, especially when\nworking with \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\"\u003eIIFE\u003c/a\u003e (or any other design pattern using \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\"\u003eGrouping operator\u003c/a\u003e), it can lead to errors and most\nlikely \u003cem\u003ewill\u003c/em\u003e lead to questions for maintainers.\u003c/p\u003e\n\u003cp\u003eWhat was the initial intent of the developer?\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Defining a function and then executing some unrelated code inside a closure? \u003c/li\u003e\n  \u003cli\u003e Passing the second function as a parameter to the first one? \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe first option will be the one chosen by the JavaScript interpreter.\u003c/p\u003e\n\u003cpre\u003e\nconst fn \u003d function () {\n  //...\n}\n\n(function () { // Noncompliant: function is passed as a parameter to fn\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eBy extension, and to improve readability, any kind of function call argument should not start on a new line.\u003c/p\u003e\n\u003cpre\u003e\n// Define a function\nconst fn \u003d function () {\n  //...\n}; // \u0026lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nvar fn \u003d function () {\n  //...\n}(function () { // \u0026lt;-- start function call arguments on same line\n  //...\n})();\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\"\u003etagged templates\u003c/a\u003e\nallow for advanced forms of string interpolation by evaluating the tag as a function to call, passing the template literal elements as arguments.\u003c/p\u003e\n\u003cpre\u003e\nconst foo \u003d function() {\n  return \u0027foo\u0027;\n}\n\n`bar`; // Noncompliant: `bar` passed as a parameter to function. foo is a string, not a function\n\u003c/pre\u003e\n\u003cp\u003eTherefore, the rule also verifies that template literals donâ€™t start on a separate line.\u003c/p\u003e\n\u003cpre\u003e\nfunction foo() {  // \u0026lt;-- Use a function declaration\n  return \u0027foo\u0027;\n}\n\n`bar`;\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nconst foo \u003d function() {\n  return \u0027foo\u0027;\n}`bar`; // \u0026lt;-- start template literal on same line\n\u003c/pre\u003e\n\u003ch2\u003eResouces\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion\"\u003eAutomatic semicolon\n  insertion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping#grouping_operator_and_automatic_semicolon_insertion\"\u003eGrouping operator and automatic semicolon insertion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\"\u003eTagged\n  templates\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2681",
    "name": "Multiline blocks should be enclosed in curly braces",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving inconsistent indentation and omitting curly braces from a control structure, such as an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop,\nis misleading and can induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eThe following patterns are recognized:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\nthirdAction();\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant: secondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition); secondAction();  // Noncompliant: secondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nlet str \u003d undefined;\nfor (let i \u003d 0; i \u0026lt; array.length; i++)\n  str \u003d array[i];\n  doTheThing(str);  // Noncompliant: executed only on the last element\n\u003c/pre\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483\"\u003eMITRE, CWE-483\u003c/a\u003e - Incorrect Block Delimitation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving inconsistent indentation and omitting curly braces from a control structure, such as an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop,\nis misleading and can induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eThe following patterns are recognized:\u003c/p\u003e\n\u003cpre\u003e\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\nthirdAction();\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant: secondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nif (condition); secondAction();  // Noncompliant: secondAction is executed unconditionally\n\u003c/pre\u003e\n\u003cpre\u003e\nlet str \u003d undefined;\nfor (let i \u003d 0; i \u0026lt; array.length; i++)\n  str \u003d array[i];\n  doTheThing(str);  // Noncompliant: executed only on the last element\n\u003c/pre\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483\"\u003eMITRE, CWE-483\u003c/a\u003e - Incorrect Block Delimitation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3531",
    "name": "Generators should explicitly \"yield\" a value",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, a generator is a special type of function that can be paused and resumed during its execution. It allows you to define an iterative\nalgorithm by writing a function that can maintain its internal state and produce a sequence of values over time.\u003c/p\u003e\n\u003cp\u003eGenerators are defined using a function syntax with an asterisk \u003ccode\u003e(*)\u003c/code\u003e appended to the \u003ccode\u003efunction\u003c/code\u003e keyword\n(\u003ccode\u003efunction*\u003c/code\u003e). Within the generator function, you can use the \u003ccode\u003eyield\u003c/code\u003e keyword to produce a value and temporarily pause the\nexecution of the function, returning that value to the consumer.\u003c/p\u003e\n\u003cpre\u003e\nfunction* generate() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis example defines a generator function named \u003ccode\u003egenerate\u003c/code\u003e that produces a sequence of values: 1, 2, and 3.\u003c/p\u003e\n\u003cp\u003eUsing a generator without the \u003ccode\u003eyield\u003c/code\u003e keyword can limit the usefulness and potential benefits of generators. When you use the\n\u003ccode\u003eyield\u003c/code\u003e keyword without providing a value, it creates a yield expression that pauses the execution of the generator function and returns\n\u003ccode\u003eundefined\u003c/code\u003e as the yielded value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction* range(start, end) {\n  while (start \u0026lt; end) {\n    yield; // Noncompliant: The generator yields undefined\n    start++;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYielding without a value makes it harder for the generator consumer to understand the purpose or context of the yielded value. Instead, one should\nalways provide an explicit value with \u003ccode\u003eyield\u003c/code\u003e (using \u003ccode\u003eundefined\u003c/code\u003e when that is the intention) to make the generated sequence more\nmeaningful and informative.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction* range(start, end) {\n  while (start \u0026lt; end) {\n    yield start;\n    start++;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\"\u003eGenerator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\"\u003e\u003ccode\u003eyield\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, a generator is a special type of function that can be paused and resumed during its execution. It allows you to define an iterative\nalgorithm by writing a function that can maintain its internal state and produce a sequence of values over time.\u003c/p\u003e\n\u003cp\u003eGenerators are defined using a function syntax with an asterisk \u003ccode\u003e(*)\u003c/code\u003e appended to the \u003ccode\u003efunction\u003c/code\u003e keyword\n(\u003ccode\u003efunction*\u003c/code\u003e). Within the generator function, you can use the \u003ccode\u003eyield\u003c/code\u003e keyword to produce a value and temporarily pause the\nexecution of the function, returning that value to the consumer.\u003c/p\u003e\n\u003cpre\u003e\nfunction* generate() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis example defines a generator function named \u003ccode\u003egenerate\u003c/code\u003e that produces a sequence of values: 1, 2, and 3.\u003c/p\u003e\n\u003cp\u003eUsing a generator without the \u003ccode\u003eyield\u003c/code\u003e keyword can limit the usefulness and potential benefits of generators. When you use the\n\u003ccode\u003eyield\u003c/code\u003e keyword without providing a value, it creates a yield expression that pauses the execution of the generator function and returns\n\u003ccode\u003eundefined\u003c/code\u003e as the yielded value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction* range(start, end) {\n  while (start \u0026lt; end) {\n    yield; // Noncompliant: The generator yields undefined\n    start++;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eYielding without a value makes it harder for the generator consumer to understand the purpose or context of the yielded value. Instead, one should\nalways provide an explicit value with \u003ccode\u003eyield\u003c/code\u003e (using \u003ccode\u003eundefined\u003c/code\u003e when that is the intention) to make the generated sequence more\nmeaningful and informative.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction* range(start, end) {\n  while (start \u0026lt; end) {\n    yield start;\n    start++;\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\"\u003eGenerator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\"\u003e\u003ccode\u003eyield\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "api-design",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1110",
    "name": "Redundant pairs of parentheses should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eParentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.\u003c/p\u003e\n\u003cpre\u003e\na \u003d (b * c) + (d * e); // Compliant: the intent is clear.\n\u003c/pre\u003e\n\u003cp\u003eRedundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d ((y / 2 + 1));  // Noncompliant\n\nif (a \u0026amp;\u0026amp; ((x + y \u0026gt; 0))) {  // Noncompliant\n  return ((x + 1));  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x + y \u0026gt; 0)) {\n  return (x + 1);\n}\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eParentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.\u003c/p\u003e\n\u003cpre\u003e\na \u003d (b * c) + (d * e); // Compliant: the intent is clear.\n\u003c/pre\u003e\n\u003cp\u003eRedundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet x \u003d ((y / 2 + 1));  // Noncompliant\n\nif (a \u0026amp;\u0026amp; ((x + y \u0026gt; 0))) {  // Noncompliant\n  return ((x + 1));  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x + y \u0026gt; 0)) {\n  return (x + 1);\n}\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:Parentheses"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4502",
    "name": "Disabling CSRF protections is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didnâ€™t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.\u003c/p\u003e\n\u003cp\u003eThe attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The web application uses cookies to authenticate users. \u003c/li\u003e\n  \u003cli\u003e There exist sensitive operations in the web application that can be performed when the user is authenticated. \u003c/li\u003e\n  \u003cli\u003e The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003eExpress.js CSURF middleware\u003c/a\u003e protection is not found on an unsafe HTTP method like POST\nmethod:\u003c/p\u003e\n\u003cpre\u003e\nlet csrf \u003d require(\u0027csurf\u0027);\nlet express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie: true });\n\nlet app \u003d express();\n\n// Sensitive: this operation doesn\u0027t look like protected by CSURF middleware (csrfProtection is not used)\napp.post(\u0027/money_transfer\u0027, parseForm, function (req, res) {\n  res.send(\u0027Money transferred\u0027);\n});\n\u003c/pre\u003e\n\u003cp\u003eProtection provided by \u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003eExpress.js CSURF middleware\u003c/a\u003e is globally disabled on unsafe methods:\u003c/p\u003e\n\u003cpre\u003e\nlet csrf \u003d require(\u0027csurf\u0027);\nlet express \u003d require(\u0027express\u0027);\n\napp.use(csrf({ cookie: true, ignoreMethods: [\"POST\", \"GET\"] })); // Sensitive as POST is unsafe method\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Protection against CSRF attacks is strongly recommended:\n    \u003cul\u003e\n      \u003cli\u003e to be activated by default for all \u003ca href\u003d\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\"\u003eunsafe HTTP\n      methods\u003c/a\u003e. \u003c/li\u003e\n      \u003cli\u003e implemented, for example, with an unguessable CSRF token \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Of course all sensitive operations should not be performed with \u003ca\n  href\u003d\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\"\u003esafe HTTP\u003c/a\u003e methods like \u003ccode\u003eGET\u003c/code\u003e which are designed to be\n  used only for information retrieval. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003eExpress.js CSURF middleware\u003c/a\u003e protection is used on unsafe methods:\u003c/p\u003e\n\u003cpre\u003e\nlet csrf \u003d require(\u0027csurf\u0027);\nlet express \u003d require(\u0027express\u0027);\n\nlet csrfProtection \u003d csrf({ cookie:  true });\n\nlet app \u003d express();\n\napp.post(\u0027/money_transfer\u0027, parseForm, csrfProtection, function (req, res) { // Compliant\n  res.send(\u0027Money transferred\u0027)\n});\n\u003c/pre\u003e\n\u003cp\u003eProtection provided by \u003ca href\u003d\"https://www.npmjs.com/package/csurf\"\u003eExpress.js CSURF middleware\u003c/a\u003e is enabled on unsafe methods:\u003c/p\u003e\n\u003cpre\u003e\nlet csrf \u003d require(\u0027csurf\u0027);\nlet express \u003d require(\u0027express\u0027);\n\napp.use(csrf({ cookie: true, ignoreMethods: [\"GET\"] })); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/352\"\u003eMITRE, CWE-352\u003c/a\u003e - Cross-Site Request Forgery (CSRF) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/csrf\"\u003eOWASP: Cross-Site Request Forgery\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "javascript:S3533",
    "name": "\"import\" should be used to include external code",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBefore ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e, and older usages should be\nconverted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n// circle.js\nexports.area \u003d function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine([\"./cart\", \"./horse\"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle \u003d require(\u0027./circle.js\u0027);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// circle.js\nlet area \u003d function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from \"./cart.js\";\nimport horse from \"./horse.js\";\n\n// bar.js\nimport circle from \"./circle.js\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBefore ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e, and older usages should be\nconverted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n// circle.js\nexports.area \u003d function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine([\"./cart\", \"./horse\"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle \u003d require(\u0027./circle.js\u0027);  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// circle.js\nlet area \u003d function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from \"./cart.js\";\nimport horse from \"./horse.js\";\n\n// bar.js\nimport circle from \"./circle.js\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "convention",
      "es2015",
      "obsolete",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2685",
    "name": "\"arguments.caller\" and \"arguments.callee\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, \u003ccode\u003earguments\u003c/code\u003e is a built-in array-like object automatically available within the scope of all non-arrow functions. It\nallows you to access the arguments the function was called with, even if the number of arguments passed during the function call does not match the\nnumber declared in the function signature. \u003ccode\u003earguments\u003c/code\u003e has entries for each argument, with the first entryâ€™s index at \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe arguments object has two deprecated properties called \u003ccode\u003earguments.caller\u003c/code\u003e and \u003ccode\u003earguments.callee\u003c/code\u003e, which were used to refer\nto functions involved in the function invocation chain:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003earguments.callee\u003c/code\u003e property contains the currently executing function that the arguments belong to. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003earguments.caller\u003c/code\u003e property returns the function that invoked the currently executing function. It was replaced by\n  \u003ccode\u003eFunction.prototype.caller\u003c/code\u003e, which provides the same functionality. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBoth \u003ccode\u003earguments.caller\u003c/code\u003e and \u003ccode\u003earguments.callee\u003c/code\u003e are non-standard, deprecated, and leak stack information, which poses security\nrisks and severely limits the possibility of optimizations.\u003c/p\u003e\n\u003cp\u003eAccessing \u003ccode\u003earguments.callee\u003c/code\u003e, \u003ccode\u003eFunction.prototype.caller\u003c/code\u003e and \u003ccode\u003eFunction.prototype.arguments\u003c/code\u003e in strict mode will\nthrow a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfunction whoCalled() {\n   if (arguments.caller \u003d\u003d null)   //Noncompliant\n      console.log(\u0027I was called from the global scope.\u0027);\n   else\n      console.log(arguments.caller + \u0027 called me!\u0027);  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe arguments object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee#description\"\u003earguments.callee\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"\u003eFunction.prototype.caller\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"\u003eFunction.prototype.arguments\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\"\u003eReferenceError: deprecated\n  caller or arguments usage\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, \u003ccode\u003earguments\u003c/code\u003e is a built-in array-like object automatically available within the scope of all non-arrow functions. It\nallows you to access the arguments the function was called with, even if the number of arguments passed during the function call does not match the\nnumber declared in the function signature. \u003ccode\u003earguments\u003c/code\u003e has entries for each argument, with the first entryâ€™s index at \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe arguments object has two deprecated properties called \u003ccode\u003earguments.caller\u003c/code\u003e and \u003ccode\u003earguments.callee\u003c/code\u003e, which were used to refer\nto functions involved in the function invocation chain:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003earguments.callee\u003c/code\u003e property contains the currently executing function that the arguments belong to. \u003c/li\u003e\n  \u003cli\u003e The \u003ccode\u003earguments.caller\u003c/code\u003e property returns the function that invoked the currently executing function. It was replaced by\n  \u003ccode\u003eFunction.prototype.caller\u003c/code\u003e, which provides the same functionality. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBoth \u003ccode\u003earguments.caller\u003c/code\u003e and \u003ccode\u003earguments.callee\u003c/code\u003e are non-standard, deprecated, and leak stack information, which poses security\nrisks and severely limits the possibility of optimizations.\u003c/p\u003e\n\u003cp\u003eAccessing \u003ccode\u003earguments.callee\u003c/code\u003e, \u003ccode\u003eFunction.prototype.caller\u003c/code\u003e and \u003ccode\u003eFunction.prototype.arguments\u003c/code\u003e in strict mode will\nthrow a \u003ccode\u003eTypeError\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfunction whoCalled() {\n   if (arguments.caller \u003d\u003d null)   //Noncompliant\n      console.log(\u0027I was called from the global scope.\u0027);\n   else\n      console.log(arguments.caller + \u0027 called me!\u0027);  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"\u003eThe arguments object\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee#description\"\u003earguments.callee\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"\u003eFunction.prototype.caller\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"\u003eFunction.prototype.arguments\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\"\u003eReferenceError: deprecated\n  caller or arguments usage\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "obsolete"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2201",
    "name": "Return values from functions without side effects should not be ignored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a function is called, it executes its block of code and uses a \u003ccode\u003ereturn\u003c/code\u003e statement within the function to specify the value that the\nfunction will produce as its result. This returned value can then be used or assigned to a variable in the calling code.\u003c/p\u003e\n\u003cp\u003eIf a function returns a value that is not used or assigned to a variable, it may indicate that the function is not being used correctly or that\nthere is a mistake in the code. This can make the code harder to understand and maintain, and can also lead to errors if the return value is needed\nlater in the code.\u003c/p\u003e\n\u003cp\u003eIgnoring the return value of a function can be a sign of poor coding practices. It can indicate that the developer did not fully understand the\npurpose of the function or did not take the time to properly integrate it into the code.\u003c/p\u003e\n\u003cp\u003eThis rule triggers an issue only on a predefined list of methods from built-in objects (\u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eNumber\u003c/code\u003e,\n\u003ccode\u003eDate\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e, \u003ccode\u003eMath\u003c/code\u003e, and \u003ccode\u003eRegExp\u003c/code\u003e) to prevent generating any false-positives.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0027hello\u0027.lastIndexOf(\u0027e\u0027); // Noncompliant: The return value is lost\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the return value of the function is used by assigning the return value to a variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet lastIndex \u003d \u0027hello\u0027.lastIndexOf(\u0027e\u0027);\n\u003c/pre\u003e\n\u003cp\u003eOr use the value directly as part of an expression.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconsole.log(\u0027hello\u0027.lastIndexOf(\u0027e\u0027));\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\"\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a function is called, it executes its block of code and uses a \u003ccode\u003ereturn\u003c/code\u003e statement within the function to specify the value that the\nfunction will produce as its result. This returned value can then be used or assigned to a variable in the calling code.\u003c/p\u003e\n\u003cp\u003eIf a function returns a value that is not used or assigned to a variable, it may indicate that the function is not being used correctly or that\nthere is a mistake in the code. This can make the code harder to understand and maintain, and can also lead to errors if the return value is needed\nlater in the code.\u003c/p\u003e\n\u003cp\u003eIgnoring the return value of a function can be a sign of poor coding practices. It can indicate that the developer did not fully understand the\npurpose of the function or did not take the time to properly integrate it into the code.\u003c/p\u003e\n\u003cp\u003eThis rule triggers an issue only on a predefined list of methods from built-in objects (\u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eNumber\u003c/code\u003e,\n\u003ccode\u003eDate\u003c/code\u003e, \u003ccode\u003eArray\u003c/code\u003e, \u003ccode\u003eMath\u003c/code\u003e, and \u003ccode\u003eRegExp\u003c/code\u003e) to prevent generating any false-positives.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0027hello\u0027.lastIndexOf(\u0027e\u0027); // Noncompliant: The return value is lost\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the return value of the function is used by assigning the return value to a variable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet lastIndex \u003d \u0027hello\u0027.lastIndexOf(\u0027e\u0027);\n\u003c/pre\u003e\n\u003cp\u003eOr use the value directly as part of an expression.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconsole.log(\u0027hello\u0027.lastIndexOf(\u0027e\u0027));\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\"\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"\u003e\u003ccode\u003eRegExp\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S4624",
    "name": "Template literals should not be nested",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTemplate literals, also known as template strings, allow for string interpolation and multiline strings in JavaScript. They provide a more\nconvenient and flexible way to work with strings compared to traditional string concatenation or manipulation.\u003c/p\u003e\n\u003cp\u003eTemplate literals are delimited with the backtick \u003ccode\u003e(`)\u003c/code\u003e character. They are a convenient way to include variables or expressions within\na string using placeholders \u003ccode\u003e`${expression}`\u003c/code\u003e in the string and evaluate them dynamically.\u003c/p\u003e\n\u003cp\u003eHowever, nesting template literals can make the code less readable. With each nested template literal, the code becomes more complex and harder to\nunderstand. It can be challenging to keep track of the opening and closing backticks and properly escape characters if needed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst color \u003d \"red\";\nconst count \u003d 3;\nconst message \u003d `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant: nested template strings not easy to read\n\u003c/pre\u003e\n\u003cp\u003eIn such situations, moving the nested template into a separate statement is preferable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst color \u003d \"red\";\nconst count \u003d 3;\nconst apples \u003d color ? `${count} ${color}` : count;\nconst message \u003d `I have ${apples} apples`;\n\u003c/pre\u003e\n\u003cp\u003eThe rule makes an exception for nested template literals spanning multiple lines. It allows you to visually separate different sections and gives\nyou more freedom in formatting your text, including line breaks, indentation, and other formatting elements, enhancing readability.\u003c/p\u003e\n\u003cpre\u003e\nconst name \u003d \u0027John\u0027;\nconst age \u003d 42;\n\nconst message \u003d `Hello ${name}!\nYou are ${age} years old.\n${`This is a nested template literal.`}\nIt can span multiple lines.`;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003eTemplate literals (Template\n  strings)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTemplate literals, also known as template strings, allow for string interpolation and multiline strings in JavaScript. They provide a more\nconvenient and flexible way to work with strings compared to traditional string concatenation or manipulation.\u003c/p\u003e\n\u003cp\u003eTemplate literals are delimited with the backtick \u003ccode\u003e(`)\u003c/code\u003e character. They are a convenient way to include variables or expressions within\na string using placeholders \u003ccode\u003e`${expression}`\u003c/code\u003e in the string and evaluate them dynamically.\u003c/p\u003e\n\u003cp\u003eHowever, nesting template literals can make the code less readable. With each nested template literal, the code becomes more complex and harder to\nunderstand. It can be challenging to keep track of the opening and closing backticks and properly escape characters if needed.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst color \u003d \"red\";\nconst count \u003d 3;\nconst message \u003d `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant: nested template strings not easy to read\n\u003c/pre\u003e\n\u003cp\u003eIn such situations, moving the nested template into a separate statement is preferable.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst color \u003d \"red\";\nconst count \u003d 3;\nconst apples \u003d color ? `${count} ${color}` : count;\nconst message \u003d `I have ${apples} apples`;\n\u003c/pre\u003e\n\u003cp\u003eThe rule makes an exception for nested template literals spanning multiple lines. It allows you to visually separate different sections and gives\nyou more freedom in formatting your text, including line breaks, indentation, and other formatting elements, enhancing readability.\u003c/p\u003e\n\u003cpre\u003e\nconst name \u003d \u0027John\u0027;\nconst age \u003d 42;\n\nconst message \u003d `Hello ${name}!\nYou are ${age} years old.\n${`This is a nested template literal.`}\nIt can span multiple lines.`;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003eTemplate literals (Template\n  strings)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "brain-overload",
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2688",
    "name": "\"NaN\" should not be used in comparisons",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, \u003ccode\u003eNaN\u003c/code\u003e stands for \"Not-a-Number.\" It is a special value representing a numeric data type that is not a valid number.\n\u003ccode\u003eNaN\u003c/code\u003e is returned as a result when an arithmetic operation or mathematical function is performed, and the result is undefined or\nunrepresentable as a valid number.\u003c/p\u003e\n\u003cp\u003eComparing a value with \u003ccode\u003eNaN\u003c/code\u003e in JavaScript can be problematic because of the way \u003ccode\u003eNaN\u003c/code\u003e behaves in comparison operations. The\nreason is that \u003ccode\u003eNaN\u003c/code\u003e is not equal to any value, including itself, and this behavior can lead to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst a \u003d NaN;\n\nif (a \u003d\u003d\u003d NaN) { // Noncompliant: Always false\n  console.log(\"a is not a number\"); // This is dead code\n}\n\nif (a !\u003d\u003d NaN) { // Noncompliant: Always true\n  console.log(\"a is not NaN\"); // This statement is not necessarily true\n}\n\u003c/pre\u003e\n\u003cp\u003eTo check if a value is \u003ccode\u003eNaN\u003c/code\u003e, you should use the \u003ccode\u003eisNaN()\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d NaN;\n\nif (isNaN(a)) {\n  console.log(\"a is not a number\");\n}\n\nif (!isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n\u003c/pre\u003e\n\u003cp\u003eKeep in mind that \u003ccode\u003eisNaN()\u003c/code\u003e can be a bit quirky since it tries to convert its argument into a number before checking if it is\n\u003ccode\u003eNaN\u003c/code\u003e. If the argument cannot be converted into a number, \u003ccode\u003eisNaN()\u003c/code\u003e will return true, which may not be the desired behavior in\nall cases.\u003c/p\u003e\n\u003cp\u003eInstead, you should prefer using the \u003ccode\u003eNumber.isNaN()\u003c/code\u003e method over \u003ccode\u003eisNaN()\u003c/code\u003e to perform a strict check for \u003ccode\u003eNaN\u003c/code\u003e\nwithout any type conversion:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d NaN;\n\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\n\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"\u003e\u003ccode\u003eisNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\"\u003eType conversion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, \u003ccode\u003eNaN\u003c/code\u003e stands for \"Not-a-Number.\" It is a special value representing a numeric data type that is not a valid number.\n\u003ccode\u003eNaN\u003c/code\u003e is returned as a result when an arithmetic operation or mathematical function is performed, and the result is undefined or\nunrepresentable as a valid number.\u003c/p\u003e\n\u003cp\u003eComparing a value with \u003ccode\u003eNaN\u003c/code\u003e in JavaScript can be problematic because of the way \u003ccode\u003eNaN\u003c/code\u003e behaves in comparison operations. The\nreason is that \u003ccode\u003eNaN\u003c/code\u003e is not equal to any value, including itself, and this behavior can lead to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst a \u003d NaN;\n\nif (a \u003d\u003d\u003d NaN) { // Noncompliant: Always false\n  console.log(\"a is not a number\"); // This is dead code\n}\n\nif (a !\u003d\u003d NaN) { // Noncompliant: Always true\n  console.log(\"a is not NaN\"); // This statement is not necessarily true\n}\n\u003c/pre\u003e\n\u003cp\u003eTo check if a value is \u003ccode\u003eNaN\u003c/code\u003e, you should use the \u003ccode\u003eisNaN()\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d NaN;\n\nif (isNaN(a)) {\n  console.log(\"a is not a number\");\n}\n\nif (!isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n\u003c/pre\u003e\n\u003cp\u003eKeep in mind that \u003ccode\u003eisNaN()\u003c/code\u003e can be a bit quirky since it tries to convert its argument into a number before checking if it is\n\u003ccode\u003eNaN\u003c/code\u003e. If the argument cannot be converted into a number, \u003ccode\u003eisNaN()\u003c/code\u003e will return true, which may not be the desired behavior in\nall cases.\u003c/p\u003e\n\u003cp\u003eInstead, you should prefer using the \u003ccode\u003eNumber.isNaN()\u003c/code\u003e method over \u003ccode\u003eisNaN()\u003c/code\u003e to perform a strict check for \u003ccode\u003eNaN\u003c/code\u003e\nwithout any type conversion:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst a \u003d NaN;\n\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\n\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"\u003e\u003ccode\u003eisNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"\u003e\u003ccode\u003eNumber.isNaN()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion\"\u003eType conversion\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3776",
    "name": "Cognitive Complexity of functions should not be too high",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eReducing cognitive complexity can be challenging.\u003cbr\u003e Here are a few suggestions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eExtract complex conditions in a new function.\u003c/strong\u003e\u003cbr\u003e Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003cbr\u003e Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003cbr\u003e To avoid the nesting of conditions, process exceptional cases first and return\n  early. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eUse null-safe operations (if available in the language).\u003c/strong\u003e\u003cbr\u003e When available the \u003ccode\u003e.?\u003c/code\u003e or \u003ccode\u003e??\u003c/code\u003e operator\n  replaces multiple tests and simplifies the flow. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExtraction of a complex condition in a new function.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe code is using a complex condition and has a cognitive cost of 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateFinalPrice(user, cart) {\n  let total \u003d calculateTotal(cart);\n  if (user.hasMembership                       // +1 (if)\n    \u0026amp;\u0026amp; user.orders \u0026gt; 10                        // +1 (more than one condition)\n    \u0026amp;\u0026amp; user.accountActive\n    \u0026amp;\u0026amp; !user.hasDiscount\n    || user.orders \u003d\u003d\u003d 1) {                    // +1 (change of operator in condition)\n      total \u003d applyDiscount(user, total);\n  }\n  return total;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEven if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n\u003ccode\u003ecalculateFinalPrice\u003c/code\u003e function, which now only has a cognitive cost of 1.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateFinalPrice(user, cart) {\n  let total \u003d calculateTotal(cart);\n  if (isEligibleForDiscount(user)) {       // +1 (if)\n    total \u003d applyDiscount(user, total);\n  }\n  return total;\n}\n\nfunction isEligibleForDiscount(user) {\n  return user.hasMembership\n    \u0026amp;\u0026amp; user.orders \u0026gt; 10                     // +1 (more than one condition)\n    \u0026amp;\u0026amp; user.accountActive\n    \u0026amp;\u0026amp; !user.hasDiscount\n    || user.orders \u003d\u003d\u003d 1                    // +1 (change of operator in condition)\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the \u003ccode\u003efor\u003c/code\u003e loops.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateTotal(cart) {\n  let total \u003d 0;\n  for (let i \u003d 0; i \u0026lt; cart.length; i++) {       // +1 (for)\n    total +\u003d cart[i].price;\n  }\n\n  // calculateSalesTax\n  for (let i \u003d 0; i \u0026lt; cart.length; i++) {       // +1 (for)\n    total +\u003d 0.2 * cart[i].price;\n  }\n\n  //calculateShipping\n  total +\u003d 5 * cart.length;\n\n  return total;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n\u003ccode\u003ecalculateTotal\u003c/code\u003e has now a complexity score of zero.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateTotal(cart) {\n  let total \u003d calculateSubtotal(cart);\n  total +\u003d calculateSalesTax(cart);\n  total +\u003d calculateShipping(cart);\n  return total;\n}\n\nfunction calculateSubtotal(cart) {\n  let subTotal \u003d 0;\n  for (const item of cart) {        // +1 (for)\n    subTotal +\u003d item.price;\n  }\n  return subTotal;\n}\n\nfunction calculateSalesTax(cart) {\n  let salesTax \u003d 0;\n  for (const item of cart) {        // +1 (for)\n    salesTax +\u003d 0.2 * item.price;\n  }\n  return salesTax;\n}\n\nfunction calculateShipping(cart) {\n  return 5 * cart.length;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe below code has a cognitive complexity of 6.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateDiscount(price, user) {\n  if (isEligibleForDiscount(user)) {  // +1 ( if )\n    if (user?.hasMembership) {        // +2 ( nested if )\n      return price * 0.9;\n  } else if (user?.orders \u003d\u003d\u003d 1 ) {   // +1 ( else )\n          return price * 0.95;\n    } else {                          // +1 ( else )\n      return price;\n    }\n  } else {                            // +1 ( else )\n    return price;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eChecking for the edge case first flattens the \u003ccode\u003eif\u003c/code\u003e statements and reduces the cognitive complexity to 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateDiscount(price, user) {\n    if (!isEligibleForDiscount(user)) {  // +1 ( if )\n      return price;\n    }\n    if (user?.hasMembership) {           // +1 ( if )\n      return price * 0.9;\n    }\n    if (user?.orders \u003d\u003d\u003d 1) {            // +1 ( if )\n      return price * 0.95;\n    }\n    return price;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eUse the optional chaining operator to access data.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the below code, the cognitive complexity is increased due to the multiple checks required to access the manufacturerâ€™s name. This can be\nsimplified using the optional chaining operator.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nlet manufacturerName \u003d null;\n\nif (product \u0026amp;\u0026amp; product.details \u0026amp;\u0026amp; product.details.manufacturer) { // +1 (if) +1 (multiple condition)\n    manufacturerName \u003d product.details.manufacturer.name;\n}\nif (manufacturerName) { // +1 (if)\n  console.log(manufacturerName);\n} else {\n  console.log(\u0027Manufacturer name not found\u0027);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe optional chaining operator will return \u003ccode\u003eundefined\u003c/code\u003e if any reference in the chain is \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e,\navoiding multiple checks:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nlet manufacturerName \u003d product?.details?.manufacturer?.name;\n\nif (manufacturerName) { // +1 (if)\n  console.log(manufacturerName);\n} else {\n  console.log(\u0027Manufacturer name not found\u0027);\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eAs this code is complex, ensure that you have unit tests that cover the code before refactoring.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eReducing cognitive complexity can be challenging.\u003cbr\u003e Here are a few suggestions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eExtract complex conditions in a new function.\u003c/strong\u003e\u003cbr\u003e Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003cbr\u003e Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003cbr\u003e To avoid the nesting of conditions, process exceptional cases first and return\n  early. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eUse null-safe operations (if available in the language).\u003c/strong\u003e\u003cbr\u003e When available the \u003ccode\u003e.?\u003c/code\u003e or \u003ccode\u003e??\u003c/code\u003e operator\n  replaces multiple tests and simplifies the flow. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eExtraction of a complex condition in a new function.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe code is using a complex condition and has a cognitive cost of 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateFinalPrice(user, cart) {\n  let total \u003d calculateTotal(cart);\n  if (user.hasMembership                       // +1 (if)\n    \u0026amp;\u0026amp; user.orders \u0026gt; 10                        // +1 (more than one condition)\n    \u0026amp;\u0026amp; user.accountActive\n    \u0026amp;\u0026amp; !user.hasDiscount\n    || user.orders \u003d\u003d\u003d 1) {                    // +1 (change of operator in condition)\n      total \u003d applyDiscount(user, total);\n  }\n  return total;\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEven if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n\u003ccode\u003ecalculateFinalPrice\u003c/code\u003e function, which now only has a cognitive cost of 1.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateFinalPrice(user, cart) {\n  let total \u003d calculateTotal(cart);\n  if (isEligibleForDiscount(user)) {       // +1 (if)\n    total \u003d applyDiscount(user, total);\n  }\n  return total;\n}\n\nfunction isEligibleForDiscount(user) {\n  return user.hasMembership\n    \u0026amp;\u0026amp; user.orders \u0026gt; 10                     // +1 (more than one condition)\n    \u0026amp;\u0026amp; user.accountActive\n    \u0026amp;\u0026amp; !user.hasDiscount\n    || user.orders \u003d\u003d\u003d 1                    // +1 (change of operator in condition)\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBreak down large functions.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eFor example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the \u003ccode\u003efor\u003c/code\u003e loops.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateTotal(cart) {\n  let total \u003d 0;\n  for (let i \u003d 0; i \u0026lt; cart.length; i++) {       // +1 (for)\n    total +\u003d cart[i].price;\n  }\n\n  // calculateSalesTax\n  for (let i \u003d 0; i \u0026lt; cart.length; i++) {       // +1 (for)\n    total +\u003d 0.2 * cart[i].price;\n  }\n\n  //calculateShipping\n  total +\u003d 5 * cart.length;\n\n  return total;\n}\n\u003c/pre\u003e\n\u003cp\u003eThis function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n\u003ccode\u003ecalculateTotal\u003c/code\u003e has now a complexity score of zero.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateTotal(cart) {\n  let total \u003d calculateSubtotal(cart);\n  total +\u003d calculateSalesTax(cart);\n  total +\u003d calculateShipping(cart);\n  return total;\n}\n\nfunction calculateSubtotal(cart) {\n  let subTotal \u003d 0;\n  for (const item of cart) {        // +1 (for)\n    subTotal +\u003d item.price;\n  }\n  return subTotal;\n}\n\nfunction calculateSalesTax(cart) {\n  let salesTax \u003d 0;\n  for (const item of cart) {        // +1 (for)\n    salesTax +\u003d 0.2 * item.price;\n  }\n  return salesTax;\n}\n\nfunction calculateShipping(cart) {\n  return 5 * cart.length;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eAvoid deep nesting by returning early.\u003c/strong\u003e\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe below code has a cognitive complexity of 6.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction calculateDiscount(price, user) {\n  if (isEligibleForDiscount(user)) {  // +1 ( if )\n    if (user?.hasMembership) {        // +2 ( nested if )\n      return price * 0.9;\n  } else if (user?.orders \u003d\u003d\u003d 1 ) {   // +1 ( else )\n          return price * 0.95;\n    } else {                          // +1 ( else )\n      return price;\n    }\n  } else {                            // +1 ( else )\n    return price;\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eChecking for the edge case first flattens the \u003ccode\u003eif\u003c/code\u003e statements and reduces the cognitive complexity to 3.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"4\" data-diff-type\u003d\"compliant\"\u003e\nfunction calculateDiscount(price, user) {\n    if (!isEligibleForDiscount(user)) {  // +1 ( if )\n      return price;\n    }\n    if (user?.hasMembership) {           // +1 ( if )\n      return price * 0.9;\n    }\n    if (user?.orders \u003d\u003d\u003d 1) {            // +1 ( if )\n      return price * 0.95;\n    }\n    return price;\n}\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eUse the optional chaining operator to access data.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the below code, the cognitive complexity is increased due to the multiple checks required to access the manufacturerâ€™s name. This can be\nsimplified using the optional chaining operator.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nlet manufacturerName \u003d null;\n\nif (product \u0026amp;\u0026amp; product.details \u0026amp;\u0026amp; product.details.manufacturer) { // +1 (if) +1 (multiple condition)\n    manufacturerName \u003d product.details.manufacturer.name;\n}\nif (manufacturerName) { // +1 (if)\n  console.log(manufacturerName);\n} else {\n  console.log(\u0027Manufacturer name not found\u0027);\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eThe optional chaining operator will return \u003ccode\u003eundefined\u003c/code\u003e if any reference in the chain is \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e,\navoiding multiple checks:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nlet manufacturerName \u003d product?.details?.manufacturer?.name;\n\nif (manufacturerName) { // +1 (if)\n  console.log(manufacturerName);\n} else {\n  console.log(\u0027Manufacturer name not found\u0027);\n}\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eAs this code is complex, ensure that you have unit tests that cover the code before refactoring.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "The maximum authorized complexity.",
        "defaultValue": "15",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "threshold": "15"
    },
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S878",
    "name": "Comma operator should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe comma operator takes two expressions, executes them from left to right, and returns the result of the second one. The use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.\u003c/p\u003e\n\u003cpre\u003e\ni \u003d a +\u003d 2, a + b;  // Noncompliant: What\u0027s the value of i ?\n\u003c/pre\u003e\n\u003cp\u003eWriting each expression on its own line will improve readability and might fix misunderstandings.\u003c/p\u003e\n\u003cpre\u003e\na +\u003d 2;\ni \u003d a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn\u0027t doing it.\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe comma operator is tolerated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In initializations and increment expressions of \u003ccode\u003efor\u003c/code\u003e loops. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfor (i \u003d 0, j \u003d 5; i \u0026lt; 6; i++, j++) { ... }\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e If the expression sequence is explicitly wrapped in parentheses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ni \u003d (a +\u003d 2, a + b); // Compliant by exception\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\"\u003eComma operator (,)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe comma operator takes two expressions, executes them from left to right, and returns the result of the second one. The use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.\u003c/p\u003e\n\u003cpre\u003e\ni \u003d a +\u003d 2, a + b;  // Noncompliant: What\u0027s the value of i ?\n\u003c/pre\u003e\n\u003cp\u003eWriting each expression on its own line will improve readability and might fix misunderstandings.\u003c/p\u003e\n\u003cpre\u003e\na +\u003d 2;\ni \u003d a + b; // We probably expected to assign the result of the addition to i, although the previous code wasn\u0027t doing it.\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe comma operator is tolerated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e In initializations and increment expressions of \u003ccode\u003efor\u003c/code\u003e loops. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfor (i \u003d 0, j \u003d 5; i \u0026lt; 6; i++, j++) { ... }\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e If the expression sequence is explicitly wrapped in parentheses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ni \u003d (a +\u003d 2, a + b); // Compliant by exception\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator\"\u003eComma operator (,)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5868",
    "name": "Unicode Grapheme Clusters should be avoided inside regex character classes",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen placing Unicode \u003ca href\u003d\"https://unicode.org/glossary/#grapheme_cluster\"\u003eGrapheme Clusters\u003c/a\u003e (characters which require to be encoded in\nmultiple \u003ca href\u003d\"https://unicode.org/glossary/#code_point\"\u003eCode Points\u003c/a\u003e) inside a character class of a regular expression, this will likely lead\nto unintended behavior.\u003c/p\u003e\n\u003cp\u003eFor instance, the grapheme cluster \u003ccode\u003ecÌˆ\u003c/code\u003e requires two code points: one for \u003ccode\u003e\u0027c\u0027\u003c/code\u003e, followed by one for the \u003cem\u003eumlaut\u003c/em\u003e\nmodifier \u003ccode\u003e\u0027\\u{0308}\u0027\u003c/code\u003e. If placed within a character class, such as \u003ccode\u003e[cÌˆ]\u003c/code\u003e, the regex will consider the character class being the\nenumeration \u003ccode\u003e[c\\u{0308}]\u003c/code\u003e instead. It will, therefore, match every \u003ccode\u003e\u0027c\u0027\u003c/code\u003e and every \u003cem\u003eumlaut\u003c/em\u003e that isnâ€™t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\"ccÌˆdÌˆd\".replace(/[cÌˆdÌˆ]/g, \"X\"); // result is \"XXXXXX\" and not expected \"cXXd\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\"ccÌˆdÌˆd\".replace(/cÌˆ|dÌˆ/g, \"X\"); // result is \"cXXd\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen placing Unicode \u003ca href\u003d\"https://unicode.org/glossary/#grapheme_cluster\"\u003eGrapheme Clusters\u003c/a\u003e (characters which require to be encoded in\nmultiple \u003ca href\u003d\"https://unicode.org/glossary/#code_point\"\u003eCode Points\u003c/a\u003e) inside a character class of a regular expression, this will likely lead\nto unintended behavior.\u003c/p\u003e\n\u003cp\u003eFor instance, the grapheme cluster \u003ccode\u003ecÌˆ\u003c/code\u003e requires two code points: one for \u003ccode\u003e\u0027c\u0027\u003c/code\u003e, followed by one for the \u003cem\u003eumlaut\u003c/em\u003e\nmodifier \u003ccode\u003e\u0027\\u{0308}\u0027\u003c/code\u003e. If placed within a character class, such as \u003ccode\u003e[cÌˆ]\u003c/code\u003e, the regex will consider the character class being the\nenumeration \u003ccode\u003e[c\\u{0308}]\u003c/code\u003e instead. It will, therefore, match every \u003ccode\u003e\u0027c\u0027\u003c/code\u003e and every \u003cem\u003eumlaut\u003c/em\u003e that isnâ€™t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\"ccÌˆdÌˆd\".replace(/[cÌˆdÌˆ]/g, \"X\"); // result is \"XXXXXX\" and not expected \"cXXd\"\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\"ccÌˆdÌˆd\".replace(/cÌˆ|dÌˆ/g, \"X\"); // result is \"cXXd\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5869",
    "name": "Character classes in regular expressions should not contain the same character twice",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.\u003c/p\u003e\n\u003cp\u003eThus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like \u003ccode\u003e[0-99]\u003c/code\u003e to match numbers of up to two digits, when in fact it is equivalent to \u003ccode\u003e[0-9]\u003c/code\u003e.\nAnother common cause is forgetting to escape the \u003ccode\u003e-\u003c/code\u003e character, creating an unintended range that overlaps with other characters in the\ncharacter class.\u003c/p\u003e\n\u003cp\u003eCharacter ranges can also create duplicates when used with character class escapes. These are a type of escape sequence used in regular expressions\nto represent a specific set of characters. They are denoted by a backslash followed by a specific letter, such as \u003ccode\u003e\\d\u003c/code\u003e for digits,\n\u003ccode\u003e\\w\u003c/code\u003e for word characters, or \u003ccode\u003e\\s\u003c/code\u003e for whitespace characters. For example, the character class escape \u003ccode\u003e\\d\u003c/code\u003e is\nequivalent to the character range \u003ccode\u003e[0-9]\u003c/code\u003e, and the escape \u003ccode\u003e\\w\u003c/code\u003e is equivalent to \u003ccode\u003e[a-zA-Z0-9_]\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove the extra character, character range, or character class escape.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/[0-99]/ // Noncompliant, this won\u0027t actually match strings with two digits\n/[0-9.-_]/ // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n/[a-z0-9\\d]/ // Noncompliant, \\d matches a digit and is equivalent to [0-9]\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/[0-9]{1,2}/\n/[0-9.\\-_]/\n/[a-z\\d]/\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"\u003eCharacter\n  class escape\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.\u003c/p\u003e\n\u003cp\u003eThus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like \u003ccode\u003e[0-99]\u003c/code\u003e to match numbers of up to two digits, when in fact it is equivalent to \u003ccode\u003e[0-9]\u003c/code\u003e.\nAnother common cause is forgetting to escape the \u003ccode\u003e-\u003c/code\u003e character, creating an unintended range that overlaps with other characters in the\ncharacter class.\u003c/p\u003e\n\u003cp\u003eCharacter ranges can also create duplicates when used with character class escapes. These are a type of escape sequence used in regular expressions\nto represent a specific set of characters. They are denoted by a backslash followed by a specific letter, such as \u003ccode\u003e\\d\u003c/code\u003e for digits,\n\u003ccode\u003e\\w\u003c/code\u003e for word characters, or \u003ccode\u003e\\s\u003c/code\u003e for whitespace characters. For example, the character class escape \u003ccode\u003e\\d\u003c/code\u003e is\nequivalent to the character range \u003ccode\u003e[0-9]\u003c/code\u003e, and the escape \u003ccode\u003e\\w\u003c/code\u003e is equivalent to \u003ccode\u003e[a-zA-Z0-9_]\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove the extra character, character range, or character class escape.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n/[0-99]/ // Noncompliant, this won\u0027t actually match strings with two digits\n/[0-9.-_]/ // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n/[a-z0-9\\d]/ // Noncompliant, \\d matches a digit and is equivalent to [0-9]\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n/[0-9]{1,2}/\n/[0-9.\\-_]/\n/[a-z\\d]/\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes\"\u003eCharacter\n  classes\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape\"\u003eCharacter\n  class escape\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6836",
    "name": "\"case\" and \"default\" clauses should not contain lexical declarations",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe ECMAScript specification allows for creating block-level lexical declarations (\u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003efunction\u003c/code\u003e, and\n\u003ccode\u003eclass\u003c/code\u003e) in any block statement or expression. However, when these declarations are made inside the \u003ccode\u003ecase\u003c/code\u003e or\n\u003ccode\u003edefault\u003c/code\u003e clause of a \u003ccode\u003eswitch\u003c/code\u003e statement, they are not confined to the block of that \u003ccode\u003ecase\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e\nclause. Instead, they apply to the whole \u003ccode\u003eswitch\u003c/code\u003e block but only get initialized when the cases are reached, which can lead to unexpected\nbehavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (foo) {\n    case 1:\n        let x \u003d 1; // Noncompliant\n        break;\n    case 2:\n        const y \u003d 2; // Noncompliant\n        break;\n    case 3:\n        function f() {} // Noncompliant\n        break;\n    case 4:\n        class C {} // Noncompliant\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix this, you can create a nested block within each \u003ccode\u003ecase\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e clause, ensuring each declaration is properly\nscoped to its respective block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (foo) {\n    case 1: {\n        let x \u003d 1;\n        break;\n    }\n    case 2: {\n        const y \u003d 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4: {\n        class C {}\n        break;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003eswitch\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe ECMAScript specification allows for creating block-level lexical declarations (\u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003efunction\u003c/code\u003e, and\n\u003ccode\u003eclass\u003c/code\u003e) in any block statement or expression. However, when these declarations are made inside the \u003ccode\u003ecase\u003c/code\u003e or\n\u003ccode\u003edefault\u003c/code\u003e clause of a \u003ccode\u003eswitch\u003c/code\u003e statement, they are not confined to the block of that \u003ccode\u003ecase\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e\nclause. Instead, they apply to the whole \u003ccode\u003eswitch\u003c/code\u003e block but only get initialized when the cases are reached, which can lead to unexpected\nbehavior.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nswitch (foo) {\n    case 1:\n        let x \u003d 1; // Noncompliant\n        break;\n    case 2:\n        const y \u003d 2; // Noncompliant\n        break;\n    case 3:\n        function f() {} // Noncompliant\n        break;\n    case 4:\n        class C {} // Noncompliant\n        break;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo fix this, you can create a nested block within each \u003ccode\u003ecase\u003c/code\u003e or \u003ccode\u003edefault\u003c/code\u003e clause, ensuring each declaration is properly\nscoped to its respective block.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nswitch (foo) {\n    case 1: {\n        let x \u003d 1;\n        break;\n    }\n    case 2: {\n        const y \u003d 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4: {\n        class C {}\n        break;\n    }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003eswitch\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S881",
    "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5742",
    "name": "Disabling Certificate Transparency monitoring is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency\"\u003eCertificate Transparency\u003c/a\u003e (CT) is an open-framework to\nprotect against identity theft when certificates are issued. \u003ca href\u003d\"https://en.wikipedia.org/wiki/Certificate_authority\"\u003eCertificate Authorities\u003c/a\u003e\n(CA) electronically sign certificate after verifying the identify of the certificate owner. Attackers use, among other things, social engineering\nattacks to trick a CA to correctly verifying a spoofed identity/forged certificate.\u003c/p\u003e\n\u003cp\u003eCAs implement Certificate Transparency framework to publicly log the records of newly issued certificates, allowing the public and in particular\nthe identity owner to monitor these logs to verify that his identify was not usurped.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The website identity is valuable and well-known, therefore prone to theft. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/expect-ct\"\u003eexpect-ct\u003c/a\u003e middleware is disabled:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n    helmet({\n      expectCt: false // Sensitive\n    })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\"\u003eExpect-CT\u003c/a\u003e HTTP header which instructs the web browser\nto check \u003ca href\u003d\"https://www.certificate-transparency.org/known-logs\"\u003epublic CT logs\u003c/a\u003e in order to verify if the website appears inside and if it\nis not, the browser will block the request and display a warning to the user.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the \u003ca href\u003d\"https://www.npmjs.com/package/expect-ct\"\u003eexpect-ct\u003c/a\u003e middleware is the standard way to implement\nexpect-ct. Usually, the deployment of this policy starts with the report only mode (\u003ccode\u003eenforce: false\u003c/code\u003e) and with a low \u003ccode\u003emaxAge\u003c/code\u003e\n(the number of seconds the policy will apply) value and next if everything works well it is recommended to block future connections that violate\nExpect-CT policy (\u003ccode\u003eenforce: true\u003c/code\u003e) and greater value for maxAge directive:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(helmet.expectCt({\n  enforce: true,\n  maxAge: 86400\n})); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e -\n  Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency\"\u003edeveloper.mozilla.org\u003c/a\u003e - Certificate Transparency\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Certificate_authority\"\u003ewikipedia.org\u003c/a\u003e - Certificate Authority \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5863",
    "name": "Assertions should not be given twice the same argument",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eIn Chai.js, there is no inherent problem with giving the same argument twice in an assertion. It wonâ€™t cause any errors or issues in the test\nexecution itself. The test will still run and pass as long as the assertion is correct.\u003c/p\u003e\n\u003cp\u003eHowever, having the same argument twice in an assertion might indicate a design issue or a potential mistake in your test. In most cases, you donâ€™t\nneed to compare a variable to itself in a test, as it doesnâ€™t provide any meaningful validation and is likely to be a bug due to the developerâ€™s\ncarelessness.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a Chai assertion is given twice the same argument.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\n\ndescribe(\"test the same object\", function() {\n    it(\"uses chai \u0027assert\u0027\", function() {\n        const expected \u003d \u00271\u0027;\n        const actual \u003d (1).toString();\n        assert.equal(actual, actual); // Noncompliant: Asserting the same argument\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eMake sure that the arguments of your assertions are not the same.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\n\ndescribe(\"test the same object\", function() {\n    it(\"uses chai \u0027assert\u0027\", function() {\n        const expected \u003d \u00271\u0027;\n        const actual \u003d (1).toString();\n        assert.equal(actual, expected);\n    });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/\"\u003eAPI Reference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssertions are statements that check whether certain conditions are true. They are used to validate that the actual results of a code snippet match\nthe expected outcomes. By using assertions, developers can ensure that their code behaves as intended and identify potential bugs or issues early in\nthe development process.\u003c/p\u003e\n\u003cp\u003eIn Chai.js, there is no inherent problem with giving the same argument twice in an assertion. It wonâ€™t cause any errors or issues in the test\nexecution itself. The test will still run and pass as long as the assertion is correct.\u003c/p\u003e\n\u003cp\u003eHowever, having the same argument twice in an assertion might indicate a design issue or a potential mistake in your test. In most cases, you donâ€™t\nneed to compare a variable to itself in a test, as it doesnâ€™t provide any meaningful validation and is likely to be a bug due to the developerâ€™s\ncarelessness.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a Chai assertion is given twice the same argument.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\n\ndescribe(\"test the same object\", function() {\n    it(\"uses chai \u0027assert\u0027\", function() {\n        const expected \u003d \u00271\u0027;\n        const actual \u003d (1).toString();\n        assert.equal(actual, actual); // Noncompliant: Asserting the same argument\n    });\n});\n\u003c/pre\u003e\n\u003cp\u003eMake sure that the arguments of your assertions are not the same.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst assert \u003d require(\u0027chai\u0027).assert;\n\ndescribe(\"test the same object\", function() {\n    it(\"uses chai \u0027assert\u0027\", function() {\n        const expected \u003d \u00271\u0027;\n        const actual \u003d (1).toString();\n        assert.equal(actual, expected);\n    });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Chai.js Documentation - \u003ca href\u003d\"https://www.chaijs.com/api/\"\u003eAPI Reference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1264",
    "name": "A \"while\" loop should be used instead of a \"for\" loop",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop is a type of loop construct that allows a block of code to be executed repeatedly for a fixed number of times. The\n\u003ccode\u003efor\u003c/code\u003e loop is typically used when the number of iterations is known in advance, and consists of three parts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The initialization statement is executed once at the beginning of the loop, and is used to initialize the loop counter or any other variables\n  that may be used in the loop. \u003c/li\u003e\n  \u003cli\u003e The loop condition is evaluated at the beginning of each iteration, and if it is \u003ccode\u003etrue\u003c/code\u003e, the code inside the loop is executed. \u003c/li\u003e\n  \u003cli\u003e The update statement is executed at the end of each iteration, and is used to update the loop counter or any other variables that may be used\n  in the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfor (initialization; condition; update) { /*...*/ }\n\u003c/pre\u003e\n\u003cp\u003eAll three statements are optional. However, when the initialization and update statements are not used, it can be unclear to the reader what the\nloop counter is and how it is being updated. This can make the code harder to understand and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (;condition;) { /*...*/ } // Noncompliant: Only the condition is specified\n\u003c/pre\u003e\n\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, a \u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\nA \u003ccode\u003ewhile\u003c/code\u003e loop consists of a single loop condition and allows a block of code to be executed repeatedly as long as the specified condition\nis true.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop is a type of loop construct that allows a block of code to be executed repeatedly for a fixed number of times. The\n\u003ccode\u003efor\u003c/code\u003e loop is typically used when the number of iterations is known in advance, and consists of three parts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The initialization statement is executed once at the beginning of the loop, and is used to initialize the loop counter or any other variables\n  that may be used in the loop. \u003c/li\u003e\n  \u003cli\u003e The loop condition is evaluated at the beginning of each iteration, and if it is \u003ccode\u003etrue\u003c/code\u003e, the code inside the loop is executed. \u003c/li\u003e\n  \u003cli\u003e The update statement is executed at the end of each iteration, and is used to update the loop counter or any other variables that may be used\n  in the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nfor (initialization; condition; update) { /*...*/ }\n\u003c/pre\u003e\n\u003cp\u003eAll three statements are optional. However, when the initialization and update statements are not used, it can be unclear to the reader what the\nloop counter is and how it is being updated. This can make the code harder to understand and maintain.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfor (;condition;) { /*...*/ } // Noncompliant: Only the condition is specified\n\u003c/pre\u003e\n\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, a \u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\nA \u003ccode\u003ewhile\u003c/code\u003e loop consists of a single loop condition and allows a block of code to be executed repeatedly as long as the specified condition\nis true.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1143",
    "name": "Jump statements should not occur in \"finally\" blocks",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003efinally\u003c/code\u003e block is a part of a \u003ccode\u003etryâ€¦â€‹catchâ€¦â€‹finally\u003c/code\u003e statement, which allows you to handle errors and perform cleanup\noperations regardless of whether an exception is thrown or not. The \u003ccode\u003efinally\u003c/code\u003e block is executed regardless of whether an exception occurs\nor not, and it is placed after the \u003ccode\u003etry\u003c/code\u003e and \u003ccode\u003ecatch\u003c/code\u003e blocks.\u003c/p\u003e\n\u003cp\u003eHaving a jump statement, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, or \u003ccode\u003ethrow\u003c/code\u003e, inside a\n\u003ccode\u003efinally\u003c/code\u003e block can lead to unexpected and undesirable behavior, making your code difficult to understand and maintain. While itâ€™s not\ninherently forbidden to use jump statements in \u003ccode\u003efinally\u003c/code\u003e blocks, it is generally discouraged for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The primary purpose of the \u003ccode\u003efinally\u003c/code\u003e block is to ensure cleanup operations and code that must run regardless of the outcome, such as\n  releasing resources or closing connections. If you use a \u003ccode\u003ereturn\u003c/code\u003e statement inside the finally block, it will override any previous\n  \u003ccode\u003ereturn\u003c/code\u003e statements in the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks. This can lead to unexpected values being returned from a\n  function. \u003c/li\u003e\n  \u003cli\u003e Jump statements like \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, or even another \u003ccode\u003ethrow\u003c/code\u003e inside the \u003ccode\u003efinally\u003c/code\u003e block can\n  alter the normal control flow of the program. This can make it difficult to reason about the behavior of the code and may introduce subtle bugs that\n  are hard to detect. \u003c/li\u003e\n  \u003cli\u003e If a \u003ccode\u003ereturn\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e statement inside the \u003ccode\u003efinally\u003c/code\u003e block causes a new exception or alters the return\n  value, it can hide or suppress the original exception or return value from the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks. This can make it\n  challenging to identify the actual cause of an error. \u003c/li\u003e\n  \u003cli\u003e Code that uses jump statements in \u003ccode\u003efinally\u003c/code\u003e blocks can be hard to read and understand, especially for other developers who might not\n  be familiar with the unusual control flow. Such code can lead to maintenance issues and make it harder to debug and maintain the application in the\n  long run. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule reports on all usages of jump statements from a \u003ccode\u003efinally\u003c/code\u003e block. Even if itâ€™s guaranteed that no unhandled exception can\nhappen in \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks, itâ€™s not recommended to use any jump statements inside the \u003ccode\u003efinally\u003c/code\u003e block to have\nthe logic there limited to the \"cleanup\".\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nasync function foo() {\n    let result, connection;\n    try {\n        connection \u003d await connect();\n        result \u003d connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n        return result; // Noncompliant: Jump statement \u0027return\u0027 in the \u0027finally\u0027 block\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhile there might be rare cases where using jump statements in a \u003ccode\u003efinally\u003c/code\u003e block is necessary, itâ€™s generally recommended to avoid it\nwhenever possible. Instead, use the \u003ccode\u003efinally\u003c/code\u003e block only for cleanup operations and critical tasks that should always be executed,\nregardless of exceptions or return values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nasync function foo() {\n    let result, connection;\n    try {\n        connection \u003d await connect();\n        result \u003d connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n    }\n    return result;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"\u003eThe\n  \u003ccode\u003efinally\u003c/code\u003e block\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003efinally\u003c/code\u003e block is a part of a \u003ccode\u003etryâ€¦â€‹catchâ€¦â€‹finally\u003c/code\u003e statement, which allows you to handle errors and perform cleanup\noperations regardless of whether an exception is thrown or not. The \u003ccode\u003efinally\u003c/code\u003e block is executed regardless of whether an exception occurs\nor not, and it is placed after the \u003ccode\u003etry\u003c/code\u003e and \u003ccode\u003ecatch\u003c/code\u003e blocks.\u003c/p\u003e\n\u003cp\u003eHaving a jump statement, such as \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, or \u003ccode\u003ethrow\u003c/code\u003e, inside a\n\u003ccode\u003efinally\u003c/code\u003e block can lead to unexpected and undesirable behavior, making your code difficult to understand and maintain. While itâ€™s not\ninherently forbidden to use jump statements in \u003ccode\u003efinally\u003c/code\u003e blocks, it is generally discouraged for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The primary purpose of the \u003ccode\u003efinally\u003c/code\u003e block is to ensure cleanup operations and code that must run regardless of the outcome, such as\n  releasing resources or closing connections. If you use a \u003ccode\u003ereturn\u003c/code\u003e statement inside the finally block, it will override any previous\n  \u003ccode\u003ereturn\u003c/code\u003e statements in the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks. This can lead to unexpected values being returned from a\n  function. \u003c/li\u003e\n  \u003cli\u003e Jump statements like \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, or even another \u003ccode\u003ethrow\u003c/code\u003e inside the \u003ccode\u003efinally\u003c/code\u003e block can\n  alter the normal control flow of the program. This can make it difficult to reason about the behavior of the code and may introduce subtle bugs that\n  are hard to detect. \u003c/li\u003e\n  \u003cli\u003e If a \u003ccode\u003ereturn\u003c/code\u003e or \u003ccode\u003ethrow\u003c/code\u003e statement inside the \u003ccode\u003efinally\u003c/code\u003e block causes a new exception or alters the return\n  value, it can hide or suppress the original exception or return value from the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks. This can make it\n  challenging to identify the actual cause of an error. \u003c/li\u003e\n  \u003cli\u003e Code that uses jump statements in \u003ccode\u003efinally\u003c/code\u003e blocks can be hard to read and understand, especially for other developers who might not\n  be familiar with the unusual control flow. Such code can lead to maintenance issues and make it harder to debug and maintain the application in the\n  long run. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule reports on all usages of jump statements from a \u003ccode\u003efinally\u003c/code\u003e block. Even if itâ€™s guaranteed that no unhandled exception can\nhappen in \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e blocks, itâ€™s not recommended to use any jump statements inside the \u003ccode\u003efinally\u003c/code\u003e block to have\nthe logic there limited to the \"cleanup\".\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nasync function foo() {\n    let result, connection;\n    try {\n        connection \u003d await connect();\n        result \u003d connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n        return result; // Noncompliant: Jump statement \u0027return\u0027 in the \u0027finally\u0027 block\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eWhile there might be rare cases where using jump statements in a \u003ccode\u003efinally\u003c/code\u003e block is necessary, itâ€™s generally recommended to avoid it\nwhenever possible. Instead, use the \u003ccode\u003efinally\u003c/code\u003e block only for cleanup operations and critical tasks that should always be executed,\nregardless of exceptions or return values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nasync function foo() {\n    let result, connection;\n    try {\n        connection \u003d await connect();\n        result \u003d connection.send(1);\n    } catch(err) {\n        console.error(err.message);\n    } finally {\n        if (connection) {\n            connection.close();\n        }\n    }\n    return result;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block\"\u003eThe\n  \u003ccode\u003efinally\u003c/code\u003e block\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"\u003e\u003ccode\u003etry...catch\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"\u003e\u003ccode\u003ethrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"\u003e\u003ccode\u003econtinue\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5860",
    "name": "Names of regular expressions named groups should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using regular expressions, a capturing group provides extra information about the matched pattern. Named groups will store the matched\ncontents on the \u003ccode\u003egroups\u003c/code\u003e property of the returned matches.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})\\/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst { groups: {month, year} } \u003d regex.exec(\"01/02\"); // month is \u002701\u0027, year is \u002702\u0027\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises issues in several cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are defined but never called by their name. To make the code more readable, remove unused named capturing groups. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst score \u003d \"14:1\";\nconst scorePattern \u003d /(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)/; // Noncompliant - named groups are never used\n\nif (scorePattern.exec(score)) {\n  checkScore(score);\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are defined but called by their index. To make the code more readable:\n    \u003cul\u003e\n      \u003cli\u003e access the matched contents using the named group; or \u003c/li\u003e\n      \u003cli\u003e remove it from the pattern. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst datePattern \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst dateMatcher \u003d datePattern.exec(\"01/02\");\n\nif (dateMatcher) {\n  checkValidity(dateMatcher[1], dateMatcher[2]);  // Noncompliant - group indexes are used instead of names\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are referenced while not defined. This can have undesired effects, as it will return \u003ccode\u003eundefined\u003c/code\u003e if there are other\n  named groups. If there are none, \u003ccode\u003egroups\u003c/code\u003e will be \u003ccode\u003eundefined\u003c/code\u003e, and trying to access the named group will throw a\n  \u003ccode\u003eTypeError\u003c/code\u003e if its existence has not been checked. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst datePattern \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst dateMatcher \u003d datePattern.exec(\"01/02\");\n\nif (dateMatcher) {\n  checkValidity(dateMatcher.groups.day); // Noncompliant - there is no group called \"day\", returns `undefined`\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003eGroups and\n  backreferences\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using regular expressions, a capturing group provides extra information about the matched pattern. Named groups will store the matched\ncontents on the \u003ccode\u003egroups\u003c/code\u003e property of the returned matches.\u003c/p\u003e\n\u003cpre\u003e\nconst regex \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})\\/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst { groups: {month, year} } \u003d regex.exec(\"01/02\"); // month is \u002701\u0027, year is \u002702\u0027\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises issues in several cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are defined but never called by their name. To make the code more readable, remove unused named capturing groups. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst score \u003d \"14:1\";\nconst scorePattern \u003d /(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)/; // Noncompliant - named groups are never used\n\nif (scorePattern.exec(score)) {\n  checkScore(score);\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are defined but called by their index. To make the code more readable:\n    \u003cul\u003e\n      \u003cli\u003e access the matched contents using the named group; or \u003c/li\u003e\n      \u003cli\u003e remove it from the pattern. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst datePattern \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst dateMatcher \u003d datePattern.exec(\"01/02\");\n\nif (dateMatcher) {\n  checkValidity(dateMatcher[1], dateMatcher[2]);  // Noncompliant - group indexes are used instead of names\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Named groups are referenced while not defined. This can have undesired effects, as it will return \u003ccode\u003eundefined\u003c/code\u003e if there are other\n  named groups. If there are none, \u003ccode\u003egroups\u003c/code\u003e will be \u003ccode\u003eundefined\u003c/code\u003e, and trying to access the named group will throw a\n  \u003ccode\u003eTypeError\u003c/code\u003e if its existence has not been checked. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nconst datePattern \u003d /(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})/;\nconst dateMatcher \u003d datePattern.exec(\"01/02\");\n\nif (dateMatcher) {\n  checkValidity(dateMatcher.groups.day); // Noncompliant - there is no group called \"day\", returns `undefined`\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences\"\u003eGroups and\n  backreferences\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2598",
    "name": "File uploads should be restricted",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf the file upload feature is implemented without proper folder restriction, it will result in an implicit trust violation within the server, as\ntrusted files will be implicitly stored alongside third-party files that should be considered untrusted.\u003c/p\u003e\n\u003cp\u003eThis can allow an attacker to disrupt the security of an internal server process or the running application.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter discovering this vulnerability, attackers may attempt to upload as many different file types as possible, such as javascript files, bash\nscripts, malware, or malicious configuration files targeting potential processes.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eFull application compromise\u003c/h4\u003e\n\u003cp\u003eIn the worst-case scenario, the attackers succeed in uploading a file recognized by in an internal tool, triggering code execution.\u003c/p\u003e\n\u003cp\u003eDepending on the attacker, code execution can be used with different intentions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Download the internal serverâ€™s data, most likely to sell it. \u003c/li\u003e\n  \u003cli\u003e Modify data, install malware, for instance, malware that mines cryptocurrencies. \u003c/li\u003e\n  \u003cli\u003e Stop services or exhaust resources, for instance, with fork bombs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eServer Resource Exhaustion\u003c/h4\u003e\n\u003cp\u003eBy repeatedly uploading large files, an attacker can consume excessive server resources, resulting in a denial of service.\u003c/p\u003e\n\u003cp\u003eIf the component affected by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service can only affect the attacker who caused it.\u003c/p\u003e\n\u003cp\u003eEven though a denial of service might have little direct impact, it can have secondary impact in architectures that use containers and container\norchestrators. For example, it can cause unexpected container failures or overuse of resources.\u003c/p\u003e\n\u003cp\u003eIn some cases, it is also possible to force the product to \"fail open\" when resources are exhausted, which means that some security features are\ndisabled in an emergency.\u003c/p\u003e\n\u003cp\u003eThese threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Formidable\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Formidable \u003d require(\u0027formidable\u0027);\n\nconst form          \u003d new Formidable(); // Noncompliant\nform.uploadDir      \u003d \"/tmp/\";\nform.keepExtensions \u003d true;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst Formidable \u003d require(\u0027formidable\u0027);\n\nconst form          \u003d new Formidable();\nform.uploadDir      \u003d \"/uploads/\";\nform.keepExtensions \u003d false;\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse pre-approved folders\u003c/h4\u003e\n\u003cp\u003eCreate a special folder where untrusted data should be stored. This folder should be classified as untrusted and have the following\ncharacteristics:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It should have specific read and write permissions that belong to the right people or organizations. \u003c/li\u003e\n  \u003cli\u003e It should have a size limit or its size should be monitored. \u003c/li\u003e\n  \u003cli\u003e It should contain backup copies if it contains data that belongs to users. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis folder should not be located in \u003ccode\u003e/tmp\u003c/code\u003e, \u003ccode\u003e/var/tmp\u003c/code\u003e or in the Windows directory \u003ccode\u003e%TEMP%\u003c/code\u003e.\u003cbr\u003e These folders\nare usually \"world-writable\", can be manipulated, and can be accidentally deleted by the system.\u003c/p\u003e\n\u003cp\u003eAlso, the original file names and extensions should be changed to controlled strings to prevent unwanted code from being executed based on the file\nnames.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/434\"\u003eMITRE, CWE-434\u003c/a\u003e - Unrestricted Upload of File with Dangerous Type \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eMITRE, CWE-400\u003c/a\u003e - Uncontrolled Resource Consumption \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload\"\u003eOWASP Unrestricted File Upload\u003c/a\u003e - Unrestricted File\n  Upload \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf the file upload feature is implemented without proper folder restriction, it will result in an implicit trust violation within the server, as\ntrusted files will be implicitly stored alongside third-party files that should be considered untrusted.\u003c/p\u003e\n\u003cp\u003eThis can allow an attacker to disrupt the security of an internal server process or the running application.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter discovering this vulnerability, attackers may attempt to upload as many different file types as possible, such as javascript files, bash\nscripts, malware, or malicious configuration files targeting potential processes.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eFull application compromise\u003c/h4\u003e\n\u003cp\u003eIn the worst-case scenario, the attackers succeed in uploading a file recognized by in an internal tool, triggering code execution.\u003c/p\u003e\n\u003cp\u003eDepending on the attacker, code execution can be used with different intentions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Download the internal serverâ€™s data, most likely to sell it. \u003c/li\u003e\n  \u003cli\u003e Modify data, install malware, for instance, malware that mines cryptocurrencies. \u003c/li\u003e\n  \u003cli\u003e Stop services or exhaust resources, for instance, with fork bombs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eServer Resource Exhaustion\u003c/h4\u003e\n\u003cp\u003eBy repeatedly uploading large files, an attacker can consume excessive server resources, resulting in a denial of service.\u003c/p\u003e\n\u003cp\u003eIf the component affected by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service can only affect the attacker who caused it.\u003c/p\u003e\n\u003cp\u003eEven though a denial of service might have little direct impact, it can have secondary impact in architectures that use containers and container\norchestrators. For example, it can cause unexpected container failures or overuse of resources.\u003c/p\u003e\n\u003cp\u003eIn some cases, it is also possible to force the product to \"fail open\" when resources are exhausted, which means that some security features are\ndisabled in an emergency.\u003c/p\u003e\n\u003cp\u003eThese threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst Formidable \u003d require(\u0027formidable\u0027);\n\nconst form          \u003d new Formidable(); // Noncompliant\nform.uploadDir      \u003d \"/tmp/\";\nform.keepExtensions \u003d true;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst Formidable \u003d require(\u0027formidable\u0027);\n\nconst form          \u003d new Formidable();\nform.uploadDir      \u003d \"/uploads/\";\nform.keepExtensions \u003d false;\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse pre-approved folders\u003c/h4\u003e\n\u003cp\u003eCreate a special folder where untrusted data should be stored. This folder should be classified as untrusted and have the following\ncharacteristics:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It should have specific read and write permissions that belong to the right people or organizations. \u003c/li\u003e\n  \u003cli\u003e It should have a size limit or its size should be monitored. \u003c/li\u003e\n  \u003cli\u003e It should contain backup copies if it contains data that belongs to users. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis folder should not be located in \u003ccode\u003e/tmp\u003c/code\u003e, \u003ccode\u003e/var/tmp\u003c/code\u003e or in the Windows directory \u003ccode\u003e%TEMP%\u003c/code\u003e.\u003cbr\u003e These folders\nare usually \"world-writable\", can be manipulated, and can be accidentally deleted by the system.\u003c/p\u003e\n\u003cp\u003eAlso, the original file names and extensions should be changed to controlled strings to prevent unwanted code from being executed based on the file\nnames.\u003c/p\u003e",
        "context": {
          "key": "formidable",
          "displayName": "Formidable"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe following code sample is vulnerable because it implicitly uses \u003ccode\u003e/tmp\u003c/code\u003e or \u003ccode\u003e/var/tmp\u003c/code\u003e as upload directory.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nconst crypto \u003d require(\u0027node:crypto\u0027);\nconst multer \u003d require(\u0027multer\u0027);\n\nlet diskStorage \u003d multer.diskStorage({\n  filename: (req, file, cb) \u003d\u0026gt; {\n    const buf \u003d crypto.randomBytes(20);\n    cb(null, buf.toString(\u0027hex\u0027))\n  }\n}); // Noncompliant\n\nlet diskUpload \u003d multer({\n  storage: diskStorage,\n});\n\u003c/pre\u003e\n\u003ch4\u003eCompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nconst multer \u003d require(\u0027multer\u0027);\n\nlet diskStorage \u003d multer.diskStorage({\n  filename: (req, file, cb) \u003d\u0026gt; {\n    const buf \u003d crypto.randomBytes(20);\n    cb(null, buf.toString(\u0027hex\u0027))\n  },\n  destination: (req, file, cb) \u003d\u0026gt; {\n    cb(null, \u0027/uploads/\u0027)\n  }\n});\n\nlet diskUpload \u003d multer({\n  storage: diskStorage,\n});\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse pre-approved folders\u003c/h4\u003e\n\u003cp\u003eCreate a special folder where untrusted data should be stored. This folder should be classified as untrusted and have the following\ncharacteristics:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It should have specific read and write permissions that belong to the right people or organizations. \u003c/li\u003e\n  \u003cli\u003e It should have a size limit or its size should be monitored. \u003c/li\u003e\n  \u003cli\u003e It should contain backup copies if it contains data that belongs to users. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis folder should not be located in \u003ccode\u003e/tmp\u003c/code\u003e, \u003ccode\u003e/var/tmp\u003c/code\u003e or in the Windows directory \u003ccode\u003e%TEMP%\u003c/code\u003e.\u003cbr\u003e These folders\nare usually \"world-writable\", can be manipulated, and can be accidentally deleted by the system.\u003c/p\u003e\n\u003cp\u003eAlso, the original file names and extensions should be changed to controlled strings to prevent unwanted code from being executed based on the file\nnames.\u003c/p\u003e",
        "context": {
          "key": "multer",
          "displayName": "Multer"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/434\"\u003eMITRE, CWE-434\u003c/a\u003e - Unrestricted Upload of File with Dangerous Type \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eMITRE, CWE-400\u003c/a\u003e - Uncontrolled Resource Consumption \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload\"\u003eOWASP Unrestricted File Upload\u003c/a\u003e - Unrestricted File\n  Upload \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [
      "defense_in_depth",
      "never_trust_user_input"
    ]
  },
  {
    "key": "javascript:S3686",
    "name": "Functions should be called consistently with or without \"new\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript has the \u003ccode\u003enew\u003c/code\u003e keyword that is used in conjunction with constructor functions to create new instances of objects. When you use\nthe \u003ccode\u003enew\u003c/code\u003e keyword with a function, it signifies that the function is intended to be used as a constructor function to create objects.\u003c/p\u003e\n\u003cp\u003eAny function can be used as a constructor function by convention. Constructor functions are used to create new objects with the same structure or\nproperties. They are typically named with an initial capital letter to distinguish them from regular functions.\u003c/p\u003e\n\u003cpre\u003e\nfunction Person(name, age) {\n  this.name \u003d name;\n  this.age \u003d age;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo create a new instance of an object using the constructor function, you use the \u003ccode\u003enew\u003c/code\u003e keyword before the function call.\u003c/p\u003e\n\u003cpre\u003e\nconst person1 \u003d new Person(\u0027Alice\u0027, 30);\nconst person2 \u003d new Person(\u0027Bob\u0027, 25);\n\u003c/pre\u003e\n\u003cp\u003eConstructor functions, which create new object instances, must only be called with \u003ccode\u003enew\u003c/code\u003e. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.\u003c/p\u003e\n\u003cpre\u003e\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric \u003d numeric;\n  this.alphabetic \u003d alphabetic;\n}\n\nconst num1 \u003d getNum();\nconst num2 \u003d new getNum(); // Noncompliant: An empty object is returned, not 5\n\nconst obj1 \u003d new Num();\nconst obj2 \u003d Num(); // Noncompliant: undefined is returned, not an object\n\u003c/pre\u003e\n\u003cp\u003eThe rule checks that the \u003ccode\u003enew\u003c/code\u003e operator is consistently used with each functionâ€™s invocations, meaning for all invocations or none.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript has the \u003ccode\u003enew\u003c/code\u003e keyword that is used in conjunction with constructor functions to create new instances of objects. When you use\nthe \u003ccode\u003enew\u003c/code\u003e keyword with a function, it signifies that the function is intended to be used as a constructor function to create objects.\u003c/p\u003e\n\u003cp\u003eAny function can be used as a constructor function by convention. Constructor functions are used to create new objects with the same structure or\nproperties. They are typically named with an initial capital letter to distinguish them from regular functions.\u003c/p\u003e\n\u003cpre\u003e\nfunction Person(name, age) {\n  this.name \u003d name;\n  this.age \u003d age;\n}\n\u003c/pre\u003e\n\u003cp\u003eTo create a new instance of an object using the constructor function, you use the \u003ccode\u003enew\u003c/code\u003e keyword before the function call.\u003c/p\u003e\n\u003cpre\u003e\nconst person1 \u003d new Person(\u0027Alice\u0027, 30);\nconst person2 \u003d new Person(\u0027Bob\u0027, 25);\n\u003c/pre\u003e\n\u003cp\u003eConstructor functions, which create new object instances, must only be called with \u003ccode\u003enew\u003c/code\u003e. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.\u003c/p\u003e\n\u003cpre\u003e\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric \u003d numeric;\n  this.alphabetic \u003d alphabetic;\n}\n\nconst num1 \u003d getNum();\nconst num2 \u003d new getNum(); // Noncompliant: An empty object is returned, not 5\n\nconst obj1 \u003d new Num();\nconst obj2 \u003d Num(); // Noncompliant: undefined is returned, not an object\n\u003c/pre\u003e\n\u003cp\u003eThe rule checks that the \u003ccode\u003enew\u003c/code\u003e operator is consistently used with each functionâ€™s invocations, meaning for all invocations or none.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\"\u003e\u003ccode\u003enew\u003c/code\u003e operator\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S2234",
    "name": "Parameters should be passed in the correct order",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConsistent naming between arguments and parameters reduces the chances of making mistakes, such as passing the wrong value to a parameter or\nomitting an argument in a function call. When the names of arguments in a function call match the names of the function parameters, it contributes to\nclearer, more readable code.\u003c/p\u003e\n\u003cp\u003eHowever, when the names match but are passed in a different order than their declaration in the function signature, it may indicate a mistake in\nthe parameter order, likely leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 15;\n  const divisor \u003d 5;\n\n  const result \u003d divide(divisor, dividend); // Noncompliant: not the expected result\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the arguments passed to the function are in the correct order, according to the function signature.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 15;\n  const divisor \u003d 5;\n\n  const result \u003d divide(dividend, divisor);\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSwapped arguments that are compared beforehand in an enclosing \u003ccode\u003eif\u003c/code\u003e statement are ignored:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 5;\n  const divisor \u003d 15;\n  if (divisor \u0026gt; dividend) {\n    const result \u003d divide(divisor, dividend);\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConsistent naming between arguments and parameters reduces the chances of making mistakes, such as passing the wrong value to a parameter or\nomitting an argument in a function call. When the names of arguments in a function call match the names of the function parameters, it contributes to\nclearer, more readable code.\u003c/p\u003e\n\u003cp\u003eHowever, when the names match but are passed in a different order than their declaration in the function signature, it may indicate a mistake in\nthe parameter order, likely leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 15;\n  const divisor \u003d 5;\n\n  const result \u003d divide(divisor, dividend); // Noncompliant: not the expected result\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eEnsure that the arguments passed to the function are in the correct order, according to the function signature.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 15;\n  const divisor \u003d 5;\n\n  const result \u003d divide(dividend, divisor);\n  //...\n}\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSwapped arguments that are compared beforehand in an enclosing \u003ccode\u003eif\u003c/code\u003e statement are ignored:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nfunction divide(dividend, divisor) {\n  return dividend / divisor;\n}\n\nfunction doTheThing() {\n  const dividend \u003d 5;\n  const divisor \u003d 15;\n  if (divisor \u0026gt; dividend) {\n    const result \u003d divide(divisor, dividend);\n    //...\n  }\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions\"\u003eFunctions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5867",
    "name": "Regular expressions using Unicode character classes or property escapes should enable the unicode flag",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJavaScript regular expressions provide Unicode character classses and Unicode property escapes for matching characters based on their Unicode\nvalues and Unicode properties respectively. When using Unicode property escapes like \u003ccode\u003e\\p{Alpha}\u003c/code\u003e without the \u003ccode\u003eu\u003c/code\u003e flag, the\nregular expression will not match alphabetic characters but rather the \u003ccode\u003e+\u0027\\p{Alpha}+\u0027\u003c/code\u003e string literal, which is likely a mistake.\u003c/p\u003e\n\u003cp\u003eThis rules raises an issue when Unicode character classses and Unicode property escapes are used without the \u003ccode\u003eu\u003c/code\u003e flag.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/\\u{1234}/\n/\\p{Alpha}/\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/\\u{1234}/u\n/\\p{Alpha}/u\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJavaScript regular expressions provide Unicode character classses and Unicode property escapes for matching characters based on their Unicode\nvalues and Unicode properties respectively. When using Unicode property escapes like \u003ccode\u003e\\p{Alpha}\u003c/code\u003e without the \u003ccode\u003eu\u003c/code\u003e flag, the\nregular expression will not match alphabetic characters but rather the \u003ccode\u003e+\u0027\\p{Alpha}+\u0027\u003c/code\u003e string literal, which is likely a mistake.\u003c/p\u003e\n\u003cp\u003eThis rules raises an issue when Unicode character classses and Unicode property escapes are used without the \u003ccode\u003eu\u003c/code\u003e flag.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n/\\u{1234}/\n/\\p{Alpha}/\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/\\u{1234}/u\n/\\p{Alpha}/u\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5743",
    "name": "Allowing browsers to perform DNS prefetching is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eBy default, web browsers perform \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch/\"\u003eDNS prefetching\u003c/a\u003e to reduce\nlatency due to DNS resolutions required when an user clicks links from a website page.\u003c/p\u003e\n\u003cp\u003eFor instance on example.com the hyperlink below contains a cross-origin domain name that must be resolved to an IP address by the web browser:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;a href\u003d\"https://otherexample.com\"\u0026gt;go on our partner website\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eIt can add significant latency during requests, especially if the page contains many links to cross-origin domains. DNS prefetch allows web\nbrowsers to perform DNS resolving in the background before the user clicks a link. This feature can cause privacy issues because DNS resolving from\nthe userâ€™s computer is performed without his consent if he doesnâ€™t intent to go to the linked website.\u003c/p\u003e\n\u003cp\u003eOn a complex private webpage, a combination \"of unique links/DNS resolutions\" can indicate, to a eavesdropper for instance, that the user is\nvisiting the private page.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Links to cross-origin domains could result in leakage of confidential information about the userâ€™s navigation/behavior of the website. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/dns-prefetch-control\"\u003edns-prefetch-control\u003c/a\u003e\nmiddleware is disabled or used without the recommended value:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: true // Sensitive: allowing DNS prefetching is security-sensitive\n  })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control\"\u003eX-DNS-Prefetch-Control\u003c/a\u003e header with an\n\u003cem\u003eoff\u003c/em\u003e value but this could significantly degrade website performances.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the \u003ca href\u003d\"https://www.npmjs.com/package/dns-prefetch-control\"\u003edns-prefetch-control\u003c/a\u003e or \u003ca\nhref\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e middleware is the standard way to implement \u003ccode\u003eX-DNS-Prefetch-Control\u003c/code\u003e header:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.dnsPrefetchControl({\n    allow: false // Compliant\n  })\n);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure.html\"\u003eOWASP Top 10 2017 Category\n  A3\u003c/a\u003e - Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control\"\u003edeveloper.mozilla.org\u003c/a\u003e - X-DNS-Prefetch-Control\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch\"\u003edeveloper.mozilla.org\u003c/a\u003e - Using dns-prefetch \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S3317",
    "name": "Default export names and file names should match",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBy convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCase, dots ( \u003ccode\u003e.\u003c/code\u003e ), underscores ( \u003ccode\u003e_\u003c/code\u003e ) and dashes (\u003ccode\u003e-\u003c/code\u003e) are ignored from the name comparison. Postfixes in\nfilenames like \u003ccode\u003e.dev\u003c/code\u003e in \u003ccode\u003emy.class.dev.js\u003c/code\u003e are also ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBy convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eCase, dots ( \u003ccode\u003e.\u003c/code\u003e ), underscores ( \u003ccode\u003e_\u003c/code\u003e ) and dashes (\u003ccode\u003e-\u003c/code\u003e) are ignored from the name comparison. Postfixes in\nfilenames like \u003ccode\u003e.dev\u003c/code\u003e in \u003ccode\u003emy.class.dev.js\u003c/code\u003e are also ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [
      "confusing",
      "convention",
      "es2015"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6827",
    "name": "Anchors should contain accessible content",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAnchors, represented by the \u003ccode\u003ea\u003c/code\u003e tag in HTML, usually contain a hyperlink that users can click to navigate to different sections of a\nwebsite or different websites altogether.\u003c/p\u003e\n\u003cp\u003eHowever, when anchors do not have content or when the content is hidden from screen readers using the \u003ccode\u003earia-hidden\u003c/code\u003e property, it creates\na significant accessibility issue. If an anchorâ€™s content is hidden or non-existent, visually impaired users may not be able to understand the purpose\nof the anchor or navigate the website effectively.\u003c/p\u003e\n\u003cp\u003eThis rule checks that anchors do not use the \u003ccode\u003earia-hidden\u003c/code\u003e property and have content provided either between the tags or as\n\u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003etitle\u003c/code\u003e property.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eEnsure that anchors either have content or an \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003etitle\u003c/code\u003e attribute, and they should not use the\n\u003ccode\u003earia-hidden\u003c/code\u003e property.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;a aria-hidden\u0026gt;link to my site\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;a\u0026gt;link to my site\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e: The Anchor element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003e\u003ccode\u003earia-hidden\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context\"\u003eLink purpose\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAnchors, represented by the \u003ccode\u003ea\u003c/code\u003e tag in HTML, usually contain a hyperlink that users can click to navigate to different sections of a\nwebsite or different websites altogether.\u003c/p\u003e\n\u003cp\u003eHowever, when anchors do not have content or when the content is hidden from screen readers using the \u003ccode\u003earia-hidden\u003c/code\u003e property, it creates\na significant accessibility issue. If an anchorâ€™s content is hidden or non-existent, visually impaired users may not be able to understand the purpose\nof the anchor or navigate the website effectively.\u003c/p\u003e\n\u003cp\u003eThis rule checks that anchors do not use the \u003ccode\u003earia-hidden\u003c/code\u003e property and have content provided either between the tags or as\n\u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003etitle\u003c/code\u003e property.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEnsure that anchors either have content or an \u003ccode\u003earia-label\u003c/code\u003e or \u003ccode\u003etitle\u003c/code\u003e attribute, and they should not use the\n\u003ccode\u003earia-hidden\u003c/code\u003e property.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;a aria-hidden\u0026gt;link to my site\u0026lt;/a\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;a\u0026gt;link to my site\u0026lt;/a\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\u003e\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e: The Anchor element\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003e\u003ccode\u003earia-hidden\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context\"\u003eLink purpose\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5739",
    "name": "Disabling Strict-Transport-Security policy is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen implementing the HTTPS protocol, the website mostly continue to support the HTTP protocol to redirect users to HTTPS when they request a HTTP\nversion of the website. These redirects are not encrypted and are therefore vulnerable to man in the middle attacks. The \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\u003eStrict-Transport-Security policy header\u003c/a\u003e (HSTS) set by\nan application instructs the web browser to convert any HTTP request to HTTPS.\u003c/p\u003e\n\u003cp\u003eWeb browsers that see the Strict-Transport-Security policy header for the first time record information specified in the header:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the \u003ccode\u003emax-age\u003c/code\u003e directive which specify how long the policy should be kept on the web browser. \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003eincludeSubDomains\u003c/code\u003e optional directive which specify if the policy should apply on all sub-domains or not. \u003c/li\u003e\n  \u003cli\u003e the \u003ccode\u003epreload\u003c/code\u003e optional directive which is not part of the HSTS specification but supported on all modern web browsers. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith the \u003ccode\u003epreload\u003c/code\u003e directive the web browser never connects in HTTP to the website and to use this directive, it is required \u003ca\nhref\u003d\"https://hstspreload.org/\"\u003eto submit\u003c/a\u003e the concerned application to a preload service maintained by Google.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The website is accessible with the unencrypted HTTP protocol. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e or \u003ca\nhref\u003d\"https://www.npmjs.com/package/hsts\"\u003ehsts\u003c/a\u003e middleware are disabled or used without recommended values:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(helmet.hsts({\n  maxAge: 3153600, // Sensitive, recommended \u0026gt;\u003d 15552000\n  includeSubDomains: false // Sensitive, recommended \u0027true\u0027\n}));\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement Strict-Transport-Security policy header, it is recommended to apply this policy to all subdomains (\u003ccode\u003eincludeSubDomains\u003c/code\u003e) and\nfor at least 6 months (\u003ccode\u003emax-age\u003d15552000\u003c/code\u003e) or even better for 1 year (\u003ccode\u003emax-age\u003d31536000\u003c/code\u003e).\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application a standard way to implement HSTS is with the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e or \u003ca\nhref\u003d\"https://www.npmjs.com/package/hsts\"\u003ehsts\u003c/a\u003e middleware:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(helmet.hsts({\n  maxAge: 31536000,\n  includeSubDomains: true\n})); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e -\n  Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\u003edeveloper.mozilla.org\u003c/a\u003e - Strict Transport\n  Security \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5736",
    "name": "Disabling strict HTTP no-referrer policy is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/HTTP_referer\"\u003eHTTP header referer\u003c/a\u003e contains a URL set by web browsers and used by applications to track\nfrom where the user came from, itâ€™s for instance a relevant value for web analytic services, but it can cause \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns\"\u003eserious privacy and security problems\u003c/a\u003e\nif the URL contains confidential information. Note that Firefox for instance, to prevent data leaks, \u003ca\nhref\u003d\"https://blog.mozilla.org/security/2018/01/31/preventing-data-leaks-by-stripping-path-information-in-http-referrers/\"\u003eremoves path\ninformation\u003c/a\u003e in the Referer header while browsing privately.\u003c/p\u003e\n\u003cp\u003eSuppose an e-commerce website asks the user his credit card number to purchase a product:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;html\u0026gt;\n\u0026lt;body\u0026gt;\n\u0026lt;form action\u003d\"/valid_order\" method\u003d\"GET\"\u0026gt;\nType your credit card number to purchase products:\n\u0026lt;input type\u003dtext id\u003d\"cc\" value\u003d\"1111-2222-3333-4444\"\u0026gt;\n\u0026lt;input type\u003dsubmit\u0026gt;\n\u0026lt;/form\u0026gt;\n\u0026lt;/body\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen submitting the above HTML form, a HTTP GET request will be performed, the URL requested will be\nhttps://example.com/valid_order?cc\u003d1111-2222-3333-4444 with credit card number inside and itâ€™s obviously not secure for these reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e URLs are stored in the history of browsers. \u003c/li\u003e\n  \u003cli\u003e URLs could be accidentally shared when doing copy/paste actions. \u003c/li\u003e\n  \u003cli\u003e URLs can be stolen if a malicious person looks at the computer screen of an user. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn addition to these threats, when further requests will be performed from the \"valid_order\" page with a simple legitimate embedded script like\nthat:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;script src\u003d\"https://webanalyticservices_example.com/track\"\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eThe referer header which contains confidential information will be send to a third party web analytic service and cause privacy issue:\u003c/p\u003e\n\u003cpre\u003e\nGET /track HTTP/2.0\nHost: webanalyticservices_example.com\nReferer: https://example.com/valid_order?cc\u003d1111-2222-3333-4444\n\u003c/pre\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidential information exists in URLs. \u003c/li\u003e\n  \u003cli\u003e Semantic of HTTP methods is not respected (eg: use of a GET method instead of POST when the state of the application is changed). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e \u003ccode\u003ereferrerPolicy\u003c/code\u003e\nmiddleware is disabled or used with \u003ccode\u003eno-referrer-when-downgrade\u003c/code\u003e or \u003ccode\u003eunsafe-url\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\napp.use(\n  helmet.referrerPolicy({\n    policy: \u0027no-referrer-when-downgrade\u0027 // Sensitive: no-referrer-when-downgrade is used\n  })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eConfidential information should not be set inside URLs (GET requests) of the application and a safe (ie: different from \u003ccode\u003eunsafe-url\u003c/code\u003e or\n\u003ccode\u003eno-referrer-when-downgrade\u003c/code\u003e) \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\u003ereferrer-Policy\u003c/a\u003e\nheader, to control how much information is included in the referer header, should be used.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application a secure solution is to user the \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e referrer policy middleware set\nto \u003ccode\u003eno-referrer\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.referrerPolicy({\n    policy: \u0027no-referrer\u0027 // Compliant\n  })\n);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eOWASP Top 10 2021 Category A1\u003c/a\u003e - Broken Access Control \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e -\n  Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\u003edeveloper.mozilla.org\u003c/a\u003e - Referrer-Policy \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns\"\u003edeveloper.mozilla.org\u003c/a\u003e -\n  Referer header: privacy and security concerns \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/200\"\u003eMITRE, CWE-200\u003c/a\u003e - Exposure of Sensitive Information to an Unauthorized Actor \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S6825",
    "name": "Focusable elements should not have \"aria-hidden\" attribute",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) is a set of attributes that define ways to make web content and web applications more accessible to\npeople with disabilities. The \u003ccode\u003earia-hidden\u003c/code\u003e attribute is used to indicate that an element and all of its descendants are not visible or\nperceivable to any user as implemented by assistive technologies.\u003c/p\u003e\n\u003cp\u003eHowever, when \u003ccode\u003earia-hidden\u003c/code\u003e is used on a focusable element, it can create a confusing and inaccessible experience for screen reader\nusers. This is because the element will still be included in the tab order, so a screen reader user can navigate to it, but it will not be announced\nby the screen reader due to the \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cp\u003eThis rule ensures that focusable elements are not hidden from screen readers using the \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eCheck if the element is focusable. Focusable elements should not have \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;button aria-hidden\u003d\"true\"\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eRemove \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003earia-hidden attribute\n  (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) is a set of attributes that define ways to make web content and web applications more accessible to\npeople with disabilities. The \u003ccode\u003earia-hidden\u003c/code\u003e attribute is used to indicate that an element and all of its descendants are not visible or\nperceivable to any user as implemented by assistive technologies.\u003c/p\u003e\n\u003cp\u003eHowever, when \u003ccode\u003earia-hidden\u003c/code\u003e is used on a focusable element, it can create a confusing and inaccessible experience for screen reader\nusers. This is because the element will still be included in the tab order, so a screen reader user can navigate to it, but it will not be announced\nby the screen reader due to the \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cp\u003eThis rule ensures that focusable elements are not hidden from screen readers using the \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck if the element is focusable. Focusable elements should not have \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;button aria-hidden\u003d\"true\"\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eRemove \u003ccode\u003earia-hidden\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button\u0026gt;Click me\u0026lt;/button\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-hidden\"\u003earia-hidden attribute\n  (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5730",
    "name": "Allowing mixed-content is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA mixed-content is when a resource is loaded with the HTTP protocol, from a website accessed with the HTTPs protocol, thus mixed-content are not\nencrypted and exposed to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\"\u003eMITM attacks\u003c/a\u003e and could break the entire level of\nprotection that was desired by implementing encryption with the HTTPs protocol.\u003c/p\u003e\n\u003cp\u003eThe main threat with mixed-content is not only the confidentiality of resources but the whole website integrity:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A passive mixed-content (eg: \u003cem\u003e\u0026lt;img src\u003d\"http://example.com/picture.png\"\u0026gt;\u003c/em\u003e) allows an attacker to access and replace only these\n  resources, like images, with malicious ones that could lead to successful phishing attacks. \u003c/li\u003e\n  \u003cli\u003e With active mixed-content (eg: \u003cem\u003e\u0026lt;script src\u003d\"http://example.com/library.js\"\u0026gt;\u003c/em\u003e) an attacker can compromise the entire website by\n  injecting malicious javascript code for example (accessing and modifying the DOM, steal cookies, etc). \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The HTTPS protocol is in place and external resources are fetched from the website pages. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/helmet-csp\"\u003ehelmet-csp\u003c/a\u003e or \u003ca\nhref\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e middleware is used without the \u003ccode\u003eblockAllMixedContent\u003c/code\u003e directive:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      \"default-src\": [\"\u0027self\u0027\", \u0027example.com\u0027, \u0027code.jquery.com\u0027]\n    } // Sensitive: blockAllMixedContent directive is missing\n  })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement content security policy \u003cem\u003eblock-all-mixed-content\u003c/em\u003e directive which is supported by all modern browsers and will block loading of\nmixed-contents.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application a standard way to block mixed-content is to put in place the \u003ca\nhref\u003d\"https://www.npmjs.com/package/helmet-csp\"\u003ehelmet-csp\u003c/a\u003e or \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e middleware with the\n\u003ccode\u003eblockAllMixedContent\u003c/code\u003e directive:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      \"default-src\": [\"\u0027self\u0027\", \u0027example.com\u0027, \u0027code.jquery.com\u0027],\n      blockAllMixedContent: [] // Compliant\n    }\n  })\n);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e -\n  Sensitive Data Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\"\u003edeveloper.mozilla.org\u003c/a\u003e - Mixed-content \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"\u003edeveloper.mozilla.org\u003c/a\u003e - Content Security Policy (CSP) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.w3.org/TR/CSP3/\"\u003ew3.org\u003c/a\u003e - Content Security Policy Level 3 \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S5852",
    "name": "Using slow regular expressions is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost of the regular expression engines use backtracking to try all possible execution paths of the regular expression when evaluating an input, in\nsome cases it can cause performance issues, called \u003cstrong\u003ecatastrophic backtracking\u003c/strong\u003e situations. In the worst case, the complexity of the\nregular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger catastrophic\nbacktracking and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too with, in this case, a\nlarge carefully-crafted input (thousands chars).\u003c/p\u003e\n\u003cp\u003eThis rule determines the runtime complexity of a regular expression and informs you if it is not linear.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The input is user-controlled. \u003c/li\u003e\n  \u003cli\u003e The input size is not restricted to a small number of characters. \u003c/li\u003e\n  \u003cli\u003e There is no timeout in place to limit the regex evaluation time. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThe regex evaluation will never end:\u003c/p\u003e\n\u003cpre\u003e\n/(a+)+$/.test(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\"\n); // Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eTo avoid catastrophic backtracking situations, make sure that none of the following conditions apply to your regular expression.\u003c/p\u003e\n\u003cp\u003eIn all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If you have a repetition \u003ccode\u003er*\u003c/code\u003e or \u003ccode\u003er*?\u003c/code\u003e, such that the regex \u003ccode\u003er\u003c/code\u003e could produce different possible matches (of\n  possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if \u003ccode\u003er\u003c/code\u003e contains\n  optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that thereâ€™s only one way to match it).\n  \u003c/li\u003e\n  \u003cli\u003e If you have multiple repetitions that can match the same contents and are consecutive or are only separated by an optional separator or a\n  separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the number of\n  problematic repetitions). For example \u003ccode\u003ea*b*\u003c/code\u003e is not a problem because \u003ccode\u003ea*\u003c/code\u003e and \u003ccode\u003eb*\u003c/code\u003e match different things and\n  \u003ccode\u003ea*_a*\u003c/code\u003e is not a problem because the repetitions are separated by a \u003ccode\u003e\u0027_\u0027\u003c/code\u003e and canâ€™t match that \u003ccode\u003e\u0027_\u0027\u003c/code\u003e. However,\n  \u003ccode\u003ea*a*\u003c/code\u003e and \u003ccode\u003e.*_.*\u003c/code\u003e have quadratic runtime. \u003c/li\u003e\n  \u003cli\u003e If the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails, the\n  regex engine will try again starting at the next index. This means that any unbounded repetition, if itâ€™s followed by a pattern that can fail, can\n  cause quadratic runtime on some inputs. For example \u003ccode\u003estr.split(/\\s*,/)\u003c/code\u003e will run in quadratic time on strings that consist entirely of\n  spaces (or at least contain large sequences of spaces, not followed by a comma). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn order to rewrite your regular expression without these patterns, consider the following strategies:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like \u003ccode\u003e{1,5}\u003c/code\u003e instead of \u003ccode\u003e+\u003c/code\u003e\n  for instance. \u003c/li\u003e\n  \u003cli\u003e Refactor nested quantifiers to limit the number of way the inner group can be matched by the outer quantifier, for instance this nested\n  quantifier situation \u003ccode\u003e(ba+)+\u003c/code\u003e doesnâ€™t cause performance issues, indeed, the inner group can be matched only if there exists exactly one\n  \u003ccode\u003eb\u003c/code\u003e char per repetition of the group. \u003c/li\u003e\n  \u003cli\u003e Optimize regular expressions by emulating \u003cem\u003epossessive quantifiers\u003c/em\u003e and \u003cem\u003eatomic grouping\u003c/em\u003e. \u003c/li\u003e\n  \u003cli\u003e Use negated character classes instead of \u003ccode\u003e.\u003c/code\u003e to exclude separators where applicable. For example the quadratic regex\n  \u003ccode\u003e.*_.*\u003c/code\u003e can be made linear by changing it to \u003ccode\u003e[^_]*_.*\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSometimes itâ€™s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when the regex is not\nanchored to the beginning of the string, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Solve the problem without regular expressions \u003c/li\u003e\n  \u003cli\u003e Use an alternative non-backtracking regex implementations such as Googleâ€™s \u003ca href\u003d\"https://github.com/google/re2\"\u003eRE2\u003c/a\u003e or \u003ca\n  href\u003d\"https://github.com/uhop/node-re2/\"\u003enode-re2\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace \u003ccode\u003estr.split(/\\s*,\\s*/)\u003c/code\u003e with \u003ccode\u003estr.split(\",\")\u003c/code\u003e and\n  then trimming the spaces from the strings as a second step. \u003c/li\u003e\n  \u003cli\u003e It is often possible to make the regex infallible by making all the parts that could fail optional, which will prevent backtracking. Of course\n  this means that youâ€™ll accept more strings than intended, but this can be handled by using capturing groups to check whether the optional parts were\n  matched or not and then ignoring the match if they werenâ€™t. For example the regex \u003ccode\u003ex*y\u003c/code\u003e could be replaced with \u003ccode\u003ex*(y)?\u003c/code\u003e and\n  then the call to \u003ccode\u003estr.match(regex)\u003c/code\u003e could be replaced with \u003ccode\u003ematched \u003d str.match(regex)\u003c/code\u003e and \u003ccode\u003ematched[1] !\u003d\u003d\n  undefined\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003ePossessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues. Unfortunately, they are not\nsupported in JavaScript, but one can still mimick them using lookahead assertions and backreferences:\u003c/p\u003e\n\u003cpre\u003e\n/((?\u003d(a+))\\2)+$/.test(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\"\n); // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eOWASP Top 10 2017 Category A1\u003c/a\u003e - Injection \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eMITRE, CWE-400\u003c/a\u003e - Uncontrolled Resource Consumption \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1333\"\u003eMITRE, CWE-1333\u003c/a\u003e - Inefficient Regular Expression Complexity \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003eowasp.org\u003c/a\u003e - OWASP Regular expression Denial\n  of Service - ReDoS \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\"\u003estackstatus.net(archived)\u003c/a\u003e - Outage Postmortem - July 20, 2016 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003eregular-expressions.info\u003c/a\u003e - Runaway Regular Expressions: Catastrophic\n  Backtracking \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\"\u003edocs.microsoft.com\u003c/a\u003e - Backtracking with Nested Optional Quantifiers \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "javascript:S5973",
    "name": "Tests should be stable",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\ndevelopers have to rerun failed tests. However, the real problem is that you canâ€™t completely trust these tests, they might fail for many different\nreasons and you donâ€™t know if any of them will happen in production.\u003c/p\u003e\n\u003cp\u003eSome tools, such as Jest, enable developers to automatically retry flaky tests. This might be acceptable as a temporary solution, but it should\neventually be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when these functions are called with a value higher than \u003ccode\u003e0\u003c/code\u003e: * \u003ccode\u003ejest.retry()\u003c/code\u003e *\n\u003ccode\u003ethis.retries()\u003c/code\u003e inside a Mocha test case\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eMake your test stable so that it passes on the first try, or remove it.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\njest.retryTimes(3); // Noncompliant\n\ndescribe(\u0027API.foo()\u0027, function() {\n  it(\u0027should return 5 when computing ...\u0027, function() {\n    doSomethingUnstable();\n  });\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Jest docs - \u003ca href\u003d\"https://jestjs.io/docs/jest-object#jestretrytimesnumretries-options\"\u003ejest.retryTimes()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha docs - \u003ca href\u003d\"https://mochajs.org/#retry-tests\"\u003eRetry tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Spotify Engineering - \u003ca\n  href\u003d\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\"\u003eTest Flakiness - Methods\n  for identifying and dealing with flaky tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\ndevelopers have to rerun failed tests. However, the real problem is that you canâ€™t completely trust these tests, they might fail for many different\nreasons and you donâ€™t know if any of them will happen in production.\u003c/p\u003e\n\u003cp\u003eSome tools, such as Jest, enable developers to automatically retry flaky tests. This might be acceptable as a temporary solution, but it should\neventually be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when these functions are called with a value higher than \u003ccode\u003e0\u003c/code\u003e: * \u003ccode\u003ejest.retry()\u003c/code\u003e *\n\u003ccode\u003ethis.retries()\u003c/code\u003e inside a Mocha test case\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMake your test stable so that it passes on the first try, or remove it.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\njest.retryTimes(3); // Noncompliant\n\ndescribe(\u0027API.foo()\u0027, function() {\n  it(\u0027should return 5 when computing ...\u0027, function() {\n    doSomethingUnstable();\n  });\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Jest docs - \u003ca href\u003d\"https://jestjs.io/docs/jest-object#jestretrytimesnumretries-options\"\u003ejest.retryTimes()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Mocha docs - \u003ca href\u003d\"https://mochajs.org/#retry-tests\"\u003eRetry tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Spotify Engineering - \u003ca\n  href\u003d\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\"\u003eTest Flakiness - Methods\n  for identifying and dealing with flaky tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "design",
      "tests",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1131",
    "name": "Lines should not end with trailing whitespaces",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTrailing whitespaces bring no information, they may generate noise when comparing different versions of the same file, and they can create bugs\nwhen they appear after a \u003ccode\u003e\\\u003c/code\u003e marking a line continuation. They should be systematically removed.\u003c/p\u003e\n\u003cp\u003eAn automated code formatter allows to completely avoid this family of issues and should be used wherever possible.\u003c/p\u003e\n\u003cpre\u003e\n// The following string will error if there is a whitespace after \u0027\\\u0027\nvar str \u003d \"Hello \\\nWorld\";\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTrailing whitespaces bring no information, they may generate noise when comparing different versions of the same file, and they can create bugs\nwhen they appear after a \u003ccode\u003e\\\u003c/code\u003e marking a line continuation. They should be systematically removed.\u003c/p\u003e\n\u003cp\u003eAn automated code formatter allows to completely avoid this family of issues and should be used wherever possible.\u003c/p\u003e\n\u003cpre\u003e\n// The following string will error if there is a whitespace after \u0027\\\u0027\nvar str \u003d \"Hello \\\nWorld\";\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [
      "javascript:TrailingWhitespace"
    ],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5850",
    "name": "Alternatives in regular expressions should be grouped when used with anchors",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRegular expressions are used for pattern matching within strings. They can be defined upon special characters, meaning symbols or metacharacters\nwith a reserved meaning that convey specific instructions to the regex engine. These characters are not treated as literals but have special functions\nin defining patterns, among which stand out anchors and disjunctions.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An anchor allows you to match positions in the input string rather than matching specific characters. Anchors help you identify specific\n  locations within the string where a pattern should start (\u003ccode\u003e^\u003c/code\u003e) or end (\u003ccode\u003e$\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e A disjunction, also known as alternatives, represented by the vertical bar (\u003ccode\u003e|\u003c/code\u003e) allows you to specify multiple alternative patterns\n  that the regex engine will attempt to match in the input string. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMixing anchors with alternatives in regular expressions can lead to confusion due to their precedence rules. Alternatives (\u003ccode\u003e|\u003c/code\u003e) have a\nlower precedence than anchors (\u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e). As a result, if you donâ€™t use non-capturing groups \u003ccode\u003e(?:...)\u003c/code\u003e to group\nthe alternatives properly, the anchors might apply to the ends only rather than the entire disjunction, which could not be the initial intent.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /^a|b|c$/; // Noncompliant: \u0027^\u0027 applies to \u0027a\u0027 and \u0027$\u0027 applies to \u0027c\u0027\n\u003c/pre\u003e\n\u003cp\u003eYou should group the disjunction with parentheses denoting non-capturing groups so that the anchors apply to all alternatives.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /^(?:a|b|c)$/;\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, you can distribute the anchors to each alternative of the disjunction.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /^a$|^b$|^c$/;\n\u003c/pre\u003e\n\u003cp\u003eIf the precedence of the operators is understood and the intention is to apply the anchors to only the ends, use parentheses to make it\nexplicit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /(?:^a)|b|(?:c$)/;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\u003eAssertions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunction:\n  \u003ccode\u003e|\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\"\u003eNon-capturing group:\n  \u003ccode\u003e(?:...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRegular expressions are used for pattern matching within strings. They can be defined upon special characters, meaning symbols or metacharacters\nwith a reserved meaning that convey specific instructions to the regex engine. These characters are not treated as literals but have special functions\nin defining patterns, among which stand out anchors and disjunctions.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e An anchor allows you to match positions in the input string rather than matching specific characters. Anchors help you identify specific\n  locations within the string where a pattern should start (\u003ccode\u003e^\u003c/code\u003e) or end (\u003ccode\u003e$\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e A disjunction, also known as alternatives, represented by the vertical bar (\u003ccode\u003e|\u003c/code\u003e) allows you to specify multiple alternative patterns\n  that the regex engine will attempt to match in the input string. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMixing anchors with alternatives in regular expressions can lead to confusion due to their precedence rules. Alternatives (\u003ccode\u003e|\u003c/code\u003e) have a\nlower precedence than anchors (\u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e). As a result, if you donâ€™t use non-capturing groups \u003ccode\u003e(?:...)\u003c/code\u003e to group\nthe alternatives properly, the anchors might apply to the ends only rather than the entire disjunction, which could not be the initial intent.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nconst regex \u003d /^a|b|c$/; // Noncompliant: \u0027^\u0027 applies to \u0027a\u0027 and \u0027$\u0027 applies to \u0027c\u0027\n\u003c/pre\u003e\n\u003cp\u003eYou should group the disjunction with parentheses denoting non-capturing groups so that the anchors apply to all alternatives.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /^(?:a|b|c)$/;\n\u003c/pre\u003e\n\u003cp\u003eAlternatively, you can distribute the anchors to each alternative of the disjunction.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /^a$|^b$|^c$/;\n\u003c/pre\u003e\n\u003cp\u003eIf the precedence of the operators is understood and the intention is to apply the anchors to only the ends, use parentheses to make it\nexplicit.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nconst regex \u003d /(?:^a)|b|(?:c$)/;\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions\"\u003eRegular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions\"\u003eAssertions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction\"\u003eDisjunction:\n  \u003ccode\u003e|\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group\"\u003eNon-capturing group:\n  \u003ccode\u003e(?:...)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "regex",
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6824",
    "name": "No ARIA role or property for unsupported DOM elements",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that ARIA roles or \u003ccode\u003earia-*\u003c/code\u003e attributes are not used in unsupported DOM elements, which are mostly invisible such as\n\u003ccode\u003emeta\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e or \u003ccode\u003ehead\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eCheck if you are using ARIA roles or \u003ccode\u003earia-*\u003c/code\u003e attributes in unsupported DOM elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;title aria-hidden\u003d\"false\"\u0026gt;My beautiful web page\u0026lt;/title\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code, remove the extra ARIA role or \u003ccode\u003earia-*\u003c/code\u003e attributes from the unsupported DOM elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;title\u0026gt;My beautiful web page\u0026lt;/title\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that ARIA roles or \u003ccode\u003earia-*\u003c/code\u003e attributes are not used in unsupported DOM elements, which are mostly invisible such as\n\u003ccode\u003emeta\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e or \u003ccode\u003ehead\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck if you are using ARIA roles or \u003ccode\u003earia-*\u003c/code\u003e attributes in unsupported DOM elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;title aria-hidden\u003d\"false\"\u0026gt;My beautiful web page\u0026lt;/title\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code, remove the extra ARIA role or \u003ccode\u003earia-*\u003c/code\u003e attributes from the unsupported DOM elements.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;title\u0026gt;My beautiful web page\u0026lt;/title\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1134",
    "name": "Track uses of \"FIXME\" tags",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5734",
    "name": "Allowing browsers to sniff MIME types is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/\"\u003eMIME confusion\u003c/a\u003e attacks occur when an\nattacker successfully tricks a web-browser to interpret a resource as a different type than the one expected. To correctly interpret a resource\n(script, image, stylesheet â€¦â€‹) web browsers look for the \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\"\u003eContent-Type\nheader\u003c/a\u003e defined in the HTTP response received from the server, but often this header is not set or is set with an incorrect value. To avoid\ncontent-type mismatch and to provide the best user experience, web browsers try to deduce the right content-type, generally by inspecting the content\nof the resources (the first bytes). This \"guess mechanism\" is called \u003ca href\u003d\"https://en.wikipedia.org/wiki/Content_sniffing\"\u003eMIME type\nsniffing\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAttackers can take advantage of this feature when a website (\"example.com\" here) allows to upload arbitrary files. In that case, an attacker can\nupload a malicious image \u003cem\u003efakeimage.png\u003c/em\u003e (containing malicious JavaScript code or \u003ca\nhref\u003d\"https://docs.microsoft.com/fr-fr/archive/blogs/ieinternals/script-polyglots\"\u003ea polyglot content\u003c/a\u003e file) such as:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eWhen the victim will visit the website showing the uploaded image, the malicious script embedded into the image will be executed by web browsers\nperforming MIME type sniffing.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\"\u003eContent-Type\u003c/a\u003e header is not systematically set for all\n  resources. \u003c/li\u003e\n  \u003cli\u003e Content of resources can be controlled by users. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if, when using \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e, the \u003ccode\u003enoSniff\u003c/code\u003e\nmiddleware is disabled:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet({\n    noSniff: false, // Sensitive\n  })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\u003eX-Content-Type-Options\u003c/a\u003e header with\n\u003cem\u003enosniff\u003c/em\u003e value (the only existing value for this header) which is supported by all modern browsers and will prevent browsers from performing\nMIME type sniffing, so that in case of Content-Type header mismatch, the resource is not interpreted. For example within a \u0026lt;script\u0026gt; object\ncontext, JavaScript MIME types are expected (like \u003cem\u003eapplication/javascript\u003c/em\u003e) in the Content-Type header.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eWhen using \u003ccode\u003ehelmet\u003c/code\u003e in an Express.js application, the \u003ccode\u003enoSniff\u003c/code\u003e middleware should be enabled (it is also done by\ndefault):\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet\u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(helmet.noSniff());\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e -\n  Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\u003edeveloper.mozilla.org\u003c/a\u003e - X-Content-Type-Options\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/\"\u003eblog.mozilla.org\u003c/a\u003e - Mitigating MIME\n  Confusion Attacks in Firefox \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S4524",
    "name": "\"default\" clauses should be last",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e can contain a \u003ccode\u003edefault\u003c/code\u003e clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered, etc.\u003c/p\u003e\n\u003cp\u003eFor readability purposes, to help a developer quickly spot the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement, it is recommended to put the\n\u003ccode\u003edefault\u003c/code\u003e clause at the beginning or the end of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is not the first or the last one of the \u003ccode\u003eswitch\u003c/code\u003e\u0027s cases.\u003c/p\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // Noncompliant: default clause should be the first or last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e can contain a \u003ccode\u003edefault\u003c/code\u003e clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered, etc.\u003c/p\u003e\n\u003cp\u003eFor readability purposes, to help a developer quickly spot the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement, it is recommended to put the\n\u003ccode\u003edefault\u003c/code\u003e clause at the beginning or the end of the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is not the first or the last one of the \u003ccode\u003eswitch\u003c/code\u003e\u0027s cases.\u003c/p\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // Noncompliant: default clause should be the first or last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6823",
    "name": "DOM elements with the `aria-activedescendant` property should be accessible via the tab key",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003earia-activedescendant\u003c/code\u003e attribute is used to enhance the accessibility of composite widgets by managing focus within them. It allows\na parent element to retain active document focus while indicating which of its child elements has secondary focus. This attribute is particularly\nuseful in interactive components like search typeahead select lists, where the user can navigate through a list of options while continuing to type in\nthe input field.\u003c/p\u003e\n\u003cp\u003eThis rule checks that DOM elements with the \u003ccode\u003earia-activedescendant\u003c/code\u003e property either have an inherent tabIndex or declare one.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eMake sure that DOM elements with the \u003ccode\u003earia-activedescendant\u003c/code\u003e property have a \u003ccode\u003etabIndex\u003c/code\u003e property, or use an element with an\ninherent one.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div aria-activedescendant\u003d{descendantId}\u0026gt;\n  {content}\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div aria-activedescendant\u003d{descendantId} tabIndex\u003d{0}\u0026gt;\n  {content}\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-activedescendant\"\u003e\u003ccode\u003earia-activedescendant\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003e\u003ccode\u003etabIndex\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria/#composite\"\u003eComposite role\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003earia-activedescendant\u003c/code\u003e attribute is used to enhance the accessibility of composite widgets by managing focus within them. It allows\na parent element to retain active document focus while indicating which of its child elements has secondary focus. This attribute is particularly\nuseful in interactive components like search typeahead select lists, where the user can navigate through a list of options while continuing to type in\nthe input field.\u003c/p\u003e\n\u003cp\u003eThis rule checks that DOM elements with the \u003ccode\u003earia-activedescendant\u003c/code\u003e property either have an inherent tabIndex or declare one.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eMake sure that DOM elements with the \u003ccode\u003earia-activedescendant\u003c/code\u003e property have a \u003ccode\u003etabIndex\u003c/code\u003e property, or use an element with an\ninherent one.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div aria-activedescendant\u003d{descendantId}\u0026gt;\n  {content}\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div aria-activedescendant\u003d{descendantId} tabIndex\u003d{0}\u0026gt;\n  {content}\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-activedescendant\"\u003e\u003ccode\u003earia-activedescendant\u003c/code\u003e\n  attribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\"\u003e\u003ccode\u003etabIndex\u003c/code\u003e attribute\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria/#composite\"\u003eComposite role\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3796",
    "name": "Callbacks of array methods should have return statements",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, many array methods take a callback function as an argument. These methods are designed to transform or filter arrays based on the\nlogic provided in the callback function. The callback function is called sequentially, and the return value of the callback function is used to\ndetermine the return value of the \u003ccode\u003eArray\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eIf the callback function does not return a value, the array method may not work as expected and is most likely a mistake.\u003c/p\u003e\n\u003cp\u003eThis rule applies to the following methods of an array:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\u003e\u003ccode\u003eArray.from\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"\u003e\u003ccode\u003eArray.prototype.every\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003e\u003ccode\u003eArray.prototype.filter\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003e\u003ccode\u003eArray.prototype.find\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"\u003e\u003ccode\u003eArray.prototype.findLast\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"\u003e\u003ccode\u003eArray.prototype.findIndex\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"\u003e\u003ccode\u003eArray.prototype.findLastIndex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003e\u003ccode\u003eArray.prototype.map\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"\u003e\u003ccode\u003eArray.prototype.flatMap\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"\u003e\u003ccode\u003eArray.prototype.reduce\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"\u003e\u003ccode\u003eArray.prototype.reduceRight\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"\u003e\u003ccode\u003eArray.prototype.some\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003e\u003ccode\u003eArray.prototype.sort\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003e\u003ccode\u003eArray.prototype.toSorted\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf there is no \u003ccode\u003ereturn\u003c/code\u003e, the callback will implicitly return \u003ccode\u003eundefined\u003c/code\u003e, which may cause unexpected behavior or errors in\nthe code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [\"a\", \"b\", \"c\"];\nlet merged \u003d arr.reduce(function(a, b) {\n  a.concat(b); // Noncompliant: No return statement, will result in TypeError\n});\n\u003c/pre\u003e\n\u003cp\u003eAlways add a return statement to the callback function passed to the array method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [\"a\", \"b\", \"c\"];\nlet merged \u003d arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn JavaScript, many array methods take a callback function as an argument. These methods are designed to transform or filter arrays based on the\nlogic provided in the callback function. The callback function is called sequentially, and the return value of the callback function is used to\ndetermine the return value of the \u003ccode\u003eArray\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eIf the callback function does not return a value, the array method may not work as expected and is most likely a mistake.\u003c/p\u003e\n\u003cp\u003eThis rule applies to the following methods of an array:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\u003e\u003ccode\u003eArray.from\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"\u003e\u003ccode\u003eArray.prototype.every\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"\u003e\u003ccode\u003eArray.prototype.filter\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\"\u003e\u003ccode\u003eArray.prototype.find\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast\"\u003e\u003ccode\u003eArray.prototype.findLast\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"\u003e\u003ccode\u003eArray.prototype.findIndex\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\"\u003e\u003ccode\u003eArray.prototype.findLastIndex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"\u003e\u003ccode\u003eArray.prototype.map\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\"\u003e\u003ccode\u003eArray.prototype.flatMap\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\"\u003e\u003ccode\u003eArray.prototype.reduce\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\"\u003e\u003ccode\u003eArray.prototype.reduceRight\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\"\u003e\u003ccode\u003eArray.prototype.some\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"\u003e\u003ccode\u003eArray.prototype.sort\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted\"\u003e\u003ccode\u003eArray.prototype.toSorted\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf there is no \u003ccode\u003ereturn\u003c/code\u003e, the callback will implicitly return \u003ccode\u003eundefined\u003c/code\u003e, which may cause unexpected behavior or errors in\nthe code.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet arr \u003d [\"a\", \"b\", \"c\"];\nlet merged \u003d arr.reduce(function(a, b) {\n  a.concat(b); // Noncompliant: No return statement, will result in TypeError\n});\n\u003c/pre\u003e\n\u003cp\u003eAlways add a return statement to the callback function passed to the array method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet arr \u003d [\"a\", \"b\", \"c\"];\nlet merged \u003d arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5856",
    "name": "Regular expressions should be syntactically valid",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eRegular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eTo match a literal string, rather than a regular expression, either all special characters should be escaped or methods that donâ€™t use regular\nexpressions should be used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnew RegExp(\"([\");\nstr.match(\"([\");\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnew RegExp(\"\\\\(\\\\[\");\nstr.match(\"\\\\(\\\\[\");\nstr.replace(\"([\", \"{\");\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRegular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eTo match a literal string, rather than a regular expression, either all special characters should be escaped or methods that donâ€™t use regular\nexpressions should be used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nnew RegExp(\"([\");\nstr.match(\"([\");\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nnew RegExp(\"\\\\(\\\\[\");\nstr.match(\"\\\\(\\\\[\");\nstr.replace(\"([\", \"{\");\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "type-dependent"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S1135",
    "name": "Track uses of \"TODO\" tags",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction doSomething() {\n  // TODO\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nfunction doSomething() {\n  // TODO\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3799",
    "name": "Destructuring patterns should not be empty",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDestructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. It can make code more\nconcise and expressive by directly extracting values or properties needed from arrays or objects. However, it is possible to define an empty pattern\nthat has no effect, where no variables are bound to the destructured values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet {a: {}} \u003d myObj; // Noncompliant: this does not create any variable\nfunction foo({p: []}) { // Noncompliant: this does not define any parameter\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen empty curly or square brackets are bound to a pattern with a colon (\u003ccode\u003e:\u003c/code\u003e), like \u003ccode\u003e{ pattern: [] }\u003c/code\u003e or \u003ccode\u003e{ pattern: {}\n}\u003c/code\u003e, the intent is likely to define a default value. To properly define such a default value, use the assignment operator (\u003ccode\u003e\u003d\u003c/code\u003e)\ninstead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet {a \u003d {}} \u003d myObj;\nfunction foo({p \u003d []}) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIf that is not the intention, complete the destructuring pattern to contain the variables to create.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet {a: {b, c}} \u003d myObj;\nfunction foo({p: [a, b, c]}) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eDestructuring\n  assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDestructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. It can make code more\nconcise and expressive by directly extracting values or properties needed from arrays or objects. However, it is possible to define an empty pattern\nthat has no effect, where no variables are bound to the destructured values.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nlet {a: {}} \u003d myObj; // Noncompliant: this does not create any variable\nfunction foo({p: []}) { // Noncompliant: this does not define any parameter\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eWhen empty curly or square brackets are bound to a pattern with a colon (\u003ccode\u003e:\u003c/code\u003e), like \u003ccode\u003e{ pattern: [] }\u003c/code\u003e or \u003ccode\u003e{ pattern: {}\n}\u003c/code\u003e, the intent is likely to define a default value. To properly define such a default value, use the assignment operator (\u003ccode\u003e\u003d\u003c/code\u003e)\ninstead.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet {a \u003d {}} \u003d myObj;\nfunction foo({p \u003d []}) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eIf that is not the intention, complete the destructuring pattern to contain the variables to create.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nlet {a: {b, c}} \u003d myObj;\nfunction foo({p: [a, b, c]}) {\n  // ...\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"\u003eDestructuring\n  assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S5732",
    "name": "Disabling content security policy frame-ancestors directive is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Clickjacking\"\u003eClickjacking\u003c/a\u003e attacks occur when an attacker try to trick an user to click on certain\nbuttons/links of a legit website. This attack can take place with malicious HTML frames well hidden in an attacker website.\u003c/p\u003e\n\u003cp\u003eFor instance, suppose a safe and authentic page of a social network (https://socialnetworkexample.com/makemyprofilpublic) which allows an user to\nchange the visibility of his profile by clicking on a button. This is a critical feature with high privacy concerns. Users are generally well informed\non the social network of the consequences of this action. An attacker can trick users, without their consent, to do this action with the below\nembedded code added on a malicious website:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;html\u0026gt;\n\u0026lt;b\u0026gt;Click on the button below to win 5000$\u0026lt;/b\u0026gt;\n\u0026lt;br\u0026gt;\n\u0026lt;iframe src\u003d\"https://socialnetworkexample.com/makemyprofilpublic\" width\u003d\"200\" height\u003d\"200\"\u0026gt;\u0026lt;/iframe\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003ePlaying with the size of the iframe itâ€™s sometimes possible to display only the critical parts of a page, in this case the button of the\n\u003cem\u003emakemyprofilpublic\u003c/em\u003e page.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Clickjacking#Clickjacking_categories\"\u003eCritical actions\u003c/a\u003e of the application are prone to clickjacking\n  attacks because a simple click on a link or a button can trigger them. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eIn Express.js application the code is sensitive if the \u003ca href\u003d\"https://www.npmjs.com/package/helmet-csp\"\u003ehelmet-csp\u003c/a\u003e or \u003ca\nhref\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e middleware is used without the \u003ccode\u003eframeAncestors\u003c/code\u003e directive (or if\n\u003ccode\u003eframeAncestors\u003c/code\u003e is set to \u003ccode\u003e\u0027none\u0027\u003c/code\u003e):\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      // other directives\n      frameAncestors: [\"\u0027none\u0027\"] // Sensitive: frameAncestors  is set to none\n    }\n  })\n);\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eImplement content security policy \u003cem\u003eframe-ancestors\u003c/em\u003e directive which is supported by all modern browsers and will specify the origins of\nframe allowed to be loaded by the browser (this directive deprecates \u003ca\nhref\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\u003eX-Frame-Options\u003c/a\u003e).\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eIn Express.js application a standard way to implement CSP frame-ancestors directive is the \u003ca\nhref\u003d\"https://www.npmjs.com/package/helmet-csp\"\u003ehelmet-csp\u003c/a\u003e or \u003ca href\u003d\"https://www.npmjs.com/package/helmet\"\u003ehelmet\u003c/a\u003e middleware:\u003c/p\u003e\n\u003cpre\u003e\nconst express \u003d require(\u0027express\u0027);\nconst helmet \u003d require(\u0027helmet\u0027);\n\nlet app \u003d express();\n\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      // other directives\n      frameAncestors: [\"\u0027example.com\u0027\"] // Compliant\n    }\n  })\n);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eOWASP Top 10 2021 Category A4\u003c/a\u003e - Insecure Design \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eOWASP Top 10 2021 Category A5\u003c/a\u003e - Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e -\n  Security Misconfiguration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html\"\u003eOWASP Cheat Sheets\u003c/a\u003e - Clickjacking Defense\n  Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors\"\u003edeveloper.mozilla.org\u003c/a\u003e -\n  Frame-ancestors \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"\u003edeveloper.mozilla.org\u003c/a\u003e - Content Security Policy (CSP) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/451\"\u003eMITRE, CWE-451\u003c/a\u003e - User Interface (UI) Misrepresentation of Critical Information \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.w3.org/TR/CSP3/\"\u003ew3.org\u003c/a\u003e - Content Security Policy Level 3 \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "express.js"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "javascript:S2589",
    "name": "Boolean expressions should not be gratuitous",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a) {\n  if (a) { // Noncompliant\n    doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (a) {\n  if (b) {\n    doSomething();\n  }\n}\n\n// or\nif (a) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nif (a) {\n  if (a) { // Noncompliant\n    doSomething();\n  }\n}\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nif (a) {\n  if (b) {\n    doSomething();\n  }\n}\n\n// or\nif (a) {\n  doSomething();\n}\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "cwe",
      "redundant",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6822",
    "name": "No redundant ARIA role",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eIn HTML, certain elements have default roles. Default roles, also known as implicit roles, are roles that are inherently associated with certain\nHTML elements. These roles provide information about what an element does or the type of content it contains, which is especially useful for assistive\ntechnologies like screen readers.\u003c/p\u003e\n\u003cp\u003eFor example, a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element has a default role of \u003ccode\u003ebutton\u003c/code\u003e. If you explicitly define the role of a\n\u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element as \u003ccode\u003ebutton\u003c/code\u003e, itâ€™s considered redundant because itâ€™s the default role of that element.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eRemove redundant ARIA role attribute.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;button role\u003d\"button\" onClick\u003d{handleClick}\u0026gt;OK\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{handleClick}\u0026gt;OK\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eIn HTML, certain elements have default roles. Default roles, also known as implicit roles, are roles that are inherently associated with certain\nHTML elements. These roles provide information about what an element does or the type of content it contains, which is especially useful for assistive\ntechnologies like screen readers.\u003c/p\u003e\n\u003cp\u003eFor example, a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element has a default role of \u003ccode\u003ebutton\u003c/code\u003e. If you explicitly define the role of a\n\u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element as \u003ccode\u003ebutton\u003c/code\u003e, itâ€™s considered redundant because itâ€™s the default role of that element.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove redundant ARIA role attribute.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;button role\u003d\"button\" onClick\u003d{handleClick}\u0026gt;OK\u0026lt;/button\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;button onClick\u003d{handleClick}\u0026gt;OK\u0026lt;/button\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S6821",
    "name": "DOM elements with ARIA roles should have a valid non-abstract role",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that when using the \u003ccode\u003erole\u003c/code\u003e property in DOM elements, its value is a valid non-abstract ARIA role.\u003c/p\u003e\n\u003cp\u003eThis rule does not cover non-DOM elements, such as custom components.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in JSX\u003c/h2\u003e\n\u003cp\u003eCheck that each element with a defined ARIA role has a valid non-abstract value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"meth\" aria-label\u003d\"a^{2} + b^{2} \u003d c^{2}\"\u0026gt;\n  a\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; + b\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; \u003d c\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code use a valid value for the ARIA role attribute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"math\" aria-label\u003d\"a^{2} + b^{2} \u003d c^{2}\"\u0026gt;\n  a\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; + b\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; \u003d c\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eARIA (Accessible Rich Internet Applications) attributes are used to enhance the accessibility of web content and web applications. These attributes\nprovide additional information about an elementâ€™s role, state, properties, and values to assistive technologies like screen readers.\u003c/p\u003e\n\u003cp\u003eThis rule checks that when using the \u003ccode\u003erole\u003c/code\u003e property in DOM elements, its value is a valid non-abstract ARIA role.\u003c/p\u003e\n\u003cp\u003eThis rule does not cover non-DOM elements, such as custom components.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eCheck that each element with a defined ARIA role has a valid non-abstract value.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;div role\u003d\"meth\" aria-label\u003d\"a^{2} + b^{2} \u003d c^{2}\"\u0026gt;\n  a\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; + b\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; \u003d c\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eTo fix the code use a valid value for the ARIA role attribute.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;div role\u003d\"math\" aria-label\u003d\"a^{2} + b^{2} \u003d c^{2}\"\u0026gt;\n  a\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; + b\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; \u003d c\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt;\n\u0026lt;/div\u0026gt;\n\u003c/pre\u003e",
        "context": {
          "key": "jsx",
          "displayName": "JSX"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\"\u003eUsing ARIA: Roles, states, and\n  properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MDN web docs - \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\"\u003eARIA roles (Reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e W3C - \u003ca href\u003d\"https://www.w3.org/TR/wai-aria-1.2/\"\u003eAccessible Rich Internet Applications (WAI-ARIA) 1.2\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "JS",
    "tags": [
      "accessibility",
      "react"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "javascript:S3798",
    "name": "Variables and functions should not be declared in the global scope",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAny variable or function declared in the global scope implicitly becomes attached to the global object (the \u003ccode\u003ewindow\u003c/code\u003e object in a browser\nenvironment). To make it explicit this variable or function should be a property of \u003ccode\u003ewindow\u003c/code\u003e. When it is meant to be used just locally, it\nshould be declared with the \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).\u003c/p\u003e\n\u003cp\u003eThis rule should not be activated when modules are used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar myVar \u003d 42;       // Noncompliant\nfunction myFunc() { } // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nwindow.myVar \u003d 42;\nwindow.myFunc \u003d function() { };\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nlet myVar \u003d 42;\nlet myFunc \u003d function() { }\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n// IIFE\n(function() {\n  var myVar \u003d 42;\n  function myFunc() { }\n})();\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAny variable or function declared in the global scope implicitly becomes attached to the global object (the \u003ccode\u003ewindow\u003c/code\u003e object in a browser\nenvironment). To make it explicit this variable or function should be a property of \u003ccode\u003ewindow\u003c/code\u003e. When it is meant to be used just locally, it\nshould be declared with the \u003ccode\u003econst\u003c/code\u003e or \u003ccode\u003elet\u003c/code\u003e keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).\u003c/p\u003e\n\u003cp\u003eThis rule should not be activated when modules are used.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nvar myVar \u003d 42;       // Noncompliant\nfunction myFunc() { } // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nwindow.myVar \u003d 42;\nwindow.myFunc \u003d function() { };\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nlet myVar \u003d 42;\nlet myFunc \u003d function() { }\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n// IIFE\n(function() {\n  var myVar \u003d 42;\n  function myFunc() { }\n})();\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "JS",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  }
]