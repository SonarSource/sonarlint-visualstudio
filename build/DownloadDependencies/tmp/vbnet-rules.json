[
  {
    "key": "vbnet:S3063",
    "name": "\"StringBuilder\" data should be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e instances that never build a \u003ccode\u003estring\u003c/code\u003e clutter the code and worse are a drag on performance. Either they\nshould be removed, or the missing \u003ccode\u003eToString()\u003c/code\u003e call should be added.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    Dim sb As StringBuilder \u003d New StringBuilder() \u0027 Noncompliant\n    sb.Append(\"Got: \")\n\n    For Each str As String In strings\n        sb.Append(str).Append(\", \")\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    For Each str As String In strings\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    Dim sb As StringBuilder \u003d New StringBuilder()\n    sb.Append(\"Got: \")\n\n    For Each str As String In strings\n        sb.Append(str).Append(\", \")\n    Next\n\n    My.Application.Log.WriteEntry(sb.ToString())\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003eStringBuilder\u003c/code\u003e is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessed through \u003ccode\u003esb.CopyTo()\u003c/code\u003e, \u003ccode\u003esb.GetChunks()\u003c/code\u003e, \u003ccode\u003esb.Length\u003c/code\u003e, or \u003ccode\u003esb(index)\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Passed as a method argument, on the grounds that it will likely be accessed through a \u003ccode\u003eToString()\u003c/code\u003e invocation there. \u003c/li\u003e\n  \u003cli\u003e Passed in as a parameter to the current method, on the grounds that the callee will materialize the string. \u003c/li\u003e\n  \u003cli\u003e Retrieved by a custom function (\u003ccode\u003eDim sb As StringBuilder \u003d GetStringBuilder()\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Returned by the method. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e instances that never build a \u003ccode\u003estring\u003c/code\u003e clutter the code and worse are a drag on performance. Either they\nshould be removed, or the missing \u003ccode\u003eToString()\u003c/code\u003e call should be added.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    Dim sb As StringBuilder \u003d New StringBuilder() \u0027 Noncompliant\n    sb.Append(\"Got: \")\n\n    For Each str As String In strings\n        sb.Append(str).Append(\", \")\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    For Each str As String In strings\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(ByVal strings As List(Of String))\n    Dim sb As StringBuilder \u003d New StringBuilder()\n    sb.Append(\"Got: \")\n\n    For Each str As String In strings\n        sb.Append(str).Append(\", \")\n    Next\n\n    My.Application.Log.WriteEntry(sb.ToString())\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported when \u003ccode\u003eStringBuilder\u003c/code\u003e is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Accessed through \u003ccode\u003esb.CopyTo()\u003c/code\u003e, \u003ccode\u003esb.GetChunks()\u003c/code\u003e, \u003ccode\u003esb.Length\u003c/code\u003e, or \u003ccode\u003esb(index)\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Passed as a method argument, on the grounds that it will likely be accessed through a \u003ccode\u003eToString()\u003c/code\u003e invocation there. \u003c/li\u003e\n  \u003cli\u003e Passed in as a parameter to the current method, on the grounds that the callee will materialize the string. \u003c/li\u003e\n  \u003cli\u003e Retrieved by a custom function (\u003ccode\u003eDim sb As StringBuilder \u003d GetStringBuilder()\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Returned by the method. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2094",
    "name": "Classes should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003eInterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Empty \u0027 Noncompliant\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Interface IEmpty\n\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003ePartial classes are ignored entirely, as they are often used with Source Generators. Subclasses of System.Exception are ignored, as even an empty\nException class can provide useful information by its type name alone. Subclasses of System.Attribute are ignored, as well as classes which are\nannotated with attributes. Subclasses of generic classes are ignored, as even when empty they can be used for type specialization. Subclasses of\ncertain framework types - like the PageModel class used in ASP.NET Core Razor Pages - are also ignored.\u003c/p\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Mvc.RazorPages\n\nPublic Class EmptyPageModel \u0027 Compliant - an empty PageModel can be fully functional, the VB code can be in the vbhtml file\n    Inherits PageModel\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003eInterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Empty \u0027 Noncompliant\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Interface IEmpty\n\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003ePartial classes are ignored entirely, as they are often used with Source Generators. Subclasses of System.Exception are ignored, as even an empty\nException class can provide useful information by its type name alone. Subclasses of System.Attribute are ignored, as well as classes which are\nannotated with attributes. Subclasses of generic classes are ignored, as even when empty they can be used for type specialization. Subclasses of\ncertain framework types - like the PageModel class used in ASP.NET Core Razor Pages - are also ignored.\u003c/p\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Mvc.RazorPages\n\nPublic Class EmptyPageModel \u0027 Compliant - an empty PageModel can be fully functional, the VB code can be in the vbhtml file\n    Inherits PageModel\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4275",
    "name": "Property procedures should access the expected fields",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties provide a way to enforce \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eencapsulation\u003c/a\u003e by providing\nproperty procedures that give controlled access to \u003ccode\u003ePrivate\u003c/code\u003e fields. However, in classes with multiple fields, it is not unusual that \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Copy-and-paste_programming\"\u003ecopy-and-paste\u003c/a\u003e is used to quickly create the needed properties, which can result\nin the wrong field being accessed by the property procedures.\u003c/p\u003e\n\u003cpre\u003e\nClass C\n    Private _x As Integer\n    Private _Y As Integer\n\n    Public ReadOnly Property Y As Integer\n        Get\n            Return _x \u0027 Noncompliant: The returned field should be \u0027_y\u0027\n        End Get\n    End Property\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue in any of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A get procedure does not access the field with the corresponding name. \u003c/li\u003e\n  \u003cli\u003e A set procedure does not update the field with the corresponding name. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor simple properties, it is better to use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/auto-implemented-properties\"\u003eauto-implemented\nproperties\u003c/a\u003e (VB.NET 10.0 or later).\u003c/p\u003e\n\u003cp\u003eField and property names are compared as case-insensitive. All underscore characters are ignored.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Sample\n\n    Private _x As Integer\n    Private _y As Integer\n\n    Public Property Y As Integer\n        Get\n            Return _x   \u0027 Noncompliant: field \u0027_y\u0027 is not used in the return value\n        End Get\n        Set(value As Integer)\n            _x \u003d value  \u0027 Noncompliant: field \u0027_y\u0027 is not updated\n        End Set\n    End Property\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Sample\n\n    Private _x As Integer\n    Private _y As Integer\n\n    Public Property Y As Integer\n        Get\n            Return _y\n        End Get\n        Set(value As Integer)\n            _y \u003d value\n        End Set\n    End Property\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/property-procedures\"\u003eProperty Procedures\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties provide a way to enforce \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eencapsulation\u003c/a\u003e by providing\nproperty procedures that give controlled access to \u003ccode\u003ePrivate\u003c/code\u003e fields. However, in classes with multiple fields, it is not unusual that \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Copy-and-paste_programming\"\u003ecopy-and-paste\u003c/a\u003e is used to quickly create the needed properties, which can result\nin the wrong field being accessed by the property procedures.\u003c/p\u003e\n\u003cpre\u003e\nClass C\n    Private _x As Integer\n    Private _Y As Integer\n\n    Public ReadOnly Property Y As Integer\n        Get\n            Return _x \u0027 Noncompliant: The returned field should be \u0027_y\u0027\n        End Get\n    End Property\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue in any of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A get procedure does not access the field with the corresponding name. \u003c/li\u003e\n  \u003cli\u003e A set procedure does not update the field with the corresponding name. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor simple properties, it is better to use \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/auto-implemented-properties\"\u003eauto-implemented\nproperties\u003c/a\u003e (VB.NET 10.0 or later).\u003c/p\u003e\n\u003cp\u003eField and property names are compared as case-insensitive. All underscore characters are ignored.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Sample\n\n    Private _x As Integer\n    Private _y As Integer\n\n    Public Property Y As Integer\n        Get\n            Return _x   \u0027 Noncompliant: field \u0027_y\u0027 is not used in the return value\n        End Get\n        Set(value As Integer)\n            _x \u003d value  \u0027 Noncompliant: field \u0027_y\u0027 is not updated\n        End Set\n    End Property\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Sample\n\n    Private _x As Integer\n    Private _y As Integer\n\n    Public Property Y As Integer\n        Get\n            Return _y\n        End Get\n        Set(value As Integer)\n            _y \u003d value\n        End Set\n    End Property\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e Microsoft Learn: \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/property-procedures\"\u003eProperty Procedures\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3866",
    "name": "\"IIf\" should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVisual Basic .NET offers a non-short-circuit conditional function, \u003ccode\u003eIIf()\u003c/code\u003e, which returns either its second or third parameter based on\nthe expression in the first parameter. Using it is slower than using \u003ccode\u003eIf()\u003c/code\u003e because each parameter is unconditionally evaluated. Further,\nits use can lead to runtime exceptions because \u003ccode\u003eIIf\u003c/code\u003e always evaluates all three of its arguments.\u003c/p\u003e\n\u003cp\u003eThe newer version, \u003ccode\u003eIf()\u003c/code\u003e, should be used instead because it short-circuits the evaluation of its parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As Object \u003d IIf(Date.Now.Year \u003d 1999, \"Lets party!\", \"Lets party like it is 1999!\") \u0027 Noncompliant\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As String \u003d If(Date.Now.Year \u003d 1999, \"Lets party!\", \"Lets party like it is 1999!\")\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/27ydhh0d(v\u003dvs.90).aspx\"\u003eIIf Function (MSDN)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/bb513985(v\u003dvs.90).aspx\"\u003eIf Operator (MSDN)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVisual Basic .NET offers a non-short-circuit conditional function, \u003ccode\u003eIIf()\u003c/code\u003e, which returns either its second or third parameter based on\nthe expression in the first parameter. Using it is slower than using \u003ccode\u003eIf()\u003c/code\u003e because each parameter is unconditionally evaluated. Further,\nits use can lead to runtime exceptions because \u003ccode\u003eIIf\u003c/code\u003e always evaluates all three of its arguments.\u003c/p\u003e\n\u003cp\u003eThe newer version, \u003ccode\u003eIf()\u003c/code\u003e, should be used instead because it short-circuits the evaluation of its parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As Object \u003d IIf(Date.Now.Year \u003d 1999, \"Lets party!\", \"Lets party like it is 1999!\") \u0027 Noncompliant\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As String \u003d If(Date.Now.Year \u003d 1999, \"Lets party!\", \"Lets party like it is 1999!\")\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/27ydhh0d(v\u003dvs.90).aspx\"\u003eIIf Function (MSDN)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/bb513985(v\u003dvs.90).aspx\"\u003eIf Operator (MSDN)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3869",
    "name": "\"SafeHandle.DangerousGetHandle\" should not be called",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method poses significant risks and should be used carefully. This method carries the inherent danger\nof potentially returning an invalid handle, which can result in resource leaks and security vulnerabilities. Although it is technically possible to\nutilize this method without encountering issues, doing so correctly requires a high level of expertise. Therefore, it is recommended to avoid using\nthis method altogether.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method is potentially prone to leaks and vulnerabilities due to its nature and usage. Here are a few\nreasons why:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eInvalid handles\u003c/strong\u003e: the method retrieves the raw handle value without performing any validation or safety checks. This means that\n  the method can return a handle that is no longer valid or has been closed, leading to undefined behavior or errors when attempting to use it. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eResource leaks\u003c/strong\u003e: by directly accessing the handle without the proper safeguards and cleanup provided by the\n  \u003ccode\u003eSafeHandle\u003c/code\u003e class, there is an increased risk of failing to dispose system resources correctly. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSecurity vulnerabilities\u003c/strong\u003e: when the handle is interacting with sensitive resources (e.g. file handles, process handles) using\n  \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e without proper validation can lead to security vulnerabilities that can be exploited by an attacker.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nSub Dangerous(fieldInfo As System.Reflection.FieldInfo)\n  Dim handle As SafeHandle \u003d CType(fieldInfo.GetValue(fieldInfo), SafeHandle)\n  Dim dangerousHandle As IntPtr \u003d handle.DangerousGetHandle \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle.dangerousgethandle\"\u003eSafeHandle.DangerousGetHandle\n  Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/8396923/why-is-safehandle-dangerousgethandle-dangerous\"\u003eWhy is SafeHandle.DangerousGetHandle()\n  \"Dangerous\"? - Stackoverflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method poses significant risks and should be used carefully. This method carries the inherent danger\nof potentially returning an invalid handle, which can result in resource leaks and security vulnerabilities. Although it is technically possible to\nutilize this method without encountering issues, doing so correctly requires a high level of expertise. Therefore, it is recommended to avoid using\nthis method altogether.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e method is potentially prone to leaks and vulnerabilities due to its nature and usage. Here are a few\nreasons why:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eInvalid handles\u003c/strong\u003e: the method retrieves the raw handle value without performing any validation or safety checks. This means that\n  the method can return a handle that is no longer valid or has been closed, leading to undefined behavior or errors when attempting to use it. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eResource leaks\u003c/strong\u003e: by directly accessing the handle without the proper safeguards and cleanup provided by the\n  \u003ccode\u003eSafeHandle\u003c/code\u003e class, there is an increased risk of failing to dispose system resources correctly. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eSecurity vulnerabilities\u003c/strong\u003e: when the handle is interacting with sensitive resources (e.g. file handles, process handles) using\n  \u003ccode\u003eSafeHandle.DangerousGetHandle\u003c/code\u003e without proper validation can lead to security vulnerabilities that can be exploited by an attacker.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nSub Dangerous(fieldInfo As System.Reflection.FieldInfo)\n  Dim handle As SafeHandle \u003d CType(fieldInfo.GetValue(fieldInfo), SafeHandle)\n  Dim dangerousHandle As IntPtr \u003d handle.DangerousGetHandle \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle.dangerousgethandle\"\u003eSafeHandle.DangerousGetHandle\n  Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/8396923/why-is-safehandle-dangerousgethandle-dangerous\"\u003eWhy is SafeHandle.DangerousGetHandle()\n  \"Dangerous\"? - Stackoverflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "leak",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4158",
    "name": "Empty collections should not be accessed or iterated",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a collection is empty, iterating it has no effect. Doing so anyway is likely a bug; either population was accidentally omitted, or the\niteration needs to be revised.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method()\n    Dim Values As New List(Of String)\n    Values.Remove(\"bar\")                \u0027 Noncompliant\n    If Values.Contains(\"foo\") Then      \u0027 Noncompliant\n    End If\n    For Each Value As String In Values  \u0027 Noncompliant\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method()\n    Dim Values As List(Of String) \u003d LoadValues()\n    Values.Remove(\"bar\")\n    If Values.Contains(\"foo\") Then\n    End If\n    For Each Value As String In Values\n    Next\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a collection is empty, iterating it has no effect. Doing so anyway is likely a bug; either population was accidentally omitted, or the\niteration needs to be revised.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method()\n    Dim Values As New List(Of String)\n    Values.Remove(\"bar\")                \u0027 Noncompliant\n    If Values.Contains(\"foo\") Then      \u0027 Noncompliant\n    End If\n    For Each Value As String In Values  \u0027 Noncompliant\n    Next\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method()\n    Dim Values As List(Of String) \u003d LoadValues()\n    Values.Remove(\"bar\")\n    If Values.Contains(\"foo\") Then\n    End If\n    For Each Value As String In Values\n    Next\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6575",
    "name": "Use \"TimeZoneInfo.FindSystemTimeZoneById\" without converting the timezones with \"TimezoneConverter\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eSince .NET 6 you don’t have to use the \u003ccode\u003eTimeZoneConverter\u003c/code\u003e library to manually do the conversion between IANA and Windows timezones. The\n.NET 6.0 introduced new Time Zone enhancements, one being the \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e method now accepts as\ninput both IANA and Windows time zone IDs on any operating system with installed time zone data. \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById\u003c/code\u003e will\nautomatically convert its input from IANA to Windows and vice versa if the requested time zone is not found on the system.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe method \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e can get both IANA and Windows timezones as input and automatically\nconvert one to the other if the requested time zone is not found on the system. Because one does not need to handle the conversion, the code will be\nless complex and easier to maintain.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThere’s no need to translate manually between time zones; it is enough to call \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e,\nwhere the timezone can be IANA or Windows format. Depending on the OS, the equivalent time zone will be returned (Windows Time Zones for Windows and\nIANA timezones for Linux, macOS).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nDim ianaTimeZone \u003d \"Asia/Tokyo\"\nDim windowsTimeZone \u003d TZConvert.IanaToWindows(ianaTimeZone)\nDim tokyoWindowsTimeZone As TimeZoneInfo \u003d TimeZoneInfo.FindSystemTimeZoneById(windowsTimeZone)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nDim ianaTimeZone \u003d \"Asia/Tokyo\"\nDim tokyoWindowsTimeZone As TimeZoneInfo \u003d TimeZoneInfo.FindSystemTimeZoneById(ianaTimeZone)\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid\"\u003eTimeZoneInfo.FindSystemTimeZoneById\n  documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/\"\u003eDate, Time, and Time Zone Enhancements in .NET\n  6\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/mattjohnsonpint/TimeZoneConverter\"\u003eTimeZoneConverter\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/\"\u003eWhat’s up with TimeZoneInfo on .NET 6?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.iana.org/time-zones\"\u003eIANA Time Zone Database\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view\u003dwindows-11\"\u003eWindows Time Zones\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSince .NET 6 you don’t have to use the \u003ccode\u003eTimeZoneConverter\u003c/code\u003e library to manually do the conversion between IANA and Windows timezones. The\n.NET 6.0 introduced new Time Zone enhancements, one being the \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e method now accepts as\ninput both IANA and Windows time zone IDs on any operating system with installed time zone data. \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById\u003c/code\u003e will\nautomatically convert its input from IANA to Windows and vice versa if the requested time zone is not found on the system.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe method \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e can get both IANA and Windows timezones as input and automatically\nconvert one to the other if the requested time zone is not found on the system. Because one does not need to handle the conversion, the code will be\nless complex and easier to maintain.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThere’s no need to translate manually between time zones; it is enough to call \u003ccode\u003eTimeZoneInfo.FindSystemTimeZoneById(string timezone)\u003c/code\u003e,\nwhere the timezone can be IANA or Windows format. Depending on the OS, the equivalent time zone will be returned (Windows Time Zones for Windows and\nIANA timezones for Linux, macOS).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nDim ianaTimeZone \u003d \"Asia/Tokyo\"\nDim windowsTimeZone \u003d TZConvert.IanaToWindows(ianaTimeZone)\nDim tokyoWindowsTimeZone As TimeZoneInfo \u003d TimeZoneInfo.FindSystemTimeZoneById(windowsTimeZone)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n// Assuming we are in Windows OS and we need to get the Tokyo Time Zone.\nDim ianaTimeZone \u003d \"Asia/Tokyo\"\nDim tokyoWindowsTimeZone As TimeZoneInfo \u003d TimeZoneInfo.FindSystemTimeZoneById(ianaTimeZone)\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid\"\u003eTimeZoneInfo.FindSystemTimeZoneById\n  documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/\"\u003eDate, Time, and Time Zone Enhancements in .NET\n  6\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/mattjohnsonpint/TimeZoneConverter\"\u003eTimeZoneConverter\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://codeblog.jonskeet.uk/2022/02/05/whats-up-with-timezoneinfo-on-net-6-part-1/\"\u003eWhat’s up with TimeZoneInfo on .NET 6?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.iana.org/time-zones\"\u003eIANA Time Zone Database\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view\u003dwindows-11\"\u003eWindows Time Zones\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3981",
    "name": "Collection sizes and array length comparisons should make sense",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nIf Collection.Count \u0026gt;\u003d 0 Then ... \u0027Noncompliant always true\n\nIf array.Length \u0026gt;\u003d 0 Then ... \u0027Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nIf Enumerable.Count \u0026lt; 0 Then ... \u0027Noncompliant always false\n\nDim result As Boolean \u003d Array.Length \u0026gt;\u003d 0 \u0027Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is\nalways \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nIf Collection.Count \u0026gt;\u003d 0 Then ... \u0027Noncompliant always true\n\nIf array.Length \u0026gt;\u003d 0 Then ... \u0027Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eSimilarly testing that it is less than zero will always return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nIf Enumerable.Count \u0026lt; 0 Then ... \u0027Noncompliant always false\n\nDim result As Boolean \u003d Array.Length \u0026gt;\u003d 0 \u0027Noncompliant always true\n\u003c/pre\u003e\n\u003cp\u003eFix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4277",
    "name": "\"Shared\" parts should not be created with \"new\"",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMarking a class with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e(\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e), which is\npart of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e, means that a single, shared\ninstance of the exported object will be created. Therefore it doesn’t make sense to create new instances using the constructor and it will most likely\nresult in unexpected behaviours.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a constructor of a class marked shared with a \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e is invoked.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.[Shared])\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\nPublic Class Program\n    Public Shared Sub Main()\n        Dim fooBar \u003d New FooBar() \u0027 Noncompliant\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.[Shared])\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\nPublic Class Program\n    Public Shared Sub Main()\n        Dim fooBar \u003d serviceProvider.GetService(Of IFooBar)()\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMarking a class with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e(\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e), which is\npart of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e, means that a single, shared\ninstance of the exported object will be created. Therefore it doesn’t make sense to create new instances using the constructor and it will most likely\nresult in unexpected behaviours.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a constructor of a class marked shared with a \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e is invoked.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.[Shared])\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\nPublic Class Program\n    Public Shared Sub Main()\n        Dim fooBar \u003d New FooBar() \u0027 Noncompliant\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.[Shared])\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\nPublic Class Program\n    Public Shared Sub Main()\n        Dim fooBar \u003d serviceProvider.GetService(Of IFooBar)()\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicy\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003e\u003ccode\u003eCreationPolicy.Shared\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef\"\u003eManaged Extensibility Framework\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3860",
    "name": "\"ByVal\" should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSince Visual Studio 2010 SP1, the \u003ccode\u003eByVal\u003c/code\u003e parameter modifier is implicitly applied, and therefore not required anymore. Removing it from\nyour source code will improve readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub Foo(ByVal bar As String)\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub Foo(bar As String)\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSince Visual Studio 2010 SP1, the \u003ccode\u003eByVal\u003c/code\u003e parameter modifier is implicitly applied, and therefore not required anymore. Removing it from\nyour source code will improve readability.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub Foo(ByVal bar As String)\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub Foo(bar As String)\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4036",
    "name": "Searching OS commands in PATH is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen executing an OS command and unless you specify the full path to the executable, then the locations in your application’s \u003ccode\u003ePATH\u003c/code\u003e\nenvironment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in\n\u003ccode\u003ePATH\u003c/code\u003e is a directory under his control.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The directories in the PATH environment variable may be defined by not trusted entities. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to this question.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nDim p As New Process()\np.StartInfo.FileName \u003d \"binary\" \u0027 Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eFully qualified/absolute path should be used to specify the OS command to execute.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nDim p As New Process()\np.StartInfo.FileName \u003d \"C:\\Apps\\binary.exe\" \u0027 Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/426\"\u003eCWE-426 - Untrusted Search Path\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/427\"\u003eCWE-427 - Uncontrolled Search Path Element\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S4830",
    "name": "Server certificates should be verified during SSL/TLS connections",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank’s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eIn the following example, the callback change impacts the entirety of HTTP requests made by the application.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by overriding \u003ccode\u003eServerCertificateValidationCallback\u003c/code\u003e with an empty implementation. It is highly\nrecommended to use the original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nImports System.Net\n\nPublic Sub Send()\n    ServicePointManager.ServerCertificateValidationCallback \u003d\n        Function(sender, certificate, chain, errors) True \u0027 Noncompliant\n\n    Dim request As System.Net.HttpWebRequest \u003d System.Net.HttpWebRequest.Create(New System.Uri(\"https://example.com\"))\n    request.Method \u003d System.Net.WebRequestMethods.Http.Get\n    Dim response As System.Net.HttpWebResponse \u003d request.GetResponse()\n    response.Close()\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eMobile Top 10 2016 Category M3 - Insecure\n  Communication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec\n  Verification Standard - Network Communication Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eCWE-295 - Improper Certificate Validation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that an encrypted communication is intercepted.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTransport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. The role\nof certificate validation in this process is to ensure that a system is indeed the one it claims to be, adding an extra layer of trust and\nsecurity.\u003c/p\u003e\n\u003cp\u003eWhen certificate validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eEstablishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.\u003c/p\u003e\n\u003ch4\u003eIdentity spoofing\u003c/h4\u003e\n\u003cp\u003eIf a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bank’s\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.\u003c/p\u003e\n\u003ch4\u003eLoss of data integrity\u003c/h4\u003e\n\u003cp\u003eWhen TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn the following example, the callback change impacts the entirety of HTTP requests made by the application.\u003c/p\u003e\n\u003cp\u003eThe certificate validation gets disabled by overriding \u003ccode\u003eServerCertificateValidationCallback\u003c/code\u003e with an empty implementation. It is highly\nrecommended to use the original implementation.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nImports System.Net\n\nPublic Sub Send()\n    ServicePointManager.ServerCertificateValidationCallback \u003d\n        Function(sender, certificate, chain, errors) True \u0027 Noncompliant\n\n    Dim request As System.Net.HttpWebRequest \u003d System.Net.HttpWebRequest.Create(New System.Uri(\"https://example.com\"))\n    request.Method \u003d System.Net.WebRequestMethods.Http.Get\n    Dim response As System.Net.HttpWebResponse \u003d request.GetResponse()\n    response.Close()\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAddressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.\u003c/p\u003e\n\u003cp\u003eTo avoid running into problems with invalid certificates, consider the following sections.\u003c/p\u003e\n\u003ch4\u003eUsing trusted certificates\u003c/h4\u003e\n\u003cp\u003eIf possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.\u003c/p\u003e\n\u003ch4\u003eWorking with self-signed certificates or non-standard CAs\u003c/h4\u003e\n\u003cp\u003eIn some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\"\u003eMobile Top 10 2016 Category M3 - Insecure\n  Communication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\"\u003eMobile AppSec\n  Verification Standard - Network Communication Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/295\"\u003eCWE-295 - Improper Certificate Validation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "privacy",
      "ssl"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4159",
    "name": "Classes should implement their \"ExportAttribute\" interfaces",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e,\nalso known as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e, is a programming model\nused to embed attributes within codes.\u003c/p\u003e\n\u003cp\u003eIn this model, objects are required to conform to a specific structure so that they can be used by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMEF provides a way to discover available components implicitly, via \u003cstrong\u003ecomposition\u003c/strong\u003e. A MEF component, called a \u003cstrong\u003epart\u003c/strong\u003e,\ndeclaratively specifies:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e both its dependencies, known as \u003cstrong\u003eimports\u003c/strong\u003e \u003c/li\u003e\n  \u003cli\u003e and what capabilities it makes available, known as \u003cstrong\u003eexports\u003c/strong\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute\u003c/a\u003e declares that a part \"exports\",\nor provides to the composition container, an object that fulfills a particular contract.\u003c/p\u003e\n\u003cp\u003eDuring composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.\u003c/p\u003e\n\u003cp\u003eIf the type doesn’t implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not\nfilled with the exported type) leading to unexpected behaviors/crashes.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when a class doesn’t implement or inherit the type declared in the \u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Export(GetType(ISomeType))\u0026gt;\nPublic Class SomeType  \u0027 Noncompliant: doesn\u0027t implement \u0027ISomeType\u0027.\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Export(GetType(ISomeType))\u0026gt;\nPublic Class SomeType\n    Inherits ISomeType\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e,\nalso known as \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e, is a programming model\nused to embed attributes within codes.\u003c/p\u003e\n\u003cp\u003eIn this model, objects are required to conform to a specific structure so that they can be used by the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMEF provides a way to discover available components implicitly, via \u003cstrong\u003ecomposition\u003c/strong\u003e. A MEF component, called a \u003cstrong\u003epart\u003c/strong\u003e,\ndeclaratively specifies:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e both its dependencies, known as \u003cstrong\u003eimports\u003c/strong\u003e \u003c/li\u003e\n  \u003cli\u003e and what capabilities it makes available, known as \u003cstrong\u003eexports\u003c/strong\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute\u003c/a\u003e declares that a part \"exports\",\nor provides to the composition container, an object that fulfills a particular contract.\u003c/p\u003e\n\u003cp\u003eDuring composition, parts with imports that have matching contracts will have those dependencies filled by the exported object.\u003c/p\u003e\n\u003cp\u003eIf the type doesn’t implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not\nfilled with the exported type) leading to unexpected behaviors/crashes.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when a class doesn’t implement or inherit the type declared in the \u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Export(GetType(ISomeType))\u0026gt;\nPublic Class SomeType  \u0027 Noncompliant: doesn\u0027t implement \u0027ISomeType\u0027.\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Export(GetType(ISomeType))\u0026gt;\nPublic Class SomeType\n    Inherits ISomeType\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Attribute-oriented_programming\"\u003eAttribute-oriented programming (@OP)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed Programming Model\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.composition.exportattribute\"\u003eExportAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4260",
    "name": "\"ConstructorArgument\" parameters should exist in constructors",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen creating a custom \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extension\u003c/a\u003e\nthat accepts parameters in WPF, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003e\u003ccode\u003eConstructorArgument\u003c/code\u003e\u003c/a\u003e markup\nmust be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler won’t give you any\nwarning in case there are typos.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the string argument to \u003ccode\u003eConstructorArgumentAttribute\u003c/code\u003e doesn’t match any parameter of any constructor.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System\n\nNamespace MyLibrary\n    Public Class MyExtension\n        Inherits MarkupExtension\n\n        Public Sub New()\n        End Sub\n\n        Public Sub New(ByVal value1 As Object)\n            Value1 \u003d value1\n        End Sub\n\n        \u0026lt;ConstructorArgument(\"value2\")\u0026gt; \u0027 Noncompliant\n        Public Property Value1 As Object\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System\n\nNamespace MyLibrary\n    Public Class MyExtension\n        Inherits MarkupExtension\n\n        Public Sub New()\n        End Sub\n\n        Public Sub New(ByVal value1 As Object)\n            Value1 \u003d value1\n        End Sub\n\n        \u0026lt;ConstructorArgument(\"value1\")\u0026gt;\n        Public Property Value1 As Object\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extensions and\n  WPF XAML\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.markupextension\"\u003eMarkupExtension Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003eConstructorArgumentAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen creating a custom \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extension\u003c/a\u003e\nthat accepts parameters in WPF, the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003e\u003ccode\u003eConstructorArgument\u003c/code\u003e\u003c/a\u003e markup\nmust be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler won’t give you any\nwarning in case there are typos.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the string argument to \u003ccode\u003eConstructorArgumentAttribute\u003c/code\u003e doesn’t match any parameter of any constructor.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System\n\nNamespace MyLibrary\n    Public Class MyExtension\n        Inherits MarkupExtension\n\n        Public Sub New()\n        End Sub\n\n        Public Sub New(ByVal value1 As Object)\n            Value1 \u003d value1\n        End Sub\n\n        \u0026lt;ConstructorArgument(\"value2\")\u0026gt; \u0027 Noncompliant\n        Public Property Value1 As Object\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System\n\nNamespace MyLibrary\n    Public Class MyExtension\n        Inherits MarkupExtension\n\n        Public Sub New()\n        End Sub\n\n        Public Sub New(ByVal value1 As Object)\n            Value1 \u003d value1\n        End Sub\n\n        \u0026lt;ConstructorArgument(\"value1\")\u0026gt;\n        Public Property Value1 As Object\n    End Class\nEnd Namespace\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/advanced/markup-extensions-and-wpf-xaml\"\u003eMarkup Extensions and\n  WPF XAML\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.markupextension\"\u003eMarkupExtension Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.markup.constructorargumentattribute\"\u003eConstructorArgumentAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "wpf",
      "xaml"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6562",
    "name": "Always set the \"DateTimeKind\" when creating new \"DateTime\" instances",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNot knowing the \u003ccode\u003eKind\u003c/code\u003e of the \u003ccode\u003eDateTime\u003c/code\u003e object that an application is using can lead to misunderstandings when displaying or\ncomparing them. Explicitly setting the \u003ccode\u003eKind\u003c/code\u003e property helps the application to stay consistent, and its maintainers understand what kind\nof date is being managed. To achieve this, when instantiating a new \u003ccode\u003eDateTime\u003c/code\u003e object you should always use a constructor overload that\nallows you to define the \u003ccode\u003eKind\u003c/code\u003e property.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating the \u003ccode\u003eDateTime\u003c/code\u003e object without specifying the property \u003ccode\u003eKind\u003c/code\u003e will set it to the default value of\n\u003ccode\u003eDateTimeKind.Unspecified\u003c/code\u003e. In this case, calling the method \u003ccode\u003eToUniversalTime\u003c/code\u003e will assume that \u003ccode\u003eKind\u003c/code\u003e is\n\u003ccode\u003eDateTimeKind.Local\u003c/code\u003e and calling the method \u003ccode\u003eToLocalTime\u003c/code\u003e will assume that it’s \u003ccode\u003eDateTimeKind.Utc\u003c/code\u003e. As a result, you\nmight have mismatched \u003ccode\u003eDateTime\u003c/code\u003e objects in your application.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue use a constructor overload that allows specifying the \u003ccode\u003eDateTimeKind\u003c/code\u003e when creating the \u003ccode\u003eDateTime\u003c/code\u003e\nobject.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub CreateNewTime()\n    Dim birthDate \u003d New DateTime(1994, 7, 5, 16, 23, 42)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub CreateNewTime()\n    Dim birthDate \u003d New DateTime(1994, 7, 5, 16, 23, 42, DateTimeKind.Utc)\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimekind\"\u003eDateTimeKind documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.-ctor\"\u003eDateTime documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values\"\u003eHow to round trip date and time\n  values\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\u003c/a\u003e [Member overloading] \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNot knowing the \u003ccode\u003eKind\u003c/code\u003e of the \u003ccode\u003eDateTime\u003c/code\u003e object that an application is using can lead to misunderstandings when displaying or\ncomparing them. Explicitly setting the \u003ccode\u003eKind\u003c/code\u003e property helps the application to stay consistent, and its maintainers understand what kind\nof date is being managed. To achieve this, when instantiating a new \u003ccode\u003eDateTime\u003c/code\u003e object you should always use a constructor overload that\nallows you to define the \u003ccode\u003eKind\u003c/code\u003e property.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eCreating the \u003ccode\u003eDateTime\u003c/code\u003e object without specifying the property \u003ccode\u003eKind\u003c/code\u003e will set it to the default value of\n\u003ccode\u003eDateTimeKind.Unspecified\u003c/code\u003e. In this case, calling the method \u003ccode\u003eToUniversalTime\u003c/code\u003e will assume that \u003ccode\u003eKind\u003c/code\u003e is\n\u003ccode\u003eDateTimeKind.Local\u003c/code\u003e and calling the method \u003ccode\u003eToLocalTime\u003c/code\u003e will assume that it’s \u003ccode\u003eDateTimeKind.Utc\u003c/code\u003e. As a result, you\nmight have mismatched \u003ccode\u003eDateTime\u003c/code\u003e objects in your application.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue use a constructor overload that allows specifying the \u003ccode\u003eDateTimeKind\u003c/code\u003e when creating the \u003ccode\u003eDateTime\u003c/code\u003e\nobject.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub CreateNewTime()\n    Dim birthDate \u003d New DateTime(1994, 7, 5, 16, 23, 42)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub CreateNewTime()\n    Dim birthDate \u003d New DateTime(1994, 7, 5, 16, 23, 42, DateTimeKind.Utc)\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimekind\"\u003eDateTimeKind documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.-ctor\"\u003eDateTime documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/how-to-round-trip-date-and-time-values\"\u003eHow to round trip date and time\n  values\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\"\u003ehttps://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/member-overloading\u003c/a\u003e [Member overloading] \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "localisation",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4143",
    "name": "Map values should not be replaced unconditionally",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cpre\u003e\ntowns.Item(x) \u003d \"London\"\ntowns.Item(x) \u003d \"Chicago\";  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eStoring a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".\u003c/p\u003e\n\u003cpre\u003e\ntowns.Item(x) \u003d \"London\"\ntowns.Item(x) \u003d \"Chicago\";  // Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eThis practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6563",
    "name": "Use UTC when recording DateTime instants",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eYou should avoid recording time instants with the use of property \u003ccode\u003eDateTime.Now\u003c/code\u003e. The property \u003ccode\u003eDateTime.Now\u003c/code\u003e returns the\ncurrent date and time expressed in the machine’s local time without containing any timezone-related information (for example, the offset from\nCoordinated Universal Time). Not having this information means that if you need to display this \u003ccode\u003eDateTime\u003c/code\u003e object or use it for\ncomputations in another machine placed in a different time zone, you won’t be able to reconstruct it in the second machine’s local time without\nknowing the origin’s offset. This will likely lead to confusion and potential bugs.\u003c/p\u003e\n\u003cp\u003eInstead, you should record the \u003ccode\u003eDateTime\u003c/code\u003e instants in UTC, which gives you the date and time as it is in the Coordinated Universal Time.\nUTC is a time standard for all time zones and is not subjected to Daylight Saving Time (DST).\u003c/p\u003e\n\u003cp\u003eSimilarly, the use of the \u003ccode\u003eDateTime.Today\u003c/code\u003e property should also be avoided, as it can return different date values depending on the time\nzone.\u003c/p\u003e\n\u003cp\u003eGenerally, unless the purpose is to only display the Date and Time to a user on their local machine, you should always use UTC (for example, when\nstoring dates in a datebase or using them for calculations).\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou can end up with \u003ccode\u003eDateTime\u003c/code\u003e instants that have no meaning for anyone except the machine they were recorded on. Using UTC gives an\nunambiguous representation of an instant, and this UTC instant can be transformed into any equivalent local time. This operation isn’t reversible as\nsome local times are ambiguous and can be matched to more than one UTC instant (for example, due to daylight savings).\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Now\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.Now\u003c/code\u003e (as it contains offset information) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.UtcNow\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Today\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow.Date\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateOnly.FromDateTime(DateTime.UtcNow)\u003c/code\u003e (.NET 6.0+) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub LogDateTime()\n    Using streamWriter \u003d New StreamWriter(\"logs.txt\", True)\n    End Using\n\n    streamWriter.WriteLine($\"DateTime:{DateTime.Now.ToString(\"o\")}\") \u0027 This log won\u0027t have any meaning if it\u0027s reconstructed in a machine in a different timezone.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub LogDateTime()\n    Using streamWriter \u003d New StreamWriter(\"logs.txt\", True)\n    End Using\n\n    streamWriter.WriteLine($\"DateTime:{DateTime.UtcNow.ToString(\"o\")}\")\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.utcnow\"\u003eDateTime.UtcNow documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.today\"\u003eDateTime.Today documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/resolve-ambiguous-times\"\u003eAmbiguous times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.timeanddate.com/time/zone/timezone/utc\"\u003eUTC standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/2580518\"\u003eAmbiguous times by John Skeet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eYou should avoid recording time instants with the use of property \u003ccode\u003eDateTime.Now\u003c/code\u003e. The property \u003ccode\u003eDateTime.Now\u003c/code\u003e returns the\ncurrent date and time expressed in the machine’s local time without containing any timezone-related information (for example, the offset from\nCoordinated Universal Time). Not having this information means that if you need to display this \u003ccode\u003eDateTime\u003c/code\u003e object or use it for\ncomputations in another machine placed in a different time zone, you won’t be able to reconstruct it in the second machine’s local time without\nknowing the origin’s offset. This will likely lead to confusion and potential bugs.\u003c/p\u003e\n\u003cp\u003eInstead, you should record the \u003ccode\u003eDateTime\u003c/code\u003e instants in UTC, which gives you the date and time as it is in the Coordinated Universal Time.\nUTC is a time standard for all time zones and is not subjected to Daylight Saving Time (DST).\u003c/p\u003e\n\u003cp\u003eSimilarly, the use of the \u003ccode\u003eDateTime.Today\u003c/code\u003e property should also be avoided, as it can return different date values depending on the time\nzone.\u003c/p\u003e\n\u003cp\u003eGenerally, unless the purpose is to only display the Date and Time to a user on their local machine, you should always use UTC (for example, when\nstoring dates in a datebase or using them for calculations).\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou can end up with \u003ccode\u003eDateTime\u003c/code\u003e instants that have no meaning for anyone except the machine they were recorded on. Using UTC gives an\nunambiguous representation of an instant, and this UTC instant can be transformed into any equivalent local time. This operation isn’t reversible as\nsome local times are ambiguous and can be matched to more than one UTC instant (for example, due to daylight savings).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of \u003ccode\u003eDateTime.Now\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.Now\u003c/code\u003e (as it contains offset information) \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateTimeOffSet.UtcNow\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInstead of \u003ccode\u003eDateTime.Today\u003c/code\u003e use any of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eDateTime.UtcNow.Date\u003c/code\u003e, \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDateOnly.FromDateTime(DateTime.UtcNow)\u003c/code\u003e (.NET 6.0+) \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub LogDateTime()\n    Using streamWriter \u003d New StreamWriter(\"logs.txt\", True)\n    End Using\n\n    streamWriter.WriteLine($\"DateTime:{DateTime.Now.ToString(\"o\")}\") \u0027 This log won\u0027t have any meaning if it\u0027s reconstructed in a machine in a different timezone.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub LogDateTime()\n    Using streamWriter \u003d New StreamWriter(\"logs.txt\", True)\n    End Using\n\n    streamWriter.WriteLine($\"DateTime:{DateTime.UtcNow.ToString(\"o\")}\")\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.utcnow\"\u003eDateTime.UtcNow documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.today\"\u003eDateTime.Today documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/resolve-ambiguous-times\"\u003eAmbiguous times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.timeanddate.com/time/zone/timezone/utc\"\u003eUTC standard\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/a/2580518\"\u003eAmbiguous times by John Skeet\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6561",
    "name": "Avoid using \"DateTime.Now\" for benchmarking or timing operations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThe rule targets the use of \u003ccode\u003eDateTime.Now\u003c/code\u003e call followed by some arithmetic operation.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eDateTime.Now\u003c/code\u003e calls within a subtraction operation to measure elapsed time is not recommended. This property is subject to\nchanges such as daylight savings transitions, which can invalidate the calculation if the change occurs during the benchmark session, or when updating\na timer. Moreover, \u003ccode\u003eDateTime.Now\u003c/code\u003e is dependent on the system clock, which may have low resolution on older systems (as low as 15\nmilliseconds).\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eIf the purpose is to benchmark something then, instead of the \u003ccode\u003eDateTime.Now\u003c/code\u003e property, it’s recommended to use \u003ccode\u003eStopwatch\u003c/code\u003e,\nwhich is not affected by changes in time such as daylight savings (DST) and automatically checks for the existence of high-precision timers. As a\nbonus, the \u003ccode\u003eStopWatch\u003c/code\u003e class is also lightweight and computationally faster than \u003ccode\u003eDateTime\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim start \u003d DateTime.Now \u0027 First call, on March 26th 2:59 am\n\u0027 Method to be benchmarked\n\nConsole.WriteLine($\"{CInt((DateTime.Now - start).TotalMilliseconds)} ms\") \u0027 Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there\u0027s a shift to summer time\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim stopWatch \u003d Stopwatch.StartNew() \u0027 Compliant\n\u0027 Method to be benchmarked\nstopWatch.Stop()\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\")\n\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, the goal is to refresh a timer prefer using the \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e property, which guarantees reliable results\nwhen doing arithmetic operations during DST transitions.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nIf (Date.Now - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval Then\n    lastRefresh \u003d Date.Now\n    \u0027 Refresh\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nIf (Date.UtcNow - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval Then\n    lastRefresh \u003d Date.UtcNow\n    \u0027 Refresh\nEnd If\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime?#datetime-resolution\"\u003eDateTime resolution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch?\"\u003eStopwatch class documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThe rule targets the use of \u003ccode\u003eDateTime.Now\u003c/code\u003e call followed by some arithmetic operation.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eDateTime.Now\u003c/code\u003e calls within a subtraction operation to measure elapsed time is not recommended. This property is subject to\nchanges such as daylight savings transitions, which can invalidate the calculation if the change occurs during the benchmark session, or when updating\na timer. Moreover, \u003ccode\u003eDateTime.Now\u003c/code\u003e is dependent on the system clock, which may have low resolution on older systems (as low as 15\nmilliseconds).\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf the purpose is to benchmark something then, instead of the \u003ccode\u003eDateTime.Now\u003c/code\u003e property, it’s recommended to use \u003ccode\u003eStopwatch\u003c/code\u003e,\nwhich is not affected by changes in time such as daylight savings (DST) and automatically checks for the existence of high-precision timers. As a\nbonus, the \u003ccode\u003eStopWatch\u003c/code\u003e class is also lightweight and computationally faster than \u003ccode\u003eDateTime\u003c/code\u003e.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim start \u003d DateTime.Now \u0027 First call, on March 26th 2:59 am\n\u0027 Method to be benchmarked\n\nConsole.WriteLine($\"{CInt((DateTime.Now - start).TotalMilliseconds)} ms\") \u0027 Second call happens 2 minutes later but `Now` is March 26th, 4:01 am as there\u0027s a shift to summer time\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim stopWatch \u003d Stopwatch.StartNew() \u0027 Compliant\n\u0027 Method to be benchmarked\nstopWatch.Stop()\n\nConsole.WriteLine($\"{stopWatch.ElapsedMilliseconds} ms\")\n\u003c/pre\u003e\n\u003cp\u003eIf, on the other hand, the goal is to refresh a timer prefer using the \u003ccode\u003eDateTime.UtcNow\u003c/code\u003e property, which guarantees reliable results\nwhen doing arithmetic operations during DST transitions.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nIf (Date.Now - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval Then\n    lastRefresh \u003d Date.Now\n    \u0027 Refresh\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nIf (Date.UtcNow - lastRefresh).TotalMilliseconds \u0026gt; MinRefreshInterval Then\n    lastRefresh \u003d Date.UtcNow\n    \u0027 Refresh\nEnd If\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime?#datetime-resolution\"\u003eDateTime resolution\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.now\"\u003eDateTime.Now\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch?\"\u003eStopwatch class documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6566",
    "name": "Use \"DateTimeOffset\" instead of \"DateTime\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule recommends using \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e for projects targeting .NET Framework 2.0 or later.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eYou should use \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e as it provides all the information that the \u003ccode\u003eDateTime\u003c/code\u003e\nstruct has, and additionally, the offset from Coordinated Universal Time (UTC). This way you can avoid potential problems created by the lack of\ntimezone awareness (see the \"Pitfalls\" section below for more information).\u003c/p\u003e\n\u003cp\u003eHowever, it’s important to note that although \u003ccode\u003eDateTimeOffset\u003c/code\u003e contains more information than \u003ccode\u003eDateTime\u003c/code\u003e by storing the\noffset to UTC, it isn’t tied to a specific time zone. This information must be stored separately to have a full picture of the moment in time with the\nuse of \u003ccode\u003eTimeZoneInfo\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIn most cases, you can directly replace \u003ccode\u003eDateTime\u003c/code\u003e with \u003ccode\u003eDateTimeOffset\u003c/code\u003e. When hardcoding dates with local kind, remember\nthat the offset is timezone dependent, so it should be set according to which timezone that data represents. For more information, refer to\n\u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e documentation from Microsoft (see the \"Resources\" section below).\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim myDate As DateTime \u003d New DateTime(2008, 6, 19, 7, 0, 0, DateTimeKind.Local) \u0027 Noncompliant\n\nDim now \u003d DateTime.Now \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim myDate As DateTimeOffset \u003d New DateTimeOffset(2008, 6, 19, 7, 0, 0, TimeSpan.FromHours(-7)) \u0027 Compliant\n\nDim now \u003d DateTimeOffset.Now \u0027 Compliant\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eCommon \u003ccode\u003eDateTime\u003c/code\u003e pitfalls include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eLocal\u003c/code\u003e consider the time offset of the machine where the program is running. Not\n  storing the offset from UTC separately can result in meaningless data when retrieved from a different location. \u003c/li\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eUnknown\u003c/code\u003e, calling \u003ccode\u003eToUniversalTime()\u003c/code\u003e presumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is local and converts to UTC, if you call the method \u003ccode\u003eToLocalTime()\u003c/code\u003e, it assumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is UTC and converts it to local. \u003c/li\u003e\n  \u003cli\u003e when comparing \u003ccode\u003eDateTimes\u003c/code\u003e objects, the user must ensure they are within the same time zone. \u003ccode\u003eDateTime\u003c/code\u003e doesn’t consider\n  UTC/Local when comparing; it only cares about the number of \u003ccode\u003eTicks\u003c/code\u003e on the objects. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset?redirectedfrom\u003dMSDN\"\u003eConverting\n  between DateTime and DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime\"\u003eChoose between DateTime, DateOnly,\n  DateTimeOffset, TimeSpan, TimeOnly, and TimeZoneInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations\"\u003ePerforming arithmetic operations with\n  dates and times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo\"\u003eTimeZoneInfo documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule recommends using \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e for projects targeting .NET Framework 2.0 or later.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eYou should use \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of \u003ccode\u003eDateTime\u003c/code\u003e as it provides all the information that the \u003ccode\u003eDateTime\u003c/code\u003e\nstruct has, and additionally, the offset from Coordinated Universal Time (UTC). This way you can avoid potential problems created by the lack of\ntimezone awareness (see the \"Pitfalls\" section below for more information).\u003c/p\u003e\n\u003cp\u003eHowever, it’s important to note that although \u003ccode\u003eDateTimeOffset\u003c/code\u003e contains more information than \u003ccode\u003eDateTime\u003c/code\u003e by storing the\noffset to UTC, it isn’t tied to a specific time zone. This information must be stored separately to have a full picture of the moment in time with the\nuse of \u003ccode\u003eTimeZoneInfo\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIn most cases, you can directly replace \u003ccode\u003eDateTime\u003c/code\u003e with \u003ccode\u003eDateTimeOffset\u003c/code\u003e. When hardcoding dates with local kind, remember\nthat the offset is timezone dependent, so it should be set according to which timezone that data represents. For more information, refer to\n\u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e documentation from Microsoft (see the \"Resources\" section below).\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim myDate As DateTime \u003d New DateTime(2008, 6, 19, 7, 0, 0, DateTimeKind.Local) \u0027 Noncompliant\n\nDim now \u003d DateTime.Now \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim myDate As DateTimeOffset \u003d New DateTimeOffset(2008, 6, 19, 7, 0, 0, TimeSpan.FromHours(-7)) \u0027 Compliant\n\nDim now \u003d DateTimeOffset.Now \u0027 Compliant\n\u003c/pre\u003e\n\u003ch3\u003ePitfalls\u003c/h3\u003e\n\u003cp\u003eCommon \u003ccode\u003eDateTime\u003c/code\u003e pitfalls include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eLocal\u003c/code\u003e consider the time offset of the machine where the program is running. Not\n  storing the offset from UTC separately can result in meaningless data when retrieved from a different location. \u003c/li\u003e\n  \u003cli\u003e when working with \u003ccode\u003eDateTime\u003c/code\u003e of kind \u003ccode\u003eUnknown\u003c/code\u003e, calling \u003ccode\u003eToUniversalTime()\u003c/code\u003e presumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is local and converts to UTC, if you call the method \u003ccode\u003eToLocalTime()\u003c/code\u003e, it assumes the\n  \u003ccode\u003eDateTime.Kind\u003c/code\u003e is UTC and converts it to local. \u003c/li\u003e\n  \u003cli\u003e when comparing \u003ccode\u003eDateTimes\u003c/code\u003e objects, the user must ensure they are within the same time zone. \u003ccode\u003eDateTime\u003c/code\u003e doesn’t consider\n  UTC/Local when comparing; it only cares about the number of \u003ccode\u003eTicks\u003c/code\u003e on the objects. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/converting-between-datetime-and-offset?redirectedfrom\u003dMSDN\"\u003eConverting\n  between DateTime and DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime\"\u003eChoose between DateTime, DateOnly,\n  DateTimeOffset, TimeSpan, TimeOnly, and TimeZoneInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/datetime/performing-arithmetic-operations\"\u003ePerforming arithmetic operations with\n  dates and times\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo\"\u003eTimeZoneInfo documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4144",
    "name": "Methods should not have identical implementations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Const CODE As String \u003d \"bounteous\"\nPrivate callCount As Integer \u003d 0\n\nPublic Function GetCode() As String\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String \u0027 Noncompliant: duplicates GetCode\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Const CODE As String \u003d \"bounteous\"\nPrivate callCount As Integer \u003d 0\n\nPublic Function GetCode() As String\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String \u0027 Intent is clear\n  Return GetCode()\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEmpty methods, methods with only one line of code and methods with the same name (overload) are ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTwo methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Const CODE As String \u003d \"bounteous\"\nPrivate callCount As Integer \u003d 0\n\nPublic Function GetCode() As String\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String \u0027 Noncompliant: duplicates GetCode\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eIf the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Const CODE As String \u003d \"bounteous\"\nPrivate callCount As Integer \u003d 0\n\nPublic Function GetCode() As String\n  callCount \u003d callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String \u0027 Intent is clear\n  Return GetCode()\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eEmpty methods, methods with only one line of code and methods with the same name (overload) are ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "confusing",
      "duplicate",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2761",
    "name": "\u0027Not\u0027 boolean operator should not be repeated",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe repetition of the \u003ccode\u003eNot\u003c/code\u003e operator is usually a typo. The second operator invalidates the first one:\u003c/p\u003e\n\u003cpre\u003e\nDim b As Boolean \u003d False\nDim c As Boolean \u003d Not Not b \u0027Noncompliant: equivalent to \"b\"\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe repetition of the \u003ccode\u003eNot\u003c/code\u003e operator is usually a typo. The second operator invalidates the first one:\u003c/p\u003e\n\u003cpre\u003e\nDim b As Boolean \u003d False\nDim c As Boolean \u003d Not Not b \u0027Noncompliant: equivalent to \"b\"\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4025",
    "name": "Child class fields should not differ from parent class fields only by capitalization",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving a field in a child class with a name that differs from a parent class\u0027 field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Protected Plantingseason As String  \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Protected WhenToPlant As String\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    \u0027 Field removed, parent field will be used instead\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003eShared\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003ePrivate\u003c/code\u003e parent\nclass fields and fields explicitly declared as \u003ccode\u003eShadows\u003c/code\u003e, but in all other such cases, the child class field should be renamed.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a field in a child class with a name that differs from a parent class\u0027 field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Protected Plantingseason As String  \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Protected WhenToPlant As String\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected PlantingSeason As String\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    \u0027 Field removed, parent field will be used instead\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003eShared\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003ePrivate\u003c/code\u003e parent\nclass fields and fields explicitly declared as \u003ccode\u003eShadows\u003c/code\u003e, but in all other such cases, the child class field should be renamed.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6444",
    "name": "Not specifying a timeout for regular expressions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNot specifying a timeout for regular expressions can lead to a Denial-of-Service attack. Pass a timeout when using\n\u003ccode\u003eSystem.Text.RegularExpressions\u003c/code\u003e to process untrusted input because a malicious user might craft a value for which the evaluation lasts\nexcessively long.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the input passed to the regular expression is untrusted. \u003c/li\u003e\n  \u003cli\u003e the regular expression contains patterns vulnerable to \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003ecatastrophic\n  backtracking\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPublic Sub RegexPattern(Input As String)\n    Dim EmailPattern As New Regex(\".+@.+\", RegexOptions.None)\n    Dim IsNumber as Boolean \u003d Regex.IsMatch(Input, \"[0-9]+\")\n    Dim IsLetterA as Boolean \u003d Regex.IsMatch(Input, \"(a+)+\")\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e It is recommended to specify a \u003ca\n  href\u003d\"https://learn.microsoft.com/dotnet/standard/base-types/best-practices#use-time-out-values\"\u003e\u003ccode\u003ematchTimeout\u003c/code\u003e\u003c/a\u003e when executing a\n  regular expression. \u003c/li\u003e\n  \u003cli\u003e Make sure regular expressions are not vulnerable to Denial-of-Service attacks by reviewing the patterns. \u003c/li\u003e\n  \u003cli\u003e Consider using a non-backtracking algorithm by specifying \u003ca\n  href\u003d\"https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions?view\u003dnet-7.0\"\u003e\u003ccode\u003eRegexOptions.NonBacktracking\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPublic Sub RegexPattern(Input As String)\n    Dim EmailPattern As New Regex(\".+@.+\", RegexOptions.None, TimeSpan.FromMilliseconds(100))\n    Dim IsNumber as Boolean \u003d Regex.IsMatch(Input, \"[0-9]+\", RegexOptions.None, TimeSpan.FromMilliseconds(100))\n    Dim IsLetterA As Boolean \u003d Regex.IsMatch(Input, \"(a+)+\", RegexOptions.NonBacktracking) \u0027.Net 7 And above\n    AppDomain.CurrentDomain.SetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\", TimeSpan.FromMilliseconds(100)) \u0027process-wide setting\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eCWE-400 - Uncontrolled Resource Consumption\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1333\"\u003eCWE-1333 - Inefficient Regular Expression Complexity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003eregular-expressions.info\u003c/a\u003e - Runaway Regular Expressions: Catastrophic\n  Backtracking \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003eowasp.org\u003c/a\u003e - Regular expression Denial of\n  Service - ReDoS \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1333\"\u003eCWE-1333 - Inefficient Regular Expression Complexity\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/standard/base-types/best-practices\"\u003edocs.microsoft.com\u003c/a\u003e - Best practices for regular expressions\n  in .NET \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003edocs.microsoft.com\u003c/a\u003e - Backtracking in\n  Regular Expressions \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/#backtracking-and-regexoptions-nonbacktracking\"\u003edevblogs.microsoft.com\u003c/a\u003e - Regular Expression Improvements in .NET 7: Backtracking (and RegexOptions.NonBacktracking) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.regex.matchtimeout\"\u003edocs.microsoft.com\u003c/a\u003e - Regex.MatchTimeout\n  Property \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions?view\u003dnet-7.0\"\u003edocs.microsoft.com\u003c/a\u003e - RegexOptions\n  Enum (NonBacktracking option) \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "vbnet:S1313",
    "name": "Using hardcoded IP addresses is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2006-5901\"\u003eCVE-2006-5901\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2005-3725\"\u003eCVE-2005-3725\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eToday’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. \u003c/li\u003e\n  \u003cli\u003e It misleads to use the same address in every environment (dev, sys, qa, prod). \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLast but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported for the following cases because they are not considered sensitive:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) \u003c/li\u003e\n  \u003cli\u003e Broadcast address 255.255.255.255 \u003c/li\u003e\n  \u003cli\u003e Non-routable address 0.0.0.0 \u003c/li\u003e\n  \u003cli\u003e Strings of the form \u003ccode\u003e2.5.\u0026lt;number\u0026gt;.\u0026lt;number\u0026gt;\u003c/code\u003e as they \u003ca href\u003d\"http://www.oid-info.com/introduction.htm\"\u003eoften match\n  Object Identifiers\u003c/a\u003e (OID) \u003c/li\u003e\n  \u003cli\u003e Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by \u003ca\n  href\u003d\"https://datatracker.ietf.org/doc/html/rfc5737\"\u003eRFC 5737\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Addresses in the range 2001:db8::/32, reserved for documentation purposes by \u003ca href\u003d\"https://datatracker.ietf.org/doc/html/rfc3849\"\u003eRFC\n  3849\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe disclosed IP address is sensitive, e.g.:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Can give information to an attacker about the network topology. \u003c/li\u003e\n  \u003cli\u003e It’s a personal (assigned to an identifiable person) IP address. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of these questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nDim ip \u003d \"192.168.12.42\" \u0027 Sensitive\nDim address \u003d IPAddress.Parse(ip)\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDon’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nDim ip \u003d ConfigurationManager.AppSettings(\"myapplication.ip\") \u0027 Compliant\nDim address \u003d IPAddress.Parse(ip)\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S6354",
    "name": "Use a testable date/time provider",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "TESTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOne of the principles of a unit test is that it must have full control of the system under test. This is problematic when production code includes\ncalls to static methods, which cannot be changed or controlled. Date/time functions are usually provided by system libraries as static methods.\u003c/p\u003e\n\u003cp\u003eThis can be improved by wrapping the system calls in an object or service that can be controlled inside the unit test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Function HelloTime() As String\n        Return $\"Hello at {DateTime.UtcNow}\"\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThere are different approaches to solve this problem. One of them is suggested below. There are also open source libraries (such as NodaTime) which\nalready implement an \u003ccode\u003eIClock\u003c/code\u003e interface and a \u003ccode\u003eFakeClock\u003c/code\u003e testing class.\u003c/p\u003e\n\u003cpre\u003e\nPublic Interface IClock\n    Function UtcNow() As Date\nEnd Interface\n\nPublic Class Foo\n    Public Function HelloTime(clock As IClock) As String\n        Return $\"Hello at {clock.UtcNow()}\"\n    End Function\nEnd Class\n\nPublic Class FooTest\n    Public Class TestClock\n        Implements IClock\n        \u0027 implement\n    End Class\n\n    \u0026lt;Fact\u0026gt;\n    Public Sub HelloTime_Gives_CorrectTime()\n        Dim dateTime \u003d New DateTime(2017, 06, 11)\n        Assert.Equal((New Foo()).HelloTime(New TestClock(dateTime)), $\"Hello at {dateTime}\")\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eAnother possible solution is using an adaptable module, ideally supports an IDisposable method, that not only adjusts the time behaviour for the\ncurrent thread only, but also for scope of the using.\u003c/p\u003e\n\u003cpre\u003e\nPublic Module Clock\n    Public Function UtcNow() As Date\n    End Function\n\n    Public Function SetTimeForCurrentThread(time As Func(Of Date)) As IDisposable\n    End Function\nEnd Module\n\nPublic Class Foo\n    Public Function HelloTime() As String\n        Return $\"Hello at {Clock.UtcNow()}\"\n    End Function\nEnd Class\n\nPublic Class FooTest\n    \u0026lt;Fact\u0026gt;\n    Public Sub HelloTime_Gives_CorrectTime()\n        Dim dateTime \u003d New DateTime(2017, 06, 11)\n\n        Using SetTimeForCurrentThread(Function() dateTime)\n            Assert.Equal((New Foo()).HelloTime(), $\"Hello at {dateTime}\")\n        End Using\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://nodatime.org/3.0.x/api/NodaTime.Testing.html\"\u003eNodaTime testing\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOne of the principles of a unit test is that it must have full control of the system under test. This is problematic when production code includes\ncalls to static methods, which cannot be changed or controlled. Date/time functions are usually provided by system libraries as static methods.\u003c/p\u003e\n\u003cp\u003eThis can be improved by wrapping the system calls in an object or service that can be controlled inside the unit test.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Function HelloTime() As String\n        Return $\"Hello at {DateTime.UtcNow}\"\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cp\u003eThere are different approaches to solve this problem. One of them is suggested below. There are also open source libraries (such as NodaTime) which\nalready implement an \u003ccode\u003eIClock\u003c/code\u003e interface and a \u003ccode\u003eFakeClock\u003c/code\u003e testing class.\u003c/p\u003e\n\u003cpre\u003e\nPublic Interface IClock\n    Function UtcNow() As Date\nEnd Interface\n\nPublic Class Foo\n    Public Function HelloTime(clock As IClock) As String\n        Return $\"Hello at {clock.UtcNow()}\"\n    End Function\nEnd Class\n\nPublic Class FooTest\n    Public Class TestClock\n        Implements IClock\n        \u0027 implement\n    End Class\n\n    \u0026lt;Fact\u0026gt;\n    Public Sub HelloTime_Gives_CorrectTime()\n        Dim dateTime \u003d New DateTime(2017, 06, 11)\n        Assert.Equal((New Foo()).HelloTime(New TestClock(dateTime)), $\"Hello at {dateTime}\")\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eAnother possible solution is using an adaptable module, ideally supports an IDisposable method, that not only adjusts the time behaviour for the\ncurrent thread only, but also for scope of the using.\u003c/p\u003e\n\u003cpre\u003e\nPublic Module Clock\n    Public Function UtcNow() As Date\n    End Function\n\n    Public Function SetTimeForCurrentThread(time As Func(Of Date)) As IDisposable\n    End Function\nEnd Module\n\nPublic Class Foo\n    Public Function HelloTime() As String\n        Return $\"Hello at {Clock.UtcNow()}\"\n    End Function\nEnd Class\n\nPublic Class FooTest\n    \u0026lt;Fact\u0026gt;\n    Public Sub HelloTime_Gives_CorrectTime()\n        Dim dateTime \u003d New DateTime(2017, 06, 11)\n\n        Using SetTimeForCurrentThread(Function() dateTime)\n            Assert.Equal((New Foo()).HelloTime(), $\"Hello at {dateTime}\")\n        End Using\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://nodatime.org/3.0.x/api/NodaTime.Testing.html\"\u003eNodaTime testing\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1226",
    "name": "Method parameters and caught exceptions should not be reassigned",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as \u003ccode\u003ereadonly\u003c/code\u003e then at least read before reassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        a \u003d 42                  \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        Dim tmp \u003d a\n        tmp \u003d 42\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eByRef\u003c/code\u003e parameters are ignored.\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByRef a As Integer)\n        a \u003d 42                  \u0027 Ignored; it is a ByRef parameter\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhile it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as \u003ccode\u003ereadonly\u003c/code\u003e then at least read before reassignment.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        a \u003d 42                  \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        Dim tmp \u003d a\n        tmp \u003d 42\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eByRef\u003c/code\u003e parameters are ignored.\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Foo(ByRef a As Integer)\n        a \u003d 42                  \u0027 Ignored; it is a ByRef parameter\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3889",
    "name": "\"Thread.Resume\" and \"Thread.Suspend\" should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eThread.Suspend\u003c/code\u003e and \u003ccode\u003eThread.Resume\u003c/code\u003e can give unpredictable results, and both methods have been deprecated. Indeed, if\n\u003ccode\u003eThread.Suspend\u003c/code\u003e is not used very carefully, a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e can be suspended while\nholding a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e, thus leading to a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlock\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are other synchronization mechanisms that are safer and should be used instead, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMonitor\u003c/code\u003e provides a mechanism that synchronizes access to objects. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eMutex\u003c/code\u003e provides a mechanism that synchronizes interprocess access to a protected resource. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSemaphore\u003c/code\u003e provides a mechanism that allows limiting the number of threads that have access to a protected resources concurrently.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eEvents\u003c/code\u003e enable a class to notify others when something of interest occurs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx\"\u003eThread.Resume Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v\u003dvs.110).aspx\"\u003eThread.Suspend Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor?view\u003dnet-7.0\"\u003eMonitor Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex?view\u003dnet-7.0\"\u003eMutex Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view\u003dnet-7.0\"\u003eSemaphore Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents Programming Guide\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003eSyncLock Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eThread.Suspend\u003c/code\u003e and \u003ccode\u003eThread.Resume\u003c/code\u003e can give unpredictable results, and both methods have been deprecated. Indeed, if\n\u003ccode\u003eThread.Suspend\u003c/code\u003e is not used very carefully, a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e can be suspended while\nholding a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e, thus leading to a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlock\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThere are other synchronization mechanisms that are safer and should be used instead, such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eMonitor\u003c/code\u003e provides a mechanism that synchronizes access to objects. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eMutex\u003c/code\u003e provides a mechanism that synchronizes interprocess access to a protected resource. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSemaphore\u003c/code\u003e provides a mechanism that allows limiting the number of threads that have access to a protected resources concurrently.\n  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eEvents\u003c/code\u003e enable a class to notify others when something of interest occurs. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx\"\u003eThread.Resume Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v\u003dvs.110).aspx\"\u003eThread.Suspend Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor?view\u003dnet-7.0\"\u003eMonitor Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex?view\u003dnet-7.0\"\u003eMutex Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.semaphore?view\u003dnet-7.0\"\u003eSemaphore Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\"\u003eEvents Programming Guide\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003eSyncLock Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "multi-threading",
      "unpredictable"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2437",
    "name": "Unnecessary bit operations should not be performed",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCertain \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003ebitwise\noperations\u003c/a\u003e are not needed and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003eAnd -1\u003c/code\u003e with any value always results in the original value.\u003c/p\u003e\n\u003cp\u003eThat is because the binary representation of \u003ccode\u003e-1\u003c/code\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003enumeric data type\u003c/a\u003e\nsupporting negative numbers, such as \u003ccode\u003eInteger\u003c/code\u003e or \u003ccode\u003eLong\u003c/code\u003e, is based on \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003etwo’s complement\u003c/a\u003e and made of all 1s: \u003ccode\u003e\u0026amp;B111…​111\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePerforming \u003ccode\u003eAnd\u003c/code\u003e between a value and \u003ccode\u003e\u0026amp;B111…​111\u003c/code\u003e means applying the \u003ccode\u003eAnd\u003c/code\u003e operator to each bit of the value\nand the bit \u003ccode\u003e1\u003c/code\u003e, resulting in a value equal to the provided one, bit by bit.\u003c/p\u003e\n\u003cpre\u003e\nanyValue And -1 \u0027 Noncompliant\nanyValue        \u0027 Compliant\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eanyValue Or 0\u003c/code\u003e always results in \u003ccode\u003eanyValue\u003c/code\u003e, because the binary representation of \u003ccode\u003e0\u003c/code\u003e is always\n\u003ccode\u003e\u0026amp;B000…​000\u003c/code\u003e and the \u003ccode\u003eOr\u003c/code\u003e operator returns its first input when the second is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue Or 0 \u0027 Noncompliant\nanyValue      \u0027 Compliant\n\u003c/pre\u003e\n\u003cp\u003eThe same applies to \u003ccode\u003eanyValue Xor 0\u003c/code\u003e: the \u003ccode\u003eXor\u003c/code\u003e operator returns \u003ccode\u003e1\u003c/code\u003e when its two input bits are different\n(\u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e) and returns \u003ccode\u003e0\u003c/code\u003e when its two input bits are the same (both\n\u003ccode\u003e0\u003c/code\u003e or both \u003ccode\u003e1\u003c/code\u003e). When \u003ccode\u003eXor\u003c/code\u003e is applied with \u003ccode\u003e0\u003c/code\u003e, the result would be \u003ccode\u003e1\u003c/code\u003e if the other input is\n\u003ccode\u003e1\u003c/code\u003e, because the two input bits are different, and \u003ccode\u003e0\u003c/code\u003e if the other input bit is \u003ccode\u003e0\u003c/code\u003e, because the two input are the\nsame. That results in returning \u003ccode\u003eanyValue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue Xor 0 \u0027 Noncompliant\nanyValue       \u0027 Compliant\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise operations (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/and-operator\"\u003eAnd Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/or-operator\"\u003eOr Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/xor-operator\"\u003eXor Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eIntegral numeric types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003eNumeric Data\n  Types (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003eTwo’s complement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/12764670/are-there-any-bitwise-operator-laws\"\u003eStack Overflow - Are there any Bitwise Operator\n  Laws?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCertain \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003ebitwise\noperations\u003c/a\u003e are not needed and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003eAnd -1\u003c/code\u003e with any value always results in the original value.\u003c/p\u003e\n\u003cp\u003eThat is because the binary representation of \u003ccode\u003e-1\u003c/code\u003e on a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003enumeric data type\u003c/a\u003e\nsupporting negative numbers, such as \u003ccode\u003eInteger\u003c/code\u003e or \u003ccode\u003eLong\u003c/code\u003e, is based on \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003etwo’s complement\u003c/a\u003e and made of all 1s: \u003ccode\u003e\u0026amp;B111…​111\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePerforming \u003ccode\u003eAnd\u003c/code\u003e between a value and \u003ccode\u003e\u0026amp;B111…​111\u003c/code\u003e means applying the \u003ccode\u003eAnd\u003c/code\u003e operator to each bit of the value\nand the bit \u003ccode\u003e1\u003c/code\u003e, resulting in a value equal to the provided one, bit by bit.\u003c/p\u003e\n\u003cpre\u003e\nanyValue And -1 \u0027 Noncompliant\nanyValue        \u0027 Compliant\n\u003c/pre\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eanyValue Or 0\u003c/code\u003e always results in \u003ccode\u003eanyValue\u003c/code\u003e, because the binary representation of \u003ccode\u003e0\u003c/code\u003e is always\n\u003ccode\u003e\u0026amp;B000…​000\u003c/code\u003e and the \u003ccode\u003eOr\u003c/code\u003e operator returns its first input when the second is \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue Or 0 \u0027 Noncompliant\nanyValue      \u0027 Compliant\n\u003c/pre\u003e\n\u003cp\u003eThe same applies to \u003ccode\u003eanyValue Xor 0\u003c/code\u003e: the \u003ccode\u003eXor\u003c/code\u003e operator returns \u003ccode\u003e1\u003c/code\u003e when its two input bits are different\n(\u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e) and returns \u003ccode\u003e0\u003c/code\u003e when its two input bits are the same (both\n\u003ccode\u003e0\u003c/code\u003e or both \u003ccode\u003e1\u003c/code\u003e). When \u003ccode\u003eXor\u003c/code\u003e is applied with \u003ccode\u003e0\u003c/code\u003e, the result would be \u003ccode\u003e1\u003c/code\u003e if the other input is\n\u003ccode\u003e1\u003c/code\u003e, because the two input bits are different, and \u003ccode\u003e0\u003c/code\u003e if the other input bit is \u003ccode\u003e0\u003c/code\u003e, because the two input are the\nsame. That results in returning \u003ccode\u003eanyValue\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nanyValue Xor 0 \u0027 Noncompliant\nanyValue       \u0027 Compliant\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\"\u003eBitwise operations (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/and-operator\"\u003eAnd Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/or-operator\"\u003eOr Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/xor-operator\"\u003eXor Operator (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\"\u003eIntegral numeric types (C#\n  reference)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/numeric-data-types\"\u003eNumeric Data\n  Types (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Two%27s_complement\"\u003eTwo’s complement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/12764670/are-there-any-bitwise-operator-laws\"\u003eStack Overflow - Are there any Bitwise Operator\n  Laws?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2551",
    "name": "Shared resources should not be used for locking",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA shared resource refers to a resource or data that can be accessed or modified by multiple \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethreads\u003c/a\u003e or concurrent parts of a program. It could be any piece of data, object, file,\ndatabase connection, or system resource that needs to be accessed or manipulated by multiple parts of a program concurrently.\u003c/p\u003e\n\u003cp\u003eShared resources should not be used for \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elocking\u003c/a\u003e as it increases the chance of\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e. Any other thread could acquire (or attempt to acquire) the same lock while doing some\noperation, without knowing that the resource is meant to be used for locking purposes.\u003c/p\u003e\n\u003cp\u003eOne case of this is strings, which are \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003einterned\u003c/a\u003e by the runtime. This means\nthat each string instance is immutable and stored, and then is reused everywhere it is referenced.\u003c/p\u003e\n\u003cp\u003eInstead, a dedicated private \u003ccode\u003eobject\u003c/code\u003e instance should be used for each shared resource. Making the lock-specific object\n\u003ccode\u003eprivate\u003c/code\u003e guarantees that the access to it is as minimal as possible, in order to avoid deadlocks or lock contention.\u003c/p\u003e\n\u003cp\u003eThe following objects are considered as shared resources:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a reference to \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass#me\"\u003eMe\u003c/a\u003e: if the instance\n  is publicly accessibly, the lock might be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType\u003c/a\u003e object: if the type class is publicly accessibly, the lock might\n  be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/string-data-type\"\u003estring\u003c/a\u003e literal or\n  instance: if any other part of the program uses the same string, the lock is shared because of interning \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub MyLockingMethod()\n    SyncLock Me \u0027Noncompliant\n        \u0027 ...\n    End SyncLock\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate lockObj As New Object()\nPublic Sub MyLockingMethod()\n    SyncLock lockObj\n        \u0027 ...\n    End SyncLock\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003eInterning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern#remarks\"\u003eString interning by the runtime\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA shared resource refers to a resource or data that can be accessed or modified by multiple \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethreads\u003c/a\u003e or concurrent parts of a program. It could be any piece of data, object, file,\ndatabase connection, or system resource that needs to be accessed or manipulated by multiple parts of a program concurrently.\u003c/p\u003e\n\u003cp\u003eShared resources should not be used for \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elocking\u003c/a\u003e as it increases the chance of\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e. Any other thread could acquire (or attempt to acquire) the same lock while doing some\noperation, without knowing that the resource is meant to be used for locking purposes.\u003c/p\u003e\n\u003cp\u003eOne case of this is strings, which are \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003einterned\u003c/a\u003e by the runtime. This means\nthat each string instance is immutable and stored, and then is reused everywhere it is referenced.\u003c/p\u003e\n\u003cp\u003eInstead, a dedicated private \u003ccode\u003eobject\u003c/code\u003e instance should be used for each shared resource. Making the lock-specific object\n\u003ccode\u003eprivate\u003c/code\u003e guarantees that the access to it is as minimal as possible, in order to avoid deadlocks or lock contention.\u003c/p\u003e\n\u003cp\u003eThe following objects are considered as shared resources:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e a reference to \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass#me\"\u003eMe\u003c/a\u003e: if the instance\n  is publicly accessibly, the lock might be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.type\"\u003eType\u003c/a\u003e object: if the type class is publicly accessibly, the lock might\n  be shared \u003c/li\u003e\n  \u003cli\u003e a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/string-data-type\"\u003estring\u003c/a\u003e literal or\n  instance: if any other part of the program uses the same string, the lock is shared because of interning \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub MyLockingMethod()\n    SyncLock Me \u0027Noncompliant\n        \u0027 ...\n    End SyncLock\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate lockObj As New Object()\nPublic Sub MyLockingMethod()\n    SyncLock lockObj\n        \u0027 ...\n    End SyncLock\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Interning_(computer_science)\"\u003eInterning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.intern#remarks\"\u003eString interning by the runtime\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3884",
    "name": "\"CoSetProxyBlanket\" and \"CoInitializeSecurity\" should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eCoSetProxyBlanket\u003c/code\u003e and \u003ccode\u003eCoInitializeSecurity\u003c/code\u003e both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it’s too late at that point; the permissions context has\nalready been set.\u003c/p\u003e\n\u003cp\u003eSpecifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Noncompliant\n\n    \u0026lt;DllImport(\"ole32.dll\")\u0026gt;\n    Public Shared Function CoSetProxyBlanket(\u0026lt;MarshalAs(UnmanagedType.IUnknown)\u0026gt;pProxy As Object, dwAuthnSvc as UInt32, dwAuthzSvc As UInt32, \u0026lt;MarshalAs(UnmanagedType.LPWStr)\u0026gt; pServerPrincName As String, dwAuthnLevel As UInt32, dwImpLevel As UInt32, pAuthInfo As IntPtr, dwCapabilities As UInt32) As Integer\n    End Function\n\n    Public Enum RpcAuthnLevel\n        [Default] \u003d 0\n        None \u003d 1\n        Connect \u003d 2\n        [Call] \u003d 3\n        Pkt \u003d 4\n        PktIntegrity \u003d 5\n        PktPrivacy \u003d 6\n    End Enum\n\n    Public Enum RpcImpLevel\n        [Default] \u003d 0\n        Anonymous \u003d 1\n        Identify \u003d 2\n        Impersonate \u003d 3\n        [Delegate] \u003d 4\n    End Enum\n\n    Public Enum EoAuthnCap\n        None \u003d \u0026amp;H00\n        MutualAuth \u003d \u0026amp;H01\n        StaticCloaking \u003d \u0026amp;H20\n        DynamicCloaking \u003d \u0026amp;H40\n        AnyAuthority \u003d \u0026amp;H80\n        MakeFullSIC \u003d \u0026amp;H100\n        [Default] \u003d \u0026amp;H800\n        SecureRefs \u003d \u0026amp;H02\n        AccessControl \u003d \u0026amp;H04\n        AppID \u003d \u0026amp;H08\n        Dynamic \u003d \u0026amp;H10\n        RequireFullSIC \u003d \u0026amp;H200\n        AutoImpersonate \u003d \u0026amp;H400\n        NoCustomMarshal \u003d \u0026amp;H2000\n        DisableAAA \u003d \u0026amp;H1000\n    End Enum\n\n    \u0026lt;DllImport(\"ole32.dll\")\u0026gt;\n    Public Shared Function CoInitializeSecurity(pVoid As IntPtr, cAuthSvc As Integer, asAuthSvc As IntPtr, pReserved1 As IntPtr, level As RpcAuthnLevel, impers As RpcImpLevel, pAuthList As IntPtr, dwCapabilities As EoAuthnCap, pReserved3 As IntPtr) As Integer\n    End Function\n\n    Public Sub DoSomething()\n        Dim Hres1 As Integer \u003d CoSetProxyBlanket(Nothing, 0, 0, Nothing, 0, 0, IntPtr.Zero, 0) \u0027 Noncompliant\n        Dim Hres2 As Integer \u003d CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None, RpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero) \u0027 Noncompliant\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/648\"\u003eCWE-648 - Incorrect Use of Privileged APIs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eCoSetProxyBlanket\u003c/code\u003e and \u003ccode\u003eCoInitializeSecurity\u003c/code\u003e both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it’s too late at that point; the permissions context has\nalready been set.\u003c/p\u003e\n\u003cp\u003eSpecifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Noncompliant\n\n    \u0026lt;DllImport(\"ole32.dll\")\u0026gt;\n    Public Shared Function CoSetProxyBlanket(\u0026lt;MarshalAs(UnmanagedType.IUnknown)\u0026gt;pProxy As Object, dwAuthnSvc as UInt32, dwAuthzSvc As UInt32, \u0026lt;MarshalAs(UnmanagedType.LPWStr)\u0026gt; pServerPrincName As String, dwAuthnLevel As UInt32, dwImpLevel As UInt32, pAuthInfo As IntPtr, dwCapabilities As UInt32) As Integer\n    End Function\n\n    Public Enum RpcAuthnLevel\n        [Default] \u003d 0\n        None \u003d 1\n        Connect \u003d 2\n        [Call] \u003d 3\n        Pkt \u003d 4\n        PktIntegrity \u003d 5\n        PktPrivacy \u003d 6\n    End Enum\n\n    Public Enum RpcImpLevel\n        [Default] \u003d 0\n        Anonymous \u003d 1\n        Identify \u003d 2\n        Impersonate \u003d 3\n        [Delegate] \u003d 4\n    End Enum\n\n    Public Enum EoAuthnCap\n        None \u003d \u0026amp;H00\n        MutualAuth \u003d \u0026amp;H01\n        StaticCloaking \u003d \u0026amp;H20\n        DynamicCloaking \u003d \u0026amp;H40\n        AnyAuthority \u003d \u0026amp;H80\n        MakeFullSIC \u003d \u0026amp;H100\n        [Default] \u003d \u0026amp;H800\n        SecureRefs \u003d \u0026amp;H02\n        AccessControl \u003d \u0026amp;H04\n        AppID \u003d \u0026amp;H08\n        Dynamic \u003d \u0026amp;H10\n        RequireFullSIC \u003d \u0026amp;H200\n        AutoImpersonate \u003d \u0026amp;H400\n        NoCustomMarshal \u003d \u0026amp;H2000\n        DisableAAA \u003d \u0026amp;H1000\n    End Enum\n\n    \u0026lt;DllImport(\"ole32.dll\")\u0026gt;\n    Public Shared Function CoInitializeSecurity(pVoid As IntPtr, cAuthSvc As Integer, asAuthSvc As IntPtr, pReserved1 As IntPtr, level As RpcAuthnLevel, impers As RpcImpLevel, pAuthList As IntPtr, dwCapabilities As EoAuthnCap, pReserved3 As IntPtr) As Integer\n    End Function\n\n    Public Sub DoSomething()\n        Dim Hres1 As Integer \u003d CoSetProxyBlanket(Nothing, 0, 0, Nothing, 0, 0, IntPtr.Zero, 0) \u0027 Noncompliant\n        Dim Hres2 As Integer \u003d CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None, RpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero) \u0027 Noncompliant\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/648\"\u003eCWE-648 - Incorrect Use of Privileged APIs\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5944",
    "name": "\"Return\" statements should be used instead of assigning values to function names",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFunctions can return values using two different syntaxes. The modern, and correct, way to do it is to use a \u003ccode\u003eReturn\u003c/code\u003e statement. The VB6\nway, i.e. old way, is to assign a return value to the function’s name .\u003c/p\u003e\n\u003cp\u003eThe VB6 syntax is obsolete as it was introduced to simplify migration from VB6 projects. The compiler will create a local variable which is\nimplicitly returned when execution exits the function’s scope.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eReturn\u003c/code\u003e statement should be used instead as they are easier to read and understand.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Function FunctionName() As Integer\n    FunctionName \u003d 42 \u0027 Noncompliant\nEnd Function\n\nPublic Function FunctionNameFromVariable() As Integer\n    Dim Value As Integer \u003d 42\n    FunctionNameFromVariable \u003d Value \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Function FunctionName() As Integer\n    Return 42\nEnd Function\n\nPublic Function FunctionNameFromVariable() As Integer\n    Dim Value As Integer \u003d 42\n    Return Value\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/function-statement#returning-from-a-function\"\u003e.Net\n  documentation - Returning from a Function\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFunctions can return values using two different syntaxes. The modern, and correct, way to do it is to use a \u003ccode\u003eReturn\u003c/code\u003e statement. The VB6\nway, i.e. old way, is to assign a return value to the function’s name .\u003c/p\u003e\n\u003cp\u003eThe VB6 syntax is obsolete as it was introduced to simplify migration from VB6 projects. The compiler will create a local variable which is\nimplicitly returned when execution exits the function’s scope.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eReturn\u003c/code\u003e statement should be used instead as they are easier to read and understand.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Function FunctionName() As Integer\n    FunctionName \u003d 42 \u0027 Noncompliant\nEnd Function\n\nPublic Function FunctionNameFromVariable() As Integer\n    Dim Value As Integer \u003d 42\n    FunctionNameFromVariable \u003d Value \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Function FunctionName() As Integer\n    Return 42\nEnd Function\n\nPublic Function FunctionNameFromVariable() As Integer\n    Dim Value As Integer \u003d 42\n    Return Value\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/function-statement#returning-from-a-function\"\u003e.Net\n  documentation - Returning from a Function\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice",
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6580",
    "name": "Use a format provider when parsing date and time",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eWhen converting a string representation of a date and time to a \u003ccode\u003eDateTime\u003c/code\u003e object or any other temporal type with one of the available\nsystem parsing methods, you should always provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf you try to parse a string representation of a date or time without a format provider, the method will use the machine’s\n\u003ccode\u003eCultureInfo\u003c/code\u003e; if the given string does not follow it, you’ll have an object that does not match the string representation or an unexpected\nruntime error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for the following date and time string representation parsing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eParseExact\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParseExact\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOf the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTime\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTimeOffset\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeSpan\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eAlway use an overload of the parse method, where you can provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim dateTimeString \u003d \"4/12/2023 4:05:48 PM\" \u0027 This is an en-US format string - 12 of April 2023\nDim dateTimeObject \u003d DateTime.Parse(dateTimeString) \u0027 This is wrongly parsed as 4th of December, when it\u0027s read in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe)\n\nDim dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\" \u0027 This is an en-US format string - 13 of April 2023\nDim dateTimeObject2 \u003d DateTime.Parse(dateTimeString2) \u0027 Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\nDim timeInSaudiArabia \u003d New TimeOnly(16, 23).ToString(New CultureInfo(\"ar-SA\"))\nDim timeObject \u003d TimeOnly.Parse(timeInSaudiArabia) \u0027 Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim dateTimeString \u003d \"4/12/2023 4:05:48 PM\" \u0027 This is an en-US format string - 12 of April 2023\nDim dateTimeObject \u003d DateTime.Parse(dateTimeString, New CultureInfo(\"en-US\"))\n\nDim dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\" \u0027 This is an en-US format string - 13 of April 2023\nDim dateTimeObject2 \u003d DateTime.Parse(dateTimeString2, New CultureInfo(\"en-US\"))\n\nDim timeInSaudiArabia \u003d New TimeOnly(16, 23).ToString(New CultureInfo(\"ar-SA\"))\nDim timeObject \u003d TimeOnly.Parse(timeInSaudiArabia, New CultureInfo(\"ar-SA\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse\"\u003eDateTime.Parse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact\"\u003eDateTime.ParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse\"\u003eDateTime.TryParse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact\"\u003eDateTime.TryParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eDateOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eDateTime type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eTimeOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eTimeSpan type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCulture Info class documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eWhen converting a string representation of a date and time to a \u003ccode\u003eDateTime\u003c/code\u003e object or any other temporal type with one of the available\nsystem parsing methods, you should always provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf you try to parse a string representation of a date or time without a format provider, the method will use the machine’s\n\u003ccode\u003eCultureInfo\u003c/code\u003e; if the given string does not follow it, you’ll have an object that does not match the string representation or an unexpected\nruntime error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for the following date and time string representation parsing methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eParseExact\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParse\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eTryParseExact\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOf the following types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTime\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.DateTimeOffset\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeOnly\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSystem.TimeSpan\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eAlway use an overload of the parse method, where you can provide an \u003ccode\u003eIFormatProvider\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim dateTimeString \u003d \"4/12/2023 4:05:48 PM\" \u0027 This is an en-US format string - 12 of April 2023\nDim dateTimeObject \u003d DateTime.Parse(dateTimeString) \u0027 This is wrongly parsed as 4th of December, when it\u0027s read in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe)\n\nDim dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\" \u0027 This is an en-US format string - 13 of April 2023\nDim dateTimeObject2 \u003d DateTime.Parse(dateTimeString2) \u0027 Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\nDim timeInSaudiArabia \u003d New TimeOnly(16, 23).ToString(New CultureInfo(\"ar-SA\"))\nDim timeObject \u003d TimeOnly.Parse(timeInSaudiArabia) \u0027 Runtime Error, when it\u0027s parsed in a machine with \"CultureInfo.CurrentCulture\" en-150 (English Europe).\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim dateTimeString \u003d \"4/12/2023 4:05:48 PM\" \u0027 This is an en-US format string - 12 of April 2023\nDim dateTimeObject \u003d DateTime.Parse(dateTimeString, New CultureInfo(\"en-US\"))\n\nDim dateTimeString2 \u003d \"4/13/2023 4:05:48 PM\" \u0027 This is an en-US format string - 13 of April 2023\nDim dateTimeObject2 \u003d DateTime.Parse(dateTimeString2, New CultureInfo(\"en-US\"))\n\nDim timeInSaudiArabia \u003d New TimeOnly(16, 23).ToString(New CultureInfo(\"ar-SA\"))\nDim timeObject \u003d TimeOnly.Parse(timeInSaudiArabia, New CultureInfo(\"ar-SA\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse\"\u003eDateTime.Parse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact\"\u003eDateTime.ParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse\"\u003eDateTime.TryParse method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact\"\u003eDateTime.TryParseExact method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eDateOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eDateTime type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eDateTimeOffset type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eTimeOnly type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eTimeSpan type\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCulture Info class documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6585",
    "name": "Don\u0027t hardcode the format when turning dates and times to strings",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHardcoding the date and time format strings can lead to formats that consumers misunderstand. Also, if the same format is meant to be used in\nmultiple places, it is easier to make a mistake when it’s hardcoded instead of using a format provided by an \u003ccode\u003eIFormatProvider\u003c/code\u003e or using one\nof the standard format strings.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a non-conventional format is used, the formatted date and time can be misunderstood. Also, if a mistake is made in the format, the formatted\ndate can be incomplete. For example, you might switch the place of the minutes and month parts of a date or simply forget to print the year.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of hardcoding the format, provide one from the available formats through an \u003ccode\u003eIFormatProvider\u003c/code\u003e or use one of the standard format\nstrings.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub PrintTime()\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/MM/yyyy HH:mm:ss\"))\n\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/mm/yyyy HH:MM:ss\")) \u0027 Months and minutes have changed their places\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub PrintTime()\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.GetCultureInfo(\"es-MX\")))\n\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)) \u0027 Better provide a well known culture, so this kind of issues do not pop up\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iformatprovider\"\u003eIFormatProvider documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCultureInfo documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\"\u003eCustom date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings\"\u003eStandard TimeSpan format strings\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings\"\u003eCustom TimeSpan format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHardcoding the date and time format strings can lead to formats that consumers misunderstand. Also, if the same format is meant to be used in\nmultiple places, it is easier to make a mistake when it’s hardcoded instead of using a format provided by an \u003ccode\u003eIFormatProvider\u003c/code\u003e or using one\nof the standard format strings.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a non-conventional format is used, the formatted date and time can be misunderstood. Also, if a mistake is made in the format, the formatted\ndate can be incomplete. For example, you might switch the place of the minutes and month parts of a date or simply forget to print the year.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of hardcoding the format, provide one from the available formats through an \u003ccode\u003eIFormatProvider\u003c/code\u003e or use one of the standard format\nstrings.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub PrintTime()\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/MM/yyyy HH:mm:ss\"))\n\n    Console.WriteLine(DateTime.UtcNow.ToString(\"dd/mm/yyyy HH:MM:ss\")) \u0027 Months and minutes have changed their places\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub PrintTime()\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.GetCultureInfo(\"es-MX\")))\n\n    Console.WriteLine(DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)) \u0027 Better provide a well known culture, so this kind of issues do not pop up\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iformatprovider\"\u003eIFormatProvider documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo\"\u003eCultureInfo documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\"\u003eStandard date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\"\u003eCustom date and time format\n  strings\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings\"\u003eStandard TimeSpan format strings\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings\"\u003eCustom TimeSpan format strings\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3878",
    "name": "Arrays should not be created for ParamArray parameters",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it to a \u003ccode\u003eParamArray\u003c/code\u003e parameter. Simply pass the elements\ndirectly. They will be consolidated into an array automatically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass SurroundingClass\n    Public Sub Base()\n        Method(New String() { \"s1\", \"s2\" }) \u0027 Noncompliant: unnecessary\n        Method(New String(12) {}) \u0027 Compliant\n    End Sub\n\n    Public Sub Method(ParamArray args As String())\n        \u0027 Do something\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass SurroundingClass\n    Public Sub Base()\n        Method(\"s1\", \"s2\")\n        Method(New String(12) {})\n    End Sub\n\n    Public Sub Method(ParamArray args As String())\n        \u0027 Do something\n    End Sub\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it to a \u003ccode\u003eParamArray\u003c/code\u003e parameter. Simply pass the elements\ndirectly. They will be consolidated into an array automatically.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass SurroundingClass\n    Public Sub Base()\n        Method(New String() { \"s1\", \"s2\" }) \u0027 Noncompliant: unnecessary\n        Method(New String(12) {}) \u0027 Compliant\n    End Sub\n\n    Public Sub Method(ParamArray args As String())\n        \u0027 Do something\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass SurroundingClass\n    Public Sub Base()\n        Method(\"s1\", \"s2\")\n        Method(New String(12) {})\n    End Sub\n\n    Public Sub Method(ParamArray args As String())\n        \u0027 Do something\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3998",
    "name": "Threads should not lock on objects with weak identity",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eObjects that can be accessed across \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eapplication\ndomain\u003c/a\u003e boundaries are said to have weak identity. This means that these objects can be considered shared resources outside of the domain, which\ncan be lead to them being accessed or modified by multiple threads or concurrent parts of a program, outside of the domain.\u003c/p\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e acquiring a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e on such an object runs the risk of being blocked by another thread in a\ndifferent application domain, leading to poor performance and potentially \u003ca\nhref\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003ethread starvation\u003c/a\u003e and \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTypes with weak identity are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject\"\u003eMarshalByRefObject\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.executionengineexception\"\u003eExecutionEngineException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.outofmemoryexception\"\u003eOutOfMemoryException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string\"\u003eString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo\"\u003eMemberInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo\"\u003eParameterInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Sample\n    Private ReadOnly myLock As New StackOverflowException\n\n    Public Sub Go()\n        SyncLock myLock \u0027 Noncompliant\n        \u0027 ...\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Sample\n    Private ReadOnly myLock As New Object\n\n    Public Sub Go()\n        SyncLock myLock\n        \u0027 ...\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eApplication domains\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003eWhat is (thread) starvation?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem\"\u003eReaders-writers problem\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dining_philosophers_problem\"\u003eDining philosophers problem\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eObjects that can be accessed across \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eapplication\ndomain\u003c/a\u003e boundaries are said to have weak identity. This means that these objects can be considered shared resources outside of the domain, which\ncan be lead to them being accessed or modified by multiple threads or concurrent parts of a program, outside of the domain.\u003c/p\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e acquiring a \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003elock\u003c/a\u003e on such an object runs the risk of being blocked by another thread in a\ndifferent application domain, leading to poor performance and potentially \u003ca\nhref\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003ethread starvation\u003c/a\u003e and \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTypes with weak identity are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject\"\u003eMarshalByRefObject\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.executionengineexception\"\u003eExecutionEngineException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.outofmemoryexception\"\u003eOutOfMemoryException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.stackoverflowexception\"\u003eStackOverflowException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string\"\u003eString\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo\"\u003eMemberInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo\"\u003eParameterInfo\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Sample\n    Private ReadOnly myLock As New StackOverflowException\n\n    Public Sub Go()\n        SyncLock myLock \u0027 Noncompliant\n        \u0027 ...\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Sample\n    Private ReadOnly myLock As New Object\n\n    Public Sub Go()\n        SyncLock myLock\n        \u0027 ...\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003eThread\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Lock_(computer_science)\"\u003eLocking\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003eDeadlock\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices\"\u003eManaged Threading Best Practices\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/application-domains\"\u003eApplication domains\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/1162587/what-is-starvation\"\u003eWhat is (thread) starvation?\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem\"\u003eReaders-writers problem\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dining_philosophers_problem\"\u003eDining philosophers problem\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "multi-threading",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2304",
    "name": "Namespace names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. Microsoft, System \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. System.IO \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2}))*$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nNamespace foo  \u0027 Noncompliant\nEnd Namespace\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nNamespace Foo  \u0027 Compliant\nEnd Namespace\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. Microsoft, System \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. System.IO \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2}))*$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nNamespace foo  \u0027 Noncompliant\nEnd Namespace\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nNamespace Foo  \u0027 Compliant\nEnd Namespace\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the namespace names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)*$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)*$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2429",
    "name": "Arrays should be initialized using the \"... \u003d {}\" syntax",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e... \u003d {}\u003c/code\u003e syntax is more compact, more readable and less error-prone.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim foo(1) As String   \u0027 Noncompliant\n    foo(0) \u003d \"foo\"\n    foo(1) \u003d \"bar\"\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim foo \u003d {\"foo\", \"bar\"}  \u0027 Compliant\n  End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003e... \u003d {}\u003c/code\u003e syntax is more compact, more readable and less error-prone.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim foo(1) As String   \u0027 Noncompliant\n    foo(0) \u003d \"foo\"\n    foo(1) \u003d \"bar\"\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim foo \u003d {\"foo\", \"bar\"}  \u0027 Compliant\n  End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6588",
    "name": "Use the \"UnixEpoch\" field instead of creating \"DateTime\" instances that point to the beginning of the Unix epoch",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWith .NET Core the \u003ccode\u003eUnixEpoch\u003c/code\u003e field was introduced to \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e types. Using this field\nclearly states that the intention is to use the beginning of the Unix epoch.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou should not use the \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e constructors to set the time to the 1st of January 1970 to represent\nthe beginning of the Unix epoch. Not everyone is familiar with what this particular date is representing and it can be misleading.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, use the \u003ccode\u003eUnixEpoch\u003c/code\u003e field of \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of the constructor.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub GetEpochTime()\n    Dim epochTime \u003d New DateTime(1970, 1, 1)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub GetEpochTime()\n    Dim epochTime \u003d DateTime.UnixEpoch\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.unixepoch\"\u003eDateTime.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.unixepoch\"\u003eDateTimeOffset.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix time\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWith .NET Core the \u003ccode\u003eUnixEpoch\u003c/code\u003e field was introduced to \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e types. Using this field\nclearly states that the intention is to use the beginning of the Unix epoch.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eYou should not use the \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e constructors to set the time to the 1st of January 1970 to represent\nthe beginning of the Unix epoch. Not everyone is familiar with what this particular date is representing and it can be misleading.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, use the \u003ccode\u003eUnixEpoch\u003c/code\u003e field of \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e instead of the constructor.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub GetEpochTime()\n    Dim epochTime \u003d New DateTime(1970, 1, 1)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub GetEpochTime()\n    Dim epochTime \u003d DateTime.UnixEpoch\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime.unixepoch\"\u003eDateTime.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.unixepoch\"\u003eDateTimeOffset.UnixEpoch documentation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unix_time\"\u003eUnix time\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3990",
    "name": "Assemblies should be marked as CLS compliant",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with \u003ccode\u003eSystem.CLSCompliantAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Assembly: CLSCompliant(True)\u0026gt;\n\nNamespace MyLibrary\n\nEnd Namespace\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with \u003ccode\u003eSystem.CLSCompliantAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Assembly: CLSCompliant(True)\u0026gt;\n\nNamespace MyLibrary\n\nEnd Namespace\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1451",
    "name": "Track lack of copyright and license headers",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LAWFUL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eheaderFormat\u003c/code\u003e must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (\u003ccode\u003eusing\u003c/code\u003e, \u003ccode\u003enamespace\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eFor example, if you want the source file to look like this\u003c/p\u003e\n\u003cpre\u003e\n\u0027 Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n\u003c/pre\u003e\n\u003cp\u003ethen the \u003ccode\u003eheaderFormat\u003c/code\u003e parameter should end with an empty line like this\u003c/p\u003e\n\u003cpre\u003e\n\u0027 Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eheaderFormat\u003c/code\u003e must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (\u003ccode\u003eusing\u003c/code\u003e, \u003ccode\u003enamespace\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eFor example, if you want the source file to look like this\u003c/p\u003e\n\u003cpre\u003e\n\u0027 Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n\u003c/pre\u003e\n\u003cp\u003ethen the \u003ccode\u003eheaderFormat\u003c/code\u003e parameter should end with an empty line like this\u003c/p\u003e\n\u003cpre\u003e\n\u0027 Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "headerFormat": {
        "key": "headerFormat",
        "name": "headerFormat",
        "description": "Expected copyright and license header.",
        "defaultValue": "\u0027 \u003cYour-Product-Name\u003e\n\u0027 Copyright (c) \u003cYear-From\u003e-\u003cYear-To\u003e \u003cYour-Company-Name\u003e\n\u0027\n\u0027 Please configure this header in your SonarCloud/SonarQube quality profile.\n\u0027 You can also set it in SonarLint.xml additional file for SonarLint or standalone NuGet analyzer.\n",
        "type": "TEXT",
        "multiple": false,
        "possibleValues": []
      },
      "isRegularExpression": {
        "key": "isRegularExpression",
        "name": "isRegularExpression",
        "description": "Whether the headerFormat is a regular expression.",
        "defaultValue": "false",
        "type": "BOOLEAN",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "headerFormat": "\u0027 \u003cYour-Product-Name\u003e\n\u0027 Copyright (c) \u003cYear-From\u003e-\u003cYear-To\u003e \u003cYour-Company-Name\u003e\n\u0027\n\u0027 Please configure this header in your SonarCloud/SonarQube quality profile.\n\u0027 You can also set it in SonarLint.xml additional file for SonarLint or standalone NuGet analyzer.\n",
      "isRegularExpression": "false"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3871",
    "name": "Exception types should be \"Public\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n\u003ccode\u003epublic\u003c/code\u003e for that to work.\u003c/p\u003e\n\u003cp\u003eIf a method throws a non-public exception, the best you can do on the caller’s side is to \u003ccode\u003ecatch\u003c/code\u003e the closest \u003ccode\u003epublic\u003c/code\u003e base\nof the class. However, you lose all the information that the new exception type carries.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue if you directly inherit one of the following exception types in a non-public class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFriend Class MyException    \u0027 Noncompliant\n    Inherits Exception\n    \u0027 ...\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class MyException\n    Inherits Exception\n    \u0027 ...\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/declared-elements/access-levels\"\u003eAccess\n  levels\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n\u003ccode\u003epublic\u003c/code\u003e for that to work.\u003c/p\u003e\n\u003cp\u003eIf a method throws a non-public exception, the best you can do on the caller’s side is to \u003ccode\u003ecatch\u003c/code\u003e the closest \u003ccode\u003epublic\u003c/code\u003e base\nof the class. However, you lose all the information that the new exception type carries.\u003c/p\u003e\n\u003cp\u003eThis rule will raise an issue if you directly inherit one of the following exception types in a non-public class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFriend Class MyException    \u0027 Noncompliant\n    Inherits Exception\n    \u0027 ...\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class MyException\n    Inherits Exception\n    \u0027 ...\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.exception\"\u003eException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.systemexception\"\u003eSystemException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.applicationexception\"\u003eApplicationException\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/declared-elements/access-levels\"\u003eAccess\n  levels\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "api-design",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3992",
    "name": "Assemblies should explicitly specify COM visibility",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAssemblies should explicitly indicate whether they are meant to be COM visible or not. If the \u003ccode\u003eComVisibleAttribute\u003c/code\u003e is not present, the\ndefault is to make the content of the assembly visible to COM clients.\u003c/p\u003e\n\u003cp\u003eNote that COM visibility can be overridden for individual types and members.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nNamespace MyLibrary  \u0027 Noncompliant\n\nEnd Namespace\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Assembly: Runtime.InteropServices.ComVisible(False)\u0026gt;\n\nNamespace MyLibrary\n\nEnd Namespace\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAssemblies should explicitly indicate whether they are meant to be COM visible or not. If the \u003ccode\u003eComVisibleAttribute\u003c/code\u003e is not present, the\ndefault is to make the content of the assembly visible to COM clients.\u003c/p\u003e\n\u003cp\u003eNote that COM visibility can be overridden for individual types and members.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nNamespace MyLibrary  \u0027 Noncompliant\n\nEnd Namespace\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Assembly: Runtime.InteropServices.ComVisible(False)\u0026gt;\n\nNamespace MyLibrary\n\nEnd Namespace\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "api-design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2302",
    "name": "\"NameOf\" should be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBecause parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use\n\u003ccode\u003eNameOf()\u003c/code\u003e, and the string that’s output will always be correct.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any string in the \u003ccode\u003eThrow\u003c/code\u003e statement is an exact match for the name of one of the method parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(param As Integer, secondParam As String)\n    If (param \u0026lt; 0)\n        Throw New Exception(\"param\") \u0027 Noncompliant\n    End If\n    If secondParam is Nothing\n      Throw New Exception(\"secondParam should be valid\") \u0027 Noncompliant\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(param As Integer, secondParam As String)\n    If (param \u0026lt; 0)\n        Throw New Exception(NameOf(param))\n    End If\n    If secondParam is Nothing\n      Throw New Exception($\"{NameOf(secondParam)} should be valid\")\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule doesn’t raise any issue when using VB.NET \u0026lt; 14.0. \u003c/li\u003e\n  \u003cli\u003e When the parameter name is contained in a sentence inside the \u003ccode\u003eThrow\u003c/code\u003e statement string, the rule will raise an issue only if the\n  parameter name is at least 5 characters long. This is to avoid false positives. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use\n\u003ccode\u003eNameOf()\u003c/code\u003e, and the string that’s output will always be correct.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any string in the \u003ccode\u003eThrow\u003c/code\u003e statement is an exact match for the name of one of the method parameters.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(param As Integer, secondParam As String)\n    If (param \u0026lt; 0)\n        Throw New Exception(\"param\") \u0027 Noncompliant\n    End If\n    If secondParam is Nothing\n      Throw New Exception(\"secondParam should be valid\") \u0027 Noncompliant\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub DoSomething(param As Integer, secondParam As String)\n    If (param \u0026lt; 0)\n        Throw New Exception(NameOf(param))\n    End If\n    If secondParam is Nothing\n      Throw New Exception($\"{NameOf(secondParam)} should be valid\")\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e The rule doesn’t raise any issue when using VB.NET \u0026lt; 14.0. \u003c/li\u003e\n  \u003cli\u003e When the parameter name is contained in a sentence inside the \u003ccode\u003eThrow\u003c/code\u003e statement string, the rule will raise an issue only if the\n  parameter name is at least 5 characters long. This is to avoid false positives. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2053",
    "name": "Hashes should include an unpredictable salt",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuring the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.\u003c/p\u003e\n\u003cp\u003eHowever, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDespite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.\u003c/p\u003e\n\u003cp\u003eOnce the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.\u003c/p\u003e\n\u003cp\u003eIf multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.\u003c/p\u003e\n\u003cp\u003eA short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.\u003c/p\u003e\n\u003cp\u003eWith short salts, the probability of a collision between two users\u0027 passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of hard-coded salts.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Hash(Password As String)\n    Dim Salt As Byte() \u003d Encoding.UTF8.GetBytes(\"salty\")\n    Dim Hashed As New Rfc2898DeriveBytes(Password, Salt) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Hash(Password As String)\n    Dim Hashed As New Rfc2898DeriveBytes(Password, 64)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThis code ensures that each user’s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 16 bytes (128 bits), as recommended by industry standards.\u003c/p\u003e\n\u003cp\u003eIn the case of the code sample, the class automatically takes care of generating a secure salt if none is specified.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/759\"\u003eCWE-759 - Use of a One-Way Hash without a Salt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/760\"\u003eCWE-760 - Use of a One-Way Hash with a Predictable Salt\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuring the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.\u003c/p\u003e\n\u003cp\u003eHowever, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDespite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.\u003c/p\u003e\n\u003cp\u003eOnce the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.\u003c/p\u003e\n\u003cp\u003eIf multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.\u003c/p\u003e\n\u003cp\u003eA short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.\u003c/p\u003e\n\u003cp\u003eWith short salts, the probability of a collision between two users\u0027 passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of hard-coded salts.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Hash(Password As String)\n    Dim Salt As Byte() \u003d Encoding.UTF8.GetBytes(\"salty\")\n    Dim Hashed As New Rfc2898DeriveBytes(Password, Salt) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Hash(Password As String)\n    Dim Hashed As New Rfc2898DeriveBytes(Password, 64)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eThis code ensures that each user’s password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 16 bytes (128 bits), as recommended by industry standards.\u003c/p\u003e\n\u003cp\u003eIn the case of the code sample, the class automatically takes care of generating a secure salt if none is specified.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/759\"\u003eCWE-759 - Use of a One-Way Hash without a Salt\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/760\"\u003eCWE-760 - Use of a One-Way Hash with a Predictable Salt\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2612",
    "name": "Setting loose POSIX file permissions is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn Unix, \"others\" class refers to all users except the owner of the file and the members of the group assigned to this file.\u003c/p\u003e\n\u003cp\u003eIn Windows, \"Everyone\" group is similar and includes all members of the Authenticated Users group as well as the built-in Guest account, and\nseveral other built-in security accounts.\u003c/p\u003e\n\u003cp\u003eGranting permissions to these groups can lead to unintended access to files.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The application is designed to be run on a multi-user environment. \u003c/li\u003e\n  \u003cli\u003e Corresponding files and directories may contain confidential information. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e.Net Framework:\u003c/p\u003e\n\u003cpre\u003e\nDim unsafeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Allow)\n\nDim fileSecurity \u003d File.GetAccessControl(\"path\")\nfileSecurity.AddAccessRule(unsafeAccessRule) \u0027 Sensitive\nfileSecurity.SetAccessRule(unsafeAccessRule) \u0027 Sensitive\nFile.SetAccessControl(\"fileName\", fileSecurity)\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core\u003c/p\u003e\n\u003cpre\u003e\nDim fileInfo \u003d new FileInfo(\"path\")\nDim fileSecurity \u003d fileInfo.GetAccessControl()\n\nfileSecurity.AddAccessRule(new FileSystemAccessRule(\"Everyone\", FileSystemRights.Write, AccessControlType.Allow)) \u0027 Sensitive\nfileInfo.SetAccessControl(fileSecurity)\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core using Mono.Posix.NETStandard\u003c/p\u003e\n\u003cpre\u003e\nDim fileSystemEntry \u003d UnixFileSystemInfo.GetFileSystemEntry(\"path\")\nfileSystemEntry.FileAccessPermissions \u003d FileAccessPermissions.OtherReadWriteExecute \u0027 Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eThe most restrictive possible permissions should be assigned to files and directories.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003e.Net Framework\u003c/p\u003e\n\u003cpre\u003e\nDim safeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Deny)\n\nDim fileSecurity \u003d File.GetAccessControl(\"path\")\nfileSecurity.AddAccessRule(safeAccessRule)\nFile.SetAccessControl(\"path\", fileSecurity)\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core\u003c/p\u003e\n\u003cpre\u003e\nDim safeAccessRule \u003d new FileSystemAccessRule(\"Everyone\", FileSystemRights.FullControl, AccessControlType.Deny)\n\nDim fileInfo \u003d new FileInfo(\"path\")\nDim fileSecurity \u003d fileInfo.GetAccessControl()\nfileSecurity.SetAccessRule(safeAccessRule)\nfileInfo.SetAccessControl(fileSecurity)\n\u003c/pre\u003e\n\u003cp\u003e.Net / .Net Core using Mono.Posix.NETStandard\u003c/p\u003e\n\u003cpre\u003e\nDim fs \u003d UnixFileSystemInfo.GetFileSystemEntry(\"path\")\nfs.FileAccessPermissions \u003d FileAccessPermissions.UserExecute\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\u003eTop 10 2021 Category A4 - Insecure Design\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eTop 10 2017 Category A5 - Broken Access Control\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\"\u003eOWASP File Permission\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/732\"\u003eCWE-732 - Incorrect Permission Assignment for Critical Resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/266\"\u003eCWE-266 - Incorrect Privilege Assignment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "vbnet:S1645",
    "name": "The \"\u0026\" operator should be used to concatenate strings",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConsistently using the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator for string concatenation make the developer intentions clear.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e, unlike \u003ccode\u003e+\u003c/code\u003e, will convert its operands to strings and perform an actual concatenation.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e on the other hand can be an addition, or a concatenation, depending on the operand types.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"1\" + 2) \u0027 Noncompliant - will display \"3\"\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Console.WriteLine(1 \u0026amp; 2)   \u0027 Compliant - will display \"12\"\n        Console.WriteLine(1 + 2)   \u0027 Compliant - but will display \"3\"\n        Console.WriteLine(\"1\" \u0026amp; 2) \u0027 Compliant - will display \"12\"\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConsistently using the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator for string concatenation make the developer intentions clear.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e, unlike \u003ccode\u003e+\u003c/code\u003e, will convert its operands to strings and perform an actual concatenation.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e on the other hand can be an addition, or a concatenation, depending on the operand types.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"1\" + 2) \u0027 Noncompliant - will display \"3\"\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Console.WriteLine(1 \u0026amp; 2)   \u0027 Compliant - will display \"12\"\n        Console.WriteLine(1 + 2)   \u0027 Compliant - but will display \"3\"\n        Console.WriteLine(\"1\" \u0026amp; 2) \u0027 Compliant - will display \"12\"\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2737",
    "name": "\"catch\" clauses should do more than rethrow",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003eCatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003eCatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As Exception\n    Throw\nEnd Try\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d File.ReadAllText(fileName)\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As Exception\n    logger.LogError(e)\n    Throw\nEnd Try\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not generate issues for \u003ccode\u003eCatch\u003c/code\u003e blocks if they are followed by a \u003ccode\u003eCatch\u003c/code\u003e block for a more general exception\ntype that does more than just rethrowing the exception.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As IOException \u0027Compliant by exception: removing it would change the logic\n    Throw\nCatch e As Exception \u0027Compliant: does more than just rethrow\n    logger.LogError(e)\n    Throw\nEnd Try\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003eCatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003eCatch\u003c/code\u003e altogether and letting\nit bubble up automatically.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As Exception\n    Throw\nEnd Try\n\u003c/pre\u003e\n\u003cp\u003eSuch clauses should either be removed or populated with the appropriate logic.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d File.ReadAllText(fileName)\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As Exception\n    logger.LogError(e)\n    Throw\nEnd Try\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not generate issues for \u003ccode\u003eCatch\u003c/code\u003e blocks if they are followed by a \u003ccode\u003eCatch\u003c/code\u003e block for a more general exception\ntype that does more than just rethrowing the exception.\u003c/p\u003e\n\u003cpre\u003e\nDim s As String \u003d \"\"\nTry\n    s \u003d File.ReadAllText(fileName)\nCatch e As IOException \u0027Compliant by exception: removing it would change the logic\n    Throw\nCatch e As Exception \u0027Compliant: does more than just rethrow\n    logger.LogError(e)\n    Throw\nEnd Try\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy",
      "error-handling",
      "finding",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3949",
    "name": "Calculations should not overflow",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNumbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate numbers beyond\nthose bounds, and the result will be an \u003ccode\u003eOverflowException\u003c/code\u003e. When the compilation is configured to remove integer overflow checking, the\nvalue will be silently wrapped around from the expected positive value to a negative one, or vice versa.\u003c/p\u003e\n\u003ch2\u003eNoncompliant code example\u003c/h2\u003e\n\u003cpre\u003e\nPublic Function Transform(Value As Integer) As Integer\n    If Value \u0026lt;\u003d 0 Then Return Value\n    Dim Number As Integer \u003d Integer.MaxValue\n    Return Number + Value       \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eCompliant solution\u003c/h2\u003e\n\u003cpre\u003e\nPublic Function Transform(Value As Integer) As Long\n    If Value \u0026lt;\u003d 0 Then Return Value\n    Dim Number As Long \u003d Integer.MaxValue\n    Return Number + Value\nEnd Function\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNumbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate numbers beyond\nthose bounds, and the result will be an \u003ccode\u003eOverflowException\u003c/code\u003e. When the compilation is configured to remove integer overflow checking, the\nvalue will be silently wrapped around from the expected positive value to a negative one, or vice versa.\u003c/p\u003e\n\u003ch2\u003eNoncompliant code example\u003c/h2\u003e\n\u003cpre\u003e\nPublic Function Transform(Value As Integer) As Integer\n    If Value \u0026lt;\u003d 0 Then Return Value\n    Dim Number As Integer \u003d Integer.MaxValue\n    Return Number + Value       \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eCompliant solution\u003c/h2\u003e\n\u003cpre\u003e\nPublic Function Transform(Value As Integer) As Long\n    If Value \u0026lt;\u003d 0 Then Return Value\n    Dim Number As Long \u003d Integer.MaxValue\n    Return Number + Value\nEnd Function\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "overflow"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3385",
    "name": "\"Exit\" statements should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eOther than \u003ccode\u003eExit Select\u003c/code\u003e, using an \u003ccode\u003eExit\u003c/code\u003e statement is never a good idea.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eExit Do\u003c/code\u003e, \u003ccode\u003eExit For\u003c/code\u003e, \u003ccode\u003eExit Try\u003c/code\u003e, and \u003ccode\u003eExit While\u003c/code\u003e will all result in unstructured control flow, i.e.\nspaghetti code.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eExit Function\u003c/code\u003e, \u003ccode\u003eExit Property\u003c/code\u003e, and \u003ccode\u003eExit Sub\u003c/code\u003e are all poor, less-readable substitutes for a simple\n\u003ccode\u003ereturn\u003c/code\u003e, and if used with code that should return a value (\u003ccode\u003eExit Function\u003c/code\u003e and in some cases \u003ccode\u003eExit Property\u003c/code\u003e) they\ncould result in a \u003ccode\u003eNullReferenceException\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for all uses of \u003ccode\u003eExit\u003c/code\u003e except \u003ccode\u003eExit Select\u003c/code\u003e and \u003ccode\u003eExit Do\u003c/code\u003e statements in loops without\ncondition.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n      Exit Sub                  \u0027 Noncompliant\n    End If\n\n    For index \u003d 1 To 10\n      If index \u003d 5 Then\n          Exit For               \u0027 Noncompliant\n      End If\n      \u0027 ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    \u0027 ...\n    MyFunction \u003d 42\n    Exit Function              \u0027 Noncompliant\n  End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n        Return\n    End If\n\n    For index \u003d 1 To 4\n        \u0027 ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    \u0027 ...\n    Return 42\n  End Function\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOther than \u003ccode\u003eExit Select\u003c/code\u003e, using an \u003ccode\u003eExit\u003c/code\u003e statement is never a good idea.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eExit Do\u003c/code\u003e, \u003ccode\u003eExit For\u003c/code\u003e, \u003ccode\u003eExit Try\u003c/code\u003e, and \u003ccode\u003eExit While\u003c/code\u003e will all result in unstructured control flow, i.e.\nspaghetti code.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eExit Function\u003c/code\u003e, \u003ccode\u003eExit Property\u003c/code\u003e, and \u003ccode\u003eExit Sub\u003c/code\u003e are all poor, less-readable substitutes for a simple\n\u003ccode\u003ereturn\u003c/code\u003e, and if used with code that should return a value (\u003ccode\u003eExit Function\u003c/code\u003e and in some cases \u003ccode\u003eExit Property\u003c/code\u003e) they\ncould result in a \u003ccode\u003eNullReferenceException\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for all uses of \u003ccode\u003eExit\u003c/code\u003e except \u003ccode\u003eExit Select\u003c/code\u003e and \u003ccode\u003eExit Do\u003c/code\u003e statements in loops without\ncondition.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n      Exit Sub                  \u0027 Noncompliant\n    End If\n\n    For index \u003d 1 To 10\n      If index \u003d 5 Then\n          Exit For               \u0027 Noncompliant\n      End If\n      \u0027 ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    \u0027 ...\n    MyFunction \u003d 42\n    Exit Function              \u0027 Noncompliant\n  End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n        Return\n    End If\n\n    For index \u003d 1 To 4\n        \u0027 ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    \u0027 ...\n    Return 42\n  End Function\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice",
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5445",
    "name": "Insecure temporary file creation methods should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eTemporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating temporary files in a non-atomic way introduces race condition issues in the application’s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.\u003c/p\u003e\n\u003cp\u003eIn such a situation, the application might use a temporary file that it does not entirely control. In particular, this file’s permissions might be\ndifferent than expected. This can lead to trust boundary issues.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAttackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application’s\nlogic. By changing this file’s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file’s content before or while the application uses it.\u003c/p\u003e\n\u003cp\u003eDepending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.\u003c/p\u003e\n\u003ch4\u003eInformation disclosure\u003c/h4\u003e\n\u003cp\u003eBecause attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.\u003c/p\u003e\n\u003cp\u003eFor example, an application might use temporary files to store users\u0027 session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users\u0027 identities and entitlements.\u003c/p\u003e\n\u003ch4\u003eAttack surface extension\u003c/h4\u003e\n\u003cp\u003eAn application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.\u003c/p\u003e\n\u003cp\u003eFor example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files\u0027\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.IO\n\nSub Example()\n    Dim TempPath \u003d Path.GetTempFileName() \u0027Noncompliant\n\n    Using Writer As New StreamWriter(TempPath)\n        Writer.WriteLine(\"content\")\n    End Using\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.IO\n\nSub Example()\n    Dim RandomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName())\n\n    Using FileStream As New FileStream(RandomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose)\n        Using Writer As New StreamWriter(FileStream)\n            Writer.WriteLine(\"content\")\n        End Using\n    End Using\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eApplications should create temporary files so that no third party can read or modify their content. It requires that the files\u0027 name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications\u0027 technology stacks.\u003c/p\u003e\n\u003ch4\u003eStrong security controls\u003c/h4\u003e\n\u003cp\u003eTemporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.\u003c/p\u003e\n\u003cp\u003eIn general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Files should be created in a non-public directory. \u003c/li\u003e\n  \u003cli\u003e File names should be unique. \u003c/li\u003e\n  \u003cli\u003e File names should be unpredictable. They should be generated using a cryptographically secure random generator. \u003c/li\u003e\n  \u003cli\u003e File creation should fail if a target file already exists. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMoreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.\u003c/p\u003e\n\u003cp\u003eHere the example compliant code uses the \u003ccode\u003ePath.GetTempPath\u003c/code\u003e and \u003ccode\u003ePath.GetRandomFileName\u003c/code\u003e functions to generate a unique\nrandom file name. The file is then open with the \u003ccode\u003eFileMode.CreateNew\u003c/code\u003e option that will ensure the creation fails if the file already\nexists. The \u003ccode\u003eFileShare.None\u003c/code\u003e option will additionally prevent the file from being opened again by any process. To finish, this code ensures\nthe file will get destroyed once the application has finished using it with the \u003ccode\u003eFileOptions.DeleteOnClose\u003c/code\u003e option.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP\u003c/a\u003e - Insecure Temporary File \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eTop 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eTemporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating temporary files in a non-atomic way introduces race condition issues in the application’s behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.\u003c/p\u003e\n\u003cp\u003eIn such a situation, the application might use a temporary file that it does not entirely control. In particular, this file’s permissions might be\ndifferent than expected. This can lead to trust boundary issues.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAttackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the application’s\nlogic. By changing this file’s Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the file’s content before or while the application uses it.\u003c/p\u003e\n\u003cp\u003eDepending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.\u003c/p\u003e\n\u003ch4\u003eInformation disclosure\u003c/h4\u003e\n\u003cp\u003eBecause attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.\u003c/p\u003e\n\u003cp\u003eFor example, an application might use temporary files to store users\u0027 session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users\u0027 identities and entitlements.\u003c/p\u003e\n\u003ch4\u003eAttack surface extension\u003c/h4\u003e\n\u003cp\u003eAn application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.\u003c/p\u003e\n\u003cp\u003eFor example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files\u0027\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.IO\n\nSub Example()\n    Dim TempPath \u003d Path.GetTempFileName() \u0027Noncompliant\n\n    Using Writer As New StreamWriter(TempPath)\n        Writer.WriteLine(\"content\")\n    End Using\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.IO\n\nSub Example()\n    Dim RandomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName())\n\n    Using FileStream As New FileStream(RandomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose)\n        Using Writer As New StreamWriter(FileStream)\n            Writer.WriteLine(\"content\")\n        End Using\n    End Using\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eApplications should create temporary files so that no third party can read or modify their content. It requires that the files\u0027 name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications\u0027 technology stacks.\u003c/p\u003e\n\u003ch4\u003eStrong security controls\u003c/h4\u003e\n\u003cp\u003eTemporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.\u003c/p\u003e\n\u003cp\u003eIn general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Files should be created in a non-public directory. \u003c/li\u003e\n  \u003cli\u003e File names should be unique. \u003c/li\u003e\n  \u003cli\u003e File names should be unpredictable. They should be generated using a cryptographically secure random generator. \u003c/li\u003e\n  \u003cli\u003e File creation should fail if a target file already exists. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMoreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.\u003c/p\u003e\n\u003cp\u003eHere the example compliant code uses the \u003ccode\u003ePath.GetTempPath\u003c/code\u003e and \u003ccode\u003ePath.GetRandomFileName\u003c/code\u003e functions to generate a unique\nrandom file name. The file is then open with the \u003ccode\u003eFileMode.CreateNew\u003c/code\u003e option that will ensure the creation fails if the file already\nexists. The \u003ccode\u003eFileShare.None\u003c/code\u003e option will additionally prevent the file from being opened again by any process. To finish, this code ensures\nthe file will get destroyed once the application has finished using it with the \u003ccode\u003eFileOptions.DeleteOnClose\u003c/code\u003e option.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP\u003c/a\u003e - Insecure Temporary File \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\"\u003eTop 10 2017 Category A9 -\n  Using Components with Known Vulnerabilities\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S101",
    "name": "Class names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g., \u003ccode\u003eBackColor\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g., \u003ccode\u003eGetID\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lowercased, e.g., \u003ccode\u003eGetHtml\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, with the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nClass foo \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/naming-conventions\"\u003eVisual Basic Naming\n  Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\n  Conventions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class name does not match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g., \u003ccode\u003eBackColor\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g., \u003ccode\u003eGetID\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lowercased, e.g., \u003ccode\u003eGetHtml\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, with the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e, the class:\u003c/p\u003e\n\u003cpre\u003e\nClass foo \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eshould be renamed to\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/naming-conventions\"\u003eVisual Basic Naming\n  Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions\"\u003eMicrosoft Capitalization\n  Conventions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the class names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2178",
    "name": "Short-circuit logic should be used in boolean contexts",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e is an evaluation strategy for \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e, that doesn’t evaluates the second argument of the operator if it is not\nneeded to determine the result of the operation.\u003c/p\u003e\n\u003cp\u003eVB.NET provides logical operators that implement short-circuit evaluation: \u003ccode\u003eAndAlso\u003c/code\u003e and \u003ccode\u003eOrElse\u003c/code\u003e, as well as\nnon-short-circuit versions: \u003ccode\u003eAnd\u003c/code\u003e and \u003ccode\u003eOr\u003c/code\u003e. Unlike short-circuit operators, non-short-circuit ones evaluate both operands and\nafterwards perform the logical operation.\u003c/p\u003e\n\u003cp\u003eFor example \u003ccode\u003eFalse AndAlso FunctionCall\u003c/code\u003e always results in \u003ccode\u003eFalse\u003c/code\u003e, even when \u003ccode\u003eFunctionCall\u003c/code\u003e invocation would\nraise an exception. Instead, \u003ccode\u003eFalse \u0026amp; FunctionCall\u003c/code\u003e also evaluates \u003ccode\u003eFunctionCall\u003c/code\u003e, and results in an exception if\n\u003ccode\u003eFunctionCall\u003c/code\u003e raises an exception.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eTrue OrElse FunctionCall\u003c/code\u003e always results in \u003ccode\u003eTrue\u003c/code\u003e, no matter what the return value of \u003ccode\u003eFunctionCall\u003c/code\u003e\nwould be.\u003c/p\u003e\n\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf GetTrue() Or GetFalse() Then \u0027 Noncompliant: both sides evaluated\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf GetTrue() OrElse GetFalse() Then \u0027 Compliant: short-circuit logic used\nEnd If\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2015/11/02/when-would-you-use-on-a-bool/\"\u003eEric Lippert’s blog - When would you use \u0026amp; on a bool?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e is an evaluation strategy for \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e, that doesn’t evaluates the second argument of the operator if it is not\nneeded to determine the result of the operation.\u003c/p\u003e\n\u003cp\u003eVB.NET provides logical operators that implement short-circuit evaluation: \u003ccode\u003eAndAlso\u003c/code\u003e and \u003ccode\u003eOrElse\u003c/code\u003e, as well as\nnon-short-circuit versions: \u003ccode\u003eAnd\u003c/code\u003e and \u003ccode\u003eOr\u003c/code\u003e. Unlike short-circuit operators, non-short-circuit ones evaluate both operands and\nafterwards perform the logical operation.\u003c/p\u003e\n\u003cp\u003eFor example \u003ccode\u003eFalse AndAlso FunctionCall\u003c/code\u003e always results in \u003ccode\u003eFalse\u003c/code\u003e, even when \u003ccode\u003eFunctionCall\u003c/code\u003e invocation would\nraise an exception. Instead, \u003ccode\u003eFalse \u0026amp; FunctionCall\u003c/code\u003e also evaluates \u003ccode\u003eFunctionCall\u003c/code\u003e, and results in an exception if\n\u003ccode\u003eFunctionCall\u003c/code\u003e raises an exception.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003eTrue OrElse FunctionCall\u003c/code\u003e always results in \u003ccode\u003eTrue\u003c/code\u003e, no matter what the return value of \u003ccode\u003eFunctionCall\u003c/code\u003e\nwould be.\u003c/p\u003e\n\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf GetTrue() Or GetFalse() Then \u0027 Noncompliant: both sides evaluated\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf GetTrue() OrElse GetFalse() Then \u0027 Compliant: short-circuit logic used\nEnd If\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\"\u003eShort-circuit evaluation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Logical_connective\"\u003eBoolean operators\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2015/11/02/when-would-you-use-on-a-bool/\"\u003eEric Lippert’s blog - When would you use \u0026amp; on a bool?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5443",
    "name": "Using publicly writable directories is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eOperating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n\u003ccode\u003e/tmp\u003c/code\u003e in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\"\u003eCVE-2012-2451\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\"\u003eCVE-2015-1838\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like \u003ccode\u003e/tmp\u003c/code\u003e (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., \u003ccode\u003eTMP\u003c/code\u003e, \u003ccode\u003eTMPDIR\u003c/code\u003e and\n\u003ccode\u003eTEMP\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/usr/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/shm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/dev/mqueue\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/var/run/lock\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Library/Caches\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/Users/Shared\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e/private/var/tmp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Windows\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\Temp\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\\TMP\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e%USERPROFILE%\\AppData\\Local\\Temp\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Files are read from or written into a publicly writable folder \u003c/li\u003e\n  \u003cli\u003e The application creates files with predictable names into a publicly writable folder \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nUsing Writer As New StreamWriter(\"/tmp/f\") \u0027 Sensitive\n\u0027 ...\nEnd Using\n\u003c/pre\u003e\n\u003cpre\u003e\nDim Tmp As String \u003d Environment.GetEnvironmentVariable(\"TMP\") \u0027 Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOut of the box, .NET is missing secure-by-design APIs to create temporary files. To overcome this, one of the following options can be used:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a dedicated sub-folder with tightly controlled permissions \u003c/li\u003e\n  \u003cli\u003e Created temporary files in a publicly writable folder and make sure:\n    \u003cul\u003e\n      \u003cli\u003e Generated filename is unpredictable \u003c/li\u003e\n      \u003cli\u003e File is readable and writable only by the creating user ID \u003c/li\u003e\n      \u003cli\u003e File descriptor is not inherited by child processes \u003c/li\u003e\n      \u003cli\u003e File is destroyed as soon as it is closed \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nDim RandomPath \u003d Path.Combine(Path.GetTempPath(), Path.GetRandomFileName())\n\n\u0027 Creates a new file with write, non inheritable permissions which is deleted on close.\nUsing FileStream As New FileStream(RandomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose)\n    Using Writer As New StreamWriter(FileStream) \u0027 Sensitive\n    \u0027 ...\n    End Using\nEnd Using\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\"\u003eTop 10 2017 Category A5 - Broken Access Control\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/377\"\u003eCWE-377 - Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/379\"\u003eCWE-379 - Creation of Temporary File in Directory with Incorrect Permissions\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\"\u003eOWASP, Insecure Temporary File\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S1764",
    "name": "Identical expressions should not be used on both sides of a binary operator",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same\nvalue on both sides of an operator yields predictable results, and should be simplified.\u003c/p\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf (a \u003d a) Then\n  doZ()\nEnd If\n\nIf a \u003d b OrElse a \u003d b Then\n  doW()\nEnd If\n\nDim j \u003d 5 / 5\nj \u003d 5 \\ 5\nj \u003d 5 Mod 5\nDim k \u003d 5 - 5\n\nDim i \u003d 42\ni /\u003d i\ni -\u003d i\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, and \u003ccode\u003e\u003d\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S1656} - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same\nvalue on both sides of an operator yields predictable results, and should be simplified.\u003c/p\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf (a \u003d a) Then\n  doZ()\nEnd If\n\nIf a \u003d b OrElse a \u003d b Then\n  doW()\nEnd If\n\nDim j \u003d 5 / 5\nj \u003d 5 \\ 5\nj \u003d 5 Mod 5\nDim k \u003d 5 - 5\n\nDim i \u003d 42\ni /\u003d i\ni -\u003d i\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, and \u003ccode\u003e\u003d\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S1656} - Implements a check on \u003ccode\u003e\u003d\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1643",
    "name": "Strings should not be concatenated using \"+\" or \"\u0026\" in a loop",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d \"\"\n        foo \u0026amp;\u003d \"Result: \"       \u0027 Compliant - outside of loop\n\n        For i \u003d 1 To 9\n            foo \u0026amp;\u003d i            \u0027 Noncompliant\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d New System.Text.StringBuilder\n        foo.Append(\"Result: \")  \u0027 Compliant\n\n        For i \u003d 1 To 9\n            foo.Append(i)       \u0027 Compliant\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d \"\"\n        foo \u0026amp;\u003d \"Result: \"       \u0027 Compliant - outside of loop\n\n        For i \u003d 1 To 9\n            foo \u0026amp;\u003d i            \u0027 Noncompliant\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d New System.Text.StringBuilder\n        foo.Append(\"Result: \")  \u0027 Compliant\n\n        For i \u003d 1 To 9\n            foo.Append(i)       \u0027 Compliant\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1192",
    "name": "String literals should not be duplicated",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e literals with fewer than 5 characters \u003c/li\u003e\n  \u003cli\u003e literals matching one of the parameter names \u003c/li\u003e\n  \u003cli\u003e literals used in attributes \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Foo\n\n    Private Name As String \u003d \"foobar\" \u0027 Noncompliant\n\n    Public ReadOnly Property DefaultName As String \u003d \"foobar\" \u0027 Noncompliant\n\n    Public Sub New(Optional Value As String \u003d \"foobar\") \u0027 Noncompliant\n\n        Dim Something \u003d If(Value, \"foobar\") \u0027 Noncompliant\n\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Foo\n\n    Private Const Foobar As String \u003d \"foobar\"\n\n    Private Name As String \u003d Foobar\n\n    Public ReadOnly Property DefaultName As String \u003d Foobar\n\n    Public Sub New(Optional Value As String \u003d Foobar)\n\n        Dim Something \u003d If(Value, Foobar)\n\n    End Sub\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following are ignored:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e literals with fewer than 5 characters \u003c/li\u003e\n  \u003cli\u003e literals matching one of the parameter names \u003c/li\u003e\n  \u003cli\u003e literals used in attributes \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead, use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a\nsingle place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Foo\n\n    Private Name As String \u003d \"foobar\" \u0027 Noncompliant\n\n    Public ReadOnly Property DefaultName As String \u003d \"foobar\" \u0027 Noncompliant\n\n    Public Sub New(Optional Value As String \u003d \"foobar\") \u0027 Noncompliant\n\n        Dim Something \u003d If(Value, \"foobar\") \u0027 Noncompliant\n\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Foo\n\n    Private Const Foobar As String \u003d \"foobar\"\n\n    Private Name As String \u003d Foobar\n\n    Public ReadOnly Property DefaultName As String \u003d Foobar\n\n    Public Sub New(Optional Value As String \u003d Foobar)\n\n        Dim Something \u003d If(Value, Foobar)\n\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "Number of times a literal must be duplicated to trigger an issue.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "threshold": "3"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4583",
    "name": "Calls to delegate\u0027s method \"BeginInvoke\" should be paired with calls to \"EndInvoke\"",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen calling the \u003ccode\u003eBeginInvoke\u003c/code\u003e method of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.delegate\"\u003edelegate\u003c/a\u003e,\nresources are allocated that are only freed up when \u003ccode\u003eEndInvoke\u003c/code\u003e is called. Failing to pair \u003ccode\u003eBeginInvoke\u003c/code\u003e with\n\u003ccode\u003eEndInvoke\u003c/code\u003e can lead to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Resource_leak\"\u003eresource leaks\u003c/a\u003e and incomplete asynchronous calls.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eBeginInvoke\u003c/code\u003e method is called without any callback, and it is not paired with a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same\n  block. \u003c/li\u003e\n  \u003cli\u003e A callback with a single parameter of type \u003ccode\u003eIAsyncResult\u003c/code\u003e does not contain a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(Nothing, Nothing) \u0027 Noncompliant: Not paired With EndInvoke\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(New AsyncCallback(Sub(ar)\n                                                                          End Sub), Nothing) \u0027 Noncompliant: Not paired With EndInvoke\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Function DoSomething() As String\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(Nothing, Nothing)\n        \u0027 ...\n        Return Caller.EndInvoke(Result)\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(New AsyncCallback(Sub(ar)\n                                                                              \u0027 Call EndInvoke to retrieve the results.\n                                                                              Dim Ret As String \u003d Caller.EndInvoke(ar)\n                                                                              \u0027 ...\n                                                                          End Sub), Nothing)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\"\u003eCalling\n  Synchronous Methods Asynchronously\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates\"\u003eAsynchronous\n  Programming Using Delegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.begininvoke\"\u003eBeginInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.endinvoke\"\u003eEndInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.asynccallback\"\u003eAsyncCallback Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen calling the \u003ccode\u003eBeginInvoke\u003c/code\u003e method of a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.delegate\"\u003edelegate\u003c/a\u003e,\nresources are allocated that are only freed up when \u003ccode\u003eEndInvoke\u003c/code\u003e is called. Failing to pair \u003ccode\u003eBeginInvoke\u003c/code\u003e with\n\u003ccode\u003eEndInvoke\u003c/code\u003e can lead to \u003ca href\u003d\"https://en.wikipedia.org/wiki/Resource_leak\"\u003eresource leaks\u003c/a\u003e and incomplete asynchronous calls.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue in the following scenarios:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The \u003ccode\u003eBeginInvoke\u003c/code\u003e method is called without any callback, and it is not paired with a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same\n  block. \u003c/li\u003e\n  \u003cli\u003e A callback with a single parameter of type \u003ccode\u003eIAsyncResult\u003c/code\u003e does not contain a call to \u003ccode\u003eEndInvoke\u003c/code\u003e in the same block. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(Nothing, Nothing) \u0027 Noncompliant: Not paired With EndInvoke\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(New AsyncCallback(Sub(ar)\n                                                                          End Sub), Nothing) \u0027 Noncompliant: Not paired With EndInvoke\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e without callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Function DoSomething() As String\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(Nothing, Nothing)\n        \u0027 ...\n        Return Caller.EndInvoke(Result)\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eBeginInvoke\u003c/code\u003e with callback:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Delegate Function AsyncMethodCaller() As String\n\nPublic Class Sample\n\n    Public Sub DoSomething()\n        Dim Example As New AsyncExample()\n        Dim Caller As New AsyncMethodCaller(Example.SomeMethod)\n        \u0027 Initiate the asynchronous call.\n        Dim Result As IAsyncResult \u003d Caller.BeginInvoke(New AsyncCallback(Sub(ar)\n                                                                              \u0027 Call EndInvoke to retrieve the results.\n                                                                              Dim Ret As String \u003d Caller.EndInvoke(ar)\n                                                                              \u0027 ...\n                                                                          End Sub), Nothing)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\"\u003eCalling\n  Synchronous Methods Asynchronously\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-using-delegates\"\u003eAsynchronous\n  Programming Using Delegates\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.begininvoke\"\u003eBeginInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.endinvoke\"\u003eEndInvoke()\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.asynccallback\"\u003eAsyncCallback Delegate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4581",
    "name": "\"new Guid()\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the syntax \u003ccode\u003enew Guid()\u003c/code\u003e (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e An empty GUID, in which case \u003ccode\u003eGuid.Empty\u003c/code\u003e is clearer. \u003c/li\u003e\n  \u003cli\u003e A randomly-generated GUID, in which case \u003ccode\u003eGuid.NewGuid()\u003c/code\u003e should be used. \u003c/li\u003e\n  \u003cli\u003e A new GUID with a specific initialization, in which case the initialization parameter is missing. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis rule raises an issue when a parameterless instantiation of the \u003ccode\u003eGuid\u003c/code\u003e struct is found.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo()\n    Dim G1 As New Guid        \u0027 Noncompliant - what\u0027s the intent?\n    Dim G2 As Guid \u003d Nothing  \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(byte[] bytes)\nPublic Sub Foo(Bytes As Byte())\n    Dim G1 As Guid \u003d Guid.Empty\n    Dim G2 As Guid \u003d Guid.NewGuid()\n    Dim G3 As Guid \u003d New Guid(Bytes)\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the syntax \u003ccode\u003enew Guid()\u003c/code\u003e (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e An empty GUID, in which case \u003ccode\u003eGuid.Empty\u003c/code\u003e is clearer. \u003c/li\u003e\n  \u003cli\u003e A randomly-generated GUID, in which case \u003ccode\u003eGuid.NewGuid()\u003c/code\u003e should be used. \u003c/li\u003e\n  \u003cli\u003e A new GUID with a specific initialization, in which case the initialization parameter is missing. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis rule raises an issue when a parameterless instantiation of the \u003ccode\u003eGuid\u003c/code\u003e struct is found.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo()\n    Dim G1 As New Guid        \u0027 Noncompliant - what\u0027s the intent?\n    Dim G2 As Guid \u003d Nothing  \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\npublic void Foo(byte[] bytes)\nPublic Sub Foo(Bytes As Byte())\n    Dim G1 As Guid \u003d Guid.Empty\n    Dim G2 As Guid \u003d Guid.NewGuid()\n    Dim G3 As Guid \u003d New Guid(Bytes)\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4586",
    "name": "Non-async \"Task/Task\u003cT\u003e\" methods should not return null",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eReturning \u003ccode\u003eNothing\u003c/code\u003e from a non-\u003ccode\u003eAsync\u003c/code\u003e \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask(Of TResult)\u003c/code\u003e procedure will cause a\n\u003ccode\u003eNullReferenceException\u003c/code\u003e at runtime if the procedure is awaited. This problem can be avoided by returning \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult(Of TResult)(Nothing)\u003c/code\u003e\u003c/a\u003e\nrespectively.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function DoFooAsync() As Task\n    Return Nothing            \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\nPublic Async Function Main() As Task\n    Await DoFooAsync()        \u0027 NullReferenceException\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eInstead of \u003ccode\u003eNothing\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult(Of TResult)(Nothing)\u003c/code\u003e\u003c/a\u003e\nshould be returned.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eA \u003ccode\u003eTask\u003c/code\u003e returning procedure can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function DoFooAsync() As Task\n    Return Nothing            \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function DoFooAsync() As Task\n    Return Task.CompletedTask \u0027 Compliant: Method can be awaited.\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eTask(Of TResult)\u003c/code\u003e returning procedure can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function GetFooAsync() As Task(Of Object)\n    Return Nothing                             \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function GetFooAsync() As Task(Of Object)\n    Return Task.FromResult(Of Object)(Nothing) \u0027 Compliant: Method can be awaited.\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(TResult)\u003c/code\u003e\n  Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/45350108\"\u003eIs it better to return an empty task or null?\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/27551261\"\u003eBest way to handle null task inside async\n  method?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eReturning \u003ccode\u003eNothing\u003c/code\u003e from a non-\u003ccode\u003eAsync\u003c/code\u003e \u003ccode\u003eTask\u003c/code\u003e/\u003ccode\u003eTask(Of TResult)\u003c/code\u003e procedure will cause a\n\u003ccode\u003eNullReferenceException\u003c/code\u003e at runtime if the procedure is awaited. This problem can be avoided by returning \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult(Of TResult)(Nothing)\u003c/code\u003e\u003c/a\u003e\nrespectively.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function DoFooAsync() As Task\n    Return Nothing            \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\nPublic Async Function Main() As Task\n    Await DoFooAsync()        \u0027 NullReferenceException\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eInstead of \u003ccode\u003eNothing\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult(Of TResult)(Nothing)\u003c/code\u003e\u003c/a\u003e\nshould be returned.\u003c/p\u003e\n\n\u003cp\u003eA \u003ccode\u003eTask\u003c/code\u003e returning procedure can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function DoFooAsync() As Task\n    Return Nothing            \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function DoFooAsync() As Task\n    Return Task.CompletedTask \u0027 Compliant: Method can be awaited.\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eTask(Of TResult)\u003c/code\u003e returning procedure can be fixed like so:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function GetFooAsync() As Task(Of Object)\n    Return Nothing                             \u0027 Noncompliant: Causes a NullReferenceException if awaited.\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function GetFooAsync() As Task(Of Object)\n    Return Task.FromResult(Of Object)(Nothing) \u0027 Compliant: Method can be awaited.\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.completedtask\"\u003e\u003ccode\u003eTask.CompletedTask\u003c/code\u003e Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.fromresult\"\u003e\u003ccode\u003eTask.FromResult\u0026lt;TResult\u0026gt;(TResult)\u003c/code\u003e\n  Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/45350108\"\u003eIs it better to return an empty task or null?\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e StackOverflow - Answer by Stephen Cleary for \u003ca href\u003d\"https://stackoverflow.com/a/27551261\"\u003eBest way to handle null task inside async\n  method?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "async-await"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1075",
    "name": "URIs should not be hardcoded",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHard-coding a URI makes it difficult to test a program for a variety of reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e path literals are not always portable across operating systems \u003c/li\u003e\n  \u003cli\u003e a given absolute path may not exist in a specific test environment \u003c/li\u003e\n  \u003cli\u003e a specified Internet URL may not be available when executing the tests \u003c/li\u003e\n  \u003cli\u003e production environment filesystems usually differ from the development environment \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn addition, hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.\u003c/p\u003e\n\u003cp\u003eFor all those reasons, a URI should never be hard coded. Instead, it should be replaced by a customizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther, even if the elements of a URI are obtained dynamically, portability can still be limited if the path delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URIs or path delimiters are hard-coded.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHard-coding a URI makes it difficult to test a program for a variety of reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e path literals are not always portable across operating systems \u003c/li\u003e\n  \u003cli\u003e a given absolute path may not exist in a specific test environment \u003c/li\u003e\n  \u003cli\u003e a specified Internet URL may not be available when executing the tests \u003c/li\u003e\n  \u003cli\u003e production environment filesystems usually differ from the development environment \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn addition, hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.\u003c/p\u003e\n\u003cp\u003eFor all those reasons, a URI should never be hard coded. Instead, it should be replaced by a customizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther, even if the elements of a URI are obtained dynamically, portability can still be limited if the path delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URIs or path delimiters are hard-coded.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1197",
    "name": "Array designators \"()\" should be on the type, not the variable",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eArray designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo() As String \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo As String() \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArray designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo() As String \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo As String() \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3011",
    "name": "Reflection should not be used to increase accessibility of classes, methods, or fields",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAltering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the\ninternal contracts of the accessed target and lead to maintainability issues and runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Reflection\n\nDim dynClass \u003d Type.GetType(\"MyInternalClass\")\n\u0027 Sensitive. Using BindingFlags.NonPublic will return non-public members\nDim bindingAttr As BindingFlags \u003d BindingFlags.NonPublic Or BindingFlags.Static\nDim dynMethod As MethodInfo \u003d dynClass.GetMethod(\"mymethod\", bindingAttr)\nDim result \u003d dynMethod.Invoke(dynClass, Nothing)\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eWikipedia definition of Encapsulation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAltering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the\ninternal contracts of the accessed target and lead to maintainability issues and runtime errors.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Reflection\n\nDim dynClass \u003d Type.GetType(\"MyInternalClass\")\n\u0027 Sensitive. Using BindingFlags.NonPublic will return non-public members\nDim bindingAttr As BindingFlags \u003d BindingFlags.NonPublic Or BindingFlags.Static\nDim dynMethod As MethodInfo \u003d dynClass.GetMethod(\"mymethod\", bindingAttr)\nDim result \u003d dynMethod.Invoke(dynClass, Nothing)\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\"\u003eWikipedia definition of Encapsulation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2166",
    "name": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class FruitException \u0027 Noncompliant - this has nothing to do with Exception\n    Private expected As Fruit\n    Private unusualCharacteristics As String\n    Private appropriateForCommercialExploitation As Boolean\n    \u0027 ...\nEnd Class\n\nPublic Class CarException \u0027 Noncompliant - does not derive from any Exception-based class\n    Public Sub New(message As String, inner As Exception)\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class FruitSport \u0027 Compliant - class name does not end with \u0027Exception\u0027\n    Private expected As Fruit\n    Private unusualCharacteristics As String\n    Private appropriateForCommercialExploitation As Boolean\n    \u0027 ...\nEnd Class\n\nPublic Class CarException Inherits Exception \u0027 Compliant - correctly extends System.Exception\n    Public Sub New(message As String, inner As Exception)\n        MyBase.New(message, inner)\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class FruitException \u0027 Noncompliant - this has nothing to do with Exception\n    Private expected As Fruit\n    Private unusualCharacteristics As String\n    Private appropriateForCommercialExploitation As Boolean\n    \u0027 ...\nEnd Class\n\nPublic Class CarException \u0027 Noncompliant - does not derive from any Exception-based class\n    Public Sub New(message As String, inner As Exception)\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class FruitSport \u0027 Compliant - class name does not end with \u0027Exception\u0027\n    Private expected As Fruit\n    Private unusualCharacteristics As String\n    Private appropriateForCommercialExploitation As Boolean\n    \u0027 ...\nEnd Class\n\nPublic Class CarException Inherits Exception \u0027 Compliant - correctly extends System.Exception\n    Public Sub New(message As String, inner As Exception)\n        MyBase.New(message, inner)\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention",
      "error-handling",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1871",
    "name": "Two branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "DISTINCT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003eCases\u003c/code\u003e in the same \u003ccode\u003eSelect\u003c/code\u003e statement or branches in the same \u003ccode\u003eIf\u003c/code\u003e structure with the same\nimplementation is at best duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoFirst()\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElseIf a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50   \u0027 Noncompliant; duplicates first condition\n  DoFirst()\n  DoTheThing()\nElse\n  DoTheRest();\nEnd If\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nSelect i\n  Case 1\n    DoFirst()\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3  \u0027 Noncompliant; duplicates case 1\u0027s implementation\n    DoFirst()\n    DoSomething()\n  Case Else:\n    DoTheRest()\nEnd Select\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eIf\u003c/code\u003e structure they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf (a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10) OrElse (a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50) Then\n  DoFirst()\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElse\n  DoTheRest();\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eSelect\u003c/code\u003e, the values should be put in the \u003ccode\u003eCase\u003c/code\u003e expression list. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nSelect i\n  Case 1, 3\n    DoFirst()\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case Else:\n    DoTheRest()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eIf\u003c/code\u003e chain or \u003ccode\u003eCase\u003c/code\u003e clause that contain a single line of code are ignored.\u003c/p\u003e\n\u003cpre\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElseIf a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50   \u0027 no issue, usually this is done on purpose to increase the readability\n  DoTheThing()\nEnd If\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eIf\u003c/code\u003e chains without \u003ccode\u003eElse\u003c/code\u003e-s, or to \u003ccode\u003eSelect\u003c/code\u003e-s without \u003ccode\u003eCase Else\u003c/code\u003e\nclauses when all branches have the same single line of code. In the case of \u003ccode\u003eIf\u003c/code\u003e chains with \u003ccode\u003eElse\u003c/code\u003e-s, or of\n\u003ccode\u003eSelect\u003c/code\u003e-es with \u003ccode\u003eCase Else\u003c/code\u003e clauses, rule {rule:vbnet:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()  \u0027 Noncompliant, this might have been done on purpose but probably not\nEnd If\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.\u003c/p\u003e\n\u003cp\u003eHaving two \u003ccode\u003eCases\u003c/code\u003e in the same \u003ccode\u003eSelect\u003c/code\u003e statement or branches in the same \u003ccode\u003eIf\u003c/code\u003e structure with the same\nimplementation is at best duplicate code, and at worst a coding error.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoFirst()\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElseIf a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50   \u0027 Noncompliant; duplicates first condition\n  DoFirst()\n  DoTheThing()\nElse\n  DoTheRest();\nEnd If\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nSelect i\n  Case 1\n    DoFirst()\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3  \u0027 Noncompliant; duplicates case 1\u0027s implementation\n    DoFirst()\n    DoSomething()\n  Case Else:\n    DoTheRest()\nEnd Select\n\u003c/pre\u003e\n\u003cp\u003eIf the same logic is needed for both instances, then:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in an \u003ccode\u003eIf\u003c/code\u003e structure they should be combined \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf (a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10) OrElse (a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50) Then\n  DoFirst()\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElse\n  DoTheRest();\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e for a \u003ccode\u003eSelect\u003c/code\u003e, the values should be put in the \u003ccode\u003eCase\u003c/code\u003e expression list. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nSelect i\n  Case 1, 3\n    DoFirst()\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case Else:\n    DoTheRest()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eIf\u003c/code\u003e chain or \u003ccode\u003eCase\u003c/code\u003e clause that contain a single line of code are ignored.\u003c/p\u003e\n\u003cpre\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()\nElseIf a \u0026gt;\u003d 20 AndAlso a \u0026lt; 50   \u0027 no issue, usually this is done on purpose to increase the readability\n  DoTheThing()\nEnd If\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eIf\u003c/code\u003e chains without \u003ccode\u003eElse\u003c/code\u003e-s, or to \u003ccode\u003eSelect\u003c/code\u003e-s without \u003ccode\u003eCase Else\u003c/code\u003e\nclauses when all branches have the same single line of code. In the case of \u003ccode\u003eIf\u003c/code\u003e chains with \u003ccode\u003eElse\u003c/code\u003e-s, or of\n\u003ccode\u003eSelect\u003c/code\u003e-es with \u003ccode\u003eCase Else\u003c/code\u003e clauses, rule {rule:vbnet:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nIf a \u0026gt;\u003d 0 AndAlso a \u0026lt; 10 Then\n  DoTheThing()\nElseIf a \u0026gt;\u003d 10 AndAlso a \u0026lt; 20 Then\n  DoTheOtherThing()  \u0027 Noncompliant, this might have been done on purpose but probably not\nEnd If\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S3923} - All branches in a conditional structure should not have exactly the same implementation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "design",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1751",
    "name": "Loops with at most one iteration should be refactored",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/control-flow/loop-structures\"\u003eloop\u003c/a\u003e\nstatement with at most one iteration is equivalent to an \u003ccode\u003eIf\u003c/code\u003e statement; the following block is executed only once.\u003c/p\u003e\n\u003cp\u003eIf the initial intention was to conditionally execute the block only once, an \u003ccode\u003eIf\u003c/code\u003e statement should be used instead. If that was not the\ninitial intention, the block of the loop should be fixed so the block is executed multiple times.\u003c/p\u003e\n\u003cp\u003eA loop statement with at most one iteration can happen when a statement unconditionally transfers control, such as a jump statement or a throw\nstatement, is misplaced inside the loop block.\u003c/p\u003e\n\u003cp\u003eThis rule raises when the following statements are misplaced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/exit-statement\"\u003e\u003ccode\u003eExit\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/continue-statement\"\u003e\u003ccode\u003eContinue\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/return-statement\"\u003e\u003ccode\u003eReturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003e\u003ccode\u003eThrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function Method(items As IEnumerable(Of Object)) As Object\n    For i As Integer \u003d 0 To 9\n        Console.WriteLine(i)\n        Exit For \u0027 Noncompliant: loop only executes once\n    Next\n\n    For Each item As Object In items\n        Return item \u0027 Noncompliant: loop only executes once\n    Next\n    Return Nothing\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function Method(items As IEnumerable(Of Object)) As Object\n    For i As Integer \u003d 0 To 9\n        Console.WriteLine(i)\n    Next\n\n    Dim item \u003d items.FirstOrDefault()\n    If item IsNot Nothing Then\n        Return item\n    End If\n    Return Nothing\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/control-flow/loop-structures\"\u003eLoop Structures\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/exit-statement\"\u003e\u003ccode\u003eExit\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/continue-statement\"\u003e\u003ccode\u003eContinue\u003c/code\u003e Statement\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/return-statement\"\u003e\u003ccode\u003eReturn\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003e\u003ccode\u003eThrow\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003eThrow Statement\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/control-flow/loop-structures\"\u003eloop\u003c/a\u003e\nstatement with at most one iteration is equivalent to an \u003ccode\u003eIf\u003c/code\u003e statement; the following block is executed only once.\u003c/p\u003e\n\u003cp\u003eIf the initial intention was to conditionally execute the block only once, an \u003ccode\u003eIf\u003c/code\u003e statement should be used instead. If that was not the\ninitial intention, the block of the loop should be fixed so the block is executed multiple times.\u003c/p\u003e\n\u003cp\u003eA loop statement with at most one iteration can happen when a statement unconditionally transfers control, such as a jump statement or a throw\nstatement, is misplaced inside the loop block.\u003c/p\u003e\n\u003cp\u003eThis rule raises when the following statements are misplaced:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/exit-statement\"\u003e\u003ccode\u003eExit\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/continue-statement\"\u003e\u003ccode\u003eContinue\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/return-statement\"\u003e\u003ccode\u003eReturn\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003e\u003ccode\u003eThrow\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function Method(items As IEnumerable(Of Object)) As Object\n    For i As Integer \u003d 0 To 9\n        Console.WriteLine(i)\n        Exit For \u0027 Noncompliant: loop only executes once\n    Next\n\n    For Each item As Object In items\n        Return item \u0027 Noncompliant: loop only executes once\n    Next\n    Return Nothing\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function Method(items As IEnumerable(Of Object)) As Object\n    For i As Integer \u003d 0 To 9\n        Console.WriteLine(i)\n    Next\n\n    Dim item \u003d items.FirstOrDefault()\n    If item IsNot Nothing Then\n        Return item\n    End If\n    Return Nothing\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/control-flow/loop-structures\"\u003eLoop Structures\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/exit-statement\"\u003e\u003ccode\u003eExit\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/continue-statement\"\u003e\u003ccode\u003eContinue\u003c/code\u003e Statement\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/return-statement\"\u003e\u003ccode\u003eReturn\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003e\u003ccode\u003eThrow\u003c/code\u003e Statement (Visual\n  Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/throw-statement\"\u003eThrow Statement\n  (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4225",
    "name": "Extension methods should not extend \"Object\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCreating an extension method that extends \u003ccode\u003eObject\u003c/code\u003e is not recommended because it makes the method available on \u003cem\u003eevery\u003c/em\u003e type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Runtime.CompilerServices\n\nModule MyExtensions\n    \u0026lt;Extension\u0026gt;\n    Sub SomeExtension(obj As Object) \u0027 Noncompliant\n        \u0027 ...\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCreating an extension method that extends \u003ccode\u003eObject\u003c/code\u003e is not recommended because it makes the method available on \u003cem\u003eevery\u003c/em\u003e type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Runtime.CompilerServices\n\nModule MyExtensions\n    \u0026lt;Extension\u0026gt;\n    Sub SomeExtension(obj As Object) \u0027 Noncompliant\n        \u0027 ...\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S119",
    "name": "Generic type parameter names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eInconsistent naming conventions can lead to confusion and errors when working in a team. This rule ensures that all generic type parameter names\nfollow a consistent naming convention by checking them against a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration follows Microsoft’s recommended convention:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Generic type parameter names must start with an upper case \u0027T\u0027, e.g. T \u003c/li\u003e\n  \u003cli\u003e The rest of the name should use Pascal casing, starting with an upper case character, e.g. TKey \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. TFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations should be lowercased, e.g. TFooHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, ensure that all generic type parameter names in your code follow the naming convention specified in the regular expression.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default parameter value \u003ccode\u003e^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Foo(Of tkey) \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Foo(Of TKey) \u0027 Compliant\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-type-parameters\"\u003eGeneric Type\n  Parameters (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eInconsistent naming conventions can lead to confusion and errors when working in a team. This rule ensures that all generic type parameter names\nfollow a consistent naming convention by checking them against a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration follows Microsoft’s recommended convention:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Generic type parameter names must start with an upper case \u0027T\u0027, e.g. T \u003c/li\u003e\n  \u003cli\u003e The rest of the name should use Pascal casing, starting with an upper case character, e.g. TKey \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. TFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations should be lowercased, e.g. TFooHtml \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, ensure that all generic type parameter names in your code follow the naming convention specified in the regular expression.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default parameter value \u003ccode\u003e^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Foo(Of tkey) \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Foo(Of TKey) \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-type-parameters\"\u003eGeneric Type\n  Parameters (C# reference)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the generic type parameter names against.",
        "defaultValue": "^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S117",
    "name": "Local variable names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eLocal variables should be named consistently to communicate intent and improve maintainability. Rename your local variable to follow your project’s\nnaming convention to address this issue.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.\u003cbr\u003e Local\nvariables hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily recognizable pattern.\u003cbr\u003e Adhering\nto a consistent naming convention helps to make the code more readable and understandable, which makes it easier to maintain and debug. It also\nensures consistency in the code, especially when multiple developers are working on the same project.\u003c/p\u003e\n\u003cp\u003eThis rule checks that local variable names match a provided regular expression.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInconsistent naming of local variables can lead to several issues in your code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Reduced Readability: inconsistent local variable names make the code harder to read and understand; consequently, it is more difficult to\n  identify the purpose of each variable, spot errors, or comprehend the logic. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Identifying Variables: local variables that don’t adhere to a standard naming convention are challenging to identify; thus, the\n  coding process slows down, especially when dealing with a large codebase. \u003c/li\u003e\n  \u003cli\u003e Increased Risk of Errors: inconsistent or unclear local variable names lead to misunderstandings about what the variable represents. This\n  ambiguity leads to incorrect assumptions and, consequently, bugs in the code. \u003c/li\u003e\n  \u003cli\u003e Collaboration Difficulties: in a team setting, inconsistent naming conventions lead to confusion and miscommunication among team members. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Code Maintenance: inconsistent naming leads to an inconsistent codebase. The code is difficult to understand, and making changes\n  feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, not adhering to a naming convention for local variables can lead to confusion, errors, and inefficiencies, making the code harder to\nread, understand, and maintain.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eFirst, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e, bringing the following constraints:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Camel casing, starting with a lowercase character, for example backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, for example id, productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lowercased, for example html \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nModule Module1\n    Sub Main()\n        Dim Foo \u003d 0 \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d 0 \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/naming-conventions\"\u003eVisual\n  Basic Naming Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\"\u003eNaming Convention (programming)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S101} - Class names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S114} - Interface names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S119} - Generic type parameter names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S1542} - Functions and procedures should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S1654} - Method parameters should follow a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2304} - Namespace names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2342} - Enumeration types should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2343} - Enumeration values should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2347} - Event handlers should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2348} - Events should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2362} - Private constants should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2363} - \"Private Shared ReadOnly\" fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2364} - \"Private\" fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2366} - Properties should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2367} - Non-private constants should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2369} - Non-private fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2370} - Non-private \"Shared ReadOnly\" fields should comply with a naming convention \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eLocal variables should be named consistently to communicate intent and improve maintainability. Rename your local variable to follow your project’s\nnaming convention to address this issue.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.\u003cbr\u003e Local\nvariables hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily recognizable pattern.\u003cbr\u003e Adhering\nto a consistent naming convention helps to make the code more readable and understandable, which makes it easier to maintain and debug. It also\nensures consistency in the code, especially when multiple developers are working on the same project.\u003c/p\u003e\n\u003cp\u003eThis rule checks that local variable names match a provided regular expression.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInconsistent naming of local variables can lead to several issues in your code:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Reduced Readability: inconsistent local variable names make the code harder to read and understand; consequently, it is more difficult to\n  identify the purpose of each variable, spot errors, or comprehend the logic. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Identifying Variables: local variables that don’t adhere to a standard naming convention are challenging to identify; thus, the\n  coding process slows down, especially when dealing with a large codebase. \u003c/li\u003e\n  \u003cli\u003e Increased Risk of Errors: inconsistent or unclear local variable names lead to misunderstandings about what the variable represents. This\n  ambiguity leads to incorrect assumptions and, consequently, bugs in the code. \u003c/li\u003e\n  \u003cli\u003e Collaboration Difficulties: in a team setting, inconsistent naming conventions lead to confusion and miscommunication among team members. \u003c/li\u003e\n  \u003cli\u003e Difficulty in Code Maintenance: inconsistent naming leads to an inconsistent codebase. The code is difficult to understand, and making changes\n  feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, not adhering to a naming convention for local variables can lead to confusion, errors, and inefficiencies, making the code harder to\nread, understand, and maintain.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eFirst, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e, bringing the following constraints:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Camel casing, starting with a lowercase character, for example backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, for example id, productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lowercased, for example html \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nModule Module1\n    Sub Main()\n        Dim Foo \u003d 0 \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d 0 \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/program-structure/naming-conventions\"\u003eVisual\n  Basic Naming Conventions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\"\u003eNaming Convention (programming)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eRelated rules\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S101} - Class names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S114} - Interface names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S119} - Generic type parameter names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S1542} - Functions and procedures should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S1654} - Method parameters should follow a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2304} - Namespace names should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2342} - Enumeration types should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2343} - Enumeration values should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2347} - Event handlers should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2348} - Events should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2362} - Private constants should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2363} - \"Private Shared ReadOnly\" fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2364} - \"Private\" fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2366} - Properties should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2367} - Non-private constants should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2369} - Non-private fields should comply with a naming convention \u003c/li\u003e\n  \u003cli\u003e {rule:vbnet:S2370} - Non-private \"Shared ReadOnly\" fields should comply with a naming convention \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the local variable names against.",
        "defaultValue": "^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S114",
    "name": "Interface names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\u003c/p\u003e\n\u003cp\u003eThis rule allows to check that all interface names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Must start with an upper case \u0027I\u0027 character, e.g. IFoo \u003c/li\u003e\n  \u003cli\u003e Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. IFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. IFooHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nInterface Foo  \u0027 Noncompliant\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInterface IFoo \u0027 Compliant\nEnd Interface\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\u003c/p\u003e\n\u003cp\u003eThis rule allows to check that all interface names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Must start with an upper case \u0027I\u0027 character, e.g. IFoo \u003c/li\u003e\n  \u003cli\u003e Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. IFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. IFooHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nInterface Foo  \u0027 Noncompliant\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInterface IFoo \u0027 Compliant\nEnd Interface\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the interface names against.",
        "defaultValue": "^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3603",
    "name": "Methods with \"Pure\" attribute should return a value",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMarking a method with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e\u003c/a\u003e\nattribute indicates that the method doesn’t make any visible state changes. Therefore, a \u003ccode\u003ePure\u003c/code\u003e method should return a result otherwise it\nindicates a no-operation call.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ePure\u003c/code\u003e on a \u003ccode\u003evoid\u003c/code\u003e method is either by mistake or the method is not doing a meaningful task.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Person\n    Private age As Integer\n\n    \u0026lt;Pure\u0026gt; \u0027 Noncompliant: The method makes a state change\n    Private Sub ConfigureAge(ByVal age As Integer)\n        Me.age \u003d age\n    End Sub\n\n    \u0026lt;Pure\u0026gt;\n    Private Sub WriteAge() \u0027 Noncompliant\n        Console.WriteLine(Me.age)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Person\n    Private age As Integer\n\n    Private Sub ConfigureAge(ByVal age As Integer)\n        Me.age \u003d age\n    End Sub\n\n    \u0026lt;Pure\u0026gt;\n    Private Function Age() As Integer\n        Return Me.age\n    End Function\n\n    \u0027 or remove Pure attribute from the method\n\n    Private Sub WriteAge()\n        Console.WriteLine(Me.age)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003ePureAttribute Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMarking a method with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003e\u003ccode\u003ePure\u003c/code\u003e\u003c/a\u003e\nattribute indicates that the method doesn’t make any visible state changes. Therefore, a \u003ccode\u003ePure\u003c/code\u003e method should return a result otherwise it\nindicates a no-operation call.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ePure\u003c/code\u003e on a \u003ccode\u003evoid\u003c/code\u003e method is either by mistake or the method is not doing a meaningful task.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Person\n    Private age As Integer\n\n    \u0026lt;Pure\u0026gt; \u0027 Noncompliant: The method makes a state change\n    Private Sub ConfigureAge(ByVal age As Integer)\n        Me.age \u003d age\n    End Sub\n\n    \u0026lt;Pure\u0026gt;\n    Private Sub WriteAge() \u0027 Noncompliant\n        Console.WriteLine(Me.age)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Person\n    Private age As Integer\n\n    Private Sub ConfigureAge(ByVal age As Integer)\n        Me.age \u003d age\n    End Sub\n\n    \u0026lt;Pure\u0026gt;\n    Private Function Age() As Integer\n        Return Me.age\n    End Function\n\n    \u0027 or remove Pure attribute from the method\n\n    Private Sub WriteAge()\n        Console.WriteLine(Me.age)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.contracts.pureattribute\"\u003ePureAttribute Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3966",
    "name": "Objects should not be disposed more than once",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDisposing an object twice in the same method, either with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/using-statement\"\u003eUsing statement\u003c/a\u003e or by calling\n\u003ccode\u003eDispose\u003c/code\u003e directly, is confusing and error-prone. For example, another developer might try to use an already-disposed object, or there can\nbe runtime errors for specific paths in the code.\u003c/p\u003e\n\u003cp\u003eIn addition, even if the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003edocumentation\u003c/a\u003e explicitly states that\ncalling the \u003ccode\u003eDispose\u003c/code\u003e method multiple times should not throw an exception, some implementations still do it. Thus it is safer to not\ndispose of an object twice when possible.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim foo As New Disposable()\nfoo.Dispose()\nfoo.Dispose() \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nUsing bar As New Disposable()  \u0027 Noncompliant\n    bar.Dispose()\nEnd Using\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim foo As New Disposable()\nfoo.Dispose()\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nUsing bar As New Disposable()  \u0027 Compliant\n\nEnd Using\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003eDispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iasyncdisposable.disposeasync\"\u003eDisposeAsync method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/using-statement\"\u003eUsing statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDisposing an object twice in the same method, either with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/using-statement\"\u003eUsing statement\u003c/a\u003e or by calling\n\u003ccode\u003eDispose\u003c/code\u003e directly, is confusing and error-prone. For example, another developer might try to use an already-disposed object, or there can\nbe runtime errors for specific paths in the code.\u003c/p\u003e\n\u003cp\u003eIn addition, even if the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003edocumentation\u003c/a\u003e explicitly states that\ncalling the \u003ccode\u003eDispose\u003c/code\u003e method multiple times should not throw an exception, some implementations still do it. Thus it is safer to not\ndispose of an object twice when possible.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim foo As New Disposable()\nfoo.Dispose()\nfoo.Dispose() \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nUsing bar As New Disposable()  \u0027 Noncompliant\n    bar.Dispose()\nEnd Using\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim foo As New Disposable()\nfoo.Dispose()\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nUsing bar As New Disposable()  \u0027 Compliant\n\nEnd Using\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose#System_IDisposable_Dispose\"\u003eDispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iasyncdisposable.disposeasync\"\u003eDisposeAsync method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync\"\u003eImplement a DisposeAsync method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/using-statement\"\u003eUsing statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "confusing",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2757",
    "name": "Non-existent operators like \"\u003d+\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e or \u003ccode\u003e\u003d-\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e or \u003ccode\u003e-\u003d\u003c/code\u003e) is\nconfusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nDim target As Integer \u003d -5\nDim num As Integer \u003d 3\n\ntarget \u003d- num \u0027 Noncompliant: target \u003d -3. Is that the intended behavior?\ntarget \u003d+ num \u0027 Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e or \u003ccode\u003e\u003d-\u003c/code\u003e are used without any space between the operators and when there is at least one\nwhitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nDim num As Integer \u003d 3\n\ntarget -\u003d num  \u0027 target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nDim num As Integer \u003d 3\n\ntarget \u003d -num  // target \u003d -3\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing operator pairs (\u003ccode\u003e\u003d+\u003c/code\u003e or \u003ccode\u003e\u003d-\u003c/code\u003e) that look like reversed single operators (\u003ccode\u003e+\u003d\u003c/code\u003e or \u003ccode\u003e-\u003d\u003c/code\u003e) is\nconfusing. They compile and run but do not produce the same result as their mirrored counterpart.\u003c/p\u003e\n\u003cpre\u003e\nDim target As Integer \u003d -5\nDim num As Integer \u003d 3\n\ntarget \u003d- num \u0027 Noncompliant: target \u003d -3. Is that the intended behavior?\ntarget \u003d+ num \u0027 Noncompliant: target \u003d 3\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e\u003d+\u003c/code\u003e or \u003ccode\u003e\u003d-\u003c/code\u003e are used without any space between the operators and when there is at least one\nwhitespace after.\u003c/p\u003e\n\u003cp\u003eReplace the operators with a single one if that is the intention\u003c/p\u003e\n\u003cpre\u003e\nDim num As Integer \u003d 3\n\ntarget -\u003d num  \u0027 target \u003d -8\n\u003c/pre\u003e\n\u003cp\u003eOr fix the spacing to avoid confusion\u003c/p\u003e\n\u003cpre\u003e\nDim num As Integer \u003d 3\n\ntarget \u003d -num  // target \u003d -3\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2077",
    "name": "Formatting SQL queries is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW",
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFormatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn’t detect SQL injections (unlike rule {rule:vbnet:S3649}), the goal is only to highlight complex/formatted queries.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Some parts of the query come from untrusted values (like user inputs). \u003c/li\u003e\n  \u003cli\u003e The query is repeated/duplicated in other parts of the code. \u003c/li\u003e\n  \u003cli\u003e The application must support different types of relational databases. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPublic Sub SqlCommands(ByVal connection As SqlConnection, ByVal query As String, ByVal param As String)\n    Dim sensitiveQuery As String \u003d String.Concat(query, param)\n    command \u003d New SqlCommand(sensitiveQuery) \u0027 Sensitive\n\n    command.CommandText \u003d sensitiveQuery \u0027 Sensitive\n\n    Dim adapter As SqlDataAdapter\n    adapter \u003d New SqlDataAdapter(sensitiveQuery, connection) \u0027 Sensitive\nEnd Sub\n\nPublic Sub Foo(ByVal context As DbContext, ByVal query As String, ByVal param As String)\n    Dim sensitiveQuery As String \u003d String.Concat(query, param)\n    context.Database.ExecuteSqlCommand(sensitiveQuery) \u0027 Sensitive\n\n    context.Query(Of User)().FromSql(sensitiveQuery) \u0027 Sensitive\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\"\u003eparameterized queries, prepared\n  statements, or stored procedures\u003c/a\u003e and bind variables to SQL query parameters. \u003c/li\u003e\n  \u003cli\u003e Consider using ORM frameworks if there is a need to have an abstract layer to access data. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPublic Sub Foo(ByVal context As DbContext, ByVal value As String)\n    context.Database.ExecuteSqlCommand(\"SELECT * FROM mytable WHERE mycol\u003d@p0\", value) \u0027 Compliant, the query is parameterized\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eTop 10 2021 Category A3 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\u003eTop 10 2017 Category A1 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/20\"\u003eCWE-20 - Improper Input Validation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89\"\u003eCWE-89 - Improper Neutralization of Special Elements used in an SQL Command\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rules \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\"\u003ePotential SQL/JPQL Injection\n  (JPA)\u003c/a\u003e, \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\"\u003ePotential SQL/JDOQL Injection (JDO)\u003c/a\u003e, \u003ca\n  href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\"\u003ePotential SQL/HQL Injection (Hibernate)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice",
      "cwe",
      "sql"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "vbnet:S122",
    "name": "Statements should be on separate lines",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d 0 : Dim b \u003d 0  \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d 0\nDim b \u003d 0\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePutting multiple statements on a single line lowers the code readability and makes debugging the code more complex.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d 0 : Dim b \u003d 0  \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWrite one statement per line to improve readability.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d 0\nDim b \u003d 0\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4136",
    "name": "Method overloads should be grouped together",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInterface IMyInterface\n    Function DoTheThing() As Integer\n    Function DoTheOtherThing() As String // Noncompliant\n    Function DoTheThing(ByVal Path As String) As Integer\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInterface IMyInterface\n    Function DoTheThing() As Integer\n    Function DoTheThing(ByVal Path As String) As Integer\n    Function DoTheOtherThing() As String\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAs it is common practice to group method declarations by implemented interface, no issue will be raised for interface implementations if grouped\ntogether with other members of that interface.\u003c/p\u003e\n\u003cp\u003eAs it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different\naccess modifiers.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\nClass MyClass\n\n    Private Sub DoTheThing(s As String) \u0027 Ok - this method is declared as Private while the other one is Public\n        \u0027 ...\n    End Sub\n\n    Private Sub DoTheOtherThing(s As String)\n        \u0027 ...\n    End Sub\n\n    Public Sub DoTheThing()\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFor clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nInterface IMyInterface\n    Function DoTheThing() As Integer\n    Function DoTheOtherThing() As String // Noncompliant\n    Function DoTheThing(ByVal Path As String) As Integer\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nInterface IMyInterface\n    Function DoTheThing() As Integer\n    Function DoTheThing(ByVal Path As String) As Integer\n    Function DoTheOtherThing() As String\nEnd Interface\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eAs it is common practice to group method declarations by implemented interface, no issue will be raised for interface implementations if grouped\ntogether with other members of that interface.\u003c/p\u003e\n\u003cp\u003eAs it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different\naccess modifiers.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\nClass MyClass\n\n    Private Sub DoTheThing(s As String) \u0027 Ok - this method is declared as Private while the other one is Public\n        \u0027 ...\n    End Sub\n\n    Private Sub DoTheOtherThing(s As String)\n        \u0027 ...\n    End Sub\n\n    Public Sub DoTheThing()\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1541",
    "name": "Functions, procedures and properties should not be too complex",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in\nany case be difficult to understand and therefore to maintain.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in\nany case be difficult to understand and therefore to maintain.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumFunctionComplexityThreshold": {
        "key": "maximumFunctionComplexityThreshold",
        "name": "maximumFunctionComplexityThreshold",
        "description": "The maximum authorized complexity.",
        "defaultValue": "10",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFunctionComplexityThreshold": "10"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1542",
    "name": "Functions and procedures should comply with a naming convention",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e Event handlers with a handles clause and two-parameter methods with \u003ccode\u003eEventArgs\u003c/code\u003e second parameter are not covered by this rule. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n  Sub bad_subroutine()                      \u0027 Noncompliant\n  End Sub\n\n  Public Function Bad_Function() As Integer \u0027 Noncompliant\n    Return 42\n  End Function\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub GoodSubroutine()                      \u0027 Compliant\n  End Sub\n\n  Public Function GoodFunction() As Integer \u0027 Compliant\n    Return 42\n  End Function\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e Event handlers with a handles clause and two-parameter methods with \u003ccode\u003eEventArgs\u003c/code\u003e second parameter are not covered by this rule. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n  Sub bad_subroutine()                      \u0027 Noncompliant\n  End Sub\n\n  Public Function Bad_Function() As Integer \u0027 Noncompliant\n    Return 42\n  End Function\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub GoodSubroutine()                      \u0027 Compliant\n  End Sub\n\n  Public Function GoodFunction() As Integer \u0027 Compliant\n    Return 42\n  End Function\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the function names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1301",
    "name": "\"Select\" statements should have at least 3 \"Case\" clauses",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eFor just one or two cases, however, the code will be more readable with \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case variable\n    Case 0\n        doSomething()\n    Case Else\n        doSomethingElse()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf variable \u003d 0 Then\n    doSomething()\nElse\n    doSomethingElse()\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eFor just one or two cases, however, the code will be more readable with \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case variable\n    Case 0\n        doSomething()\n    Case Else\n        doSomethingElse()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf variable \u003d 0 Then\n    doSomething()\nElse\n    doSomethingElse()\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S108",
    "name": "Nested blocks of code should not be left empty",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nFor Index As Integer \u003d 1 To 42 \u0027 Noncompliant: is the block empty on purpose, or is code missing?\nNext\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.\u003c/p\u003e\n\u003cpre\u003e\nFor Index As Integer \u003d 1 To 42 \u0027 Noncompliant: is the block empty on purpose, or is code missing?\nNext\n\u003c/pre\u003e\n\u003cp\u003eRemoving or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores code blocks that contain comments.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S107",
    "name": "Procedures should not have too many parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProcedures with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nSub SetCoordinates(x1 As Integer, y1 As Integer, z1 As Integer, x2 As Integer, y2 As Integer, z2 As Integer) \u0027 Noncompliant\n    \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the procedure into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n\u0027 Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nSub SetOrigin(x As Integer, y As Integer, z As Integer)\n   \u0027 ...\nEnd Sub\n\nSub SetSize(width As Integer, height As Integer, depth As Integer)\n   \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nClass Point \u0027 In geometry, Point is a logical structure to group data\n\n    Public x As Integer\n    Public y As Integer\n    Public z As Integer\n\nEnd Class\n\nSub SetCoordinates(p1 As Point, p2 As Point)\n    \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a procedure has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not count the parameters intended for a base class constructor.\u003c/p\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\nClass BaseClass\n\n    Sub New(Param1 As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\nClass DerivedClass\n    Inherits BaseClass\n\n    Public Sub New(Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Long)\n    \u0027 Compliant by exception: Param1 is used in the base class constructor, so it does not count in the sum of the parameter list.\n        MyBase.New(Param1)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProcedures with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their\nposition.\u003c/p\u003e\n\u003cpre\u003e\nSub SetCoordinates(x1 As Integer, y1 As Integer, z1 As Integer, x2 As Integer, y2 As Integer, z2 As Integer) \u0027 Noncompliant\n    \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThe solution can be to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Split the procedure into smaller ones \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n\u0027 Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nSub SetOrigin(x As Integer, y As Integer, z As Integer)\n   \u0027 ...\nEnd Sub\n\nSub SetSize(width As Integer, height As Integer, depth As Integer)\n   \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nClass Point \u0027 In geometry, Point is a logical structure to group data\n\n    Public x As Integer\n    Public y As Integer\n    Public z As Integer\n\nEnd Class\n\nSub SetCoordinates(p1 As Point, p2 As Point)\n    \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when a procedure has more parameters than the provided threshold.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule does not count the parameters intended for a base class constructor.\u003c/p\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\nClass BaseClass\n\n    Sub New(Param1 As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\nClass DerivedClass\n    Inherits BaseClass\n\n    Public Sub New(Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Long)\n    \u0027 Compliant by exception: Param1 is used in the base class constructor, so it does not count in the sum of the parameter list.\n        MyBase.New(Param1)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized number of parameters",
        "defaultValue": "7",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "7"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S104",
    "name": "Files should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumFileLocThreshold": {
        "key": "maximumFileLocThreshold",
        "name": "maximumFileLocThreshold",
        "description": "Maximum authorized lines in a file.",
        "defaultValue": "1000",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumFileLocThreshold": "1000"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5693",
    "name": "Allowing requests with excessive content length is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eRejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevent DoS attacks.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e size limits are not defined for the different resources of the web application. \u003c/li\u003e\n  \u003cli\u003e the web application is not protected by \u003ca href\u003d\"https://en.wikipedia.org/wiki/Rate_limiting\"\u003erate limiting\u003c/a\u003e features. \u003c/li\u003e\n  \u003cli\u003e the web application infrastructure has limited resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Mvc\n\nPublic Class MyController\n    Inherits Controller\n\n    \u0026lt;HttpPost\u0026gt;\n    \u0026lt;DisableRequestSizeLimit\u0026gt; \u0027 Sensitive: No size  limit\n    \u0026lt;RequestSizeLimit(10485760)\u0026gt; \u0027 Sensitive: 10485760 B \u003d 10240 KB \u003d 10 MB is more than the recommended limit of 8MB\n    Public Function PostRequest(Model model) As IActionResult\n    \u0027 ...\n    End Function\n\n    \u0026lt;HttpPost\u0026gt;\n    \u0026lt;RequestFormLimits(MultipartBodyLengthLimit \u003d 10485760)\u0026gt; \u0027 Sensitive: 10485760 B \u003d 10240 KB \u003d 10 MB is more than the recommended limit of 8MB\n    Public Function MultipartFormRequest(Model model) As IActionResult\n    \u0027 ...\n    End Function\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For most of the features of an application, it is recommended to limit the size of requests to:\n    \u003cul\u003e\n      \u003cli\u003e lower or equal to 8mb for file uploads. \u003c/li\u003e\n      \u003cli\u003e lower or equal to 2mb for other requests. \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is recommended to customize the rule with the limit values that correspond to the web application.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Mvc\n\nPublic Class MyController\n    Inherits Controller\n\n    \u0026lt;HttpPost\u0026gt;\n    \u0026lt;RequestSizeLimit(8388608)\u0026gt; \u0027 Compliant: 8388608 B \u003d 8192 KB \u003d 8 MB\n    Public Function PostRequest(Model model) As IActionResult\n    \u0027 ...\n    End Function\n\n    \u0026lt;HttpPost\u0026gt;\n    \u0026lt;RequestFormLimits(MultipartBodyLengthLimit \u003d 8388608)\u0026gt; \u0027 Compliant: 8388608 B \u003d 8192 KB \u003d 8 MB\n    Public Function MultipartFormRequest(Model model) AS IActionResult\n    \u0027 ...\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html\"\u003eOwasp Cheat Sheet\u003c/a\u003e - Owasp Denial of Service\n  Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/770\"\u003eCWE-770 - Allocation of Resources Without Limits or Throttling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/400\"\u003eCWE-400 - Uncontrolled Resource Consumption\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "fileUploadSizeLimit": {
        "key": "fileUploadSizeLimit",
        "name": "fileUploadSizeLimit",
        "description": "The maximum size of HTTP requests handling file uploads (in bytes).",
        "defaultValue": "8388608",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "fileUploadSizeLimit": "8388608"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "vbnet:S105",
    "name": "Tabulation characters should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.\u003c/p\u003e\n\u003cp\u003eThat is why using spaces is preferable.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S103",
    "name": "Lines should not be too long",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eScrolling horizontally to see a full line of code lowers the code readability.\u003c/p\u003e"
      }
    ],
    "params": {
      "maximumLineLength": {
        "key": "maximumLineLength",
        "name": "maximumLineLength",
        "description": "The maximum authorized line length.",
        "defaultValue": "200",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumLineLength": "200"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S907",
    "name": "\"GoTo\" statements should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eGoTo\u003c/code\u003e is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas \u003ccode\u003eIf\u003c/code\u003e, \u003ccode\u003eFor\u003c/code\u003e, \u003ccode\u003eWhile\u003c/code\u003e, or \u003ccode\u003eExit\u003c/code\u003e should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    Sub GoToStatementDemo()\n        Dim number As Integer \u003d 1\n        Dim sampleString As String\n        \u0027 Evaluate number and branch to appropriate label.\n        If number \u003d 1 Then GoTo Line1 Else GoTo Line2\nLine1:\n        sampleString \u003d \"Number equals 1\"\n        GoTo LastLine\nLine2:\n        \u0027 The following statement never gets executed because number \u003d 1.\n        sampleString \u003d \"Number equals 2\"\nLastLine:\n        \u0027 Write \"Number equals 1\" in the Debug window.\n        Debug.WriteLine(sampleString)\n    End Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    Sub GoToStatementDemo()\n        Dim number As Integer \u003d 1\n        Dim sampleString As String\n        \u0027 Evaluate number and branch to appropriate label.\n        If number \u003d 1 Then\n            sampleString \u003d \"Number equals 1\"\n        Else\n            sampleString \u003d \"Number equals 2\"\n        End If\n        Debug.WriteLine(sampleString)\n    End Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eGoTo\u003c/code\u003e is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas \u003ccode\u003eIf\u003c/code\u003e, \u003ccode\u003eFor\u003c/code\u003e, \u003ccode\u003eWhile\u003c/code\u003e, or \u003ccode\u003eExit\u003c/code\u003e should be used instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n    Sub GoToStatementDemo()\n        Dim number As Integer \u003d 1\n        Dim sampleString As String\n        \u0027 Evaluate number and branch to appropriate label.\n        If number \u003d 1 Then GoTo Line1 Else GoTo Line2\nLine1:\n        sampleString \u003d \"Number equals 1\"\n        GoTo LastLine\nLine2:\n        \u0027 The following statement never gets executed because number \u003d 1.\n        sampleString \u003d \"Number equals 2\"\nLastLine:\n        \u0027 Write \"Number equals 1\" in the Debug window.\n        Debug.WriteLine(sampleString)\n    End Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n    Sub GoToStatementDemo()\n        Dim number As Integer \u003d 1\n        Dim sampleString As String\n        \u0027 Evaluate number and branch to appropriate label.\n        If number \u003d 1 Then\n            sampleString \u003d \"Number equals 1\"\n        Else\n            sampleString \u003d \"Number equals 2\"\n        End If\n        Debug.WriteLine(sampleString)\n    End Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1656",
    "name": "Variables should not be self-assigned",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub SetName(name As String)\n  name \u003d name \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub SetName(name As String)\n  Me.name \u003d name \u0027 Compliant\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub SetName(name As String)\n  name \u003d name \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub SetName(name As String)\n  Me.name \u003d name \u0027 Compliant\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1659",
    "name": "Multiple variables should not be declared on the same line",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDeclaring multiple variable on one line is difficult to read.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Public Const AAA As Integer \u003d 5, BBB \u003d 42, CCC As String \u003d \"foo\"  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Public Const AAA As Integer \u003d 5\n  Public Const BBB \u003d 42\n  Public Const CCC as String \u003d \"foo\"\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDeclaring multiple variable on one line is difficult to read.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Public Const AAA As Integer \u003d 5, BBB \u003d 42, CCC As String \u003d \"foo\"  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Public Const AAA As Integer \u003d 5\n  Public Const BBB \u003d 42\n  Public Const CCC as String \u003d \"foo\"\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S112",
    "name": "General or reserved exceptions should never be thrown",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eThis rule raises an issue when a generic exception (such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e,\n\u003ccode\u003eApplicationException\u003c/code\u003e, \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e, \u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or\n\u003ccode\u003eExecutionEngineException\u003c/code\u003e) is thrown.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThrowing general exceptions such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e and \u003ccode\u003eApplicationException\u003c/code\u003e will have a negative\nimpact on any code trying to catch these exceptions.\u003c/p\u003e\n\u003cp\u003eFrom a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally not be\ncaught and let to propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers\nto catch exceptions they do not intend to handle, which they then have to re-throw.\u003c/p\u003e\n\u003cp\u003eBesides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.\u003c/p\u003e\n\u003cp\u003eFor instance, if an exception such as \u003ccode\u003eStackOverflowException\u003c/code\u003e is caught and not re-thrown, it may prevent the program from terminating\ngracefully.\u003c/p\u003e\n\u003cp\u003eWhen throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.\u003c/p\u003e\n\u003cp\u003eAdditionally, some reserved exceptions should not be thrown manually. Exceptions such as \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e,\n\u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or \u003ccode\u003eExecutionEngineException\u003c/code\u003e will be thrown automatically by the\nruntime when the corresponding error occurs. Many of them indicate serious errors, which the application may not be able to recover from. It is\ntherefore recommended to avoid throwing them as well as using them as base classes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Throw a subtype of \u003ccode\u003eException\u003c/code\u003e when one matches. For instance \u003ccode\u003eArgumentException\u003c/code\u003e could be raised when an unexpected\n  argument is provided to a function. \u003c/li\u003e\n  \u003cli\u003e Define a custom exception type that derives from \u003ccode\u003eException\u003c/code\u003e or one of its subclasses. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    \u0027 Noncompliant\n    Throw New NullReferenceException(\"obj\") \u0027 Noncompliant: This reserved exception should not be thrown manually\n  End If\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    Throw New ArgumentNullException(\"obj\") \u0027 Compliant: this is a specific and non-reserved exception type\n  End If\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397\"\u003eCWE-397 Declaration of Throws for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when a generic exception (such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e,\n\u003ccode\u003eApplicationException\u003c/code\u003e, \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e, \u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or\n\u003ccode\u003eExecutionEngineException\u003c/code\u003e) is thrown.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThrowing general exceptions such as \u003ccode\u003eException\u003c/code\u003e, \u003ccode\u003eSystemException\u003c/code\u003e and \u003ccode\u003eApplicationException\u003c/code\u003e will have a negative\nimpact on any code trying to catch these exceptions.\u003c/p\u003e\n\u003cp\u003eFrom a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally not be\ncaught and let to propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers\nto catch exceptions they do not intend to handle, which they then have to re-throw.\u003c/p\u003e\n\u003cp\u003eBesides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.\u003c/p\u003e\n\u003cp\u003eFor instance, if an exception such as \u003ccode\u003eStackOverflowException\u003c/code\u003e is caught and not re-thrown, it may prevent the program from terminating\ngracefully.\u003c/p\u003e\n\u003cp\u003eWhen throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.\u003c/p\u003e\n\u003cp\u003eAdditionally, some reserved exceptions should not be thrown manually. Exceptions such as \u003ccode\u003eIndexOutOfRangeException\u003c/code\u003e,\n\u003ccode\u003eNullReferenceException\u003c/code\u003e, \u003ccode\u003eOutOfMemoryException\u003c/code\u003e or \u003ccode\u003eExecutionEngineException\u003c/code\u003e will be thrown automatically by the\nruntime when the corresponding error occurs. Many of them indicate serious errors, which the application may not be able to recover from. It is\ntherefore recommended to avoid throwing them as well as using them as base classes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Throw a subtype of \u003ccode\u003eException\u003c/code\u003e when one matches. For instance \u003ccode\u003eArgumentException\u003c/code\u003e could be raised when an unexpected\n  argument is provided to a function. \u003c/li\u003e\n  \u003cli\u003e Define a custom exception type that derives from \u003ccode\u003eException\u003c/code\u003e or one of its subclasses. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    \u0027 Noncompliant\n    Throw New NullReferenceException(\"obj\") \u0027 Noncompliant: This reserved exception should not be thrown manually\n  End If\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    Throw New ArgumentNullException(\"obj\") \u0027 Compliant: this is a specific and non-reserved exception type\n  End If\n  \u0027 ...\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397\"\u003eCWE-397 Declaration of Throws for Generic Exception\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2068",
    "name": "Hard-coded credentials are security-sensitive",
    "defaultSeverity": "BLOCKER",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBecause it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.\u003c/p\u003e\n\u003cp\u003eIn the past, it has led to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2019-13466\"\u003eCVE-2019-13466\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-15389\"\u003eCVE-2018-15389\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.\u003c/p\u003e\n\u003cp\u003eIt’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Issue is not raised when URI username and password are the same. \u003c/li\u003e\n  \u003cli\u003e Issue is not raised when searched pattern is found in variable name and value. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Credentials allow access to a sensitive component like a database, a file storage, an API or a service. \u003c/li\u003e\n  \u003cli\u003e Credentials are used in production environments. \u003c/li\u003e\n  \u003cli\u003e Application re-distribution is required before updating the credentials. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nDim username As String \u003d \"admin\"\nDim password As String \u003d \"Password123\" \u0027 Sensitive\nDim usernamePassword As String \u003d \"user\u003dadmin\u0026amp;password\u003dPassword123\" \u0027 Sensitive\nDim url As String \u003d \"scheme://user:Admin123@domain.com\" \u0027 Sensitive\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Store the credentials in a configuration file that is not pushed to the code repository. \u003c/li\u003e\n  \u003cli\u003e Store the credentials in a database. \u003c/li\u003e\n  \u003cli\u003e Use your cloud provider’s service for managing secrets. \u003c/li\u003e\n  \u003cli\u003e If a password has been disclosed through the source code: change it. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nDim username As String \u003d \"admin\"\nDim password As String \u003d GetEncryptedPassword()\nDim usernamePassword As String \u003d String.Format(\"user\u003d{0}\u0026amp;password\u003d{1}\", GetEncryptedUsername(), GetEncryptedPassword())\nDim url As String \u003d $\"scheme://{username}:{password}@domain.com\"\n\nDim url2 As String\u003d \"http://guest:guest@domain.com\" \u0027 Compliant\nConst Password_Property As String \u003d \"custom.password\" \u0027 Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eTop 10 2021 Category A7 - Identification and\n  Authentication Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"\u003eTop 10 2017 Category A2 - Broken Authentication\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"\u003eHard Coded Password\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "credentialWords": {
        "key": "credentialWords",
        "name": "credentialWords",
        "description": "Comma separated list of words identifying potential credentials",
        "defaultValue": "password, passwd, pwd, passphrase",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "credentialWords": "password, passwd, pwd, passphrase"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "vbnet:S1654",
    "name": "Method parameters should follow a naming convention",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\u003c/p\u003e\n\u003cp\u003eThis rule allows to check that all parameter names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub GetSomething(ByVal ID As Integer) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub GetSomething(ByVal id As Integer) \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\u003c/p\u003e\n\u003cp\u003eThis rule allows to check that all parameter names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub GetSomething(ByVal ID As Integer) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub GetSomething(ByVal id As Integer) \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the parameter names against.",
        "defaultValue": "^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S139",
    "name": "Comments should not be located at the end of lines of code",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default comment pattern \u003ccode\u003e^\u0027\\s*\\S+\\s*$\u003c/code\u003e, which ignores single word comments:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Console.WriteLine(\"Hello, world!\") \u0027 Noncompliant - My first program!\n    Console.WriteLine(\"Hello, world!\") \u0027 CompliantOneWord\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    \u0027 Compliant - My first program!\n    Console.WriteLine(\"Hello, world!\")\n    Console.WriteLine(\"Hello, world!\") \u0027 CompliantOneWord\n  End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default comment pattern \u003ccode\u003e^\u0027\\s*\\S+\\s*$\u003c/code\u003e, which ignores single word comments:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Console.WriteLine(\"Hello, world!\") \u0027 Noncompliant - My first program!\n    Console.WriteLine(\"Hello, world!\") \u0027 CompliantOneWord\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    \u0027 Compliant - My first program!\n    Console.WriteLine(\"Hello, world!\")\n    Console.WriteLine(\"Hello, world!\") \u0027 CompliantOneWord\n  End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "legalCommentPattern": {
        "key": "legalCommentPattern",
        "name": "legalCommentPattern",
        "description": "Pattern for text of trailing comments that are allowed.",
        "defaultValue": "^\u0027\\s*\\S+\\s*$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "legalCommentPattern": "^\u0027\\s*\\S+\\s*$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2370",
    "name": "Non-private \"Shared ReadOnly\" fields should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private \u003ccode\u003eShared ReadOnly\u003c/code\u003e fields names\nmatch a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Public Shared ReadOnly foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Shared ReadOnly Foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private \u003ccode\u003eShared ReadOnly\u003c/code\u003e fields names\nmatch a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Public Shared ReadOnly foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Shared ReadOnly Foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the non-private \u0027Shared ReadOnly\u0027 field names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4792",
    "name": "Configuring loggers is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003cp\u003eConfiguring loggers is security-sensitive. It has led in the past to the following vulnerabilities:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2018-0285\"\u003eCVE-2018-0285\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2000-1127\"\u003eCVE-2000-1127\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2017-15113\"\u003eCVE-2017-15113\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"http://cve.mitre.org/cgi-bin/cvename.cgi?name\u003dCVE-2015-5742\"\u003eCVE-2015-5742\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLogs are useful before, during and after a security incident.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. \u003c/li\u003e\n  \u003cli\u003e In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLogs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.\u003c/p\u003e\n\u003cp\u003eThis rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. \u003c/li\u003e\n  \u003cli\u003e the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. \u003c/li\u003e\n  \u003cli\u003e the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. \u003c/li\u003e\n  \u003cli\u003e the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. \u003c/li\u003e\n  \u003cli\u003e the logs are only stored locally instead of being backuped or replicated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e.Net Core\u003c/strong\u003e: configure programmatically\u003c/p\u003e\n\u003cpre\u003e\nImports System\nImports System.Collections\nImports System.Collections.Generic\nImports Microsoft.AspNetCore\nImports Microsoft.AspNetCore.Builder\nImports Microsoft.AspNetCore.Hosting\nImports Microsoft.Extensions.Configuration\nImports Microsoft.Extensions.DependencyInjection\nImports Microsoft.Extensions.Logging\nImports Microsoft.Extensions.Options\n\nNamespace MvcApp\n\n    Public Class ProgramLogging\n\n        Public Shared Function CreateWebHostBuilder(args As String()) As IWebHostBuilder\n\n            WebHost.CreateDefaultBuilder(args) _\n                .ConfigureLogging(Function(hostingContext, Logging) \u0027 Sensitive\n                                      \u0027 ...\n                                  End Function) _\n            .UseStartup(Of StartupLogging)()\n\n            \u0027...\n        End Function\n    End Class\n\n\n    Public Class StartupLogging\n\n        Public Sub ConfigureServices(services As IServiceCollection)\n\n            services.AddLogging(Function(logging) \u0027 Sensitive\n                                    \u0027...\n                                End Function)\n        End Sub\n\n        Public Sub Configure(app As IApplicationBuilder, env As IHostingEnvironment, loggerFactory As ILoggerFactory)\n\n            Dim config As IConfiguration \u003d Nothing\n            Dim level As LogLevel \u003d LogLevel.Critical\n            Dim includeScopes As Boolean \u003d False\n            Dim filter As Func(Of String, Microsoft.Extensions.Logging.LogLevel, Boolean) \u003d Nothing\n            Dim consoleSettings As Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings \u003d Nothing\n            Dim azureSettings As Microsoft.Extensions.Logging.AzureAppServices.AzureAppServicesDiagnosticsSettings \u003d Nothing\n            Dim eventLogSettings As Microsoft.Extensions.Logging.EventLog.EventLogSettings \u003d Nothing\n\n            \u0027 An issue will be raised for each call to an ILoggerFactory extension methods adding loggers.\n            loggerFactory.AddAzureWebAppDiagnostics() \u0027 Sensitive\n            loggerFactory.AddAzureWebAppDiagnostics(azureSettings) \u0027 Sensitive\n            loggerFactory.AddConsole() \u0027 Sensitive\n            loggerFactory.AddConsole(level) \u0027 Sensitive\n            loggerFactory.AddConsole(level, includeScopes) \u0027 Sensitive\n            loggerFactory.AddConsole(filter) \u0027 Sensitive\n            loggerFactory.AddConsole(filter, includeScopes) \u0027 Sensitive\n            loggerFactory.AddConsole(config) \u0027 Sensitive\n            loggerFactory.AddConsole(consoleSettings) \u0027 Sensitive\n            loggerFactory.AddDebug() \u0027 Sensitive\n            loggerFactory.AddDebug(level) \u0027 Sensitive\n            loggerFactory.AddDebug(filter) \u0027 Sensitive\n            loggerFactory.AddEventLog() \u0027 Sensitive\n            loggerFactory.AddEventLog(eventLogSettings) \u0027 Sensitive\n            loggerFactory.AddEventLog(level) \u0027 Sensitive\n            \u0027 Only available for NET Standard 2.0 and above\n            \u0027loggerFactory.AddEventSourceLogger() \u0027 Sensitive\n\n            Dim providers As IEnumerable(Of ILoggerProvider) \u003d Nothing\n            Dim filterOptions1 As LoggerFilterOptions \u003d Nothing\n            Dim filterOptions2 As IOptionsMonitor(Of LoggerFilterOptions) \u003d Nothing\n\n            Dim factory As LoggerFactory \u003d New LoggerFactory() \u0027 Sensitive\n            factory \u003d New LoggerFactory(providers) \u0027 Sensitive\n            factory \u003d New LoggerFactory(providers, filterOptions1) \u0027 Sensitive\n            factory \u003d New LoggerFactory(providers, filterOptions2) \u0027 Sensitive\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eLog4Net\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\nImports System\nImports System.IO\nImports System.Xml\nImports log4net.Appender\nImports log4net.Config\nImports log4net.Repository\n\nNamespace Logging\n    Class Log4netLogging\n        Private Sub Foo(ByVal repository As ILoggerRepository, ByVal element As XmlElement, ByVal configFile As FileInfo, ByVal configUri As Uri, ByVal configStream As Stream, ByVal appender As IAppender, ParamArray appenders As IAppender())\n            log4net.Config.XmlConfigurator.Configure(repository) \u0027 Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, element) \u0027 Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configFile) \u0027 Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configUri) \u0027 Sensitive\n            log4net.Config.XmlConfigurator.Configure(repository, configStream) \u0027 Sensitive\n            log4net.Config.XmlConfigurator.ConfigureAndWatch(repository, configFile) \u0027 Sensitive\n\n            log4net.Config.DOMConfigurator.Configure() \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(element) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, element) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(configFile) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, configFile) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(configStream) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.Configure(repository, configStream) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.ConfigureAndWatch(configFile) \u0027 Sensitive\n            log4net.Config.DOMConfigurator.ConfigureAndWatch(repository, configFile) \u0027 Sensitive\n\n            log4net.Config.BasicConfigurator.Configure() \u0027 Sensitive\n            log4net.Config.BasicConfigurator.Configure(appender) \u0027 Sensitive\n            log4net.Config.BasicConfigurator.Configure(appenders) \u0027 Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository) \u0027 Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository, appender) \u0027 Sensitive\n            log4net.Config.BasicConfigurator.Configure(repository, appenders) \u0027 Sensitive\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNLog\u003c/strong\u003e: configure programmatically\u003c/p\u003e\n\u003cpre\u003e\nNamespace Logging\n    Class NLogLogging\n        Private Sub Foo(ByVal config As NLog.Config.LoggingConfiguration)\n            NLog.LogManager.Configuration \u003d config \u0027 Sensitive\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eSerilog\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\nNamespace Logging\n    Class SerilogLogging\n        Private Sub Foo()\n            Dim config As Serilog.LoggerConfiguration \u003d New Serilog.LoggerConfiguration() \u0027 Sensitive\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. \u003c/li\u003e\n  \u003cli\u003e Production logs should be stored in a secure location which is only accessible to system administrators. \u003c/li\u003e\n  \u003cli\u003e Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. \u003c/li\u003e\n  \u003cli\u003e Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. \u003c/li\u003e\n  \u003cli\u003e Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. \u003c/li\u003e\n  \u003cli\u003e Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRemember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. \u003c/li\u003e\n  \u003cli\u003e Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. \u003c/li\u003e\n  \u003cli\u003e Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. \u003c/li\u003e\n  \u003cli\u003e Monitor the logs for any suspicious activity. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eTop 10 2021 Category A9 - Security Logging and\n  Monitoring Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eTop 10 2017 Category A10 -\n  Insufficient Logging \u0026amp; Monitoring\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117\"\u003eCWE-117 - Improper Output Neutralization for Logs\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532\"\u003eCWE-532 - Information Exposure Through Log Files\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S138",
    "name": "Procedures should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA procedure that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch procedures inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller procedures which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller procedures will not only be easier to understand but also probably easier to test.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA procedure that grows too large tends to aggregate too many responsibilities.\u003c/p\u003e\n\u003cp\u003eSuch procedures inevitably become harder to understand and therefore harder to maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller procedures which focus on well-defined tasks.\u003c/p\u003e\n\u003cp\u003eThose smaller procedures will not only be easier to understand but also probably easier to test.\u003c/p\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum authorized lines of code in a method",
        "defaultValue": "80",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "80"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2372",
    "name": "Exceptions should not be thrown from property getters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperty getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod.\u003c/p\u003e\n\u003cp\u003eIt is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property Foo() As Integer\n        Get\n            Throw New Exception  \u0027 Non-Compliant\n        End Get\n        Set(ByVal value As Integer)\n            \u0027 ... some code ...\n        End Set\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub SetFoo(ByVal value As Integer)         \u0027 Compliant\n        \u0027 ... some code ...\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is raised when the thrown exception derives from or is of type \u003ccode\u003eNotImplementedException\u003c/code\u003e, \u003ccode\u003eNotSupportedException\u003c/code\u003e or\n\u003ccode\u003eInvalidOperationException\u003c/code\u003e.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperty getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod.\u003c/p\u003e\n\u003cp\u003eIt is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property Foo() As Integer\n        Get\n            Throw New Exception  \u0027 Non-Compliant\n        End Get\n        Set(ByVal value As Integer)\n            \u0027 ... some code ...\n        End Set\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub SetFoo(ByVal value As Integer)         \u0027 Compliant\n        \u0027 ... some code ...\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is raised when the thrown exception derives from or is of type \u003ccode\u003eNotImplementedException\u003c/code\u003e, \u003ccode\u003eNotSupportedException\u003c/code\u003e or\n\u003ccode\u003eInvalidOperationException\u003c/code\u003e.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "error-handling"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4790",
    "name": "Using weak hashing algorithms is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCryptographic hash algorithms such as \u003ccode\u003eMD2\u003c/code\u003e, \u003ccode\u003eMD4\u003c/code\u003e, \u003ccode\u003eMD5\u003c/code\u003e, \u003ccode\u003eMD6\u003c/code\u003e, \u003ccode\u003eHAVAL-128\u003c/code\u003e,\n\u003ccode\u003eHMAC-MD5\u003c/code\u003e, \u003ccode\u003eDSA\u003c/code\u003e (which uses \u003ccode\u003eSHA-1\u003c/code\u003e), \u003ccode\u003eRIPEMD\u003c/code\u003e, \u003ccode\u003eRIPEMD-128\u003c/code\u003e, \u003ccode\u003eRIPEMD-160\u003c/code\u003e,\n\u003ccode\u003eHMACRIPEMD160\u003c/code\u003e and \u003ccode\u003eSHA-1\u003c/code\u003e are no longer considered secure, because it is possible to have \u003ccode\u003ecollisions\u003c/code\u003e (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eThe hashed value is used in a security context like:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e User-password storage. \u003c/li\u003e\n  \u003cli\u003e Security token generation (used to confirm e-mail when registering on a website, reset password, etc …​). \u003c/li\u003e\n  \u003cli\u003e To compute some message integrity. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nImports System.Security.Cryptography\n\nSub ComputeHash()\n\n    \u0027 Review all instantiations of classes that inherit from HashAlgorithm, for example:\n    Dim hashAlgo As HashAlgorithm \u003d HashAlgorithm.Create() \u0027 Sensitive\n    Dim hashAlgo2 As HashAlgorithm \u003d HashAlgorithm.Create(\"SHA1\") \u0027 Sensitive\n    Dim sha As SHA1 \u003d New SHA1CryptoServiceProvider() \u0027 Sensitive\n    Dim md5 As MD5 \u003d New MD5CryptoServiceProvider() \u0027 Sensitive\n\n    \u0027 ...\nEnd Sub\n\nClass MyHashAlgorithm\n    Inherits HashAlgorithm \u0027 Sensitive\n\n    \u0027 ...\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eSafer alternatives, such as \u003ccode\u003eSHA-256\u003c/code\u003e, \u003ccode\u003eSHA-512\u003c/code\u003e, \u003ccode\u003eSHA-3\u003c/code\u003e are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like \u003ccode\u003ebcrypt\u003c/code\u003e, \u003ccode\u003escrypt\u003c/code\u003e, \u003ccode\u003eargon2\u003c/code\u003e or \u003ccode\u003epbkdf2\u003c/code\u003e\nbecause it slows down \u003ccode\u003ebrute force attacks\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nImports System.Security.Cryptography\n\nSub ComputeHash()\n    Dim sha256 \u003d New SHA256CryptoServiceProvider() \u0027 Compliant\n    Dim sha384 \u003d New SHA384CryptoServiceProvider() \u0027 Compliant\n    Dim sha512 \u003d New SHA512CryptoServiceProvider() \u0027 Compliant\n\n    \u0027 ...\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/1240\"\u003eCWE-1240 - Use of a Risky Cryptographic Primitive\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S3900",
    "name": "Arguments of public methods should be validated against Nothing",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMethods declared as \u003ccode\u003ePublic\u003c/code\u003e, \u003ccode\u003eProtected\u003c/code\u003e, or \u003ccode\u003eProtected Friend\u003c/code\u003e can be accessed from other assemblies, which\nmeans you should validate parameters to be within the expected constraints. In general, checking against \u003ccode\u003eNothing\u003c/code\u003e is recommended in\ndefensive programming.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a parameter of a publicly accessible method is not validated against \u003ccode\u003eNothing\u003c/code\u003e before being\ndereferenced.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n\n    Public Property Message As String\n\n    Public Sub PublicMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Protected Sub ProtectedMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n\n    Public Property Message As String\n\n    Public Sub PublicMethod(Arg As Exception)\n        If Arg IsNot Nothing Then Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Protected Sub ProtectedMethod(Arg As Exception)\n        ArgumentNullException.ThrowIfNull(Arg)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Private Sub PrivateMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Compliant: method is not publicly accessible\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Arguments validated for \u003ccode\u003eNothing\u003c/code\u003e via helper methods should be annotated with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis#postconditions-maybenull-and-notnull\"\u003e\u003ccode\u003e[NotNull\u003c/code\u003e\u003c/a\u003e] attribute. \u003c/li\u003e\n  \u003cli\u003e Method parameters marked with the \u003ccode\u003e[NotNull]\u003c/code\u003e \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#ItemNotNullAttribute\"\u003eResharper code annotation\n  attribute\u003c/a\u003e are supported as well. \u003c/li\u003e\n  \u003cli\u003e To create a custom null validation method declare an attribute with name \u003ccode\u003eValidatedNotNullAttribute\u003c/code\u003e and mark the parameter that is\n  validated for null in your method declaration with it: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nImports System.Runtime.CompilerServices\n\n\u0026lt;AttributeUsage(AttributeTargets.Parameter, Inherited:\u003dFalse)\u0026gt;\nPublic NotInheritable Class ValidatedNotNullAttribute\n    Inherits Attribute\n\nEnd Class\n\nPublic Module Guard\n\n    Public Sub NotNull(Of T As Class)(\u0026lt;ValidatedNotNullAttribute\u0026gt; Value As T, \u0026lt;CallerArgumentExpression(\"Value\")\u0026gt; Optional Name As String \u003d \"\")\n        If Value Is Nothing Then Throw New ArgumentNullException(Name)\n    End Sub\n\nEnd Module\n\nPublic Module SampleUsage\n\n    Public Function CustomToUpper(Value As String) As String\n        Guard.NotNull(Value)\n        Return Value.ToUpper\n    End Function\n\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMethods declared as \u003ccode\u003ePublic\u003c/code\u003e, \u003ccode\u003eProtected\u003c/code\u003e, or \u003ccode\u003eProtected Friend\u003c/code\u003e can be accessed from other assemblies, which\nmeans you should validate parameters to be within the expected constraints. In general, checking against \u003ccode\u003eNothing\u003c/code\u003e is recommended in\ndefensive programming.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a parameter of a publicly accessible method is not validated against \u003ccode\u003eNothing\u003c/code\u003e before being\ndereferenced.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n\n    Public Property Message As String\n\n    Public Sub PublicMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Protected Sub ProtectedMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Sample\n\n    Public Property Message As String\n\n    Public Sub PublicMethod(Arg As Exception)\n        If Arg IsNot Nothing Then Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Protected Sub ProtectedMethod(Arg As Exception)\n        ArgumentNullException.ThrowIfNull(Arg)\n        Message \u003d Arg.Message   \u0027 Noncompliant\n    End Sub\n\n    Private Sub PrivateMethod(Arg As Exception)\n        Message \u003d Arg.Message   \u0027 Compliant: method is not publicly accessible\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Arguments validated for \u003ccode\u003eNothing\u003c/code\u003e via helper methods should be annotated with the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis#postconditions-maybenull-and-notnull\"\u003e\u003ccode\u003e[NotNull\u003c/code\u003e\u003c/a\u003e] attribute. \u003c/li\u003e\n  \u003cli\u003e Method parameters marked with the \u003ccode\u003e[NotNull]\u003c/code\u003e \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#ItemNotNullAttribute\"\u003eResharper code annotation\n  attribute\u003c/a\u003e are supported as well. \u003c/li\u003e\n  \u003cli\u003e To create a custom null validation method declare an attribute with name \u003ccode\u003eValidatedNotNullAttribute\u003c/code\u003e and mark the parameter that is\n  validated for null in your method declaration with it: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nImports System.Runtime.CompilerServices\n\n\u0026lt;AttributeUsage(AttributeTargets.Parameter, Inherited:\u003dFalse)\u0026gt;\nPublic NotInheritable Class ValidatedNotNullAttribute\n    Inherits Attribute\n\nEnd Class\n\nPublic Module Guard\n\n    Public Sub NotNull(Of T As Class)(\u0026lt;ValidatedNotNullAttribute\u0026gt; Value As T, \u0026lt;CallerArgumentExpression(\"Value\")\u0026gt; Optional Name As String \u003d \"\")\n        If Value Is Nothing Then Throw New ArgumentNullException(Name)\n    End Sub\n\nEnd Module\n\nPublic Module SampleUsage\n\n    Public Function CustomToUpper(Value As String) As String\n        Guard.NotNull(Value)\n        Return Value.ToUpper\n    End Function\n\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6617",
    "name": "\"Contains\" should be used instead of \"Any\" for simple equality checks",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen testing if a collection contains a specific item by simple equality, both \u003ccode\u003eICollection.Contains(T item)\u003c/code\u003e and\n\u003ccode\u003eIEnumerable.Any(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be used. However, \u003ccode\u003eAny\u003c/code\u003e searches the data structure in a linear manner using a foreach\nloop, whereas \u003ccode\u003eContains\u003c/code\u003e is considerably faster in some collection types, because of the underlying implementation. More specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eHashSet\u0026lt;T\u0026gt;\u003c/code\u003e is a hashtable, and therefore has an O(1) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e is a red-black tree, and therefore has a O(logN) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e is a linear search, and therefore has an O(N) lookup, but the EqualityComparer is optimized for the \u003ccode\u003eT\u003c/code\u003e\n  type, which is not the case for \u003ccode\u003eAny\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor small collections, the performance difference may be negligible, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eContains\u003c/code\u003e is a method defined on the \u003ccode\u003eICollection\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a \u003ccode\u003eT item\u003c/code\u003e argument.\n\u003ccode\u003eAny\u003c/code\u003e is an extension method defined on the \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a predicate argument. Therefore, calls\nwith simple equality checks like \u003ccode\u003eAny(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be replaced by \u003ccode\u003eContains(item)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis applies to the following collection types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1\"\u003eHashSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\"\u003eList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ValueExists(data As HashSet(Of Integer)) As Boolean\n    Return data.Any(Function(x) x \u003d 42)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ValueExists(data As List(Of Integer)) As Boolean\n    Return data.Any(Function(x) x \u003d 42)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction ValueExists(data As HashSet(Of Integer)) As Boolean\n    Return data.Contains(42)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction ValueExists(data As List(Of Integer)) As Boolean\n    Return data.Contains(42)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1.contains\"\u003eHashSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.contains\"\u003eSortedSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains\"\u003eList.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e35,388.333 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e620.1863 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40132 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.799 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1489 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e32,851.509 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e667.1658 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40130 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e375.132 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.0764 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28,979.763 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e678.0093 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.987 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1090 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e25,830.221 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e487.2470 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,935.812 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57.7569 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(10_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int Iterations;\n\nprivate static HashSet\u0026lt;int\u0026gt; hashSet;\nprivate static List\u0026lt;int\u0026gt; list;\n\n[GlobalSetup]\npublic void Setup()\n{\n    hashSet \u003d new HashSet\u0026lt;int\u0026gt;(Enumerable.Range(0, SampleSize));\n    list \u003d Enumerable.Range(0, SampleSize).ToList();\n}\n\n[Benchmark]\npublic void HashSet_Any() \u003d\u0026gt;\n    CheckAny(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void HashSet_Contains() \u003d\u0026gt;\n    CheckContains(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void List_Any() \u003d\u0026gt;\n    CheckAny(list, SampleSize / 2);\n\n[Benchmark]\npublic void List_Contains() \u003d\u0026gt;\n    CheckContains(list, SampleSize / 2);\n\nvoid CheckAny(IEnumerable\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Any(x \u003d\u0026gt; x \u003d\u003d target);  // Enumerable.Any\n    }\n}\n\nvoid CheckContains(ICollection\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Contains(target); // ICollection\u0026lt;T\u0026gt;.Contains\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen testing if a collection contains a specific item by simple equality, both \u003ccode\u003eICollection.Contains(T item)\u003c/code\u003e and\n\u003ccode\u003eIEnumerable.Any(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be used. However, \u003ccode\u003eAny\u003c/code\u003e searches the data structure in a linear manner using a foreach\nloop, whereas \u003ccode\u003eContains\u003c/code\u003e is considerably faster in some collection types, because of the underlying implementation. More specifically:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eHashSet\u0026lt;T\u0026gt;\u003c/code\u003e is a hashtable, and therefore has an O(1) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e is a red-black tree, and therefore has a O(logN) lookup \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e is a linear search, and therefore has an O(N) lookup, but the EqualityComparer is optimized for the \u003ccode\u003eT\u003c/code\u003e\n  type, which is not the case for \u003ccode\u003eAny\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor small collections, the performance difference may be negligible, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eContains\u003c/code\u003e is a method defined on the \u003ccode\u003eICollection\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a \u003ccode\u003eT item\u003c/code\u003e argument.\n\u003ccode\u003eAny\u003c/code\u003e is an extension method defined on the \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e interface and takes a predicate argument. Therefore, calls\nwith simple equality checks like \u003ccode\u003eAny(x ⇒ x \u003d\u003d item)\u003c/code\u003e can be replaced by \u003ccode\u003eContains(item)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis applies to the following collection types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1\"\u003eHashSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\"\u003eList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ValueExists(data As HashSet(Of Integer)) As Boolean\n    Return data.Any(Function(x) x \u003d 42)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ValueExists(data As List(Of Integer)) As Boolean\n    Return data.Any(Function(x) x \u003d 42)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction ValueExists(data As HashSet(Of Integer)) As Boolean\n    Return data.Contains(42)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction ValueExists(data As List(Of Integer)) As Boolean\n    Return data.Contains(42)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1.contains\"\u003eHashSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.contains\"\u003eSortedSet\u0026lt;T\u0026gt;.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.contains\"\u003eList.Contains(T)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e35,388.333 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e620.1863 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40132 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.799 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1489 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e32,851.509 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e667.1658 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40130 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e375.132 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.0764 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28,979.763 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e678.0093 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eHashSet_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.987 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1090 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Any\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e25,830.221 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e487.2470 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40448 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eList_Contains\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,935.812 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57.7569 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\n[Params(10_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int Iterations;\n\nprivate static HashSet\u0026lt;int\u0026gt; hashSet;\nprivate static List\u0026lt;int\u0026gt; list;\n\n[GlobalSetup]\npublic void Setup()\n{\n    hashSet \u003d new HashSet\u0026lt;int\u0026gt;(Enumerable.Range(0, SampleSize));\n    list \u003d Enumerable.Range(0, SampleSize).ToList();\n}\n\n[Benchmark]\npublic void HashSet_Any() \u003d\u0026gt;\n    CheckAny(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void HashSet_Contains() \u003d\u0026gt;\n    CheckContains(hashSet, SampleSize / 2);\n\n[Benchmark]\npublic void List_Any() \u003d\u0026gt;\n    CheckAny(list, SampleSize / 2);\n\n[Benchmark]\npublic void List_Contains() \u003d\u0026gt;\n    CheckContains(list, SampleSize / 2);\n\nvoid CheckAny(IEnumerable\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Any(x \u003d\u0026gt; x \u003d\u003d target);  // Enumerable.Any\n    }\n}\n\nvoid CheckContains(ICollection\u0026lt;int\u0026gt; values, int target)\n{\n    for (int i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d values.Contains(target); // ICollection\u0026lt;T\u0026gt;.Contains\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3904",
    "name": "Assemblies should have version information",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute\"\u003eAssemblyVersion\u003c/a\u003e attribute is used to\nspecify the version number of an assembly. An assembly is a compiled unit of code, which can be marked with a version number by applying the attribute\nto an assembly’s source code file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute is useful for many reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eVersioning\u003c/strong\u003e: The attribute allows developers to track and manage different versions of an assembly. By incrementing the version\n  number for each new release, you can easily identify and differentiate between different versions of the same assembly. This is particularly useful\n  when distributing and deploying software, as it helps manage updates and compatibility between different versions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDependency management\u003c/strong\u003e: When an assembly references another assembly, it can specify the specific version of the dependency it\n  requires. By using the \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute, you can ensure that the correct version of the referenced assembly is used. This\n  helps avoid compatibility issues and ensures that the expected behavior and functionality are maintained. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eGAC management\u003c/strong\u003e: The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGAC\u003c/a\u003e, also known as Global\n  Assembly Cache, is a central repository for storing shared assemblies on a system. The AssemblyVersion attribute plays a crucial role in managing\n  assemblies in the GAC. Different versions of an assembly can coexist in the GAC, allowing applications to use the specific version they require.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf no \u003ccode\u003eAssemblyVersion\u003c/code\u003e is provided, the same default version will be used for every build. Since the version number is used by .NET\nFramework to uniquely identify an assembly, this can lead to broken dependencies.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Reflection\n\u0026lt;Assembly: AssemblyTitle(\"MyAssembly\")\u0026gt; \u0027 Noncompliant\nNamespace MyLibrary\n\u0027 ...\nEnd Namespace\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Reflection\n\u0026lt;Assembly: AssemblyTitle(\"MyAssembly\")\u0026gt;\n\u0026lt;Assembly: AssemblyVersion(\"42.1.125.0\")\u0026gt;\nNamespace MyLibrary\n\u0027 ...\nEnd Namespace\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/assembly/versioning\"\u003eAssembly Versioning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGlobal Assembly Cache\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute\"\u003eAssemblyVersion\u003c/a\u003e attribute is used to\nspecify the version number of an assembly. An assembly is a compiled unit of code, which can be marked with a version number by applying the attribute\nto an assembly’s source code file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute is useful for many reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eVersioning\u003c/strong\u003e: The attribute allows developers to track and manage different versions of an assembly. By incrementing the version\n  number for each new release, you can easily identify and differentiate between different versions of the same assembly. This is particularly useful\n  when distributing and deploying software, as it helps manage updates and compatibility between different versions. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eDependency management\u003c/strong\u003e: When an assembly references another assembly, it can specify the specific version of the dependency it\n  requires. By using the \u003ccode\u003eAssemblyVersion\u003c/code\u003e attribute, you can ensure that the correct version of the referenced assembly is used. This\n  helps avoid compatibility issues and ensures that the expected behavior and functionality are maintained. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eGAC management\u003c/strong\u003e: The \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGAC\u003c/a\u003e, also known as Global\n  Assembly Cache, is a central repository for storing shared assemblies on a system. The AssemblyVersion attribute plays a crucial role in managing\n  assemblies in the GAC. Different versions of an assembly can coexist in the GAC, allowing applications to use the specific version they require.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf no \u003ccode\u003eAssemblyVersion\u003c/code\u003e is provided, the same default version will be used for every build. Since the version number is used by .NET\nFramework to uniquely identify an assembly, this can lead to broken dependencies.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Reflection\n\u0026lt;Assembly: AssemblyTitle(\"MyAssembly\")\u0026gt; \u0027 Noncompliant\nNamespace MyLibrary\n\u0027 ...\nEnd Namespace\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Reflection\n\u0026lt;Assembly: AssemblyTitle(\"MyAssembly\")\u0026gt;\n\u0026lt;Assembly: AssemblyVersion(\"42.1.125.0\")\u0026gt;\nNamespace MyLibrary\n\u0027 ...\nEnd Namespace\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/assembly/versioning\"\u003eAssembly Versioning\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/app-domains/gac\"\u003eGlobal Assembly Cache\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3903",
    "name": "Types should be defined in named namespaces",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTypes are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\nEnd Class\n\nPublic Structure Bar\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nNamespace SomeSpace\n    Public Class Foo\n    End Class\n\n    Public Structure Bar\n    End Structure\nEnd Namespace\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTypes are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\nEnd Class\n\nPublic Structure Bar\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nNamespace SomeSpace\n    Public Class Foo\n    End Class\n\n    Public Structure Bar\n    End Structure\nEnd Namespace\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1163",
    "name": "Exceptions should not be thrown in finally blocks",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf an exception is already being thrown within the \u003ccode\u003etry\u003c/code\u003e block or caught in a \u003ccode\u003ecatch\u003c/code\u003e block, throwing another exception in\nthe \u003ccode\u003efinally\u003c/code\u003e block will override the original exception. This means that the original exception’s message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nTry\n    \u0027 Some work which end up throwing an exception\n    Throw New ArgumentException()\nFinally\n    \u0027 Cleanup\n    Throw New InvalidOperationException() \u0027 Noncompliant: will mask the ArgumentException\nEnd Try\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nTry\n    \u0027 Some work which end up throwing an exception\n    Throw New ArgumentException()\nFinally\n    \u0027 Cleanup without throwing\nEnd Try\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/how-to-use-finally-blocks\"\u003eFinally blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-execute-cleanup-code-using-finally\"\u003eHow to execute\n  cleanup code using finally\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf an exception is already being thrown within the \u003ccode\u003etry\u003c/code\u003e block or caught in a \u003ccode\u003ecatch\u003c/code\u003e block, throwing another exception in\nthe \u003ccode\u003efinally\u003c/code\u003e block will override the original exception. This means that the original exception’s message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nTry\n    \u0027 Some work which end up throwing an exception\n    Throw New ArgumentException()\nFinally\n    \u0027 Cleanup\n    Throw New InvalidOperationException() \u0027 Noncompliant: will mask the ArgumentException\nEnd Try\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nTry\n    \u0027 Some work which end up throwing an exception\n    Throw New ArgumentException()\nFinally\n    \u0027 Cleanup without throwing\nEnd Try\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/exceptions/\"\u003eExceptions and Exception Handling\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/exceptions/how-to-use-finally-blocks\"\u003eFinally blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/exceptions/how-to-execute-cleanup-code-using-finally\"\u003eHow to execute\n  cleanup code using finally\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "error-handling",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2374",
    "name": "Signed types should be preferred to unsigned ones",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUnsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should\nbe preferred where possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo1 As UShort   \u0027 Noncompliant\n        Dim foo2 As UInteger \u0027 Noncompliant\n        Dim foo3 As ULong    \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo1 As Short\n        Dim foo2 As Integer\n        Dim foo3 As Long\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUnsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should\nbe preferred where possible.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo1 As UShort   \u0027 Noncompliant\n        Dim foo2 As UInteger \u0027 Noncompliant\n        Dim foo3 As ULong    \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo1 As Short\n        Dim foo2 As Integer\n        Dim foo3 As Long\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6610",
    "name": "\"StartsWith\" and \"EndsWith\" overloads that take a \"char\" should be used instead of the ones that take a \"string\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWith \u003ccode\u003estring.StartsWith(char)\u003c/code\u003e and \u003ccode\u003estring.EndsWith(char)\u003c/code\u003e, only the first character of the string is compared to the\nprovided character, whereas the \u003ccode\u003estring\u003c/code\u003e versions of those methods have to do checks about the current \u003ccode\u003eStringComparison\u003c/code\u003e and\n\u003ccode\u003eCultureInfo\u003c/code\u003e. Thus, the \u003ccode\u003echar\u003c/code\u003e overloads are significantly faster for default comparison scenarios.\u003c/p\u003e\n\u003cp\u003eThese overloads were introduced in \u003ccode\u003e.NET Core 2.0\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3.5x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf you are targeting a runtime version equal or greater than \u003ccode\u003e.NET Core 2.0\u003c/code\u003e, the \u003ccode\u003estring.StartsWith\u003c/code\u003e and\n\u003ccode\u003estring.EndsWith\u003c/code\u003e overloads are available, with the argument’s type being \u003ccode\u003echar\u003c/code\u003e instead of \u003ccode\u003estring\u003c/code\u003e. Thus, an\nargument of \u003ccode\u003echar\u003c/code\u003e type can be provided.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction StartsWithSlash(s As String) As Boolean\n    Return s.StartsWith(\"/\")\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction EndsWithSlash(s As String) As Boolean\n    Return s.EndsWith(\"/\")\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction StartsWithSlash(s As String) As Boolean\n    Return s.StartsWith(\"/\"c)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction EndsWithSlash(s As String) As Boolean\n    Return s.EndsWith(\"/\"c)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.startswith\"\u003estring.StartsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.endswith\"\u003estring.EndsWith\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.965 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.2732 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e29.932 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.568 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3235 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.534 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.1136 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.067 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.7092 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.935 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(_ \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark]\npublic void StartsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void StartsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\u0027d\u0027)).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\u0027d\u0027)).ToList();\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWith \u003ccode\u003estring.StartsWith(char)\u003c/code\u003e and \u003ccode\u003estring.EndsWith(char)\u003c/code\u003e, only the first character of the string is compared to the\nprovided character, whereas the \u003ccode\u003estring\u003c/code\u003e versions of those methods have to do checks about the current \u003ccode\u003eStringComparison\u003c/code\u003e and\n\u003ccode\u003eCultureInfo\u003c/code\u003e. Thus, the \u003ccode\u003echar\u003c/code\u003e overloads are significantly faster for default comparison scenarios.\u003c/p\u003e\n\u003cp\u003eThese overloads were introduced in \u003ccode\u003e.NET Core 2.0\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3.5x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf you are targeting a runtime version equal or greater than \u003ccode\u003e.NET Core 2.0\u003c/code\u003e, the \u003ccode\u003estring.StartsWith\u003c/code\u003e and\n\u003ccode\u003estring.EndsWith\u003c/code\u003e overloads are available, with the argument’s type being \u003ccode\u003echar\u003c/code\u003e instead of \u003ccode\u003estring\u003c/code\u003e. Thus, an\nargument of \u003ccode\u003echar\u003c/code\u003e type can be provided.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction StartsWithSlash(s As String) As Boolean\n    Return s.StartsWith(\"/\")\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction EndsWithSlash(s As String) As Boolean\n    Return s.EndsWith(\"/\")\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction StartsWithSlash(s As String) As Boolean\n    Return s.StartsWith(\"/\"c)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction EndsWithSlash(s As String) As Boolean\n    Return s.EndsWith(\"/\"c)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.startswith\"\u003estring.StartsWith\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.endswith\"\u003estring.EndsWith\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.965 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.2732 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e29.932 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eStartsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.568 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3235 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.534 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_String\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e30.421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.1136 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e28.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eEndsWith_Char\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8.067 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.7092 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7.935 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(_ \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark]\npublic void StartsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void StartsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.StartsWith(\u0027d\u0027)).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_String()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\"d\")).ToList();\n}\n\n[Benchmark]\npublic void EndsWith_Char()\n{\n    _ \u003d data.Where(guid \u003d\u0026gt; guid.EndsWith(\u0027d\u0027)).ToList();\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]   : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0 : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2373",
    "name": "Generic type parameter names should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated; use {rule:vbnet:S119} instead.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Must start with an upper case \u0027T\u0027 character, e.g. T \u003c/li\u003e\n  \u003cli\u003e Followed by Pascal casing, starting with an upper case character, e.g. TKey \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. TFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. TFooHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default parameter value \u003ccode\u003e^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Foo(Of t) \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo(Of T) \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated; use {rule:vbnet:S119} instead.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Must start with an upper case \u0027T\u0027 character, e.g. T \u003c/li\u003e\n  \u003cli\u003e Followed by Pascal casing, starting with an upper case character, e.g. TKey \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. TFooID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. TFooHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default parameter value \u003ccode\u003e^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Foo(Of t) \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo(Of T) \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the generic type parameter names against.",
        "defaultValue": "^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2376",
    "name": "Write-only properties should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eProperties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    WriteOnly Property Foo() As Integer \u0027 Non-Compliant\n        Set(ByVal value As Integer)\n            \u0027 ... some code ...\n        End Set\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub SetFoo(ByVal value As Integer)  \u0027 Compliant\n        \u0027 ... some code ...\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eProperties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    WriteOnly Property Foo() As Integer \u0027 Non-Compliant\n        Set(ByVal value As Integer)\n            \u0027 ... some code ...\n        End Set\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub SetFoo(ByVal value As Integer)  \u0027 Compliant\n        \u0027 ... some code ...\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3464",
    "name": "Type inheritance should not be recursive",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion\"\u003eRecursion\u003c/a\u003e is a technique used to define a problem in terms of the problem itself, usually in\nterms of a simpler version of the problem itself.\u003c/p\u003e\n\u003cp\u003eFor example, the implementation of the generator for the n-th value of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fibonacci_sequence\"\u003eFibonacci\nsequence\u003c/a\u003e comes naturally from its mathematical definition, when recursion is used:\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    If n \u0026lt;\u003d 1 Then\n        Return 1\n    Else\n        Return NthFibonacciNumber(n - 1) + NthFibonacciNumber(n - 2)\n    End If\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAs opposed to:\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    Dim previous As Integer \u003d 0\n    Dim last As Integer \u003d 1\n\n    For i \u003d 0 To n - 1\n        Dim temp \u003d previous\n        previous \u003d last\n        last \u003d last + temp\n    Next\n\n    Return last\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eThe use of recursion is acceptable in methods, like the one above, where you can break out of it.\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    If n \u0026lt;\u003d 1 Then\n        Return 1 \u0027 Base case: stop the recursion\n    End If\n    \u0027 ...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eIt is also acceptable and makes sense in some type definitions:\u003c/p\u003e\n\u003cpre\u003e\nClass Box\n    Inherits IComparable(Of Box)\n\n    Public Function CompareTo(ByVal other As Box?) As Integer\n        \u0027 Compare the two Box instances...\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eWith types, some invalid recursive definitions are caught by the compiler:\u003c/p\u003e\n\u003cpre\u003e\nClass C2(Of T)               \u0027 Error BC31447 C2(Of T) cannot reference itself in Inherits clause\n    Inherits C2(Of T)\nEnd Class\n\nClass C2(Of T)\n    Inherits C2(Of C2(Of T)) \u0027 Error BC31447 C2(Of T) cannot reference itself in Inherits clause\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eIn more complex scenarios, however, the code will compile but execution will result in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e if you try to instantiate the class.\u003c/p\u003e\n\u003cpre\u003e\nClass C1(Of T)\nEnd Class\n\nClass C2(Of T)              \u0027 Noncompliant\n    Inherits C1(Of C2(Of C2(Of T)))\nEnd Class\n\nDim c2 \u003d New C2(Of Integer) \u0027 This would result into a TypeLoadException\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\"\u003eCuriously recurring template pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html\"\u003eModern C# Techniques, Part\n  1: Curiously Recurring Generic Pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/02/02/curiouser-and-curiouser/\"\u003eCuriouser and curiouser\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion\"\u003eRecursion\u003c/a\u003e is a technique used to define a problem in terms of the problem itself, usually in\nterms of a simpler version of the problem itself.\u003c/p\u003e\n\u003cp\u003eFor example, the implementation of the generator for the n-th value of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Fibonacci_sequence\"\u003eFibonacci\nsequence\u003c/a\u003e comes naturally from its mathematical definition, when recursion is used:\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    If n \u0026lt;\u003d 1 Then\n        Return 1\n    Else\n        Return NthFibonacciNumber(n - 1) + NthFibonacciNumber(n - 2)\n    End If\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAs opposed to:\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    Dim previous As Integer \u003d 0\n    Dim last As Integer \u003d 1\n\n    For i \u003d 0 To n - 1\n        Dim temp \u003d previous\n        previous \u003d last\n        last \u003d last + temp\n    Next\n\n    Return last\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eThe use of recursion is acceptable in methods, like the one above, where you can break out of it.\u003c/p\u003e\n\u003cpre\u003e\nFunction NthFibonacciNumber(ByVal n As Integer) As Integer\n    If n \u0026lt;\u003d 1 Then\n        Return 1 \u0027 Base case: stop the recursion\n    End If\n    \u0027 ...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eIt is also acceptable and makes sense in some type definitions:\u003c/p\u003e\n\u003cpre\u003e\nClass Box\n    Inherits IComparable(Of Box)\n\n    Public Function CompareTo(ByVal other As Box?) As Integer\n        \u0027 Compare the two Box instances...\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eWith types, some invalid recursive definitions are caught by the compiler:\u003c/p\u003e\n\u003cpre\u003e\nClass C2(Of T)               \u0027 Error BC31447 C2(Of T) cannot reference itself in Inherits clause\n    Inherits C2(Of T)\nEnd Class\n\nClass C2(Of T)\n    Inherits C2(Of C2(Of T)) \u0027 Error BC31447 C2(Of T) cannot reference itself in Inherits clause\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eIn more complex scenarios, however, the code will compile but execution will result in a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e if you try to instantiate the class.\u003c/p\u003e\n\u003cpre\u003e\nClass C1(Of T)\nEnd Class\n\nClass C2(Of T)              \u0027 Noncompliant\n    Inherits C1(Of C2(Of C2(Of T)))\nEnd Class\n\nDim c2 \u003d New C2(Of Integer) \u0027 This would result into a TypeLoadException\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\u003eRecursion\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.typeloadexception\"\u003eTypeLoadException\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern\"\u003eCuriously recurring template pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://blog.stephencleary.com/2022/09/modern-csharp-techniques-1-curiously-recurring-generic-pattern.html\"\u003eModern C# Techniques, Part\n  1: Curiously Recurring Generic Pattern\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://ericlippert.com/2011/02/02/curiouser-and-curiouser/\"\u003eCuriouser and curiouser\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2375",
    "name": "\"With\" statements should be used for a series of calls to the same object",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing the \u003ccode\u003eWith\u003c/code\u003e statement for a series of calls to the same object makes the code more readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default value of 6:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Dim product \u003d New With {.Name \u003d \"paperclips\", .RetailPrice \u003d 1.2, .WholesalePrice \u003d 0.6, .A \u003d 0, .B \u003d 0, .C \u003d 0}\n\n    Sub Main()\n        product.Name \u003d \"\"           \u0027 Noncompliant\n        product.RetailPrice \u003d 0\n        product.WholesalePrice \u003d 0\n        product.A \u003d 0\n        product.B \u003d 0\n        product.C \u003d 0\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim product \u003d New With {.Name \u003d \"paperclips\", .RetailPrice \u003d 1.2, .WholesalePrice \u003d 0.6, .A \u003d 0, .B \u003d 0, .C \u003d 0}\n\n    Sub Main()\n        With product\n            .Name \u003d \"\"\n            .RetailPrice \u003d 0\n            .WholesalePrice \u003d 0\n            .A \u003d 0\n            .B \u003d 0\n            .C \u003d 0\n        End With\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing the \u003ccode\u003eWith\u003c/code\u003e statement for a series of calls to the same object makes the code more readable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default value of 6:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Dim product \u003d New With {.Name \u003d \"paperclips\", .RetailPrice \u003d 1.2, .WholesalePrice \u003d 0.6, .A \u003d 0, .B \u003d 0, .C \u003d 0}\n\n    Sub Main()\n        product.Name \u003d \"\"           \u0027 Noncompliant\n        product.RetailPrice \u003d 0\n        product.WholesalePrice \u003d 0\n        product.A \u003d 0\n        product.B \u003d 0\n        product.C \u003d 0\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim product \u003d New With {.Name \u003d \"paperclips\", .RetailPrice \u003d 1.2, .WholesalePrice \u003d 0.6, .A \u003d 0, .B \u003d 0, .C \u003d 0}\n\n    Sub Main()\n        With product\n            .Name \u003d \"\"\n            .RetailPrice \u003d 0\n            .WholesalePrice \u003d 0\n            .A \u003d 0\n            .B \u003d 0\n            .C \u003d 0\n        End With\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "minimumSeriesLength": {
        "key": "minimumSeriesLength",
        "name": "minimumSeriesLength",
        "description": "Minimum length a series must have to trigger an issue.",
        "defaultValue": "6",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "minimumSeriesLength": "6"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2257",
    "name": "Using non-standard cryptographic algorithms is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like \u003ccode\u003eAES\u003c/code\u003e, \u003ccode\u003eRSA\u003c/code\u003e, \u003ccode\u003eSHA\u003c/code\u003e, …​ should be used instead.\u003c/p\u003e\n\u003cp\u003eThis rule tracks custom implementation of these types from \u003ccode\u003eSystem.Security.Cryptography\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricAlgorithm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricKeyExchangeDeformatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricKeyExchangeFormatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricSignatureDeformatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eAsymmetricSignatureFormatter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDeriveBytes\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eHashAlgorithm\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eICryptoTransform\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eSymmetricAlgorithm\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPublic Class CustomHash     \u0027 Noncompliant\n    Inherits HashAlgorithm\n\n    Private fResult() As Byte\n\n    Public Overrides Sub Initialize()\n        fResult \u003d Nothing\n    End Sub\n\n    Protected Overrides Function HashFinal() As Byte()\n        Return fResult\n    End Function\n\n    Protected Overrides Sub HashCore(array() As Byte, ibStart As Integer, cbSize As Integer)\n        fResult \u003d If(fResult, array.Take(8).ToArray)\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a standard algorithm instead of creating a custom one. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nDim mySHA256 As SHA256 \u003d SHA256.Create()\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\"\u003eMessageDigest is Custom\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "MEDIUM"
  },
  {
    "key": "vbnet:S3466",
    "name": "Optional parameters should be passed to \"base\" calls",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen optional parameter values are not passed to base method calls, the value passed in by the caller is ignored. This can cause the function to\nbehave differently than expected, leading to errors and making the code difficult to debug.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class BaseClass\n    Public Overridable Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        Console.WriteLine(i)\n    End Sub\nEnd Class\n\nPublic Class DerivedClass\n    Inherits BaseClass\n\n    Public Overrides Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        \u0027 ...\n        MyBase.MyMethod() \u0027 Noncompliant: caller\u0027s value is ignored\n    End Sub\n\n    Private Shared Function Main(ByVal args As String()) As Integer\n        Dim dc As DerivedClass \u003d New DerivedClass()\n        dc.MyMethod(12) \u0027 prints 1\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class BaseClass\n    Public Overridable Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        Console.WriteLine(i)\n    End Sub\nEnd Class\n\nPublic Class DerivedClass\n    Inherits BaseClass\n\n    Public Overrides Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        \u0027 ...\n        MyBase.MyMethod(i)\n    End Sub\n\n    Private Shared Function Main(ByVal args As String()) As Integer\n        Dim dc As DerivedClass \u003d New DerivedClass()\n        dc.MyMethod(12) \u0027 prints 12\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/optional-parameters\"\u003eOptional Arguments\n(Visual Basic)\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen optional parameter values are not passed to base method calls, the value passed in by the caller is ignored. This can cause the function to\nbehave differently than expected, leading to errors and making the code difficult to debug.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class BaseClass\n    Public Overridable Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        Console.WriteLine(i)\n    End Sub\nEnd Class\n\nPublic Class DerivedClass\n    Inherits BaseClass\n\n    Public Overrides Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        \u0027 ...\n        MyBase.MyMethod() \u0027 Noncompliant: caller\u0027s value is ignored\n    End Sub\n\n    Private Shared Function Main(ByVal args As String()) As Integer\n        Dim dc As DerivedClass \u003d New DerivedClass()\n        dc.MyMethod(12) \u0027 prints 1\n    End Function\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class BaseClass\n    Public Overridable Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        Console.WriteLine(i)\n    End Sub\nEnd Class\n\nPublic Class DerivedClass\n    Inherits BaseClass\n\n    Public Overrides Sub MyMethod(ByVal Optional i As Integer \u003d 1)\n        \u0027 ...\n        MyBase.MyMethod(i)\n    End Sub\n\n    Private Shared Function Main(ByVal args As String()) As Integer\n        Dim dc As DerivedClass \u003d New DerivedClass()\n        dc.MyMethod(12) \u0027 prints 12\n    End Function\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/optional-parameters\"\u003eOptional Arguments\n(Visual Basic)\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1048",
    "name": "Finalize method should not throw exceptions",
    "defaultSeverity": "BLOCKER",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.finalize\"\u003eFinalize methods\u003c/a\u003e are used to perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#unmanaged-resources\"\u003eany necessary final clean-up\u003c/a\u003e when the\ngarbage collector is collecting a class instance. The programmer has no control over when the Finalize method is called; the garbage collector decides\nwhen to call it.\u003c/p\u003e\n\u003cp\u003eWhen creating a Finalize method, it should never throw an exception, as there is a high risk of having the application terminated leaving unmanaged\nresources without a graceful cleanup.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue on \u003ccode\u003ethrow\u003c/code\u003e statements used in a Finalize method.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Sample\n    Protected Overrides Sub Finalize()\n        Throw New NotImplementedException() \u0027 Noncompliant: Finalize method throws an exception\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Sample\n    Protected Overrides Sub Finalize()\n        \u0027 Noncompliant: Finalize method does not throw an exception\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eIn general object finalization can be a complex and error-prone operation and should not be implemented except within the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003edispose pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ecleaning up unmanaged resources\u003c/a\u003e, it is\nrecommended to implement the dispose pattern or, to cover uncalled \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eDispose\u003c/code\u003e\u003c/a\u003e method by the consumer, implement \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage\n  collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eIDisposable.Dispose\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.finalize\"\u003eObject.Finalize method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.finalize\"\u003eFinalize methods\u003c/a\u003e are used to perform \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#unmanaged-resources\"\u003eany necessary final clean-up\u003c/a\u003e when the\ngarbage collector is collecting a class instance. The programmer has no control over when the Finalize method is called; the garbage collector decides\nwhen to call it.\u003c/p\u003e\n\u003cp\u003eWhen creating a Finalize method, it should never throw an exception, as there is a high risk of having the application terminated leaving unmanaged\nresources without a graceful cleanup.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue on \u003ccode\u003ethrow\u003c/code\u003e statements used in a Finalize method.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Sample\n    Protected Overrides Sub Finalize()\n        Throw New NotImplementedException() \u0027 Noncompliant: Finalize method throws an exception\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Sample\n    Protected Overrides Sub Finalize()\n        \u0027 Noncompliant: Finalize method does not throw an exception\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eIn general object finalization can be a complex and error-prone operation and should not be implemented except within the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003edispose pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003ecleaning up unmanaged resources\u003c/a\u003e, it is\nrecommended to implement the dispose pattern or, to cover uncalled \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eDispose\u003c/code\u003e\u003c/a\u003e method by the consumer, implement \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals\"\u003eFundamentals of garbage\n  collection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/unmanaged\"\u003eCleaning up unmanaged resources\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\"\u003eImplement a Dispose\n  method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003e\u003ccode\u003eSafeHandle\u003c/code\u003e\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.idisposable.dispose\"\u003e\u003ccode\u003eIDisposable.Dispose\u003c/code\u003e Method\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.finalize\"\u003eObject.Finalize method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2259",
    "name": "Null pointers should not be dereferenced",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAccessing a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing\u003c/a\u003e value will always throw a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e most likely causing an abrupt program\ntermination.\u003c/p\u003e\n\u003cp\u003eSuch termination might expose sensitive information that a malicious third party could exploit to, for instance, bypass security measures.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIn the following cases, the rule does not raise:\u003c/p\u003e\n\u003ch4\u003eExtensions Methods\u003c/h4\u003e\n\u003cp\u003eCalls to extension methods can still operate on \u003ccode\u003eNothing\u003c/code\u003e values.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Diagnostics.CodeAnalysis\nImports System.Runtime.CompilerServices\nImports System.Text.RegularExpressions\n\nModule Program\n    \u0026lt;Extension\u0026gt;\n    Function RemoveVowels(Value As String) As String\n        If Value Is Nothing Then\n            Return Nothing\n        End If\n        Return Regex.Replace(Value, \"[aeoui]*\", \"\", RegexOptions.IgnoreCase)\n    End Function\n\n    Sub Main()\n        Dim StrValue As String \u003d Nothing\n        Console.WriteLine(StrValue.RemoveVowels()) \u0027 Compliant: \u0027RemoveVowels\u0027 is an extension method\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eUnreachable code\u003c/h4\u003e\n\u003cp\u003eUnreachable code is not executed, thus \u003ccode\u003eNothing\u003c/code\u003e values will never be accessed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub Method()\n    Dim o As Object \u003d Nothing\n    If False Then\n        o.ToString() \u0027 Compliant: code is unreachable\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by analysis attributes\u003c/h4\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eNullable analysis attributes\u003c/a\u003e enable\nthe developer to annotate methods with information about the null-state of its arguments. Thus, potential \u003ccode\u003eNothing\u003c/code\u003e values validated by one\nof the following attributes will not raise:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is important to note those attributes are only available starting .NET Core 3. As a workaround, it is possible to define those attributes\nmanually in a custom class:\u003c/p\u003e\n\u003cpre\u003e\nPublic NotInheritable Class NotNullAttribute \u0027 The alternative name \u0027ValidatedNotNullAttribute\u0027 is also supported\n    Inherits Attribute\nEnd Class\n\nPublic Module Guard\n    Public Sub CheckNotNull(Of T)(\u0026lt;NotNull\u0026gt; Value As T, Name As String)\n        If Value Is Nothing Then Throw New ArgumentNullException(Name)\n    End Sub\nEnd Module\n\nPublic Module Utils\n    Public Function Normalize(Value As String) As String\n        CheckNotNull(Value, nameof(Value)) \u0027 Will throw if \u0027Value\u0027 is Nothing\n        Return Value.ToUpper() \u0027 Compliant: value is known to be not Nothing here\n    End Function\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by Debug.Assert\u003c/h4\u003e\n\u003cp\u003eA value validated with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003eDebug.Assert\u003c/a\u003e to not be\n\u003ccode\u003eNothing\u003c/code\u003e is safe to access.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Diagnostics\n\nPublic Sub Method(MyObject As Object)\n    Debug.Assert(MyObject IsNot Nothing)\n    MyObject.ToString() \u0027 Compliant: \u0027MyObject\u0027 is known to be not Nothing here.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by IDE-specific attributes\u003c/h4\u003e\n\u003cp\u003eLike with null-analysis-attribute, potential \u003ccode\u003eNothing\u003c/code\u003e values validated by one of the following IDE-specific attributes will not\nraise\u003c/p\u003e\n\u003ch5\u003eVisual Studio\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\u003c/a\u003e  (The attribute is\n  interpreted the same as the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e)  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003eJetBrains Rider\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e \u003cpre\u003e\nImports System\nImports JetBrains.Annotations\n\nPublic Class Utils\n    \u0026lt;TerminatesProgram\u0026gt;\n    Public Sub TerminateProgram()\n        Environment.FailFast(\"A catastrophic failure has occurred.\")\n    End Sub\n\n    Public Sub Method()\n        Dim MyObject As Object \u003d Nothing\n        TerminateProgram()\n        MyObject.ToString() \u0027 Compliant: unreachable\n    End Sub\nEnd Class\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo fix the issue, the access of the \u003ccode\u003eNothing\u003c/code\u003e value needs to be prevented by either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ensuring the variable has a value, or \u003c/li\u003e\n  \u003cli\u003e by checking if the value is not \u003ccode\u003eNothing\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe variable \u003ccode\u003eMyObject\u003c/code\u003e is equal to \u003ccode\u003eNothing\u003c/code\u003e, meaning it has no value:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method()\n    Dim MyObject As Object \u003d Nothing\n    Console.WriteLine(MyObject.ToString)   \u0027 Noncompliant: \u0027MyObject\u0027 is always Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThe parameter \u003ccode\u003eInput\u003c/code\u003e might be \u003ccode\u003eNothing\u003c/code\u003e as suggested by the \u003ccode\u003eif\u003c/code\u003e condition:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method(Input As Object)\n    If Input Is Nothing Then\n        \u0027 ...\n    End If\n    Console.WriteLine(Input.ToString) \u0027 Noncompliant: \u0027Input\u0027 might be Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEnsuring the variable \u003ccode\u003eMyObject\u003c/code\u003e has a value resolves the issue:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method()\n    Dim MyObject As New Object\n    Console.WriteLine(MyObject.ToString) \u0027 Compliant: \u0027MyObject\u0027 is not Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003ePreventing the non-compliant code to be executed by returning early:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method(Input As Object)\n    If Input Is Nothing Then\n        Return\n    End If\n    Console.WriteLine(Input.ToString) \u0027 Compliant: if \u0027Input\u0027 is Nothing, this part is unreachable\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CVE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eAttributes for\n  null-state static analysis interpreted by the C# compiler\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\n      Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\n  Class\u003c/a\u003e in Visual Studio \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing keyword (Visual Basic)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAccessing a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing\u003c/a\u003e value will always throw a \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException\u003c/a\u003e most likely causing an abrupt program\ntermination.\u003c/p\u003e\n\u003cp\u003eSuch termination might expose sensitive information that a malicious third party could exploit to, for instance, bypass security measures.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIn the following cases, the rule does not raise:\u003c/p\u003e\n\u003ch4\u003eExtensions Methods\u003c/h4\u003e\n\u003cp\u003eCalls to extension methods can still operate on \u003ccode\u003eNothing\u003c/code\u003e values.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Diagnostics.CodeAnalysis\nImports System.Runtime.CompilerServices\nImports System.Text.RegularExpressions\n\nModule Program\n    \u0026lt;Extension\u0026gt;\n    Function RemoveVowels(Value As String) As String\n        If Value Is Nothing Then\n            Return Nothing\n        End If\n        Return Regex.Replace(Value, \"[aeoui]*\", \"\", RegexOptions.IgnoreCase)\n    End Function\n\n    Sub Main()\n        Dim StrValue As String \u003d Nothing\n        Console.WriteLine(StrValue.RemoveVowels()) \u0027 Compliant: \u0027RemoveVowels\u0027 is an extension method\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eUnreachable code\u003c/h4\u003e\n\u003cp\u003eUnreachable code is not executed, thus \u003ccode\u003eNothing\u003c/code\u003e values will never be accessed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub Method()\n    Dim o As Object \u003d Nothing\n    If False Then\n        o.ToString() \u0027 Compliant: code is unreachable\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by analysis attributes\u003c/h4\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eNullable analysis attributes\u003c/a\u003e enable\nthe developer to annotate methods with information about the null-state of its arguments. Thus, potential \u003ccode\u003eNothing\u003c/code\u003e values validated by one\nof the following attributes will not raise:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is important to note those attributes are only available starting .NET Core 3. As a workaround, it is possible to define those attributes\nmanually in a custom class:\u003c/p\u003e\n\u003cpre\u003e\nPublic NotInheritable Class NotNullAttribute \u0027 The alternative name \u0027ValidatedNotNullAttribute\u0027 is also supported\n    Inherits Attribute\nEnd Class\n\nPublic Module Guard\n    Public Sub CheckNotNull(Of T)(\u0026lt;NotNull\u0026gt; Value As T, Name As String)\n        If Value Is Nothing Then Throw New ArgumentNullException(Name)\n    End Sub\nEnd Module\n\nPublic Module Utils\n    Public Function Normalize(Value As String) As String\n        CheckNotNull(Value, nameof(Value)) \u0027 Will throw if \u0027Value\u0027 is Nothing\n        Return Value.ToUpper() \u0027 Compliant: value is known to be not Nothing here\n    End Function\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by Debug.Assert\u003c/h4\u003e\n\u003cp\u003eA value validated with \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert\"\u003eDebug.Assert\u003c/a\u003e to not be\n\u003ccode\u003eNothing\u003c/code\u003e is safe to access.\u003c/p\u003e\n\u003cpre\u003e\nImports System.Diagnostics\n\nPublic Sub Method(MyObject As Object)\n    Debug.Assert(MyObject IsNot Nothing)\n    MyObject.ToString() \u0027 Compliant: \u0027MyObject\u0027 is known to be not Nothing here.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eValidated value by IDE-specific attributes\u003c/h4\u003e\n\u003cp\u003eLike with null-analysis-attribute, potential \u003ccode\u003eNothing\u003c/code\u003e values validated by one of the following IDE-specific attributes will not\nraise\u003c/p\u003e\n\u003ch5\u003eVisual Studio\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\u003c/a\u003e  (The attribute is\n  interpreted the same as the \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\u003c/a\u003e)  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5\u003eJetBrains Rider\u003c/h5\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e \u003cpre\u003e\nImports System\nImports JetBrains.Annotations\n\nPublic Class Utils\n    \u0026lt;TerminatesProgram\u0026gt;\n    Public Sub TerminateProgram()\n        Environment.FailFast(\"A catastrophic failure has occurred.\")\n    End Sub\n\n    Public Sub Method()\n        Dim MyObject As Object \u003d Nothing\n        TerminateProgram()\n        MyObject.ToString() \u0027 Compliant: unreachable\n    End Sub\nEnd Class\n\u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo fix the issue, the access of the \u003ccode\u003eNothing\u003c/code\u003e value needs to be prevented by either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ensuring the variable has a value, or \u003c/li\u003e\n  \u003cli\u003e by checking if the value is not \u003ccode\u003eNothing\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThe variable \u003ccode\u003eMyObject\u003c/code\u003e is equal to \u003ccode\u003eNothing\u003c/code\u003e, meaning it has no value:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method()\n    Dim MyObject As Object \u003d Nothing\n    Console.WriteLine(MyObject.ToString)   \u0027 Noncompliant: \u0027MyObject\u0027 is always Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eThe parameter \u003ccode\u003eInput\u003c/code\u003e might be \u003ccode\u003eNothing\u003c/code\u003e as suggested by the \u003ccode\u003eif\u003c/code\u003e condition:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Method(Input As Object)\n    If Input Is Nothing Then\n        \u0027 ...\n    End If\n    Console.WriteLine(Input.ToString) \u0027 Noncompliant: \u0027Input\u0027 might be Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eEnsuring the variable \u003ccode\u003eMyObject\u003c/code\u003e has a value resolves the issue:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method()\n    Dim MyObject As New Object\n    Console.WriteLine(MyObject.ToString) \u0027 Compliant: \u0027MyObject\u0027 is not Nothing\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003ePreventing the non-compliant code to be executed by returning early:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Method(Input As Object)\n    If Input Is Nothing Then\n        Return\n    End If\n    Console.WriteLine(Input.ToString) \u0027 Compliant: if \u0027Input\u0027 is Nothing, this part is unreachable\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CVE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\"\u003eNullReferenceException Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\"\u003eAttributes for\n  null-state static analysis interpreted by the C# compiler\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullattribute\"\u003eNotNullAttribute\n      Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute\"\u003eNotNullWhenAttribute Class\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnattribute\"\u003eDoesNotReturnAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e Microsoft Learn - \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.doesnotreturnifattribute\"\u003eDoesNotReturnIfAttribute Class\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.validatednotnullattribute\"\u003eValidatedNotNullAttribute\n  Class\u003c/a\u003e in Visual Studio \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#NotNullAttribute\"\u003eNotNullAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e JetBrains Resharper - \u003ca\n  href\u003d\"https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#TerminatesProgramAttribute\"\u003eTerminatesProgramAttribute\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing keyword (Visual Basic)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6612",
    "name": "The lambda parameter should be used instead of capturing arguments in \"ConcurrentDictionary\" methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e, there are many overloads of the \u003ccode\u003eGetOrAdd\u003c/code\u003e and \u003ccode\u003eAddOrUpdate\u003c/code\u003e methods that\ntake both a \u003ccode\u003eTKey\u003c/code\u003e argument and a lambda that expects a \u003ccode\u003eTKey\u003c/code\u003e parameter. This means that the right side of the lambda can be\nwritten using either the lambda’s parameter or the method’s argument. However, using the method’s argument leads to the lambda capturing it, and the\ncompiler will need to generate a class and instantiate it before the call. This means memory allocations, as well as more time spend during Garbage\nCollection.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eWhen you are using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e methods \u003ccode\u003eGetOrAdd\u003c/code\u003e or \u003ccode\u003eAddOrUpdate\u003c/code\u003e, reference the key by using the\nlambda’s parameter instead of the method’s one.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction UpdateValue(dict As ConcurrentDictionary(Of Integer, Integer), key As Integer) As Integer\n    Return dict.GetOrAdd(key, Function(k)\n                                   Return key + 42\n                               End Function)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction UpdateValue(dict As ConcurrentDictionary(Of Integer, Integer), key As Integer) As Integer\n    Return dict.GetOrAdd(key, Function(k)\n                                   Return k + 42\n                               End Function)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.GetOrAdd\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.addorupdate\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.AddOrUpdate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68.81 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.432 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88000063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40.76 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.239 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88259787 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e41.82 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.730 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.55\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate ConcurrentDictionary\u0026lt;int, string\u0026gt; dict;\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup()\n{\n    dict \u003d new ConcurrentDictionary\u0026lt;int, string\u0026gt;();\n    data \u003d Enumerable.Range(0, N).OrderBy(_ \u003d\u0026gt; Guid.NewGuid()).ToList();\n}\n\n[Benchmark(baseline\u003dtrue)]\npublic void Capture()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, _ \u003d\u0026gt; $\"{guid}\"); // \"guid\" is captured\n    }\n}\n\n[Benchmark]\npublic void Lambda()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, x \u003d\u0026gt; $\"{x}\"); // no capture\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e, there are many overloads of the \u003ccode\u003eGetOrAdd\u003c/code\u003e and \u003ccode\u003eAddOrUpdate\u003c/code\u003e methods that\ntake both a \u003ccode\u003eTKey\u003c/code\u003e argument and a lambda that expects a \u003ccode\u003eTKey\u003c/code\u003e parameter. This means that the right side of the lambda can be\nwritten using either the lambda’s parameter or the method’s argument. However, using the method’s argument leads to the lambda capturing it, and the\ncompiler will need to generate a class and instantiate it before the call. This means memory allocations, as well as more time spend during Garbage\nCollection.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eWhen you are using the \u003ccode\u003eConcurrentDictionary\u003c/code\u003e methods \u003ccode\u003eGetOrAdd\u003c/code\u003e or \u003ccode\u003eAddOrUpdate\u003c/code\u003e, reference the key by using the\nlambda’s parameter instead of the method’s one.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction UpdateValue(dict As ConcurrentDictionary(Of Integer, Integer), key As Integer) As Integer\n    Return dict.GetOrAdd(key, Function(k)\n                                   Return key + 42\n                               End Function)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction UpdateValue(dict As ConcurrentDictionary(Of Integer, Integer), key As Integer) As Integer\n    Return dict.GetOrAdd(key, Function(k)\n                                   Return k + 42\n                               End Function)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.GetOrAdd\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.addorupdate\"\u003eConcurrentDictionary\u0026lt;TKey,TValue\u0026gt;.AddOrUpdate\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMedian\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eRatio\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68.81 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.432 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88000063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40.76 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e3.724 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.59\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e50 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCapture\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e75.92 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.239 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.00\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e88259787 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLambda\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e41.82 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e2.730 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.55\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate ConcurrentDictionary\u0026lt;int, string\u0026gt; dict;\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(1_000_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup()\n{\n    dict \u003d new ConcurrentDictionary\u0026lt;int, string\u0026gt;();\n    data \u003d Enumerable.Range(0, N).OrderBy(_ \u003d\u0026gt; Guid.NewGuid()).ToList();\n}\n\n[Benchmark(baseline\u003dtrue)]\npublic void Capture()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, _ \u003d\u0026gt; $\"{guid}\"); // \"guid\" is captured\n    }\n}\n\n[Benchmark]\npublic void Lambda()\n{\n    foreach (var guid in data)\n    {\n        dict.GetOrAdd(guid, x \u003d\u0026gt; $\"{x}\"); // no capture\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6613",
    "name": "\"First\" and \"Last\" properties of \"LinkedList\" should be used instead of the \"First()\" and \"Last()\" extension methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eEnumerable.First\u003c/code\u003e extension method and the \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e property can be used to find the first value\nin a \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.First\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eLast\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.first\"\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.last\"\u003eLinkedList\u0026lt;T\u0026gt;.Last\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eFirst\u003c/code\u003e and \u003ccode\u003eLast\u003c/code\u003e properties are defined on the \u003ccode\u003eLinkedList\u003c/code\u003e class, and the extension method call can be\nreplaced by calling the propery instead.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetFirst(data As LinkedList(Of Integer)) As Integer\n    Return Enumerable.First(data)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetLast(data As LinkedList(Of Integer)) As Integer\n    Return Enumerable.Last(data)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetFirst(data As LinkedList(Of Integer)) As Integer\n    Return data.First.Value\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetLast(data As LinkedList(Of Integer)) As Integer\n    Return data.Last.Value\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1\"\u003eLinkedList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e919,577,629.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e44,299,688.61 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48504 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e271.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15.63 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e810,316,427.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e47,768,482.31 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57344 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e372.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.38 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate LinkedList\u0026lt;int\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(100_000)]\npublic int Size { get; set; }\n\n[Params(1_000)]\npublic int Runs { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new LinkedList\u0026lt;int\u0026gt;(Enumerable.Range(0, Size).Select(x \u003d\u0026gt; random.Next()));\n\n[Benchmark(Baseline \u003d true)]\npublic void LastMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last();                // Enumerable.Last()\n    }\n}\n\n[Benchmark]\npublic void LastProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last;                  // Last property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eEnumerable.First\u003c/code\u003e extension method and the \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e property can be used to find the first value\nin a \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.First\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eLast\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.first\"\u003eLinkedList\u0026lt;T\u0026gt;.First\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1.last\"\u003eLinkedList\u0026lt;T\u0026gt;.Last\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eFirst\u003c/code\u003e and \u003ccode\u003eLast\u003c/code\u003e properties are defined on the \u003ccode\u003eLinkedList\u003c/code\u003e class, and the extension method call can be\nreplaced by calling the propery instead.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetFirst(data As LinkedList(Of Integer)) As Integer\n    Return Enumerable.First(data)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetLast(data As LinkedList(Of Integer)) As Integer\n    Return Enumerable.Last(data)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetFirst(data As LinkedList(Of Integer)) As Integer\n    Return data.First.Value\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetLast(data As LinkedList(Of Integer)) As Integer\n    Return data.Last.Value\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.linkedlist-1\"\u003eLinkedList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStdDev\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e919,577,629.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e44,299,688.61 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e48504 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e271.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15.63 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e810,316,427.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e47,768,482.31 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e57344 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLastProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e372.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e13.38 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate LinkedList\u0026lt;int\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(100_000)]\npublic int Size { get; set; }\n\n[Params(1_000)]\npublic int Runs { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new LinkedList\u0026lt;int\u0026gt;(Enumerable.Range(0, Size).Select(x \u003d\u0026gt; random.Next()));\n\n[Benchmark(Baseline \u003d true)]\npublic void LastMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last();                // Enumerable.Last()\n    }\n}\n\n[Benchmark]\npublic void LastProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Runs; i++)\n    {\n        _ \u003d data.Last;                  // Last property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S126",
    "name": "\"If ... ElseIf\" constructs should end with \"Else\" clauses",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule applies whenever an \u003ccode\u003eIf\u003c/code\u003e statement is followed by one or more \u003ccode\u003eElseIf\u003c/code\u003e statements; the final \u003ccode\u003eElseIf\u003c/code\u003e\nshould be followed by an \u003ccode\u003eElse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eElse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eElse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003eCase Else\u003c/code\u003e clause in a \u003ccode\u003eSelect Case\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf x \u003d 0 Then\n    DoSomething()\nElseIf x \u003d 1 Then\n    DoSomethingElse()\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf x \u003d 0 Then\n    DoSomething()\nElseIf x \u003d 1 Then\n    DoSomethingElse()\nElse\n    Throw New ArgumentException(\"...\")\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNone\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule applies whenever an \u003ccode\u003eIf\u003c/code\u003e statement is followed by one or more \u003ccode\u003eElseIf\u003c/code\u003e statements; the final \u003ccode\u003eElseIf\u003c/code\u003e\nshould be followed by an \u003ccode\u003eElse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eElse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eElse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003eCase Else\u003c/code\u003e clause in a \u003ccode\u003eSelect Case\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf x \u003d 0 Then\n    DoSomething()\nElseIf x \u003d 1 Then\n    DoSomethingElse()\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf x \u003d 0 Then\n    DoSomething()\nElseIf x \u003d 1 Then\n    DoSomethingElse()\nElse\n    Throw New ArgumentException(\"...\")\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNone\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2360",
    "name": "Optional parameters should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe overloading mechanism should be used in place of optional parameters for several reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. \u003c/li\u003e\n  \u003cli\u003e The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you\n  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. \u003c/li\u003e\n  \u003cli\u003e Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub Notify(ByVal Company As String, Optional ByVal Office As String \u003d \"QJZ\") \u0027 Noncompliant\n\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub Notify(ByVal Company As String)\n  Notify(Company, \"QJZ\")\nEnd Sub\n\nSub Notify(ByVal Company As String, ByVal Office As String)\n\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores non externally visible methods.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe overloading mechanism should be used in place of optional parameters for several reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. \u003c/li\u003e\n  \u003cli\u003e The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you\n  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. \u003c/li\u003e\n  \u003cli\u003e Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub Notify(ByVal Company As String, Optional ByVal Office As String \u003d \"QJZ\") \u0027 Noncompliant\n\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub Notify(ByVal Company As String)\n  Notify(Company, \"QJZ\")\nEnd Sub\n\nSub Notify(ByVal Company As String, ByVal Office As String)\n\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule ignores non externally visible methods.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1151",
    "name": "\"Select...Case\" clauses should not have too many lines of code",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSelect...Case\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a case clause\ncontains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause\nshould be extracted into a dedicated procedure.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nSelect Case number\n    Case 1 To 5 \u0027 Noncompliant: 4 statements in the case\n        MethodCall1(\"\")\n        MethodCall2(\"\")\n        MethodCall3(\"\")\n        MethodCall4(\"\")\n    Case Else\n        \u0027 ...\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case number\n    Case 1 To 5\n        DoSomething()\n    Case Else\n        \u0027 ...\nEnd Select\n...\nSub DoSomething()\n    MethodCall1(\"\")\n    MethodCall2(\"\")\n    MethodCall3(\"\")\n    MethodCall4(\"\")\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eSelect...Case\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a case clause\ncontains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause\nshould be extracted into a dedicated procedure.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nSelect Case number\n    Case 1 To 5 \u0027 Noncompliant: 4 statements in the case\n        MethodCall1(\"\")\n        MethodCall2(\"\")\n        MethodCall3(\"\")\n        MethodCall4(\"\")\n    Case Else\n        \u0027 ...\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case number\n    Case 1 To 5\n        DoSomething()\n    Case Else\n        \u0027 ...\nEnd Select\n...\nSub DoSomething()\n    MethodCall1(\"\")\n    MethodCall2(\"\")\n    MethodCall3(\"\")\n    MethodCall4(\"\")\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of statements.",
        "defaultValue": "8",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "8"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S927",
    "name": "Parameter names should match base declaration",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eParameters are part of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003emethod signature\u003c/a\u003e and its identity.\u003c/p\u003e\n\u003cp\u003eImplementing a method from an interface, a base class, or a partial method and changing one of its parameters\u0027 names will confuse and impact its\nreadability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nInterface IBankAccount\n    Sub AddMoney(money As Integer)\nEnd Interface\n\nClass BankAccount\n    Implements IBankAccount\n\n    Private Sub AddMoney(amount As Integer) \u0027 Noncompliant: parameter\u0027s name differs from base\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any ambiguity in the code, parameters\u0027 names should match the initial declaration, whether its initial declaration is from an interface, a\nbase class, or a partial method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nInterface IBankAccount\n    Sub AddMoney(money As Integer)\nEnd Interface\n\nClass BankAccount\n    Implements IBankAccount\n\n    Private Sub AddMoney(money As Integer) \u0027 Compliant: parameter\u0027s name match base name\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003eMethod signatures - Wiki\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eParameters are part of the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003emethod signature\u003c/a\u003e and its identity.\u003c/p\u003e\n\u003cp\u003eImplementing a method from an interface, a base class, or a partial method and changing one of its parameters\u0027 names will confuse and impact its\nreadability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nInterface IBankAccount\n    Sub AddMoney(money As Integer)\nEnd Interface\n\nClass BankAccount\n    Implements IBankAccount\n\n    Private Sub AddMoney(amount As Integer) \u0027 Noncompliant: parameter\u0027s name differs from base\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eTo avoid any ambiguity in the code, parameters\u0027 names should match the initial declaration, whether its initial declaration is from an interface, a\nbase class, or a partial method.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nInterface IBankAccount\n    Sub AddMoney(money As Integer)\nEnd Interface\n\nClass BankAccount\n    Implements IBankAccount\n\n    Private Sub AddMoney(money As Integer) \u0027 Compliant: parameter\u0027s name match base name\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Type_signature#Method_signature\"\u003eMethod signatures - Wiki\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6607",
    "name": "The collection should be filtered before sorting by using \"Where\" before \"OrderBy\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen working with LINQ in C#, it is recommended to pay attention to the order in which methods are chained, especially when using\n\u003ccode\u003eWhere\u003c/code\u003e and \u003ccode\u003eOrderBy\u003c/code\u003e methods. It is advised to call the \u003ccode\u003eWhere\u003c/code\u003e method before \u003ccode\u003eOrderBy\u003c/code\u003e because\n\u003ccode\u003eWhere\u003c/code\u003e filters the elements of the sequence based on a given condition and returns a new sequence containing only the elements that\nsatisfy that condition. Calling \u003ccode\u003eOrderBy\u003c/code\u003e before \u003ccode\u003eWhere\u003c/code\u003e, may end up sorting elements that will be later discarded, which can\nlead to inefficiency. Conversely, calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e, will first filter the sequence to include only the elements\nof interest, and then sort them based on the specified order.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe issue can be fixed by calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function GetSortedFilteredList(data As IEnumerable(Of Integer)) As IEnumerable(Of Integer)\n    Return data.OrderBy(Function(x) x).Where(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function GetSortedFilteredList(data As IEnumerable(Of Integer)) As IEnumerable(Of Integer)\n    Return data.Where(Function(x) x Mod 2 \u003d 0).OrderBy(Function(x) x)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby\"\u003eEnumerable.OrderBy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eEnumerable.Where\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/7499384/does-the-order-of-linq-functions-matter/7499454#7499454\"\u003eJon Skeet’s explanation on Stack\n  Overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOrderByThenWhere\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e175.36 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWhereThenOrderBy\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.58 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.697 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate IList\u0026lt;int\u0026gt; data;\nprivate static readonly Random Random \u003d new Random();\n\n[Params(1_000_000)]\npublic int NumberOfEntries;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, NumberOfEntries).Select(x \u003d\u0026gt; Random.Next(0, NumberOfEntries)).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void OrderByThenWhere() \u003d\u0026gt;\n    _ \u003d data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).ToList();  // OrderBy followed by Where\n\n[Benchmark]\npublic void WhereThenOrderBy() \u003d\u0026gt;\n    _ \u003d data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).OrderBy(x \u003d\u0026gt; x).ToList();  // Where followed by OrderBy\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen working with LINQ in C#, it is recommended to pay attention to the order in which methods are chained, especially when using\n\u003ccode\u003eWhere\u003c/code\u003e and \u003ccode\u003eOrderBy\u003c/code\u003e methods. It is advised to call the \u003ccode\u003eWhere\u003c/code\u003e method before \u003ccode\u003eOrderBy\u003c/code\u003e because\n\u003ccode\u003eWhere\u003c/code\u003e filters the elements of the sequence based on a given condition and returns a new sequence containing only the elements that\nsatisfy that condition. Calling \u003ccode\u003eOrderBy\u003c/code\u003e before \u003ccode\u003eWhere\u003c/code\u003e, may end up sorting elements that will be later discarded, which can\nlead to inefficiency. Conversely, calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e, will first filter the sequence to include only the elements\nof interest, and then sort them based on the specified order.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe issue can be fixed by calling \u003ccode\u003eWhere\u003c/code\u003e before \u003ccode\u003eOrderBy\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function GetSortedFilteredList(data As IEnumerable(Of Integer)) As IEnumerable(Of Integer)\n    Return data.OrderBy(Function(x) x).Where(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function GetSortedFilteredList(data As IEnumerable(Of Integer)) As IEnumerable(Of Integer)\n    Return data.Where(Function(x) x Mod 2 \u003d 0).OrderBy(Function(x) x)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby\"\u003eEnumerable.OrderBy\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where\"\u003eEnumerable.Where\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://stackoverflow.com/questions/7499384/does-the-order-of-linq-functions-matter/7499454#7499454\"\u003eJon Skeet’s explanation on Stack\n  Overflow\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOrderByThenWhere\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e175.36 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.101 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eWhereThenOrderBy\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.58 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.697 ms\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate IList\u0026lt;int\u0026gt; data;\nprivate static readonly Random Random \u003d new Random();\n\n[Params(1_000_000)]\npublic int NumberOfEntries;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, NumberOfEntries).Select(x \u003d\u0026gt; Random.Next(0, NumberOfEntries)).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void OrderByThenWhere() \u003d\u0026gt;\n    _ \u003d data.OrderBy(x \u003d\u0026gt; x).Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).ToList();  // OrderBy followed by Where\n\n[Benchmark]\npublic void WhereThenOrderBy() \u003d\u0026gt;\n    _ \u003d data.Where(x \u003d\u0026gt; x % 2 \u003d\u003d 0 ).OrderBy(x \u003d\u0026gt; x).ToList();  // Where followed by OrderBy\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6608",
    "name": "Prefer indexing instead of \"Enumerable\" methods on types implementing \"IList\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIndexes in C# provide direct access to an element at a specific position within an array or collection. When compared to \u003ccode\u003eEnumerable\u003c/code\u003e\nmethods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the\nunderlying collection type before accessing it.\u003c/p\u003e\n\u003cp\u003eThis applies to types that implement one of these interfaces:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist\"\u003eIList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1\"\u003eIList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1\"\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eIf the type you are using implements \u003ccode\u003eIList\u003c/code\u003e, \u003ccode\u003eIList\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/code\u003e, it implements\n\u003ccode\u003ethis[int index]\u003c/code\u003e. This means calls to \u003ccode\u003eFirst\u003c/code\u003e, \u003ccode\u003eLast\u003c/code\u003e, or \u003ccode\u003eElementAt(index)\u003c/code\u003e can be replaced with\nindexing at \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003eCount-1\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e respectively.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetAt(data As List(Of Integer), index As Integer) As Integer\n    Return data.ElementAt(index)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetFirst(data As List(Of Integer)) As Integer\n    Return data.First()\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetLast(data As List(Of Integer)) As Integer\n    Return data.Last()\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetAt(data As List(Of Integer), index As Integer) As Integer\n    Return data(index)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetFirst(data As List(Of Integer)) As Integer\n    Return data(0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetLast(data As List(Of Integer)) As Integer\n    Return data(data.Count-1)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.item\"\u003eIList.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1.item\"\u003eIList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1.item\"\u003eIReadonlyList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15,193.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e233.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9,465.6 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e148.16 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,790.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e165.70 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e398.5 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.36 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,398.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.48 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e347.3 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e12,205.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e298.49 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8,917.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e51.55 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,109.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100.13 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e566.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,052.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e76.02 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e680.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;byte\u0026gt; data;\nprivate Random random;\n\n[Params(1_000_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int LoopSize;\n\n[GlobalSetup]\npublic void Setup()\n{\n    random \u003d new Random(42);\n    var bytes \u003d new byte[SampleSize];\n    random.NextBytes(bytes);\n    data \u003d bytes.ToList();\n}\n\n[Benchmark]\npublic void ElementAt()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data.ElementAt(index);\n    }\n}\n\n[Benchmark]\npublic void Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data[index];\n    }\n}\n\n[Benchmark]\npublic void First()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.First();\n    }\n}\n\n[Benchmark]\npublic void First_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[0];\n    }\n}\n\n[Benchmark]\npublic void Last()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.Last();\n    }\n}\n\n[Benchmark]\npublic void Last_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[data.Count - 1];\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIndexes in C# provide direct access to an element at a specific position within an array or collection. When compared to \u003ccode\u003eEnumerable\u003c/code\u003e\nmethods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the\nunderlying collection type before accessing it.\u003c/p\u003e\n\u003cp\u003eThis applies to types that implement one of these interfaces:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist\"\u003eIList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1\"\u003eIList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1\"\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eIf the type you are using implements \u003ccode\u003eIList\u003c/code\u003e, \u003ccode\u003eIList\u0026lt;T\u0026gt;\u003c/code\u003e or \u003ccode\u003eIReadonlyList\u0026lt;T\u0026gt;\u003c/code\u003e, it implements\n\u003ccode\u003ethis[int index]\u003c/code\u003e. This means calls to \u003ccode\u003eFirst\u003c/code\u003e, \u003ccode\u003eLast\u003c/code\u003e, or \u003ccode\u003eElementAt(index)\u003c/code\u003e can be replaced with\nindexing at \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003eCount-1\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetAt(data As List(Of Integer), index As Integer) As Integer\n    Return data.ElementAt(index)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetFirst(data As List(Of Integer)) As Integer\n    Return data.First()\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetLast(data As List(Of Integer)) As Integer\n    Return data.Last()\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetAt(data As List(Of Integer), index As Integer) As Integer\n    Return data(index)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetFirst(data As List(Of Integer)) As Integer\n    Return data(0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"3\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetLast(data As List(Of Integer)) As Integer\n    Return data(data.Count-1)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.item\"\u003eIList.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1.item\"\u003eIList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlylist-1.item\"\u003eIReadonlyList\u0026lt;T\u0026gt;.Item[Int32]\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n    \u003ccol style\u003d\"width: 25%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e15,193.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e233.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9,465.6 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e148.16 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,790.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e165.70 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e398.5 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.36 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e7,398.2 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e152.48 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e347.3 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.47 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eElementAt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e12,205.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e298.49 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eIndex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e8,917.8 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e51.55 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,109.1 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e100.13 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirst_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e566.0 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5,052.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e76.02 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLast_Index\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e680.7 ns\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9.56 ns\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;byte\u0026gt; data;\nprivate Random random;\n\n[Params(1_000_000)]\npublic int SampleSize;\n\n[Params(1_000)]\npublic int LoopSize;\n\n[GlobalSetup]\npublic void Setup()\n{\n    random \u003d new Random(42);\n    var bytes \u003d new byte[SampleSize];\n    random.NextBytes(bytes);\n    data \u003d bytes.ToList();\n}\n\n[Benchmark]\npublic void ElementAt()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data.ElementAt(index);\n    }\n}\n\n[Benchmark]\npublic void Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        var index \u003d random.Next(0, SampleSize);\n        _ \u003d data[index];\n    }\n}\n\n[Benchmark]\npublic void First()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.First();\n    }\n}\n\n[Benchmark]\npublic void First_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[0];\n    }\n}\n\n[Benchmark]\npublic void Last()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data.Last();\n    }\n}\n\n[Benchmark]\npublic void Last_Index()\n{\n    for (int i \u003d 0; i \u0026lt; LoopSize; i++)\n    {\n        _ \u003d data[data.Count - 1];\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6605",
    "name": "Collection-specific \"Exists\" method should be used instead of the \"Any\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.Exists\u003c/code\u003e method and \u003ccode\u003eIEnumerable.Any\u003c/code\u003e method can be used to find the first element that satisfies a predicate\nin a collection. However, \u003ccode\u003eList.Exists\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.Any\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects, as well as requires\nsignificantly less memory. For small collections, the performance difference may be negligible, but for large collections, it can be noticeable. The\nsame applies to \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003cp\u003eAlso, no memory allocations were needed for the \u003ccode\u003eExists\u003c/code\u003e method, since the search is done in-place.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eExists\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eAny\u003c/code\u003e extension method if a\npredicate is used. The method can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ContainsEven(data As List(Of Integer)) As Boolean\n    Return data.Any(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ContainsEven(data() As Integer) As Boolean\n    Return data.Any(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction ContainsEven(data As List(Of Integer)) As Boolean\n    Return data.Exists(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction ContainsEven(data() As Integer) As Boolean\n    Return Array.Exists(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray.Exists\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.670 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1413 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.364 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0270 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.380 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0327 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.575 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0348 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\nprivate readonly Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 43).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void Any()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);          // Enumerable.Any\n    }\n}\n\n[Benchmark]\npublic void Exists()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);       // List\u0026lt;T\u0026gt;.Exists\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.Exists\u003c/code\u003e method and \u003ccode\u003eIEnumerable.Any\u003c/code\u003e method can be used to find the first element that satisfies a predicate\nin a collection. However, \u003ccode\u003eList.Exists\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.Any\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects, as well as requires\nsignificantly less memory. For small collections, the performance difference may be negligible, but for large collections, it can be noticeable. The\nsame applies to \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 3x improvement in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003cp\u003eAlso, no memory allocations were needed for the \u003ccode\u003eExists\u003c/code\u003e method, since the search is done in-place.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eSince \u003ccode\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to\nEntities\u003c/a\u003e\u003c/code\u003e relies a lot on \u003ccode\u003eSystem.Linq\u003c/code\u003e for \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities#query-conversion\"\u003equery conversion\u003c/a\u003e,\nthis rule won’t raise when used within LINQ to Entities syntaxes.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eExists\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eAny\u003c/code\u003e extension method if a\npredicate is used. The method can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ContainsEven(data As List(Of Integer)) As Boolean\n    Return data.Any(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction ContainsEven(data() As Integer) As Boolean\n    Return data.Any(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction ContainsEven(data As List(Of Integer)) As Boolean\n    Return data.Exists(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction ContainsEven(data() As Integer) As Boolean\n    Return Array.Exists(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.exists\"\u003eList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.exists\"\u003eArray.Exists\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.exists\"\u003eImmutableList\u0026lt;T\u0026gt;.Exists(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any\"\u003eEnumerable.Any(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities\"\u003eLINQ to Entities\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.670 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1413 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.364 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0270 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAny\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.380 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0327 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eExists\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.575 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0348 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\nprivate readonly Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 43).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void Any()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Any(x \u003d\u0026gt; x % 2 \u003d\u003d 0);          // Enumerable.Any\n    }\n}\n\n[Benchmark]\npublic void Exists()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.Exists(x \u003d\u0026gt; x % 2 \u003d\u003d 0);       // List\u0026lt;T\u0026gt;.Exists\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8.1 (4.8.9139.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4428",
    "name": "\"PartCreationPolicyAttribute\" should be used with \"ExportAttribute\"",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo customize the default behavior for an export in the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility\nFramework\u003c/a\u003e (MEF), applying the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nis necessary. For the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nto be meaningful in the context of an export, it is required to also annotate the class with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003e\u003ccode\u003eExportAttribute\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class is annotated with the \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e but not with the\n\u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.ComponentModel.Composition\n\n\u0026lt;PartCreationPolicy(CreationPolicy.Any)\u0026gt; \u0027 Noncompliant\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.ComponentModel.Composition\n\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.Any)\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed\n  programming model overview (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003ePartCreationPolicyAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003eExportAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003eCreationPolicy\n  Enum\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2015/11/08/mef-part-1-fundamentals-imports-and-exports/\"\u003eMEF Part 1 – Fundamentals,\n  Imports and Exports\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/01/26/mef-part-2-metadata-and-creation-policies/\"\u003eMEF Part 2 – Metadata and creation\n  policies\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/03/06/mef-part-3-life-cycle-management-and-monitoring/\"\u003eMEF Part 3 – Life cycle\n  management and monitoring\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo customize the default behavior for an export in the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility\nFramework\u003c/a\u003e (MEF), applying the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nis necessary. For the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003e\u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e\u003c/a\u003e\nto be meaningful in the context of an export, it is required to also annotate the class with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003e\u003ccode\u003eExportAttribute\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a class is annotated with the \u003ccode\u003ePartCreationPolicyAttribute\u003c/code\u003e but not with the\n\u003ccode\u003eExportAttribute\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.ComponentModel.Composition\n\n\u0026lt;PartCreationPolicy(CreationPolicy.Any)\u0026gt; \u0027 Noncompliant\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.ComponentModel.Composition\n\n\u0026lt;Export(GetType(IFooBar))\u0026gt;\n\u0026lt;PartCreationPolicy(CreationPolicy.Any)\u0026gt;\nPublic Class FooBar\n    Inherits IFooBar\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/\"\u003eManaged Extensibility Framework (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/framework/mef/attributed-programming-model-overview-mef\"\u003eAttributed\n  programming model overview (MEF)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.partcreationpolicyattribute\"\u003ePartCreationPolicyAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.exportattribute\"\u003eExportAttribute\n  Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.composition.creationpolicy\"\u003eCreationPolicy\n  Enum\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2015/11/08/mef-part-1-fundamentals-imports-and-exports/\"\u003eMEF Part 1 – Fundamentals,\n  Imports and Exports\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/01/26/mef-part-2-metadata-and-creation-policies/\"\u003eMEF Part 2 – Metadata and creation\n  policies\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Stefan Henneken - \u003ca href\u003d\"https://stefanhenneken.net/2019/03/06/mef-part-3-life-cycle-management-and-monitoring/\"\u003eMEF Part 3 – Life cycle\n  management and monitoring\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "mef",
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2925",
    "name": "\"Thread.Sleep\" should not be used in tests",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003eThread.Sleep\u003c/code\u003e in a test might introduce unpredictable and inconsistent results depending on the environment. Furthermore, it will\nblock the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e, which means the system resources are not being fully used.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub SomeTest()\n    Threading.Thread.Sleep(500) \u0027 Noncompliant\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is a task-based asynchronous approach, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easync and await\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMore specifically the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay\u003c/a\u003e method should be\nused, because of the following advantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003cstrong\u003easynchronous\u003c/strong\u003e: The thread will not be blocked, but instead will be reused by other operations \u003c/li\u003e\n  \u003cli\u003e It is more \u003cstrong\u003eprecise\u003c/strong\u003e in timing the delay than \u003ccode\u003eThread.Sleep\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It can be \u003cstrong\u003ecanceled and continued\u003c/strong\u003e, which gives more flexibility and control in the timing of your code \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Async Function SomeTest() As Task\n    Await Task.Delay(500)\n    \u0027 assertions...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAnother scenario is when some data might need to be mocked using \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq\u003c/a\u003e, and a delay needs to be\nintroduced:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub UserService_Test()\n    Dim UserService As New Mock(Of UserService)\n    Dim Expected As New User\n    UserService.Setup(Function(X) X.GetUserById(42)).Returns(\n        Function()\n            Threading.Thread.Sleep(500) \u0027 Noncompliant\n            Return Task.FromResult(Expected)\n        End Function)\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eAn alternative to \u003ccode\u003eThread.Sleep\u003c/code\u003e while mocking with \u003ccode\u003eMoq\u003c/code\u003e is to use \u003ccode\u003eReturnsAsync\u003c/code\u003e and pass the amount of time to\ndelay there:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub UserService_Test()\n    Dim UserService As New Mock(Of UserService)\n    Dim Expected As New User\n    UserService.Setup(Function(X) X.GetUserById(42)).ReturnsAsync(Expected, TimeSpan.FromMilliseconds(500))\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep\"\u003eThread.Sleep method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming with async and await\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq mocking library\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003eThread.Sleep\u003c/code\u003e in a test might introduce unpredictable and inconsistent results depending on the environment. Furthermore, it will\nblock the \u003ca href\u003d\"https://en.wikipedia.org/wiki/Thread_(computing)\"\u003ethread\u003c/a\u003e, which means the system resources are not being fully used.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub SomeTest()\n    Threading.Thread.Sleep(500) \u0027 Noncompliant\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eAn alternative is a task-based asynchronous approach, using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003easync and await\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMore specifically the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay\u003c/a\u003e method should be\nused, because of the following advantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is \u003cstrong\u003easynchronous\u003c/strong\u003e: The thread will not be blocked, but instead will be reused by other operations \u003c/li\u003e\n  \u003cli\u003e It is more \u003cstrong\u003eprecise\u003c/strong\u003e in timing the delay than \u003ccode\u003eThread.Sleep\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e It can be \u003cstrong\u003ecanceled and continued\u003c/strong\u003e, which gives more flexibility and control in the timing of your code \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Async Function SomeTest() As Task\n    Await Task.Delay(500)\n    \u0027 assertions...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAnother scenario is when some data might need to be mocked using \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq\u003c/a\u003e, and a delay needs to be\nintroduced:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub UserService_Test()\n    Dim UserService As New Mock(Of UserService)\n    Dim Expected As New User\n    UserService.Setup(Function(X) X.GetUserById(42)).Returns(\n        Function()\n            Threading.Thread.Sleep(500) \u0027 Noncompliant\n            Return Task.FromResult(Expected)\n        End Function)\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eAn alternative to \u003ccode\u003eThread.Sleep\u003c/code\u003e while mocking with \u003ccode\u003eMoq\u003c/code\u003e is to use \u003ccode\u003eReturnsAsync\u003c/code\u003e and pass the amount of time to\ndelay there:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub UserService_Test()\n    Dim UserService As New Mock(Of UserService)\n    Dim Expected As New User\n    UserService.Setup(Function(X) X.GetUserById(42)).ReturnsAsync(Expected, TimeSpan.FromMilliseconds(500))\n    \u0027 assertions...\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.thread.sleep\"\u003eThread.Sleep method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.delay\"\u003eTask.Delay method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/\"\u003eAsynchronous programming with async and await\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/moq/moq4\"\u003eMoq mocking library\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice",
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6609",
    "name": "\"Min/Max\" properties of \"Set\" types should be used instead of the \"Enumerable\" extension methods",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eEnumerable.Max\u003c/code\u003e extension method and the \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e property can be used to find the maximum value in\na \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.Max\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eMin\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploit the fact that the set is implemented via a \u003ccode\u003eRed-Black\ntree\u003c/code\u003e. The algorithm to find the \u003ccode\u003eMax\u003c/code\u003e/\u003ccode\u003eMin\u003c/code\u003e is \"go left/right whenever possible\". The operation has the time complexity\nof \u003ccode\u003eO(h)\u003c/code\u003e which becomes \u003ccode\u003eO(ln(n))\u003c/code\u003e due to the fact that the tree is balanced. This is much better than the \u003ccode\u003eO(n)\u003c/code\u003e\ntime complexity of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploits a tree augmentation technique, storing the\n\u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eCount\u003c/code\u003e values on each node of the data structure. The time complexity in this case is\n\u003ccode\u003eO(1)\u003c/code\u003e that is significantly better than \u003ccode\u003eO(n)\u003c/code\u003e of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.max\"\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.min\"\u003eSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Min\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eMin\u003c/code\u003e and \u003ccode\u003eMax\u003c/code\u003e properties are defined on the following classes, and the extension method call can be replaced by calling\nthe propery instead:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetMax(data As SortedSet(Of Integer)) As Integer\n    Return Enumerable.Max(data)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetMin(data As SortedSet(Of Integer)) As Integer\n    Return Enumerable.Min(data)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetMax(data As SortedSet(Of Integer)) As Integer\n    Return data.Max()\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetMin(data As SortedSet(Of Integer)) As Integer\n    Return data.Min()\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68,961.483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e499.6623 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e248063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.638 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0634 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85,827.359 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,531.1611 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e281259 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e67.682 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3757 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e312919 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate SortedSet\u0026lt;string\u0026gt; data;\n\n[Params(1_000)]\npublic int Iterations;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new SortedSet\u0026lt;string\u0026gt;(Enumerable.Range(0, Iterations).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()));\n\n[Benchmark(Baseline \u003d true)]\npublic void MaxMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max();     // Max() extension method\n    }\n}\n\n[Benchmark]\npublic void MaxProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max;       // Max property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eEnumerable.Max\u003c/code\u003e extension method and the \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e property can be used to find the maximum value in\na \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e. However, \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/code\u003e is much faster than \u003ccode\u003eEnumerable.Max\u003c/code\u003e. For small\ncollections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the \u003ccode\u003eMin\u003c/code\u003e\nproperty as well.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploit the fact that the set is implemented via a \u003ccode\u003eRed-Black\ntree\u003c/code\u003e. The algorithm to find the \u003ccode\u003eMax\u003c/code\u003e/\u003ccode\u003eMin\u003c/code\u003e is \"go left/right whenever possible\". The operation has the time complexity\nof \u003ccode\u003eO(h)\u003c/code\u003e which becomes \u003ccode\u003eO(ln(n))\u003c/code\u003e due to the fact that the tree is balanced. This is much better than the \u003ccode\u003eO(n)\u003c/code\u003e\ntime complexity of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eMin\u003c/code\u003e in \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e exploits a tree augmentation technique, storing the\n\u003ccode\u003eMin\u003c/code\u003e, \u003ccode\u003eMax\u003c/code\u003e and \u003ccode\u003eCount\u003c/code\u003e values on each node of the data structure. The time complexity in this case is\n\u003ccode\u003eO(1)\u003c/code\u003e that is significantly better than \u003ccode\u003eO(n)\u003c/code\u003e of extension methods.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.max\"\u003eSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1.min\"\u003eSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Min\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.max\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Max\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder.min\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder.Min\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured a significant improvement both in execution time and memory allocation. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from\nthe \u003ccode\u003eMore info\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eMin\u003c/code\u003e and \u003ccode\u003eMax\u003c/code\u003e properties are defined on the following classes, and the extension method call can be replaced by calling\nthe propery instead:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetMax(data As SortedSet(Of Integer)) As Integer\n    Return Enumerable.Max(data)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetMin(data As SortedSet(Of Integer)) As Integer\n    Return Enumerable.Min(data)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetMax(data As SortedSet(Of Integer)) As Integer\n    Return data.Max()\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetMin(data As SortedSet(Of Integer)) As Integer\n    Return data.Min()\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1\"\u003eSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1.builder\"\u003eImmutableSortedSet\u0026lt;T\u0026gt;.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e68,961.483 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e499.6623 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e248063 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.638 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0634 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxMethod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85,827.359 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1,531.1611 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e281259 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMaxProperty\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e67.682 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.3757 us\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e312919 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate SortedSet\u0026lt;string\u0026gt; data;\n\n[Params(1_000)]\npublic int Iterations;\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d new SortedSet\u0026lt;string\u0026gt;(Enumerable.Range(0, Iterations).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()));\n\n[Benchmark(Baseline \u003d true)]\npublic void MaxMethod()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max();     // Max() extension method\n    }\n}\n\n[Benchmark]\npublic void MaxProperty()\n{\n    for (var i \u003d 0; i \u0026lt; Iterations; i++)\n    {\n        _ \u003d data.Max;       // Max property\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4663",
    "name": "Comments should not be empty",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEmpty comments, as shown in the example, hurt readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n\u0027\n\n\u0027\u0027\u0027\n\u003c/pre\u003e\n\u003cp\u003eSome meaningful text should be added to the comment, or the comment markers should be removed.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEmpty comments, as shown in the example, hurt readability and might indicate an oversight.\u003c/p\u003e\n\u003cpre\u003e\n\u0027\n\n\u0027\u0027\u0027\n\u003c/pre\u003e\n\u003cp\u003eSome meaningful text should be added to the comment, or the comment markers should be removed.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2363",
    "name": "\"Private Shared ReadOnly\" fields should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate Shared ReadOnly\u003c/code\u003e field names comply\nwith the provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Private Shared ReadOnly Foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Private Shared ReadOnly foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate Shared ReadOnly\u003c/code\u003e field names comply\nwith the provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Private Shared ReadOnly Foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Private Shared ReadOnly foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the \u0027Private Shared ReadOnly\u0027 field names against.",
        "defaultValue": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S134",
    "name": "Control flow statements \"If\", \"For\", \"For Each\", \"Do\", \"While\", \"Select\" and \"Try\" should not be nested too deeply",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested control flow statements \u003ccode\u003eIf\u003c/code\u003e, \u003ccode\u003eSelect\u003c/code\u003e, \u003ccode\u003eFor\u003c/code\u003e, \u003ccode\u003eFor Each\u003c/code\u003e, \u003ccode\u003eWhile\u003c/code\u003e, \u003ccode\u003eDo\u003c/code\u003e,\nand \u003ccode\u003eTry\u003c/code\u003e are often key ingredients in creating what’s known as \"Spaghetti code\". This code smell can make your program difficult to\nunderstand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code’s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nIf condition1 \u0027 Compliant - depth \u003d 1\n  \u0027 ...\n  If condition2 \u0027 Compliant - depth \u003d 2\n    \u0027 ...\n    For i \u003d 0 to 10 \u0027 Compliant - depth \u003d 3, not exceeding the limit\n      \u0027 ...\n      If condition4 \u0027 Noncompliant - depth \u003d 4\n        If condition5 \u0027 Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          \u0027 ...\n        End If\n        Return\n      End If\n    Next\n  End If\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested control flow statements \u003ccode\u003eIf\u003c/code\u003e, \u003ccode\u003eSelect\u003c/code\u003e, \u003ccode\u003eFor\u003c/code\u003e, \u003ccode\u003eFor Each\u003c/code\u003e, \u003ccode\u003eWhile\u003c/code\u003e, \u003ccode\u003eDo\u003c/code\u003e,\nand \u003ccode\u003eTry\u003c/code\u003e are often key ingredients in creating what’s known as \"Spaghetti code\". This code smell can make your program difficult to\nunderstand and maintain.\u003c/p\u003e\n\u003cp\u003eWhen numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the code’s\nreadability and maintainability, and it also complicates the testing process.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting:\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre\u003e\nIf condition1 \u0027 Compliant - depth \u003d 1\n  \u0027 ...\n  If condition2 \u0027 Compliant - depth \u003d 2\n    \u0027 ...\n    For i \u003d 0 to 10 \u0027 Compliant - depth \u003d 3, not exceeding the limit\n      \u0027 ...\n      If condition4 \u0027 Noncompliant - depth \u003d 4\n        If condition5 \u0027 Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          \u0027 ...\n        End If\n        Return\n      End If\n    Next\n  End If\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "maximumNestingLevel": {
        "key": "maximumNestingLevel",
        "name": "maximumNestingLevel",
        "description": "Maximum allowed control flow statement nesting depth.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximumNestingLevel": "3"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5753",
    "name": "Disabling ASP.NET \"Request Validation\" feature is security-sensitive",
    "defaultSeverity": "MAJOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eASP.NET 1.1+ comes with a feature called \u003cem\u003eRequest Validation\u003c/em\u003e, preventing the server to accept content containing un-encoded HTML. This\nfeature comes as a first protection layer against Cross-Site Scripting (XSS) attacks and act as a simple Web Application Firewall (WAF) rejecting\nrequests potentially containing malicious content.\u003c/p\u003e\n\u003cp\u003eWhile this feature is not a silver bullet to prevent all XSS attacks, it helps to catch basic ones. It will for example prevent \u003ccode\u003e\u0026lt;script\ntype\u003d\"text/javascript\" src\u003d\"https://malicious.domain/payload.js\"\u0026gt;\u003c/code\u003e to reach your Controller.\u003c/p\u003e\n\u003cp\u003eNote: \u003cem\u003eRequest Validation\u003c/em\u003e feature being only available for ASP.NET, no Security Hotspot is raised on ASP.NET Core applications.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e the developer doesn’t know the impact to deactivate the Request Validation feature \u003c/li\u003e\n  \u003cli\u003e the web application accepts user-supplied data \u003c/li\u003e\n  \u003cli\u003e all user-supplied data are not validated \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eAt Controller level:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;ValidateInput(False)\u0026gt;\nPublic Function Welcome(Name As String) As ActionResult\n  ...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAt application level, configured in the Web.config file:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n   \u0026lt;system.web\u0026gt;\n      \u0026lt;pages validateRequest\u003d\"false\" /\u0026gt;\n      ...\n      \u0026lt;httpRuntime requestValidationMode\u003d\"0.0\" /\u0026gt;\n   \u0026lt;/system.web\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Activate the Request Validation feature for all HTTP requests \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eAt Controller level:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;ValidateInput(True)\u0026gt;\nPublic Function Welcome(Name As String) As ActionResult\n  ...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nPublic Function Welcome(Name As String) As ActionResult\n  ...\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eAt application level, configured in the Web.config file:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;configuration\u0026gt;\n   \u0026lt;system.web\u0026gt;\n      \u0026lt;pages validateRequest\u003d\"true\" /\u0026gt;\n      ...\n      \u0026lt;httpRuntime requestValidationMode\u003d\"4.5\" /\u0026gt;\n   \u0026lt;/system.web\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A03_2021-Injection/\"\u003eTop 10 2021 Category A3 - Injection\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.web.configuration.httpruntimesection.requestvalidationmode?view\u003dnetframework-4.8\"\u003eHttpRuntimeSection.RequestValidationMode Property\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-community/ASP-NET_Request_Validation\"\u003eOWASP ASP.NET Request Validation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"\u003eOWASP Cheat Sheet\u003c/a\u003e - XSS\n  Prevention Cheat Sheet \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\"\u003eTop 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79\"\u003eCWE-79 - Improper Neutralization of Input During Web Page Generation (\u0027Cross-site\n  Scripting\u0027)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "HIGH"
  },
  {
    "key": "vbnet:S2362",
    "name": "Private constants should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate Const\u003c/code\u003e field names comply with the\nprovided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Private Const Foo \u003d 0  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Private Const foo \u003d 0  \u0027 Compliant\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate Const\u003c/code\u003e field names comply with the\nprovided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Private Const Foo \u003d 0  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Private Const foo \u003d 0  \u0027 Compliant\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the private constant names against.",
        "defaultValue": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2365",
    "name": "Properties should not make collection or array copies",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller’s likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by the unexpectedly poor performance.\u003c/p\u003e\n\u003cp\u003eThis rule tracks calls to the following methods inside properties:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim foo \u003d {\"a\", \"b\", \"c\" }\nProperty Foo() As String() \u0027 Noncompliant\n    Get\n        Dim copy \u003d foo.Clone      \u0027 Expensive call\n        Return copy\n    End Get\nEnd Property\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim foo \u003d {\"a\", \"b\", \"c\" }\nFunction GetFoo() As String()\n    Dim copy \u003d foo.Clone\n    Return copy\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/properties\"\u003eProperties (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/objects-and-classes/#fields-and-properties\"\u003eFields\n  and properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/concepts/collections\"\u003eCollections (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller’s likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by the unexpectedly poor performance.\u003c/p\u003e\n\u003cp\u003eThis rule tracks calls to the following methods inside properties:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.tolist\"\u003eEnumerable.ToList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.toarray\"\u003eEnumerable.ToArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.clone\"\u003eArray.Clone\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim foo \u003d {\"a\", \"b\", \"c\" }\nProperty Foo() As String() \u0027 Noncompliant\n    Get\n        Dim copy \u003d foo.Clone      \u0027 Expensive call\n        Return copy\n    End Get\nEnd Property\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim foo \u003d {\"a\", \"b\", \"c\" }\nFunction GetFoo() As String()\n    Dim copy \u003d foo.Clone\n    Return copy\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/properties\"\u003eProperties (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/objects-and-classes/#fields-and-properties\"\u003eFields\n  and properties\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/concepts/collections\"\u003eCollections (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "api-design",
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S131",
    "name": "\"Select\" statements should end with a \"Case Else\" clause",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eCase Else\u003c/code\u003e clause is defensive programming.\u003c/p\u003e\n\u003cp\u003eThis clause should either take appropriate action or contain a suitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case param \u0027 Noncompliant - Case Else clause is missing\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case param\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\n  Case Else \u0027 Compliant\n    DoSomethingElse()\nEnd Select\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eCWE-478 - Missing Default Case in Switch Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe requirement for a final \u003ccode\u003eCase Else\u003c/code\u003e clause is defensive programming.\u003c/p\u003e\n\u003cp\u003eThis clause should either take appropriate action or contain a suitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case param \u0027 Noncompliant - Case Else clause is missing\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\nEnd Select\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSelect Case param\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\n  Case Else \u0027 Compliant\n    DoSomethingElse()\nEnd Select\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478\"\u003eCWE-478 - Missing Default Case in Switch Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3453",
    "name": "Classes should not have only \"private\" constructors",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen a class has only a \u003ccode\u003eprivate\u003c/code\u003e constructor, it can’t be instantiated except within the class itself. Such classes can be considered\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003edead code\u003c/a\u003e and should be fixed\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes that access their private constructors (\u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003esingletons\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003esmart\n  enums\u003c/a\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes with only \u003ccode\u003estatic\u003c/code\u003e members are also ignored because they are covered by Rule {rule:vbnet:S1118}. \u003c/li\u003e\n  \u003cli\u003e Classes that derive from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle\u003c/a\u003e since\n  they can be instantiate through \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003eP/Invoke\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class [MyClass] \u0027 Noncompliant: the class contains only private constructors\n    Private Sub New()\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class [MyClass] \u0027 Compliant: the class contains at least one non-private constructor\n    Public Sub New()\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S1118} - Utility classes should not have public constructors \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003ePlatform Invoke (P/Invoke)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003eUse\n  enumeration classes instead of enum types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003eDead code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003eSingleton pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen a class has only a \u003ccode\u003eprivate\u003c/code\u003e constructor, it can’t be instantiated except within the class itself. Such classes can be considered\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003edead code\u003c/a\u003e and should be fixed\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Classes that access their private constructors (\u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003esingletons\u003c/a\u003e or \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003esmart\n  enums\u003c/a\u003e) are ignored. \u003c/li\u003e\n  \u003cli\u003e Classes with only \u003ccode\u003estatic\u003c/code\u003e members are also ignored because they are covered by Rule {rule:vbnet:S1118}. \u003c/li\u003e\n  \u003cli\u003e Classes that derive from \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle\u003c/a\u003e since\n  they can be instantiate through \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003eP/Invoke\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class [MyClass] \u0027 Noncompliant: the class contains only private constructors\n    Private Sub New()\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class [MyClass] \u0027 Compliant: the class contains at least one non-private constructor\n    Public Sub New()\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:vbnet:S1118} - Utility classes should not have public constructors \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.safehandle\"\u003eSafeHandle Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\"\u003ePlatform Invoke (P/Invoke)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types\"\u003eUse\n  enumeration classes instead of enum types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dead_code\"\u003eDead code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Singleton_pattern\"\u003eSingleton pattern\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "design"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1155",
    "name": "\"Any()\" should be used to test for emptiness",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ccode\u003e.Count()\u003c/code\u003e to test for emptiness works, but using \u003ccode\u003e.Any()\u003c/code\u003e makes the intent clearer, and the code more readable.\nHowever, there are some cases where special attention should be paid:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e if the collection is an \u003ccode\u003eEntityFramework\u003c/code\u003e or other ORM query, calling \u003ccode\u003e.Count()\u003c/code\u003e will cause executing a potentially\n  massive SQL query and could put a large overhead on the application database. Calling \u003ccode\u003e.Any()\u003c/code\u003e will also connect to the database, but\n  will generate much more efficient SQL. \u003c/li\u003e\n  \u003cli\u003e if the collection is part of a LINQ query that contains \u003ccode\u003e.Select()\u003c/code\u003e statements that create objects, a large amount of memory could\n  be unnecessarily allocated. Calling \u003ccode\u003e.Any()\u003c/code\u003e will be much more efficient because it will execute fewer iterations of the enumerable.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPrivate Function HasContent(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u0026gt; 0      \u0027 Noncompliant\nEnd Function\n\nPrivate Function HasContent2(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u0026gt;\u003d 1     \u0027 Noncompliant\nEnd Function\n\nPrivate Function IsEmpty(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u003d 0      \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPrivate Function HasContent(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Any\nEnd Function\n\nPrivate Function HasContent2(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Any\nEnd Function\n\nPrivate Function IsEmpty(Strings As IEnumerable(Of String)) As Boolean\n    Return Not Strings.Any\nEnd Function\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ccode\u003e.Count()\u003c/code\u003e to test for emptiness works, but using \u003ccode\u003e.Any()\u003c/code\u003e makes the intent clearer, and the code more readable.\nHowever, there are some cases where special attention should be paid:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e if the collection is an \u003ccode\u003eEntityFramework\u003c/code\u003e or other ORM query, calling \u003ccode\u003e.Count()\u003c/code\u003e will cause executing a potentially\n  massive SQL query and could put a large overhead on the application database. Calling \u003ccode\u003e.Any()\u003c/code\u003e will also connect to the database, but\n  will generate much more efficient SQL. \u003c/li\u003e\n  \u003cli\u003e if the collection is part of a LINQ query that contains \u003ccode\u003e.Select()\u003c/code\u003e statements that create objects, a large amount of memory could\n  be unnecessarily allocated. Calling \u003ccode\u003e.Any()\u003c/code\u003e will be much more efficient because it will execute fewer iterations of the enumerable.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPrivate Function HasContent(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u0026gt; 0      \u0027 Noncompliant\nEnd Function\n\nPrivate Function HasContent2(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u0026gt;\u003d 1     \u0027 Noncompliant\nEnd Function\n\nPrivate Function IsEmpty(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Count() \u003d 0      \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPrivate Function HasContent(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Any\nEnd Function\n\nPrivate Function HasContent2(Strings As IEnumerable(Of String)) As Boolean\n    Return Strings.Any\nEnd Function\n\nPrivate Function IsEmpty(Strings As IEnumerable(Of String)) As Boolean\n    Return Not Strings.Any\nEnd Function\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2364",
    "name": "\"Private\" fields should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate\u003c/code\u003e field names match the provided\nregular expression.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not apply to \u003ccode\u003ePrivate Shared ReadOnly\u003c/code\u003e fields, which are checked by another rule.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Private Foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Private foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all \u003ccode\u003ePrivate\u003c/code\u003e field names match the provided\nregular expression.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not apply to \u003ccode\u003ePrivate Shared ReadOnly\u003c/code\u003e fields, which are checked by another rule.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Optionally, can start with an underscore character or \"s_\", e.g. \u003ccode\u003e_foo\u003c/code\u003e, \u003ccode\u003es_foo\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Camel casing, starting with a lower case character, e.g. backColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. html \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Private Foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Private foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the private field names against.",
        "defaultValue": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2367",
    "name": "Non-private constants should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private \u003ccode\u003eConst\u003c/code\u003e field names comply with\nthe provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Public Const foo \u003d 0  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Const Foo \u003d 0  \u0027 Compliant\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private \u003ccode\u003eConst\u003c/code\u003e field names comply with\nthe provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Public Const foo \u003d 0  \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Const Foo \u003d 0  \u0027 Compliant\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the non-private constant names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6603",
    "name": "The collection-specific \"TrueForAll\" method should be used instead of the \"All\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.TrueForAll\u003c/code\u003e method and the \u003ccode\u003eIEnumerable.All\u003c/code\u003e method can be used to check if all list elements satisfy a given\ncondition in a collection. However, \u003ccode\u003eList.TrueForAll\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.All\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects. The\nperformance difference may be minor for small collections, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement both in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore\ninfo\u003c/code\u003e tab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eTrueForAll\u003c/code\u003e method is defined on the collection class, and it has the same signature as the \u003ccode\u003eAll\u003c/code\u003e extension method. The\nmethod can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function AreAllEven(data As List(Of Integer)) As Boolean\n    Return data.All(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function AreAllEven(data As Integer()) As Boolean\n    Return data.All(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function AreAllEven(data As List(Of Integer)) As Boolean\n    Return data.TrueForAll(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function AreAllEven(data As Integer()) As Boolean\n    Return Array.TrueForAll(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray.TrueForAll\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.Builder.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.302 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0027 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.279 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0181 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.105 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0142 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.968 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0143 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(10_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 42).ToList();\n\n[Benchmark]\npublic void TrueForAll()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.TrueForAll(x \u003d\u0026gt; x \u003d\u003d 42);  // List\u0026lt;T\u0026gt;.TrueForAll\n    }\n}\n\n[Benchmark(Baseline \u003d true)]\npublic void All()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.All(x \u003d\u0026gt; x \u003d\u003d 42);         // Enumerable.All\u0026lt;TSource\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.TrueForAll\u003c/code\u003e method and the \u003ccode\u003eIEnumerable.All\u003c/code\u003e method can be used to check if all list elements satisfy a given\ncondition in a collection. However, \u003ccode\u003eList.TrueForAll\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.All\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e objects. The\nperformance difference may be minor for small collections, but for large collections, it can be noticeable.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList.Builder\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 4x improvement both in execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore\ninfo\u003c/code\u003e tab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eTrueForAll\u003c/code\u003e method is defined on the collection class, and it has the same signature as the \u003ccode\u003eAll\u003c/code\u003e extension method. The\nmethod can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function AreAllEven(data As List(Of Integer)) As Boolean\n    Return data.All(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function AreAllEven(data As Integer()) As Boolean\n    Return data.All(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function AreAllEven(data As List(Of Integer)) As Boolean\n    Return data.TrueForAll(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function AreAllEven(data As Integer()) As Boolean\n    Return Array.TrueForAll(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.trueforall\"\u003eList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.trueforall\"\u003eArray.TrueForAll\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.builder.trueforall\"\u003eImmutableList\u0026lt;T\u0026gt;.Builder.TrueForAll(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all\"\u003eEnumerable.All\u0026lt;TSource\u0026gt;\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.302 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0027 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6.279 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0181 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40004 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eTrueForAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.105 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0142 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e-\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eAll\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e4.968 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0143 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e40128 B\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;int\u0026gt; data;\n\n[Params(10_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; 42).ToList();\n\n[Benchmark]\npublic void TrueForAll()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.TrueForAll(x \u003d\u0026gt; x \u003d\u003d 42);  // List\u0026lt;T\u0026gt;.TrueForAll\n    }\n}\n\n[Benchmark(Baseline \u003d true)]\npublic void All()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        _ \u003d data.All(x \u003d\u0026gt; x \u003d\u003d 42);         // Enumerable.All\u0026lt;TSource\u0026gt;\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n12th Gen Intel Core i7-12800H, 1 CPU, 20 logical and 14 physical cores\n.NET SDK\u003d7.0.203\n  [Host]               : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2366",
    "name": "Properties should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property foo As Integer   \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property Foo As Integer   \u0027 Compliant\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property foo As Integer   \u0027 Noncompliant\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Public Property Foo As Integer   \u0027 Compliant\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the property names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2369",
    "name": "Non-private fields should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not apply to non-private \u003ccode\u003eShared ReadOnly\u003c/code\u003e fields, for which there is another rule.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Public foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not apply to non-private \u003ccode\u003eShared ReadOnly\u003c/code\u003e fields, for which there is another rule.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Public foo As Integer  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Foo As Integer  \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the non-private field names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4423",
    "name": "Weak SSL/TLS protocols should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThese samples use a default TLS algorithm, which is a weak cryptographical algorithm: TLSv1.0.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Net\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Net.Http\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    Dim Handler As New HttpClientHandler With {\n        .SslProtocols \u003d SslProtocols.Tls \u0027 Noncompliant\n    }\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Net\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    ServicePointManager.SecurityProtocol \u003d _\n        SecurityProtocolType.Tls12 _\n        Or SecurityProtocolType.Tls13\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Net.Http\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    Dim Handler As New HttpClientHandler With {\n        .SslProtocols \u003d SslProtocols.Tls12\n    }\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eTo provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e SSL versions 1.0, 2.0 and 3.0 \u003c/li\u003e\n  \u003cli\u003e TLS versions 1.0 and 1.1 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, the company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eThese samples use a default TLS algorithm, which is a weak cryptographical algorithm: TLSv1.0.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Net\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    ServicePointManager.SecurityProtocol \u003d SecurityProtocolType.Tls \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Net.Http\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    Dim Handler As New HttpClientHandler With {\n        .SslProtocols \u003d SslProtocols.Tls \u0027 Noncompliant\n    }\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Net\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    ServicePointManager.SecurityProtocol \u003d _\n        SecurityProtocolType.Tls12 _\n        Or SecurityProtocolType.Tls13\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Net.Http\nImports System.Security.Authentication\n\nPublic Sub Encrypt()\n    Dim Handler As New HttpClientHandler With {\n        .SslProtocols \u003d SslProtocols.Tls12\n    }\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.\u003c/p\u003e\n\u003cp\u003eThe best choices at the moment are the following.\u003c/p\u003e\n\u003ch4\u003eUse TLS v1.2 or TLS v1.3\u003c/h4\u003e\n\u003cp\u003eEven though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eThe use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.\u003c/p\u003e\n\u003cp\u003eThe only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.\u003c/p\u003e\n\u003cp\u003eOn the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4545",
    "name": "\"DebuggerDisplayAttribute\" strings should reference existing members",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e is used to determine how an object is displayed in the debugger window.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e constructor takes a single mandatory argument: the string to be displayed in the value column for\ninstances of the type. Any text within curly braces is evaluated as the name of a field or property, or any complex expression containing method calls\nand operators.\u003c/p\u003e\n\u003cp\u003eNaming a non-existent member between curly braces will result in a BC30451 error in the debug window when debugging objects. Although there is no\nimpact on the production code, providing a wrong value can lead to difficulties when debugging the application.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when text specified between curly braces refers to members that don’t exist in the current context.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;DebuggerDisplay(\"Name: {Name}\")\u0026gt; \u0027 Noncompliant - Name doesn\u0027t exist in this context\nPublic Class Person\n\n    Public Property FullName As String\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;DebuggerDisplay(\"Name: {FullName}\")\u0026gt;\nPublic Class Person\n\n    Public Property FullName As String\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e is used to determine how an object is displayed in the debugger window.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDebuggerDisplayAttribute\u003c/code\u003e constructor takes a single mandatory argument: the string to be displayed in the value column for\ninstances of the type. Any text within curly braces is evaluated as the name of a field or property, or any complex expression containing method calls\nand operators.\u003c/p\u003e\n\u003cp\u003eNaming a non-existent member between curly braces will result in a BC30451 error in the debug window when debugging objects. Although there is no\nimpact on the production code, providing a wrong value can lead to difficulties when debugging the application.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when text specified between curly braces refers to members that don’t exist in the current context.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;DebuggerDisplay(\"Name: {Name}\")\u0026gt; \u0027 Noncompliant - Name doesn\u0027t exist in this context\nPublic Class Person\n\n    Public Property FullName As String\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;DebuggerDisplay(\"Name: {FullName}\")\u0026gt;\nPublic Class Person\n\n    Public Property FullName As String\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6602",
    "name": "\"Find\" method should be used instead of the \"FirstOrDefault\" extension",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ccode\u003eList.Find\u003c/code\u003e method and \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e method can be used to find the first element that satisfies a\ngiven condition in a collection. However, \u003ccode\u003eList.Find\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e\nobjects. For small collections, the performance difference may be minor, but for large collections, it can make a noticeable difference. The same\napplies for \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in the execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eFind\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eFirstOrDefault\u003c/code\u003e extension method. The\nfunction can be replaced in place.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetValue(data As List(Of Integer)) As Integer\n    Return data.FirstOrDefault(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetValue(data() As Integer) As Integer\n    Return data.FirstOrDefault(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetValue(data As List(Of Integer)) As Integer\n    Return data.Find(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetValue(data() As Integer) As Integer\n    Return Array.Find(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray.Find\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault\"\u003eEnumerable.FirstOrDefault(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.373 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1049 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.691 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0334 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.94 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.035 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125.38 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.779 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0107 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e86.2 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void FirstOrDefault()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.FirstOrDefault(x \u003d\u0026gt; x \u003d\u003d value);   // Enumerable.FirstOrDefault()\n    }\n}\n\n[Benchmark]\npublic void Find()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.Find(x \u003d\u0026gt; x \u003d\u003d value);             // List\u0026lt;T\u0026gt;.Find()\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eBoth the \u003ccode\u003eList.Find\u003c/code\u003e method and \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e method can be used to find the first element that satisfies a\ngiven condition in a collection. However, \u003ccode\u003eList.Find\u003c/code\u003e can be faster than \u003ccode\u003eIEnumerable.FirstOrDefault\u003c/code\u003e for \u003ccode\u003eList\u003c/code\u003e\nobjects. For small collections, the performance difference may be minor, but for large collections, it can make a noticeable difference. The same\napplies for \u003ccode\u003eImmutableList\u003c/code\u003e and arrays too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eApplies to\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWe measured at least 2x improvement in the execution time. For more details see the \u003ccode\u003eBenchmarks\u003c/code\u003e section from the \u003ccode\u003eMore info\u003c/code\u003e\ntab.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eFind\u003c/code\u003e method is defined on the collection class, and it has the same signature as \u003ccode\u003eFirstOrDefault\u003c/code\u003e extension method. The\nfunction can be replaced in place.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetValue(data As List(Of Integer)) As Integer\n    Return data.FirstOrDefault(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction GetValue(data() As Integer) As Integer\n    Return data.FirstOrDefault(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetValue(data As List(Of Integer)) As Integer\n    Return data.Find(Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nFunction GetValue(data() As Integer) As Integer\n    Return Array.Find(data, Function(x) x Mod 2 \u003d 0)\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.find\"\u003eList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.array.find\"\u003eArray.Find\u0026lt;T\u0026gt;(T[], Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablelist-1.find\"\u003eImmutableList\u0026lt;T\u0026gt;.Find(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault\"\u003eEnumerable.FirstOrDefault(Predicate\u0026lt;T\u0026gt;)\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBenchmarks\u003c/h3\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n    \u003ccol style\u003d\"width: 20%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMethod\u003c/th\u003e\n      \u003cth\u003eRuntime\u003c/th\u003e\n      \u003cth\u003eMean\u003c/th\u003e\n      \u003cth\u003eStandard Deviation\u003c/th\u003e\n      \u003cth\u003eAllocated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.373 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.1049 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET 7.0\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.691 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0334 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e85.94 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFirstOrDefault\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.035 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0421 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e125.38 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eFind\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e.NET Framework 4.6.2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e1.779 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0107 ms\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e86.2 KB\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4\u003eGlossary\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Arithmetic_mean\"\u003eMean\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Standard_deviation\"\u003eStandard Deviation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Memory_management\"\u003eAllocated\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe results were generated by running the following snippet with \u003ca href\u003d\"https://github.com/dotnet/BenchmarkDotNet\"\u003eBenchmarkDotNet\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nprivate List\u0026lt;string\u0026gt; data;\nprivate Random random \u003d new Random();\n\n[Params(1_000)]\npublic int N { get; set; }\n\n[GlobalSetup]\npublic void Setup() \u003d\u0026gt;\n    data \u003d Enumerable.Range(0, N).Select(x \u003d\u0026gt; Guid.NewGuid().ToString()).ToList();\n\n[Benchmark(Baseline \u003d true)]\npublic void FirstOrDefault()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.FirstOrDefault(x \u003d\u0026gt; x \u003d\u003d value);   // Enumerable.FirstOrDefault()\n    }\n}\n\n[Benchmark]\npublic void Find()\n{\n    for (var i \u003d 0; i \u0026lt; N; i++)\n    {\n        var value \u003d data[random.Next(N - 1)];\n        _ \u003d data.Find(x \u003d\u0026gt; x \u003d\u003d value);             // List\u0026lt;T\u0026gt;.Find()\n    }\n}\n\u003c/pre\u003e\n\u003cp\u003eHardware configuration:\u003c/p\u003e\n\u003cpre\u003e\nBenchmarkDotNet\u003dv0.13.5, OS\u003dWindows 10 (10.0.19045.2846/22H2/2022Update)\n11th Gen Intel Core i7-11850H 2.50GHz, 1 CPU, 16 logical and 8 physical cores\n  [Host]               : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n  .NET 7.0             : .NET 7.0.5 (7.0.523.17405), X64 RyuJIT AVX2\n  .NET Framework 4.6.2 : .NET Framework 4.8 (4.8.4614.0), X64 RyuJIT VectorSize\u003d256\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2368",
    "name": "Public methods should not have multidimensional array parameters",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003emultidimensional\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003ejagged\u003c/a\u003e arrays as method parameters in C# can be\nchallenging for developers.\u003c/p\u003e\n\u003cp\u003eWhen these methods are exposed to external users, it requires advanced language knowledge for effective usage.\u003c/p\u003e\n\u003cp\u003eDetermining the appropriate data to pass to these parameters may not be intuitive.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Program\n    Public Sub WriteMatrix(matrix As Integer()()) \u0027 Noncompliant: data type is not intuitive\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eIn this example, it cannot be inferred easily what the matrix should look like. Is it a 2x2 Matrix or even a triangular Matrix?\u003c/p\u003e\n\u003cp\u003eUsing a collection, data structure, or class that provides a more suitable representation of the required data is recommended instead of a\nmultidimensional array or jagged array to enhance code readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Matrix2x2\n    \u0027 ...\nEnd Class\n\nPublic Class Program\n    Public Sub WriteMatrix(matrix As Matrix2x2) \u0027 Compliant: data type is intuitive\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eAs a result, avoiding exposing such methods to external users is recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eHowever, using multidimensional and jagged array method parameters internally, such as in \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e methods or\nwithin \u003ccode\u003einternal\u003c/code\u003e classes, is compliant since they are not publicly exposed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Class FirstClass\n    Private Sub UpdateMatrix(matrix As Integer()()) \u0027 Compliant: method is private\n        \u0027 ...\n    End Sub\nEnd Class\n\nFriend Class SecondClass\n    Public Sub UpdateMatrix(matrix As Integer()()) \u0027 Compliant: class is internal\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/\"\u003eArrays in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/array-dimensions\"\u003eArray Dimensions in\n  Visual Basic\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\"\u003emultidimensional\u003c/a\u003e and \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\"\u003ejagged\u003c/a\u003e arrays as method parameters in C# can be\nchallenging for developers.\u003c/p\u003e\n\u003cp\u003eWhen these methods are exposed to external users, it requires advanced language knowledge for effective usage.\u003c/p\u003e\n\u003cp\u003eDetermining the appropriate data to pass to these parameters may not be intuitive.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Program\n    Public Sub WriteMatrix(matrix As Integer()()) \u0027 Noncompliant: data type is not intuitive\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eIn this example, it cannot be inferred easily what the matrix should look like. Is it a 2x2 Matrix or even a triangular Matrix?\u003c/p\u003e\n\u003cp\u003eUsing a collection, data structure, or class that provides a more suitable representation of the required data is recommended instead of a\nmultidimensional array or jagged array to enhance code readability.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Matrix2x2\n    \u0027 ...\nEnd Class\n\nPublic Class Program\n    Public Sub WriteMatrix(matrix As Matrix2x2) \u0027 Compliant: data type is intuitive\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eAs a result, avoiding exposing such methods to external users is recommended.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eHowever, using multidimensional and jagged array method parameters internally, such as in \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003einternal\u003c/code\u003e methods or\nwithin \u003ccode\u003einternal\u003c/code\u003e classes, is compliant since they are not publicly exposed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Class FirstClass\n    Private Sub UpdateMatrix(matrix As Integer()()) \u0027 Compliant: method is private\n        \u0027 ...\n    End Sub\nEnd Class\n\nFriend Class SecondClass\n    Public Sub UpdateMatrix(matrix As Integer()()) \u0027 Compliant: class is internal\n        \u0027 ...\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/collections/\"\u003eCollections and Data Structures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/\"\u003eArrays in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/arrays/array-dimensions\"\u003eArray Dimensions in\n  Visual Basic\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3923",
    "name": "All branches in a conditional structure should not have exactly the same implementation",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving all branches of a \u003ccode\u003eSelect Case\u003c/code\u003e or \u003ccode\u003eIf\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nDim b As Integer \u003d If(a \u0026gt; 12, 4, 4)  // Noncompliant\n\nIf b \u003d 0 Then  // Noncompliant\n    DoTheThing()\nElse\n    DoTheThing()\nEnd If\n\nSelect Case i  // Noncompliant\n    Case 1\n        DoSomething()\n    Case 2\n        DoSomething()\n    Case 3\n        DoSomething()\n    Case Else\n        DoSomething()\nEnd Select\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eSelect Case\u003c/code\u003e or \u003ccode\u003eIf\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eIf\u003c/code\u003e chains without \u003ccode\u003eElse\u003c/code\u003e, nor to \u003ccode\u003eSelect Case\u003c/code\u003e without a \u003ccode\u003eCase Else\u003c/code\u003e\nclause.\u003c/p\u003e\n\u003cpre\u003e\nIf b \u003d 0 Then \u0027 No issue, this could have been done on purpose to make the code more readable\n    DoTheThing()\nElseIf\n    DoTheThing()\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving all branches of a \u003ccode\u003eSelect Case\u003c/code\u003e or \u003ccode\u003eIf\u003c/code\u003e chain with the same implementation indicates a problem.\u003c/p\u003e\n\u003cp\u003eIn the following code:\u003c/p\u003e\n\u003cpre\u003e\nDim b As Integer \u003d If(a \u0026gt; 12, 4, 4)  // Noncompliant\n\nIf b \u003d 0 Then  // Noncompliant\n    DoTheThing()\nElse\n    DoTheThing()\nEnd If\n\nSelect Case i  // Noncompliant\n    Case 1\n        DoSomething()\n    Case 2\n        DoSomething()\n    Case 3\n        DoSomething()\n    Case Else\n        DoSomething()\nEnd Select\n\u003c/pre\u003e\n\u003cp\u003eEither there is a copy-paste error that needs fixing or an unnecessary \u003ccode\u003eSelect Case\u003c/code\u003e or \u003ccode\u003eIf\u003c/code\u003e chain that needs removing.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not apply to \u003ccode\u003eIf\u003c/code\u003e chains without \u003ccode\u003eElse\u003c/code\u003e, nor to \u003ccode\u003eSelect Case\u003c/code\u003e without a \u003ccode\u003eCase Else\u003c/code\u003e\nclause.\u003c/p\u003e\n\u003cpre\u003e\nIf b \u003d 0 Then \u0027 No issue, this could have been done on purpose to make the code more readable\n    DoTheThing()\nElseIf\n    DoTheThing()\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3926",
    "name": "Deserialization methods should be provided for \"OptionalField\" members",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields marked with \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.\u003c/p\u003e\n\u003cp\u003eThis rule raises when at least one field with the \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e attribute is declared but one\n(or both) of the following event handlers \u003ccode\u003eSystem.Runtime.Serialization.OnDeserializingAttribute\u003c/code\u003e or\n\u003ccode\u003eSystem.Runtime.Serialization.OnDeserializedAttribute\u003c/code\u003e are not present.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo \u0027 Noncompliant\n    \u0026lt;OptionalField(VersionAdded:\u003d2)\u0026gt;\n    Private optionalField As Integer \u003d 5\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OptionalField(VersionAdded:\u003d2)\u0026gt;\n    Private optionalField As Integer \u003d 5\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing(ByVal context As StreamingContext)\n        optionalField \u003d 5\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext)\n    End Sub\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields marked with \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.\u003c/p\u003e\n\u003cp\u003eThis rule raises when at least one field with the \u003ccode\u003eSystem.Runtime.Serialization.OptionalFieldAttribute\u003c/code\u003e attribute is declared but one\n(or both) of the following event handlers \u003ccode\u003eSystem.Runtime.Serialization.OnDeserializingAttribute\u003c/code\u003e or\n\u003ccode\u003eSystem.Runtime.Serialization.OnDeserializedAttribute\u003c/code\u003e are not present.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo \u0027 Noncompliant\n    \u0026lt;OptionalField(VersionAdded:\u003d2)\u0026gt;\n    Private optionalField As Integer \u003d 5\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OptionalField(VersionAdded:\u003d2)\u0026gt;\n    Private optionalField As Integer \u003d 5\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing(ByVal context As StreamingContext)\n        optionalField \u003d 5\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext)\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "serialization"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3927",
    "name": "Serialization event handlers should be implemented correctly",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eSerialization event handlers that don’t have the correct signature will not be called, bypassing augmentations to the automated\nde/serialization.\u003c/p\u003e\n\u003cp\u003eA method is designated a serialization event handler by applying one of the following serialization event attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializingattribute\"\u003e\u003ccode\u003eOnSerializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializedattribute\"\u003e\u003ccode\u003eOnSerializedAttribute\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializingattribute\"\u003e\u003ccode\u003eOnDeserializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializedattribute\"\u003e\u003ccode\u003eOnDeserializedAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSerialization event handlers take a single parameter of type \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.streamingcontext\"\u003e\u003ccode\u003eStreamingContext\u003c/code\u003e\u003c/a\u003e, return\n\u003ccode\u003evoid\u003c/code\u003e, and have \u003ccode\u003eprivate\u003c/code\u003e visibility.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of these constraints are not respected.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OnSerializing\u0026gt;\n    Public Sub OnSerializing(ByVal context As StreamingContext) \u0027 Noncompliant: should be private\n    End Sub\n\n    \u0026lt;OnSerialized\u0026gt;\n    Private Function OnSerialized(ByVal context As StreamingContext) As Integer \u0027  Noncompliant: should return void\n    End Function\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing() \u0027 Noncompliant: should have a single parameter of type StreamingContext\n    End Sub\n\n    \u0026lt;OnSerializing\u0026gt;\n    Public Sub OnSerializing2(Of T)(ByVal context As StreamingContext) \u0027 Noncompliant: should have no type parameters\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext, ByVal str As String) \u0027 Noncompliant: should have a single parameter of type StreamingContext\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OnSerializing\u0026gt;\n    Private Sub OnSerializing(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnSerialized\u0026gt;\n    Private Sub OnSerialized(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext)\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/visualstudio/code-quality/ca2238\"\u003eCA2238: Implement serialization methods\n  correctly\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSerialization event handlers that don’t have the correct signature will not be called, bypassing augmentations to the automated\nde/serialization.\u003c/p\u003e\n\u003cp\u003eA method is designated a serialization event handler by applying one of the following serialization event attributes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializingattribute\"\u003e\u003ccode\u003eOnSerializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.onserializedattribute\"\u003e\u003ccode\u003eOnSerializedAttribute\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializingattribute\"\u003e\u003ccode\u003eOnDeserializingAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ondeserializedattribute\"\u003e\u003ccode\u003eOnDeserializedAttribute\u003c/code\u003e\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSerialization event handlers take a single parameter of type \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.streamingcontext\"\u003e\u003ccode\u003eStreamingContext\u003c/code\u003e\u003c/a\u003e, return\n\u003ccode\u003evoid\u003c/code\u003e, and have \u003ccode\u003eprivate\u003c/code\u003e visibility.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of these constraints are not respected.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OnSerializing\u0026gt;\n    Public Sub OnSerializing(ByVal context As StreamingContext) \u0027 Noncompliant: should be private\n    End Sub\n\n    \u0026lt;OnSerialized\u0026gt;\n    Private Function OnSerialized(ByVal context As StreamingContext) As Integer \u0027  Noncompliant: should return void\n    End Function\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing() \u0027 Noncompliant: should have a single parameter of type StreamingContext\n    End Sub\n\n    \u0026lt;OnSerializing\u0026gt;\n    Public Sub OnSerializing2(Of T)(ByVal context As StreamingContext) \u0027 Noncompliant: should have no type parameters\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext, ByVal str As String) \u0027 Noncompliant: should have a single parameter of type StreamingContext\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Serializable\u0026gt;\nPublic Class Foo\n    \u0026lt;OnSerializing\u0026gt;\n    Private Sub OnSerializing(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnSerialized\u0026gt;\n    Private Sub OnSerialized(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnDeserializing\u0026gt;\n    Private Sub OnDeserializing(ByVal context As StreamingContext)\n    End Sub\n\n    \u0026lt;OnDeserialized\u0026gt;\n    Private Sub OnDeserialized(ByVal context As StreamingContext)\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/visualstudio/code-quality/ca2238\"\u003eCA2238: Implement serialization methods\n  correctly\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3363",
    "name": "Date and time should not be used as a type for primary keys",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003cp\u003eYou should only set a property of a temporal type (like \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e) as the primary key of a table if the\nvalues are guaranteed to be unique.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eUsing temporal types as the primary key of a table is risky. When these types are used as primary keys, it usually means that each new key is\ncreated with the use of \u003ccode\u003e.Now\u003c/code\u003e or \u003ccode\u003e.UtcNow\u003c/code\u003e properties from \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e classes. In\nthose cases, duplicate keys exceptions may occur in many ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when entries are added consecutively by a machine with low-enough system clock resolution; \u003c/li\u003e\n  \u003cli\u003e when two different threads are inserting entries in close enough sequence for both to have the same time; \u003c/li\u003e\n  \u003cli\u003e when changes such as daylight saving time (DST) transitions occur, where values can be repeated the following hour (only for\n  \u003ccode\u003eDateTime\u003c/code\u003e type); \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe rule raises an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity Framework, or Entity Framework Core dependencies are found; \u003c/li\u003e\n  \u003cli\u003e a class contains a property either named \u003ccode\u003eId\u003c/code\u003e, \u003ccode\u003e\u0026lt;type name\u0026gt;Id\u003c/code\u003e or decorated by the \u003ccode\u003e[Key]\u003c/code\u003e or\n  \u003ccode\u003e[PrimaryKey]\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e the key property is of one of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eSystem.DateTime\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eSystem.DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eSystem.TimeSpan\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eSystem.DateOnly\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eSystem.TimeOnly\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eEither use a GUID or the auto generated ID as a primary key.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Account\n    Public Property Id As DateTime\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Account\n    Public Property Id As Guid\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Person\n    \u0026lt;Key\u0026gt;\n    Public Property PersonIdentifier As DateTime\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Person\n    \u0026lt;Key\u0026gt;\n    Public Property PersonIdentifier As Guid\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/core/modeling/keys?tabs\u003ddata-annotations\"\u003eEntity Framework keys and data annotation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.guid\"\u003eGUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eYou should only set a property of a temporal type (like \u003ccode\u003eDateTime\u003c/code\u003e or \u003ccode\u003eDateTimeOffset\u003c/code\u003e) as the primary key of a table if the\nvalues are guaranteed to be unique.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eUsing temporal types as the primary key of a table is risky. When these types are used as primary keys, it usually means that each new key is\ncreated with the use of \u003ccode\u003e.Now\u003c/code\u003e or \u003ccode\u003e.UtcNow\u003c/code\u003e properties from \u003ccode\u003eDateTime\u003c/code\u003e and \u003ccode\u003eDateTimeOffset\u003c/code\u003e classes. In\nthose cases, duplicate keys exceptions may occur in many ways:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e when entries are added consecutively by a machine with low-enough system clock resolution; \u003c/li\u003e\n  \u003cli\u003e when two different threads are inserting entries in close enough sequence for both to have the same time; \u003c/li\u003e\n  \u003cli\u003e when changes such as daylight saving time (DST) transitions occur, where values can be repeated the following hour (only for\n  \u003ccode\u003eDateTime\u003c/code\u003e type); \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe rule raises an issue if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Entity Framework, or Entity Framework Core dependencies are found; \u003c/li\u003e\n  \u003cli\u003e a class contains a property either named \u003ccode\u003eId\u003c/code\u003e, \u003ccode\u003e\u0026lt;type name\u0026gt;Id\u003c/code\u003e or decorated by the \u003ccode\u003e[Key]\u003c/code\u003e or\n  \u003ccode\u003e[PrimaryKey]\u003c/code\u003e attribute. \u003c/li\u003e\n  \u003cli\u003e the key property is of one of the following types:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetime\"\u003eSystem.DateTime\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset\"\u003eSystem.DateTimeOffset\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timespan\"\u003eSystem.TimeSpan\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.dateonly\"\u003eSystem.DateOnly\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.timeonly\"\u003eSystem.TimeOnly\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eEither use a GUID or the auto generated ID as a primary key.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Account\n    Public Property Id As DateTime\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Account\n    Public Property Id As Guid\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class Person\n    \u0026lt;Key\u0026gt;\n    Public Property PersonIdentifier As DateTime\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class Person\n    \u0026lt;Key\u0026gt;\n    Public Property PersonIdentifier As Guid\n\n    Public Property Name As String\n    Public Property Surname As String\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/ef/core/modeling/keys?tabs\u003ddata-annotations\"\u003eEntity Framework keys and data annotation\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.guid\"\u003eGUID\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1186",
    "name": "Methods should not be empty",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following empty methods are considered compliant:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty \u003ccode\u003eOverridable\u003c/code\u003e methods, as the implementation might not be required in the base class \u003c/li\u003e\n  \u003cli\u003e empty methods that override a \u003ccode\u003eMustOverride\u003c/code\u003e method as the implementation is mandatory for child class \u003c/li\u003e\n  \u003cli\u003e empty overrides in test assemblies for mocking purposes \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub ShouldNotBeEmpty()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub NotImplementedYet()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub WillNeverBeImplemented()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub EmptyOnPurpose()  \u0027 Noncompliant - method is empty\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub ShouldNotBeEmpty()\n    DoSomething()\nEnd Sub\n\nSub NotImplementedYet()\n    Throw New NotImplementedException\nEnd Sub\n\nSub WillNeverBeImplemented()\n    Throw New NotSupportedException\nEnd Sub\n\nSub EmptyOnPurpose()\n    \u0027 Do nothing because of X\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.\u003c/p\u003e\n\u003cp\u003eThere are several reasons for a method not to have a body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an exception should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe following empty methods are considered compliant:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e empty \u003ccode\u003eOverridable\u003c/code\u003e methods, as the implementation might not be required in the base class \u003c/li\u003e\n  \u003cli\u003e empty methods that override a \u003ccode\u003eMustOverride\u003c/code\u003e method as the implementation is mandatory for child class \u003c/li\u003e\n  \u003cli\u003e empty overrides in test assemblies for mocking purposes \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub ShouldNotBeEmpty()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub NotImplementedYet()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub WillNeverBeImplemented()  \u0027 Noncompliant - method is empty\nEnd Sub\n\nSub EmptyOnPurpose()  \u0027 Noncompliant - method is empty\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub ShouldNotBeEmpty()\n    DoSomething()\nEnd Sub\n\nSub NotImplementedYet()\n    Throw New NotImplementedException\nEnd Sub\n\nSub WillNeverBeImplemented()\n    Throw New NotSupportedException\nEnd Sub\n\nSub EmptyOnPurpose()\n    \u0027 Do nothing because of X\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1066",
    "name": "Mergeable \"if\" statements should be combined",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nIf condition1 Then\n    If condition2 Then \u0027 Noncompliant\n        \u0027 ...\n    End If\nEnd If\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nIf condition1 AndAlso condition2 Then\n    \u0027 ...\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.\u003c/p\u003e\n\u003cp\u003eMerging \u003ccode\u003eif\u003c/code\u003e statements when possible will decrease the nesting of the code and improve its readability.\u003c/p\u003e\n\u003cp\u003eCode like\u003c/p\u003e\n\u003cpre\u003e\nIf condition1 Then\n    If condition2 Then \u0027 Noncompliant\n        \u0027 ...\n    End If\nEnd If\n\u003c/pre\u003e\n\u003cp\u003eWill be more readable as\u003c/p\u003e\n\u003cpre\u003e\nIf condition1 AndAlso condition2 Then\n    \u0027 ...\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4210",
    "name": "Windows Forms entry points should be marked with STAThread",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen an assembly uses Windows Forms (classes and interfaces from the \u003ccode\u003eSystem.Windows.Forms\u003c/code\u003e namespace) its entry point should be marked\nwith the \u003ccode\u003eSTAThreadAttribute\u003c/code\u003e to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one\nsupported by Windows Forms.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the entry point (\u003ccode\u003eShared Sub Main\u003c/code\u003e method) of an assembly using Windows Forms is not marked as STA.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Windows.Forms\n\nPublic Class Foo\n  Shared Sub Main()\n    Dim winForm As Form \u003d New Form\n    Application.Run(winForm)\n  End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Windows.Forms\n\nPublic Class Foo\n  \u0026lt;STAThread()\u0026gt; Shared Sub Main()\n    Dim winForm As Form \u003d New Form\n    Application.Run(winForm)\n  End Sub\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen an assembly uses Windows Forms (classes and interfaces from the \u003ccode\u003eSystem.Windows.Forms\u003c/code\u003e namespace) its entry point should be marked\nwith the \u003ccode\u003eSTAThreadAttribute\u003c/code\u003e to indicate that the threading model should be \"Single-Threaded Apartment\" (STA) which is the only one\nsupported by Windows Forms.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the entry point (\u003ccode\u003eShared Sub Main\u003c/code\u003e method) of an assembly using Windows Forms is not marked as STA.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Windows.Forms\n\nPublic Class Foo\n  Shared Sub Main()\n    Dim winForm As Form \u003d New Form\n    Application.Run(winForm)\n  End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nImports System.Windows.Forms\n\nPublic Class Foo\n  \u0026lt;STAThread()\u0026gt; Shared Sub Main()\n    Dim winForm As Form \u003d New Form\n    Application.Run(winForm)\n  End Sub\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall",
      "winforms"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5542",
    "name": "Encryption algorithms should be used with secure mode and padding scheme",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim Algorithm As New AesManaged() With {\n            .KeySize \u003d 128,\n            .BlockSize \u003d 128,\n            .Mode \u003d CipherMode.ECB, \u0027 Noncompliant\n            .Padding \u003d PaddingMode.PKCS7\n            }\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003cp\u003eExample with an asymmetric cipher, RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim RsaCsp \u003d New RSACryptoServiceProvider()\n        RsaCsp.Encrypt(data, False) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor the AES symmetric cipher, use the GCM mode:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim Algorithm As New AesGcm(data)\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003cp\u003eFor the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim RsaCsp \u003d New RSACryptoServiceProvider()\n        RsaCsp.Encrypt(data, True) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003cp\u003eFor AES, the weakest modes are CBC (Cipher Block Chaining) and ECB (Electronic Codebook) because they are either vulnerable to padding oracles or\ndo not provide authentication mechanisms.\u003c/p\u003e\n\u003cp\u003eFor RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eExample with a symmetric cipher, AES:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim Algorithm As New AesManaged() With {\n            .KeySize \u003d 128,\n            .BlockSize \u003d 128,\n            .Mode \u003d CipherMode.ECB, \u0027 Noncompliant\n            .Padding \u003d PaddingMode.PKCS7\n            }\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003cp\u003eExample with an asymmetric cipher, RSA:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim RsaCsp \u003d New RSACryptoServiceProvider()\n        RsaCsp.Encrypt(data, False) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eFor the AES symmetric cipher, use the GCM mode:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim Algorithm As New AesGcm(data)\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003cp\u003eFor the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Module Example\n\n    Public Sub Encrypt()\n        Dim data(10) As Byte\n        Dim RsaCsp \u003d New RSACryptoServiceProvider()\n        RsaCsp.Encrypt(data, True) \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003cp\u003eAs a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.\u003c/p\u003e\n\u003cp\u003eAppropriate choices are currently the following.\u003c/p\u003e\n\u003ch4\u003eFor AES: Use Galois/Counter mode (GCM)\u003c/h4\u003e\n\u003cp\u003eGCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.\u003c/p\u003e\n\u003cp\u003eOther similar modes are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e CCM: \u003ccode\u003eCounter with CBC-MAC\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CWC: \u003ccode\u003eCipher Block Chaining with Message Authentication Code\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e EAX: \u003ccode\u003eEncrypt-and-Authenticate\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e IAPM: \u003ccode\u003eInteger Authenticated Parallelizable Mode\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e OCB: \u003ccode\u003eOffset Codebook Mode\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is also possible to use AES-CBC with HMAC for integrity checks. However, it\u003c/p\u003e\n\u003cp\u003eis considered more straightforward to use AES-GCM directly instead.\u003c/p\u003e\n\u003ch4\u003eFor RSA: use the OAEP scheme\u003c/h4\u003e\n\u003cp\u003eThe Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\"\u003eMicrosoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003eWikipedia, Padding Oracle Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\"\u003eWikipedia, Chosen-Ciphertext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\"\u003eWikipedia, Chosen-Plaintext Attack\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Semantic_security\"\u003eWikipedia, Semantically Secure Cryptosystems\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\"\u003eWikipedia, OAEP\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003eWikipedia, Galois/Counter Mode\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 - Security\n  Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1067",
    "name": "Expressions should not be too complex",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eComplex boolean expressions are hard to read and so to maintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3\u003c/p\u003e\n\u003cpre\u003e\nIf ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  \u0027Noncompliant\n  ...\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then\n  ...\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eComplex boolean expressions are hard to read and so to maintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default threshold value of 3\u003c/p\u003e\n\u003cpre\u003e\nIf ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  \u0027Noncompliant\n  ...\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then\n  ...\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "max": {
        "key": "max",
        "name": "max",
        "description": "Maximum number of allowed conditional operators in an expression",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "max": "3"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5547",
    "name": "Cipher algorithms should be robust",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Encrypt()\n    Dim SimpleDES As New DESCryptoServiceProvider() \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Encrypt()\n    Dim AES128ECB \u003d Aes.Create()\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eTheft of sensitive data\u003c/h4\u003e\n\u003cp\u003eThe encrypted message might contain data that is considered sensitive and should not be known to third parties.\u003c/p\u003e\n\u003cp\u003eBy using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Encrypt()\n    Dim SimpleDES As New DESCryptoServiceProvider() \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"11\" data-diff-type\u003d\"compliant\"\u003e\nImports System.Security.Cryptography\n\nPublic Sub Encrypt()\n    Dim AES128ECB \u003d Aes.Create()\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n```suggestion\nImports Org.BouncyCastle.Crypto.Engines\nImports Org.BouncyCastle.Crypto.Parameters\n\nPublic Sub Encrypt()\n    Dim AesFast As new AesFastEngine() \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports Org.BouncyCastle.Crypto.Engines\nImports Org.BouncyCastle.Crypto.Parameters\n\n```suggestion\nPublic Sub Encrypt()\n    Dim AES As new AESEngine()\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse a secure algorithm\u003c/h4\u003e\n\u003cp\u003eIt is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).\u003c/p\u003e\n\u003cp\u003eFor block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.\u003c/p\u003e",
        "context": {
          "key": "bouncycastle",
          "displayName": "BouncyCastle"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327\"\u003eCWE-327 - Use of a Broken or Risky Cryptographic Algorithm\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1862",
    "name": "Related \"If/ElseIf\" statements should not have the same condition",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA chain of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/if-then-else-statement\"\u003eIf/ElseIf\u003c/a\u003e\nstatements is evaluated from top to bottom. At most, only one branch will be executed: the first statement with a condition that evaluates to\n\u003ccode\u003eTrue\u003c/code\u003e. Therefore, duplicating a condition leads to unreachable code inside the duplicated condition block. Usually, this is due to a\ncopy/paste error.\u003c/p\u003e\n\u003cp\u003eThe result of such duplication can lead to unreachable code or even to unexpected behavior.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf param \u003d 1 Then\n  OpenWindow()\nElseIf param \u003d 2 Then\n  CloseWindow()\nElseIf param \u003d 1 Then \u0027 Noncompliant: condition has already been checked\n  MoveWindowToTheBackground() \u0027 unreachable code\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf param \u003d 1 Then\n  OpenWindow()\nElseIf param \u003d 2 Then\n  CloseWindow()\nElseIf param \u003d 3 Then\n  MoveWindowToTheBackground()\nEnd If\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/if-then-else-statement\"\u003eIf…​Then…​Else\n  Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA chain of \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/if-then-else-statement\"\u003eIf/ElseIf\u003c/a\u003e\nstatements is evaluated from top to bottom. At most, only one branch will be executed: the first statement with a condition that evaluates to\n\u003ccode\u003eTrue\u003c/code\u003e. Therefore, duplicating a condition leads to unreachable code inside the duplicated condition block. Usually, this is due to a\ncopy/paste error.\u003c/p\u003e\n\u003cp\u003eThe result of such duplication can lead to unreachable code or even to unexpected behavior.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf param \u003d 1 Then\n  OpenWindow()\nElseIf param \u003d 2 Then\n  CloseWindow()\nElseIf param \u003d 1 Then \u0027 Noncompliant: condition has already been checked\n  MoveWindowToTheBackground() \u0027 unreachable code\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf param \u003d 1 Then\n  OpenWindow()\nElseIf param \u003d 2 Then\n  CloseWindow()\nElseIf param \u003d 3 Then\n  MoveWindowToTheBackground()\nEnd If\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/if-then-else-statement\"\u003eIf…​Then…​Else\n  Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6513",
    "name": "\"ExcludeFromCodeCoverage\" attributes should include a justification",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eExcludeFromCodeCoverageAttribute\u003c/a\u003e is\nused to exclude portions of code from \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003ecode coverage\nreporting\u003c/a\u003e. It is a bad practice to retain code that is not covered by unit tests. In .Net 5, the \u003ccode\u003eJustification\u003c/code\u003e property was added to\nthe \u003ccode\u003eExcludeFromCodeCoverageAttribute\u003c/code\u003e as an opportunity to document the rationale for the exclusion. This rule raises an issue when no\nsuch justification is given.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Structure Coordinates\n\n    Public ReadOnly Property X As Integer\n    Public ReadOnly Property Y As Integer\n\n    \u0026lt;ExcludeFromCodeCoverage\u0026gt; \u0027 Noncompliant\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If Not (TypeOf obj Is Coordinates) Then\n            Return False\n        End If\n\n        Dim coordinates \u003d DirectCast(obj, Coordinates)\n        Return X \u003d coordinates.X AndAlso\n               Y \u003d coordinates.Y\n    End Function\n\n    \u0026lt;ExcludeFromCodeCoverage\u0026gt; \u0027 Noncompliant\n    Public Overrides Function GetHashCode() As Integer\n        Dim hashCode As Long \u003d 1861411795\n        hashCode \u003d (hashCode * -1521134295 + X.GetHashCode()).GetHashCode()\n        hashCode \u003d (hashCode * -1521134295 + Y.GetHashCode()).GetHashCode()\n        Return hashCode\n    End Function\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Structure Coordinates\n\n    Public ReadOnly Property X As Integer\n    Public ReadOnly Property Y As Integer\n\n    \u0026lt;ExcludeFromCodeCoverage(Justification:\u003d\"Code generated by Visual Studio refactoring\")\u0026gt; \u0027 Compliant\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If Not (TypeOf obj Is Coordinates) Then\n            Return False\n        End If\n\n        Dim coordinates \u003d DirectCast(obj, Coordinates)\n        Return X \u003d coordinates.X AndAlso\n               Y \u003d coordinates.Y\n    End Function\n\n    \u0026lt;ExcludeFromCodeCoverage(Justification:\u003d\"Code generated by Visual Studio refactoring\")\u0026gt; \u0027 Compliant\n    Public Overrides Function GetHashCode() As Integer\n        Dim hashCode As Long \u003d 1861411795\n        hashCode \u003d (hashCode * -1521134295 + X.GetHashCode()).GetHashCode()\n        hashCode \u003d (hashCode * -1521134295 + Y.GetHashCode()).GetHashCode()\n        Return hashCode\n    End Function\nEnd Structure\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eAPI browser\u003c/a\u003e -\n  ExcludeFromCodeCoverageAttribute \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003eDevOps and testing\u003c/a\u003e - Code coverage reporting \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ca\nhref\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eExcludeFromCodeCoverageAttribute\u003c/a\u003e is\nused to exclude portions of code from \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003ecode coverage\nreporting\u003c/a\u003e. It is a bad practice to retain code that is not covered by unit tests. In .Net 5, the \u003ccode\u003eJustification\u003c/code\u003e property was added to\nthe \u003ccode\u003eExcludeFromCodeCoverageAttribute\u003c/code\u003e as an opportunity to document the rationale for the exclusion. This rule raises an issue when no\nsuch justification is given.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Structure Coordinates\n\n    Public ReadOnly Property X As Integer\n    Public ReadOnly Property Y As Integer\n\n    \u0026lt;ExcludeFromCodeCoverage\u0026gt; \u0027 Noncompliant\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If Not (TypeOf obj Is Coordinates) Then\n            Return False\n        End If\n\n        Dim coordinates \u003d DirectCast(obj, Coordinates)\n        Return X \u003d coordinates.X AndAlso\n               Y \u003d coordinates.Y\n    End Function\n\n    \u0026lt;ExcludeFromCodeCoverage\u0026gt; \u0027 Noncompliant\n    Public Overrides Function GetHashCode() As Integer\n        Dim hashCode As Long \u003d 1861411795\n        hashCode \u003d (hashCode * -1521134295 + X.GetHashCode()).GetHashCode()\n        hashCode \u003d (hashCode * -1521134295 + Y.GetHashCode()).GetHashCode()\n        Return hashCode\n    End Function\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Structure Coordinates\n\n    Public ReadOnly Property X As Integer\n    Public ReadOnly Property Y As Integer\n\n    \u0026lt;ExcludeFromCodeCoverage(Justification:\u003d\"Code generated by Visual Studio refactoring\")\u0026gt; \u0027 Compliant\n    Public Overrides Function Equals(obj As Object) As Boolean\n        If Not (TypeOf obj Is Coordinates) Then\n            Return False\n        End If\n\n        Dim coordinates \u003d DirectCast(obj, Coordinates)\n        Return X \u003d coordinates.X AndAlso\n               Y \u003d coordinates.Y\n    End Function\n\n    \u0026lt;ExcludeFromCodeCoverage(Justification:\u003d\"Code generated by Visual Studio refactoring\")\u0026gt; \u0027 Compliant\n    Public Overrides Function GetHashCode() As Integer\n        Dim hashCode As Long \u003d 1861411795\n        hashCode \u003d (hashCode * -1521134295 + X.GetHashCode()).GetHashCode()\n        hashCode \u003d (hashCode * -1521134295 + Y.GetHashCode()).GetHashCode()\n        Return hashCode\n    End Function\nEnd Structure\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute\"\u003eAPI browser\u003c/a\u003e -\n  ExcludeFromCodeCoverageAttribute \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/dotnet/core/testing/unit-testing-code-coverage\"\u003eDevOps and testing\u003c/a\u003e - Code coverage reporting \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2951",
    "name": "VB.Net: \"Exit Select\" statements should not be used redundantly",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eVisual Basic .NET, unlike many other programming languages, has no \"fall-through\" for its \u003ccode\u003eSelect\u003c/code\u003e cases. Each case already has an\nimplicit \u003ccode\u003eExit Select\u003c/code\u003e as its last instruction. It therefore is redundant to explicitly add one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim x \u003d 0\n    Select Case x\n      Case 0\n        Console.WriteLine(\"0\")\n        Exit Select                \u0027 Noncompliant\n      Case Else\n        Console.WriteLine(\"Not 0\")\n        Exit Select                \u0027 Noncompliant\n    End Select\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim x \u003d 0\n    Select Case x\n      Case 0                         \u0027 Compliant\n        Console.WriteLine(\"0\")\n      Case Else                      \u0027 Compliant\n        Console.WriteLine(\"Not 0\")\n    End Select\n  End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eVisual Basic .NET, unlike many other programming languages, has no \"fall-through\" for its \u003ccode\u003eSelect\u003c/code\u003e cases. Each case already has an\nimplicit \u003ccode\u003eExit Select\u003c/code\u003e as its last instruction. It therefore is redundant to explicitly add one.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim x \u003d 0\n    Select Case x\n      Case 0\n        Console.WriteLine(\"0\")\n        Exit Select                \u0027 Noncompliant\n      Case Else\n        Console.WriteLine(\"Not 0\")\n        Exit Select                \u0027 Noncompliant\n    End Select\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n  Sub Main()\n    Dim x \u003d 0\n    Select Case x\n      Case 0                         \u0027 Compliant\n        Console.WriteLine(\"0\")\n      Case Else                      \u0027 Compliant\n        Console.WriteLine(\"Not 0\")\n    End Select\n  End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1172",
    "name": "Unused procedure parameters should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function’s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function’s behavior will be the same, but the programmer’s intention won’t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eprivate\u003c/code\u003e procedure of a \u003ccode\u003eClass\u003c/code\u003e, \u003ccode\u003eModule\u003c/code\u003e or \u003ccode\u003eStructure\u003c/code\u003e takes a\nparameter without using it.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise any issue in the following contexts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Procedures decorated with attributes. \u003c/li\u003e\n  \u003cli\u003e Empty procedures. \u003c/li\u003e\n  \u003cli\u003e Procedures which only throw \u003ccode\u003eNotImplementedException\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Main methods. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003evirtual\u003c/code\u003e, \u003ccode\u003eoverride\u003c/code\u003e procedures. \u003c/li\u003e\n  \u003cli\u003e Interface implementations. \u003c/li\u003e\n  \u003cli\u003e Event handlers. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub DoSomething(ByVal a As Integer, ByVal b as Integer) \u0027 \"b\" is unused\n    Compute(a)\nEnd Sub\n\nPrivate Function DoSomething2(ByVal a As Integer, ByVal b As Integer) As Integer \u0027 \"a\" is unused\n    Compute(b)\n    Return b\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub DoSomething(ByVal a As Integer)\n    Compute(a)\nEnd Sub\n\nPrivate Function DoSomething2(ByVal b As Integer) As Integer\n    Compute(b)\n    Return b\nEnd Function\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the function’s\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the function’s behavior will be the same, but the programmer’s intention won’t be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eprivate\u003c/code\u003e procedure of a \u003ccode\u003eClass\u003c/code\u003e, \u003ccode\u003eModule\u003c/code\u003e or \u003ccode\u003eStructure\u003c/code\u003e takes a\nparameter without using it.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule doesn’t raise any issue in the following contexts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Procedures decorated with attributes. \u003c/li\u003e\n  \u003cli\u003e Empty procedures. \u003c/li\u003e\n  \u003cli\u003e Procedures which only throw \u003ccode\u003eNotImplementedException\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Main methods. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003evirtual\u003c/code\u003e, \u003ccode\u003eoverride\u003c/code\u003e procedures. \u003c/li\u003e\n  \u003cli\u003e Interface implementations. \u003c/li\u003e\n  \u003cli\u003e Event handlers. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eHaving unused function parameters in your code can lead to confusion and misunderstanding of a developer’s intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPrivate Sub DoSomething(ByVal a As Integer, ByVal b as Integer) \u0027 \"b\" is unused\n    Compute(a)\nEnd Sub\n\nPrivate Function DoSomething2(ByVal a As Integer, ByVal b As Integer) As Integer \u0027 \"a\" is unused\n    Compute(b)\n    Return b\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPrivate Sub DoSomething(ByVal a As Integer)\n    Compute(a)\nEnd Sub\n\nPrivate Function DoSomething2(ByVal b As Integer) As Integer\n    Compute(b)\n    Return b\nEnd Function\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5659",
    "name": "JWT should be signed and verified with strong cipher algorithms",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in Jwt.Net\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003cp\u003eThe following code contains examples of JWT encoding and decoding without a strong cipher algorithm.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports JWT\n\nPublic Sub Decode(decoder AS IJwtDecoder)\n    Dim decoded As String \u003d decoder.Decode(token, secret, verify:\u003d false) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports JWT\n\nPublic Sub Decode()\n    Dim decoded As String \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .Decode(token) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports JWT\n\nPublic Sub Decode(decoder AS IJwtDecoder)\n    Dim decoded As String \u003d decoder.Decode(token, secret, verify:\u003d true)\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eJwtBuilder\u003c/code\u003e, make sure to call \u003ccode\u003eMustVerifySignature()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports JWT\n\nPublic Sub Decode()\n    Dim decoded As String \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .MustVerifySignature()\n        .Decode(token)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eCWE-347 - Improper Verification of Cryptographic Signature\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability allows forging of JSON Web Tokens to impersonate other users.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eJSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.\u003c/p\u003e\n\u003ch4\u003eImpersonation of users\u003c/h4\u003e\n\u003cp\u003eJWTs are commonly used to represent user authorization claims. They contain information about the user’s identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.\u003c/p\u003e\n\u003ch4\u003eUnauthorized data access\u003c/h4\u003e\n\u003cp\u003eWhen a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe following code contains examples of JWT encoding and decoding without a strong cipher algorithm.\u003c/p\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports JWT\n\nPublic Sub Decode(decoder AS IJwtDecoder)\n    Dim decoded As String \u003d decoder.Decode(token, secret, verify:\u003d false) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nImports JWT\n\nPublic Sub Decode()\n    Dim decoded As String \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .Decode(token) \u0027 Noncompliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports JWT\n\nPublic Sub Decode(decoder AS IJwtDecoder)\n    Dim decoded As String \u003d decoder.Decode(token, secret, verify:\u003d true)\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003eJwtBuilder\u003c/code\u003e, make sure to call \u003ccode\u003eMustVerifySignature()\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nImports JWT\n\nPublic Sub Decode()\n    Dim decoded As String \u003d new JwtBuilder()\n        .WithSecret(secret)\n        .MustVerifySignature()\n        .Decode(token)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eVerify the signature of your tokens\u003c/h4\u003e\n\u003cp\u003eResolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.\u003c/p\u003e\n\u003cp\u003eEvery time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.\u003c/p\u003e\n\u003cp\u003eTo resolve the issue, follow these instructions:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. \u003c/li\u003e\n  \u003cli\u003e Handle invalid signatures appropriately: If a JWT’s signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. \u003c/li\u003e\n  \u003cli\u003e Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following these practices, you can ensure the security of your application’s JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.\u003c/p\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003ch4\u003eSecurely store your secret keys\u003c/h4\u003e\n\u003cp\u003eEnsure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.\u003c/p\u003e\n\u003ch4\u003eRotate your secret keys\u003c/h4\u003e\n\u003cp\u003eEven with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.\u003c/p\u003e",
        "context": {
          "key": "jwt_net",
          "displayName": "Jwt.Net"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/347\"\u003eCWE-347 - Improper Verification of Cryptographic Signature\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "privacy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4201",
    "name": "Null checks should not be used with \"TypeOf Is\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003eTypeOf ... Is\u003c/code\u003e test. \u003ccode\u003eNothing\u003c/code\u003e is not an instance of anything, so a null\ncheck is redundant.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf (x IsNot Nothing And TypeOf x Is MyClass)\n    \u0027 ...\nEnd If\n\nIf (x Is Nothing Or TypeOf x IsNot MyClass)\n    \u0027 ...\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf (TypeOf x Is MyClass)\n    \u0027 ...\nEnd If\n\nIf (TypeOf x IsNot MyClass)\n    \u0027 ...\nEnd If\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003eTypeOf ... Is\u003c/code\u003e test. \u003ccode\u003eNothing\u003c/code\u003e is not an instance of anything, so a null\ncheck is redundant.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf (x IsNot Nothing And TypeOf x Is MyClass)\n    \u0027 ...\nEnd If\n\nIf (x Is Nothing Or TypeOf x IsNot MyClass)\n    \u0027 ...\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf (TypeOf x Is MyClass)\n    \u0027 ...\nEnd If\n\nIf (TypeOf x IsNot MyClass)\n    \u0027 ...\nEnd If\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "redundant"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2387",
    "name": "Child class fields should not shadow parent class fields",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Ripe As Boolean         \u0027 Noncompliant\n    Private Shared FLESH As Color   \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Riped As Boolean\n    Private Shared FLESH_COLOR As Color   \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003eShared\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003ePrivate\u003c/code\u003e parent\nclass fields and fields explicitly declared as \u003ccode\u003eShadows\u003c/code\u003e, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Private Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Ripe As Season      \u0027 Compliant as parent field \u0027Ripe\u0027 is not visible from Raspberry anyway\n    Protected Shadows Flesh As Color    \u0027 Compliant as the intention is explicitly declared\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Ripe As Boolean         \u0027 Noncompliant\n    Private Shared FLESH As Color   \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Protected Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Riped As Boolean\n    Private Shared FLESH_COLOR As Color   \u0027 Noncompliant\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003eShared\u003c/code\u003e in both the parent and child classes. It also ignores \u003ccode\u003ePrivate\u003c/code\u003e parent\nclass fields and fields explicitly declared as \u003ccode\u003eShadows\u003c/code\u003e, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\nPublic Class Fruit\n\n    Private Ripe As Season\n    Protected Flesh As Color\n\n    \u0027 ...\n\nEnd Class\n\nPublic Class Raspberry\n    Inherits Fruit\n\n    Private Ripe As Season      \u0027 Compliant as parent field \u0027Ripe\u0027 is not visible from Raspberry anyway\n    Protected Shadows Flesh As Color    \u0027 Compliant as the intention is explicitly declared\n\n    \u0027 ...\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5773",
    "name": "Types allowed to be deserialized should be restricted",
    "defaultSeverity": "MAJOR",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "MEDIUM"
    },
    "description": "\u003cp\u003eDeserialization is the process of converting serialized data (such as objects or data structures) back into their original form. Types allowed to\nbe unserialized should be strictly controlled.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDuring the deserialization process, the state of an object will be reconstructed from the serialized data stream. By allowing unrestricted\ndeserialization of types, the application makes it possible for attackers to use types with dangerous or otherwise sensitive behavior during the\ndeserialization process.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen an application deserializes untrusted data without proper restrictions, an attacker can craft malicious serialized objects. Depending on the\naffected objects and properties, the consequences can vary.\u003c/p\u003e\n\u003ch3\u003eRemote Code Execution\u003c/h3\u003e\n\u003cp\u003eIf attackers can craft malicious serialized objects that contain executable code, this code will run within the application’s context, potentially\ngaining full control over the system. This can lead to unauthorized access, data breaches, or even complete system compromise.\u003c/p\u003e\n\u003cp\u003eFor example, a well-known attack vector consists in serializing an object of type \u003ccode\u003e\u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.-ctor?view\u003dnetframework-4.8#System_CodeDom_Compiler_TempFileCollection__ctor\"\u003eTempFileCollection\u003c/a\u003e\u003c/code\u003e\nwith arbitrary files (defined by an attacker) which will be deleted on the application deserializing this object (when the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.finalize?view\u003dnetframework-4.8\"\u003efinalize()\u003c/a\u003e method of\nthe TempFileCollection object is called). These kinds of specially crafted serialized objects are called \"\u003ca\nhref\u003d\"https://github.com/pwntester/ysoserial.net\"\u003egadgets\u003c/a\u003e\".\u003c/p\u003e\n\u003ch3\u003ePrivilege escalation\u003c/h3\u003e\n\u003cp\u003eUnrestricted deserialization can also enable attackers to escalate their privileges within the application. By manipulating the serialized data, an\nattacker can modify object properties or bypass security checks, granting them elevated privileges that they should not have. This can result in\nunauthorized access to sensitive data, unauthorized actions, or even administrative control over the application.\u003c/p\u003e\n\u003ch3\u003eDenial of Service\u003c/h3\u003e\n\u003cp\u003eIn some cases, an attacker can abuse the deserialization process to cause a denial of service (DoS) condition. By providing specially crafted\nserialized data, the attacker can trigger excessive resource consumption, leading to system instability or unresponsiveness. This can disrupt the\navailability of the application, impacting its functionality and causing inconvenience to users.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"201\" data-diff-type\u003d\"noncompliant\"\u003e\nDim myBinaryFormatter \u003d New BinaryFormatter()\nmyBinaryFormatter.Deserialize(stream) \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"202\" data-diff-type\u003d\"noncompliant\"\u003e\nDim serializer1 As JavaScriptSerializer \u003d New JavaScriptSerializer(New SimpleTypeResolver()) \u0027 Noncompliant: SimpleTypeResolver is insecure (every type is resolved)\nserializer1.Deserialize(Of ExpectedType)(json)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"201\" data-diff-type\u003d\"compliant\"\u003e\nNotInheritable Class CustomBinder\n    Inherits SerializationBinder\n    Public Overrides Function BindToType(assemblyName As String, typeName As String) As Type\n        If Not (Equals(typeName, \"type1\") OrElse Equals(typeName, \"type2\") OrElse Equals(typeName, \"type3\")) Then\n            Throw New SerializationException(\"Only type1, type2 and type3 are allowed\")\n        End If\n        Return Assembly.Load(assemblyName).[GetType](typeName)\n    End Function\nEnd Class\n\nDim myBinaryFormatter \u003d New BinaryFormatter()\nmyBinaryFormatter.Binder \u003d New CustomBinder()\nmyBinaryFormatter.Deserialize(stream)\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"202\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class CustomSafeTypeResolver\n    Inherits JavaScriptTypeResolver\n    Public Overrides Function ResolveType(id As String) As Type\n        If Not Equals(id, \"ExpectedType\") Then\n            Throw New ArgumentNullException(\"Only ExpectedType is allowed during deserialization\")\n        End If\n        Return Type.[GetType](id)\n    End Function\nEnd Class\n\nDim serializer As JavaScriptSerializer \u003d New JavaScriptSerializer(New CustomSafeTypeResolver())\nserializer.Deserialize(Of ExpectedType)(json)\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eInstead of using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e\nand similar serializers, it is recommended to use safer alternatives in most of the cases, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003e\u003ccode\u003eXmlSerializer\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003e\u003ccode\u003eDataContractSerializer\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf it’s not possible then try to mitigate the risk by restricting the types allowed to be deserialized:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by implementing an \"allow-list\" of types, but keep in mind that novel dangerous types are regularly discovered and this protection could be\n  insufficient over time. \u003c/li\u003e\n  \u003cli\u003e or/and implementing a tamper protection, such as \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003emessage authentication codes\u003c/a\u003e (MAC). This way\n  only objects serialized with the correct MAC hash will be deserialized. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003eBinaryFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003eNetDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003eSoapFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003eJavaScriptSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003eXmlSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003eDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide?s\u003d03\"\u003eDeserialization\n  risks in use of BinaryFormatter and related types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md\"\u003eDeserialization Cheat\n  Sheet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003eMessage Authentication Codes (MAC)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/134\"\u003eCWE-134 - Use of Externally-Controlled Format String\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502\"\u003eCWE-502 - Deserialization of Untrusted Data\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eDeserialization is the process of converting serialized data (such as objects or data structures) back into their original form. Types allowed to\nbe unserialized should be strictly controlled.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDuring the deserialization process, the state of an object will be reconstructed from the serialized data stream. By allowing unrestricted\ndeserialization of types, the application makes it possible for attackers to use types with dangerous or otherwise sensitive behavior during the\ndeserialization process.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWhen an application deserializes untrusted data without proper restrictions, an attacker can craft malicious serialized objects. Depending on the\naffected objects and properties, the consequences can vary.\u003c/p\u003e\n\u003ch3\u003eRemote Code Execution\u003c/h3\u003e\n\u003cp\u003eIf attackers can craft malicious serialized objects that contain executable code, this code will run within the application’s context, potentially\ngaining full control over the system. This can lead to unauthorized access, data breaches, or even complete system compromise.\u003c/p\u003e\n\u003cp\u003eFor example, a well-known attack vector consists in serializing an object of type \u003ccode\u003e\u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.-ctor?view\u003dnetframework-4.8#System_CodeDom_Compiler_TempFileCollection__ctor\"\u003eTempFileCollection\u003c/a\u003e\u003c/code\u003e\nwith arbitrary files (defined by an attacker) which will be deleted on the application deserializing this object (when the \u003ca\nhref\u003d\"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.tempfilecollection.finalize?view\u003dnetframework-4.8\"\u003efinalize()\u003c/a\u003e method of\nthe TempFileCollection object is called). These kinds of specially crafted serialized objects are called \"\u003ca\nhref\u003d\"https://github.com/pwntester/ysoserial.net\"\u003egadgets\u003c/a\u003e\".\u003c/p\u003e\n\u003ch3\u003ePrivilege escalation\u003c/h3\u003e\n\u003cp\u003eUnrestricted deserialization can also enable attackers to escalate their privileges within the application. By manipulating the serialized data, an\nattacker can modify object properties or bypass security checks, granting them elevated privileges that they should not have. This can result in\nunauthorized access to sensitive data, unauthorized actions, or even administrative control over the application.\u003c/p\u003e\n\u003ch3\u003eDenial of Service\u003c/h3\u003e\n\u003cp\u003eIn some cases, an attacker can abuse the deserialization process to cause a denial of service (DoS) condition. By providing specially crafted\nserialized data, the attacker can trigger excessive resource consumption, leading to system instability or unresponsiveness. This can disrupt the\navailability of the application, impacting its functionality and causing inconvenience to users.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"201\" data-diff-type\u003d\"noncompliant\"\u003e\nDim myBinaryFormatter \u003d New BinaryFormatter()\nmyBinaryFormatter.Deserialize(stream) \u0027 Noncompliant\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"202\" data-diff-type\u003d\"noncompliant\"\u003e\nDim serializer1 As JavaScriptSerializer \u003d New JavaScriptSerializer(New SimpleTypeResolver()) \u0027 Noncompliant: SimpleTypeResolver is insecure (every type is resolved)\nserializer1.Deserialize(Of ExpectedType)(json)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e,\n\u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003e\u003ccode\u003eNetDataContractSerializer\u003c/code\u003e\u003c/a\u003e\nor \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003e\u003ccode\u003eSoapFormatter\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"201\" data-diff-type\u003d\"compliant\"\u003e\nNotInheritable Class CustomBinder\n    Inherits SerializationBinder\n    Public Overrides Function BindToType(assemblyName As String, typeName As String) As Type\n        If Not (Equals(typeName, \"type1\") OrElse Equals(typeName, \"type2\") OrElse Equals(typeName, \"type3\")) Then\n            Throw New SerializationException(\"Only type1, type2 and type3 are allowed\")\n        End If\n        Return Assembly.Load(assemblyName).[GetType](typeName)\n    End Function\nEnd Class\n\nDim myBinaryFormatter \u003d New BinaryFormatter()\nmyBinaryFormatter.Binder \u003d New CustomBinder()\nmyBinaryFormatter.Deserialize(stream)\n\u003c/pre\u003e\n\u003cp\u003eWith \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003e\u003ccode\u003eJavaScriptSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"202\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class CustomSafeTypeResolver\n    Inherits JavaScriptTypeResolver\n    Public Overrides Function ResolveType(id As String) As Type\n        If Not Equals(id, \"ExpectedType\") Then\n            Throw New ArgumentNullException(\"Only ExpectedType is allowed during deserialization\")\n        End If\n        Return Type.[GetType](id)\n    End Function\nEnd Class\n\nDim serializer As JavaScriptSerializer \u003d New JavaScriptSerializer(New CustomSafeTypeResolver())\nserializer.Deserialize(Of ExpectedType)(json)\n\u003c/pre\u003e\n\u003ch3\u003eGoing the extra mile\u003c/h3\u003e\n\u003cp\u003eInstead of using \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003e\u003ccode\u003eBinaryFormatter\u003c/code\u003e\u003c/a\u003e\nand similar serializers, it is recommended to use safer alternatives in most of the cases, such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003e\u003ccode\u003eXmlSerializer\u003c/code\u003e\u003c/a\u003e or \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003e\u003ccode\u003eDataContractSerializer\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf it’s not possible then try to mitigate the risk by restricting the types allowed to be deserialized:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e by implementing an \"allow-list\" of types, but keep in mind that novel dangerous types are regularly discovered and this protection could be\n  insufficient over time. \u003c/li\u003e\n  \u003cli\u003e or/and implementing a tamper protection, such as \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003emessage authentication codes\u003c/a\u003e (MAC). This way\n  only objects serialized with the correct MAC hash will be deserialized. \u003c/li\u003e\n\u003c/ul\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\"\u003eBinaryFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer\"\u003eNetDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter\"\u003eSoapFormatter Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer\"\u003eJavaScriptSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\"\u003eXmlSerializer Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractserializer\"\u003eDataContractSerializer Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide?s\u003d03\"\u003eDeserialization\n  risks in use of BinaryFormatter and related types\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md\"\u003eDeserialization Cheat\n  Sheet\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/HMAC\"\u003eMessage Authentication Codes (MAC)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\u003eTop 10 2021 Category A8 - Software and Data Integrity\n  Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\"\u003eTop 10 2017 Category A8 - Insecure\n  Deserialization\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/134\"\u003eCWE-134 - Use of Externally-Controlled Format String\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502\"\u003eCWE-502 - Deserialization of Untrusted Data\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3598",
    "name": "One-way \"OperationContract\" methods should have \"void\" return type",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen declaring a Windows Communication Foundation (WCF) \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eOperationContract\u003c/code\u003e\u003c/a\u003e\nmethod as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.isoneway?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eone-way\u003c/code\u003e\u003c/a\u003e,\nthat service method won’t return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in\nevent-like communication. Therefore, specifying a return type has no effect and can confuse readers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t report if \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.asyncpattern\"\u003e\u003ccode\u003eOperationContractAttribute.AsyncPattern\u003c/code\u003e\u003c/a\u003e\nis set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;ServiceContract\u0026gt;\nInterface IMyService\n    \u0026lt;OperationContract(IsOneWay:\u003dTrue)\u0026gt;\n    Function SomethingHappened(ByVal parameter As Integer) As Integer \u0027 Noncompliant\nEnd Interface\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;ServiceContract\u0026gt;\nInterface IMyService\n    \u0026lt;OperationContract(IsOneWay:\u003dTrue)\u0026gt;\n    Sub SomethingHappened(ByVal parameter As Integer)\nEnd Interface\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute\"\u003eOperationContractAttribute\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen declaring a Windows Communication Foundation (WCF) \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eOperationContract\u003c/code\u003e\u003c/a\u003e\nmethod as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.isoneway?view\u003ddotnet-plat-ext-7.0\"\u003e\u003ccode\u003eone-way\u003c/code\u003e\u003c/a\u003e,\nthat service method won’t return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in\nevent-like communication. Therefore, specifying a return type has no effect and can confuse readers.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe rule doesn’t report if \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute.asyncpattern\"\u003e\u003ccode\u003eOperationContractAttribute.AsyncPattern\u003c/code\u003e\u003c/a\u003e\nis set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;ServiceContract\u0026gt;\nInterface IMyService\n    \u0026lt;OperationContract(IsOneWay:\u003dTrue)\u0026gt;\n    Function SomethingHappened(ByVal parameter As Integer) As Integer \u0027 Noncompliant\nEnd Interface\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;ServiceContract\u0026gt;\nInterface IMyService\n    \u0026lt;OperationContract(IsOneWay:\u003dTrue)\u0026gt;\n    Sub SomethingHappened(ByVal parameter As Integer)\nEnd Interface\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eMicrosoft Learn - \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.operationcontractattribute\"\u003eOperationContractAttribute\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3358",
    "name": "If operators should not be nested",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function GetReadableStatus(job As Job) As String\n    Return If(job.IsRunning, \"Running\", If(job.HasErrors, \"Failed\", \"Succeeded\")) \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function GetReadableStatus(job As Job) As String\n    If job.IsRunning Then Return \"Running\"\n    Return If(job.HasErrors, \"Failed\", \"Succeeded\")\nEnd Function\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested ternaries are hard to read and can make the order of operations complex to understand.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function GetReadableStatus(job As Job) As String\n    Return If(job.IsRunning, \"Running\", If(job.HasErrors, \"Failed\", \"Succeeded\")) \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eInstead, use another line to express the nested operation in a separate statement.\u003c/p\u003e\n\u003cpre\u003e\nPublic Function GetReadableStatus(job As Job) As String\n    If job.IsRunning Then Return \"Running\"\n    Return If(job.HasErrors, \"Failed\", \"Succeeded\")\nEnd Function\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5042",
    "name": "Expanding archive files without controlling resource consumption is security-sensitive",
    "defaultSeverity": "CRITICAL",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eSuccessful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme \u003ca href\u003d\"https://en.wikipedia.org/wiki/Data_compression_ratio\"\u003ecompression ratio\u003c/a\u003e, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cp\u003eArchives to expand are untrusted and:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e There is no validation of the number of entries in the archive. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e There is no validation of the ratio between the compressed and uncompressed archive entry. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cpre\u003e\nFor Each entry As ZipArchiveEntry in archive.Entries\n    \u0027 entry.FullName could contain parent directory references \"..\" and the destinationPath variable could become outside of the desired path\n    string destinationPath \u003d Path.GetFullPath(Path.Combine(path, entry.FullName))\n    entry.ExtractToFile(destinationPath) \u0027 Sensitive, extracts the entry to a file\n\n    Dim stream As Stream\n    stream \u003d entry.Open() \u0027 Sensitive, the entry is about to be extracted\nNext\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. \u003c/li\u003e\n  \u003cli\u003e Define and control the threshold for maximum total size of the uncompressed data. \u003c/li\u003e\n  \u003cli\u003e Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it’s not recommended to recursively expand archives (an entry of an archive could be also an archive). \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nConst ThresholdRatio As Double \u003d 10\nConst ThresholdSize As Integer \u003d 1024 * 1024 * 1024 \u0027 1 GB\nConst ThresholdEntries As Integer \u003d 10000\nDim TotalSizeArchive, TotalEntryArchive, TotalEntrySize, Cnt As Integer\nDim Buffer(1023) As Byte\nUsing ZipToOpen As New FileStream(\"ZipBomb.zip\", FileMode.Open), Archive As New ZipArchive(ZipToOpen, ZipArchiveMode.Read)\n    For Each Entry As ZipArchiveEntry In Archive.Entries\n        Using s As Stream \u003d Entry.Open\n            TotalEntryArchive +\u003d 1\n            TotalEntrySize \u003d 0\n            Do\n                Cnt \u003d s.Read(Buffer, 0, Buffer.Length)\n                TotalEntrySize +\u003d Cnt\n                TotalSizeArchive +\u003d Cnt\n                If TotalEntrySize / Entry.CompressedLength \u0026gt; ThresholdRatio Then Exit Do    \u0027 Ratio between compressed And uncompressed data Is highly suspicious, looks Like a Zip Bomb Attack\n            Loop While Cnt \u0026gt; 0\n        End Using\n        If TotalSizeArchive \u0026gt; ThresholdSize Then Exit For       \u0027 The uncompressed data size Is too much for the application resource capacity\n        If TotalEntryArchive \u0026gt; ThresholdEntries Then Exit For   \u0027 Too much entries in this archive, can lead to inodes exhaustion of the system\n    Next\nEnd Using\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\u003eTop 10 2021 Category A1 - Broken Access Control\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\"\u003eTop 10 2017 Category A6 -\n  Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/409\"\u003eCWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.bamsoftware.com/hacks/zipbomb/\"\u003ebamsoftware.com\u003c/a\u003e - A better Zip Bomb \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S1481",
    "name": "Unused local variables should be removed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving unused local variables in your code can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Decreased Readability: Unused variables can make your code more difficult to read. They add extra lines and complexity, which can distract from\n  the main logic of the code. \u003c/li\u003e\n  \u003cli\u003e Misunderstanding: When other developers read your code, they may wonder why a variable is declared but not used. This can lead to confusion and\n  misinterpretation of the code’s intent. \u003c/li\u003e\n  \u003cli\u003e Potential for Bugs: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you declared a variable\n  intending to use it in a calculation, but then forgot to do so, your program might not work as expected. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they might think it is\n  a mistake and try to \u0027fix\u0027 the code, potentially introducing new bugs. \u003c/li\u003e\n  \u003cli\u003e Memory Usage: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases, unused variables\n  take up memory space, leading to inefficient use of resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnused locally created resources in a \u003ccode\u003eUsing\u003c/code\u003e statement are not reported.\u003c/p\u003e\n\u003cpre\u003e\nUsing t \u003d New TestTimer()\nEnd Using\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function NumberOfMinutes(ByVal hours As Integer) As Integer\n    Dim seconds As Integer \u003d 0 \u0027 Noncompliant - seconds is unused\n    Return hours * 60\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function NumberOfMinutes(ByVal hours As Integer) As Integer\n    Return hours * 60\nEnd Function\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eHaving unused local variables in your code can lead to several issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Decreased Readability: Unused variables can make your code more difficult to read. They add extra lines and complexity, which can distract from\n  the main logic of the code. \u003c/li\u003e\n  \u003cli\u003e Misunderstanding: When other developers read your code, they may wonder why a variable is declared but not used. This can lead to confusion and\n  misinterpretation of the code’s intent. \u003c/li\u003e\n  \u003cli\u003e Potential for Bugs: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you declared a variable\n  intending to use it in a calculation, but then forgot to do so, your program might not work as expected. \u003c/li\u003e\n  \u003cli\u003e Maintenance Issues: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they might think it is\n  a mistake and try to \u0027fix\u0027 the code, potentially introducing new bugs. \u003c/li\u003e\n  \u003cli\u003e Memory Usage: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases, unused variables\n  take up memory space, leading to inefficient use of resources. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eUnused locally created resources in a \u003ccode\u003eUsing\u003c/code\u003e statement are not reported.\u003c/p\u003e\n\u003cpre\u003e\nUsing t \u003d New TestTimer()\nEnd Using\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation leading to bugs, you\njust need to remove it.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function NumberOfMinutes(ByVal hours As Integer) As Integer\n    Dim seconds As Integer \u003d 0 \u0027 Noncompliant - seconds is unused\n    Return hours * 60\nEnd Function\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function NumberOfMinutes(ByVal hours As Integer) As Integer\n    Return hours * 60\nEnd Function\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2339",
    "name": "Public constant members should not be used",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConstant members are copied at compile time to the call sites, instead of being fetched at runtime.\u003c/p\u003e\n\u003cp\u003eAs an example, say you have a library with a constant \u003ccode\u003eVersion\u003c/code\u003e member set to \u003ccode\u003e1.0\u003c/code\u003e, and a client application linked to it.\nThis library is then updated and \u003ccode\u003eVersion\u003c/code\u003e is set to \u003ccode\u003e2.0\u003c/code\u003e. Unfortunately, even after the old DLL is replaced by the new one,\n\u003ccode\u003eVersion\u003c/code\u003e will still be \u003ccode\u003e1.0\u003c/code\u003e for the client application. In order to see \u003ccode\u003e2.0\u003c/code\u003e, the client application would need to\nbe rebuilt against the new version of the library.\u003c/p\u003e\n\u003cp\u003eThis means that you should use constants to hold values that by definition will never change, such as \u003ccode\u003eZero\u003c/code\u003e. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.\u003c/p\u003e\n\u003cp\u003eThis rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Const Version \u003d 1.0           \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Shared ReadOnly Property Version \u003d 1.0 \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConstant members are copied at compile time to the call sites, instead of being fetched at runtime.\u003c/p\u003e\n\u003cp\u003eAs an example, say you have a library with a constant \u003ccode\u003eVersion\u003c/code\u003e member set to \u003ccode\u003e1.0\u003c/code\u003e, and a client application linked to it.\nThis library is then updated and \u003ccode\u003eVersion\u003c/code\u003e is set to \u003ccode\u003e2.0\u003c/code\u003e. Unfortunately, even after the old DLL is replaced by the new one,\n\u003ccode\u003eVersion\u003c/code\u003e will still be \u003ccode\u003e1.0\u003c/code\u003e for the client application. In order to see \u003ccode\u003e2.0\u003c/code\u003e, the client application would need to\nbe rebuilt against the new version of the library.\u003c/p\u003e\n\u003cp\u003eThis means that you should use constants to hold values that by definition will never change, such as \u003ccode\u003eZero\u003c/code\u003e. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.\u003c/p\u003e\n\u003cp\u003eThis rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Const Version \u003d 1.0           \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Foo\n    Public Shared ReadOnly Property Version \u003d 1.0 \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2692",
    "name": "\"IndexOf\" checks should not be for positive numbers",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eMost checks against an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003eIndexOf\u003c/a\u003e value compare it with -1 because\n\u003cstrong\u003e0 is a valid index\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstrings.IndexOf(someString) \u003d -1  \u0027 Test for \"index not found\"\nstrings.IndexOf(someString) \u0026lt; 0   \u0027 Test for \"index not found\"\nstrings.IndexOf(someString) \u0026gt;\u003d 0  \u0027 Test for \"index found\"\n\u003c/pre\u003e\n\u003cp\u003eAny checks which look for values \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignore the first element, which is likely a bug. If the intent is merely to check the\ninclusion of a value in a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eList\u003c/code\u003e, or array, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eContains\u003c/a\u003e method instead.\u003c/p\u003e\n\u003cpre\u003e\nstrings.Contains(someString) \u0027 Boolean result\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the output value of any of the following methods is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.indexof\"\u003eIndexOf\u003c/a\u003e, applied to \u003ccode\u003eString\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eLastIndexOf\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eLastIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nsomeArray.IndexOf(someItem) \u0026gt; 0        \u0027 Noncompliant: index 0 missing\nsomeString.IndexOfAny(charsArray) \u0026gt; 0  \u0027 Noncompliant: index 0 missing\nsomeList.LastIndexOf(someItem) \u0026gt; 0     \u0027 Noncompliant: index 0 missing\nsomeString.LastIndexOf(charsArray) \u0026gt; 0 \u0027 Noncompliant: index 0 missing\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim Color As String \u003d \"blue\"\nDim Name As String \u003d \"ishmael\"\n\nDim Strings As New List(Of String)\nStrings.Add(Color)\nStrings.Add(Name)\nDim StringArray As String() \u003d Strings.ToArray()\n\nIf Strings.IndexOf(Color) \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ish\") \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ae\") \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Array.IndexOf(StringArray, Color) \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim Color As String \u003d \"blue\"\nDim Name As String \u003d \"ishmael\"\n\nDim Strings As New List(Of String)\nStrings.Add(Color)\nStrings.Add(Name)\nDim StringArray As String() \u003d Strings.ToArray()\n\nIf Strings.IndexOf(Color) \u0026gt; -1 Then\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ish\") \u0026gt;\u003d 0 Then\n  \u0027 ...\nEnd If\n\nIf Name.Contains(\"ae\") Then\n  \u0027 ...\nEnd If\n\nIf Array.IndexOf(StringArray, Color) \u0026gt;\u003d 0 Then\n  \u0027 ...\nEnd If\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eString.Contains Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eString.IndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eString.LastIndexOf Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eString.LastIndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eMost checks against an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexof\"\u003eIndexOf\u003c/a\u003e value compare it with -1 because\n\u003cstrong\u003e0 is a valid index\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\nstrings.IndexOf(someString) \u003d -1  \u0027 Test for \"index not found\"\nstrings.IndexOf(someString) \u0026lt; 0   \u0027 Test for \"index not found\"\nstrings.IndexOf(someString) \u0026gt;\u003d 0  \u0027 Test for \"index found\"\n\u003c/pre\u003e\n\u003cp\u003eAny checks which look for values \u003ccode\u003e\u0026gt; 0\u003c/code\u003e ignore the first element, which is likely a bug. If the intent is merely to check the\ninclusion of a value in a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eList\u003c/code\u003e, or array, consider using the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eContains\u003c/a\u003e method instead.\u003c/p\u003e\n\u003cpre\u003e\nstrings.Contains(someString) \u0027 Boolean result\n\u003c/pre\u003e\n\u003cp\u003eThis rule raises an issue when the output value of any of the following methods is tested against \u003ccode\u003e\u0026gt; 0\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.ilist.indexof\"\u003eIndexOf\u003c/a\u003e, applied to \u003ccode\u003eString\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eLastIndexOf\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e, list or\n  array \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eLastIndexOfAny\u003c/a\u003e, applied to a \u003ccode\u003eString\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nsomeArray.IndexOf(someItem) \u0026gt; 0        \u0027 Noncompliant: index 0 missing\nsomeString.IndexOfAny(charsArray) \u0026gt; 0  \u0027 Noncompliant: index 0 missing\nsomeList.LastIndexOf(someItem) \u0026gt; 0     \u0027 Noncompliant: index 0 missing\nsomeString.LastIndexOf(charsArray) \u0026gt; 0 \u0027 Noncompliant: index 0 missing\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nDim Color As String \u003d \"blue\"\nDim Name As String \u003d \"ishmael\"\n\nDim Strings As New List(Of String)\nStrings.Add(Color)\nStrings.Add(Name)\nDim StringArray As String() \u003d Strings.ToArray()\n\nIf Strings.IndexOf(Color) \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ish\") \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ae\") \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\nIf Array.IndexOf(StringArray, Color) \u0026gt; 0 Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nDim Color As String \u003d \"blue\"\nDim Name As String \u003d \"ishmael\"\n\nDim Strings As New List(Of String)\nStrings.Add(Color)\nStrings.Add(Name)\nDim StringArray As String() \u003d Strings.ToArray()\n\nIf Strings.IndexOf(Color) \u0026gt; -1 Then\n  \u0027 ...\nEnd If\n\nIf Name.IndexOf(\"ish\") \u0026gt;\u003d 0 Then\n  \u0027 ...\nEnd If\n\nIf Name.Contains(\"ae\") Then\n  \u0027 ...\nEnd If\n\nIf Array.IndexOf(StringArray, Color) \u0026gt;\u003d 0 Then\n  \u0027 ...\nEnd If\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.contains\"\u003eString.Contains Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.indexofany\"\u003eString.IndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexof\"\u003eString.LastIndexOf Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.string.lastindexofany\"\u003eString.LastIndexOfAny Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1123",
    "name": "\"Obsolete\" attributes should include explanations",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eObsolete\u003c/code\u003e attribute can be applied with or without a message argument. Marking something \u003ccode\u003eObsolete\u003c/code\u003e without including\nadvice on why it’s obsolete or what to use instead will lead maintainers to waste time trying to figure those things out.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Car\n\n    \u0026lt;Obsolete\u0026gt;  \u0027 Noncompliant\n    Public Sub CrankEngine(Turns As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Car\n\n    \u0026lt;Obsolete(\"Replaced by the automatic starter\")\u0026gt;\n    Public Sub CrankEngine(Turns As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003eObsolete\u003c/code\u003e attribute can be applied with or without a message argument. Marking something \u003ccode\u003eObsolete\u003c/code\u003e without including\nadvice on why it’s obsolete or what to use instead will lead maintainers to waste time trying to figure those things out.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Car\n\n    \u0026lt;Obsolete\u0026gt;  \u0027 Noncompliant\n    Public Sub CrankEngine(Turns As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class Car\n\n    \u0026lt;Obsolete(\"Replaced by the automatic starter\")\u0026gt;\n    Public Sub CrankEngine(Turns As Integer)\n        \u0027 ...\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice",
      "obsolete"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1125",
    "name": "Boolean literals should not be redundant",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003eNot, And, Or, \u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a variable or\nexpression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a boolean expression\nis, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of new bugs.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf BooleanMethod() \u003d True Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nIf BooleanMethod() \u003d False Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nIf BooleanMethod() OrElse False Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nDoSomething(Not False) \u0027 Noncompliant\nDoSomething(BooleanMethod() \u003d True) \u0027 Noncompliant\n\nDim booleanVariable \u003d If(BooleanMethod(), True, False) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), True, exp) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), False, exp) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), exp, True) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), exp, False) \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf BooleanMethod() Then\n  \u0027 ...\nEnd If\nIf Not BooleanMethod() Then\n  \u0027 ...\nEnd If\nIf BooleanMethod() Then\n  \u0027 ...\nEnd If\nDoSomething(True)\nDoSomething(BooleanMethod())\n\nDim booleanVariable \u003d BooleanMethod()\nbooleanVariable \u003d BooleanMethod() OrElse exp\nbooleanVariable \u003d Not BooleanMethod() AndAlso exp\nbooleanVariable \u003d Not BooleanMethod() OrElse exp\nbooleanVariable \u003d BooleanMethod() AndAlso exp\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA boolean literal can be represented in two different ways: \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e. They can be combined with logical operators\n(\u003ccode\u003eNot, And, Or, \u003d\u003c/code\u003e) to produce logical expressions that represent truth values. However, comparing a boolean literal to a variable or\nexpression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a boolean expression\nis, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of new bugs.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eRemove redundant boolean literals from expressions to improve readability and make the code more maintainable.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf BooleanMethod() \u003d True Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nIf BooleanMethod() \u003d False Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nIf BooleanMethod() OrElse False Then \u0027 Noncompliant\n  \u0027 ...\nEnd If\nDoSomething(Not False) \u0027 Noncompliant\nDoSomething(BooleanMethod() \u003d True) \u0027 Noncompliant\n\nDim booleanVariable \u003d If(BooleanMethod(), True, False) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), True, exp) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), False, exp) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), exp, True) \u0027 Noncompliant\nbooleanVariable \u003d If(BooleanMethod(), exp, False) \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf BooleanMethod() Then\n  \u0027 ...\nEnd If\nIf Not BooleanMethod() Then\n  \u0027 ...\nEnd If\nIf BooleanMethod() Then\n  \u0027 ...\nEnd If\nDoSomething(True)\nDoSomething(BooleanMethod())\n\nDim booleanVariable \u003d BooleanMethod()\nbooleanVariable \u003d BooleanMethod() OrElse exp\nbooleanVariable \u003d Not BooleanMethod() AndAlso exp\nbooleanVariable \u003d Not BooleanMethod() OrElse exp\nbooleanVariable \u003d BooleanMethod() AndAlso exp\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4060",
    "name": "Non-abstract attributes should be sealed",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type inherits from \u003ccode\u003eSystem.Attribute\u003c/code\u003e, is not abstract, and is not sealed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class MyAttribute    \u0027 Noncompliant\n    Inherits Attribute\n\n    Public ReadOnly Property Name As String\n\n    Public Sub New(Name As String)\n        Me.Name \u003d Name\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic NotInheritable Class MyAttribute\n    Inherits Attribute\n\n    Public ReadOnly Property Name As String\n\n    Public Sub New(Name As String)\n        Me.Name \u003d Name\n    End Sub\n\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a public type inherits from \u003ccode\u003eSystem.Attribute\u003c/code\u003e, is not abstract, and is not sealed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Class MyAttribute    \u0027 Noncompliant\n    Inherits Attribute\n\n    Public ReadOnly Property Name As String\n\n    Public Sub New(Name As String)\n        Me.Name \u003d Name\n    End Sub\n\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic NotInheritable Class MyAttribute\n    Inherits Attribute\n\n    Public ReadOnly Property Name As String\n\n    Public Sub New(Name As String)\n        Me.Name \u003d Name\n    End Sub\n\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1479",
    "name": "\"Select Case\" statements should not have too many \"Case\" clauses",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/select-case-statement\"\u003eSelect Case\u003c/a\u003e statements\nhave large sets of case clauses, it is usually an attempt to map two sets of data. A \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e should be used instead to make the code\nmore readable and maintainable.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eSelect Case\u003c/code\u003e statements over \u003ccode\u003eEnum\u003c/code\u003e arguments and empty, fall-through cases.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eStore all the cases apart from the \u003ccode\u003eCase Else\u003c/code\u003e one in a dictionary and try to get the matching value by calling the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eTryGetValue\u003c/a\u003e method.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class TooManyCase\n\n    Public Function MapValues(Ch As Char) As Integer\n        Select Case Ch \u0027 Noncompliant: 5 cases, \"Case Else\" excluded, more than maximum \u003d 4\n            Case \"a\"c\n                Return 1\n            Case \"b\"c, \"c\"c\n                Return 2\n            Case \"d\"c\n                Return 3\n            Case \"e\"c\n                Return 4\n            Case \"f\"c, \"g\"c, \"h\"c\n                Return 5\n            Case Else\n                Return 6\n        End Select\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class TooManyCase\n\n    Private fMatching As New Dictionary(Of Char, Integer) From {\n            { \"a\"c, 1 },\n            { \"b\"c, 2 },\n            { \"c\"c, 2 },\n            { \"d\"c, 3 },\n            { \"e\"c, 4 },\n            { \"f\"c, 5 },\n            { \"g\"c, 5 },\n            { \"h\"c, 5 },\n        }\n\n    Public Function MapValues(Ch As Char) As Integer\n        Dim Value As Integer\n        If fMatching.TryGetValue(Ch, Value) Then\n            Return Value\n        Else\n            Return 6\n        End If\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt;.TryGetValue(TKey, TValue) Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/select-case-statement\"\u003eSelect…​Case Statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/select-case-statement\"\u003eSelect Case\u003c/a\u003e statements\nhave large sets of case clauses, it is usually an attempt to map two sets of data. A \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u003c/a\u003e should be used instead to make the code\nmore readable and maintainable.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eSelect Case\u003c/code\u003e statements over \u003ccode\u003eEnum\u003c/code\u003e arguments and empty, fall-through cases.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eStore all the cases apart from the \u003ccode\u003eCase Else\u003c/code\u003e one in a dictionary and try to get the matching value by calling the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eTryGetValue\u003c/a\u003e method.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Class TooManyCase\n\n    Public Function MapValues(Ch As Char) As Integer\n        Select Case Ch \u0027 Noncompliant: 5 cases, \"Case Else\" excluded, more than maximum \u003d 4\n            Case \"a\"c\n                Return 1\n            Case \"b\"c, \"c\"c\n                Return 2\n            Case \"d\"c\n                Return 3\n            Case \"e\"c\n                Return 4\n            Case \"f\"c, \"g\"c, \"h\"c\n                Return 5\n            Case Else\n                Return 6\n        End Select\n    End Function\n\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Class TooManyCase\n\n    Private fMatching As New Dictionary(Of Char, Integer) From {\n            { \"a\"c, 1 },\n            { \"b\"c, 2 },\n            { \"c\"c, 2 },\n            { \"d\"c, 3 },\n            { \"e\"c, 4 },\n            { \"f\"c, 5 },\n            { \"g\"c, 5 },\n            { \"h\"c, 5 },\n        }\n\n    Public Function MapValues(Ch As Char) As Integer\n        Dim Value As Integer\n        If fMatching.TryGetValue(Ch, Value) Then\n            Return Value\n        Else\n            Return 6\n        End If\n    End Function\n\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt; Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.trygetvalue\"\u003eDictionary\u0026lt;TKey,TValue\u0026gt;.TryGetValue(TKey, TValue) Method\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/select-case-statement\"\u003eSelect…​Case Statement\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "maximum": {
        "key": "maximum",
        "name": "maximum",
        "description": "Maximum number of case",
        "defaultValue": "30",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "maximum": "30"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S4507",
    "name": "Delivering code in production with debug features activated is security-sensitive",
    "defaultSeverity": "MINOR",
    "type": "SECURITY_HOTSPOT",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "SECURITY": "LOW"
    },
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopment tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the application’s path or file names.\u003c/p\u003e"
      },
      {
        "key": "assess_the_problem",
        "htmlContent": "\u003ch2\u003eAsk Yourself Whether\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. \u003c/li\u003e\n  \u003cli\u003e The application runs by default with debug features activated. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is a risk if you answered yes to any of those questions.\u003c/p\u003e\n\u003ch2\u003eSensitive Code Example\u003c/h2\u003e\n\u003cp\u003eThis rule raises issues when the following .Net Core methods are called:\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage\u003c/code\u003e,\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Builder\nImports Microsoft.AspNetCore.Hosting\n\nNamespace MyMvcApp\n    Public Class Startup\n        Public Sub Configure(ByVal app As IApplicationBuilder, ByVal env As IHostingEnvironment)\n            \u0027 Those calls are Sensitive because it seems that they will run in production\n            app.UseDeveloperExceptionPage() \u0027Sensitive\n            app.UseDatabaseErrorPage() \u0027Sensitive\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eDo not enable debugging features on production servers.\u003c/p\u003e\n\u003cp\u003eThe .Net Core framework offers multiple features which help during debug.\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDeveloperExceptionPage\u003c/code\u003e and\n\u003ccode\u003eMicrosoft.AspNetCore.Builder.IApplicationBuilder.UseDatabaseErrorPage\u003c/code\u003e are two of them. Make sure that those features are disabled in\nproduction.\u003c/p\u003e\n\u003cp\u003eUse \u003ccode\u003eIf env.IsDevelopment()\u003c/code\u003e to disable debug code.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nImports Microsoft.AspNetCore.Builder\nImports Microsoft.AspNetCore.Hosting\n\nNamespace MyMvcApp\n    Public Class Startup\n        Public Sub Configure(ByVal app As IApplicationBuilder, ByVal env As IHostingEnvironment)\n            If env.IsDevelopment() Then \u0027 Compliant\n                \u0027 The following calls are ok because they are disabled in production\n                app.UseDeveloperExceptionPage()\n                app.UseDatabaseErrorPage()\n            End If\n        End Sub\n    End Class\nEnd Namespace\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\u003eTop 10 2021 Category A5 - Security Misconfiguration\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489\"\u003eCWE-489 - Active Debug Code\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/215\"\u003eCWE-215 - Information Exposure Through Debug Information\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "debug",
      "error-handling",
      "user-experience"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": [],
    "vulnerabilityProbability": "LOW"
  },
  {
    "key": "vbnet:S1110",
    "name": "Redundant pairs of parentheses should be removed",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf a AndAlso ((x + y \u0026gt; 0)) Then \u0027 Noncompliant\n    \u0027 ...\nEnd If\n\nReturn ((x + 1))  \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf a AndAlso x + y \u0026gt; 0 Then\n    \u0027 ...\nEnd If\n\nReturn x + 1\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nIf a AndAlso ((x + y \u0026gt; 0)) Then \u0027 Noncompliant\n    \u0027 ...\nEnd If\n\nReturn ((x + 1))  \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nIf a AndAlso x + y \u0026gt; 0 Then\n    \u0027 ...\nEnd If\n\nReturn x + 1\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "confusing"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3898",
    "name": "Value types should implement \"IEquatable\u003cT\u003e\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "EFFICIENT",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIf you’re using a \u003ccode\u003eStructure\u003c/code\u003e, it is likely because you’re interested in performance. But by failing to implement\n\u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e you’re loosing performance when comparisons are made because without \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e, boxing and\nreflection are used to make comparisons.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nStructure MyStruct \u0027 Noncompliant\n\n    Public Property Value As Integer\n\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nStructure MyStruct\n    Implements IEquatable(Of MyStruct)\n\n    Public Property Value As Integer\n\n    Public Overloads Function Equals(other As MyStruct) As Boolean Implements IEquatable(Of MyStruct).Equals\n        \u0027 ...\n    End Function\n\nEnd Structure\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1\"\u003eIEquatable\u0026lt;T\u0026gt; Interface\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIf you’re using a \u003ccode\u003eStructure\u003c/code\u003e, it is likely because you’re interested in performance. But by failing to implement\n\u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e you’re loosing performance when comparisons are made because without \u003ccode\u003eIEquatable\u0026lt;T\u0026gt;\u003c/code\u003e, boxing and\nreflection are used to make comparisons.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nStructure MyStruct \u0027 Noncompliant\n\n    Public Property Value As Integer\n\nEnd Structure\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nStructure MyStruct\n    Implements IEquatable(Of MyStruct)\n\n    Public Property Value As Integer\n\n    Public Overloads Function Equals(other As MyStruct) As Boolean Implements IEquatable(Of MyStruct).Equals\n        \u0027 ...\n    End Function\n\nEnd Structure\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.iequatable-1\"\u003eIEquatable\u0026lt;T\u0026gt; Interface\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "performance"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3776",
    "name": "Cognitive Complexity of methods should not be too high",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction Abs(ByVal n As Integer) As Integer \u0027 Noncompliant: cognitive complexity \u003d 5\n    If n \u0026gt;\u003d 0 Then    \u0027 +1\n        Return n\n    Else              \u0027 +2, due to nesting\n        If n \u003d Integer.MinValue Then      \u0027 +1\n            Throw New ArgumentException(\"The absolute value of int.MinValue is outside of int boundaries\")\n        Else                              \u0027 +1\n            Return -n\n        End If\n    End If\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eThey should be refactored to have lower complexity:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction Abs(ByVal n As Integer) As Integer  \u0027 Compliant: cognitive complexity \u003d 3\n    If n \u003d Integer.MinValue Then    \u0027 +1\n        Throw New ArgumentException(\"The absolute value of int.MinValue is outside of int boundaries\")\n    Else If n \u0026gt;\u003d 0 Then             \u0027 +1\n        Return n\n    Else                            \u0027 +1\n        Return -n\n    End If\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule raises an issue when the code cognitive complexity of a function is above a certain threshold.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.\u003c/p\u003e\n\u003cp\u003eAs a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.\u003c/p\u003e\n\u003ch3\u003eWhich syntax in code does impact cognitive complexity score?\u003c/h3\u003e\n\u003cp\u003eHere are the core concepts:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003cstrong\u003eCognitive complexity is incremented each time the code breaks the normal linear reading flow.\u003c/strong\u003e\u003cbr\u003e This concerns, for example:\n  Loop structures, Conditionals, Catches, Switches, Jumps to label and mixed operators in condition. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eEach nesting level adds a malus to the breaking call.\u003c/strong\u003e\u003cbr\u003e During code reading, the deeper you go through nested layers, the\n  harder it becomes to keep the context in mind. \u003c/li\u003e\n  \u003cli\u003e \u003cstrong\u003eMethod calls are free\u003c/strong\u003e\u003cbr\u003e A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.\u003cbr\u003e \u003cem\u003eNote:\u003c/em\u003e This does not\n  apply to recursive calls, those will increment cognitive score. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe method of computation is fully detailed in the pdf linked in the resources.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eDevelopers spend more time reading and understanding code than writing it. High cognitive complexity slows down changes and increases the cost of\nmaintenance.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nFunction Abs(ByVal n As Integer) As Integer \u0027 Noncompliant: cognitive complexity \u003d 5\n    If n \u0026gt;\u003d 0 Then    \u0027 +1\n        Return n\n    Else              \u0027 +2, due to nesting\n        If n \u003d Integer.MinValue Then      \u0027 +1\n            Throw New ArgumentException(\"The absolute value of int.MinValue is outside of int boundaries\")\n        Else                              \u0027 +1\n            Return -n\n        End If\n    End If\nEnd Function\n\u003c/pre\u003e\n\u003cp\u003eThey should be refactored to have lower complexity:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nFunction Abs(ByVal n As Integer) As Integer  \u0027 Compliant: cognitive complexity \u003d 3\n    If n \u003d Integer.MinValue Then    \u0027 +1\n        Throw New ArgumentException(\"The absolute value of int.MinValue is outside of int boundaries\")\n    Else If n \u0026gt;\u003d 0 Then             \u0027 +1\n        Return n\n    Else                            \u0027 +1\n        Return -n\n    End If\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar - \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Sonar Blog - \u003ca href\u003d\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\"\u003e5 Clean Code Tips for Reducing\n  Cognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {
      "threshold": {
        "key": "threshold",
        "name": "threshold",
        "description": "The maximum authorized complexity.",
        "defaultValue": "15",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      },
      "propertyThreshold": {
        "key": "propertyThreshold",
        "name": "propertyThreshold",
        "description": "The maximum authorized complexity in a property.",
        "defaultValue": "3",
        "type": "INTEGER",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "threshold": "15",
      "propertyThreshold": "3"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "brain-overload"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3655",
    "name": "Empty nullable value should not be accessed",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable value types\u003c/a\u003e can hold either a value or\n\u003ccode\u003eNothing\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe value stored in the nullable type can be accessed with the \u003ccode\u003eValue\u003c/code\u003e property or by casting it to the underlying type. Still, both\noperations throw an \u003ccode\u003eInvalidOperationException\u003c/code\u003e when the value is \u003ccode\u003eNothing\u003c/code\u003e. A nullable type should always be tested before\naccessing the value to avoid raising exceptions.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub Sample(condition As Boolean)\n    Dim nullableValue As Integer? \u003d If(condition, 42, Nothing)\n    Console.WriteLine(nullableValue.Value)             \u0027 Noncompliant: InvalidOperationException is raised\n\n    Dim nullableCast As Integer? \u003d If(condition, 42, Nothing)\n    Console.WriteLine(CType(nullableCast, Integer))    \u0027 Noncompliant: InvalidOperationException is raised\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub Sample(condition As Boolean)\n    Dim nullableValue As Integer? \u003d If(condition, 42, Nothing)\n    If nullableValue.HasValue Then\n        Console.WriteLine(nullableValue.Value)\n    End If\n\n    Dim nullableCast As Integer? \u003d If(condition, 42, Nothing)\n    If nullableCast.HasValue Then\n        Console.WriteLine(CType(nullableCast, Integer))\n    End If\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable value types\u003c/a\u003e can hold either a value or\n\u003ccode\u003eNothing\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe value stored in the nullable type can be accessed with the \u003ccode\u003eValue\u003c/code\u003e property or by casting it to the underlying type. Still, both\noperations throw an \u003ccode\u003eInvalidOperationException\u003c/code\u003e when the value is \u003ccode\u003eNothing\u003c/code\u003e. A nullable type should always be tested before\naccessing the value to avoid raising exceptions.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub Sample(condition As Boolean)\n    Dim nullableValue As Integer? \u003d If(condition, 42, Nothing)\n    Console.WriteLine(nullableValue.Value)             \u0027 Noncompliant: InvalidOperationException is raised\n\n    Dim nullableCast As Integer? \u003d If(condition, 42, Nothing)\n    Console.WriteLine(CType(nullableCast, Integer))    \u0027 Noncompliant: InvalidOperationException is raised\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub Sample(condition As Boolean)\n    Dim nullableValue As Integer? \u003d If(condition, 42, Nothing)\n    If nullableValue.HasValue Then\n        Console.WriteLine(nullableValue.Value)\n    End If\n\n    Dim nullableCast As Integer? \u003d If(condition, 42, Nothing)\n    If nullableCast.HasValue Then\n        Console.WriteLine(CType(nullableCast, Integer))\n    End If\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.nullable-1\"\u003eNullable\u0026lt;T\u0026gt;\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3449",
    "name": "Right operands of shift operators should be integers",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNumbers can be shifted with the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/bit-shift-operators\"\u003eoperators\u003c/a\u003e, but the right operand of\nthe operation needs to be an \u003ccode\u003eint\u003c/code\u003e or a type that has an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eimplicit\nconversion\u003c/a\u003e to \u003ccode\u003eint\u003c/code\u003e. However, when the left operand is an \u003ccode\u003eobject\u003c/code\u003e, the compiler’s type checking is turned off, so you can\npass anything to the right of a shift operator and have it compile. And if the argument can’t be implicitly converted to \u003ccode\u003eint\u003c/code\u003e at runtime,\nthen a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException\u003c/a\u003e will be\nraised.\u003c/p\u003e\n\u003cpre\u003e\nDim o As Object \u003d 5\nDim x As Integer \u003d 5\n\nx \u003d o \u0026gt;\u0026gt; 5 \u0027 Noncompliant\nx \u003d x \u0026lt;\u0026lt; o \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise when the left or the right expression is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nx \u003d Nothing \u0026gt;\u0026gt; 5\nx \u003d 5 \u0026lt;\u0026lt; Nothing\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/bit-shift-operators\"\u003eBit Shift Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eImplicit and Explicit Conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNumbers can be shifted with the \u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/bit-shift-operators\"\u003eoperators\u003c/a\u003e, but the right operand of\nthe operation needs to be an \u003ccode\u003eint\u003c/code\u003e or a type that has an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eimplicit\nconversion\u003c/a\u003e to \u003ccode\u003eint\u003c/code\u003e. However, when the left operand is an \u003ccode\u003eobject\u003c/code\u003e, the compiler’s type checking is turned off, so you can\npass anything to the right of a shift operator and have it compile. And if the argument can’t be implicitly converted to \u003ccode\u003eint\u003c/code\u003e at runtime,\nthen a \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException\u003c/a\u003e will be\nraised.\u003c/p\u003e\n\u003cpre\u003e\nDim o As Object \u003d 5\nDim x As Integer \u003d 5\n\nx \u003d o \u0026gt;\u0026gt; 5 \u0027 Noncompliant\nx \u003d x \u0026lt;\u0026lt; o \u0027 Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule does not raise when the left or the right expression is \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/nothing\"\u003eNothing\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\nx \u003d Nothing \u0026gt;\u0026gt; 5\nx \u003d 5 \u0026lt;\u0026lt; Nothing\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/bit-shift-operators\"\u003eBit Shift Operators\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eImplicit and Explicit Conversions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/microsoft.csharp.runtimebinder.runtimebinderexception\"\u003eRuntimeBinderException Class\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2359",
    "name": "\"On Error\" statements should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003ePrefer the use of \u003ccode\u003eTry ... Catch\u003c/code\u003e blocks instead of \u003ccode\u003eOn Error\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003eVisual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable alternative to the \u003ccode\u003eOn\nError Goto\u003c/code\u003e error handling from previous versions of Microsoft Visual Basic. Structured exception handling is more powerful because it allows\nyou to nest error handlers inside other error handlers within the same procedure. Furthermore, structured exception handling uses a block syntax\nsimilar to the \u003ccode\u003eIf...Else...End If\u003c/code\u003e statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and easier to\nmaintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub DivideByZero()\n  On Error GoTo nextstep\n  Dim result As Integer\n  Dim num As Integer\n  num \u003d 100\n  result \u003d num / 0\nnextstep:\n  System.Console.WriteLine(\"Error\")\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub DivideByZero()\n  Try\n    Dim result As Integer\n    Dim num As Integer\n    num \u003d 100\n    result \u003d num / 0\n  Catch\n    System.Console.WriteLine(\"Error\")\n  End Try\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003ePrefer the use of \u003ccode\u003eTry ... Catch\u003c/code\u003e blocks instead of \u003ccode\u003eOn Error\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003eVisual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable alternative to the \u003ccode\u003eOn\nError Goto\u003c/code\u003e error handling from previous versions of Microsoft Visual Basic. Structured exception handling is more powerful because it allows\nyou to nest error handlers inside other error handlers within the same procedure. Furthermore, structured exception handling uses a block syntax\nsimilar to the \u003ccode\u003eIf...Else...End If\u003c/code\u003e statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and easier to\nmaintain.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub DivideByZero()\n  On Error GoTo nextstep\n  Dim result As Integer\n  Dim num As Integer\n  num \u003d 100\n  result \u003d num / 0\nnextstep:\n  System.Console.WriteLine(\"Error\")\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nSub DivideByZero()\n  Try\n    Dim result As Integer\n    Dim num As Integer\n    num \u003d 100\n    result \u003d num / 0\n  Catch\n    System.Console.WriteLine(\"Error\")\n  End Try\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1821",
    "name": "\"Select Case\" statements should not be nested",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FOCUSED",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eNested \u003ccode\u003eSelect Case\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eSelect\nCase\u003c/code\u003e as belonging to an outer statement. Therefore nested \u003ccode\u003eSelect Case\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eSelect Case\u003c/code\u003e statements, but if you cannot, then consider\nmoving the inner \u003ccode\u003eSelect Case\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo(A As Integer, B As Integer)\n    Select Case A\n        Case 0\n            \u0027 ...\n        Case 1\n            Select Case B   \u0027 Noncompliant; nested Select Case\n                Case 2\n                    \u0027 ...\n                Case 3\n                    \u0027 ...\n                Case 4\n                    \u0027 ...\n                Case Else\n                    \u0027 ...\n            End Select\n        Case 2\n            \u0027 ...\n        Case Else\n            \u0027 ...\n    End Select\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo(A As Integer, B As Integer)\n    Select Case A\n        Case 0\n            \u0027 ...\n        Case 1\n            HandleB(B)\n        Case 2\n            \u0027 ...\n        Case Else\n            \u0027 ...\n    End Select\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eNested \u003ccode\u003eSelect Case\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eSelect\nCase\u003c/code\u003e as belonging to an outer statement. Therefore nested \u003ccode\u003eSelect Case\u003c/code\u003e statements should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eSelect Case\u003c/code\u003e statements, but if you cannot, then consider\nmoving the inner \u003ccode\u003eSelect Case\u003c/code\u003e to another function.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo(A As Integer, B As Integer)\n    Select Case A\n        Case 0\n            \u0027 ...\n        Case 1\n            Select Case B   \u0027 Noncompliant; nested Select Case\n                Case 2\n                    \u0027 ...\n                Case 3\n                    \u0027 ...\n                Case 4\n                    \u0027 ...\n                Case Else\n                    \u0027 ...\n            End Select\n        Case 2\n            \u0027 ...\n        Case Else\n            \u0027 ...\n    End Select\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Sub Foo(A As Integer, B As Integer)\n    Select Case A\n        Case 0\n            \u0027 ...\n        Case 1\n            HandleB(B)\n        Case 2\n            \u0027 ...\n        Case Else\n            \u0027 ...\n    End Select\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1944",
    "name": "Invalid casts should be avoided",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA cast is an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eexplicit\nconversion\u003c/a\u003e, which is a way to tell the compiler the intent to convert from one type to another.\u003c/p\u003e\n\u003cp\u003eIn Visual Basic, there are two explicit conversion operators:\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub Method(Value As Object)\n    Dim i As Integer\n    i \u003d DirectCast(Value, Integer)  \u0027 Direct casting from object holding an integer type to Integer\n    i \u003d CType(Value, Integer)       \u0027 Conversion from the underlying type to Integer\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eIn most cases, the compiler will be able to catch invalid casts between incompatible value types or reference types.\u003c/p\u003e\n\u003cp\u003eHowever, the compiler will not be able to detect invalid casts to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/interfaces/\"\u003einterfaces\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInvalid casts will lead to unexpected behaviors or runtime errors such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported if the interface has no implementing class in the assembly.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo prevent an \u003ccode\u003eInvalidCastException\u003c/code\u003e from raising during an explicit conversion, it is recommended to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/trycast-operator\"\u003e\u003ccode\u003eTryCast\u003c/code\u003e operator\u003c/a\u003e. When the\nconversion is not possible, the \u003ccode\u003eTryCast\u003c/code\u003e operator returns \u003ccode\u003eNothing\u003c/code\u003e and will never raise an exception.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Interface IMyInterface\nEnd Interface\n\nPublic Class Implementer\n    Implements IMyInterface\nEnd Class\n\nPublic Class AnotherClass\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim Another As New AnotherClass\n        Dim x As IMyInterface \u003d DirectCast(Another, IMyInterface)   \u0027 Noncompliant: InvalidCastException is being thrown\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Interface IMyInterface\nEnd Interface\n\nPublic Class Implementer\n    Implements IMyInterface\nEnd Class\n\nPublic Class AnotherClass\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim Another As New AnotherClass\n        Dim x \u003d TryCast(Another, IMyInterface)                      \u0027 Compliant: but will always be Nothing\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/type-conversions\"\u003eType\n  Conversions in Visual Basic\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eImplicit and Explicit Conversions in Visual Basic\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type\"\u003eHow to: Convert an Object to Another Type in Visual Basic\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/directcast-operator\"\u003e\u003ccode\u003eDirectCast\u003c/code\u003e\n  operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/functions/ctype-function\"\u003e\u003ccode\u003eCType\u003c/code\u003e function\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/trycast-operator\"\u003e\u003ccode\u003eTryCast\u003c/code\u003e operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/588\"\u003eCWE-588 - Attempt to Access Child of a Non-structure Pointer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704\"\u003eCWE-704 - Incorrect Type Conversion or Cast\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA cast is an \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eexplicit\nconversion\u003c/a\u003e, which is a way to tell the compiler the intent to convert from one type to another.\u003c/p\u003e\n\u003cp\u003eIn Visual Basic, there are two explicit conversion operators:\u003c/p\u003e\n\u003cpre\u003e\nPublic Sub Method(Value As Object)\n    Dim i As Integer\n    i \u003d DirectCast(Value, Integer)  \u0027 Direct casting from object holding an integer type to Integer\n    i \u003d CType(Value, Integer)       \u0027 Conversion from the underlying type to Integer\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eIn most cases, the compiler will be able to catch invalid casts between incompatible value types or reference types.\u003c/p\u003e\n\u003cp\u003eHowever, the compiler will not be able to detect invalid casts to \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/interfaces/\"\u003einterfaces\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eInvalid casts will lead to unexpected behaviors or runtime errors such as \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.invalidcastexception\"\u003eInvalidCastException\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eNo issue is reported if the interface has no implementing class in the assembly.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo prevent an \u003ccode\u003eInvalidCastException\u003c/code\u003e from raising during an explicit conversion, it is recommended to use the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/trycast-operator\"\u003e\u003ccode\u003eTryCast\u003c/code\u003e operator\u003c/a\u003e. When the\nconversion is not possible, the \u003ccode\u003eTryCast\u003c/code\u003e operator returns \u003ccode\u003eNothing\u003c/code\u003e and will never raise an exception.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Interface IMyInterface\nEnd Interface\n\nPublic Class Implementer\n    Implements IMyInterface\nEnd Class\n\nPublic Class AnotherClass\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim Another As New AnotherClass\n        Dim x As IMyInterface \u003d DirectCast(Another, IMyInterface)   \u0027 Noncompliant: InvalidCastException is being thrown\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Interface IMyInterface\nEnd Interface\n\nPublic Class Implementer\n    Implements IMyInterface\nEnd Class\n\nPublic Class AnotherClass\nEnd Class\n\nModule Program\n    Sub Main()\n        Dim Another As New AnotherClass\n        Dim x \u003d TryCast(Another, IMyInterface)                      \u0027 Compliant: but will always be Nothing\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/type-conversions\"\u003eType\n  Conversions in Visual Basic\u003c/a\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions\"\u003eImplicit and Explicit Conversions in Visual Basic\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type\"\u003eHow to: Convert an Object to Another Type in Visual Basic\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/directcast-operator\"\u003e\u003ccode\u003eDirectCast\u003c/code\u003e\n  operator\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/functions/ctype-function\"\u003e\u003ccode\u003eCType\u003c/code\u003e function\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/trycast-operator\"\u003e\u003ccode\u003eTryCast\u003c/code\u003e operator\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/588\"\u003eCWE-588 - Attempt to Access Child of a Non-structure Pointer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704\"\u003eCWE-704 - Incorrect Type Conversion or Cast\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3329",
    "name": "Cipher Block Chaining IVs should be unpredictable",
    "defaultSeverity": "CRITICAL",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).\u003c/p\u003e\n\u003cp\u003eIf the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, a company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e\n\u003ch2\u003eHow to fix it in .NET\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.IO\nImports System.Security.Cryptography\n\nPublic Sub Encrypt(key As Byte(), dataToEncrypt As Byte(), target As MemoryStream)\n    Dim aes \u003d New AesCryptoServiceProvider()\n\n    Dim iv \u003d New Byte() {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n    Dim encryptor \u003d aes.CreateEncryptor(key, iv) \u0027 Noncompliant\n\n    Dim cryptoStream \u003d New CryptoStream(target, encryptor, CryptoStreamMode.Write)\n    Dim swEncrypt \u003d New StreamWriter(cryptoStream)\n\n    swEncrypt.Write(dataToEncrypt)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eIn this example, the code implicitly uses a number generator that is considered \u003cstrong\u003estrong\u003c/strong\u003e, thanks to \u003ccode\u003eaes.IV\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.IO\nImports System.Security.Cryptography\n\nPublic Sub Encrypt(key As Byte(), dataToEncrypt As Byte(), target As MemoryStream)\n    Dim aes \u003d New AesCryptoServiceProvider()\n\n    Dim encryptor \u003d aes.CreateEncryptor(key, aes.IV)\n\n    Dim cryptoStream \u003d New CryptoStream(target, encryptor, CryptoStreamMode.Write)\n    Dim swEncrypt \u003d New StreamWriter(cryptoStream)\n\n    swEncrypt.Write(dataToEncrypt)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse unique IVs\u003c/h4\u003e\n\u003cp\u003eTo ensure high security, initialization vectors must meet two important criteria:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e IVs must be unique for each encryption operation. \u003c/li\u003e\n  \u003cli\u003e For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.\u003c/p\u003e\n\u003cp\u003eIn the previous non-compliant example, the problem is not that the IV is hard-coded.\u003cbr\u003e It is that the same IV is used for multiple encryption\nattempts.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/329\"\u003eCWE-329 - Not Using an Unpredictable IV with CBC Mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\"\u003eNIST, SP-800-38A\u003c/a\u003e - Recommendation for Block Cipher\n  Modes of Operation \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eEncryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Confidentiality, privacy, and intellectual property protection \u003c/li\u003e\n  \u003cli\u003e Security during transmission or on storage devices \u003c/li\u003e\n  \u003cli\u003e Data integrity, general trust, and authentication \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen selecting encryption algorithms, tools, or combinations, you should also consider two things:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e No encryption is unbreakable. \u003c/li\u003e\n  \u003cli\u003e The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).\u003c/p\u003e\n\u003cp\u003eIf the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAfter retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.\u003c/p\u003e\n\u003cp\u003eDepending on the recovered data, the impact may vary.\u003c/p\u003e\n\u003cp\u003eBelow are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.\u003c/p\u003e\n\u003ch4\u003eAdditional attack surface\u003c/h4\u003e\n\u003cp\u003eBy modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.\u003cbr\u003e Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.\u003c/p\u003e\n\u003ch4\u003eBreach of confidentiality and privacy\u003c/h4\u003e\n\u003cp\u003eWhen encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.\u003c/p\u003e\n\u003cp\u003eIn this scenario, a company, its employees, users, and partners could be seriously affected.\u003c/p\u003e\n\u003cp\u003eThe impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organization’s ability to protect their sensitive data.\u003c/p\u003e\n\u003ch4\u003eLegal and compliance issues\u003c/h4\u003e\n\u003cp\u003eIn many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nImports System.IO\nImports System.Security.Cryptography\n\nPublic Sub Encrypt(key As Byte(), dataToEncrypt As Byte(), target As MemoryStream)\n    Dim aes \u003d New AesCryptoServiceProvider()\n\n    Dim iv \u003d New Byte() {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n    Dim encryptor \u003d aes.CreateEncryptor(key, iv) \u0027 Noncompliant\n\n    Dim cryptoStream \u003d New CryptoStream(target, encryptor, CryptoStreamMode.Write)\n    Dim swEncrypt \u003d New StreamWriter(cryptoStream)\n\n    swEncrypt.Write(dataToEncrypt)\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cp\u003eIn this example, the code implicitly uses a number generator that is considered \u003cstrong\u003estrong\u003c/strong\u003e, thanks to \u003ccode\u003eaes.IV\u003c/code\u003e.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nImports System.IO\nImports System.Security.Cryptography\n\nPublic Sub Encrypt(key As Byte(), dataToEncrypt As Byte(), target As MemoryStream)\n    Dim aes \u003d New AesCryptoServiceProvider()\n\n    Dim encryptor \u003d aes.CreateEncryptor(key, aes.IV)\n\n    Dim cryptoStream \u003d New CryptoStream(target, encryptor, CryptoStreamMode.Write)\n    Dim swEncrypt \u003d New StreamWriter(cryptoStream)\n\n    swEncrypt.Write(dataToEncrypt)\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eHow does this work?\u003c/h3\u003e\n\u003ch4\u003eUse unique IVs\u003c/h4\u003e\n\u003cp\u003eTo ensure high security, initialization vectors must meet two important criteria:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e IVs must be unique for each encryption operation. \u003c/li\u003e\n  \u003cli\u003e For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.\u003c/p\u003e\n\u003cp\u003eIn the previous non-compliant example, the problem is not that the IV is hard-coded.\u003cbr\u003e It is that the same IV is used for multiple encryption\nattempts.\u003c/p\u003e",
        "context": {
          "key": "_net",
          "displayName": ".NET"
        }
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\u003eTop 10 2021 Category A2 - Cryptographic Failures\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eTop 10 2017 Category A3 - Sensitive Data\n  Exposure\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\"\u003eMobile AppSec\n  Verification Standard - Cryptography Requirements\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e OWASP - \u003ca href\u003d\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\"\u003eMobile Top 10 2016 Category M5 -\n  Insufficient Cryptography\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/329\"\u003eCWE-329 - Not Using an Unpredictable IV with CBC Mode\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\"\u003eNIST, SP-800-38A\u003c/a\u003e - Recommendation for Block Cipher\n  Modes of Operation \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2352",
    "name": "Indexed properties with more than one parameter should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIndexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be\nviolated, and refactoring the property into a method is preferable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) \u0027 Noncompliant\n        Get\n            Return a + b\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Function Sum(ByVal a As Integer, ByVal b As Integer)          \u0027 Compliant\n        Return a + b\n    End Function\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIndexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be\nviolated, and refactoring the property into a method is preferable.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) \u0027 Noncompliant\n        Get\n            Return a + b\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Function Sum(ByVal a As Integer, ByVal b As Integer)          \u0027 Compliant\n        Return a + b\n    End Function\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2354",
    "name": "Line continuations should not be used",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "FORMATTED",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo improve the code readability, the explicit line continuation character, \u003ccode\u003e_\u003c/code\u003e, should not be used. Instead, it is better to break lines\nafter an operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        \u0027 Noncompliant\n        Console.WriteLine(\"Hello\" _\n                          \u0026amp; \"world\")\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n\n        Console.WriteLine(\"Hello\" \u0026amp;\n                          \"world\")\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo improve the code readability, the explicit line continuation character, \u003ccode\u003e_\u003c/code\u003e, should not be used. Instead, it is better to break lines\nafter an operator.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        \u0027 Noncompliant\n        Console.WriteLine(\"Hello\" _\n                          \u0026amp; \"world\")\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n\n        Console.WriteLine(\"Hello\" \u0026amp;\n                          \"world\")\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2353",
    "name": "Indexed properties should be named \"Item\"",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for\nexample \u003ccode\u003eSystem.String.Chars(System.Int32)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim array \u003d {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Foo(ByVal index As Integer)  \u0027 Noncompliant\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim array \u003d {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Item(ByVal index As Integer)\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for\nexample \u003ccode\u003eSystem.String.Chars(System.Int32)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim array \u003d {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Foo(ByVal index As Integer)  \u0027 Noncompliant\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Dim array \u003d {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Item(ByVal index As Integer)\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2355",
    "name": "Array literals should be used instead of array creation expressions",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eArray literals are more compact than array creation expressions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d New String() {\"a\", \"b\", \"c\"} \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d {\"a\", \"b\", \"c\"}              \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eArray literals are more compact than array creation expressions.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d New String() {\"a\", \"b\", \"c\"} \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim foo \u003d {\"a\", \"b\", \"c\"}              \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2234",
    "name": "Arguments should be passed in the same order as the procedure parameters",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling a procedure with argument variables whose names match the procedure parameter names but in a different order can cause confusion. It could\nindicate a mistake in the arguments\u0027 order, leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function Divide(divisor As Integer, dividend As Integer) As Double\n    Return divisor / dividend\nEnd Function\n\nPublic Sub DoTheThing()\n    Dim divisor \u003d 15\n    Dim dividend \u003d 5\n\n    Dim result \u003d Divide(dividend, divisor)  \u0027 Noncompliant: arguments\u0027 order doesn\u0027t match their respective parameter names\n    \u0027...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eHowever, matching the procedure parameters\u0027 order contributes to clearer and more readable code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function Divide(divisor As Integer, dividend As Integer) As Double\n    Return divisor / dividend\nEnd Function\n\nPublic Sub DoTheThing()\n    Dim divisor \u003d 15\n    Dim dividend \u003d 5\n\n    Dim result \u003d Divide(divisor, dividend) \u0027 Compliant\n    \u0027...\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling a procedure with argument variables whose names match the procedure parameter names but in a different order can cause confusion. It could\nindicate a mistake in the arguments\u0027 order, leading to unexpected results.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Function Divide(divisor As Integer, dividend As Integer) As Double\n    Return divisor / dividend\nEnd Function\n\nPublic Sub DoTheThing()\n    Dim divisor \u003d 15\n    Dim dividend \u003d 5\n\n    Dim result \u003d Divide(dividend, divisor)  \u0027 Noncompliant: arguments\u0027 order doesn\u0027t match their respective parameter names\n    \u0027...\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eHowever, matching the procedure parameters\u0027 order contributes to clearer and more readable code:\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Function Divide(divisor As Integer, dividend As Integer) As Double\n    Return divisor / dividend\nEnd Function\n\nPublic Sub DoTheThing()\n    Dim divisor \u003d 15\n    Dim dividend \u003d 5\n\n    Dim result \u003d Divide(divisor, dividend) \u0027 Compliant\n    \u0027...\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1147",
    "name": "\"End\" statements should not be used",
    "defaultSeverity": "BLOCKER",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eEnd\u003c/code\u003e statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without\nexecuting \u003ccode\u003eDispose\u003c/code\u003e or \u003ccode\u003eFinalize\u003c/code\u003e methods, or executing \u003ccode\u003eFinally\u003c/code\u003e blocks. Therefore, it should be avoided.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Print(ByVal str As String)\n       Try\n            ...\n            End       \u0027 Noncompliant\n        Finally\n            \u0027 do something important here\n            ...\n        End Try\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eEnd\u003c/code\u003e statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without\nexecuting \u003ccode\u003eDispose\u003c/code\u003e or \u003ccode\u003eFinalize\u003c/code\u003e methods, or executing \u003ccode\u003eFinally\u003c/code\u003e blocks. Therefore, it should be avoided.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Print(ByVal str As String)\n       Try\n            ...\n            End       \u0027 Noncompliant\n        Finally\n            \u0027 do something important here\n            ...\n        End Try\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2358",
    "name": "\"IsNot\" should be used instead of \"Not ... Is ...\"",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e... IsNot ...\u003c/code\u003e syntax is more compact and more readable than the \u003ccode\u003eNot ... Is ...\u003c/code\u003e syntax.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim a \u003d Not \"a\" Is Nothing \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim a \u003d \"a\" IsNot Nothing  \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe \u003ccode\u003e... IsNot ...\u003c/code\u003e syntax is more compact and more readable than the \u003ccode\u003eNot ... Is ...\u003c/code\u003e syntax.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim a \u003d Not \"a\" Is Nothing \u0027 Noncompliant\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim a \u003d \"a\" IsNot Nothing  \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "clumsy"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1940",
    "name": "Boolean checks should not be inverted",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf Not (a \u003d 2) Then  // Noncompliant\nDim b as Boolean \u003d Not (i \u0026lt; 10)  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf a \u0026lt;\u0026gt; 2 Then\nDim b as Boolean \u003d i \u0026gt;\u003d 10\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nIf Not (a \u003d 2) Then  // Noncompliant\nDim b as Boolean \u003d Not (i \u0026lt; 10)  // Noncompliant\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nIf a \u0026lt;\u0026gt; 2 Then\nDim b as Boolean \u003d i \u0026gt;\u003d 10\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2357",
    "name": "Fields should be private",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "MODULAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eFields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Foo \u003d 42          \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Property Foo \u003d 42 \u0027 Compliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eShared\u003c/code\u003e and \u003ccode\u003eConst\u003c/code\u003e fields are ignored.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eFields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Foo \u003d 42          \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Public Property Foo \u003d 42 \u0027 Compliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eShared\u003c/code\u003e and \u003ccode\u003eConst\u003c/code\u003e fields are ignored.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6145",
    "name": "\"Option Strict\" should be enabled",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere are several compilations options available for Visual Basic source code and \u003ccode\u003eOption Strict\u003c/code\u003e defines compiler behavior for implicit\ndata type conversions. Specifying \u003ccode\u003eOption Strict Off\u003c/code\u003e will allow:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Implicit narrowing conversions \u003c/li\u003e\n  \u003cli\u003e Late binding \u003c/li\u003e\n  \u003cli\u003e Implicit typing that results in an \u003ccode\u003eObject\u003c/code\u003e type \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis behavior can lead to unexpected runtime errors due to type mismatch or missing members.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eOption Strict\u003c/code\u003e can be set in project properties or overridden in individual source files.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nOption Strict Off    \u0027 Noncompliant\n\nPublic Class KnownType\n\n    Public ReadOnly Property Name As String\n\nEnd Class\n\nPublic Module MainMod\n\n    Public Function DoSomething(Arg) As String  \u0027 Type for \"Arg\" argument is not defined.\n        Dim Item As KnownType \u003d Arg             \u0027 Implicit narrowing conversion doesn\u0027t enforce \"Arg\" to be of type \"KnownType\"\n        Return Arg.Title                        \u0027 \"Title\" might not exist in \"Arg\"\n    End Function\n\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nOption Strict On\n\nPublic Class KnownType\n\n    Public ReadOnly Property Name As String\n\nEnd Class\n\nPublic Module MainMod\n\n    Public Function DoSomething(Arg As KnownType) As String\n        Dim Item As KnownType \u003d Arg\n        Return Arg.Name\n    End Function\n\nEnd Module\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/option-strict-statement\"\u003eVisual Basic documentation\n  - Option Strict Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere are several compilations options available for Visual Basic source code and \u003ccode\u003eOption Strict\u003c/code\u003e defines compiler behavior for implicit\ndata type conversions. Specifying \u003ccode\u003eOption Strict Off\u003c/code\u003e will allow:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Implicit narrowing conversions \u003c/li\u003e\n  \u003cli\u003e Late binding \u003c/li\u003e\n  \u003cli\u003e Implicit typing that results in an \u003ccode\u003eObject\u003c/code\u003e type \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis behavior can lead to unexpected runtime errors due to type mismatch or missing members.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eOption Strict\u003c/code\u003e can be set in project properties or overridden in individual source files.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nOption Strict Off    \u0027 Noncompliant\n\nPublic Class KnownType\n\n    Public ReadOnly Property Name As String\n\nEnd Class\n\nPublic Module MainMod\n\n    Public Function DoSomething(Arg) As String  \u0027 Type for \"Arg\" argument is not defined.\n        Dim Item As KnownType \u003d Arg             \u0027 Implicit narrowing conversion doesn\u0027t enforce \"Arg\" to be of type \"KnownType\"\n        Return Arg.Title                        \u0027 \"Title\" might not exist in \"Arg\"\n    End Function\n\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nOption Strict On\n\nPublic Class KnownType\n\n    Public ReadOnly Property Name As String\n\nEnd Class\n\nPublic Module MainMod\n\n    Public Function DoSomething(Arg As KnownType) As String\n        Dim Item As KnownType \u003d Arg\n        Return Arg.Name\n    End Function\n\nEnd Module\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/option-strict-statement\"\u003eVisual Basic documentation\n  - Option Strict Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2349",
    "name": "Event names should not have \"Before\" or \"After\" as a prefix or suffix",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\"After\" and \"Before\" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to\nevents using the present and past tense.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event BeforeClose() \u0027 Noncompliant\n    Event AfterClose()  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event Closing()     \u0027 Compliant\n    Event Closed()      \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\"After\" and \"Before\" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to\nevents using the present and past tense.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event BeforeClose() \u0027 Noncompliant\n    Event AfterClose()  \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event Closing()     \u0027 Compliant\n    Event Closed()      \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2348",
    "name": "Events should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Event fooEvent() \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event FooEvent() \u0027 Compliant\nEnd Class\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nClass Foo\n    Event fooEvent() \u0027 Noncompliant\nEnd Class\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nClass Foo\n    Event FooEvent() \u0027 Compliant\nEnd Class\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the event names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2583",
    "name": "Conditionally executed code should be reachable",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eConditional expressions which are always \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e can lead to \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eunreachable code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case below, the call of \u003ccode\u003eDispose()\u003c/code\u003e never happens.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d False\n\nIf a Then\n    Dispose() \u0027 Never reached\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nConst debug \u003d False\n\u0027...\nIf debug Then\n    \u0027 Print something\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eThe conditions should be reviewed to decide whether:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to update the condition or \u003c/li\u003e\n  \u003cli\u003e to remove the condition. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean)\n    Dim a \u003d False\n    If a Then                   \u0027 Noncompliant: The true branch is never reached\n        DoSomething()           \u0027 Never reached\n    End If\n\n    If Not a OrElse b Then      \u0027 Noncompliant: \"not a\" is always \"True\" and the false branch is never reached\n        DoSomething()\n    Else\n        DoSomethingElse()       \u0027 Never reached\n    End If\n\n    Dim c \u003d \"xxx\"\n    Dim res \u003d If(c, \"value\")    \u0027 Noncompliant: d is always not Nothing, \"value\" is never used\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean)\n    Dim a \u003d False\n    If Foo(a) Then             \u0027 Condition was updated\n        DoSomething()\n    End If\n\n    If b Then                  \u0027 Parts of the condition were removed.\n        DoSomething()\n    Else\n        DoSomethingElse()\n    End If\n\n    Dim c \u003d \"xxx\"\n    Dim res \u003d c                \u0027 \"value\" was removed\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003e?.\n  and ?() null-conditional operators (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/if-operator#if-operator-called-with-two-arguments\"\u003eIf\n  operator called with two arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eConditional expressions which are always \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e can lead to \u003ca\nhref\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eunreachable code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn the case below, the call of \u003ccode\u003eDispose()\u003c/code\u003e never happens.\u003c/p\u003e\n\u003cpre\u003e\nDim a \u003d False\n\nIf a Then\n    Dispose() \u0027 Never reached\nEnd If\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003econst bool\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nConst debug \u003d False\n\u0027...\nIf debug Then\n    \u0027 Print something\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eThe conditions should be reviewed to decide whether:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e to update the condition or \u003c/li\u003e\n  \u003cli\u003e to remove the condition. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean)\n    Dim a \u003d False\n    If a Then                   \u0027 Noncompliant: The true branch is never reached\n        DoSomething()           \u0027 Never reached\n    End If\n\n    If Not a OrElse b Then      \u0027 Noncompliant: \"not a\" is always \"True\" and the false branch is never reached\n        DoSomething()\n    Else\n        DoSomethingElse()       \u0027 Never reached\n    End If\n\n    Dim c \u003d \"xxx\"\n    Dim res \u003d If(c, \"value\")    \u0027 Noncompliant: d is always not Nothing, \"value\" is never used\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean)\n    Dim a \u003d False\n    If Foo(a) Then             \u0027 Condition was updated\n        DoSomething()\n    End If\n\n    If b Then                  \u0027 Parts of the condition were removed.\n        DoSomething()\n    Else\n        DoSomethingElse()\n    End If\n\n    Dim c \u003d \"xxx\"\n    Dim res \u003d c                \u0027 \"value\" was removed\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Wikipedia - \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unreachable_code\"\u003eUnreachable code\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003e?.\n  and ?() null-conditional operators (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/if-operator#if-operator-called-with-two-arguments\"\u003eIf\n  operator called with two arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "pitfall",
      "suspicious",
      "unused"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2340",
    "name": "\"Do\" loops should not be used without a \"While\" or \"Until\" condition",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eA \u003ccode\u003eDo ... Loop\u003c/code\u003e without a \u003ccode\u003eWhile\u003c/code\u003e or \u003ccode\u003eUntil\u003c/code\u003e condition must be terminated by an unstructured \u003ccode\u003eExit Do\u003c/code\u003e\nstatement. It is safer and more readable to use structured loops instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim i \u003d 1\n\n        Do                        \u0027 Non-Compliant\n            If i \u003d 10 Then\n                Exit Do\n            End If\n\n            Console.WriteLine(i)\n\n            i \u003d i + 1\n        Loop\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        For i \u003d 1 To 9            \u0027 Compliant\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eA \u003ccode\u003eDo ... Loop\u003c/code\u003e without a \u003ccode\u003eWhile\u003c/code\u003e or \u003ccode\u003eUntil\u003c/code\u003e condition must be terminated by an unstructured \u003ccode\u003eExit Do\u003c/code\u003e\nstatement. It is safer and more readable to use structured loops instead.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        Dim i \u003d 1\n\n        Do                        \u0027 Non-Compliant\n            If i \u003d 10 Then\n                Exit Do\n            End If\n\n            Console.WriteLine(i)\n\n            i \u003d i + 1\n        Loop\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub Main()\n        For i \u003d 1 To 9            \u0027 Compliant\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "pitfall"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2343",
    "name": "Enumeration values should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nEnum Foo\n    fooValue   \u0027 Noncompliant\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nEnum Foo\n    FooValue   \u0027 Compliant\nEnd Enum\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower cased, e.g. GetHtml \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nEnum Foo\n    fooValue   \u0027 Noncompliant\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nEnum Foo\n    FooValue   \u0027 Compliant\nEnd Enum\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the enumeration value names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S6146",
    "name": "\"Option Explicit\" should be enabled",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThere are several compilations options available for Visual Basic source code and \u003ccode\u003eOption Explicit\u003c/code\u003e defines compiler behavior for\nimplicit variable declarations. Specifying \u003ccode\u003eOption Explicit Off\u003c/code\u003e will allow creating a variable by it’s first usage. This behavior can lead\nto unexpected runtime errors due to typos in variable names.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eOption Explicit\u003c/code\u003e can be set in project properties or overridden in individual source files.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nOption Explicit Off \u0027 Noncompliant\n\nModule MainMod\n\n    Public Sub DoSomething(First As String, Second As String)\n        Parameter \u003d Fist        \u0027 New local variable \"Fist\" is created and assigned to new local variable \"Parameter\" instead of \"First\" argument.\n        DoSomething(Parameter)\n        Parametr \u003d Second       \u0027 \"Second\" argument is assigned to newly created variable \"Parametr\" instead of intended \"Parameter\".\n        DoSomething(Parameter)  \u0027 Value of \"Parameter\" is always Nothing\n    End Sub\n\n    Private Sub DoSomething(Parameter As String)\n        \u0027 ...\n    End Sub\n\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nOption Explicit On\n\nModule MainMod\n\n    Public Sub DoSomething(First As String, Second As String)\n        Dim Parameter As String \u003d First\n        DoSomething(Parameter)\n        Parameter \u003d Second\n        DoSomething(Parameter)\n    End Sub\n\n    Private Sub DoSomething(Parameter As String)\n        \u0027 ...\n    End Sub\n\nEnd Module\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/option-explicit-statement\"\u003eVisual Basic\n  documentation - Option Explicit Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThere are several compilations options available for Visual Basic source code and \u003ccode\u003eOption Explicit\u003c/code\u003e defines compiler behavior for\nimplicit variable declarations. Specifying \u003ccode\u003eOption Explicit Off\u003c/code\u003e will allow creating a variable by it’s first usage. This behavior can lead\nto unexpected runtime errors due to typos in variable names.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eOption Explicit\u003c/code\u003e can be set in project properties or overridden in individual source files.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nOption Explicit Off \u0027 Noncompliant\n\nModule MainMod\n\n    Public Sub DoSomething(First As String, Second As String)\n        Parameter \u003d Fist        \u0027 New local variable \"Fist\" is created and assigned to new local variable \"Parameter\" instead of \"First\" argument.\n        DoSomething(Parameter)\n        Parametr \u003d Second       \u0027 \"Second\" argument is assigned to newly created variable \"Parametr\" instead of intended \"Parameter\".\n        DoSomething(Parameter)  \u0027 Value of \"Parameter\" is always Nothing\n    End Sub\n\n    Private Sub DoSomething(Parameter As String)\n        \u0027 ...\n    End Sub\n\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nOption Explicit On\n\nModule MainMod\n\n    Public Sub DoSomething(First As String, Second As String)\n        Dim Parameter As String \u003d First\n        DoSomething(Parameter)\n        Parameter \u003d Second\n        DoSomething(Parameter)\n    End Sub\n\n    Private Sub DoSomething(Parameter As String)\n        \u0027 ...\n    End Sub\n\nEnd Module\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/option-explicit-statement\"\u003eVisual Basic\n  documentation - Option Explicit Statement\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "bad-practice"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2222",
    "name": "Locks should be released on all paths",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eTo prevent potential \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e in an application, it is crucial to release any locks that are\nacquired within a method along all possible execution paths.\u003c/p\u003e\n\u003cp\u003eFailing to release locks properly can lead to potential deadlocks, where the lock might not be released, causing issues in the application.\u003c/p\u003e\n\u003cp\u003eThis rule specifically focuses on tracking the following types from the \u003ccode\u003eSystem.Threading\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor\"\u003e\u003ccode\u003eMonitor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex\"\u003e\u003ccode\u003eMutex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlock\"\u003e\u003ccode\u003eReaderWriterLock\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim\"\u003e\u003ccode\u003eReaderWriterLockSlim\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.spinlock\"\u003e\u003ccode\u003eSpinLock\u003c/code\u003e \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn issue is reported when a lock is acquired within a method but not released on all paths.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the lock is never released within the method, no issue is raised, assuming that the callers will handle the release.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eTo make sure that a lock is always released correctly, you can follow one of these two methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003e\u003ccode\u003eSyncLock\u003c/code\u003e\u003c/a\u003e statement\n  with your lock object. \u003c/li\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement\"\u003e\u003ccode\u003eTry-Finally\u003c/code\u003e\u003c/a\u003e\n  statement and put the release of your lock object within a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement#finally-block\"\u003e\u003ccode\u003eFinally\u003c/code\u003e\u003c/a\u003e block. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Example\n    Private obj As Object \u003d New Object()\n\n    Public Sub DoSomethingWithMonitor()\n        Monitor.Enter(obj) \u0027 Noncompliant: not all paths release the lock\n\n        If IsInitialized() Then\n            \u0027 ...\n            Monitor.Exit(obj)\n        End If\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Example\n    Private lockObj As ReaderWriterLockSlim \u003d New ReaderWriterLockSlim()\n\n    Public Sub DoSomethingWithReaderWriteLockSlim()\n        lockObj.EnterReadLock() \u0027 Noncompliant: not all paths release the lock\n        If IsInitialized() Then\n            \u0027 ...\n            lockObj.ExitReadLock()\n        End If\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Example\n    Private obj As Object \u003d New Object()\n\n    Public Sub DoSomethingWithMonitor()\n        SyncLock obj \u0027 Compliant: the lock will be released at the end of the SyncLock block\n            If IsInitialized() Then\n                \u0027 ...\n            End If\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nClass Example\n    Private lockObj As ReaderWriterLockSlim \u003d New ReaderWriterLockSlim()\n\n    Public Sub DoSomethingWithReaderWriteLockSlim()\n        lockObj.EnterReadLock() \u0027 Compliant: the lock will be released in the finally block\n\n        Try\n            If IsInitialized() Then\n                \u0027 ...\n            End If\n        Finally\n            lockObj.ExitReadLock()\n        End Try\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives#synchronization-of-access-to-a-shared-resource\"\u003eSynchronization of access to a shared resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003e\u003ccode\u003eSyncLock\u003c/code\u003e\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement#finally-block\"\u003e\u003ccode\u003eFinally\u003c/code\u003e block\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eTo prevent potential \u003ca href\u003d\"https://en.wikipedia.org/wiki/Deadlock\"\u003edeadlocks\u003c/a\u003e in an application, it is crucial to release any locks that are\nacquired within a method along all possible execution paths.\u003c/p\u003e\n\u003cp\u003eFailing to release locks properly can lead to potential deadlocks, where the lock might not be released, causing issues in the application.\u003c/p\u003e\n\u003cp\u003eThis rule specifically focuses on tracking the following types from the \u003ccode\u003eSystem.Threading\u003c/code\u003e namespace:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.monitor\"\u003e\u003ccode\u003eMonitor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.mutex\"\u003e\u003ccode\u003eMutex\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlock\"\u003e\u003ccode\u003eReaderWriterLock\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.readerwriterlockslim\"\u003e\u003ccode\u003eReaderWriterLockSlim\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.spinlock\"\u003e\u003ccode\u003eSpinLock\u003c/code\u003e \u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn issue is reported when a lock is acquired within a method but not released on all paths.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eIf the lock is never released within the method, no issue is raised, assuming that the callers will handle the release.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eTo make sure that a lock is always released correctly, you can follow one of these two methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003e\u003ccode\u003eSyncLock\u003c/code\u003e\u003c/a\u003e statement\n  with your lock object. \u003c/li\u003e\n  \u003cli\u003e Use a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement\"\u003e\u003ccode\u003eTry-Finally\u003c/code\u003e\u003c/a\u003e\n  statement and put the release of your lock object within a \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement#finally-block\"\u003e\u003ccode\u003eFinally\u003c/code\u003e\u003c/a\u003e block. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Example\n    Private obj As Object \u003d New Object()\n\n    Public Sub DoSomethingWithMonitor()\n        Monitor.Enter(obj) \u0027 Noncompliant: not all paths release the lock\n\n        If IsInitialized() Then\n            \u0027 ...\n            Monitor.Exit(obj)\n        End If\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"noncompliant\"\u003e\nClass Example\n    Private lockObj As ReaderWriterLockSlim \u003d New ReaderWriterLockSlim()\n\n    Public Sub DoSomethingWithReaderWriteLockSlim()\n        lockObj.EnterReadLock() \u0027 Noncompliant: not all paths release the lock\n        If IsInitialized() Then\n            \u0027 ...\n            lockObj.ExitReadLock()\n        End If\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nClass Example\n    Private obj As Object \u003d New Object()\n\n    Public Sub DoSomethingWithMonitor()\n        SyncLock obj \u0027 Compliant: the lock will be released at the end of the SyncLock block\n            If IsInitialized() Then\n                \u0027 ...\n            End If\n        End SyncLock\n    End Sub\nEnd Class\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"2\" data-diff-type\u003d\"compliant\"\u003e\nClass Example\n    Private lockObj As ReaderWriterLockSlim \u003d New ReaderWriterLockSlim()\n\n    Public Sub DoSomethingWithReaderWriteLockSlim()\n        lockObj.EnterReadLock() \u0027 Compliant: the lock will be released in the finally block\n\n        Try\n            If IsInitialized() Then\n                \u0027 ...\n            End If\n        Finally\n            lockObj.ExitReadLock()\n        End Try\n    End Sub\nEnd Class\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives#synchronization-of-access-to-a-shared-resource\"\u003eSynchronization of access to a shared resource\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/459\"\u003eCWE-459 - Incomplete Cleanup\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/synclock-statement\"\u003e\u003ccode\u003eSyncLock\u003c/code\u003e\n  statement\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/try-catch-finally-statement#finally-block\"\u003e\u003ccode\u003eFinally\u003c/code\u003e block\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "multi-threading"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S3431",
    "name": "\"[ExpectedException]\" should not be used",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIt should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with\nthe \u003ccode\u003eExpectedException\u003c/code\u003e attribute since an exception could be thrown from almost any line in the method.\u003c/p\u003e\n\u003cp\u003eThis rule detects MSTest and NUnit \u003ccode\u003eExpectedException\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\n\u0026lt;ExpectedException(GetType(ArgumentNullException))\u0026gt; \u0027 Noncompliant\nPublic Sub TestNullArg()\n  \u0027...\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub TestNullArg()\n    Dim CallFailed As Boolean \u003d False\n    Try\n    \u0027 ...\n    Catch ex As Exception\n        CallFailed \u003d true\n    End Try\n    Assert.IsTrue(CallFailed, \"Expected call to MyMethod to fail with ArgumentNullException\")\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub TestNullArg()\n    Assert.ThrowsException(Of ArgumentNullException)(Sub() ... )\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown.\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIt should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with\nthe \u003ccode\u003eExpectedException\u003c/code\u003e attribute since an exception could be thrown from almost any line in the method.\u003c/p\u003e\n\u003cp\u003eThis rule detects MSTest and NUnit \u003ccode\u003eExpectedException\u003c/code\u003e attribute.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\n\u0026lt;ExpectedException(GetType(ArgumentNullException))\u0026gt; \u0027 Noncompliant\nPublic Sub TestNullArg()\n  \u0027...\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub TestNullArg()\n    Dim CallFailed As Boolean \u003d False\n    Try\n    \u0027 ...\n    Catch ex As Exception\n        CallFailed \u003d true\n    End Try\n    Assert.IsTrue(CallFailed, \"Expected call to MyMethod to fail with ArgumentNullException\")\nEnd Sub\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;TestMethod\u0026gt;\nPublic Sub TestNullArg()\n    Assert.ThrowsException(Of ArgumentNullException)(Sub() ... )\nEnd Sub\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown.\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "tests"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2342",
    "name": "Enumeration types should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower case, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression for non-flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nPublic Enum foo \u0027 Noncompliant\n    FooValue \u003d 0\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eWith the default regular expression for flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nPublic Enum Option \u0027 Noncompliant\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Enum Foo\n    FooValue \u003d 0\nEnd Enum\n\u003c/pre\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nPublic Enum Options\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\nEnd Enum\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is the one recommended by Microsoft:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Pascal casing, starting with an upper case character, e.g. BackColor \u003c/li\u003e\n  \u003cli\u003e Short abbreviations of 2 letters can be capitalized, e.g. GetID \u003c/li\u003e\n  \u003cli\u003e Longer abbreviations need to be lower case, e.g. GetHtml \u003c/li\u003e\n  \u003cli\u003e If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression for non-flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nPublic Enum foo \u0027 Noncompliant\n    FooValue \u003d 0\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eWith the default regular expression for flags enums: \u003ccode\u003e^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nPublic Enum Option \u0027 Noncompliant\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nPublic Enum Foo\n    FooValue \u003d 0\nEnd Enum\n\u003c/pre\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nPublic Enum Options\n    None \u003d 0,\n    Option1 \u003d 1,\n    Option2 \u003d 2\nEnd Enum\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the enumeration type names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      },
      "flagsAttributeFormat": {
        "key": "flagsAttributeFormat",
        "name": "flagsAttributeFormat",
        "description": "Regular expression used to check the flags enumeration type names against.",
        "defaultValue": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
      "flagsAttributeFormat": "^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1133",
    "name": "Deprecated code should be removed",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CLEAR",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Obsolete\u0026gt; \u0027 Noncompliant\nSub Procedure()\nEnd Sub\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\n\u0026lt;Obsolete\u0026gt; \u0027 Noncompliant\nSub Procedure()\nEnd Sub\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "obsolete"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1134",
    "name": "Track uses of \"FIXME\" tags",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nFunction Divide(numerator As Integer, denominator As Integer) As Integer\n    Return numerator / denominator  \u0027 FIXME denominator value might be  0\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003cpre\u003e\nFunction Divide(numerator As Integer, denominator As Integer) As Integer\n    Return numerator / denominator  \u0027 FIXME denominator value might be  0\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2345",
    "name": "Flags enumerations should explicitly initialize all their members",
    "defaultSeverity": "MINOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eWhen you annotate an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum\u003c/a\u003e with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlags attribute\u003c/a\u003e, you must not rely on the values that are automatically\nset by the language to the \u003ccode\u003eEnum\u003c/code\u003e members, but you should define the enumeration constants in powers of two (1, 2, 4, 8, and so on).\nAutomatic value initialization will set the first member to zero and increment the value by one for each subsequent member. As a result, you won’t be\nable to use the enum members with bitwise operators.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe default initialization of \u003ccode\u003e0, 1, 2, 3, 4, …​\u003c/code\u003e matches \u003ccode\u003e0, 1, 2, 4, 8 …​\u003c/code\u003e in the first three values, so no issue is\nreported if the first three members of the enumeration are not initialized.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eDefine enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType    \u0027 Non-Compliant\n  None\n  Banana\n  Orange\n  Strawberry\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry \u003d FruitType.Banana Or FruitType.Strawberry\n    Console.WriteLine(bananaAndStrawberry.ToString()) \u0027 Will display only \"Strawberry\"\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType    \u0027 Compliant\n  None \u003d 0\n  Banana \u003d 1\n  Orange \u003d 2\n  Strawberry \u003d 4\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry \u003d FruitType.Banana Or FruitType.Strawberry\n    Console.WriteLine(bananaAndStrawberry.ToString()) \u0027 Will display \"Banana, Strawberry\"\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eWhen you annotate an \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum\u003c/a\u003e with the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlags attribute\u003c/a\u003e, you must not rely on the values that are automatically\nset by the language to the \u003ccode\u003eEnum\u003c/code\u003e members, but you should define the enumeration constants in powers of two (1, 2, 4, 8, and so on).\nAutomatic value initialization will set the first member to zero and increment the value by one for each subsequent member. As a result, you won’t be\nable to use the enum members with bitwise operators.\u003c/p\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThe default initialization of \u003ccode\u003e0, 1, 2, 3, 4, …​\u003c/code\u003e matches \u003ccode\u003e0, 1, 2, 4, 8 …​\u003c/code\u003e in the first three values, so no issue is\nreported if the first three members of the enumeration are not initialized.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eDefine enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType    \u0027 Non-Compliant\n  None\n  Banana\n  Orange\n  Strawberry\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry \u003d FruitType.Banana Or FruitType.Strawberry\n    Console.WriteLine(bananaAndStrawberry.ToString()) \u0027 Will display only \"Strawberry\"\n  End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType    \u0027 Compliant\n  None \u003d 0\n  Banana \u003d 1\n  Orange \u003d 2\n  Strawberry \u003d 4\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry \u003d FruitType.Banana Or FruitType.Strawberry\n    Console.WriteLine(bananaAndStrawberry.ToString()) \u0027 Will display \"Banana, Strawberry\"\n  End Sub\nEnd Module\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum\"\u003eEnum Class\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute Class\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S1135",
    "name": "Track uses of \"TODO\" tags",
    "defaultSeverity": "INFO",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "COMPLETE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub DoSomething()\n    \u0027 TODO\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eDevelopers often use \u003ccode\u003eTODO\u003c/code\u003e tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these \u003ccode\u003eTODO\u003c/code\u003e tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell\nclass aims to identify and address such unattended \u003ccode\u003eTODO\u003c/code\u003e tags to ensure a clean and maintainable codebase. This description will explore\nwhy this is a problem and how it can be fixed to improve the overall code quality.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eUnattended \u003ccode\u003eTODO\u003c/code\u003e tags in code can have significant implications for the development process and the overall codebase.\u003c/p\u003e\n\u003cp\u003eIncomplete Functionality: When developers leave \u003ccode\u003eTODO\u003c/code\u003e tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.\u003c/p\u003e\n\u003cp\u003eMissed Bug Fixes: If developers do not promptly address \u003ccode\u003eTODO\u003c/code\u003e tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.\u003c/p\u003e\n\u003cp\u003eImpact on Collaboration: In team-based development environments, unattended \u003ccode\u003eTODO\u003c/code\u003e tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.\u003c/p\u003e\n\u003cp\u003eCodebase Bloat: Accumulation of unattended \u003ccode\u003eTODO\u003c/code\u003e tags over time can clutter the codebase and make it difficult to distinguish between\nwork in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.\u003c/p\u003e\n\u003cp\u003eAddressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nSub DoSomething()\n    \u0027 TODO\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546\"\u003eCWE-546 - Suspicious Comment\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2344",
    "name": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eThe information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nEnum FooFlags \u0027 Noncompliant\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nEnum Foo      \u0027 Compliant\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\nEnd Enum\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eThe information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cpre\u003e\nEnum FooFlags \u0027 Noncompliant\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\nEnd Enum\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nEnum Foo      \u0027 Compliant\n    Foo \u003d 1\n    Bar \u003d 2\n    Baz \u003d 4\nEnd Enum\n\u003c/pre\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S5856",
    "name": "Regular expressions should be syntactically valid",
    "defaultSeverity": "CRITICAL",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003eRegular expressions\u003c/a\u003e have their own syntax that is\nunderstood by regular expression engines. Those engines will throw an exception at runtime if they are given a regular expression that does not\nconform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eescaped with backslashes\u003c/a\u003e when they\nare intended to be matched literally and references to capturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eNegative \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003elookaround\u003c/a\u003e\ngroups cannot be combined with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eRegexOptions.NonBacktracking\u003c/a\u003e. Such\ncombination would throw an exception during runtime.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub Regexes(Input As String)\n    Dim Rx As New Regex(\"[A\")                                                       \u0027 Noncompliant: unmatched \"[\"\n    Dim Match \u003d Regex.Match(Input, \"[A\")                                            \u0027 Noncompliant\n    Dim NegativeLookahead As New Regex(\"a(?!b)\", RegexOptions.NonBacktracking)      \u0027 Noncompliant: negative lookahead without backtracking\n    Dim NegativeLookbehind As New Regex(\"(?\u0026lt;!a)b\", RegexOptions.NonBacktracking)    \u0027 Noncompliant: negative lookbehind without backtracking\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub Regexes(Input As String)\n    Dim Rx As New Regex(\"[A-Z]\")\n    Dim Match \u003d Regex.Match(Input, \"[A-Z]\")\n    Dim NegativeLookahead As New Regex(\"a(?!b)\")\n    Dim NegativeLookbehind As New Regex(\"(?\u0026lt;!a)b\")\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003e.NET Regular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003eLookarounds\n  at a glance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eBacktracking in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eCharacter Escapes in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003e\u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003eRegular expressions\u003c/a\u003e have their own syntax that is\nunderstood by regular expression engines. Those engines will throw an exception at runtime if they are given a regular expression that does not\nconform to that syntax.\u003c/p\u003e\n\u003cp\u003eTo avoid syntax errors, special characters should be \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eescaped with backslashes\u003c/a\u003e when they\nare intended to be matched literally and references to capturing groups should use the correctly spelled name or number of the group.\u003c/p\u003e\n\u003cp\u003eNegative \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003elookaround\u003c/a\u003e\ngroups cannot be combined with \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eRegexOptions.NonBacktracking\u003c/a\u003e. Such\ncombination would throw an exception during runtime.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSub Regexes(Input As String)\n    Dim Rx As New Regex(\"[A\")                                                       \u0027 Noncompliant: unmatched \"[\"\n    Dim Match \u003d Regex.Match(Input, \"[A\")                                            \u0027 Noncompliant\n    Dim NegativeLookahead As New Regex(\"a(?!b)\", RegexOptions.NonBacktracking)      \u0027 Noncompliant: negative lookahead without backtracking\n    Dim NegativeLookbehind As New Regex(\"(?\u0026lt;!a)b\", RegexOptions.NonBacktracking)    \u0027 Noncompliant: negative lookbehind without backtracking\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nSub Regexes(Input As String)\n    Dim Rx As New Regex(\"[A-Z]\")\n    Dim Match \u003d Regex.Match(Input, \"[A-Z]\")\n    Dim NegativeLookahead As New Regex(\"a(?!b)\")\n    Dim NegativeLookbehind As New Regex(\"(?\u0026lt;!a)b\")\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\"\u003e.NET Regular expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference#lookarounds-at-a-glance\"\u003eLookarounds\n  at a glance\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions\"\u003eBacktracking in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-escapes-in-regular-expressions\"\u003eCharacter Escapes in Regular\n  Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "regex"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2347",
    "name": "Event handlers should comply with a naming convention",
    "defaultSeverity": "MINOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "IDENTIFIABLE",
    "defaultImpacts": {
      "MAINTAINABILITY": "LOW"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Either in Pascal case, i.e. starting with an upper case letter, e.g. OnMyButtonClicked \u003c/li\u003e\n  \u003cli\u003e Or, a subject, in Pascal or camel case, followed by an underscore followed by an event name, in Pascal case, e.g. btn1_Clicked \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvent handlers with a \u003ccode\u003ehandles\u003c/code\u003e clause and two-parameter methods with \u003ccode\u003eEventArgs\u003c/code\u003e second parameter are covered by this\nrule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub subject__SomeEvent() Handles X.SomeEvent   \u0027 Noncompliant - two underscores\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub subject_SomeEvent() Handles X.SomeEvent    \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular\nexpression.\u003c/p\u003e\n\u003cp\u003eThe default configuration is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Either in Pascal case, i.e. starting with an upper case letter, e.g. OnMyButtonClicked \u003c/li\u003e\n  \u003cli\u003e Or, a subject, in Pascal or camel case, followed by an underscore followed by an event name, in Pascal case, e.g. btn1_Clicked \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvent handlers with a \u003ccode\u003ehandles\u003c/code\u003e clause and two-parameter methods with \u003ccode\u003eEventArgs\u003c/code\u003e second parameter are covered by this\nrule.\u003c/p\u003e\n\u003ch3\u003eNoncompliant code example\u003c/h3\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nModule Module1\n    Sub subject__SomeEvent() Handles X.SomeEvent   \u0027 Noncompliant - two underscores\n    End Sub\nEnd Module\n\u003c/pre\u003e\n\u003ch3\u003eCompliant solution\u003c/h3\u003e\n\u003cpre\u003e\nModule Module1\n    Sub subject_SomeEvent() Handles X.SomeEvent    \u0027 Compliant\n    End Sub\nEnd Module\n\u003c/pre\u003e"
      }
    ],
    "params": {
      "format": {
        "key": "format",
        "name": "format",
        "description": "Regular expression used to check the even handler names against.",
        "defaultValue": "^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$",
        "type": "STRING",
        "multiple": false,
        "possibleValues": []
      }
    },
    "defaultParams": {
      "format": "^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$"
    },
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2589",
    "name": "Boolean expressions should not be gratuitous",
    "defaultSeverity": "MAJOR",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "MEDIUM"
    },
    "description": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule looks for operands of a boolean expression never changing the result of the expression. It also applies to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003enull conditional operator\u003c/a\u003e\nwhen one of the operands always evaluates to \u003ccode\u003eNothing\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nDim d As String \u003d Nothing\nDim v1 \u003d If(d, \"value\")\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003eConst bool\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nConst debug \u003d False\n\u0027...\nIf debug Then\n    \u0027 Print something\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean, ByVal c As Boolean)\n    Dim a \u003d True\n    If a Then                  \u0027 Noncompliant: \"a\" is always \"true\"\n        DoSomething()\n    End If\n\n    If b AndAlso a Then        \u0027 Noncompliant: \"a\" is always \"true\"\n        DoSomething()\n    End If\n\n    If c OrElse Not a Then     \u0027 Noncompliant: \"Not a\" is always \"false\"\n        DoSomething()\n    End If\n\n    Dim d As String \u003d Nothing\n    Dim v1 \u003d If(d, \"value\")    \u0027 Noncompliant: \"d\" is always Nothing and v1 is always \"value\".\n    Dim v2 \u003d If(s, d)          \u0027 Noncompliant: \"d\" is always Nothing and v2 is always equal to s.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean, ByVal c As Boolean, ByVal s As String)\n    Dim a \u003d IsAllowed()\n    If a Then                   \u0027 Compliant\n        DoSomething()\n    End If\n\n    If b AndAlso a Then         \u0027 Compliant\n        DoSomething()\n    End If\n\n    If c OrElse Not a Then      \u0027 Compliant\n        DoSomething()\n    End If\n\n    Dim d As String \u003d GetStringData()\n    Dim v1 \u003d If(d, \"value\")     \u0027 Compliant\n    Dim v2 \u003d If(s, d)           \u0027 Compliant\nEnd Sub\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003e?.\n  and ?() null-conditional operators (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003eIf\n  operator called with two arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eControl flow constructs like \u003ccode\u003eif\u003c/code\u003e-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become \u003cem\u003egratuitous\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe presence of gratuitous conditions can indicate a logical error. For example, the programmer \u003cem\u003eintended\u003c/em\u003e to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.\u003c/p\u003e\n\u003cp\u003eAdditionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.\u003c/p\u003e\n\u003cp\u003eThis rule looks for operands of a boolean expression never changing the result of the expression. It also applies to the \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003enull conditional operator\u003c/a\u003e\nwhen one of the operands always evaluates to \u003ccode\u003eNothing\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nDim d As String \u003d Nothing\nDim v1 \u003d If(d, \"value\")\n\u003c/pre\u003e\n\u003ch3\u003eExceptions\u003c/h3\u003e\n\u003cp\u003eThis rule will not raise an issue in either of these cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is a single \u003ccode\u003eConst bool\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nConst debug \u003d False\n\u0027...\nIf debug Then\n    \u0027 Print something\nEnd If\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e When the condition is the literal \u003ccode\u003eTrue\u003c/code\u003e or \u003ccode\u003eFalse\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, it is obvious the code is as intended.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003eGratuitous boolean expressions are suspicious and should be carefully removed from the code.\u003c/p\u003e\n\u003cp\u003eFirst, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.\u003c/p\u003e\n\u003cp\u003eIf it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n\u003ccode\u003eif\u003c/code\u003e-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean, ByVal c As Boolean)\n    Dim a \u003d True\n    If a Then                  \u0027 Noncompliant: \"a\" is always \"true\"\n        DoSomething()\n    End If\n\n    If b AndAlso a Then        \u0027 Noncompliant: \"a\" is always \"true\"\n        DoSomething()\n    End If\n\n    If c OrElse Not a Then     \u0027 Noncompliant: \"Not a\" is always \"false\"\n        DoSomething()\n    End If\n\n    Dim d As String \u003d Nothing\n    Dim v1 \u003d If(d, \"value\")    \u0027 Noncompliant: \"d\" is always Nothing and v1 is always \"value\".\n    Dim v2 \u003d If(s, d)          \u0027 Noncompliant: \"d\" is always Nothing and v2 is always equal to s.\nEnd Sub\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Sub Sample(ByVal b As Boolean, ByVal c As Boolean, ByVal s As String)\n    Dim a \u003d IsAllowed()\n    If a Then                   \u0027 Compliant\n        DoSomething()\n    End If\n\n    If b AndAlso a Then         \u0027 Compliant\n        DoSomething()\n    End If\n\n    If c OrElse Not a Then      \u0027 Compliant\n        DoSomething()\n    End If\n\n    Dim d As String \u003d GetStringData()\n    Dim v1 \u003d If(d, \"value\")     \u0027 Compliant\n    Dim v2 \u003d If(s, d)           \u0027 Compliant\nEnd Sub\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571\"\u003eCWE-571 - Expression is Always True\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570\"\u003eCWE-570 - Expression is Always False\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003e?.\n  and ?() null-conditional operators (Visual Basic)\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Learn - \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/operators/null-conditional-operators\"\u003eIf\n  operator called with two arguments\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe",
      "redundant",
      "suspicious"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2346",
    "name": "Flags enumerations zero-value members should be named \"None\"",
    "defaultSeverity": "CRITICAL",
    "type": "CODE_SMELL",
    "cleanCodeAttribute": "CONVENTIONAL",
    "defaultImpacts": {
      "MAINTAINABILITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAn enumeration can be decorated with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e to\nindicate that it can be used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit field\u003c/a\u003e: a set of flags, that can be independently set and\nreset.\u003c/p\u003e\n\u003cp\u003eFor example, the following definition of the day of the week:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    Monday \u003d 1    \u0027 0b00000001\n    Tuesday \u003d 2   \u0027 0b00000010\n    Wednesday \u003d 4 \u0027 0b00000100\n    Thursday \u003d 8  \u0027 0b00001000\n    Friday \u003d 16   \u0027 0b00010000\n    Saturday \u003d 32 \u0027 0b00100000\n    Sunday \u003d 64   \u0027 0b01000000\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eallows to define special set of days, such as \u003ccode\u003eWeekDays\u003c/code\u003e and \u003ccode\u003eWeekend\u003c/code\u003e using the \u003ccode\u003eOr\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    \u0027 ...\n    None \u003d 0                                                        \u0027 0b00000000\n    Weekdays \u003d Monday Or Tuesday Or Wednesday Or Thursday Or Friday \u0027 0b00011111\n    Weekend \u003d Saturday Or Sunday                                    \u0027 0b01100000\n    All \u003d Weekdays Or Weekend                                       \u0027 0b01111111\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eThese can be used to write more expressive conditions, taking advantage of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003ebitwise\noperators\u003c/a\u003e and \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nDim someDays \u003d Days.Wednesday | Days.Weekend \u0027 0b01100100\nsomeDays.HasFlag(Days.Wednesday)             \u0027 someDays contains Wednesday\n\nDim mondayAndWednesday \u003d Days.Monday Or Days.Wednesday\nsomeDays.HasFlag(mondayAndWednesday)         \u0027 someDays contains Monday and Wednesday\nsomeDays.HasFlag(Days.Monday) OrElse someDays.HasFlag(Days.Wednesday) \u0027 someDays contains Monday or Wednesday\nsomeDays And Days.Weekend \u0026lt;\u0026gt; Days.None       \u0027 someDays overlaps with the weekend\nsomeDays And Days.Weekdays \u003d Days.Weekdays   \u0027 someDays is only made of weekdays\n\u003c/pre\u003e\n\u003cp\u003eConsistent use of \u003ccode\u003eNone\u003c/code\u003e in flag enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any\nother state since there is no way to check that the bit \u003ccode\u003e0\u003c/code\u003e is set.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    Monday \u003d 0    \u0027 0 is used to indicate Monday\n    Tuesday \u003d 1\n    Wednesday \u003d 2\n    Thursday \u003d 4\n    Friday \u003d 8\n    Saturday \u003d 16\n    Sunday \u003d 32\n    Weekdays \u003d Monday Or Tuesday Or Wednesday Or Thursday Or Friday\n    Weekend \u003d Saturday Or Sunday\n    All \u003d Weekdays Or Weekend\nEnd Enum\n\nDim someDays \u003d Days.Wednesday Or Days.Thursday\nsomeDays \u0026amp; Days.Tuesday \u003d Days.Tuesday \u0027 False, because someDays doesn\u0027t contains Tuesday\nsomeDays \u0026amp; Days.Monday \u003d Days.Monday   \u0027 True, even though someDays doesn\u0027t contains Monday!\nsomeDays.HasFlag(Days.Monday)          \u0027 Same issue as above\n\u003c/pre\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType\n    Void \u003d 0        \u0027 Non-Compliant\n    Banana \u003d 1\n    Orange \u003d 2\n    Strawberry \u003d 4\nEnd Enum\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType\n    None \u003d 0        \u0027 Compliant\n    Banana \u003d 1\n    Orange \u003d 2\n    Strawberry \u003d 4\nEnd Enum\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag(Enum) Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229062(v\u003dvs.100)\"\u003eDesigning Flags Enumerations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAn enumeration can be decorated with the \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e to\nindicate that it can be used as a \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003ebit field\u003c/a\u003e: a set of flags, that can be independently set and\nreset.\u003c/p\u003e\n\u003cp\u003eFor example, the following definition of the day of the week:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    Monday \u003d 1    \u0027 0b00000001\n    Tuesday \u003d 2   \u0027 0b00000010\n    Wednesday \u003d 4 \u0027 0b00000100\n    Thursday \u003d 8  \u0027 0b00001000\n    Friday \u003d 16   \u0027 0b00010000\n    Saturday \u003d 32 \u0027 0b00100000\n    Sunday \u003d 64   \u0027 0b01000000\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eallows to define special set of days, such as \u003ccode\u003eWeekDays\u003c/code\u003e and \u003ccode\u003eWeekend\u003c/code\u003e using the \u003ccode\u003eOr\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    \u0027 ...\n    None \u003d 0                                                        \u0027 0b00000000\n    Weekdays \u003d Monday Or Tuesday Or Wednesday Or Thursday Or Friday \u0027 0b00011111\n    Weekend \u003d Saturday Or Sunday                                    \u0027 0b01100000\n    All \u003d Weekdays Or Weekend                                       \u0027 0b01111111\nEnd Enum\n\u003c/pre\u003e\n\u003cp\u003eThese can be used to write more expressive conditions, taking advantage of \u003ca\nhref\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003ebitwise\noperators\u003c/a\u003e and \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\nDim someDays \u003d Days.Wednesday | Days.Weekend \u0027 0b01100100\nsomeDays.HasFlag(Days.Wednesday)             \u0027 someDays contains Wednesday\n\nDim mondayAndWednesday \u003d Days.Monday Or Days.Wednesday\nsomeDays.HasFlag(mondayAndWednesday)         \u0027 someDays contains Monday and Wednesday\nsomeDays.HasFlag(Days.Monday) OrElse someDays.HasFlag(Days.Wednesday) \u0027 someDays contains Monday or Wednesday\nsomeDays And Days.Weekend \u0026lt;\u0026gt; Days.None       \u0027 someDays overlaps with the weekend\nsomeDays And Days.Weekdays \u003d Days.Weekdays   \u0027 someDays is only made of weekdays\n\u003c/pre\u003e\n\u003cp\u003eConsistent use of \u003ccode\u003eNone\u003c/code\u003e in flag enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any\nother state since there is no way to check that the bit \u003ccode\u003e0\u003c/code\u003e is set.\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;Flags()\u0026gt;\nEnum Days\n    Monday \u003d 0    \u0027 0 is used to indicate Monday\n    Tuesday \u003d 1\n    Wednesday \u003d 2\n    Thursday \u003d 4\n    Friday \u003d 8\n    Saturday \u003d 16\n    Sunday \u003d 32\n    Weekdays \u003d Monday Or Tuesday Or Wednesday Or Thursday Or Friday\n    Weekend \u003d Saturday Or Sunday\n    All \u003d Weekdays Or Weekend\nEnd Enum\n\nDim someDays \u003d Days.Wednesday Or Days.Thursday\nsomeDays \u0026amp; Days.Tuesday \u003d Days.Tuesday \u0027 False, because someDays doesn\u0027t contains Tuesday\nsomeDays \u0026amp; Days.Monday \u003d Days.Monday   \u0027 True, even though someDays doesn\u0027t contains Monday!\nsomeDays.HasFlag(Days.Monday)          \u0027 Same issue as above\n\u003c/pre\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType\n    Void \u003d 0        \u0027 Non-Compliant\n    Banana \u003d 1\n    Orange \u003d 2\n    Strawberry \u003d 4\nEnd Enum\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\n\u0026lt;Flags()\u0026gt;\nEnum FruitType\n    None \u003d 0        \u0027 Compliant\n    Banana \u003d 1\n    Orange \u003d 2\n    Strawberry \u003d 4\nEnd Enum\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.flagsattribute\"\u003eFlagsAttribute\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Bit_field\"\u003eBit field\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators#bitwise-operations\"\u003eLogical and Bitwise Operators in Visual Basic\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.enum.hasflag\"\u003eEnum.HasFlag(Enum) Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eArticles \u0026amp; blog posts\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229062(v\u003dvs.100)\"\u003eDesigning Flags Enumerations\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "convention"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "vbnet:S2225",
    "name": "\"ToString()\" method should not return Nothing",
    "defaultSeverity": "MAJOR",
    "type": "BUG",
    "cleanCodeAttribute": "LOGICAL",
    "defaultImpacts": {
      "RELIABILITY": "MEDIUM"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString()\u003c/a\u003e on an object should always return a\n\u003ccode\u003estring\u003c/code\u003e. Thus, overriding the ToString method should never return \u003ccode\u003eNothing\u003c/code\u003e because it breaks the method’s implicit contract,\nand as a result the consumer’s expectations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Overrides Function ToString() As String\n    Return Nothing \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Overrides Function ToString() As String\n    Return \"\"\nEnd Function\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eObject.ToString Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eCalling \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eToString()\u003c/a\u003e on an object should always return a\n\u003ccode\u003estring\u003c/code\u003e. Thus, overriding the ToString method should never return \u003ccode\u003eNothing\u003c/code\u003e because it breaks the method’s implicit contract,\nand as a result the consumer’s expectations.\u003c/p\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nPublic Overrides Function ToString() As String\n    Return Nothing \u0027 Noncompliant\nEnd Function\n\u003c/pre\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nPublic Overrides Function ToString() As String\n    Return \"\"\nEnd Function\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e CWE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476\"\u003eCWE-476 - NULL Pointer Dereference\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://learn.microsoft.com/en-us/dotnet/api/system.object.tostring\"\u003eObject.ToString Method\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": false,
    "language": "VBNET",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  }
]