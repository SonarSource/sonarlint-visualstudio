[
  {
    "key": "secrets:S6690",
    "name": "GitLab tokens should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eGitLab tokens are used for authentication and authorization purposes. They are essentially access credentials that allow users or applications to\ninteract with the GitLab API.\u003c/p\u003e\n\u003cp\u003eWith a GitLab token, you can perform various operations such as creating, reading, updating, and deleting resources like repositories, issues,\nmerge requests, and more. Tokens can also be scoped to limit the permissions and actions that can be performed.\u003c/p\u003e\n\u003cp\u003eA leaked GitLab token can have significant consequences for the security and integrity of the associated account and resources. It exposes the\naccount to unauthorized access, potentially leading to data breaches and malicious actions. The unintended audience can exploit the leaked token to\ngain unauthorized entry into the GitLab account, allowing them to view, modify, or delete repositories, issues, and other resources. This unauthorized\naccess can result in the exposure of sensitive data, such as proprietary code, customer information, or confidential documents, leading to potential\ndata breaches.\u003c/p\u003e\n\u003cp\u003eMoreover, the unintended audience can perform malicious actions within the account, introducing vulnerabilities, injecting malicious code, or\ntampering with settings. This can compromise the security of the account and the integrity of the software development process.\u003c/p\u003e\n\u003cp\u003eAdditionally, a leaked token can enable the unintended audience to take control of the GitLab account, potentially changing passwords, modifying\nsettings, and adding or removing collaborators. This account takeover can disrupt development and collaboration workflows, causing reputational damage\nand operational disruptions.\u003c/p\u003e\n\u003cp\u003eFurthermore, the impact of a leaked token extends beyond the immediate account compromise. It can have regulatory and compliance implications,\nrequiring organizations to report the breach, notify affected parties, and potentially face legal and financial consequences.\u003c/p\u003e\n\u003cp\u003eIn general, the compromise of a GitLab token would lead to consequences referred to as supply chain attacks that can affect more than one’s own\norganization.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"token\", \"glpat-zcs1FfaxGnHfvzd7ExHz\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"token\", System.getenv(\"TOKEN\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eGitLab tokens are used for authentication and authorization purposes. They are essentially access credentials that allow users or applications to\ninteract with the GitLab API.\u003c/p\u003e\n\u003cp\u003eWith a GitLab token, you can perform various operations such as creating, reading, updating, and deleting resources like repositories, issues,\nmerge requests, and more. Tokens can also be scoped to limit the permissions and actions that can be performed.\u003c/p\u003e\n\u003cp\u003eA leaked GitLab token can have significant consequences for the security and integrity of the associated account and resources. It exposes the\naccount to unauthorized access, potentially leading to data breaches and malicious actions. The unintended audience can exploit the leaked token to\ngain unauthorized entry into the GitLab account, allowing them to view, modify, or delete repositories, issues, and other resources. This unauthorized\naccess can result in the exposure of sensitive data, such as proprietary code, customer information, or confidential documents, leading to potential\ndata breaches.\u003c/p\u003e\n\u003cp\u003eMoreover, the unintended audience can perform malicious actions within the account, introducing vulnerabilities, injecting malicious code, or\ntampering with settings. This can compromise the security of the account and the integrity of the software development process.\u003c/p\u003e\n\u003cp\u003eAdditionally, a leaked token can enable the unintended audience to take control of the GitLab account, potentially changing passwords, modifying\nsettings, and adding or removing collaborators. This account takeover can disrupt development and collaboration workflows, causing reputational damage\nand operational disruptions.\u003c/p\u003e\n\u003cp\u003eFurthermore, the impact of a leaked token extends beyond the immediate account compromise. It can have regulatory and compliance implications,\nrequiring organizations to report the breach, notify affected parties, and potentially face legal and financial consequences.\u003c/p\u003e\n\u003cp\u003eIn general, the compromise of a GitLab token would lead to consequences referred to as supply chain attacks that can affect more than one’s own\norganization.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"token\", \"glpat-zcs1FfaxGnHfvzd7ExHz\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"token\", System.getenv(\"TOKEN\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6691",
    "name": "Google OAuth client secrets should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA Google client OAuth secret is a confidential string that is used to authenticate and authorize applications when they interact with Google APIs.\nIt is a part of the OAuth 2.0 protocol, which allows applications to access user data on their behalf.\u003c/p\u003e\n\u003cp\u003eThe client secret is used in the OAuth flow to verify the identity of the application and ensure that only authorized applications can access user\ndata. It is typically used in combination with a client ID, which identifies the application itself.\u003c/p\u003e\n\u003cp\u003eIf a Google client OAuth secret leaks to an unintended audience, it can have serious security implications. Attackers who obtain the client secret\ncan use it to impersonate the application and gain unauthorized access to user data. They can potentially access sensitive information, modify data,\nor perform actions on behalf of the user without their consent.\u003c/p\u003e\n\u003cp\u003eThe exact capabilities of the attackers will depend on the authorizations the corresponding application has been granted.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eGoogle Cloud console provides a Logs Explorer feature that can be used to audit recent access to a cloud infrastructure.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"client_secret\", \"TgxYWFmND-1NTYwNTgzMDM3N\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"client_secret\", System.getenv(\"CLIENT_SECRET\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Google Documentation - \u003ca href\u003d\"https://cloud.google.com/docs/security/compromised-credentials\"\u003eHandling compromised Google Cloud\n  credentials\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA Google client OAuth secret is a confidential string that is used to authenticate and authorize applications when they interact with Google APIs.\nIt is a part of the OAuth 2.0 protocol, which allows applications to access user data on their behalf.\u003c/p\u003e\n\u003cp\u003eThe client secret is used in the OAuth flow to verify the identity of the application and ensure that only authorized applications can access user\ndata. It is typically used in combination with a client ID, which identifies the application itself.\u003c/p\u003e\n\u003cp\u003eIf a Google client OAuth secret leaks to an unintended audience, it can have serious security implications. Attackers who obtain the client secret\ncan use it to impersonate the application and gain unauthorized access to user data. They can potentially access sensitive information, modify data,\nor perform actions on behalf of the user without their consent.\u003c/p\u003e\n\u003cp\u003eThe exact capabilities of the attackers will depend on the authorizations the corresponding application has been granted.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eGoogle Cloud console provides a Logs Explorer feature that can be used to audit recent access to a cloud infrastructure.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"client_secret\", \"TgxYWFmND-1NTYwNTgzMDM3N\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"client_secret\", System.getenv(\"CLIENT_SECRET\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Google Documentation - \u003ca href\u003d\"https://cloud.google.com/docs/security/compromised-credentials\"\u003eHandling compromised Google Cloud\n  credentials\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6292",
    "name": "Amazon MWS credentials should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAmazon Marketplace Web Service credentials are designed to authenticate and authorize Amazon sellers.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Amazon MWS then it requires credentials to access all the resources it needs to function properly. The\ncredentials authenticate to a seller account which can have access to resources like products, orders, price or shipment information.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the MWS credentials used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, MWS credentials should not be stored along with the application code as they would grant special privilege to anyone who has\naccess to the application source code.\u003c/p\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AWS this service is called \u003ca\nhref\u003d\"https://aws.amazon.com/fr/secrets-manager/\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAmazon Marketplace Web Service credentials are designed to authenticate and authorize Amazon sellers.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Amazon MWS then it requires credentials to access all the resources it needs to function properly. The\ncredentials authenticate to a seller account which can have access to resources like products, orders, price or shipment information.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the MWS credentials used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, MWS credentials should not be stored along with the application code as they would grant special privilege to anyone who has\naccess to the application source code.\u003c/p\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AWS this service is called \u003ca\nhref\u003d\"https://aws.amazon.com/fr/secrets-manager/\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6694",
    "name": "MongoDB database passwords should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in MongoDB are used to authenticate users against the database engine. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a MongoDB password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored within\nit, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a MongoDB database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the\npurposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the MongoDB instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eMongoDB instances maintain a log that includes user authentication events. This one could be used to audit recent malicious connections.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"mongodb://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nuser \u003d os.environ[\"MONGO_USER\"]\npassword \u003d os.environ[\"MONGO_PASSWORD\"]\nuri \u003d f\"mongodb://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MongoDB Documentation - \u003ca href\u003d\"https://www.mongodb.com/docs/manual/reference/log-messages/\"\u003eLog Messages\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MongoDB Documentation - \u003ca href\u003d\"https://www.mongodb.com/docs/manual/core/authentication/\"\u003eAuthentication\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in MongoDB are used to authenticate users against the database engine. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a MongoDB password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored within\nit, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a MongoDB database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the\npurposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the MongoDB instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eMongoDB instances maintain a log that includes user authentication events. This one could be used to audit recent malicious connections.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"mongodb://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nuser \u003d os.environ[\"MONGO_USER\"]\npassword \u003d os.environ[\"MONGO_PASSWORD\"]\nuri \u003d f\"mongodb://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MongoDB Documentation - \u003ca href\u003d\"https://www.mongodb.com/docs/manual/reference/log-messages/\"\u003eLog Messages\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MongoDB Documentation - \u003ca href\u003d\"https://www.mongodb.com/docs/manual/core/authentication/\"\u003eAuthentication\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6695",
    "name": "WeChat app keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWeChat application keys are used for authentication and authorization purposes when integrating third-party applications with the WeChat\nplatform.\u003c/p\u003e\n\u003cp\u003eIf a WeChat app key were to leak to an unintended audience, it could have severe consequences for both the app developer and the app users. The\nunauthorized individuals or malicious actors who gain access to the app key would have the potential to exploit it in various ways.\u003c/p\u003e\n\u003cp\u003eOne of the primary risks is the unauthorized access to sensitive user data associated with the WeChat app. This could include personal information,\nchat logs, and other private data that users have shared on the platform. The leaked app key could provide a gateway for unauthorized individuals to\naccess and misuse this data, compromising the privacy and security of WeChat users.\u003c/p\u003e\n\u003cp\u003eAnother significant concern is the potential for impersonation and unauthorized actions. With the leaked app key, malicious actors could\nimpersonate the app and perform actions on behalf of the app without proper authorization. This could lead to various security breaches, such as\nsending spam messages, spreading malware, or conducting phishing attacks on unsuspecting WeChat users.\u003c/p\u003e\n\u003cp\u003eFurthermore, the leaked app key could enable unauthorized parties to manipulate or disrupt the functionality of the WeChat app. They could tamper\nwith app settings, inject malicious code, or even take control of the app’s user base. Such actions could result in a loss of user trust, service\ndisruptions, and reputational damage for both the app developer and the WeChat platform.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"secret_key\", \"40b6b70508b47cbfb4ee39feb617a05a\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"secret_key\", System.getenv(\"SECRET_KEY\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eWeChat application keys are used for authentication and authorization purposes when integrating third-party applications with the WeChat\nplatform.\u003c/p\u003e\n\u003cp\u003eIf a WeChat app key were to leak to an unintended audience, it could have severe consequences for both the app developer and the app users. The\nunauthorized individuals or malicious actors who gain access to the app key would have the potential to exploit it in various ways.\u003c/p\u003e\n\u003cp\u003eOne of the primary risks is the unauthorized access to sensitive user data associated with the WeChat app. This could include personal information,\nchat logs, and other private data that users have shared on the platform. The leaked app key could provide a gateway for unauthorized individuals to\naccess and misuse this data, compromising the privacy and security of WeChat users.\u003c/p\u003e\n\u003cp\u003eAnother significant concern is the potential for impersonation and unauthorized actions. With the leaked app key, malicious actors could\nimpersonate the app and perform actions on behalf of the app without proper authorization. This could lead to various security breaches, such as\nsending spam messages, spreading malware, or conducting phishing attacks on unsuspecting WeChat users.\u003c/p\u003e\n\u003cp\u003eFurthermore, the leaked app key could enable unauthorized parties to manipulate or disrupt the functionality of the WeChat app. They could tamper\nwith app settings, inject malicious code, or even take control of the app’s user base. Such actions could result in a loss of user trust, service\ndisruptions, and reputational damage for both the app developer and the WeChat platform.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"secret_key\", \"40b6b70508b47cbfb4ee39feb617a05a\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"secret_key\", System.getenv(\"SECRET_KEY\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6692",
    "name": "reCaptcha secret keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA reCaptcha secret key is a unique token that is used to verify the authenticity of reCaptcha requests made from an application to the reCaptcha\nservice. It is a key component in ensuring CAPTCHAs challenges issued by the application are properly solved and verified.\u003c/p\u003e\n\u003cp\u003eIf a reCaptcha secret key leaks to an unintended audience, attackers with access to it will be able to forge CAPTCHA responses without solving\nthem. It will allow them to bypass the CAPTCHA challenge verification.\u003c/p\u003e\n\u003cp\u003eThis can lead to an influx of spam submissions, automated attacks, or unauthorized access attempts depending on the feature the CAPTCHA mechanism\nis intended to protect.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"recaptcha_secret\", \"6LcaQa4mAAAAAFvhmzAd2hErGBSt4FC\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"recaptcha_secret\", System.getenv(\"RECAPTCHA_SECRET\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Google reCAPTCHA Documentation - \u003ca href\u003d\"https://developers.google.com/recaptcha/intro\"\u003eDeveloper’s Guide\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA reCaptcha secret key is a unique token that is used to verify the authenticity of reCaptcha requests made from an application to the reCaptcha\nservice. It is a key component in ensuring CAPTCHAs challenges issued by the application are properly solved and verified.\u003c/p\u003e\n\u003cp\u003eIf a reCaptcha secret key leaks to an unintended audience, attackers with access to it will be able to forge CAPTCHA responses without solving\nthem. It will allow them to bypass the CAPTCHA challenge verification.\u003c/p\u003e\n\u003cp\u003eThis can lead to an influx of spam submissions, automated attacks, or unauthorized access attempts depending on the feature the CAPTCHA mechanism\nis intended to protect.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"recaptcha_secret\", \"6LcaQa4mAAAAAFvhmzAd2hErGBSt4FC\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"recaptcha_secret\", System.getenv(\"RECAPTCHA_SECRET\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Google reCAPTCHA Documentation - \u003ca href\u003d\"https://developers.google.com/recaptcha/intro\"\u003eDeveloper’s Guide\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6693",
    "name": "SSH private keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSSH private keys are used for authentication and secure communication in SSH (Secure Shell) protocols. They are a form of asymmetric cryptography,\nwhere a pair of keys is generated: a private key and a corresponding public key. SSH keys provide a secure and efficient way to authenticate and\nestablish secure connections between clients and servers. They are widely used for remote login, file transfer, and secure remote administration.\u003c/p\u003e\n\u003cp\u003eWhen an SSH private key is leaked to an unintended audience, it can have severe consequences for security and confidentiality. One of the primary\noutcomes is unauthorized access. The unintended audience can exploit the leaked private key to authenticate themselves as the legitimate owner,\ngaining unauthorized entry to systems, servers, or accounts that accept the key for authentication. This unauthorized access opens the door for\nvarious malicious activities, including data breaches, unauthorized modifications, and misuse of sensitive information.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eDepending on the information system the key is used to authenticate against, the audit method might change. For example, on Linux systems, the\nsystem-wide authentication logs could be used to audit recent connections from an affected account.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nString key \u003d \"\"\"\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\n    QyNTUxOQAAACDktj2RM1D2wRTQ0H+YZsFqnAuZrqBNEB4PpJ5xm73nWwAAAJgJVPFECVTx\n    RAAAAAtzc2gtZWQyNTUxOQAAACDktj2RM1D2wRTQ0H+YZsFqnAuZrqBNEB4PpJ5xm73nWw\n    AAAECQ8Nzp6a1ZJgS3SWh2pMxe90W9tZVDZ+MZT35GjCJK2uS2PZEzUPbBFNDQf5hmwWqc\n    C5muoE0QHg+knnGbvedbAAAAFGdhZXRhbmZlcnJ5QFBDLUwwMDc3AQ\u003d\u003d\n    -----END OPENSSH PRIVATE KEY-----\"\"\";\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nString key \u003d System.getenv(\"SSH_KEY\");\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSSH private keys are used for authentication and secure communication in SSH (Secure Shell) protocols. They are a form of asymmetric cryptography,\nwhere a pair of keys is generated: a private key and a corresponding public key. SSH keys provide a secure and efficient way to authenticate and\nestablish secure connections between clients and servers. They are widely used for remote login, file transfer, and secure remote administration.\u003c/p\u003e\n\u003cp\u003eWhen an SSH private key is leaked to an unintended audience, it can have severe consequences for security and confidentiality. One of the primary\noutcomes is unauthorized access. The unintended audience can exploit the leaked private key to authenticate themselves as the legitimate owner,\ngaining unauthorized entry to systems, servers, or accounts that accept the key for authentication. This unauthorized access opens the door for\nvarious malicious activities, including data breaches, unauthorized modifications, and misuse of sensitive information.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eDepending on the information system the key is used to authenticate against, the audit method might change. For example, on Linux systems, the\nsystem-wide authentication logs could be used to audit recent connections from an affected account.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nString key \u003d \"\"\"\n    -----BEGIN OPENSSH PRIVATE KEY-----\n    b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\n    QyNTUxOQAAACDktj2RM1D2wRTQ0H+YZsFqnAuZrqBNEB4PpJ5xm73nWwAAAJgJVPFECVTx\n    RAAAAAtzc2gtZWQyNTUxOQAAACDktj2RM1D2wRTQ0H+YZsFqnAuZrqBNEB4PpJ5xm73nWw\n    AAAECQ8Nzp6a1ZJgS3SWh2pMxe90W9tZVDZ+MZT35GjCJK2uS2PZEzUPbBFNDQf5hmwWqc\n    C5muoE0QHg+knnGbvedbAAAAFGdhZXRhbmZlcnJ5QFBDLUwwMDc3AQ\u003d\u003d\n    -----END OPENSSH PRIVATE KEY-----\"\"\";\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nString key \u003d System.getenv(\"SSH_KEY\");\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6290",
    "name": "Amazon Web Services credentials should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAWS credentials are designed to authenticate and authorize requests to AWS.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with AWS then it requires AWS credentials to access all the resources it needs to function properly. Resources that\ncan be accessed depend on the permission granted to the AWS account. These credentials may authenticate to the AWS account root user who has\nunrestricted access to all resources in your AWS account, including billing information.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e AWS Secret Access Key \u003c/li\u003e\n  \u003cli\u003e AWS Access ID \u003c/li\u003e\n  \u003cli\u003e AWS Session Token \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the AWS credentials used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, AWS credentials should not be stored along with the application code as they would grant special privilege to anyone who has\naccess to the application source code.\u003c/p\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AWS this service is called \u003ca\nhref\u003d\"https://aws.amazon.com/fr/secrets-manager/\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAWS credentials are designed to authenticate and authorize requests to AWS.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with AWS then it requires AWS credentials to access all the resources it needs to function properly. Resources that\ncan be accessed depend on the permission granted to the AWS account. These credentials may authenticate to the AWS account root user who has\nunrestricted access to all resources in your AWS account, including billing information.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e AWS Secret Access Key \u003c/li\u003e\n  \u003cli\u003e AWS Access ID \u003c/li\u003e\n  \u003cli\u003e AWS Session Token \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the AWS credentials used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, AWS credentials should not be stored along with the application code as they would grant special privilege to anyone who has\naccess to the application source code.\u003c/p\u003e\n\u003cp\u003eCredentials should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AWS this service is called \u003ca\nhref\u003d\"https://aws.amazon.com/fr/secrets-manager/\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6335",
    "name": "Google Cloud service accounts keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eGoogle Cloud service accounts are designed to authenticate and authorize requests to Google APIs.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Google Cloud services then it requires a service account to access all the resources it needs to function\nproperly. Resources that can be accessed depend on the permission granted to the service account. Establishing the identity of a service account\nrelies on a public/private key pair. It’s common for private keys to be distributed through a JSON file that your application will then use to consume\nGoogle APIs.\u003c/p\u003e\n\u003cp\u003eA key may authenticate to a high privilege which has unrestricted access to all resources in your Google Cloud project, including billing\ninformation.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the service account key used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, service account keys should not be stored along with the application code as they would grant special privileges to anyone who\nhas access to the application source code.\u003c/p\u003e\n\u003cp\u003eKeys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On Google Cloud this service is called \u003ca\nhref\u003d\"https://cloud.google.com/secret-manager\"\u003eSecret Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen keys are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys\"\u003eGoogle Cloud\u003c/a\u003e - Creating and managing service account\n  keys \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eGoogle Cloud service accounts are designed to authenticate and authorize requests to Google APIs.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Google Cloud services then it requires a service account to access all the resources it needs to function\nproperly. Resources that can be accessed depend on the permission granted to the service account. Establishing the identity of a service account\nrelies on a public/private key pair. It’s common for private keys to be distributed through a JSON file that your application will then use to consume\nGoogle APIs.\u003c/p\u003e\n\u003cp\u003eA key may authenticate to a high privilege which has unrestricted access to all resources in your Google Cloud project, including billing\ninformation.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the service account key used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, service account keys should not be stored along with the application code as they would grant special privileges to anyone who\nhas access to the application source code.\u003c/p\u003e\n\u003cp\u003eKeys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On Google Cloud this service is called \u003ca\nhref\u003d\"https://cloud.google.com/secret-manager\"\u003eSecret Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen keys are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys\"\u003eGoogle Cloud\u003c/a\u003e - Creating and managing service account\n  keys \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6698",
    "name": "PostgreSQL database passwords should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eBy default, no connection information is logged by PostgreSQL server. The \u003ccode\u003elog_connections\u003c/code\u003e parameter must be set to \u003ccode\u003etrue\u003c/code\u003e\nin the server configuration for this to happen.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"postgres://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nuser \u003d os.environ[\"PG_USER\"]\npassword \u003d os.environ[\"PG_PASSWORD\"]\nuri \u003d f\"postgres://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e PostgreSQL Documentation - \u003ca href\u003d\"https://www.postgresql.org/docs/15/client-authentication.html\"\u003eClient Authentication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e PostgreSQL Documentation - \u003ca href\u003d\"https://www.postgresql.org/docs/current/runtime-config-logging.html\"\u003eError Reporting and Logging\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in PostgreSQL are used to authenticate users against the database engine. They are associated with user accounts that are granted\nspecific permissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a PostgreSQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored\nwithin it, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a PostgreSQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on\nthe purposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the PostgreSQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eBy default, no connection information is logged by PostgreSQL server. The \u003ccode\u003elog_connections\u003c/code\u003e parameter must be set to \u003ccode\u003etrue\u003c/code\u003e\nin the server configuration for this to happen.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"postgres://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nuser \u003d os.environ[\"PG_USER\"]\npassword \u003d os.environ[\"PG_PASSWORD\"]\nuri \u003d f\"postgres://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e PostgreSQL Documentation - \u003ca href\u003d\"https://www.postgresql.org/docs/15/client-authentication.html\"\u003eClient Authentication\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e PostgreSQL Documentation - \u003ca href\u003d\"https://www.postgresql.org/docs/current/runtime-config-logging.html\"\u003eError Reporting and Logging\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6336",
    "name": "Alibaba Cloud AccessKeys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eAccessKeys are long term credentials designed to authenticate and authorize requests to Alibaba Cloud.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Alibaba Cloud then it requires AccessKeys to access all the resources it needs to function properly. Resources\nthat can be accessed depend on the permissions granted to the Alibaba Cloud account. These credentials may authenticate to the account root user who\nhas unrestricted access to all resources in your Alibaba Cloud account, including billing information.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Alibaba Cloud AccessKey ID \u003c/li\u003e\n  \u003cli\u003e Alibaba Cloud AccessKey secret \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the AccessKeys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, AccessKeys should not be stored along with the application code as they would grant special privilege to anyone who has access to\nthe application source code.\u003c/p\u003e\n\u003cp\u003eAccessKeys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AlibabaCloud this service is called \u003ca\nhref\u003d\"https://www.alibabacloud.com/help/doc-detail/152001.htm\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eAccessKeys are long term credentials designed to authenticate and authorize requests to Alibaba Cloud.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with Alibaba Cloud then it requires AccessKeys to access all the resources it needs to function properly. Resources\nthat can be accessed depend on the permissions granted to the Alibaba Cloud account. These credentials may authenticate to the account root user who\nhas unrestricted access to all resources in your Alibaba Cloud account, including billing information.\u003c/p\u003e\n\u003cp\u003eThis rule flags instances of:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Alibaba Cloud AccessKey ID \u003c/li\u003e\n  \u003cli\u003e Alibaba Cloud AccessKey secret \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the AccessKeys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, AccessKeys should not be stored along with the application code as they would grant special privilege to anyone who has access to\nthe application source code.\u003c/p\u003e\n\u003cp\u003eAccessKeys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On AlibabaCloud this service is called \u003ca\nhref\u003d\"https://www.alibabacloud.com/help/doc-detail/152001.htm\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6699",
    "name": "Spotify API secrets should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe Spotify API secret is a confidential key used for authentication and authorization purposes when accessing the Spotify API.\u003c/p\u003e\n\u003cp\u003eThe Spotify API grants applications access to Spotify’s services and, by extension, user data. Should this secret fall into the wrong hands, two\nimmediate concerns arise: unauthorized access to user data and data manipulation.\u003c/p\u003e\n\u003cp\u003eWhen unauthorized entities obtain the API secret, they have potential access to users\u0027 personal Spotify information. This includes the details of\ntheir playlists, saved tracks, and listening history. Such exposure might not only breach personal boundaries but also infringe upon privacy standards\nset by platforms and regulators.\u003c/p\u003e\n\u003cp\u003eIn addition to simply gaining access, there is the risk of data manipulation. If malicious individuals obtain the secret, they could tamper with\nuser content on Spotify. This includes modifying playlists, deleting beloved tracks, or even adding unsolicited ones. Such actions not only disrupt\nthe user experience but also violate the trust that users have in both Spotify and third-party applications connected to it.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"spotify_secret\", \"f3fbd32510154334aaf0394aca3ac4c3\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"spotify_secret\", System.getenv(\"SPOTIFY_SECRET\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eThe Spotify API secret is a confidential key used for authentication and authorization purposes when accessing the Spotify API.\u003c/p\u003e\n\u003cp\u003eThe Spotify API grants applications access to Spotify’s services and, by extension, user data. Should this secret fall into the wrong hands, two\nimmediate concerns arise: unauthorized access to user data and data manipulation.\u003c/p\u003e\n\u003cp\u003eWhen unauthorized entities obtain the API secret, they have potential access to users\u0027 personal Spotify information. This includes the details of\ntheir playlists, saved tracks, and listening history. Such exposure might not only breach personal boundaries but also infringe upon privacy standards\nset by platforms and regulators.\u003c/p\u003e\n\u003cp\u003eIn addition to simply gaining access, there is the risk of data manipulation. If malicious individuals obtain the secret, they could tamper with\nuser content on Spotify. This includes modifying playlists, deleting beloved tracks, or even adding unsolicited ones. Such actions not only disrupt\nthe user experience but also violate the trust that users have in both Spotify and third-party applications connected to it.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"spotify_secret\", \"f3fbd32510154334aaf0394aca3ac4c3\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"spotify_secret\", System.getenv(\"SPOTIFY_SECRET\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6696",
    "name": "SendGrid keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSendGrid keys are used for authentication and authorization when using the SendGrid email delivery service.\u003c/p\u003e\n\u003cp\u003eIf a SendGrid key were to accidentally fall into the hands of unintended recipients, it could have severe repercussions for your email\ndelivery.\u003c/p\u003e\n\u003cp\u003eFirstly, unauthorized individuals who gain access to your SendGrid account could exploit its features to send emails on your behalf. This\nunauthorized access might result in the sending of spam emails, phishing attempts, or other forms of unsolicited and potentially harmful content. This\nnot only compromises the integrity of your email communications but also poses a risk to the recipients who may unknowingly engage with malicious\nmessages.\u003c/p\u003e\n\u003cp\u003eSecondly, the leaked SendGrid key could trigger a high volume of email activity, potentially raising suspicions. SendGrid, being vigilant about\nsuch activities, may flag your account and take action against it. This could lead to the suspension or termination of your SendGrid account,\ndisrupting your email delivery service and causing significant inconvenience and potential loss of communication with your customers or clients.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"sg_key\", \"SG.Wjo5QoWqTmrFtMUf8m2T.CIY0Z24e5sJawIymiK_ZKC_7I15yDP0ur1yt0qtkR9Go\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"sg_key\", System.getenv(\"SG_KEY\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e SendGrid Documentation - \u003ca href\u003d\"https://docs.sendgrid.com/ui/account-and-settings/api-keys\"\u003eAPI Keys\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eSendGrid keys are used for authentication and authorization when using the SendGrid email delivery service.\u003c/p\u003e\n\u003cp\u003eIf a SendGrid key were to accidentally fall into the hands of unintended recipients, it could have severe repercussions for your email\ndelivery.\u003c/p\u003e\n\u003cp\u003eFirstly, unauthorized individuals who gain access to your SendGrid account could exploit its features to send emails on your behalf. This\nunauthorized access might result in the sending of spam emails, phishing attempts, or other forms of unsolicited and potentially harmful content. This\nnot only compromises the integrity of your email communications but also poses a risk to the recipients who may unknowingly engage with malicious\nmessages.\u003c/p\u003e\n\u003cp\u003eSecondly, the leaked SendGrid key could trigger a high volume of email activity, potentially raising suspicions. SendGrid, being vigilant about\nsuch activities, may flag your account and take action against it. This could lead to the suspension or termination of your SendGrid account,\ndisrupting your email delivery service and causing significant inconvenience and potential loss of communication with your customers or clients.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"sg_key\", \"SG.Wjo5QoWqTmrFtMUf8m2T.CIY0Z24e5sJawIymiK_ZKC_7I15yDP0ur1yt0qtkR9Go\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"sg_key\", System.getenv(\"SG_KEY\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e SendGrid Documentation - \u003ca href\u003d\"https://docs.sendgrid.com/ui/account-and-settings/api-keys\"\u003eAPI Keys\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6334",
    "name": "Google API keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eGoogle API keys are used to authenticate applications that consume Google Cloud APIs. They are especially useful for accessing public data\nanonymously (like Google Maps), and are used to associate API requests with your project for quota and billing.\u003c/p\u003e\n\u003cp\u003eAPI keys are not strictly secret as they are often embedded into client side code or mobile applications that consume Google Cloud APIs. Still,\nthey should be secured and should never be treated as public information.\u003c/p\u003e\n\u003cp\u003eAn unrestricted Google API key being disclosed in a public source code would be used by malicious actors to consume Google APIs on the behalf of\nyour application. This will have a financial impact as your organisation will be billed for the data consumed by the malicious actor. If your account\nhas enabled quota to cap the API consumption of your application, this quota can be exceeded, leaving your application unable to request the Google\nAPIs it requires to function properly.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the Google API keys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, Google API keys should not be stored along with the application code as they could be disclosed to a large audience or could be\nmade public.\u003c/p\u003e\n\u003cp\u003eGoogle API keys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On Google Cloud this service is called \u003ca\nhref\u003d\"https://cloud.google.com/secret-manager\"\u003eSecret Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003cp\u003eIn addition to secure storage, it’s important to apply \u003ca\nhref\u003d\"https://cloud.google.com/docs/authentication/api-keys#api_key_restrictions\"\u003erestrictions\u003c/a\u003e to API keys in order to mitigate the impacts when\nthey are discovered by malicious actors.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/docs/authentication/api-keys\"\u003eGoogle Cloud\u003c/a\u003e - Using API keys \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eGoogle API keys are used to authenticate applications that consume Google Cloud APIs. They are especially useful for accessing public data\nanonymously (like Google Maps), and are used to associate API requests with your project for quota and billing.\u003c/p\u003e\n\u003cp\u003eAPI keys are not strictly secret as they are often embedded into client side code or mobile applications that consume Google Cloud APIs. Still,\nthey should be secured and should never be treated as public information.\u003c/p\u003e\n\u003cp\u003eAn unrestricted Google API key being disclosed in a public source code would be used by malicious actors to consume Google APIs on the behalf of\nyour application. This will have a financial impact as your organisation will be billed for the data consumed by the malicious actor. If your account\nhas enabled quota to cap the API consumption of your application, this quota can be exceeded, leaving your application unable to request the Google\nAPIs it requires to function properly.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the Google API keys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, Google API keys should not be stored along with the application code as they could be disclosed to a large audience or could be\nmade public.\u003c/p\u003e\n\u003cp\u003eGoogle API keys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On Google Cloud this service is called \u003ca\nhref\u003d\"https://cloud.google.com/secret-manager\"\u003eSecret Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003cp\u003eIn addition to secure storage, it’s important to apply \u003ca\nhref\u003d\"https://cloud.google.com/docs/authentication/api-keys#api_key_restrictions\"\u003erestrictions\u003c/a\u003e to API keys in order to mitigate the impacts when\nthey are discovered by malicious actors.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cloud.google.com/docs/authentication/api-keys\"\u003eGoogle Cloud\u003c/a\u003e - Using API keys \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6697",
    "name": "MySQL database passwords should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in MySQL are used to authenticate users against the database engine. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a MySQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored within it\nand the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a MySQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the\npurposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the MySQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eGeneral-purpose MySQL log files contain information about user authentication. They can be used to audit malicious use of password-leak-affected\naccounts.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"mysql://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\nuser \u003d os.environ[\"MYSQL_USER\"]\npassword \u003d os.environ[\"MYSQL_PASSWORD\"]\n\nuri \u003d f\"mysql://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords in MySQL are used to authenticate users against the database engine. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a MySQL password leaks to an unintended audience, it can have serious consequences for the security of your database, the data stored within it\nand the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a MySQL database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the\npurposes the application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the MySQL instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eGeneral-purpose MySQL log files contain information about user authentication. They can be used to audit malicious use of password-leak-affected\naccounts.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nuri \u003d \"mysql://foouser:foopass@example.com/testdb\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\nuser \u003d os.environ[\"MYSQL_USER\"]\npassword \u003d os.environ[\"MYSQL_PASSWORD\"]\n\nuri \u003d f\"mysql://{user}:{password}@example.com/testdb\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6337",
    "name": "IBM API keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIBM API keys are used to authenticate applications that consume IBM Cloud APIs.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with IBM then it requires credentials to access all the resources it needs to function properly. Resources that can\nbe accessed depend on the permissions granted to the account. These credentials may authenticate a user who has unrestricted access to all resources\nin your account, including billing information.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the IBM API keys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, IBM API keys should not be stored along with the application code as they could be disclosed to a large audience or could be made\npublic.\u003c/p\u003e\n\u003cp\u003eIBM API keys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On IBM Cloud this service is called \u003ca\nhref\u003d\"https://www.ibm.com/cloud/secrets-manager\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003cp\u003eIn addition to secure storage, it’s important to apply \u003ca\nhref\u003d\"https://www.ibm.com/docs/it/db2oc?topic\u003dmanagement-identity-access-iam-cloud\"\u003erestrictions\u003c/a\u003e to API keys in order to mitigate the impacts when\nthey are discovered by malicious actors.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIBM API keys are used to authenticate applications that consume IBM Cloud APIs.\u003c/p\u003e\n\u003cp\u003eIf your application interacts with IBM then it requires credentials to access all the resources it needs to function properly. Resources that can\nbe accessed depend on the permissions granted to the account. These credentials may authenticate a user who has unrestricted access to all resources\nin your account, including billing information.\u003c/p\u003e\n\u003ch2\u003eRecommended Secure Coding Practices\u003c/h2\u003e\n\u003cp\u003eOnly administrators should have access to the IBM API keys used by your application.\u003c/p\u003e\n\u003cp\u003eAs a consequence, IBM API keys should not be stored along with the application code as they could be disclosed to a large audience or could be made\npublic.\u003c/p\u003e\n\u003cp\u003eIBM API keys should be stored outside of the code in a file that is never committed to your application code repository.\u003c/p\u003e\n\u003cp\u003eIf possible, a better alternative is to use your cloud provider’s service for managing secrets. On IBM Cloud this service is called \u003ca\nhref\u003d\"https://www.ibm.com/cloud/secrets-manager\"\u003eSecrets Manager\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen credentials are disclosed in the application code, consider them as compromised and revoke them immediately.\u003c/p\u003e\n\u003cp\u003eIn addition to secure storage, it’s important to apply \u003ca\nhref\u003d\"https://www.ibm.com/docs/it/db2oc?topic\u003dmanagement-identity-access-iam-cloud\"\u003erestrictions\u003c/a\u003e to API keys in order to mitigate the impacts when\nthey are discovered by malicious actors.\u003c/p\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\u003eOWASP Top 10 2021 Category A7\u003c/a\u003e - Identification and\n  Authentication Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data\n  Exposure \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eMITRE, CWE-798\u003c/a\u003e - Use of Hard-coded Credentials \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eMITRE, CWE-259\u003c/a\u003e - Use of Hard-coded Password \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eSANS Top 25\u003c/a\u003e - Porous Defenses \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6338",
    "name": "Azure Storage Account Keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAzure Storage Account Keys are used to authenticate and authorize access to Azure Storage resources, such as blobs, queues, tables, and files.\nThese keys are used to authenticate requests made against the storage account.\u003c/p\u003e\n\u003cp\u003eIf an Azure Storage Account Key is leaked to an unintended audience, it can pose a significant security risk to your Azure Storage account.\u003c/p\u003e\n\u003cp\u003eAn attacker with access to your storage account key can potentially access and modify all the data stored in your storage account. They can also\ncreate new resources, delete existing ones, and perform other actions that can compromise the integrity and confidentiality of your data.\u003c/p\u003e\n\u003cp\u003eIn addition, an attacker with access to your storage account key can also incur charges on your account by creating and using resources, which can\nresult in unexpected billing charges.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"storage_key\", \"4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg\u003d\u003d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"storage_key\", System.getenv(\"STORAGE_KEY\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs\u003dazure-portal\"\u003eManage\n  storage account access keys\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAzure Storage Account Keys are used to authenticate and authorize access to Azure Storage resources, such as blobs, queues, tables, and files.\nThese keys are used to authenticate requests made against the storage account.\u003c/p\u003e\n\u003cp\u003eIf an Azure Storage Account Key is leaked to an unintended audience, it can pose a significant security risk to your Azure Storage account.\u003c/p\u003e\n\u003cp\u003eAn attacker with access to your storage account key can potentially access and modify all the data stored in your storage account. They can also\ncreate new resources, delete existing ones, and perform other actions that can compromise the integrity and confidentiality of your data.\u003c/p\u003e\n\u003cp\u003eIn addition, an attacker with access to your storage account key can also incur charges on your account by creating and using resources, which can\nresult in unexpected billing charges.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"storage_key\", \"4dVw+l0W8My+FwuZ08dWXn+gHxcmBtS7esLAQSrm6/Om3jeyUKKGMkfAh38kWZlItThQYsg31v23A0w/uVP4pg\u003d\u003d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"storage_key\", System.getenv(\"STORAGE_KEY\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs\u003dazure-portal\"\u003eManage\n  storage account access keys\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6684",
    "name": "Azure Subscription Keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAzure Subscription Keys are used to authenticate and authorize access to Azure resources and services. These keys are unique identifiers that are\nassociated with an Azure subscription and are used to control access to resources such as virtual machines, storage accounts, and databases.\nSubscription keys are typically used in API requests to Azure services, and they help ensure that only authorized users and applications can access\nand modify resources within an Azure subscription.\u003c/p\u003e\n\u003cp\u003eIf an Azure Subscription Key is leaked to an unintended audience, it can pose a significant security risk to the Azure subscription and the\nresources it contains. An attacker who gains access to a subscription key can use it to authenticate and access resources within the subscription,\npotentially causing data breaches, data loss, or other malicious activities.\u003c/p\u003e\n\u003cp\u003eDepending on the level of access granted by the subscription key, an attacker could potentially create, modify, or delete resources within the\nsubscription, or even take control of the entire subscription. This could result in significant financial losses, reputational damage, and legal\nliabilities for the organization that owns the subscription.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eMicrosoft Azure provides an activity log that can be used to audit the access to the API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"subscription_key\", \"efbb1a98f026d061464af685cd16dcd3\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"subscription_key\", System.getenv(\"SUBSCRIPTION_KEY\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://learn.microsoft.com/en-us/azure/api-management/api-management-subscriptions\"\u003eSubscriptions in Azure\n  API Management\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/activity-log\"\u003eAzure Monitor activity\n  log\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAzure Subscription Keys are used to authenticate and authorize access to Azure resources and services. These keys are unique identifiers that are\nassociated with an Azure subscription and are used to control access to resources such as virtual machines, storage accounts, and databases.\nSubscription keys are typically used in API requests to Azure services, and they help ensure that only authorized users and applications can access\nand modify resources within an Azure subscription.\u003c/p\u003e\n\u003cp\u003eIf an Azure Subscription Key is leaked to an unintended audience, it can pose a significant security risk to the Azure subscription and the\nresources it contains. An attacker who gains access to a subscription key can use it to authenticate and access resources within the subscription,\npotentially causing data breaches, data loss, or other malicious activities.\u003c/p\u003e\n\u003cp\u003eDepending on the level of access granted by the subscription key, an attacker could potentially create, modify, or delete resources within the\nsubscription, or even take control of the entire subscription. This could result in significant financial losses, reputational damage, and legal\nliabilities for the organization that owns the subscription.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eMicrosoft Azure provides an activity log that can be used to audit the access to the API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"subscription_key\", \"efbb1a98f026d061464af685cd16dcd3\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"subscription_key\", System.getenv(\"SUBSCRIPTION_KEY\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://learn.microsoft.com/en-us/azure/api-management/api-management-subscriptions\"\u003eSubscriptions in Azure\n  API Management\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Microsoft Documentation - \u003ca href\u003d\"https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/activity-log\"\u003eAzure Monitor activity\n  log\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6706",
    "name": "Cryptographic private keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA cryptographic private key is a piece of sensitive information that is used in asymmetric cryptography. They are used in conjunction with public\nkeys to secure communications and authenticate digital signatures.\u003c/p\u003e\n\u003cp\u003ePrivate keys can be used to achieve two main cryptographic operations, encryption or digital signature. Those operations are the basis of multiple\nhigher-level security mechanisms such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e User authentication \u003c/li\u003e\n  \u003cli\u003e Servers authentication, for example in the X509 trust model \u003c/li\u003e\n  \u003cli\u003e E-mail encryption \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDisclosing a cryptographic private key to an unintended audience can have severe security consequences. The exact impact will vary depending on the\nrole of the key and the assets it protects.\u003c/p\u003e\n\u003cp\u003eFor example, if the key is used in conjunction with an X509 certificate to authenticate a web server as part of TLS communications, attackers will\nbe able to impersonate that server. This leads to Man-In-The-Middle-Attacks that would affect both the confidentiality and integrity of the\ncommunications from clients to that server.\u003c/p\u003e\n\u003cp\u003eIf the key was used as part of e-mail protocols, attackers might be able to send e-mails on behalf of the key owner or decrypt previously encrypted\nemails. This might lead to sensitive information disclosure and reputation loss.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003eIn most cases, if the key is used as part of a larger trust model (X509, PGP, etc), it is necessary to issue and publish a revocation certificate.\nDoing so will ensure that all people and assets that rely on this key for security operations are aware of its compromise and stop trusting it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate_key \u003d \"-----BEGIN EC PRIVATE KEY-----\" \\\n    \"MF8CAQEEGEfVxjrMPigNhGP6DqH6DPeUZPbaoaCCXaAKBggqhkjOPQMBAaE0AzIA\" \\\n    \"BCIxho34upZyXDi/AUy/TBisGeh4yKJN7pit9Z+nKs4QajVy97X8W9JdySlbWeRt\" \\\n    \"2w\u003d\u003d\" \\\n    \"-----END EC PRIVATE KEY-----\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nwith open(\"/path/to/private.key\",\"r\") as key_file:\n    private_key \u003d key_file.read()\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA cryptographic private key is a piece of sensitive information that is used in asymmetric cryptography. They are used in conjunction with public\nkeys to secure communications and authenticate digital signatures.\u003c/p\u003e\n\u003cp\u003ePrivate keys can be used to achieve two main cryptographic operations, encryption or digital signature. Those operations are the basis of multiple\nhigher-level security mechanisms such as:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e User authentication \u003c/li\u003e\n  \u003cli\u003e Servers authentication, for example in the X509 trust model \u003c/li\u003e\n  \u003cli\u003e E-mail encryption \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDisclosing a cryptographic private key to an unintended audience can have severe security consequences. The exact impact will vary depending on the\nrole of the key and the assets it protects.\u003c/p\u003e\n\u003cp\u003eFor example, if the key is used in conjunction with an X509 certificate to authenticate a web server as part of TLS communications, attackers will\nbe able to impersonate that server. This leads to Man-In-The-Middle-Attacks that would affect both the confidentiality and integrity of the\ncommunications from clients to that server.\u003c/p\u003e\n\u003cp\u003eIf the key was used as part of e-mail protocols, attackers might be able to send e-mails on behalf of the key owner or decrypt previously encrypted\nemails. This might lead to sensitive information disclosure and reputation loss.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003eIn most cases, if the key is used as part of a larger trust model (X509, PGP, etc), it is necessary to issue and publish a revocation certificate.\nDoing so will ensure that all people and assets that rely on this key for security operations are aware of its compromise and stop trusting it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprivate_key \u003d \"-----BEGIN EC PRIVATE KEY-----\" \\\n    \"MF8CAQEEGEfVxjrMPigNhGP6DqH6DPeUZPbaoaCCXaAKBggqhkjOPQMBAaE0AzIA\" \\\n    \"BCIxho34upZyXDi/AUy/TBisGeh4yKJN7pit9Z+nKs4QajVy97X8W9JdySlbWeRt\" \\\n    \"2w\u003d\u003d\" \\\n    \"-----END EC PRIVATE KEY-----\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nwith open(\"/path/to/private.key\",\"r\") as key_file:\n    private_key \u003d key_file.read()\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6704",
    "name": "Riot API keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eRiot API keys are used to access the Riot Games API, which provides developers with programmatic access to various data and services related to\nRiot Games\u0027 products, such as League of Legends. These API keys are used to authenticate and authorize requests made to the API, allowing developers\nto retrieve game data, player statistics, match history, and other related information.\u003c/p\u003e\n\u003cp\u003eIf a Riot API key is leaked to an unintended audience, it can have significant consequences. One of the main risks is unauthorized access. The\nunintended audience may exploit the leaked API key to gain entry to the Riot Games API. This can result in the unauthorized retrieval of sensitive\ndata and misuse of services provided by the API. It poses a serious security threat as it allows individuals to access information that they should\nnot have access to, potentially compromising the privacy and integrity of the data.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"api_key\", \"RGAPI-924549e3-31a9-406e-9e92-25ed41206dce\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"api_key\", System.getenv(\"API_KEY\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eRiot API keys are used to access the Riot Games API, which provides developers with programmatic access to various data and services related to\nRiot Games\u0027 products, such as League of Legends. These API keys are used to authenticate and authorize requests made to the API, allowing developers\nto retrieve game data, player statistics, match history, and other related information.\u003c/p\u003e\n\u003cp\u003eIf a Riot API key is leaked to an unintended audience, it can have significant consequences. One of the main risks is unauthorized access. The\nunintended audience may exploit the leaked API key to gain entry to the Riot Games API. This can result in the unauthorized retrieval of sensitive\ndata and misuse of services provided by the API. It poses a serious security threat as it allows individuals to access information that they should\nnot have access to, potentially compromising the privacy and integrity of the data.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"api_key\", \"RGAPI-924549e3-31a9-406e-9e92-25ed41206dce\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"api_key\", System.getenv(\"API_KEY\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6705",
    "name": "OpenWeather API keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAn OpenWeather API key is a unique identifier that allows you to access the OpenWeatherMap API. The OpenWeatherMap API provides weather data and\nforecasts for various locations worldwide.\u003c/p\u003e\n\u003cp\u003eIf an OpenWeather API key leaks to an unintended audience, it can have several security consequences. Attackers may use the leaked API key to\naccess the OpenWeatherMap API and consume the weather data without proper authorization. This can lead to excessive usage, potentially exceeding the\nAPI rate limits, or violating the terms of service.\u003c/p\u003e\n\u003cp\u003eMoreover, depending on the pricing model of the corresponding OpenWeather account, unauthorized usage of the leaked API key can result in\nunexpected charges or increased costs. Attackers may consume a large amount of data or make excessive requests, leading to additional expenses for the\nAPI key owner.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nurl \u003d \"http://api.openweathermap.org/data/2.5/weather?units\u003dimperial\u0026amp;appid\u003dae73acab47d0fc4b71b634d943b00518\u0026amp;q\u003d\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\ntoken \u003d os.environ[\"OW_TOKEN\"]\n\nuri \u003d \"http://api.openweathermap.org/data/2.5/weather?units\u003dimperial\u0026amp;appid\u003d{token}\u0026amp;q\u003d\"\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eOpenWeather Documentation - \u003ca href\u003d\"https://openweathermap.org/appid\"\u003eAPI keys\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eAn OpenWeather API key is a unique identifier that allows you to access the OpenWeatherMap API. The OpenWeatherMap API provides weather data and\nforecasts for various locations worldwide.\u003c/p\u003e\n\u003cp\u003eIf an OpenWeather API key leaks to an unintended audience, it can have several security consequences. Attackers may use the leaked API key to\naccess the OpenWeatherMap API and consume the weather data without proper authorization. This can lead to excessive usage, potentially exceeding the\nAPI rate limits, or violating the terms of service.\u003c/p\u003e\n\u003cp\u003eMoreover, depending on the pricing model of the corresponding OpenWeather account, unauthorized usage of the leaked API key can result in\nunexpected charges or increased costs. Attackers may consume a large amount of data or make excessive requests, leading to additional expenses for the\nAPI key owner.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nurl \u003d \"http://api.openweathermap.org/data/2.5/weather?units\u003dimperial\u0026amp;appid\u003dae73acab47d0fc4b71b634d943b00518\u0026amp;q\u003d\"\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\ntoken \u003d os.environ[\"OW_TOKEN\"]\n\nuri \u003d \"http://api.openweathermap.org/data/2.5/weather?units\u003dimperial\u0026amp;appid\u003d{token}\u0026amp;q\u003d\"\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eOpenWeather Documentation - \u003ca href\u003d\"https://openweathermap.org/appid\"\u003eAPI keys\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6687",
    "name": "Django secret keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a Django secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key\nis used to sign cookies and other sensitive data so that an attacker could potentially use it to perform malicious actions.\u003c/p\u003e\n\u003cp\u003eFor example, an attacker could use the secret key to create their own cookies that appear to be legitimate, allowing them to bypass authentication\nand gain access to sensitive data or functionality.\u003c/p\u003e\n\u003cp\u003eIn the worst-case scenario, an attacker could be able to execute arbitrary code on the application and take over its hosting server.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003eIn Django, changing the secret value is sufficient to invalidate any data that it protected. It is important to not add the revoked secret to the\n\u003ccode\u003eSECRET_KEY_FALLBACKS\u003c/code\u003e list. Doing so would not prevent previously protected data from being used.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSECRET_KEY \u003d \u0027r\u0026amp;lvybzry1*k+qq)\u003dx-!\u003d0yd5l5#1gxzk!82@ru25*ntos3_9^\u0027\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nSECRET_KEY \u003d os.environ[\"SECRET_KEY\"]\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY\"\u003eDjango documentation\u003c/a\u003e - Settings - SECRET_KEY \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a Django secret key leaks to an unintended audience, it can have serious security implications for the corresponding application. The secret key\nis used to sign cookies and other sensitive data so that an attacker could potentially use it to perform malicious actions.\u003c/p\u003e\n\u003cp\u003eFor example, an attacker could use the secret key to create their own cookies that appear to be legitimate, allowing them to bypass authentication\nand gain access to sensitive data or functionality.\u003c/p\u003e\n\u003cp\u003eIn the worst-case scenario, an attacker could be able to execute arbitrary code on the application and take over its hosting server.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003eIn Django, changing the secret value is sufficient to invalidate any data that it protected. It is important to not add the revoked secret to the\n\u003ccode\u003eSECRET_KEY_FALLBACKS\u003c/code\u003e list. Doing so would not prevent previously protected data from being used.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nSECRET_KEY \u003d \u0027r\u0026amp;lvybzry1*k+qq)\u003dx-!\u003d0yd5l5#1gxzk!82@ru25*ntos3_9^\u0027\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\n\nSECRET_KEY \u003d os.environ[\"SECRET_KEY\"]\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY\"\u003eDjango documentation\u003c/a\u003e - Settings - SECRET_KEY \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6688",
    "name": "Facebook app keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA Facebook application secret key is a unique authentication token assigned to a Facebook application. It is used to authenticate and authorize the\napplication to access Facebook’s APIs and services. This key is required to perform actions on Facebook API, such as retrieving user data, posting on\nbehalf of users, or accessing various Facebook features.\u003c/p\u003e\n\u003cp\u003eIf a Facebook application secret key leaks to an unintended audience, it can have serious security-related consequences both for the associated\nFacebook application and its users. Especially, attackers knowing an application’s secret key will be able to access users\u0027 data that the application\nhas been granted access to.\u003c/p\u003e\n\u003cp\u003eThis can represent a severe confidentiality loss for Personally Identifiable Information. This might be against national regulatory requirements in\nsome countries.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"facebook_secret\", \"a569a8eee3802560e1416edbc4ee119d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"facebook_secret\", System.getenv(\"FACEBOOK_SECRET\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Facebook documentation - \u003ca href\u003d\"https://developers.facebook.com/docs/facebook-login/security\"\u003eLogin Security\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA Facebook application secret key is a unique authentication token assigned to a Facebook application. It is used to authenticate and authorize the\napplication to access Facebook’s APIs and services. This key is required to perform actions on Facebook API, such as retrieving user data, posting on\nbehalf of users, or accessing various Facebook features.\u003c/p\u003e\n\u003cp\u003eIf a Facebook application secret key leaks to an unintended audience, it can have serious security-related consequences both for the associated\nFacebook application and its users. Especially, attackers knowing an application’s secret key will be able to access users\u0027 data that the application\nhas been granted access to.\u003c/p\u003e\n\u003cp\u003eThis can represent a severe confidentiality loss for Personally Identifiable Information. This might be against national regulatory requirements in\nsome countries.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"facebook_secret\", \"a569a8eee3802560e1416edbc4ee119d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"facebook_secret\", System.getenv(\"FACEBOOK_SECRET\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e Facebook documentation - \u003ca href\u003d\"https://developers.facebook.com/docs/facebook-login/security\"\u003eLogin Security\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6686",
    "name": "Clarifai API keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a Clarifai API key leaks to an unintended audience, it could potentially lead to unauthorized access to the Clarifai account and its associated\ndata. This could result in the compromise of sensitive data or financial loss.\u003c/p\u003e\n\u003ch4\u003eFinancial loss\u003c/h4\u003e\n\u003cp\u003eFinancial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.\u003c/p\u003e\n\u003cp\u003eThis additional use of the secret will lead to added costs with the service provider.\u003c/p\u003e\n\u003cp\u003eMoreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nmetadata \u003d ((\u0027authorization\u0027,\u0027Key d819f799b90bc8dbaffd83661782dbb7\u0027),)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nmetadata \u003d ((\u0027authorization\u0027,os.environ[\"CLARIFAI_API_KEY\"]),)\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eIf a Clarifai API key leaks to an unintended audience, it could potentially lead to unauthorized access to the Clarifai account and its associated\ndata. This could result in the compromise of sensitive data or financial loss.\u003c/p\u003e\n\u003ch4\u003eFinancial loss\u003c/h4\u003e\n\u003cp\u003eFinancial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.\u003c/p\u003e\n\u003cp\u003eThis additional use of the secret will lead to added costs with the service provider.\u003c/p\u003e\n\u003cp\u003eMoreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nmetadata \u003d ((\u0027authorization\u0027,\u0027Key d819f799b90bc8dbaffd83661782dbb7\u0027),)\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nimport os\nfrom clarifai_grpc.grpc.api.status import status_code_pb2\n\nmetadata \u003d ((\u0027authorization\u0027,os.environ[\"CLARIFAI_API_KEY\"]),)\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6702",
    "name": "SonarQube tokens should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA SonarQube token is a unique key that serves as an authentication mechanism for accessing the SonarQube platform’s APIs. It is used to securely\nauthenticate and authorize external tools or services to interact with SonarQube.\u003c/p\u003e\n\u003cp\u003eTokens are typically generated for specific users or applications and can be configured with different levels of access permissions. By using a\ntoken, external tools or services can perform actions such as analyzing code, retrieving analysis results, creating projects, or managing quality\nprofiles within SonarQube.\u003c/p\u003e\n\u003cp\u003eIf a SonarQube token leaks to an unintended audience, it can pose a security risk to the SonarQube instance and the associated projects. Attackers\nmay use the leaked token to gain unauthorized access to the SonarQube instance. They can potentially view sensitive information, modify project\nsettings, or perform other dangerous actions.\u003c/p\u003e\n\u003cp\u003eAdditionally, attackers with access to a token can modify code analysis results. This can lead to false positives or negatives in the analysis,\ncompromising the accuracy and reliability of the platform.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eThe SonarQube audit log can be downloaded from the product web interface and can be used to audit the malicious use of the compromised key. This\nfeature is available starting with SonarQube Enterprise Edition.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"sonar_secret\", \"squ_b4556a16fa2d28519d2451a911d2e073024010bc\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"sonar_secret\", System.getenv(\"SONAR_SECRET\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e SonarQube Documentation - \u003ca\n  href\u003d\"https://docs.sonarsource.com/sonarqube/latest/user-guide/user-account/generating-and-using-tokens/\"\u003eGenerating and using tokens\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SonarQube Documentation - \u003ca href\u003d\"https://docs.sonarsource.com/sonarqube/latest/instance-administration/security/\"\u003eSecurity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA SonarQube token is a unique key that serves as an authentication mechanism for accessing the SonarQube platform’s APIs. It is used to securely\nauthenticate and authorize external tools or services to interact with SonarQube.\u003c/p\u003e\n\u003cp\u003eTokens are typically generated for specific users or applications and can be configured with different levels of access permissions. By using a\ntoken, external tools or services can perform actions such as analyzing code, retrieving analysis results, creating projects, or managing quality\nprofiles within SonarQube.\u003c/p\u003e\n\u003cp\u003eIf a SonarQube token leaks to an unintended audience, it can pose a security risk to the SonarQube instance and the associated projects. Attackers\nmay use the leaked token to gain unauthorized access to the SonarQube instance. They can potentially view sensitive information, modify project\nsettings, or perform other dangerous actions.\u003c/p\u003e\n\u003cp\u003eAdditionally, attackers with access to a token can modify code analysis results. This can lead to false positives or negatives in the analysis,\ncompromising the accuracy and reliability of the platform.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eThe SonarQube audit log can be downloaded from the product web interface and can be used to audit the malicious use of the compromised key. This\nfeature is available starting with SonarQube Enterprise Edition.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"sonar_secret\", \"squ_b4556a16fa2d28519d2451a911d2e073024010bc\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"sonar_secret\", System.getenv(\"SONAR_SECRET\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e SonarQube Documentation - \u003ca\n  href\u003d\"https://docs.sonarsource.com/sonarqube/latest/user-guide/user-account/generating-and-using-tokens/\"\u003eGenerating and using tokens\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SonarQube Documentation - \u003ca href\u003d\"https://docs.sonarsource.com/sonarqube/latest/instance-administration/security/\"\u003eSecurity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6703",
    "name": "Database passwords should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords are often used to authenticate users against database engines. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a database password leaks to an unintended audience, it can have serious consequences for the security of your database instance, the data\nstored within it, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the purposes\nthe application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the database instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic static string ConnectionString \u003d \"server\u003ddatabase-server;uid\u003duser;pwd\u003dP@ssw0rd;database\u003dProductionData\";\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic static string ConnectionString \u003d String.format(\n    \"server\u003ddatabase-server;uid\u003duser;pwd\u003d%s;database\u003dProductionData\",\n    System.getenv(\"DB_PASSWORD\")\n)\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003ePasswords are often used to authenticate users against database engines. They are associated with user accounts that are granted specific\npermissions over the database and its hosted data.\u003c/p\u003e\n\u003cp\u003eIf a database password leaks to an unintended audience, it can have serious consequences for the security of your database instance, the data\nstored within it, and the applications that rely on it.\u003c/p\u003e\n\u003ch4\u003eCompromise of sensitive data\u003c/h4\u003e\n\u003cp\u003eIf the affected service is used to store or process personally identifiable information or other sensitive data, attackers knowing an\nauthentication secret could be able to access it. Depending on the type of data that is compromised, it could lead to privacy violations, identity\ntheft, financial loss, or other negative outcomes.\u003c/p\u003e\n\u003cp\u003eIn most cases, a company suffering a sensitive data compromise will face a reputational loss when the security issue is publicly disclosed.\u003c/p\u003e\n\u003ch4\u003eSecurity downgrade\u003c/h4\u003e\n\u003cp\u003eApplications relying on a database instance can suffer a security downgrade if an access password is leaked to attackers. Depending on the purposes\nthe application uses the database for, consequences can range from low-severity issues, like defacement, to complete compromise.\u003c/p\u003e\n\u003cp\u003eFor example, if the database instance is used as part of the authentication process of an application, attackers with access to the database will\nlikely be able to bypass this security mechanism.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\npublic static string ConnectionString \u003d \"server\u003ddatabase-server;uid\u003duser;pwd\u003dP@ssw0rd;database\u003dProductionData\";\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\npublic static string ConnectionString \u003d String.format(\n    \"server\u003ddatabase-server;uid\u003duser;pwd\u003d%s;database\u003dProductionData\",\n    System.getenv(\"DB_PASSWORD\")\n)\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6689",
    "name": "GitHub tokens should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eGitHub tokens are used for authentication and authorization purposes when interacting with the GitHub API. They serve as a way to identify and\nauthenticate users or applications that are making requests to the GitHub API.\u003c/p\u003e\n\u003cp\u003eThe consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.\u003c/p\u003e\n\u003ch4\u003eFinancial loss\u003c/h4\u003e\n\u003cp\u003eFinancial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.\u003c/p\u003e\n\u003cp\u003eThis additional use of the secret will lead to added costs with the service provider.\u003c/p\u003e\n\u003cp\u003eMoreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.\u003c/p\u003e\n\u003ch4\u003eApplication’s security downgrade\u003c/h4\u003e\n\u003cp\u003eA downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.\u003c/p\u003e\n\u003cp\u003eFor example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"token\", \"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\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"token\", System.getenv(\"TOKEN\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eGitHub documentation - \u003ca\nhref\u003d\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\"\u003eManaging your personal\naccess tokens\u003c/a\u003e\u003c/p\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eGitHub tokens are used for authentication and authorization purposes when interacting with the GitHub API. They serve as a way to identify and\nauthenticate users or applications that are making requests to the GitHub API.\u003c/p\u003e\n\u003cp\u003eThe consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.\u003c/p\u003e\n\u003ch4\u003eFinancial loss\u003c/h4\u003e\n\u003cp\u003eFinancial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.\u003c/p\u003e\n\u003cp\u003eThis additional use of the secret will lead to added costs with the service provider.\u003c/p\u003e\n\u003cp\u003eMoreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the application’s users.\u003c/p\u003e\n\u003ch4\u003eApplication’s security downgrade\u003c/h4\u003e\n\u003cp\u003eA downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.\u003c/p\u003e\n\u003cp\u003eFor example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"token\", \"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\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"token\", System.getenv(\"TOKEN\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cp\u003eGitHub documentation - \u003ca\nhref\u003d\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\"\u003eManaging your personal\naccess tokens\u003c/a\u003e\u003c/p\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6700",
    "name": "RapidAPI keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA RapidAPI key is a unique identifier that allows you to access and use APIs provided by RapidAPI. This key is used to track your API usage, manage\nyour subscriptions, and ensure that you have the necessary permissions to access the APIs you are using. One RapidAPI key can be used to authenticate\nagainst a set of multiple other third-party services, depending on the key entitlement.\u003c/p\u003e\n\u003cp\u003eIf a RapidAPI key leaks to an unintended audience, it can have several potential consequences. Especially, attackers may use the leaked key to\naccess and utilize the APIs associated with that key without permission. This can result in unauthorized usage of API services, potentially leading to\nmisuse, abuse, or excessive consumption of resources.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eRapidAPI services include an audit trail feature that can be used to audit malicious use of the compromised key.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"rapidapi_key\", \"6f1bbe24b9mshcbb5030202794a4p18f7d0jsndd55ab0f981d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"rapidapi_key\", System.getenv(\"rapidapi_key\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e RapidAPI Documentation - \u003ca href\u003d\"https://docs.rapidapi.com/docs/keys#creating-or-rotating-a-rapid-api-key\"\u003eCreating or rotating a Rapid API\n  key\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e RapidAPI Documentation - \u003ca href\u003d\"https://docs.rapidapi.com/docs/audit-trails\"\u003eAudit Trails\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eA RapidAPI key is a unique identifier that allows you to access and use APIs provided by RapidAPI. This key is used to track your API usage, manage\nyour subscriptions, and ensure that you have the necessary permissions to access the APIs you are using. One RapidAPI key can be used to authenticate\nagainst a set of multiple other third-party services, depending on the key entitlement.\u003c/p\u003e\n\u003cp\u003eIf a RapidAPI key leaks to an unintended audience, it can have several potential consequences. Especially, attackers may use the leaked key to\naccess and utilize the APIs associated with that key without permission. This can result in unauthorized usage of API services, potentially leading to\nmisuse, abuse, or excessive consumption of resources.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAnalyze recent secret use\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.\u003c/p\u003e\n\u003cp\u003eThis operation should be part of a global incident response process.\u003c/p\u003e\n\u003cp\u003eRapidAPI services include an audit trail feature that can be used to audit malicious use of the compromised key.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"rapidapi_key\", \"6f1bbe24b9mshcbb5030202794a4p18f7d0jsndd55ab0f981d\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"rapidapi_key\", System.getenv(\"rapidapi_key\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentation\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e RapidAPI Documentation - \u003ca href\u003d\"https://docs.rapidapi.com/docs/keys#creating-or-rotating-a-rapid-api-key\"\u003eCreating or rotating a Rapid API\n  key\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e RapidAPI Documentation - \u003ca href\u003d\"https://docs.rapidapi.com/docs/audit-trails\"\u003eAudit Trails\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  },
  {
    "key": "secrets:S6701",
    "name": "Telegram bot keys should not be disclosed",
    "defaultSeverity": "BLOCKER",
    "type": "VULNERABILITY",
    "cleanCodeAttribute": "TRUSTWORTHY",
    "defaultImpacts": {
      "SECURITY": "HIGH"
    },
    "description": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e\n\u003ch2\u003eWhy is this an issue?\u003c/h2\u003e\n\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eTelegram bot keys are used to authenticate and authorize a bot to interact with the Telegram Bot API. These keys are essentially access tokens that\nallow the bot to send and receive messages, manage groups and channels, and perform other actions on behalf of the bot.\u003c/p\u003e\n\u003cp\u003eIf a Telegram bot key is accidentally exposed to an unintended audience, the primary concern is that unauthorized individuals may gain access to\nthe bot’s functionalities and data. This could result in misuse or abuse of the bot’s capabilities. For instance, unauthorized users could send\nunsolicited messages, spam users, or engage in other disruptive activities using the bot.\u003c/p\u003e\n\u003ch2\u003eHow to fix it\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\u003ch3\u003eCode examples\u003c/h3\u003e\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"api_token\", \"7299363101:AAWJlilLyeMaKgTTrrfsyrtxDqqI-cdI-TF\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"api_token\", System.getenv(\"API_TOKEN\"))\n\u003c/pre\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e",
    "descriptionSections": [
      {
        "key": "introduction",
        "htmlContent": "\u003cp\u003eSecret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.\u003c/p\u003e"
      },
      {
        "key": "root_cause",
        "htmlContent": "\u003cp\u003eIn most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who don’t need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.\u003c/p\u003e\n\u003cp\u003eThe trust issue can be more or less severe depending on the people’s role and entitlement.\u003c/p\u003e\n\u003ch3\u003eWhat is the potential impact?\u003c/h3\u003e\n\u003cp\u003eTelegram bot keys are used to authenticate and authorize a bot to interact with the Telegram Bot API. These keys are essentially access tokens that\nallow the bot to send and receive messages, manage groups and channels, and perform other actions on behalf of the bot.\u003c/p\u003e\n\u003cp\u003eIf a Telegram bot key is accidentally exposed to an unintended audience, the primary concern is that unauthorized individuals may gain access to\nthe bot’s functionalities and data. This could result in misuse or abuse of the bot’s capabilities. For instance, unauthorized users could send\nunsolicited messages, spam users, or engage in other disruptive activities using the bot.\u003c/p\u003e"
      },
      {
        "key": "how_to_fix",
        "htmlContent": "\u003cp\u003e\u003cstrong\u003eRevoke the secret\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRevoke any leaked secrets and remove them from the application source code.\u003c/p\u003e\n\u003cp\u003eBefore revoking the secret, ensure that no other applications or processes is using it. Other usages of the secret will also be impacted when the\nsecret is revoked.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse a secret vault\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA secret vault should be used to generate and store the new secret. This will ensure the secret’s security and prevent any further unexpected\ndisclosure.\u003c/p\u003e\n\u003cp\u003eDepending on the development platform and the leaked secret type, multiple solutions are currently available.\u003c/p\u003e\n\n\u003ch4\u003eNoncompliant code example\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"noncompliant\"\u003e\nprops.set(\"api_token\", \"7299363101:AAWJlilLyeMaKgTTrrfsyrtxDqqI-cdI-TF\")\n\u003c/pre\u003e\n\u003ch4\u003eCompliant solution\u003c/h4\u003e\n\u003cpre data-diff-id\u003d\"1\" data-diff-type\u003d\"compliant\"\u003e\nprops.set(\"api_token\", System.getenv(\"API_TOKEN\"))\n\u003c/pre\u003e"
      },
      {
        "key": "resources",
        "htmlContent": "\u003ch3\u003eStandards\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/798\"\u003eCWE-798 - Use of Hard-coded Credentials\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e MITRE - \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259\"\u003eCWE-259 - Use of Hard-coded Password\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e SANS - \u003ca href\u003d\"https://www.sans.org/top25-software-errors/#cat3\"\u003eTOP 25 Most Dangerous Software Errors\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
      }
    ],
    "params": {},
    "defaultParams": {},
    "isActiveByDefault": true,
    "language": "SECRETS",
    "tags": [
      "cwe"
    ],
    "deprecatedKeys": [],
    "educationPrincipleKeys": []
  }
]