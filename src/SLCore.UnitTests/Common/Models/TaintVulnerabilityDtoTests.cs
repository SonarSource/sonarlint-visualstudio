/*
 * SonarLint for Visual Studio
 * Copyright (C) 2016-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using Newtonsoft.Json;
using SonarLint.VisualStudio.SLCore.Common.Models;
using SonarLint.VisualStudio.SLCore.Service.Rules.Models;

namespace SonarLint.VisualStudio.SLCore.UnitTests.Common.Models;

[TestClass]
public class TaintVulnerabilityDtoTests
{
    [TestMethod]
    public void Deserialized_AsExpected()
    {
        var expected = new TaintVulnerabilityDto(
            Guid.Parse("f1276bb9-54a4-4cbd-b4ac-41d2541302ee"),
            "AXgSTUZl007Zyo8hMhT-",
            false,
            "roslyn.sonaranalyzer.security.cs:S5135",
            "Change this code to not deserialize user-controlled data.",
            "sonarlint-visualstudio-sampleprojects\\bound\\sonarcloud\\SLVS_Samples_Bound_VS2019\\Taint_CSharp_NetCore_WebAppReact\\Taint\\XmlSerializerInjectionController.cs",
            DateTimeOffset.FromUnixTimeMilliseconds(1615214736000),
            new MQRModeDetails(CleanCodeAttribute.COMPLETE, [new ImpactDto(SoftwareQuality.SECURITY, ImpactSeverity.HIGH)]),
            [
                new TaintFlowDto([
                    new TaintFlowLocationDto(new TextRangeWithHashDto(20, 32, 20, 58, "f677236678ac4b2ab451d66d4b251e8f"),
                        "Sink: this invocation is not safe; a malicious value can be injected into the caller",
                        "sonarlint-visualstudio-sampleprojects\\bound\\sonarcloud\\SLVS_Samples_Bound_VS2019\\Taint_CSharp_NetCore_WebAppReact\\Taint\\XmlSerializerInjectionController.cs")
                ])
            ],
            new TextRangeWithHashDto(20, 32, 20, 58, "f677236678ac4b2ab451d66d4b251e8f"),
            null,
            false);

        const string serialized =
            """
            {
              "id": "f1276bb9-54a4-4cbd-b4ac-41d2541302ee",
              "sonarServerKey": "AXgSTUZl007Zyo8hMhT-",
              "resolved": false,
              "ruleKey": "roslyn.sonaranalyzer.security.cs:S5135",
              "message": "Change this code to not deserialize user-controlled data.",
              "ideFilePath": "sonarlint-visualstudio-sampleprojects\\bound\\sonarcloud\\SLVS_Samples_Bound_VS2019\\Taint_CSharp_NetCore_WebAppReact\\Taint\\XmlSerializerInjectionController.cs",
              "introductionDate": 1615214736000,
              "severityMode": {
                "cleanCodeAttribute": "COMPLETE",
                "impacts": [
                  {
                    "softwareQuality": "SECURITY",
                    "impactSeverity": "HIGH"
                  }
                ]
              },
              "severity": "BLOCKER",
              "type": "VULNERABILITY",
              "flows": [
                {
                  "locations": [
                    {
                      "textRange": {
                        "startLine": 20,
                        "startLineOffset": 32,
                        "endLine": 20,
                        "endLineOffset": 58,
                        "hash": "f677236678ac4b2ab451d66d4b251e8f"
                      },
                      "message": "Sink: this invocation is not safe; a malicious value can be injected into the caller",
                      "filePath": "sonarlint-visualstudio-sampleprojects\\bound\\sonarcloud\\SLVS_Samples_Bound_VS2019\\Taint_CSharp_NetCore_WebAppReact\\Taint\\XmlSerializerInjectionController.cs"
                    }
                  ]
                }
              ],
              "textRange": {
                "startLine": 20,
                "startLineOffset": 32,
                "endLine": 20,
                "endLineOffset": 58,
                "hash": "f677236678ac4b2ab451d66d4b251e8f"
              },
              "ruleDescriptionContextKey": null,
              "cleanCodeAttribute": "COMPLETE",
              "impacts": {
                "SECURITY": "HIGH"
              },
              "isOnNewCode": false
            }
            """;

        var actual = JsonConvert.DeserializeObject<TaintVulnerabilityDto>(serialized);

        actual
            .Should()
            .BeEquivalentTo(expected,
                options =>
                    options
                        .ComparingByMembers<TaintVulnerabilityDto>()
                        .ComparingByMembers<MQRModeDetails>()
                        .ComparingByMembers<TaintFlowDto>()
                        .ComparingByMembers<TextRangeWithHashDto>());
    }
}
