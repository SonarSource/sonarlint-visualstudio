<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This file contains references to version-specific VS assemblies that cannot be referenced as NuGet packages.

       Project setup
       =============
       In the consuming MSBuild project file...

       1. Set the properties indicating which set of assemblies are required e.g.
            <RequiresTeamFoundation>true</RequiresTeamFoundation>

       2. If the project is a test project, set the following property:
            <IsTestProject>true</IsTestProject>

            This is so the assemblies get copied locally when building the test projects so the tests can find them when they execute.

        3. Import this file

  -->
  
  <Import Condition=" $(VsTargetVersionPropsImported) != 'true'" Project="..\SonarLint.VsTargetVersion.props" />
  
  <PropertyGroup>
    <!-- VsTargetVersion should be set when building from the command line to specify the version.
         Expected values: 2019, 2022 -->
    <VersionSpecificSuffix>$(VsTargetVersion)</VersionSpecificSuffix>

    <!-- We're referencing VS-specific assemblies so we'll build to a VS-specific output folder -->
    <OutputPath>bin\$(Configuration)\VS$(VersionSpecificSuffix)\</OutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- By default, we don't want to copy the assemblies locally for product projects, otherwise they will be
         included in the VSIX. However, we do need them to be copied locally for test projects so the tests
         can find them when they execute. -->
    <CopyVsAssembliesToOutput>$(IsTestProject)</CopyVsAssembliesToOutput>
    <CopyVsAssembliesToOutput Condition="$(CopyVsAssembliesToOutput)==''" >false</CopyVsAssembliesToOutput>
  </PropertyGroup>

  <PropertyGroup>
    <ThirdPartyPath>$(MSBuildThisFileDirectory)\..\third-parties\VS$(VersionSpecificSuffix)</ThirdPartyPath>

    <VsTargetMajorMinorVersion>Unknown VS target version - should never happen because of the validation target above</VsTargetMajorMinorVersion>
    <VsTargetMajorMinorVersion Condition="$(VersionSpecificSuffix) == '2019' ">16.0</VsTargetMajorMinorVersion>
    <VsTargetMajorMinorVersion Condition="$(VersionSpecificSuffix) == '2022' ">17.0</VsTargetMajorMinorVersion>
  </PropertyGroup>

  <!-- ******************************************************************************* -->
  <!-- Legacy VS static analysis ruleset -->
  <!-- ******************************************************************************* -->

  <ItemGroup Label="Legacy VS CodeAnalysis" Condition=" $(RequiresRuleset)=='true' " >
    <Reference Include="Microsoft.VisualStudio.CodeAnalysis">
      <HintPath>$(ThirdPartyPath)\Microsoft.VisualStudio.CodeAnalysis.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
  </ItemGroup>

  <!-- ******************************************************************************* -->
  <!-- Team foundation assemblies -->
  <!-- ******************************************************************************* -->
  <ItemGroup Label="TeamFoundation" Condition="$(RequiresTeamFoundation)=='true'">
    <Reference Include="Microsoft.TeamFoundation.Client">
      <HintPath>$(ThirdPartyPath)\Microsoft.TeamFoundation.Client.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
    <Reference Include="Microsoft.TeamFoundation.Controls">
      <HintPath>$(ThirdPartyPath)\Microsoft.TeamFoundation.Controls.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
  </ItemGroup>

  <!-- The following dependencies are required by the test projects at runtime but are not required for compile time -->
  <ItemGroup Label="TeamFoundation" Condition="$(RequiresTeamFoundation)=='true' AND $(IsTestProject) == 'true'">
    <Reference Include="Microsoft.TeamFoundation.Common">
      <HintPath>$(ThirdPartyPath)\Microsoft.TeamFoundation.Common.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
    <Reference Include="Microsoft.VisualStudio.Services.Common">
      <HintPath>$(ThirdPartyPath)\Microsoft.VisualStudio.Services.Common.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
  </ItemGroup>

  <!-- ******************************************************************************* -->

  <!-- ******************************************************************************* -->
  <!-- Alm authentication package -->
  <!-- ******************************************************************************* -->
  <ItemGroup Label="Alm authentication" Condition="$(RequiresAlmAuthentication)=='true'">
    <!-- The package from MS isn't signed so we need to reference the StrongName package
         and conditionally set the DisableStrongName properties -->
    <PackageReference Include="Microsoft.Alm.Authentication" Version="4.0.0.1" />
    <PackageReference Include="StrongNamer" Version="0.0.8" />
  </ItemGroup>
  <PropertyGroup Condition="$(RequiresAlmAuthentication)=='true'">
    <DisableStrongNamer Condition="'$(SignAssembly)' != 'true'">true</DisableStrongNamer>
    <!-- Tell the StrongNamer to use our key, if set. -->
    <StrongNamerKeyFile>$(AssemblyOriginatorKeyFile)</StrongNamerKeyFile>
  </PropertyGroup>


  <!-- ******************************************************************************* -->
  <!-- VCProject assembly -->
  <!-- ******************************************************************************* -->
  <ItemGroup Label="VCProjectEngine" Condition="$(RequiresVCProjectEngine)=='true'">
    <Reference Include="Microsoft.VisualStudio.VCProjectEngine">
      <HintPath>$(ThirdPartyPath)\Microsoft.VisualStudio.VCProjectEngine.dll</HintPath>
      <Private>$(CopyVSAssembliesToOutput)</Private>
    </Reference>
  </ItemGroup>

</Project>