<ResourceDictionary
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vsShell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:platformUi="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">

    <SolidColorBrush x:Key="Border" Color="#FFD5DFE5"/>

    <Style TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.WindowKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static vsShell:VsFonts.Environment133PercentFontSizeKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static vsShell:VsFonts.EnvironmentFontFamilyKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUITextKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Icon" Value="pack://application:,,,/SonarLint.VisualStudio.ConnectedMode;component/UI/Resources/sonarqube_for_ide_logo_16px.png" />
    </Style>

    <Style x:Key="ConnectedModeWindow" TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="Height" Value="600" />
        <Setter Property="Width" Value="750" />
        <Setter Property="MinWidth" Value="750" />
        <Setter Property="MinHeight" Value="600" />
    </Style>

    <Style TargetType="Button">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="Margin" Value="10,0,0,0" />
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderFocusedBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefault" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDefaultTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDefaultBrushKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderDefaultBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDisabledTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDisabledBrushKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderDisabledBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonHoverTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonHoverBrushKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderHoverBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonPressedTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonPressedBrushKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderPressedBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonFocusedTextBrushKey}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonFocusedBrushKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonBorderFocusedBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="ContentContainer" x:Uid="ContentContainer" SnapsToDevicePixels="True">
                        <ContentPresenter RecognizesAccessKey="True" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" x:Uid="ContentPresenter_1" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Stroke="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonFocusedTextBrushKey}}"  StrokeThickness="1" StrokeDashArray="1 2" Margin="2" x:Uid="ButtonFocusVisualStyleRect" SnapsToDevicePixels="True" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Height" Value="30" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="PasswordBox">
        <Setter Property="Height" Value="30" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="None" />
        <Setter Property="LineStackingStrategy" Value="MaxHeight" />
    </Style>

    <Style x:Key="CaptionTextBlock" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="DarkGray" />
        <Setter Property="FontStyle" Value="Italic" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <Style x:Key="HeaderTextBlock" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="{DynamicResource {x:Static vsShell:VsFonts.Environment155PercentFontSizeKey}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="DemiBold" />
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />
    </Style>

    <Style TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.ComboBoxBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
    </Style>

    <Style TargetType="ComboBox">
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.ComboBoxBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsShell:VsBrushes.ActiveBorderKey}}" />
    </Style>

    <Style TargetType="ProgressBar">
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="NoSelectionListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" >
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="DisabledText" Color="DarkGray"/>
    <SolidColorBrush x:Key="InvalidText" Color="Red"/>
    <SolidColorBrush x:Key="SuccessText" Color="Green"/>

    <Style x:Key="DialogButtonsPanel" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Orientation" Value="Horizontal" />
        <Style.Resources>
            <Style TargetType="platformUi:DialogButton">
                <Setter Property="Margin" Value="6,0,0,0" />
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ConnectionInfoInlineWrapper" TargetType="InlineUIContainer">
        <Setter Property="BaselineAlignment" Value="Center" />
    </Style>

    <DataTemplate x:Key="NameAndKeyListBoxItem">
        <TextBlock VerticalAlignment="Center">
                <Run Text="{Binding Name}" 
                     FontWeight="Bold"
                     FontSize="{DynamicResource {x:Static vsShell:VsFonts.Environment133PercentFontSizeKey}}"
                     Foreground="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />

                <Run FontSize="{DynamicResource {x:Static vsShell:VsFonts.Environment111PercentFontSizeKey}}"
                     Foreground="{DynamicResource {x:Static vsShell:VsBrushes.GrayTextKey}}">
                    <Run.Text>
                        <MultiBinding StringFormat="({0})">
                            <Binding Path="Key" />
                        </MultiBinding>
                    </Run.Text>
                </Run>
        </TextBlock>
    </DataTemplate>

    <Style TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Style="{StaticResource  HeaderTextBlock}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.ComboBoxBackgroundKey}}" />
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" BorderBrush="{StaticResource Border}" Background="Transparent"
                                BorderThickness="1" Margin="-2,0,0,0">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True"
                                              Margin="5"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDefaultBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDefaultBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static platformUi:CommonControlsColors.ButtonDefaultTextBrushKey}}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
