//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SonarLint.VisualStudio.CFamily.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SonarLint.VisualStudio.CFamily.Rules.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Rule settings contain entries for both legacy rule key and new rule keys. The legacy value will be ignored. Legacy key: {0}, new key: {1}.
        /// </summary>
        internal static string DuplicateLegacyAndNewRuleKey {
            get {
                return ResourceManager.GetString("DuplicateLegacyAndNewRuleKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Using cached rule settings.
        /// </summary>
        internal static string EffectiveRules_CacheHit {
            get {
                return ResourceManager.GetString("EffectiveRules_CacheHit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Calculating effective rule settings....
        /// </summary>
        internal static string EffectiveRules_CacheMiss {
            get {
                return ResourceManager.GetString("EffectiveRules_CacheMiss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] No custom rules settings - using defaults.
        /// </summary>
        internal static string NoCustomRulesSettings {
            get {
                return ResourceManager.GetString("NoCustomRulesSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Note: the following CFamily rules are not available in SonarLint: {0}.
        /// </summary>
        internal static string RulesUnavailableInSonarLint {
            get {
                return ResourceManager.GetString("RulesUnavailableInSonarLint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Unable to load/locate connected mode settings. Falling back on standalone mode settings..
        /// </summary>
        internal static string UnableToLoadConnectedModeSettings {
            get {
                return ResourceManager.GetString("UnableToLoadConnectedModeSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [CFamily] Using connected mode settings. User-specified settings in settings.json will be ignored..
        /// </summary>
        internal static string UsingConnectedModeSettings {
            get {
                return ResourceManager.GetString("UsingConnectedModeSettings", resourceCulture);
            }
        }
    }
}
