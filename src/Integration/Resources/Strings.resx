<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConnectSectionTitle" xml:space="preserve">
    <value>Connections</value>
    <comment>Title for the SonarQube connection section of the TE SonarQube page</comment>
  </data>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
    <comment>Button text (with access key) for canceling an action – access key 'n'</comment>
  </data>
  <data name="CannotCompareVersionStrings" xml:space="preserve">
    <value>A SonarQube (Server, Cloud) server plugin has a malformed version and cannot be compared. Version was '{0}'.</value>
    <comment>Exception message indicating that the provided version string is malformed and cannot be compared. {0} version string</comment>
  </data>
  <data name="InvalidTestProjectRegexPattern" xml:space="preserve">
    <value>Test project regular expression pattern '{0}' is invalid. The default will be used instead. Please check your server settings.</value>
    <comment>Warning output message indicating that the test project name regex was invalid. {0} invalid regex pattern</comment>
  </data>
  <data name="SonarLintOutputPaneTitle" xml:space="preserve">
    <value>SonarQube</value>
    <comment>Output pane title</comment>
  </data>
  <data name="Notifications_NotSupported" xml:space="preserve">
    <value>Notifications are not supported on this version of SonarQube (Server, Cloud)</value>
    <comment>Output window message</comment>
  </data>
  <data name="Notifications_ERROR_Fetching" xml:space="preserve">
    <value>Failed to fetch notifications: {0}</value>
  </data>
  <data name="ExclusionFileNotFound" xml:space="preserve">
    <value>No file was found under '{0}'</value>
  </data>
  <data name="ExclusionGetError" xml:space="preserve">
    <value>Error loading server settings. Analysis settings from the server (e.g. inclusions/exclusions) will not be applied in the IDE. Error: {0}</value>
  </data>
  <data name="MuteWindow_AcceptContent" xml:space="preserve">
    <value>The issue is valid but will not be fixed now. It represents accepted technical debt.</value>
  </data>
  <data name="MuteWindow_AcceptTitle" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="MuteWindow_CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="MuteWindow_FormattingHelpLink" xml:space="preserve">
    <value>Formatting Help</value>
  </data>
  <data name="MuteWindow_FormattingHelpExamples" xml:space="preserve">
    <value>: *Bold*, ``Code``, * Bullet point</value>
  </data>
  <data name="MuteWindow_CommentLabel" xml:space="preserve">
    <value>Add a comment (optional):</value>
  </data>
  <data name="MuteWindow_FalsePositiveContent" xml:space="preserve">
    <value>The issue is raised unxpectedly on code that should not trigger an issue.</value>
  </data>
  <data name="MuteWindow_FalsePositiveTitle" xml:space="preserve">
    <value>False Positive</value>
  </data>
  <data name="MuteWindow_SubmitButton" xml:space="preserve">
    <value>Mark Issue as...</value>
  </data>
  <data name="MuteWindow_Title" xml:space="preserve">
    <value>Mark Issue as Resolved on SonarQube (Server, Cloud)</value>
  </data>
  <data name="MuteWindow_WontFixContent" xml:space="preserve">
    <value>The issue is valid but does not need fixing. It represents accepted technical debt.</value>
  </data>
  <data name="MuteWindow_WontFixTitle" xml:space="preserve">
    <value>Won't Fix</value>
  </data>
  <data name="ImportBeforeFileGenerator_CheckingIfFileExists" xml:space="preserve">
    <value>Checking if file exists before importing targets. File: {0}</value>
  </data>
  <data name="ImportBeforeFileGenerator_CreatingDirectory" xml:space="preserve">
    <value>Creating directory {0}</value>
  </data>
  <data name="ImportBeforeFileGenerator_FailedToWriteFile" xml:space="preserve">
    <value>Failed to write file to disk: {0}</value>
  </data>
  <data name="ImportBeforeFileGenerator_FailedToWriteFile_Verbose" xml:space="preserve">
    <value>Failed to write file to disk with exception: {0}</value>
  </data>
  <data name="ImportBeforeFileGenerator_FileAlreadyExists" xml:space="preserve">
    <value>Skipped file writing as identical file was found.</value>
  </data>
  <data name="ImportBeforeFileGenerator_ContentOfTargetsFileCanNotBeRead" xml:space="preserve">
    <value>Skipped file writing as the content of the resource {0} can not be read.</value>
  </data>
  <data name="ImportBeforeFileGenerator_WritingTargetFileToDisk" xml:space="preserve">
    <value>Writing file to imports before directory</value>
  </data>
  <data name="ImportsBeforeFileGeneratorLogContext" xml:space="preserve">
    <value>ImportsBeforeFileGenerator</value>
  </data>
  <data name="Settings_UsingDefaultSettings" xml:space="preserve">
    <value>Default settings will be used</value>
  </data>
  <data name="ActiveSolutionTracker_LogContext" xml:space="preserve">
    <value>Solution Tracking</value>
  </data>
  <data name="ActiveSolutionTracker_SolutionOpen" xml:space="preserve">
    <value>Solution {0} opened</value>
  </data>
  <data name="ActiveSolutionTracker_InitializedSolution" xml:space="preserve">
    <value>Initialized with solution {0}</value>
  </data>
  <data name="ActiveSolutionTracker_NoSolutionPlaceholder" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="ActiveSolutionTracker_DummySolutionPlaceholder" xml:space="preserve">
    <value>Dummy</value>
  </data>
  <data name="ActiveSolutionTracker_SolutionClosed" xml:space="preserve">
    <value>Solution {0} closed</value>
  </data>
  <data name="ActiveSolutionTracker_DummySolutionIgnored" xml:space="preserve">
    <value>Dummy solution encountered, ignoring...</value>
  </data>
</root>