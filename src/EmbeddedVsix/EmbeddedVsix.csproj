<Project>

  <Import Project="..\SonarLint.Product.props" />
  <Import Project="..\..\build\version.props" />


  <!-- The VSSDK targets need to be imported after the Net.Sdk targets which means we have to import the
       .NET.Sdk targets using Import rather than specifying it as the Sdk in the Project element. -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  
  <!-- *********************************************************-->
  <!-- Hack to work round the VSIX being created every time -->
  <!-- *********************************************************-->
  <PropertyGroup>
    <CreateVsixContainer>false</CreateVsixContainer>
  </PropertyGroup>

  <ItemGroup>
    <!-- Prevent the vsix from being cleaned during incremental builds -->
    <FileWritesShareable Include="$(OutputPath)$(AssemblyName).vsix"/>
  </ItemGroup>

  <!-- Will be called if "GetTypeScriptFiles" target is executed.
       When building the project, even if nothing has changed in the Typescript files, "Microsoft.VsSDK.targets" always generates a VSIX.
       This has a big performance penalty, especially on slower machines.
       To overcome this, we always set the property "CreateVsixContainer" to "false" at the start of the run, and set it to "true" only if GetTypeScriptFiles target 
       was executed (= if GetTypeScriptFiles target was executed, it means that the Typescript files were changed and we should generate a new VSIX).
       For some reason, properties inside a PropertyGroup are being set even if the target itself is skipped, 
       so we're setting the property in a new target and calling it. This way it will not be executed if the parent target is skipped. -->
  <Target Name="SonarLint_ForceCreateVsix">
    <PropertyGroup>
      <CreateVsixContainer>true</CreateVsixContainer>
    </PropertyGroup>
  </Target>

  <!-- *********************************************************-->

  <PropertyGroup>
      <!-- Hack to prevent VS2017 from automatically attempting to upgrade the project -->
    <MinimumVisualStudioVersion>$(VisualStudioVersion)</MinimumVisualStudioVersion>

    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <TargetFrameworkProfile />
  </PropertyGroup>


  <PropertyGroup>
    <ProjectTypeGuids>{82b43b9b-a64c-4715-b499-d71e9ca2bd60};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectGuid>{4BBE7B39-E00A-40FE-88FC-A53C7E49731F}</ProjectGuid>

    <RootNamespace>SonarLint.VisualStudio.AdditionalFiles</RootNamespace>
    <AssemblyName>SonarLint.VisualStudio.AdditionalFiles</AssemblyName>

    <GeneratePkgDefFile>false</GeneratePkgDefFile>

    <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer>
    <IncludeDebugSymbolsInVSIXContainer>false</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>false</IncludeDebugSymbolsInLocalVSIXDeployment>
    <StartAction>Program</StartAction>
    <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
    <StartArguments>/rootsuffix Exp</StartArguments>
  </PropertyGroup>

  <!-- ***************************************************************** -->
  <!--    Do not add any project references to this project              -->
  <!--                                                                   -->
  <!-- This project should only need to be rebuilt when the embedded     -->
  <!-- plugin version(s) changed, which happens once per sprint at most. -->
  <!-- Adding a reference to another project in the solution will cause  -->
  <!-- it to be built much more frequently.                              -->
  <!-- ***************************************************************** -->

  <ItemGroup Label="VSSDK Build Tools">
    <PackageReference Condition=" $(VsTargetVersion) != '2022' " Include="Microsoft.VSSDK.BuildTools" Version="16.8.3038" GeneratePathProperty="true">
      <IncludeAssets>runtime; build; native; contentfiles; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>

    <PackageReference Condition=" $(VsTargetVersion) == '2022' " Include="Microsoft.VSSDK.BuildTools" Version="17.0.5321-preview5-gf917fac8" GeneratePathProperty="true">
      <IncludeAssets>runtime; build; native; contentfiles; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>    
	<Reference Include="System" />
    <Reference Include="System.ComponentModel.Composition" />
  </ItemGroup>

  <!-- ***************************************** -->
  <!-- Select the manifest to use -->
  <!-- VS2022+ are 64bit. Earlier versions are 32bit. -->
  <PropertyGroup>
    <ManifestFolder>Manifests\PreVS2022\</ManifestFolder>
    <ManifestFolder Condition=" $(VSTargetVersion) == '2022' ">Manifests\VS2022\</ManifestFolder>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="Manifests\**" />
    <None Include="$(ManifestFolder)source.extension.vsixmanifest" />
  </ItemGroup>
  <!-- ***************************************** -->


  <Import Project="..\EmbeddedSonarAnalyzer.props" />
  <!-- ********************************************************** -->
  <!-- SonarJS plugin handling -->
  <!-- Download and unpack the jar, select the required files and -->
  <!-- add them to the VSIX.                                      -->
  <!-- ********************************************************** -->
  <PropertyGroup>
    <!-- Download url for the SonarJS plugin. Update this url to embed a new version of the plugin. -->
    <PluginUrl>https://binaries.sonarsource.com/Distribution/sonar-javascript-plugin/sonar-javascript-plugin-$(EmbeddedSonarJSAnalyzerVersion).jar</PluginUrl>
    <TypeScriptFolderName>ts</TypeScriptFolderName>

    <!-- Folder the embedded files should be copied to. This folder should be excluded from source code control. -->
    <TypeScriptTargetDirectory>$(MSBuildThisFileDirectory)$(TypeScriptFolderName)</TypeScriptTargetDirectory>

    <!-- Hook the target that fetches the additional files into to the build process. 
         This needs to be set after the SDK targets have been imported.
    -->
    <PrepareForBuildDependsOn>$(PrepareForBuildDependsOn);GetTypeScriptFiles;ModifyVsixUtilCorFlags</PrepareForBuildDependsOn>
    <!-- By default the SDK targets only zip Release builds. We'll always zip since the file is very large otherwise. -->
    <ZipPackageCompressionLevel>Normal</ZipPackageCompressionLevel>
  </PropertyGroup>

  <ItemGroup Label="GetTypeScriptFiles inputs and outputs">
    <!-- Specifies the target inputs and outputs so MSBuild can skip fetching the files if the analyzer version has not changed. -->
    <AdditionalFilesInput Include="..\EmbeddedSonarAnalyzer.props" />
    <AdditionalFilesOutput Include="$(OutputPath)$(AssemblyName).vsix" />
  </ItemGroup>

  <Target Name="GetTypeScriptFiles" Inputs="@(AdditionalFilesInput)" Outputs="@(AdditionalFilesOutput)">
    <Message Importance="high" Text="Fetching the TypeScript files..." />
    <!-- Note: building the helper project explicitly using MSBuild rather than referencing it via a ProjectReference.
         This makes is easier for us to control when the build is performed, so we can trigger it early enough
         to include the downloaded files as normal Content files in this project.
         Also, we are using the "Exec" task to invoke MSBuild.exe rather the "MSBuild" task when building
         DownloadCFamilyPlugin.csproj to avoid getting file-locking errors when rebuilding.
    -->
    <!-- NB we are specifying an output path for the task assembly to avoid potentially file locking issues
	     with the version of the same project used by Integration.Vsix.csproj when fetching the CFamily files -->
    <Exec Command="&quot;$(MSBuildBinPath)\msbuild.exe&quot; ..\..\build\DownloadSonarPlugin\DownloadSonarPlugin.csproj /p:PluginUrl=$(PluginUrl) /p:TargetDirectory=&quot;$(TypeScriptTargetDirectory)&quot; /p:UseSharedCompilation=false /t:Restore;Build;EmbedTypeScriptFiles /p:OutputPath=bin\GetTypeScriptFiles\ /p:VsTargetVersion=$(VsTargetVersion) /nr:false /p:BuildInParallel=false" LogStandardErrorAsError="true" IgnoreExitCode="false" />
    <ItemGroup>
      <!-- Note (1): vsixutil.exe will fail with an OutOfMemory error if there are too many files in the VSIX (the size of the files
                     doesn't matter, it's the number that counts.
		     So, we are excluding some files that are not required i.e. the *.map files.
		     If we need to exclude more files then other candidates are:
		     * the localization files for the TypeScript compiler
		     * some modules include "test" folders which may not be needed
		     * *.d.ts files i.e. type definition files. Ones in modules other than the TypeScript compiler/eslint modules *might* not be needed
      -->
      <!-- Note (2): the file name has to be relative. The "Include" value is used to set the value of the "vsixSubPath" metadata item.
			If this is an absolute path the VSSDK tools won't complain, but the file won't be included in the vsix. -->
      <Content Include="$(TypeScriptFolderName)\**\*" Exclude="$(TypeScriptFolderName)\**\*.map">
        <CopyToOutputDirectory>Never</CopyToOutputDirectory>
        <IncludeInVSIX>True</IncludeInVSIX>
        <Visible>false</Visible>
      </Content>
    </ItemGroup>
    <CallTarget Targets="SonarLint_ForceCreateVsix"/>

  </Target>

  <PropertyGroup>
    <VsixUtilPath>$(PkgMicrosoft_VSSDK_BuildTools)\tools\vssdk\bin\VsixUtil.exe</VsixUtilPath>
    <CorFlagsPath>$(MSBuildThisFileDirectory)\..\..\build\CorFlags.exe</CorFlagsPath>
  </PropertyGroup>

  <Target Name="ModifyVsixUtilCorFlags" Condition=" $(VsTargetVersion) != '2022' ">
    <!-- The pre-SDK v17 version of VsixUtil.exe is running by default with "32-bit required" flag, which is causing Out of Memory exceptions when building the VSIX 
         due to too many files. We are using CorFlags.exe to change the flag and that fixes the problem and allows the Vsix to be built. -->
    <Message Importance="high" Text="Modifying VsixUtil.exe CorFlags" />
    <Exec Command="&quot;$(CorFlagsPath)&quot; &quot;$(VsixUtilPath)&quot; /32BITREQ- /force" />
  </Target>
  
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />


</Project>