<p>Properties provide a way to enforce encapsulation by providing <code>public</code>, <code>protected</code> or <code>internal</code> methods that
give controlled access to <code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly
create the needed properties, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<p>For simple properties it is better to use <a
href="https://docs.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/auto-implemented-properties">auto-implemented
properties</a> (VB.NET 10.0 or later).</p>
<p>Field and property names are compared as case-insensitive. All underscore characters are ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Sample

    Private _x As Integer
    Private _y As Integer

    Public Property Y As Integer
        Get
            Return _x   ' Noncompliant: field '_y' is not used in the return value
        End Get
        Set(value As Integer)
            _x = value  ' Noncompliant: field '_y' is not updated
        End Set
    End Property

End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class Sample

    Private _x As Integer
    Private _y As Integer

    Public Property Y As Integer
        Get
            Return _y
        End Get
        Set(value As Integer)
            _y = value
        End Set
    End Property

End Class
</pre>