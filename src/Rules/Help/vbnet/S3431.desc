<p>It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, thatâ€™s not usually the case with
the <code>ExpectedException</code> attribute since an exception could be thrown from almost any line in the method.</p>
<p>This rule detects MSTest and NUnit <code>ExpectedException</code> attribute.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;TestMethod&gt;
&lt;ExpectedException(GetType(ArgumentNullException))&gt; ' Noncompliant
Public Sub TestNullArg()
  '...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;TestMethod&gt;
Public Sub TestNullArg()
    Dim CallFailed As Boolean = False
    Try
    ' ...
    Catch ex As Exception
        CallFailed = true
    End Try
    Assert.IsTrue(CallFailed, "Expected call to MyMethod to fail with ArgumentNullException")
End Sub
</pre>
<p>or</p>
<pre>
&lt;TestMethod&gt;
Public Sub TestNullArg()
    Assert.ThrowsException(Of ArgumentNullException)(Sub() ... )
End Sub
</pre>
<h2>Exceptions</h2>
<p>This rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown.</p>