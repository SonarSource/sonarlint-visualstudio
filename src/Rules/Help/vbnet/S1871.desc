<p>Having two <code>Cases</code> in the same <code>Select</code> statement or branches in the same <code>If</code> structure with the same
implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an
<code>If</code> structure they should be combined, or for a <code>Select</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select i
  Case 1
    DoFirst()
    DoSomething()
  Case 2
    DoSomethingDifferent()
  Case 3  ' Noncompliant; duplicates case 1's implementation
    DoFirst()
    DoSomething()
  Case Else:
    DoTheRest()
End Select

If a &gt;= 0 AndAlso a &lt; 10 Then
  DoFirst()
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()
ElseIf a &gt;= 20 AndAlso a &lt; 50   ' Noncompliant; duplicates first condition
  DoFirst()
  DoTheThing()
Else
  DoTheRest();
End If
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>If</code> chain or <code>Case</code> clause that contain a single line of code are ignored.</p>
<pre>
If a &gt;= 0 AndAlso a &lt; 10 Then
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()
ElseIf a &gt;= 20 AndAlso a &lt; 50   ' no issue, usually this is done on purpose to increase the readability
  DoTheThing()
End If
</pre>
<p>But this exception does not apply to <code>If</code> chains without <code>Else</code>-s, or to <code>Select</code>-s without <code>Case Else</code>
clauses when all branches have the same single line of code. In case of <code>If</code> chains with <code>Else</code>-s, or of <code>Select</code>-es
with <code>Case Else</code> clauses, rule {rule:vbnet:S3923} raises a bug.</p>
<pre>
If a &gt;= 0 AndAlso a &lt; 10 Then
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()  ' Noncompliant, this might have been done on purpose but probably not
End If
</pre>