<p>This rule raises an issue when an insecure TLS protocol version (i.e. a protocol different from "TLSv1.2", "TLSv1.3", "DTLSv1.2", or "DTLSv1.3") is
used or allowed.</p>
<p>It is recommended to enforce TLS 1.2 as the minimum protocol version and to disallow older versions like TLS 1.0. Failure to do so could open the
door to downgrade attacks: a malicious actor who is able to intercept the connection could modify the requested protocol version and downgrade it to a
less secure version.</p>
<h2>Noncompliant Code Example</h2>
<p><code>secureProtocol</code>, <code>minVersion</code>/<code>maxVersion</code> and <code>secureOptions</code> should not be set to use weak TLS
protocols (TLSv1.1 and lower):</p>
<pre>
let options = {
  secureProtocol: 'TLSv1_method' // Noncompliant: TLS1.0 is insecure
};

let options = {
  minVersion: 'TLSv1.1',  // Noncompliant: TLS1.1 is insecure
  maxVersion: 'TLSv1.2'
};

let options = {
  secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1
}; // Noncompliant TLS 1.1 (constants.SSL_OP_NO_TLSv1_1) is not disabled
</pre>
<p><a href="https://nodejs.org/api/https.html">https</a> built-in module:</p>
<pre>
let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});  // Noncompliant
</pre>
<p><a href="https://nodejs.org/api/tls.html">tls</a> built-in module:</p>
<pre>
let socket = tls.connect(443, "www.example.com", options, () =&gt; { });  // Noncompliant
</pre>
<p><a href="https://www.npmjs.com/package/request">request</a> module:</p>
<pre>
let socket = request.get(options);
</pre>
<p>For <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigateway.DomainName.html">aws-cdk-lib.aws_apigateway.DomainName</a>:</p>
<pre>
import { aws_apigateway as agw } from 'aws-cdk-lib';

new agw.DomainName(this, 'Example', {
    certificate: certificate,
    domainName: domainName,
    securityPolicy: agw.SecurityPolicy.TLS_1_0, // Noncompliant
});
</pre>
<p>For <a
href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.Domain.html">aws-cdk-lib.aws_opensearchservice.Domain</a>:</p>
<pre>
import { aws_opensearchservice as os } from 'aws-cdk-lib';

new os.CfnDomain(this, 'Example', {
  domainEndpointOptions: {
    enforceHttps: true,
  },
}); // NonCompliant by default
</pre>
<h2>Compliant Solution</h2>
<p>Set either <code>secureProtocol</code> or <code>secureOptions</code> or <code>minVersion</code> to use secure protocols only (TLSv1.2 and
higher):</p>
<pre>
let options = {
  secureProtocol: 'TLSv1_2_method'
};
// or
let options = {
  secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1
};
// or
let options = {
    minVersion: 'TLSv1.2'
};
</pre>
<p><a href="https://nodejs.org/api/https.html">https</a> built-in module:</p>
<pre>
let req = https.request(options, (res) =&gt; {
  res.on('data', (d) =&gt; {
    process.stdout.write(d);
  });
});
</pre>
<p><a href="https://nodejs.org/api/tls.html">tls</a> built-in module:</p>
<pre>
let socket = tls.connect(443, "www.example.com", options, () =&gt; { });
</pre>
<p><a href="https://www.npmjs.com/package/request">request</a> module:</p>
<pre>
let socket = request.get(options);
</pre>
<p>For <a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigateway.DomainName.html">aws-cdk-lib.aws_apigateway.DomainName</a>:</p>
<pre>
import { aws_apigateway as agw } from 'aws-cdk-lib';

new agw.DomainName(this, 'Example', {
    certificate: certificate,
    domainName: domainName,
    securityPolicy: agw.SecurityPolicy.TLS_1_2,
});
</pre>
<p>For <a
href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_opensearchservice.Domain.html">aws-cdk-lib.aws_opensearchservice.Domain</a>:</p>
<pre>
import { aws_opensearchservice as os } from 'aws-cdk-lib';

new os.CfnDomain(this, 'Example', {
  domainEndpointOptions: {
    enforceHttps: true,
    tlsSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07',
  },
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>
  <li> <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">OWASP Top 10 2021 Category A7</a> - Identification and
  Authentication Failures </li>
  <li> <a href="https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href="https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
  <li> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html">Amazon API Gateway</a> -
  Choosing a minimum TLS version </li>
</ul>