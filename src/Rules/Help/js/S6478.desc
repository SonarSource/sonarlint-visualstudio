<p>Nested components are defined in an enclosing one and can be simple functions or arrow expressions. React recreates them systematically during the
render pass because it doesn’t know they haven’t changed. This hurts performance as the components are recreated too many times. However, this can
also hide surprising bugs where the state of the nested components is lost between renders. Trying to use <code>useCallback</code> hooks for child
components is also discouraged. You should actually refactor this code to define a component on its own, passing props if needed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function Component() {
  function UnstableNestedComponent() {
    return &lt;div /&gt;;
  }

  return (
    &lt;div&gt;
      &lt;UnstableNestedComponent /&gt;
    &lt;/div&gt;
  );
}
</pre>
<pre>
function SomeComponent({ footer: Footer }) {
  return (
    &lt;div&gt;
      &lt;Footer /&gt;
    &lt;/div&gt;
  );
}

function Component() {
  return (
    &lt;div&gt;
      &lt;SomeComponent footer={ () =&gt; &lt;div /&gt; } /&gt; { /* footer is a component nested inside 'Component' */ }
    &lt;/div&gt;
  );
}
</pre>
<pre>
class Component extends React.Component {
  render() {
    function UnstableNestedComponent() {
      return &lt;div /&gt;;
    }

    return (
      &lt;div&gt;
        &lt;UnstableNestedComponent /&gt;
      &lt;/div&gt;
    );
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function OutsideDefinedComponent(props) {
  return &lt;div /&gt;;
}

function Component() {
  return (
    &lt;div&gt;
      &lt;OutsideDefinedComponent /&gt;
    &lt;/div&gt;
  );
}
</pre>
<pre>
function Component() {
  return &lt;SomeComponent footer={ &lt;div /&gt; } /&gt;;
}
</pre>
<pre>
class Component extends React.Component {
  render() {
    return (
      &lt;div&gt;
        &lt;SomeComponent /&gt;
      &lt;/div&gt;
    );
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://reactjs.org/docs/reconciliation.html#elements-of-different-types">Elements Of Different Types</a> - React documentation </li>
</ul>