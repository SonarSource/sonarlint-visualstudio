<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  if (a === 1) {
    return true;
  }
  return 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a === 1) {
    return true;
  }
  return false;
}
</pre>
<h2>Exceptions</h2>
<p>Functions returning <code>this</code> are ignored.</p>
<pre>
function foo() {
  // ...
  return this;
}
</pre>
<p>Functions returning expressions having type <code>any</code> are ignored.</p>