<p>Session fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, itâ€™s a
good practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the
attacker).</p>
<h2>Noncompliant Code Example</h2>
<p>For <a href="http://www.passportjs.org/">Passport.js</a>:</p>
<pre>
app.post('/login',
  passport.authenticate('local', { failureRedirect: '/login' }),
  function(req, res) {
    // Sensitive - no session.regenerate after login
    res.redirect('/');
  });
</pre>
<h2>Compliant Solution</h2>
<p>For <a href="http://www.passportjs.org/">Passport.js</a>:</p>
<pre>
app.post('/login',
  passport.authenticate('local', { failureRedirect: '/login' }),
  function(req, res) {
    let prevSession = req.session;
    req.session.regenerate((err) =&gt; {  // Compliant
      Object.assign(req.session, prevSession);
      res.redirect('/');
    });
  });
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">OWASP Top 10 2021 Category A7</a> - Identification and
  Authentication Failures </li>
  <li> <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> -
  Broken Authentication </li>
  <li> <a href="https://owasp.org/www-community/attacks/Session_fixation">OWASP Sesssion Fixation</a> </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/384">MITRE, CWE-384</a> - Session Fixation </li>
</ul>