<p>For completeness, a <code>switch</code> over the values of an <code>enum</code> must either address each value in the <code>enum</code> or contain
a <code>default</code> case. <code>switch</code> statements that are not over <code>enum</code> must end with a <code>default</code> case.</p>
<p>This rule is a more nuanced version of {rule:c:S131}. Use {rule:c:S131} if you want to require a <code>default</code> case for every
<code>switch</code> even if it already handles all enumerators of an <code>enum</code>. Otherwise, use this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
typedef enum {APPLE, GRAPE, KIWI} fruit;

void example(fruit f, int i) {
  switch (f) {  // Noncompliant; no case for KIWI
    case APPLE:
      //...
    case GRAPE:
      //...
    case 3: // Noncompliant; case value not in enum
      // ...
  }

  switch (i) { // Noncompliant; no default
    case 0:
      // ...
    case 1:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
typedef enum {APPLE, GRAPE, KIWI} fruit;

void example(fruit f) {
  switch (f) {
    case APPLE:
      //...
    case GRAPE:
      //...
    default:
      // ...
  }

  switch (i) {
    case 0:
      // ...
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<p>or</p>
<pre>
typedef enum {APPLE, GRAPE, KIWI} fruit;

void example(fruit f) {
  switch (f) {
    case APPLE:
      //...
    case GRAPE:
      //...
    case KIWI:
      //...
  }

  switch (i) {
    case 0:
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#enum2-use-enumerations-to-represent-sets-of-related-named-constants">C++ Core Guidelines - Enum.2</a> - Use enumerations to represent sets of related named constants </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> {rule:c:S131} </li>
</ul>