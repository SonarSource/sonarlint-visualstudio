<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>
<h2>Exceptions</h2>
<p>When the result of an assignment is used as a condition, clang raises a warning to make sure the purpose was not to use <code>==</code> in place of
<code>=</code>. Adding some parentheses around the assignment is a common way to silence this clang warning. So, no issue is raised in such case.</p>
<pre>
if ((x = 7)) {} // Compliant
</pre>