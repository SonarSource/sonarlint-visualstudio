<p><em>Mutexes</em> are synchronization primitives that allow to manage concurrency.</p>
<p>Their use requires following a well-defined life-cycle.</p>
<ul>
  <li> <em>Mutexes</em> need to be initialized (<code>pthread_mutex_init</code>) before being used. Once it is initialized, a <em>mutex</em> is in an
  <em>unlocked</em> state. </li>
  <li> <em>Mutexes</em> need to be destroyed (<code>pthread_mutex_destroy</code>) to free the associated internal resources. Only <em>unlocked</em>
  <em>mutexes</em> can be safely destroyed. </li>
</ul>
<p>Before initialization or after destruction, a mutex is in an uninitialized state.</p>
<p>About this life-cycle, the following patterns should be avoided as they result in an undefined behavior:</p>
<ul>
  <li> trying to initialize an initialized <em>mutex</em> </li>
  <li> trying to destroy an initialized <em>mutex</em> that is in a <em>locked</em> state </li>
  <li> trying to destroy an uninitialized <em>mutex</em> </li>
  <li> trying to lock an uninitialized <em>mutex</em> </li>
  <li> trying to unlock an uninitialized <em>mutex</em> </li>
</ul>
<p>In C++, it is recommended to wrap mutex creation/destruction in a RAII class, as well as mutex lock/unlock. Those RAII classes will perform the
right operations, even in presence of exceptions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
pthread_mutex_t mtx1;

void bad1(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_init(&amp;mtx1);
}

void bad2(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_lock(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
}

void bad3(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
}

void bad4(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
  pthread_mutex_lock(&amp;mtx1);
}

void bad5(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
  pthread_mutex_unlock(&amp;mtx1);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
pthread_mutex_t mtx1;

void ok1(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
}

void ok2(void)
{
  pthread_mutex_init(&amp;mtx1);
  pthread_mutex_lock(&amp;mtx1);
  pthread_mutex_unlock(&amp;mtx1);
  pthread_mutex_destroy(&amp;mtx1);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_mutex_destroy.html">The Open Group</a> pthread_mutex_init,
  pthread_mutex_destroy </li>
</ul>