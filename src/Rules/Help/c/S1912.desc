<p>A function is called reentrant if it can be interrupted in the middle of its execution and then safely called again ("re-entered") before its
previous invocations complete execution.</p>
<p>It is especially important that multi-threaded applications do not call the same non-reentrant function from different threads.</p>
<p>This rule will trigger an issue each time a function in the configurable list is invoked.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a function that includes <code>localtime</code>:</p>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    "Current date and time: %d/%02d/%02d %02d:%02d:%02d\n",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm *local_time_ptr = localtime(&amp;unix_epoch_time); // Noncompliant, call to the non-reentrant localtime() function
  print_date_and_time(local_time_ptr);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm *local_time_ptr;

  time(&amp;current_time);

  local_time_ptr = localtime(&amp;current_time); // Noncompliant, call to the non-reentrant localtime() function

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // This will actually also print Current date and time: 1970/00/01 01:00:00
  // Indeed, localtime() is non-reentrant, and always returns the same pointer
  print_date_and_time(local_time_ptr);

  return 0;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void print_date_and_time(struct tm *time_ptr)
{
  printf(
    "Current date and time: %d/%02d/%02d %02d:%02d:%02d\n",
    time_ptr-&gt;tm_year + 1900,
    time_ptr-&gt;tm_mon,
    time_ptr-&gt;tm_mday,
    time_ptr-&gt;tm_hour,
    time_ptr-&gt;tm_min,
    time_ptr-&gt;tm_sec);
}

void print_unix_epoch_date_and_time()
{
  time_t unix_epoch_time = (time_t)0;
  struct tm local_time;
  localtime_r(&amp;unix_epoch_time, &amp;local_time); // Compliant
  print_date_and_time(&amp;local_time);
}

int main(int argc, char* argv[])
{
  time_t current_time;
  struct tm local_time;

  time(&amp;current_time);

  localtime_r(&amp;current_time, &amp;local_time); // Compliant

  // As expected, this will print: Current date and time: 1970/00/01 01:00:00
  print_unix_epoch_date_and_time();

  // As expected, this will print the current date and time
  print_date_and_time(&amp;local_time);

  return 0;
}
</pre>