<p>The C90 standard allows implicit typing of variables and functions, and some C compilers still support legacy code by allowing implicit typing. But
it should not be used for new code because it might lead to confusion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
extern x;
const x;
static fun(void);
typedef ( *pfi ) ( void );
</pre>
<h2>Compliant Solution</h2>
<pre>
extern int16_t x;
const int16_t x;
static int16_t fun(void);
typedef int16_t ( *pfi ) ( void );
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 8.2 - Whenever an object or function is declared or defined, its type shall be explicitly stated </li>
  <li> MISRA C:2012, 8.1 - Types shall be explicitly specified </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/8NUxBQ">CERT, DCL31-C.</a> - Declare identifiers before using them </li>
</ul>