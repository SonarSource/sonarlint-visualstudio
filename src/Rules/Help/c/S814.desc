<p>Some types are not very well suited for use in a bit-field, because their behavior is implementation-defined. When defining a bit-field, you should
stick to the following safe and portable types:</p>
<ul>
  <li> In C: <code>signed short</code>, <code>unsigned short</code>, <code>signed char</code>, <code>unsigned char</code>, <code>signed int</code>,
  <code>unsigned int</code> or <code>_Bool</code> </li>
  <li> In C++ before C++14: all enumerated types, as well as&nbsp;<code>signed short</code>, <code>unsigned short</code>, <code>signed char</code>,
  <code>unsigned char</code>, <code>signed int</code>, <code>unsigned int</code>, <code>signed long</code>, <code>unsigned long</code>, <code>signed
  long long</code>, <code>unsigned long long</code><code>&nbsp;or bool</code> </li>
  <li> In C++ starting at C++14: all enumerated and integral types </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
// Assuming we are in C
int b:3; // Noncompliant - may have the range of values 0..7 or -4..3
</pre>
<h2>Compliant Solution</h2>
<pre>
unsigned int b:3;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 6.4 - Bit fields shall only be defined to be of type <em>unsigned int</em> or <em>signed int</em>. </li>
  <li> MISRA C++:2008, 9-6-2 - Bit-fields shall be either <em>bool</em> type or an explicitly <em>unsigned</em> or <em>signed</em> integral type.
  </li>
  <li> MISRA C:2012, 6.1 - Bit-fields shall only be declared with an appropriate type </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/VNYxBQ">CERT, INT12-C.</a> - Do not make assumptions about the type of a plain int bit-field
  when used in an expression </li>
</ul>