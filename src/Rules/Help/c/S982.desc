<p><code>setjmp.h</code> functions allow the normal function mechanisms to be bypassed and should be used only with extreme caution, if at all.</p>
<p>Calling <code>setjmp</code> saves the program environment into the buffer passed into the call. Later calling <code>longjmp</code> returns
execution to the point at which <code>setjmp</code> was called and restores the context that was saved into the buffer. But the values of non-volatile
local variables after <code>longjmp</code> are indeterminate. Additionally invoking <code>longjmp</code> from a nested signal handler is undefined, as
is <code>longjmp</code>ing back to a method that has already completed execution.</p>
<p>This rule flags all instances of <code>setjmp</code>, <code>_setjmp</code>, <code>longjmp</code>, <code>_longjmp</code>, <code>sigsetjmp</code>,
<code>siglongjmp</code> and <code>&lt;setjmp.h&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;setjmp.h&gt;  // Noncompliant

jmp_buf buf;

int main(int argc, char* argv[]) {
  int i = setjmp(buf);  // Noncompliant
  if (i == 0) { // value of i was assigned after env was saved &amp; will be indeterminate after longjmp();
    // normal execution
  } else {
    // recover
  }
}

//...

void fun() {
  //...
  longjmp(buf, 1);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int main(int argc, char* argv[]) {
  // normal execution
}

//...

void fun() {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 20.7 - The setjmp macro and the longjmp function shall not be used. </li>
  <li> MISRA C++:2008, 17-0-5 - The setjmp macro and the longjmp function shall not be used. </li>
  <li> MISRA C:2012, 21.4 - The standard header file &lt;setjmp.h&gt; shall not be used </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ktYxBQ">CERT, MSC22-C.</a> - Use the setjmp(), longjmp() facility securely </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/nHs-BQ">CERT, ERR52-CPP.</a> - Do not use setjmp() or longjmp() </li>
</ul>