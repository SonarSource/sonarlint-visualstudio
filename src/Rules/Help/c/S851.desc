<p>If a cast is to be used on any complex expression, the type of cast that may be applied is severely restricted. As explained in MISRA C 2004,
section 6.10, conversions on complex expressions are often a source of confusion and it is therefore wise to be cautious. In order to comply with
these rules, it may be necessary to use a temporary variable and introduce an extra statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  ... (float32_t)(f64a + f64b)
  ... (float64_t)(f32a + f32b) // Noncompliant
  ... (float64_t)f32a
  ... (float64_t)(s32a / s32b) // Noncompliant
  ... (float64_t)(s32a &gt; s32b) // Noncompliant
  ... (float64_t)s32a / (float32_t)s32b
  ... (uint32_t)(u16a + u16b) // Noncompliant
  ... (uint32_t)u16a + u16b
  ... (uint32_t)u16a + (uint32_t)u16b
  ... (int16_t)(s32a - 12345)
  ... (uint8_t)(u16a * u16b)
  ... (uint16_t)(u8a * u8b) // Noncompliant
  ... (int16_t)(s32a * s32b)
  ... (int32_t)(s16a * s16b) // Noncompliant
  ... (uint16_t)(f64a + f64b) // Noncompliant
  ... (float32_t)(u16a + u16b) // Noncompliant
  ... (float64_t)foo1(u16a + u16b)
  ... (int32_t)buf16a[u16a + u16b]
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 10.3 - The value of a complex expression of integer type may only be cast to a type that is narrower and of the same signedness
  as the underlying type of the expression. </li>
  <li> MISRA C:2004, 10.4 - The value of a complex expression of floating type may only be cast to a narrower floating type. </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> MISRA C:2004, section 6.10 </li>
</ul>