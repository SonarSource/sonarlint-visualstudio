<p>Converting an integer type to a pointer generally leads to unspecified behavior. There are several cases where it might be legitimate:</p>
<ul>
  <li> Converting the integral literal <code>0</code> to the null pointer (but you should use <code>nullptr</code> instead, see S4962),
  </li>
  <li> Converting back to a pointer a pointer value that was converted to a large enough integer (see {rule:c:S1767}), </li>
  <li> On embedded devices, device drivers…​ converting a hard-coded address to a pointer to read some specific memory (this often goes together with
  the use of <code>volatile</code>, since such memory values can change from the outside of the program). </li>
</ul>
<p>Since even legitimate cases are corner cases that require to be reviewed carefully, this rule simply reports all places where an integer is cast
into a pointer (except the literal <code>0</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S {
  int i;
  int j;
};

void f(void* a);

void g(int i) {
  S* s1 = (S*)i; // Noncompliant
  f((void*)i); // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++ 2008, 5-2-8 - An object with integer type or pointer to void type shall not be converted to an object with pointer type. </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/0dUxBQ">CERT, INT36-C.</a> - Converting a pointer to integer or integer to pointer </li>
</ul>