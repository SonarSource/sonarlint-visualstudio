<p>Nested <code>if</code>, <code>for</code>, <code>do</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key
ingredient for making whatâ€™s known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant; depth = 1
    /* ... */
    if (condition2) {                // Compliant; depth = 2
      /* ... */
      for(int i = 0; i &lt; 10; i++) {  // Compliant; depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Noncompliant; depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>
<h2>Exceptions</h2>
<p>Each use of a macro containing control flow statements is counted as one nesting level, even if the macro contains more than one control flow
statement.</p>
<pre>
  #define FOREACH(V,ARR) if(ARR!=nullptr) for(int V=0; V&lt;(sizeof(ARR)/sizeof(ARR[0])); V++)

  if (condition1) {       // Compliant; depth = 1
    if (condition2) {     // Compliant; depth = 2
      FOREACH(i, arr) {     // Compliant; depth = 3 (not 4)
        if (condition3) {   // Noncompliant; depth = 4
          /* ... */
        }
      }
    }
  }
</pre>