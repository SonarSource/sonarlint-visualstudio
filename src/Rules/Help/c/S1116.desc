<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                // Noncompliant - was used as a kind of TODO marker
}

#define A(x) x;    // Noncompliant - macro definitions should not end with a semi-colon when they are used as functions

void fun() {
  A(5);            // Noncompliant - after expansion, there are 2 consecutive semi-colons
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {
}

#define A(x) x

void fun() {
  A(5);
}
</pre>
<h2>Exceptions</h2>
<p>In the case of an empty expanded macro, the issue is not raised.</p>
<p>Example:</p>
<pre>
#define LOG(x)

void fun() {
  LOG(X);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/IDZGBQ">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while
  condition </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/WtYxBQ">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while
  statement </li>
</ul>