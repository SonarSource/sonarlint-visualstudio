<p>If the address of an automatic object is assigned to another automatic object of larger scope, or to a static object, or returned from a function
then the object containing the address may exist beyond the time when the original object ceases to exist (and its address becomes invalid).</p>
<h2>Noncompliant Code Example</h2>
<pre>
int* f(void) {
  int local_auto;
  return &amp;local_auto; // Noncompliant, returning address of an object allocated on the stack.
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 17.6 </li>
  <li> MISRA C++:2008, 7-5-2 </li>
  <li> MISRA C:2012, 18.6 </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/UtcxBQ">CERT, DCL30-C.</a> - Declare objects with appropriate storage durations </li>
</ul>