<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings.)</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is very often an error.</p>
<p>The accepted solution is to use or write a float comparison library:</p>
<ul>
  <li> Either using a comparison taking into account the magnitude of the numbers being compared and an epsilon value (which may be based on the
  capability of the floating point epsilon (FLT_EPSILON)). This comparison will often be absolute for very small values, and relative for larger ones
  </li>
  <li> Or using the notion of <a href="https://en.wikipedia.org/wiki/Unit_in_the_last_place">units in the last place</a> </li>
</ul>
<p>This rule checks for the use of equality/inequality tests on <code>float</code>s, <code>double</code>s and <code>long double</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146 ) {  //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}

if (myNumber &lt;= 3.146 &amp;&amp; mNumber &gt;= 3.146) { // Noncompliant indirect equality test
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant indirect inequality test
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>
  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>
  <li> <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating Point Numbers, 2012
  Edition</a> </li>
</ul>