<p><code>#pragma pack</code> is a non standard extension used to specify the packing alignment for structure, union and class members.</p>
<p>It is useful to</p>
<ul>
  <li> remove padding and decrease the size of objects </li>
  <li> align members to better fit optimal cpu alignment </li>
</ul>
<p>However, the pragma pack directives need to be correctly defined to work properly.</p>
<p>This rule raises an issue if:</p>
<ul>
  <li> the specified packing value is incorrect: it can only be 1, 2, 4, 8, or 16 </li>
  <li> a parameter is ill-formed </li>
  <li> the <code>pop</code> variant of this <code>#pragma</code> is called with both arguments <code>identifier</code> and <code>value</code>: such a
  call is undefined behavior </li>
  <li> a <code>#pragma pack(push...)</code> is performed but there is not corresponding use of <code>#pragma pack(pop...)</code> </li>
  <li> a <code>#pragma pack(pop...)</code> is performed but there is not corresponding use of <code>#pragma pack(push...)</code> </li>
  <li> a <code>#pragma pack</code> is in effect across several files: this becomes too complex, and could easily lead to undefined behavior, the same
  structure having different layout when seen from different translation units </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
#pragma pack(5) // Noncompliant, value is invalid
#pragma pack(2+2) // Noncompliant, value should be a literal

#pragma pack(4)
#include "myFile.h" // Noncompliant, the specified alignement value will be applied to this file

struct T {
   int i;
   short j;
   double k;
};

#pragma pack(push, r1, 16)
#pragma pack(pop, r1, 4)  // Noncompliant, call to pop with two arguments is undefined

#pragma pack(push, r2, 16)
#pragma pack(pop, r3)  // Noncompliant, call to pop with no matching push

#pragma pack(push, 8) // Noncompliant, unmatched push
</pre>
<h2>Compliant Solution</h2>
<pre>
#include "myFile.h"

#pragma pack(4)

struct T {
   int i;
   short j;
   double k;
};

#pragma pack(push, r1, 16)
#pragma pack(pop, r1)

#pragma pack(push, r2, 16)
#pragma pack(pop, r2)

#pragma pack(push, 8)
#pragma pack(pop)
</pre>