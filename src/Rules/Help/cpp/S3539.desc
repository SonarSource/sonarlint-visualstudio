<p>Redundant access specifiers should be removed because they needlessly clutter the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S {
  public: // Noncompliant; does not affect any declaration
  private:
    void method();
  private: // Noncompliant; does not change accessibility level
    int member;
  private: // Noncompliant; does not affect any declaration
};
class C {
    int member;
  private: // Noncompliant;  does not change accessibility level
    void method();
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct S {
  private:
    void method();
    int member;
};
class C {
    int member;
    void method();
};
</pre>
<h2>Exceptions</h2>
<p>An access specifier at the very beginning of a <code>class</code> or <code>struct</code> that matches the default access level is ignored even when
it doesnâ€™t change any accessibility levels.</p>
<pre>
class C {
  private: // redundant but accepted
    // ...
};
struct S {
  public: // redundant but accepted
    // ...
};
</pre>
<p>Such a specifier is redundant, but ignored to allow <code>class</code>es and <code>struct</code>s to be described uniformly.</p>
<pre>
class C {
  public:
    void call();

  protected:
    int delete();

  private:
    int code;
};
struct S {
  public: // redundant but accepted
    int sum();

  protected:
    int min();

  private:
    int count;
};
</pre>