<p>This rule raises an issue when an insecure TLS protocol version (i.e. a protocol different from "TLSv1.2", "TLSv1.3", "DTLSv1.2", or "DTLSv1.3") is
used or allowed.</p>
<p>It is recommended to enforce TLS 1.2 as the minimum protocol version and to disallow older versions like TLS 1.0. Failure to do so could open the
door to downgrade attacks: a malicious actor who is able to intercept the connection could modify the requested protocol version and downgrade it to a
less secure version.</p>
<p>In most cases, using the default system configuration is not compliant. Indeed, an application might get deployed on a wide range of systems with
different configurations. While using a systemâ€™s default value might be safe on modern up-to-date systems, this might not be the case on older
systems. It is therefore recommended to explicitly set a safe configuration in every case.</p>
<h2>Noncompliant Code Example</h2>
<p><a href="https://github.com/curl/curl">libcurl</a></p>
<pre>
#include &lt;curl/curl.h&gt;

CURL *curl;
curl_global_init(CURL_GLOBAL_DEFAULT);

// CURL_SSLVERSION_DEFAULT is the default option for CURLOPT_SSLVERSION
// It means legacy version TLSv1 and TLSv1.1 are enabled
curl = curl_easy_init(); // Noncompliant
curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/");

// Perform the request
curl_easy_perform(curl);
</pre>
<pre>
#include &lt;curl/curl.h&gt;

CURL *curl;
curl_global_init(CURL_GLOBAL_DEFAULT);

curl = curl_easy_init();
curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/");

curl_easy_setopt(curl, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1); // Noncompliant;  legacy version TLSv1 and TLSv1.1 are enabled

//Perform the request
curl_easy_perform(curl);
</pre>
<p><a href="https://github.com/openssl/openssl">OpenSSL</a></p>
<pre>
#include &lt;openssl/ssl.h&gt;

const SSL_METHOD *method = TLS_method(); // Noncompliant;  legacy version TLSv1 and TLSv1.1 are enabled
SSL_CTX *ctx = SSL_CTX_new(method);

SSL *ssl = SSL_new(ctx);

// ...

SSL_connect(ssl);
</pre>
<p><a href="https://github.com/randombit/botan">botan</a></p>
<pre>
#include &lt;botan/tls_client.h&gt;
#include &lt;botan/tls_callbacks.h&gt;
#include &lt;botan/tls_session_manager.h&gt;
#include &lt;botan/tls_policy.h&gt;
#include &lt;botan/auto_rng.h&gt;
#include &lt;botan/certstor.h&gt;
#include &lt;botan/certstor_system.h&gt;

class Callbacks : public Botan::TLS::Callbacks
{
// ...
};

class Client_Credentials : public Botan::Credentials_Manager
{
// ...
};

Callbacks callbacks;
Botan::AutoSeeded_RNG rng;
Botan::TLS::Session_Manager_In_Memory session_mgr(rng);
Client_Credentials creds;
Botan::TLS::Policy policy; // Noncompliant: Default Policy has TLSv1.0 and DLTv1.0 as minimal versions

// open the tls connection
Botan::TLS::Client client(callbacks, session_mgr, creds, policy, rng,
                          Botan::TLS::Server_Information("example.com", 443),
                          Botan::TLS::Protocol_Version::TLS_V12);
</pre>
<h2>Compliant Solution</h2>
<p><a href="https://github.com/curl/curl">libcurl</a></p>
<pre>
#include &lt;curl/curl.h&gt;

CURL *curl;
curl_global_init(CURL_GLOBAL_DEFAULT);

curl = curl_easy_init();
curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/");

curl_easy_setopt(curl, CURLOPT_SSLVERSION, CURL_SSLVERSION_TLSv1_2); // Compliant; enables TLSv1.2 / TLSv1.3 version only

// Perform the request
curl_easy_perform(curl);
</pre>
<p><a href="https://github.com/openssl/openssl">OpenSSL</a></p>
<pre>
#include &lt;openssl/ssl.h&gt;

const SSL_METHOD *method = TLS_method();

SSL_CTX *ctx = SSL_CTX_new(method);
SSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION); // Compliant; enables TLSv1.2 / TLSv1.3 version only

SSL *ssl = SSL_new(ctx);

// ...

SSL_connect(ssl);
</pre>
<p><a href="https://github.com/randombit/botan">botan</a></p>
<pre>
#include &lt;botan/tls_client.h&gt;
#include &lt;botan/tls_callbacks.h&gt;
#include &lt;botan/tls_session_manager.h&gt;
#include &lt;botan/tls_policy.h&gt;
#include &lt;botan/auto_rng.h&gt;
#include &lt;botan/certstor.h&gt;
#include &lt;botan/certstor_system.h&gt;

class Callbacks : public Botan::TLS::Callbacks
{
// ...
};

class Client_Credentials : public Botan::Credentials_Manager
{
// ...
};

Callbacks callbacks;
Botan::AutoSeeded_RNG rng;
Botan::TLS::Session_Manager_In_Memory session_mgr(rng);
Client_Credentials creds;
Botan::TLS::Strict_Policy policy; // Compliant: Strict_Policy has TLSv1.2 and TLSv1.2 as minimal versions

// open the tls connection
Botan::TLS::Client client(callbacks, session_mgr, creds, policy, rng,
                          Botan::TLS::Server_Information("example.com", 443),
                          Botan::TLS::Protocol_Version::TLS_V12);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/Top10/A02_2021-Cryptographic_Failures/">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>
  <li> <a href="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/">OWASP Top 10 2021 Category A7</a> - Identification and
  Authentication Failures </li>
  <li> <a href="https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements">Mobile AppSec Verification
  Standard</a> - Network Communication Requirements </li>
  <li> <a href="https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication">OWASP Mobile Top 10 2016 Category M3</a> - Insecure
  Communication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>