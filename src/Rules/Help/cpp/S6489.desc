<p><code>std::format</code> and other formatting functions have an overload that allows specifying a locale to format the arguments. For instance, to
use a <code>.</code> or a <code>,</code> for floating point values, or to spell the months in dates. However, just passing the right locale is not
enough. You have to mark each argument that is subject to internationalization, by specifying the <code>L</code> flag in the format specification.</p>
<p>This rule raises an issue when a locale is passed to a formatting function, but localization is not enabled for any argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
std::locale fr{“fr_FR”}; // locale names are platform dependant
std::cout &lt;&lt; std::format(fr, "{}", 1.2); // Noncompliant, will display 1.2
std::cout &lt;&lt; std::format(fr, "{:%A}", chrono::system_clock::now()); // Noncompliant, will display weekday in English
</pre>
<h2>Compliant Solution</h2>
<pre>
std::cout &lt;&lt; std::format(fr, "{:L}", 1.2); // Compliant, will display 1,2
std::cout &lt;&lt; std::format(fr, "{:L%A}", chrono::system_clock::now()); // Compliant, will display weekday in French
</pre>