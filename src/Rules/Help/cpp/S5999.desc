<p>When constructing an <code>std::scoped_lock</code>, the constructor arguments are used to list the mutexes that the <code>scoped_lock</code> will
lock on the creation and unlock on destruction. It is possible to construct a <code>scoped_lock</code> without any parameter, but in that case, it
does absolutely nothing and is just dead code, which was probably not the intent of the user.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f1(std::mutex &amp;m) {
  std::scoped_lock lock; // Noncompliant
  // Do some work
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f1(std::mutex &amp;m) {
  std::scoped_lock lock {m}; // Compliant
  // Do some work
}

template&lt;class... D&gt;
void processAll(D &amp;...data) {
  scoped_lock lock {data.getMutex()...}; // Compliant, even if the list might be empty in some cases
  // Do some work
}
</pre>