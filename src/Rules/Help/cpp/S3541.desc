<p>Allocation functions are always <code>static</code>. Explicitly declaring such a function <code>static</code> needlessly clutters the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct S {
  static void* operator new(std::size_t); // Noncompliant; static is redundant
  static void  operator delete(void*);    // Noncompliant; static is redundant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
struct S {
  void* operator new(std::size_t);
  void  operator delete(void*);
};
</pre>
<h2>See</h2>
<ul>
  <li> Reference: Since C++98 (ISO IEC 14882 1998) 12.5 ยง1 and ยง6 </li>
</ul>
<blockquote>
  <p>Any allocation function for a class T is a static member (even if not explicitly declared static).</p>
</blockquote>
<blockquote>
  <p>Any deallocation function for a class X is a static member (even if not explicitly declared static).</p>
</blockquote>