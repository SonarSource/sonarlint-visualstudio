<p>The use of <code>srand</code> together with <code>rand</code> to seed the random number generator and then generate numbers usually produces
low-quality randomness. Further, <code>rand</code> can only provide a number between <code>0</code> and <code>RAND_MAX</code>, and it is left to the
caller to transform the result into what is actually required (E.G. a <code>float</code> between 0 and 1 for a random percentage, an <code>int</code>
between 1 and 6 for a dice game, …​), and that transformation might introduce additional biases.</p>
<p>C++11 introduced the <code>&lt;random&gt;</code> library, which contains several high quality random value generators as well as statistical
distributions you can use to put the results in the form you need. Those mechanisms should be used instead of <code>rand</code> and
<code>srand</code>.</p>
<p>Additionally, <code>std::random_shuffle</code>, which is deprecated in C++14 and removed in C++17, uses <code>rand</code> and should be replaced by
<code>std::shuffle</code>, which uses the random number generators provided by <code>&lt;random&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;stdlib.h&gt;
#include &lt;algorithm&gt;
// ...

void f() {
  srand(time(nullptr)); // Noncompliant
  vector&lt;int&gt; v;
  int size = rand() % 1000 + 1000; // Noncompliant, note that this way of coercing the result introduces extra bias
  for (auto i = 0; i &lt; size; ++i) {
    v.push_back(i);
  }
  random_shuffle(v.begin(), v.end()); // Noncompliant
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; " "; }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;algorithm&gt;
#include &lt;random&gt;
// ...

void f() {
  random_device rd;  // Will be used to obtain a seed for the random number engine
  mt19937 gen(rd()); // Standard mersenne_twister_engine seeded with rd()
  uniform_int_distribution&lt;&gt; dis(1000, 1999); // Same distribution as before, but explicit and without bias
  vector&lt;int&gt; v;
  for (auto i = 0; i &lt; dis(gen); ++i) {
    v.push_back(i);
  }
  shuffle(v.begin(), v.end(), gen);
  for (auto i : v) { cout &lt;&lt; i &lt;&lt; " "; }
}
</pre>