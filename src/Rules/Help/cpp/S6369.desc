<p>When a regular, non-<code>void</code> function flows off the end of its body without returning a value, the behavior is undefined. With a
coroutine, when flowing off the end of its body, <code>return_void()</code> is invoked on the promise for the said coroutine. If such invocation is
not possible (e.g., because the function is not defined), the behavior is undefined.</p>
<p>In other words, a coroutine should either:</p>
<ul>
  <li> have all its execution paths reach a <code>co_return</code> statement or throw an exception; </li>
  <li> or its promise type should provide <code>return_void()</code>. </li>
</ul>
<p>This rule raises an issue on coroutines that do not meet the above criteria.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct IsPrimeTask {
  struct promise_type {
    // ... no return_void() definition ...
    void return_value(bool answer) { /* ... */ }
  };
  // ...
};

IsPrimeTask isPrime(long n) {
  std::optional&lt;bool&gt; result = co_await Oracle::IsPrime(n);
  if (result.has_value()) {
    co_return result.value();
  }
  // Noncompliant
}

struct UploadFileTask {
  struct promise_type {
    // No return_void() definition.
    // ...
  };
  // ...
};

UploadFileTask upload(ServerHandle server, File file) {
  co_await server.transfert(file);
  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum class Tristate { TRUE, FALSE, UNKNOWN };
Tristate toTristate(bool value);
struct IsPrimeTask {
  struct promise_type {
    // ...
    void return_value(Tristate answer) { /* ... */ }
  };
  // ...
};

IsPrimeTask isPrime(long n) {
  std::optional&lt;bool&gt; result = co_await Oracle::IsPrime(n);
  if (result.has_value()) {
    co_return toTristate(result.value());
  }
  co_return Tristate::UNKNOWN;
}

struct UploadFileTask {
  struct promise_type {
    void return_void() { /* ... */ }
    // ...
  };
  // ...
};

UploadFileTask upload(ServerHandle server, File file) {
  co_await server.transfert(file);
}
</pre>
<h2>See</h2>
<ul>
  <li> {rule:cpp:S935} - function exit paths should have appropriate return values </li>
</ul>