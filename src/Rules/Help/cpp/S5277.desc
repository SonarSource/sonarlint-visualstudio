<p>If a function is defined with a <code>[[nodiscard]]</code> attribute or if it returns an object which is <code>[[nodiscard]]</code>, its return
value is very important and should not be silently ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct [[nodiscard]] ErrorInfo{ /* ... */};
ErrorInfo getStatus();

[[nodiscard]] int getInfo();

void f() {
  getStatus(); // Noncompliant; we should read the returned struct which is "nodiscard"
  getInfo(); // Noncompliant; we should read the return value of this "nodiscard" function
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
struct[[nodiscard]] ErrorInfo{ /* ... */};
ErrorInfo getStatus();

[[nodiscard]] int getInfo();

void f() {
  int status = getStatus(); // Compliant
  if (getInfo() != 0) { /*...*/ } // Compliant
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will ignore return values that are not used, but are cast into void, since this is the standard-approved way to suppress this check.</p>
<pre>
[[nodiscard]] int getInfo();

void f() {
  (void) getInfo(); // Compliant
  // ...
}
</pre>