<p>All special member functions (default constructor, copy and move constructors, copy and move assignment operators, destructor) can be automatically
generated by the compiler if you don’t prevent it (for many classes, it is good practice to organize your code so that you can use these default
versions, see {rule:cpp:S4963}).</p>
<p>There are cases where it’s still useful to manually write such a function, because the default implementation is not doing what you need. But if
the manually written function is equivalent to the default implementation, this is an issue:</p>
<ul>
  <li> It’s more code to write, test and maintain for no good reason </li>
  <li> Writing the code of those functions correctly is surprisingly difficult </li>
  <li> Once you write one such function, you will typically have to write several (see {rule:cpp:S3624}) </li>
  <li> If you want your class to be <em>trivial</em> or to be an <em>aggregate</em>, those functions cannot be user-provided anyways </li>
</ul>
<p>In most cases, you should just remove the code of the redundant function. In some cases, the compiler will not automatically generate the default
version of the function, but you can force it to do so by using the <code>= default</code> syntax.</p>
<p>For default constructors, you will often be able to use the default version if you use in-class initialization instead of the initializer list (see
S5424). You will have to make it explicitly defaulted if your class has any other constructor.</p>
<p>For destructors, you may want to use the <code>=default</code> syntax to be able to declare it as virtual (see {rule:cpp:S1235}).</p>
<p>This rule raises an issue when any of the following is implemented in a way equivalent to the default implementation:</p>
<ul>
  <li> default constructor </li>
  <li> destructor </li>
  <li> move constructor </li>
  <li> move-assignment operator </li>
  <li> copy constructor </li>
  <li> copy-assignment operator </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
struct Book {
  string Name;

  Book() { } // Noncompliant
  Book(const Book &amp;Other) : Name(Other.Name) { } // Noncompliant
  Book &amp;operator=(const Book &amp;);
};

Book &amp;Book::operator=(const Book &amp;Other) { // Noncompliant
  Name = Other.Name;
  return *this;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
struct Book {
  string Name;

  Book() = default; // Restores generation of default
  Book(const Book &amp;Other) = default;
  Book &amp;operator=(const Book &amp;) = default;
};

// Or, more common:
struct Book {
  string Name;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#c30-define-a-destructor-if-a-class-needs-an-explicit-action-at-object-destruction">C++ Core Guidelines C.30</a> - Define a destructor if a class needs an explicit action at object destruction </li>
</ul>