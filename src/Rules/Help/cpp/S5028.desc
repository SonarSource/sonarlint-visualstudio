<p>A macro is a textual replacement, which means that it’s not respecting the type system, it’s not respecting scoping rules…​ There is no reason not
to use a constant instead.</p>
<p>Most of the time, a macro can be replaced by a <code>constexpr</code> declaration (a constant that is guaranteed to be computed during
compilation). If your compiler is too old to properly handle <code>constexpr</code>, you may use <code>const</code> instead.</p>
<p>If you have a series of related integer macros, you might also consider replacing them by an <code>enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#define MAX_MEMORY 640 // Noncompliant

#define LEFT   0 // Noncompliant
#define RIGHT  1 // Noncompliant
#define JUMP   2 // Noncompliant
#define SHOOT  3 // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
constexpr size_t MAX_MEMORY = 640;
enum class Actions {Left, Right, Jump, Shoot};
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es31-dont-use-macros-for-constants-or-functions">C++ Core
  Guidelines - ES.31</a> - Don’t use macros for constants or “functions” </li>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#enum1-prefer-enumerations-over-macros">C++ Core
  Guidelines - Enum.1</a> - Prefer enumerations over macros </li>
</ul>