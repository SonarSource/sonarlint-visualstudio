<p>C++11 version of the standard introduced <code>static_assert(expr, message)</code> to check that the compile-time constant expression
<code>expr</code> is true.</p>
<p>C++17 version of the standard has made the second argument <code>message</code> optional. This rule flags occurrences of
<code>std::static_assert</code> where the second argument message is empty or a substring of <code>expr</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
template &lt;class T&gt;
T f(T i) {
  static_assert(std::is_integral&lt;T&gt;::value, ""); // Noncompliant, remove the empty string second argument.
  // or
  static_assert(std::is_integral&lt;T&gt;::value, "std::is_integral"); // Noncompliant, remove the redundant second argument.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
template &lt;class T&gt;
T f(T i) {
  static_assert(std::is_integral&lt;T&gt;::value); // Compliant
  static_assert(std::is_integral&lt;T&gt;::value, "Integral required"); // Compliant
  // ...
}
</pre>