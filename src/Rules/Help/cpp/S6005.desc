<p><code>C++17</code> introduced structured binding, a syntax that initializes multiple entities by elements or members of an object. It is especially
useful to emulate multiple return values from a function.</p>
<p>Suppose you have a function that returns a pair:</p>
<pre>
std::pair&lt;std::string, std::string&gt; getPair();
</pre>
<p>Structured binding allows you to bind the members of the <code>std::pair</code> class directly to new names:</p>
<pre>
auto [firstName, lastName] = getPair();
</pre>
<p>The names <code>firstName</code> and <code>lastName</code> are called structured bindings. As you can see, structured binding makes the code more
readable as they allow binding values to names that carry information about their purpose.</p>
<p>Structured binding works with:</p>
<ul>
  <li> Raw arrays, by binding a name to each element </li>
  <li> Any type that has a tuple-like API </li>
  <li> Classes and structures where all non-static data member are publicly accessible </li>
</ul>
<p>This rule will detect places where <code>std::pair</code> and <code>std::tuple</code> can be effortlessly replaced by a structured binding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void printingMap(const std::map&lt;int, std::string&gt;&amp; map) {
  for (const auto&amp; elem : map) { // Noncompliant
    std::cout &lt;&lt; elem.first &lt;&lt; ": " &lt;&lt; elem.second &lt;&lt; "\n";
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void printingMap(const std::map&lt;int, std::string&gt;&amp; map) {
  for (const auto&amp; [key, value] : map) { // Compliant
    std::cout &lt;&lt; key &lt;&lt; ": " &lt;&lt; value &lt;&lt; "\n";
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f21-to-return-multiple-out-values-prefer-returning-a-struct-or-tuple">C++
  Core Guidelines F.21</a> - To return multiple “out” values, prefer returning a struct or tuple </li>
</ul>