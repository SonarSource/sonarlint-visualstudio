<p>Because <code>printf</code> format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that result
in the wrong strings being created. This rule statically validates the correlation of <code>printf</code> format strings to their arguments.</p>
<p>The related rule {rule:cpp:S2275} is about errors that will create undefined behavior, while this rule is about errors that produce an unexpected
string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
printf("%d", 1, 2); // Noncompliant; the second argument "2" is unused
printf("%0-f", 1.2); // Noncompliant; flag "0" is ignored because of "-"
</pre>
<h2>Compliant Solution</h2>
<pre>
printf("%d %d", 1, 2); // Compliant
printf("%-f", 1.2); // Compliant
</pre>
<h2>Exceptions</h2>
<p>This rule will only work if the format string is provided as a string literal.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/J9YxBQ">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>