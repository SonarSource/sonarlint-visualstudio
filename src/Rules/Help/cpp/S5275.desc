<p>Because <code>reinterpret_cast</code> ignores the type system, it is capable of performing dangerous conversions between unrelated types which can
lead to undefined behavior.</p>
<p>This rule reports an issue for two problematic uses of <code>reinterpret_cast</code>:</p>
<ul>
  <li> when it is used to make the compiler believe that an object in memory is from a different type from its real type (for instance, casting a
  <code>long*</code> to <code>double*</code>, because accessing a <code>long</code> as if it was a <code>double</code> is undefined behavior (even if
  <code>sizeof(long) == sizeof(double)</code>), </li>
  <li> when it is used to cast between different levels of a complex inheritance hierarchy (a <code>static_cast</code> would apply pointer offsets to
  take into account multiple inheritance, for instance, but <code>reinterpret_cast</code> does not) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class X {};
class Y : virtual X {};

void test() {
  long l;
  auto a = reinterpret_cast&lt;double&amp;&gt;(l); // Noncompliant: undefined behavior

  Y* y;
  auto x = reinterpret_cast&lt;X*&gt;(y); // Noncompliant
}
</pre>