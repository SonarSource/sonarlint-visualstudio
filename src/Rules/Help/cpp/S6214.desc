<p>Comparison between <code>signed</code> and <code>unsigned</code> integers is dangerous because it produces counterintuitive results outside of
their common range of values.</p>
<p>When a signed integer is compared to an unsigned one, the former might be converted to unsigned. The conversion preserves the twoâ€™s-complement bit
pattern of the signed value that often corresponds to a large unsigned result. For example, <code>2U &lt; -1</code> is <code>true</code>.</p>
<p>C++20 introduced remedy to this common pitfall: a family of <code>std::cmp_*</code> functions defined in the <code>&lt;utility&gt;</code> header.
These functions correctly handle negative numbers and lossy integer conversion. For example, <code>std::cmp_less(2U, -1)</code> is
<code>false</code>.</p>
<p>This rule raises an issue when an unsigned integer is compared with a negative value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool less = 2U &lt; -1; // Noncompliant

unsigned x = 1;
signed y = -1;
if (x &lt; y) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
bool less = std::cmp_less(2U, -1); // Compliant

unsigned x = 1;
signed y = -1;
if (std::cmp_less(x, y)) { // Compliant
  // ...
}

bool fun(int x, std::vector&lt;int&gt; const&amp; v) {
  return std::cmp_less(x, v.size()); // Compliant
}

std::vector&lt;int&gt; v = foo();
if (0 &lt; v.size() &amp;&amp; v.size() &lt; 100) { // Compliant, even though v.size() returns an unsigned integer
}
</pre>
<h2>See</h2>
<ul>
  <li> {rule:cpp:S845} - a more generic rule about mixing signed and unsigned values. </li>
  <li> {rule:cpp:S6183} - a version of this rule that triggers as soon as signed and unsigned variables are compared. </li>
</ul>