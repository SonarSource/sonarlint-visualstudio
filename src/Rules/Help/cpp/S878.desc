<p>The comma operator takes two expressions, executes them from left to right, and returns the result of the second one. The use of this operator is
generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<p>It is especially error-prone in array subscripts where it might be misinterpreted as accessing a multidimensional array. The use of a comma in this
context is deprecated since C++20 (it might be repurposed in a later edition of the standard to actually access multidimensional arrays, but until
then, it should really not be used).</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a += 2, a + b;  // Noncompliant. What's the value of i ?

a[1, 2] = 3; // Noncompliant: 1 is ignored. This is not an access to a multidimensional array.

x = a[i++, j = i + 1, j*2]; // Noncompliant. What index is used for a?
</pre>
<h2>Compliant Solution</h2>
<pre>
a +=  2;
i = a + b;

j = i + 1;
x = a[j*2];
++i;
</pre>
<h2>Exceptions</h2>
<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.10 - The comma operator shall not be used. </li>
  <li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used. </li>
  <li> MISRA C:2012, 12.3 - The comma operator should not be used </li>
</ul>