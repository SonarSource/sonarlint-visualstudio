<p>The functions of <code>std::string</code> and <code>std::string_view</code> that search inside the string return the character position, and use
the special value <code>npos</code> if the pattern was not found. When converted to a boolean, <code>npos</code> is equivalent to <code>true</code>.
Therefore, testing if the search succeeded requires to compare the returned value to <code>npos</code>, not to use it in a boolean context.</p>
<p>This rule raises an issue when the returned value the following functions are used in a boolean context:</p>
<ul>
  <li> <code>find</code> </li>
  <li> <code>rfind</code> </li>
  <li> <code>find_first_of</code> </li>
  <li> <code>find_last_of</code> </li>
  <li> <code>find_first_not_of</code> </li>
  <li> <code>find_last_not_of</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  std::string s = "";
  if (s.find("42")) { // Noncompliant
    // this branch is taken even if "s" doesn't contain "42"
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  std::string s = "";
  if (s.find("42") != std::string::npos) {
    // this branch is correctly not taken
  }
}
</pre>