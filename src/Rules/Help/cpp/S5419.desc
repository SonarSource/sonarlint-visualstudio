<p>When a function has several consecutive parameters of the same type, there is a risk that the arguments are not provided in the right order.
Moreover, it is generally the sign of code which is too low-level. Maybe</p>
<ul>
  <li> the arguments should have a stronger type </li>
  <li> some arguments could be grouped together to form a higher level abstraction. </li>
</ul>
<p>The use of two parameters of the same type is useful in situations like comparing arguments, combining arguments through a binary operation and
swapping arguments but three or more arguments of the same type is considered bad practice.</p>
<p>This rule raises an issue when a function is defined with more than two consecutive parameters of the same type. For this rule, only the "raw" type
of the parameter will be considered (a <code>string const &amp;</code> will be considered the same type as a <code>std::string</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
double acceleration(double initialSpeed, double finalSpeed, double deltaT) { // Noncompliant
  return (finalSpeed - initialSpeed) / deltaT;
}
double dot_product(double x1, double y1, double x2, double y2); // Noncompliant

void f() {
  double x1,x2,y1,y2;
  auto result = dot_product(x1,x2,y1,y2);// The order is wrong, even if it might look logical
  auto acc = acceleration(10, 50, 110); // Very unclear, probably a bug...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// This code assumes the use of a strong type / units library
Acceleration acceleration(Speed initialSpeed, Speed finalSpeed, Duration deltaT){
  return (finalSpeed - initialSpeed) / deltaT;
}

struct point {
  double x;
  double y;
};

double dot_product(point p1, point p2);

double f() {
  point p1,p2;
  auto result = dot_product(p1,p2);
  auto acc = acceleration(50 * km / hour, 110 * km / hour, 10s);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#i4-make-interfaces-precisely-and-strongly-typed">C++ Core
  Guidelines I.4</a> - Make interfaces precisely and strongly typed </li>
</ul>