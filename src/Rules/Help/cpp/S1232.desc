<p>The same form that was used to create an object should always be used to delete it. Specifically, arrays should be deleted with <code>delete
[]</code> and objects should be deleted with <code>delete</code>. To do otherwise will cause segfaults (in the case of deleting an object with
<code>delete []</code>) and memory leaks (in the case of deleting an array with <code>delete</code>).</p>
<p>This is also true when memory was allocated with <code>malloc</code>, or one of its variants, then it must be released using <code>free()</code>
not <code>delete</code>. Similarly memory allocated by <code>new</code> can not be released using <code>free</code> instead of
<code>delete</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string* _pString1 = new string;
string* _pString2 = new string[100];
char* _pChar = (char *) malloc(100);

delete [] _pString1; // Noncompliant; an object was declared but array deletion is attempted
delete _pString2;  // Noncompliant; an array was declared but an object (the first in the array) is deleted
delete _pChar; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
string* _pString1 = new string;
string* _pString2 = new string[100];
char* _pChar = (char *) malloc(100);

delete _pString1;
delete [] _pString2;
free(_pChar);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/Gns-BQ">CERT, MEM51-CPP.</a> - Properly deallocate dynamically allocated resources </li>
</ul>