<p>When used as a type specifier in a declaration, <code>auto</code> allows the compiler to deduce the type of a variable based on the type of the
initialization expression.</p>
<p>When the spelling of the initialization expression already contains the type of the declared variable, it leaves no ambiguity and <code>auto</code>
should be used as it makes the code easier to read and reduces duplication. This includes initializations using <code>new</code>, template factory
functions for smart pointers and cast expressions.</p>
<p>The rule {rule:cpp:S6234} detects more controversial situations when <code>auto</code> can improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;memory&gt;
#include &lt;vector&gt;

class C {};
class LongAndBoringClassName : public C {};

void f() {
  LongAndBoringClassName *newClass1 = new LongAndBoringClassName(); // Noncompliant
  LongAndBoringClassName *newClass2 = new LongAndBoringClassName(); // Noncompliant

  std::unique_ptr&lt;LongAndBoringClassName&gt; newClass3 = std::make_unique&lt;LongAndBoringClassName&gt;(); // Noncompliant
  std::shared_ptr&lt;LongAndBoringClassName&gt; newClass4 = std::make_shared&lt;LongAndBoringClassName&gt;(); // Noncompliant

  C* c = new LongAndBoringClassName(); // Compliant
  LongAndBoringClassName *newClass5 = static_cast&lt;LongAndBoringClassName*&gt;(c); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;memory&gt;
#include &lt;vector&gt;

class C {};
class LongAndBoringClassName : public C {};

void f() {
  auto newClass1 = new LongAndBoringClassName(); // Compliant
  auto *newClass2 = new LongAndBoringClassName(); // Compliant

  auto newClass3 = std::make_unique&lt;LongAndBoringClassName&gt;(); // Compliant
  auto newClass4 = std::make_shared&lt;LongAndBoringClassName&gt;(); // Compliant

  C* c = new LongAndBoringClassName(); // Compliant
  auto newClass5 = static_cast&lt;LongAndBoringClassName*&gt;(c); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es11-use-auto-to-avoid-redundant-repetition-of-type-names">C++ Core
  Guidelines ES.11</a>&nbsp;- Use auto to avoid redundant repetition of type names </li>
</ul>