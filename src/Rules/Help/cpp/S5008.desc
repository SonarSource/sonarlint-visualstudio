<p><code>void*</code> is a pointer to memory of unknown type, and therefore works outside of the safety net provided by the type system. While it can
be useful in a function body to interface with external code, there is no good reason to step out of the robust C++ type system when defining a
function, either for the function parameters, or for the function return type. For the same reasons, having a member variable of type
<code>void*</code> is not recommended.</p>
<p>If you want to work with raw memory buffer, use <code>unsigned char *</code> (or <code>byte *</code> if your compiler supports it).</p>
<p>If you want to work with different types of data, define a function template and use typed pointers, instead of <code>void *</code>. If you want a
single object to be able to stores objects of different types, <code>std::any</code> can also be a type-safe alternative to <code>void*</code>.</p>
<p>If you want to provide to users of an API an opaque type, declare a type and donâ€™t provide its definition (like with <code>FILE*</code>).</p>
<p>Note that <code>void*</code> is commonly used to communicate data of unknown type with C code. This rule will nevertheless raise an issue in this
case, but it can be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void saveBuffer(void *buffer, size_t size); // Noncompliant
void duplicate(void* destination, size_t count, void *source, size_t size); // Noncompliant
class Process {
  // ...
  void *userData;
};
using UserData = void*; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
void saveBuffer(unsigned char *buffer, size_t size);
template&lt;class T&gt;
void duplicate(T* destination, size_t count, T *source);
class Process {
  // ...
  std::any userData;
};
</pre>
<h2>Exceptions</h2>
<p><code>void*</code> can be useful when interfacing with C. As such, the rule will ignore <code>extern "C"</code> functions, as well as types with
standard layout.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i4-make-interfaces-precisely-and-strongly-typed">C++ Core Guidelines
  I.4</a> - Make interfaces precisely and strongly typed </li>
  <li> <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#t3-use-templates-to-express-containers-and-ranges">C++ Core Guidelines
  T.3</a> - Use templates to express containers and ranges </li>
</ul>