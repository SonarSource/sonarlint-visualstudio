<p>In formatting functions like std::format, replacement fields can add format specifications as a list of options. For example,
<code>std::format("{:*&gt;5}", d);</code> will display <code>d</code> aligned to the right with a padding of '*' to its left so that the display is
always at least five characters wide.</p>
<p>Some of these options work together, and mentioning one without the other can lead to confusing code where it is unclear to the reader how the
output will look. The same can happen if the options have incompatible values.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> The alignment or the padding options are set, but the width option is not specified, leading to no actual padding. </li>
  <li> Both a character padding and a 0 padding are specified on a numerical value, leading to the 0 padding being ignored. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void print() {
  // Noncompliant, filling with no width has no effect
  std::cout &lt;&lt; std::format("{:*&gt;}\n", "filled");
  // Noncompliant, filling with both * and 0 result in 0 being ignored
  std::cout &lt;&lt; std::format("{:*&gt;05}\n", 12);
  // Noncompliant, padding with 0 when no width is specified does nothing
  std::cout &lt;&lt; std::format("{:0}\n", 12);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void print() {
  std::cout &lt;&lt; std::format("{:*&gt;10}\n", "filled");
  std::cout &lt;&lt; std::format("{:*&gt;5}\n", 12);
  std::cout &lt;&lt; std::format("{:04}\n", 12);
}
</pre>