<p>Taking a <code>shared_ptr</code> by r-value reference is unnecessary. If done on purpose, it might imply that <code>unique_ptr</code> is a better
choice since it transfers unique ownership.</p>
<p>In general, a function should take:</p>
<ul>
  <li> A copy of a <code>shared_ptr</code>, if the function takes part in the ownership of the managed object </li>
  <li> A reference to a <code>shared_ptr</code> if the function plans to modify the shared_ptr itself by calling <code>reset</code> or
  <code>swap</code> </li>
  <li> A reference to a <code>const</code> <code>shared_ptr</code>, if the function might take part in the ownership by copying the reference to
  another shared_ptr on at least one of its paths </li>
  <li> A raw pointer/reference to the object, if the function is only interested in the current value of the managed object </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Class Circle{};

void fn(shared_ptr&lt;Circle&gt;&amp;&amp; circle);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Circle{};

void fn(shared_ptr&lt;Circle&gt; circle);
</pre>
<h2>Exceptions</h2>
<p>The move constructor of the <code>shared_ptr</code> itself.</p>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/c553535fb8dda2839d13ab5f807ffbc66b63d67b/CppCoreGuidelines.md#r34-take-a-shared_ptrwidget-parameter-to-express-that-a-function-is-part-owner">C++ Core Guidelines R.34</a> - Warn if a function takes a Shared_ptr&lt;T&gt; by rvalue reference. Suggesting taking it by value instead. </li>
</ul>