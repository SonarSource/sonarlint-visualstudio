<p>When an exception is thrown, the call stack is unwound up to the point where the exception is to be handled. The destructors for all automatic
objects declared between the point where the exception is thrown and where it is to be handled will be invoked. If one of these destructors exits with
an exception, then the program will terminate in an implementation-defined manner, potentially yielding unexpected results.</p>
<p>Note that it is acceptable for a destructor to throw an exception that is handled within the destructor, for example within a try-catch block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C1 {
  public: ~C1() {
    throw(42);   // Noncompliant - destructor exits with an exception
  }
};

void foo() {
  C1 c; // program terminates when c is destroyed
  throw(10);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class C1 {
  public: ~C1() {
    try {
      throw(42);   // Compliant - exception will not leave destructor
    } catch (int i) {  // int handler
      // Handle int exception throw by destructor
    }
  }
};

void foo() {
  C1 c;
  throw(10);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-5-1 - A class destructor shall not exit with an exception. </li>
</ul>