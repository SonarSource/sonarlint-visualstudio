<p>Since C++11, itâ€™s possible to declare the underlying type of an <code>enum</code>, and like any type declration, <code>enum</code> declarations can
contain the <code>const</code> or <code>volatile</code> specifier. But because <code>enum</code> values are named constants and cannot be re-assigned,
those specifiers are ignored by the compiler, and are therefore useless.</p>
<p>This rule raises an issue if <code>const</code> or <code>volatile</code> is present in the declaration of the underlying type of an
<code>enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum class Color : const long int {  // Noncompliant; Remove this "const" specifier.
  Red   = 0xff0000,
  Green = 0x00ff00,
  Blue  = 0x0000ff
};

enum class Size : volatile char {  // Noncompliant; Remove this "volatile" specifier.
  Small   = 's',
  Big     = 'b'
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum class Color : long int {
  Red   = 0xff0000,
  Green = 0x00ff00,
  Blue  = 0x0000ff
};

enum class Size : char {
  Small   = 's',
  Big     = 'b'
};
</pre>