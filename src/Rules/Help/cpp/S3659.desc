<p>Even though the C++ standard defines both "Primary" and "Alternative" operators, it is <em>not</em> a good idea to use the alternatives. Developers
seeing an alphabetical name expect a variable, a function, a class, a namespace…​ in short, anything but an operator, and they will be confused at
best by code that uses such operators.</p>
<table>
  <colgroup>
    <col style="width: 50%;">
    <col style="width: 50%;">
  </colgroup>
  <thead>
    <tr>
      <th>Primary</th>
      <th>Alternative</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>&amp;&amp;</p></td>
      <td><p>and</p></td>
    </tr>
    <tr>
      <td><p>&amp;=</p></td>
      <td><p>and_eq</p></td>
    </tr>
    <tr>
      <td><p>&amp;</p></td>
      <td><p>bitand</p></td>
    </tr>
    <tr>
      <td><p>|</p></td>
      <td><p>bitor</p></td>
    </tr>
    <tr>
      <td><p>~</p></td>
      <td><p>compl</p></td>
    </tr>
    <tr>
      <td><p>!</p></td>
      <td><p>not</p></td>
    </tr>
    <tr>
      <td><p>!=</p></td>
      <td><p>not_eq</p></td>
    </tr>
    <tr>
      <td><p>||</p></td>
      <td><p>or</p></td>
    </tr>
    <tr>
      <td><p>|=</p></td>
      <td><p>or_eq</p></td>
    </tr>
    <tr>
      <td><p>^</p></td>
      <td><p>xor</p></td>
    </tr>
    <tr>
      <td><p>^=</p></td>
      <td><p>xor_eq</p></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
if (not valid or error) { // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!valid || error) {
  /* ... */
}
</pre>