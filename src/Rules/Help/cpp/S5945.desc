<p>C-style arrays (such as <code>int i[10]</code>) are not very convenient to use:</p>
<ul>
  <li> They are fixed size (even C VLA are not truly variable size, and they are not supported in C++) </li>
  <li> If the number of elements in the array can vary, it will lead to manual memory allocation (or people will use fixed-size arrays that "should be
  large enough", which is both a waste of memory and a limitation of the program) </li>
  <li> It is very easy to lose the size of the array since an array passed to a function decays into a pointer </li>
</ul>
<p>The C++ standard library proposes two types that are better than C-style arrays and together cover all the use cases of C-style arrays:</p>
<ul>
  <li> For fixed-size arrays, where the memory is on the stack, use <code>std::array</code>. It is like a C-style array, except that it has a normal
  argument passing semantic, and the size is always a part of the type. If <code>std::array</code> is not available to you (before C++11), you can
  roll your own version. </li>
  <li> For variable-size arrays, use <code>std::vector</code>. It can be resized and handles memory allocation transparently. </li>
  <li> For character strings, you should use <code>std::string</code> instead of arrays of characters. </li>
  <li> For arrays of characters that are not strings (e.g., alphabet, exit codes, keyboard control list) perfer <code>std::array</code> or
  <code>std::vector</code> as per the first two bullets. </li>
</ul>
<p>The rule {rule:cpp:S945} is related to this rule but focuses on passing arguments of an array type. {rule:cpp:S5025} will flag the use of dynamic
memory allocation that could be replaced by <code>std::vector</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  int a[10]; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  std::array&lt;int, 10&gt; a1; // If the size really is a constant
  // Or
  std::vector&lt;int&gt;a2; // For variable size

  auto s = "Hello!"; // Compliant by exception
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not report the use of C-style arrays in <code>extern "C"</code> code (since those arrays are often required here for compatibility
with external code) and in the arguments of <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/46dadd0b16b904fe0ff88c1fef9b0702dfd139e2/CppCoreGuidelines.md#slcon1-prefer-using-stl-array-or-vector-instead-of-a-c-array">C++ Core Guidelines SL.con.1</a> - Prefer using STL array or vector instead of a C array </li>
</ul>