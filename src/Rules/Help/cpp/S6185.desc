<p><code>std::format</code>, introduced by C++20, enables straightforward string construction out of values of various types.</p>
<p>Before C++20, one popular way to obtain the same result was the conversion of the values with <code>std::to_string</code> and piecewise string
concatenation.</p>
<p><code>std::format</code> is strictly superior. It is more efficient because it constructs the string in-place instead of copying substrings one by
one. It is also often shorter and easier to read because the format pattern is presented in a single piece and not scattered across the concatenation
expression.</p>
<p>This rule reports string concatenation cases that can be replaced by <code>std::format</code> and gain in speed and readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
std::string greeting(int n) {
  return "Hello, player " + std::to_string(n) + "."; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
std::string greeting(int n) {
  return std::format("Hello, player {}.", n); // Compliant
}
</pre>