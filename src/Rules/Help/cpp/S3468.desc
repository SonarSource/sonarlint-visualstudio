<p>Like a clever insect posing as a leaf, there are constructs in C++ which look like variable declarations, but which are actually interpreted by the
compiler as function or function pointer declarations. Beyond the problem of confusing maintainers, itâ€™s highly likely in such cases that what the
coder intended is not what the compiler will do.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doWork(Status status) {
  Lock lock();  // Noncompliant; declares function named "lock"
  ...
  Form form(ProgressBar(status)); // Noncompliant; declares function named "form" with "status" parameter
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doWork(Status status) {
  Lock lock;  // remove the parentheses to declare a variable
  ...
  Form form((ProgressBar(status))); // add a pair of parentheses to declare a variable
  ...
}
</pre>
<p>Since C++11 you can also use direct initialization to declare a variable:</p>
<pre>
void doWork(Status status) {
  Lock lock{};
  ...
  Form form{ProgressBar{status}};
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/DHw-BQ">CERT, DCL53-CPP.</a> - Do not write syntactically ambiguous declarations </li>
</ul>