<p>The C++ specification forbids the qualification of reference types with <code>const</code> or <code>volatile</code> unless it happens via a
<code>typedef</code>, in which case itâ€™s ignored. Most compilers treat such direct qualifications as errors, but the Microsoft compiler allows
them.</p>
<p>This rule raises an issue on both types of <code>const</code> qualification.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void example(char c) {
  char &amp; const direct = c; // Noncompliant

  typedef char &amp; T;
  const T indirect = c; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void example(char c) {
  char &amp; direct = c; // or: const char &amp; direct = c;

  typedef char &amp; T;
  T indirect = c;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL52-CPP.+Never+qualify+a+reference+type+with+const+or+volatile">CERT,
  DCL52-CPP.</a> - Never qualify a reference type with const or volatile </li>
</ul>