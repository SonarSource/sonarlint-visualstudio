<p>The <code>defined</code> preprocessing directive is used in the context of <code>#if</code> and <code>#elif</code> expressions to see whether a
given identifier has been defined as a macro. It returns a value of 0 (false) or 1 (true), and has two valid forms, <code>defined IDENTIFIER</code>
and <code>defined ( IDENTIFIER )</code>. Since it is essentially a macro existence check, it cannot take expressions as arguments.</p>
<p>Note that since</p>
<p><code>#if defined AN_IDENTIFIER</code></p>
<p>is equivalent to</p>
<p><code>#ifdef AN_IDENTIFIER</code></p>
<p><code>defined</code> is most useful when there are multiple arguments to check, E.G.</p>
<p><code>#if defined AAA || defined BBB</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
#if defined ( X &gt; Y ) // Noncompliant; expressions not allowed
</pre>
<h2>Compliant Solution</h2>
<pre>
#if defined X &amp;&amp; defined Y &amp;&amp; X &gt; Y
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 19.14 - The defined preprocessor operator shall only be used in one of the two standard forms. </li>
  <li> MISRA C++:2008, 16-1-1 - The defined preprocessor operator shall only be used in one of the two standard forms. </li>
</ul>