<p>One way to end up with a dangling pointer or a dangling reference is to pass to a function a pointer or a reference which lifecycle is not
controlled. This is the case when the pointer or the reference is obtained from a smart pointer (<code>shared_ptr</code> or <code>unique_ptr</code>)
which is not locally defined or which is potentially aliased.</p>
<p>In this case, nothing can guarantee the developer that the pointer or the reference coming from this smart pointer will always be valid: for
example, this smart pointer could be reset somewhere in the call chain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Shape;

std::shared_ptr&lt;Shape&gt; globalShape;

void g(Shape&amp; s) {
  globalShape.reset();
  // do something with parameter s
}

void f1() {
  g(*globalShape); // Noncompliant, lifecycle of the reference is not controlled, parameter s of function g will be a dangling reference
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Shape;

std::shared_ptr&lt;Shape&gt; globalShape;

void g(Shape&amp; s) {
  globalShape.reset();
  // do something with parameter s
}

void f1() {
  auto myShape = globalShape; // reference count of the smart pointer is incremented, the pointer-to object is kept alive
  g(*myShape );
}
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#r37-do-not-pass-a-pointer-or-reference-obtained-from-an-aliased-smart-pointer">C++ Core Guidelines R.37</a> - Do not pass a pointer or reference obtained from an aliased smart pointer </li>
</ul>