<p>The RAII idiom associates the lifetime of a resource with the lifetime of an object: The resource is acquired when the object is created, and
released when it is destroyed.</p>
<p>If the object that controls the resource lifetime is a temporary, chances are it will get destroyed while the resource should still be in use,
leading to resource corruption. This rule detects temporaries that look like RAII objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f() {
  scoped_lock{myMutex}; // Noncompliant. The mutex will be locked then immediately unlocked
  protectedCode(); // This code is not protected by the mutex
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f() {
  scoped_lock lock{myMutex}; // Compliant
  protectedCode();
  // The mutex is correctly released at this point
}
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es84-dont-try-to-declare-a-local-variable-with-no-name">C++ Core
  Guidelines ES.84</a> - Donâ€™t (try to) declare a local variable with no name </li>
</ul>