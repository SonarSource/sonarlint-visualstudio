<p>If a base class is both <code>virtual</code> and non-virtual in a multiple inheritance hierarchy then there will be at least two copies of the base
class sub-object in the derived object. This may not be consistent with developer expectations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {};
class B1: public virtual A {};
class B2: public virtual A {};
class B3: public A {};
class C: public B1, B2, B3 {}; // Noncompliant, A is both virtual (through B1 and B2) and non-virtual (through B3)
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {};
class B1: public virtual A {};
class B2: public virtual A {};
class B3: public virtual A {};
class C: public B1, B2, B3 {}; // Compliant, A is always virtual
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 10-1-3 - An accessible base class shall not be both virtual and non-virtual in the same hierarchy. </li>
</ul>