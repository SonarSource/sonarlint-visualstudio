<p>There are two kinds of enumeration:</p>
<ul>
  <li> The unscoped <code>enum</code> inherited from C </li>
  <li> The scoped enumeration <code>enum class</code> or <code>enum struct</code> added in C++ 11 </li>
</ul>
<p>Unscoped enumerations have two major drawbacks that are fixed by scoped enumerations:</p>
<ul>
  <li> <code>enum</code> elements are visible from their enclosing scope, instead of requiring the scope resolution operator (ex: <code>Red</code>
  instead of <code>Color::Red</code>) </li>
  <li> <code>enum</code> elements convert implicitly to <code>int</code>, so that heterogeneous comparisons such as <code>Red == Big</code> don’t
  result in compile errors. </li>
</ul>
<p>This rule raises an issue when an unscoped enumeration is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum Color { // Noncompliant; replace this "enum" with "enum class".
  Red   = 0xff0000,
  Green = 0x00ff00,
  Blue  = 0x0000ff
};

enum ProductType { // Noncompliant; replace this "enum" with "enum class".
  Small   = 1,
  Big     = 2
};

void printColor(int color);
void printInt(int value);

void report() {
  printColor(Red); // correct
  printColor(Big); // clearly buggy
  printInt(Red);   // conversion is implicit
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum class Color { // declared using "enum class"
  Red   = 0xff0000,
  Green = 0x00ff00,
  Blue  = 0x0000ff
};

enum class ProductType { // declared using "enum class"
  Small   = 1,
  Big     = 2
};

void printColor(Color color); // requires "Color" instead of "int"
void printInt(int value);

void report() {
  printColor(Color::Red);       // correct
  // printColor(ProductType::Big); =&gt; Compilation error, no known conversion from 'ProductType' to 'Color'
  printInt(static_cast&lt;int&gt;(Color::Red)); // conversion never occurs implicitly and must be explicit
}
</pre>
<h2>Exceptions</h2>
<p>When the enum is a private member of a class, its use is encapsulated by the class and the drawbacks of unscoped enums can be avoided. Therefore,
no issue will be raised in that case.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#enum3-prefer-class-enums-over-plain-enums">C++ Core
  Guidelines Enum.3</a> - Prefer class enums over “plain” enums </li>
</ul>