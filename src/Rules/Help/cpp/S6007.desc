<p><code>C++17</code> introduced <code>[[nodiscard]]</code> attribute. When you declare a function <code>[[nodiscard]]</code>, you indicate that its
return value should not be ignored.&nbsp;This can help prevent bugs related to:</p>
<ul>
  <li> Memory leak, in case the function returns a pointer to unmanaged memory </li>
  <li> Performance, in case the discarded value is costly to construct </li>
  <li> Security, in case the return value indicates an error condition that needs to be taken into account </li>
</ul>
<p>If the return value is ignored, the compiler is encouraged to issue a warning. Also, our analyzer will raise an issue, see {rule:cpp:S5277}.</p>
<p>Note that you can declare an enumeration or class <code>nodiscard</code>. In that case, the compiler will warn if the ignored value is coming from
a function that returns a <code>nodiscard</code> enumeration or class by value.</p>
<p>This rule will suggest adding the <code>[[nodiscard]]</code> attribute to functions with no side effects that return a value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
struct A {
  std::string name;
  std::string&amp; getName() { return name;} // Noncompliant
  std::string const&amp; getName() const {return name;} // Noncompliant
};

int sum(int x, int y) { // Noncompliant
  return x + y;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
struct A {
  std::string name;
  [[nodiscard]] std::string&amp; getName() { return name;} // Compliant
  [[nodiscard]] std::string const&amp; getName() const {return name;} // Compliant

};

[[nodiscard]] int sum(int x, int y) { // Compliant
  return x + y;
}
</pre>