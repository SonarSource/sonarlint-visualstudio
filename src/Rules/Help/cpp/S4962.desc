<p>Before C++11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to
whether a pointer or an integer was intended. Even with the <code>NULL</code> macro, the underlying value is still <code>0</code>.</p>
<p>C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(0); // Noncompliant
    f(NULL); // Noncompliant
    g(0); // Compliant, a real integer
    g(NULL); // Noncompliant, NULL should not be used for a real integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void f(char *c);
void g(int i);
void h()
{
    f(nullptr); // Compliant
    g(0);  // Compliant, a real integer
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es47-use-nullptr-rather-than-0-or-null">C++ Core
  Guidelines ES.47</a> - Use nullptr rather than 0 or NULL </li>
</ul>