<p>C++ does not support polymorphic copy or move assignment operators. For example, the signature of a copy assignment operator on a "Base" class
would be <code>Base&amp; operator=(const Base&amp; other)</code>.</p>
<p>And on a "Derived" class that extends "Base", it would be <code>Derived&amp; operator=(const Derived&amp; other)</code>.</p>
<p>Because these are two entirely different method signatures, the second method does not override the first, and adding <code>virtual</code> to the
"Base" signature does not change which method is called.</p>
<p>It is possible to add an <code>operator=</code> override in a derived class, but doing so is an indication that you may need to reexamine your
application architecture.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base {
public:
  virtual Base&amp; operator=(const Base&amp; other); // Noncompliant
};

class Derived : public Base {
public:
  Derived&amp; operator=(const Derived&amp; other);
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base {
protected:
  Base&amp; operator=(const Base&amp; other); // not virtual
};

class Derived : public Base {
public:
  Derived&amp; operator=(const Derived&amp; other);
};
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#c60-make-copy-assignment-non-virtual-take-the-parameter-by-const-and-return-by-non-const">C++ Core Guidelines C.60</a> - Make copy assignment non-virtual, take the parameter by const&amp;, and return by non-const&amp; </li>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#c63-make-move-assignment-non-virtual-take-the-parameter-by--and-return-by-non-const-">C++ Core Guidelines C.63</a> - Make move assignment non-virtual, take the parameter by &amp;&amp;, and return by non-const &amp; </li>
</ul>