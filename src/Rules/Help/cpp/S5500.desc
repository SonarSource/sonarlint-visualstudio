<p>Rvalue reference arguments allow to transfer ownership of objects.</p>
<p>When a function has an argument of type rvalue reference, it is expected to call <code>std::move</code> to take ownership of the corresponding
parameter when it is called.</p>
<p>If it does not do it or if it does it conditionally, ownership is unclear and this might lead to bugs.</p>
<p>This rule does not apply when the argument is a forwarding reference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum class Shape {
  empty, circle, square
};

class DrawingStore {
  std::vector&lt;Shape&gt; store;
public:
  void insertShape(Shape &amp;&amp;shape) {
    store.emplace_back(shape); // Noncompliant, call to std::move is expected
  }

  void insertIfCircle(Shape &amp;&amp;shape) {
      if (shape == Shape::circle) {
          store.emplace_back(std::move(shape)); // Noncompliant, std::move is not always called, ownership of shape is not clear
      }
  }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
enum class Shape {
  empty, circle, square
};

class DrawingStoreOk {
  std::vector&lt;Shape&gt; store;
public:
  void insertShape(Shape &amp;&amp;shape) {
    store.emplace_back(std::move(shape));
  }

  void insertIfCircle(const Shape &amp;shape) {
      if (shape == Shape::circle) {
          store.emplace_back(shape);
      }
  }
};
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#f18-for-will-move-from-parameters-pass-by-x-and-stdmove-the-parameter">C++ Core Guidelines F.18</a> - For “will-move-from” parameters, pass by X&amp;&amp; and std::move the parameter </li>
</ul>