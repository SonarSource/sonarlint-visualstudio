<p><em>Mutexes</em> are synchronization primitives that allow to manage concurrency. It is a common situation to have to lock multiple
<em>mutexes</em> simultaneously to get access to several resources at the same time.</p>
<p>If this is not done properly, it can lead to deadlocks or crashes. If one thread acquires A then tries to acquire B, while another thread acquires
B then tries to acquire A, both threads will wait for each other forever.</p>
<p>In such a case, a commonly accepted good practice is to define an order on the <em>mutexes</em> and to lock them in that order and unlock them in
the reverse order. However, such an order is not always clearly defined or easy to ensure across a whole program.</p>
<p>C++ provides facilities to lock multiple <em>mutexes</em> in one go, with a dedicated deadlock prevention algorithm. They should be used instead.
Before C++17, you should use <code>std::lock</code>, and since C++17 you can use a variadic constructor of <code>std::scoped_lock</code>. See the
examples for more details.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void g();

std::mutex m1;
std::mutex m2;

void f() {
  // The example would be the same with std::lock_guard if C++17 std::scoped_lock is not available
  std::scoped_lock&lt;std::mutex&gt; lck1(m1); // Compliant: first mutex acquired
  std::scoped_lock&lt;std::mutex&gt; lck2(m2); // Noncompliant: acquiring several mutexes
  g();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void g();

std::mutex m1;
std::mutex m2;

void f() { // Compliant: C++11 solution
  std::lock(m1, m2);
  std::lock_guard&lt;std::mutex&gt; lck1(m1, std::adopt_lock);
  std::lock_guard&lt;std::mutex&gt; lck2(m2, std::adopt_lock);
  g();
}

void f() { // Compliant: C++17 solution
  std::scoped_lock&lt;std::mutex, std::mutex&gt; lck1(m1, m2);
  g();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#cp21-use-stdlock-or-stdscoped_lock-to-acquire-multiple-mutexes">C++ Core Guidelines CP.21</a> - Use std::lock() or std::scoped_lock to acquire multiple mutexes </li>
  <li> <a href="https://en.cppreference.com/w/cpp/thread/scoped_lock">cppreference.com - std::scoped_lock</a> </li>
</ul>