<p>When inheriting from a class, if you need to inherit its constructors without additional initialization you should prefer
<code>using-declaration</code> to inherit all base classâ€™s constructors instead of writing them by hand.</p>
<p><code>using-declaration</code> for inheriting constructor is a C++11 feature that makes all constructors of the base visible to the overload
resolution when initializing the derived class.</p>
<p>If you need to change the accessibility of one of the inherited constructors, you can do it by keeping the <code>using-declaration</code> and
declaring that constructor explicitly as private:</p>
<pre>
class Base {
public:
  Base(int p) {}
  Base(int p1, int p2) {}
};

class Derived : public Base {
  using Base::Base;
  Derived(int p1, int p2);  // Changes constructor to private accessibility
};

int f(){
  Derived b(1); // Base(int p) is visible when initializing the derived class
  Derived b1(1,2); // Compilation error: Base(int p1, int p2) is not visible when initializing the derived class
}
</pre>
<p>This rule raises an issue when a constructor inherits the base class constructor without requiring any additional initialization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base {
public:
  Base(int p) {}
};

class Derived : public Base {
public:
  Derived(int p) : Base(p) {} // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base {
public:
  Base(int p) {}
};

class Derived : public Base {
  using Base::Base;
};
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/9efcaf07f7013fb6d07ee004f936540164535c63/CppCoreGuidelines.md#c52-use-inheriting-constructors-to-import-constructors-into-a-derived-class-that-does-not-need-further-explicit-initialization">C++ Core Guidelines C.52</a> - Use inheriting constructors to import constructors into a derived class that does not need further explicit initialization </li>
</ul>