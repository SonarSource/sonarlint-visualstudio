<p>If you throw a general exception type, such as <code>std::exception</code>, <code>std::logic_error</code> or <code>std::runtime_error</code>, it
forces consumers to catch all exceptions, including unknown exceptions they donâ€™t necessarily know how to handle.</p>
<p>Instead, either throw a subtype that already exists ( for example in <code>&lt;stdexcept&gt;</code> ), or create your own type that derives from a
standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw std::logic_error("Unexpected null 'user_id' argument."); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw std::invalid_argument("Unexpected null 'user_id' argument.");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/397">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/_DdGBQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable </li>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types">C++ Core Guidelines E.14</a> - Use
  purpose-designed user-defined types as exceptions (not built-in types) </li>
</ul>