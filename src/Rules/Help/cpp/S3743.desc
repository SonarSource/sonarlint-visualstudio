<p><code>noexcept</code> is a specifier that can be applied to a function declaration to state whether or not this function might throw an
exception.</p>
<p>This specifier is a crucial information for the compiler as it enables it to perform automatic optimizations. It is also used by the
<code>noexcept</code> operator, so that a developer can know whether an expression can throw, and adapt the code accordingly (for instance, to decide
to <code>move</code> or <code>copy</code> an object).</p>
<p>When a function is specified <code>noexcept</code>, the compiler does not generate any code to throw exceptions and any uncaught exception will
result in a call to std::terminate. This means that writing a <code>noexcept</code> function is an implicit agreement to the statement : "my program
will terminate if any exception is thrown inside this function".</p>
<p>It is a very strong commitment as there are so many ways to get an exception including any dynamic allocation.</p>
<p>This rule raises an issue when an exception is thrown, directly or indirectly, from a function declared <code>noexcept</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#include &lt;exception&gt;
#include &lt;memory&gt;

using namespace std;

class SafetyException {};
class Engine {};
unique_ptr&lt;Engine&gt; engine;

bool safety_check() noexcept;
void other_checks();

void critical_checks() {
  if (!safety_check()) {
    throw SafetyException{};
  }
}

void do_checks() {
  critical_checks(); // can throw
  other_checks(); // can throw
}

void init() noexcept(true) { // noncompliant because...
  do_checks(); // can throw
  engine = std::make_unique&lt;Engine&gt;(); // can throw
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#include &lt;exception&gt;
#include &lt;memory&gt;

using namespace std;

class SafetyException {};
class Engine {};
unique_ptr&lt;Engine&gt; engine;

bool safety_check();
void other_checks();

void critical_checks() {
  if (!safety_check()) {
    throw SafetyException{};
  }
}

void do_checks() {
  critical_checks();
  other_checks();
}

void init() noexcept(true) { // compliant because ...
  try {
    do_checks(); // exception caught
    engine = std::make_unique&lt;Engine&gt;(); // exception caught
  } catch(std::exception e) {
    std::terminate();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Destructors are not handled by this rule because there is a specific rule about exceptions in destructors (see ExceptionInDestructor).</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.hlsl.co.uk/blog/2017/12/1/c-noexcept-and-move-constructors-effect-on-performance-in-stl-containers">C++ noexcept and move
  constructors effect on performance in STL containers</a> </li>
</ul>