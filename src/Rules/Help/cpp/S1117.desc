<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think theyâ€™re using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
public:
  void doSomething();

private:
  int myField;
};

void Foo::doSomething()
{
    int myField = 0; // Noncompliant
    // ...
}
</pre>
<pre>
void f(int x, bool b) {
  int y = 4;
  if (b) {
    int x = 7; // Noncompliant
    int y = 9; // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo
{
public:
  void doSomething();

private:
  int myField;
};

void Foo::doSomething()
{
    int myInternalField = 0; // Compliant
    // ...
}
</pre>
<pre>
void f(int x, bool b) {
  int y = 4;
  if (b) {
    int z = 7; // Better yet: Use meaningful names
    int w = 9;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>It is common in a constructor to have constructor arguments shadowing the fields that they will initialize. This pattern avoids the need to select
new names for the constructor arguments, and will not be reported by this rule:</p>
<pre>
class Point{
public:
  Point(int x, int y) : x(x), y(y) {} // Compliant by exception
private:
  int x;
  int y;
};
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that
  identifier </li>
  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>