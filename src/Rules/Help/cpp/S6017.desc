<p>C++17 version of the standards introduces <code>if constexpr</code>. If the <code>constexpr</code> keyword follows the <code>if</code> keyword in
an if statement, then the <code>if</code> condition must be a constant and the <code>then</code> or <code>else</code> block is discarded at compile
time, depending on the value of the constant.</p>
<p>More precisely, <code>if constexpr</code> branches that are discarded are not going to be instantiated. This behavior enables us to write some
overloaded function templates in a more readable way: you donâ€™t need to use complex patterns (eg: by using <code>std::enable_if</code>) to make code
compile.</p>
<p>This rule points out where&nbsp;a complex overloaded functions template could simply be replaced by <code>if constexpr</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
template&lt;typename Type&gt;
typename std::enable_if_t&lt;std::is_arithmetic_v&lt;Type&gt;&gt; process(Type&amp;&amp; type); // Noncompliant, this function can be combined with the one below

template&lt;typename Type&gt;
typename std::enable_if_t&lt;!std::is_arithmetic_v&lt;Type&gt;&gt; process(Type&amp;&amp; type);

template &lt;typename It, typename Distance&gt;
void moveForward(It&amp; it, Distance d, std::input_iterator_tag); // Noncompliant, this function can be combined with the one below

template &lt;typename It, typename Distance, typename T&gt;
void moveForward(It&amp; it, Distance d, T);

template &lt;typename It, typename Distance&gt;
void moveForward(It&amp; it, Distance d) { // Wrapper of the "moveForward" functions
    moveForward(it, d, typename std::iterator_traits&lt;It&gt;::iterator_category{} );
}
</pre>
<h2>Compliant Solution</h2>
<pre>
template&lt;typename Type&gt;
void process(Type&amp;&amp; type) {
    if constexpr(std::is_arithmetic_v&lt;type&gt;) {
        // implementation
    } else {
        // implementation
    }
}

template &lt;typename It, typename Distance&gt;
void moveForward(It&amp; it, Distance d) { // Modifications have been directly done inside the wrapper
    if constexpr (std::iterator_traits&lt;It&gt;::input_iterator_tag) {
        // implementation
    } else {
        // implementation
    }
}
</pre>