<p>Overriding <code>operator new</code> typically indicates that custom memory allocation is required for the class. When thatâ€™s the case, it must be
balanced with a custom memory deallocation in a matching <code>operator delete</code> method. Otherwise memory leaks or memory corruption will
result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class AirPlane
{
public:
  void* operator new(size_t size);
  void fly();
};
</pre>
<h2>Compliant Solution</h2>
<pre>
class AirPlane
{
public:
  void* operator new(size_t size);
  void operator delete(void* deadObject, size_t size);
  void fly();
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/KX0-BQ">CERT, DCL54-CPP.</a> - Overload allocation and deallocation functions as a pair in the
  same scope </li>
  <li> <a
  href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#r15-always-overload-matched-allocationdeallocation-pairs">C++
  Core Guidelines R.15</a> - Always overload matched allocation/deallocation pairs </li>
</ul>