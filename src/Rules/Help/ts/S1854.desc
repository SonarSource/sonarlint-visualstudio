<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if itâ€™s not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<ul>
  <li> This rule ignores initializations to -1, 0, 1, <code>undefined</code>, [], {}, <code>true</code>, <code>false</code> and <code>""</code>. </li>
  <li> Variables that start with an underscore (e.g. '<code>_unused</code>') are ignored. </li>
  <li> Assignment of <code>null</code> is ignored because it is sometimes used to help garbage collection </li>
  <li> Increment and decrement expressions are ignored because they are often used idiomatically instead of <code>x+1</code> </li>
  <li> This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object): </li>
</ul>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: "let [, x2, x3] = arr;"
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/563">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
</ul>