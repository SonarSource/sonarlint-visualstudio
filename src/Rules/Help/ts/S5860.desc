<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead; </li>
  <li> referenced while not defined. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
const date = "01/02";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched[1], dateMatched[2]); // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatched.groups.day); // Noncompliant - there is no group called "day"
}

// ...

const score = "14:1";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/; // Noncompliant - named groups are never used
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const date = "01/02";

const datePattern = /(?&lt;month&gt;[0-9]{2})\/(?&lt;year&gt;[0-9]{2})/;
const dateMatched = date.match(datePattern);

if (dateMatched !== null) {
  checkValidity(dateMatched.groups.month, dateMatched.groups.year);
}

// ...

const score = "14:1";

const scorePattern = /(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)/;
const scoreMatched = score.match(scorePattern);

if (scoreMatched !== null) {
  checkScore(scoreMatched.groups.player1);
  checkScore(scoreMatched.groups.player2);
}
</pre>