<p>The <code>in</code> operator used on an array is valid but the code will likely not have the expected behavior. The <code>in</code> operator deals
with the indexes of the array, not with the values.</p>
<p>If checking for an array slot is indeed desired, using <code>hasOwnProperty</code> makes the code intention clearer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function func1() {
    let arr = ["a", "b", "c"];

    let expectedValue = "b";
    if (expectedValue in arr) { // Noncompliant, will be always false
        return expectedValue + " found in the array";
    } else {
        return expectedValue + " not found";
    }
}

function func2() {
    let arr = ["a", "b", "c"];

    let expectedValue = "1"; // index #1 is corresponding to the value "b"
    if (expectedValue in arr) { // Noncompliant, will be always true because the array is made of 3 elements and the #1 is always there whatever its value
        return expectedValue + " found in the array";
    } else {
        return expectedValue + " not found";
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function func() {
    let arr = ["a", "b", "c"];

    let expectedValue = "b";
    if (arr.includes(expectedValue)) {
        return expectedValue + " was found in the array";
    } else {
        return expectedValue + " not found";
    }
}
</pre>