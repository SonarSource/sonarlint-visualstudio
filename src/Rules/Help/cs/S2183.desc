<p>Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.</p>
<p>If the first operand is an <code>int</code> or <code>uint</code> (32-bit quantity), the shift count is given by the low-order five bits of the
second operand. That is, the actual shift count is 0 to 31 bits.</p>
<p>Note that integral number with a less than 32-bit quantity (e.g. <code>short</code>, <code>ushort</code>…​) are implicitly converted to
<code>int</code> before the shifting operation and so the rule for <code>int</code>/<code>uint</code> applies.</p>
<p>If the first operand is a <code>long</code> or <code>ulong</code> (64-bit quantity), the shift count is given by the low-order six bits of the
second operand. That is, the actual shift count is 0 to 63 bits.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = (short)(s &lt;&lt; 0); // Noncompliant
    short shortShift1 = (short)(s &lt;&lt; 16); // Compliant as short will be cast to int (16 is between 0 and 31)
    short shortShift3 = (short)(s &lt;&lt; 32); // Noncompliant, this is equivalent to shifting by 1

    int i = 1;
    int intShift1 = i &lt;&lt; 0; // Noncompliant
    int intShift2 = i &lt;&lt; 32; // Noncompliant, this is equivalent to shifting by 1

    long lg = 1;
    long longShift1 = lg &lt;&lt; 0; // Noncompliant
    long longShift2 = lg &lt;&lt; 64; // Noncompliant, this is equivalent to shifting by 1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = s;
    short shortShift1 = (short)(s &lt;&lt; 16);
    short shortShift3 = (short)(s &lt;&lt; 1);

    int i = 1;
    var intShift1 = i;
    var intShift2 = i &lt;&lt; 1;

    long lg = 1;
    var longShift1 = lg;
    var longShift2 = lg &lt;&lt; 1;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>
<h2>See</h2>
<ul>
  <li> <a
  href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-">Microsoft
  documentation - Bitwise and shift operators</a> </li>
</ul>