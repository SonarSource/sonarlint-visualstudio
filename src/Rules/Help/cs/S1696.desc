<p><code>NullReferenceException</code> should be avoided, not caught. Any situation in which <code>NullReferenceException</code> is explicitly caught
can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch
of the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int GetLengthPlusTwo(string str)
{
    int length = 2;
    try
    {
       length += str.Length;
    }
    catch (NullReferenceException e)
    {
        log.info("argument was null");
    }
    return length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int GetLengthPlusTwo(string str)
{
    int length = 2;

    if (str != null)
    {
        length += str.Length;
    }
    else
    {
        log.info("argument was null");
    }
    return length;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/395">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference
  </li>
</ul>