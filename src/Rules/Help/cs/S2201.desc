<p>When the call to a function doesn’t have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn’t behave as expected.</p>
<p>This rule raises an issue when the results of the following methods are ignored:</p>
<ul>
  <li> LINQ method, </li>
  <li> <code>[Pure]</code> method, </li>
  <li> any method on <code>string</code>, <code>int</code>, …​, <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>,
  <code>ImmutableHashSet&lt;T&gt;</code>, …​ </li>
</ul>
<p>Notes:</p>
<ul>
  <li> although <code>string.Intern</code> has a side effect, ignoring its return value is still suspicious as it is the only reference ensured to
  point to the intern pool. </li>
  <li> Link methods can have side effects if they are misused. Example: </li>
</ul>
<pre>
tests.All(c =&gt; { c.myfield = "foo"; return true; });
</pre>
<p>Such code should be rewritten as a normal loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i); // Noncompliant
"this string".Equals("other string"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var res = coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i);
var isEqual = "this string".Equals("other string");
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t report issues on method calls with <code>out</code> or <code>ref</code> arguments.</p>