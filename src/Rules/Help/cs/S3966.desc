<p>Disposing an object twice, either with the <code>using</code> keyword or by calling <code>Dispose</code> directly, in the same method is at best
confusing and at worst error-prone. The next developer might see only one of the <code>Dispose</code>/<code>using</code> and try to use an
already-disposed object.</p>
<p>In addition, even if <a href="https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=netcore-3.1">the documentation of
<code>Disposable</code></a> explicitly states that calling the <code>Dispose</code> method multiple times should not throw an exception, some
implementation still do it. Thus it is safer to not dispose an object twice when possible.</p>
<p>This rule raises an issue when, in the same method, the <code>Dispose</code> method is explicitly called twice on the same object, or when
<code>using</code> is used with a direct call to <code>Dispose()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using (var d = new Disposable()) // Noncompliant
{
    d.Dispose();
}
</pre>
<pre>
using var d = new Disposable();
d.Dispose(); // Noncompliant {{Refactor this code to make sure 'd' is disposed only once.}}
</pre>
<h2>Compliant Solution</h2>
<pre>
using var d = new Disposable();
</pre>