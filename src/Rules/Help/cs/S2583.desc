<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Sample(bool b)
{
    bool a = false;
    if (a) // Noncompliant
    {
        DoSomething(); // never executed
    }

    if (!a || b) // Noncompliant; "!a" is always "true", "b" is never evaluated
    {
        DoSomething();
    }
    else
    {
        DoSomethingElse(); // never executed
    }

    var d = "xxx";
    var res = d ?? "value"; // Noncompliant, d is always not null, "value" is never used
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Sample(bool b)
{
    bool a = false;
    if (Foo(a))
    {
        DoSomething();
    }

    if (b)
    {
        DoSomething();
    }
    else
    {
        DoSomethingElse();
    }

    var d = "xxx";
    var res = d;
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue in either of these cases:</p>
<ul>
  <li> When the condition is a single <code>const bool</code> </li>
</ul>
<pre>
const bool debug = false;
//...
if (debug)
{
  // Print something
}
</pre>
<ul>
  <li> When the condition is the literal <code>true</code> or <code>false</code>. </li>
</ul>
<p>In these cases it is obvious the code is as intended.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>