<p>Thereâ€™s no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it
is not.</p>
<p>Supported test frameworks are <code>NUnit</code> and <code>MSTest</code> (not applicable to <code>xUnit</code>).</p>
<p>This rule will raise an issue when any of these conditions are met:</p>
<ul>
  <li> For <strong>NUnit</strong>, a class is marked with <code>TestFixture</code> but does not contain any method marked with <code>Test</code>,
  <code>TestCase</code>, <code>TestCaseSource</code> or <code>Theory</code>. </li>
  <li> For <strong>MSTest</strong>, a class is marked with <code>TestClass</code> but does not contain any method marked with <code>TestMethod</code>
  or <code>DataTestMethod</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestFixture]
public class SomeClassTest { } // Noncompliant - no test

[TestClass]
public class SomeOtherClassTest { } // Noncompliant - no test
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestFixture]
public class SomeClassTest
{
    [Test]
    public void SomeMethodShouldReturnTrue() { }
}

[TestClass]
public class SomeOtherClassTest
{
    [TestMethod]
    public void SomeMethodShouldReturnTrue() { }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> abstract classes </li>
  <li> derived classes that inherit from a base class that does have test methods </li>
  <li> in <strong>MSTest</strong>, classes that contain methods marked with either <code>AssemblyInitialize</code> or <code>AssemblyCleanup</code>.
  </li>
</ul>