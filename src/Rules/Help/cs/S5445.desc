<p>Creating temporary files using insecure methods exposes the application to race conditions on filenames: a malicious user can try to create a file
with a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted.
This risk is even higher if the application run with elevated permissions.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-1858">CVE-2014-1858</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-1932">CVE-2014-1932</a> </li>
</ul>
<p><code>Path.GetTempFileName()</code>&nbsp;generates predictable file names and is inherently unreliable and insecure. Additionally, the&nbsp;method
will raise an&nbsp;<code>IOException</code> if it is used to create more than 65535 files without deleting previous temporary files.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Out of the box, .NET is missing secure-by-design APIs to create temporary files. To overcome this, one of the following options can be used:</p>
<ul>
  <li> Use a dedicated sub-folder with tightly controlled permissions </li>
  <li> Created temporary files in a publicly writable folder and make sure:
    <ul>
      <li> Generated filename is unpredictable </li>
      <li> File is readable and writable only by the creating user ID </li>
      <li> File descriptor is not inherited by child processes </li>
      <li> File is destroyed as soon as it is closed </li>
    </ul>  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var tempPath = Path.GetTempFileName();  // Noncompliant

using (var writer = new StreamWriter(tempPath))
{
    writer.WriteLine("content");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var randomPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());

// Creates a new file with write, non inheritable permissions which is deleted on close.
using (var fileStream = new FileStream(randomPath, FileMode.CreateNew, FileAccess.Write, FileShare.None, 4096, FileOptions.DeleteOnClose))
using (var writer = new StreamWriter(fileStream))
{
    writer.WriteLine("content");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/Top10/A01_2021-Broken_Access_Control/">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> -
  Using Components with Known Vulnerabilities </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/377">MITRE, CWE-377</a> - Insecure Temporary File </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/379">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions
  </li>
  <li> <a href="https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File">OWASP, Insecure Temporary File</a> </li>
</ul>