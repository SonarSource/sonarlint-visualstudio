<p>When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their
implementation.</p>
<p>The following guidelines should be followed:</p>
<ul>
  <li> When providing <code>operator ==</code> you should also provide <code>operator !=</code> and vice-versa. </li>
  <li> When providing <code>operator ==</code> you should also provide <code>Equals(Object)</code> and <code>GetHashCode()</code>. </li>
  <li> When providing <code>operator +, -, *, / or %</code>&nbsp;you should also provide <code>operator ==</code>, respecting previous guidelines.
  </li>
</ul>
<p>This rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo // Noncompliant
  {
    private int left;
    private int right;

    public Foo(int l, int r)
    {
      this.left = l;
      this.right = r;
    }

    public static Foo operator +(Foo a, Foo b)
    {
      return new Foo(a.left + b.left, a.right + b.right);
    }

    public static Foo operator -(Foo a, Foo b)
    {
      return new Foo(a.left - b.left, a.right - b.right);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    private int left;
    private int right;

    public Foo(int l, int r)
    {
      this.left = l;
      this.right = r;
    }

    public static Foo operator +(Foo a, Foo b)
    {
      return new Foo(a.left + b.left, a.right + b.right);
    }

    public static Foo operator -(Foo a, Foo b)
    {
      return new Foo(a.left - b.left, a.right - b.right);
    }

    public static bool operator ==(Foo a, Foo b)
    {
      return (a.left == b.left &amp;&amp; a.right == b.right);
    }

    public static bool operator !=(Foo a, Foo b)
    {
      return !(a == b);
    }

    public override bool Equals(Object obj)
    {
      Foo a = obj as Foo;
      if (a == null)
        return false;
      return this == a;
    }

    public override int GetHashCode()
    {
       return (this.left * 10) + this.right;
    }
  }
}
</pre>