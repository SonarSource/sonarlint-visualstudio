<p>An <code>IDisposable</code> object should be disposed (there are some rare exceptions where not disposing is fine, most notably <code>Task</code>).
If a class has an <code>IDisposable</code> field, there can be two situations:</p>
<ul>
  <li> The class observes a field that is under the responsibility of another class. </li>
  <li> The class owns the field, and is therefore responsible for calling <code>Dispose</code> on it. </li>
</ul>
<p>In the second case, the safest way for the class to ensure <code>Dispose</code> is called is to call it in its own <code>Dispose</code> function,
and therefore to be itself <code>IDisposable</code>. A class is considered to own an <code>IDisposable</code> field resource if it created the object
referenced by the field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Disposed
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
&nbsp;&nbsp;private FileStream fs;
&nbsp;&nbsp;public void OpenResource(string path)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
&nbsp;&nbsp;}
&nbsp;&nbsp;public void CloseResource()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();
&nbsp;&nbsp;}

&nbsp;&nbsp;public void Dispose()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();
&nbsp;&nbsp;}
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/459">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>