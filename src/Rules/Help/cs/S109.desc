<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void DoSomething()
{
    for(int i = 0; i &lt; 4; i++)  // Noncompliant, 4 is a magic number
    {
        ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private const int NUMBER_OF_CYCLES = 4;

public static void DoSomething()
{
    for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++)  //Compliant
    {
        ...
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn’t raise an issue when the magic number is used as part of:</p>
<ul>
  <li> the <code>GetHashCode</code> method </li>
  <li> a variable/field declaration </li>
  <li> the single argument of an attribute </li>
  <li> a named argument for a method or attribute </li>
  <li> a constructor call </li>
</ul>