<p>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways <code>IEnumerable</code>
language integrated queries (LINQ) can be simplified</p>
<ul>
  <li> Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then null-checking in a query
  expression to choose elements based on type. </li>
  <li> Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast in a <code>Select</code> </li>
  <li> Use an expression in <code>Any</code> instead of <code>Where(element =&gt; [expression]).Any()</code>. </li>
  <li> Use <code>Count</code> instead of <code>Count()</code> when it’s available. </li>
  <li> Don’t call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain. </li>
</ul>
<p>Using <code>EntityFramework</code> may require enforcing client evaluations. Such queries should use <code>AsEnumerable()</code> instead of
<code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
seq1.Select(element =&gt; element as T).Any(element =&gt; element != null);  // Noncompliant; use OfType
seq2.Select(element =&gt; element as T).Any(element =&gt; element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType
seq3.Where(element =&gt; element is T).Select(element =&gt; element as T); // Noncompliant; use OfType
seq4.Where(element =&gt; element is T).Select(element =&gt; (T)element); // Noncompliant; use OfType
seq5.Where(element =&gt; [expression]).Any();  // Noncompliant; use Any([expression])

var num = seq6.Count(); // Noncompliant
var arr = seq.ToList().ToArray(); //Noncompliant
var count = seq.ToList().Count(x=&gt;[condition]); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
seq1.OfType&lt;T&gt;().Any();
seq2.OfType&lt;T&gt;().Any(element =&gt; CheckCondition(element));
seq3.OfType&lt;T&gt;();
seq4.OfType&lt;T&gt;();
seq5.Any(element =&gt; [expression])

var num = seq6.Count;
var arr = seq.ToArray();
var count = seq.Count(x=&gt;[condition]);
</pre>