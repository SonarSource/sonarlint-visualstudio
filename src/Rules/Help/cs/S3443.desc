<p>If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there’s no
real point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely
predictable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var intType = typeof(int);
var runtimeType = intType.GetType(); // Noncompliant, always typeof(System.RuntimeType)

var s = "abc";
if (s.GetType().IsInstanceOfType(typeof(string))) // Noncompliant; false
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
var s = "abc";

if (s.GetType().IsInstanceOfType("string"))
{ /* ... */ }
</pre>
<h2>Exceptions</h2>
<pre>
typeof(Type).GetType(); // Can be used by convention to get an instance of ‘System.RuntimeType’
</pre>