<p>Serialization event handlers that donâ€™t have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises an issue when a method marked with one of the following attributes is <code>public</code>, <code>static</code>, does not return
<code>void</code>, has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private

    [OnSerialized]
    int OnSerialized(StreamingContext context) {} // Noncompliant should return void

    [OnDeserializing]
    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext

    [OnSerializing]
    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters

    [OnDeserialized]
    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    private void OnSerializing(StreamingContext context) {}

    [OnSerialized]
    private void OnSerialized(StreamingContext context) {}

    [OnDeserializing]
    private void OnDeserializing(StreamingContext context) {}

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context) {}
}
</pre>