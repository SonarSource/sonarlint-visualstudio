<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>
<ul>
  <li> <code>MSTest</code> </li>
  <li> <code>NUnit</code> </li>
  <li> <code>xUnit</code> </li>
  <li> <code>FluentAssertions</code> (4.x and 5.x) </li>
  <li> <code>NFluent</code> </li>
  <li> <code>NSubstitute</code> </li>
  <li> <code>Shoudly</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
public void MyMethod_WhenSomething_ExpectsSomething()
{
    var myClass = new Class();
    var result = myClass.GetFoo();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void MyMethod_WhenSomething_ExpectsSomething()
{
    var myClass = new Class();
    var result = myClass.GetFoo();
    Assert.IsTrue(result);
}
</pre>
<h2>Exceptions</h2>
<p>To create a custom assertion method declare an attribute with name <code>AssertionMethodAttribute</code> and mark the method with it:</p>
<pre>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

[TestClass]
public class CustomTest
{
    [TestMethod]
    public void TestMethod1() =&gt; Validator.CustomMethod(42);    // Compliant
}

public static class Validator
{
    [AssertionMethod]
    public static void CustomMethod(int value) { }
}

public class AssertionMethodAttribute : Attribute { }
</pre>