<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments inside lambda and delegate expressions are allowed.</p>
<p>Furthermore, the following patterns are also accepted:</p>
<pre>
var a = b = c = 10;
</pre>
<pre>
while ((val = GetNewValue()) &gt; 0)
{
...
}
</pre>
<pre>
private MyClass instance;
public MyClass Instance
{
  get
  {
    return instance ?? (instance = new MyClass());
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/481">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
</ul>