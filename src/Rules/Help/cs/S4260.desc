<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesnâ€™t match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument("value2")]   // Noncompliant
    public object Value1 { get; set; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument("value1")]
    public object Value1 { get; set; }
  }
}
</pre>