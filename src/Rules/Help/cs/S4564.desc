<p>ASP.Net has a feature to validate HTTP requests to prevent potentially dangerous content to perform a cross-site scripting (XSS) attack. There is
no reason to disable this mechanism even if other checks to prevent XXS attacks are in place.</p>
<p>This rule raises an issue if a method with parameters is marked with <code>System.Web.Mvc.HttpPostAttribute</code> and not
<code>System.Web.Mvc.ValidateInputAttribute(true)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FooBarController : Controller
{
    [HttpPost] // Noncompliant
    [ValidateInput(false)]
    public ActionResult Purchase(string input)
    {
        return Foo(input);
    }

    [HttpPost] // Noncompliant
    public ActionResult PurchaseSomethingElse(string input)
    {
        return Foo(input);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FooBarController : Controller
{
    [HttpPost]
    [ValidateInput(true)] // Compliant
    public ActionResult Purchase(string input)
    {
        return Foo(input);
    }
}
</pre>
<h2>Exceptions</h2>
<p>Parameterless methods marked with <code>System.Web.Mvc.HttpPostAttribute</code> will not trigger this issue.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site
  Scripting (XSS) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/79">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href="https://www.owasp.org/index.php/ASP.NET_Request_Validation">OWASP ASP.NET Request Validation</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use {rule:csharpsquid:S5753} instead.</p>