<p>If a lock is held or acquired and then released within a method, it should be released along all execution paths.</p>
<p>Failing to do so could make an application deadlock-prone because there is a risk of the lock not being released.</p>
<p>The types tracked by the rule are: <code>Monitor</code>, <code>Mutex</code>, <code>ReaderWriterLock</code>, <code>ReaderWriterLockSlim</code> and
<code>SpinLock</code> from the <code>System.Threading</code> namespace.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private object obj = new object();

  public void DoSomethingWithMonitor()
  {
    Monitor.Enter(obj); // Noncompliant
    if (IsInitialized())
    {
      // ...
      Monitor.Exit(obj);
    }
  }

  private ReaderWriterLockSlim lockObj = new ReaderWriterLockSlim();

  public void DoSomethingWithReaderWriteLockSlim()
  {
    lockObj.EnterReadLock(); // Noncompliant
    if (IsInitialized())
    {
      // ...
      lockObj.ExitReadLock();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  private object obj = new object();

  public void DoSomethingWithMonitor()
  {
    lock(obj) // lock() {...} is easier to use than explicit Monitor calls
    {
      if (IsInitialized())
      {
      }
    }
  }

  private ReaderWriterLockSlim lockObj = new ReaderWriterLockSlim();

  public void DoSomethingWithReaderWriteLockSlim()
  {
    lockObj.EnterReadLock();
    try
    {
      if (IsInitialized())
      {
      }
    }
    finally
    {
      lockObj.ExitReadLock();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/459">MITRE, CWE-459</a> - Incomplete Cleanup </li>
  <li> <a
  href="https://docs.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives#synchronization-of-access-to-a-shared-resource">Synchronization of access to a shared resource</a>. </li>
</ul>