[
  {
    "ruleKey": "typescript:S2092",
    "type": "SECURITY_HOTSPOT",
    "name": "Creating cookies without the 'secure' flag is security-sensitive",
    "htmlDescription": "\\u003cp\\u003eWhen a cookie is protected with the \\u003ccode\\u003esecure\\u003c/code\\u003e attribute set to \\u003cem\\u003etrue\\u003c/em\\u003e it will not be send by the browser over an unencrypted HTTP\\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. \\u003c/p\\u003e\\n\\u003ch2\\u003eAsk Yourself Whether\\u003c/h2\\u003e\\n\\u003cul\\u003e\\n  \\u003cli\\u003e the cookie is for instance a \\u003cem\\u003esession-cookie\\u003c/em\\u003e not designed to be sent over non-HTTPS communication. \\u003c/li\\u003e\\n  \\u003cli\\u003e it\\u0027s not sure that the website contains \\u003ca href\\u003d'https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content'\\u003emixed content\\u003c/a\\u003e or not (ie\\n  HTTPS everywhere or not) \\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cp\\u003eThere is a risk if you answered yes to any of those questions.\\u003c/p\\u003e\\n\\u003ch2\\u003eRecommended Secure Coding Practices\\u003c/h2\\u003e\\n\\u003cul\\u003e\\n  \\u003cli\\u003e It is recommended to use \\u003ccode\\u003eHTTPs\\u003c/code\\u003e everywhere so setting the \\u003ccode\\u003esecure\\u003c/code\\u003e flag to \\u003cem\\u003etrue\\u003c/em\\u003e should be the default behaviour\\n  when creating cookies. \\u003c/li\\u003e\\n  \\u003cli\\u003e Set the \\u003ccode\\u003esecure\\u003c/code\\u003e flag to \\u003cem\\u003etrue\\u003c/em\\u003e for session-cookies. \\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003ch2\\u003eSensitive Code Example\\u003c/h2\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/cookie-session'\\u003ecookie-session\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nlet session \\u003d cookieSession({\\n  secure: false,// Sensitive\\n});  // Sensitive\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/express-session'\\u003eexpress-session\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nconst express \\u003d require(\\u0027express\\u0027);\\nconst session \\u003d require(\\u0027express-session\\u0027);\\n\\nlet app \\u003d express();\\napp.use(session({\\n  cookie:\\n  {\\n    secure: false // Sensitive\\n  }\\n}));\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/cookies'\\u003ecookies\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nlet cookies \\u003d new Cookies(req, res, { keys: keys });\\n\\ncookies.set(\\u0027LastVisit\\u0027, new Date().toISOString(), {\\n  secure: false // Sensitive\\n}); // Sensitive\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/csurf'\\u003ecsurf\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nconst cookieParser \\u003d require(\\u0027cookie-parser\\u0027);\\nconst csrf \\u003d require(\\u0027csurf\\u0027);\\nconst express \\u003d require(\\u0027express\\u0027);\\n\\nlet csrfProtection \\u003d csrf({ cookie: { secure: false }}); // Sensitive\\n\\u003c/pre\\u003e\\n\\u003ch2\\u003eCompliant Solution\\u003c/h2\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/cookie-session'\\u003ecookie-session\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nlet session \\u003d cookieSession({\\n  secure: true,// Compliant\\n});  // Compliant\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/express-session'\\u003eexpress-session\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nconst express \\u003d require(\\u0027express\\u0027);\\nconst session \\u003d require(\\u0027express-session\\u0027);\\n\\nlet app \\u003d express();\\napp.use(session({\\n  cookie:\\n  {\\n    secure: true // Compliant\\n  }\\n}));\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/cookies'\\u003ecookies\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nlet cookies \\u003d new Cookies(req, res, { keys: keys });\\n\\ncookies.set(\\u0027LastVisit\\u0027, new Date().toISOString(), {\\n  secure: true // Compliant\\n}); // Compliant\\n\\u003c/pre\\u003e\\n\\u003cp\\u003e\\u003ca href\\u003d'https://www.npmjs.com/package/csurf'\\u003ecsurf\\u003c/a\\u003e module:\\u003c/p\\u003e\\n\\u003cpre\\u003e\\nconst cookieParser \\u003d require(\\u0027cookie-parser\\u0027);\\nconst csrf \\u003d require(\\u0027csurf\\u0027);\\nconst express \\u003d require(\\u0027express\\u0027);\\n\\nlet csrfProtection \\u003d csrf({ cookie: { secure: true }}); // Compliant\\n\\u003c/pre\\u003e\\n\\u003ch2\\u003eSee\\u003c/h2\\u003e\\n\\u003cul\\u003e\\n  \\u003cli\\u003e \\u003ca href\\u003d'https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure'\\u003eOWASP Top 10 2017 Category A3\\u003c/a\\u003e - Sensitive Data Exposure\\n  \\u003c/li\\u003e\\n  \\u003cli\\u003e \\u003ca href\\u003d'http://cwe.mitre.org/data/definitions/311'\\u003eMITRE, CWE-311\\u003c/a\\u003e - Missing Encryption of Sensitive Data \\u003c/li\\u003e\\n  \\u003cli\\u003e \\u003ca href\\u003d'http://cwe.mitre.org/data/definitions/315'\\u003eMITRE, CWE-315\\u003c/a\\u003e - Cleartext Storage of Sensitive Information in a Cookie \\u003c/li\\u003e\\n  \\u003cli\\u003e \\u003ca href\\u003d'http://cwe.mitre.org/data/definitions/614'\\u003eMITRE, CWE-614\\u003c/a\\u003e - Sensitive Cookie in HTTPS Session Without \\u0027Secure\\u0027 Attribute \\u003c/li\\u003e\\n  \\u003cli\\u003e \\u003ca href\\u003d'https://www.sans.org/top25-software-errors/#cat3'\\u003eSANS Top 25\\u003c/a\\u003e - Porous Defenses \\u003c/li\\u003e\\n\\u003c/ul\\u003e",
    "severity": "MINOR",
    "status": "READY",
    "tags": [],
    "params": [],
    "defaultParams": [],
    "scope": "MAIN",
    "eslintKey": "insecure-cookie",
    "activatedByDefault": true
  },
  {
    "ruleKey": "typescript:S3524",
    "type": "CODE_SMELL",
    "name": "Braces and parentheses should be used consistently with arrow functions",
    "htmlDescription": "\u003cp\u003eShared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the configured defaults forbidding parentheses\u003c/p\u003e\n\u003cpre\u003e\nvar foo \u003d (a) \u003d\u0026gt; { /* ... */ };  // Noncompliant; remove parens from arg\nvar bar \u003d (a, b) \u003d\u0026gt; { return 0; };  // Noncompliant; remove curly braces from body\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar foo \u003d a \u003d\u0026gt; { /* ... */ };\nvar bar \u003d (a, b) \u003d\u0026gt; 0;\n\u003c/pre\u003e",
    "severity": "INFO",
    "status": "READY",
    "tags": [
      "convention",
      "es2015"
    ],
    "params": [
      {
        "key": "body_braces",
        "name": "body_braces",
        "description": "True to require curly braces around function body. False to forbid them for single-return bodies.",
        "defaultValue": "false",
        "type": {
          "type": "BOOLEAN",
          "values": [],
          "multiple": false,
          "key": "BOOLEAN"
        }
      },
      {
        "key": "parameter_parens",
        "name": "parameter_parens",
        "description": "True to require parentheses around parameters. False to forbid them for single parameter.",
        "defaultValue": "false",
        "type": {
          "type": "BOOLEAN",
          "values": [],
          "multiple": false,
          "key": "BOOLEAN"
        }
      }
    ],
    "defaultParams": [
      {
        "requireParameterParentheses": false,
        "requireBodyBraces": false
      }
    ],
    "scope": "ALL",
    "eslintKey": "arrow-function-convention",
    "activatedByDefault": false
  },
  {
    "ruleKey": "typescript:MyTestRule",
    "name": "Deserialization of TEST scope. See #3218",
    "scope": "TEST"
  }
]