<UserControl x:Class="SonarLint.VisualStudio.IssueVisualization.Security.ReportView.ReportViewControl"
             x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dependencyRisks="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security.DependencyRisks"
             xmlns:reportView="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security.ReportView"
             xmlns:vsShell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:vsTheming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:res="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security"
             xmlns:wpf="clr-namespace:SonarLint.VisualStudio.Core.WPF;assembly=SonarLint.VisualStudio.Core"
             xmlns:hotspots="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security.ReportView.Hotspots"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:vsimagecatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:core="clr-namespace:SonarLint.VisualStudio.Core;assembly=SonarLint.VisualStudio.Core"
             xmlns:commands="clr-namespace:SonarLint.VisualStudio.IssueVisualization.IssueVisualizationControl.ViewModels.Commands;assembly=SonarLint.VisualStudio.IssueVisualization"
             xmlns:taints="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security.ReportView.Taints"
             xmlns:filters="clr-namespace:SonarLint.VisualStudio.IssueVisualization.Security.ReportView.Filters"
             DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ReportViewModel}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="SeverityIcons.xaml" />
                <ResourceDictionary Source="../SharedUI/SharedResources.xaml" />
                <ResourceDictionary Source="Hotspots/HotspotSeverity.xaml" />
                <ResourceDictionary Source="Filters/Filter.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--  Converters  -->
            <reportView:EnumToImageSourceConverter x:Key="EnumToImageSourceConverter" />
            <reportView:FileNameToMonikerConverter x:Key="FileNameToMonikerConverter" />
            <hotspots:HotspotTooltipConverter x:Key="HotspotTooltipConverter" />
            <commands:NavigateToRuleDescriptionCommandConverter x:Key="NavigateToRuleDescriptionCommandConverter" />
            <filters:IssueTypeFilterToTextConverter x:Key="IssueTypeFilterToTextConverter" />

            <wpf:BoolToVisibilityConverter x:Key="TrueToVisibleConverter" FalseValue="Collapsed" TrueValue="Visible" />
            <wpf:BoolToVisibilityConverter x:Key="TrueToCollapsedConverter" FalseValue="Visible" TrueValue="Collapsed" />
            <wpf:EnglishPluralizationConverter x:Key="EnglishPluralizationConverter" />
            <wpf:PascalCaseEnumToSpacedStringConverter x:Key="PascalCaseEnumToSpacedStringConverter" />

            <!-- Default ToggleButton template for Expander arrow -->
            <ControlTemplate x:Key="ExpanderToggleButton" TargetType="ToggleButton">
                <Grid Margin="10,0,0,0">
                    <Path x:Name="Arrow" Fill="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUITextKey}}"
                          Data="M 0 0 L 8 4 L 0 8 Z" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 8 0 L 4 6 Z" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--  Styles  -->
            <Style TargetType="TreeView">
                <Style.Setters>
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Background" Value="Transparent" />
                </Style.Setters>
            </Style>

            <Style TargetType="TreeViewItem">
                <Setter Property="IsExpanded" Value="True" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUITextKey}}" />
                <EventSetter Event="PreviewMouseUp" Handler="TreeViewItem_OnPreviewMouseUp" />
                <EventSetter Event="MouseDoubleClick" Handler="TreeViewItem_MouseDoubleClick" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TreeViewItem">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Name="Bd" Grid.ColumnSpan="2"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        SnapsToDevicePixels="true"
                                        Margin="{TemplateBinding Margin}">
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                        <ToggleButton x:Name="ExpanderArrow" Width="16" Height="16" Margin="2,0,2,0"
                                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                      Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TrueToVisibleConverter}}"
                                                      Template="{StaticResource ExpanderToggleButton}" Cursor="Hand" />
                                        <ContentPresenter x:Name="Header" ContentSource="Header" Margin="5,0,0,0"
                                                          VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                                <ItemsPresenter Grid.Row="1" Grid.Column="0" x:Name="ItemsHost" Margin="15,0,0,0" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemActiveTextBrushKey}}" />
                                    <Setter Property="Background"
                                            Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemActiveBrushKey}}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Foreground"
                                                Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemInactiveTextBrushKey}}" />
                                        <Setter Property="Background"
                                                Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemInactiveBrushKey}}" />
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                                <Trigger Property="IsExpanded" Value="False">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="IssueTextBlockStyle" TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style x:Key="GroupTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="FontSize"
                        Value="{DynamicResource {x:Static vsShell:VsFonts.Environment111PercentFontSizeKey}}" />
                <Setter Property="Margin" Value="2,0" />
            </Style>

            <Style x:Key="TypeTextBoxStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontStyle" Value="Italic" />
                <Setter Property="FontSize"
                        Value="{DynamicResource {x:Static vsShell:VsFonts.Environment90PercentFontSizeKey}}" />
                <Setter Property="Margin" Value="1,0" />
            </Style>

            <Style x:Key="ThemeAwareTextBlockStyle" TargetType="TextBlock"
                   BasedOn="{StaticResource {x:Type TextBlock}}">
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition
                                Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}"
                                Value="True" />
                            <Condition
                                Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelectionActive}"
                                Value="True" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemActiveTextBrushKey}}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="LocationTextBlockStyle" TargetType="TextBlock"
                   BasedOn="{StaticResource ThemeAwareTextBlockStyle}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontSize"
                        Value="{DynamicResource {x:Static vsShell:VsFonts.Environment90PercentFontSizeKey}}" />
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static vsShell:VsBrushes.InactiveCaptionTextKey}}" />
            </Style>

            <Style x:Key="IssueTypeTextBlockStyle" TargetType="TextBlock"
                   BasedOn="{StaticResource ThemeAwareTextBlockStyle}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontStyle" Value="Italic" />
                <Setter Property="FontSize"
                        Value="{DynamicResource {x:Static vsShell:VsFonts.Environment90PercentFontSizeKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.GrayTextKey}}" />
                <Setter Property="Margin" Value="2,1" />
            </Style>

            <Style x:Key="RuleKeyLinkStyle" TargetType="Hyperlink">
                <Setter Property="FontStyle" Value="Italic" />
                <Setter Property="FontSize"
                        Value="{DynamicResource {x:Static vsShell:VsFonts.Environment90PercentFontSizeKey}}" />
                <Setter Property="TextDecorations" Value="None" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="TextDecorations" Value="Underline" />
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition
                                Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}"
                                Value="True" />
                            <Condition
                                Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelectionActive}"
                                Value="True" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static vsTheming:TreeViewColors.SelectedItemActiveTextBrushKey}}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="DefaultButtonStyle" TargetType="Button">
                <Setter Property="Margin" Value="5, 3" />
                <Setter Property="Padding" Value="2,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUITextKey}}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static vsTheming:CommonControlsColors.ButtonBorderBrushKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static vsTheming:CommonControlsColors.ButtonHoverTextBrushKey}}" />
                                    <Setter Property="Background"
                                            Value="{DynamicResource {x:Static vsTheming:CommonControlsColors.ButtonHoverBrushKey}}" />
                                    <Setter Property="BorderBrush"
                                            Value="{DynamicResource {x:Static vsTheming:CommonControlsColors.ButtonBorderHoverBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FilterButtonStyle" TargetType="Button">
                <Setter Property="Margin" Value="5, 3" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUITextKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static vsShell:VsBrushes.AccentLightKey}}" />
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarHoverOverSelectedIconBorderKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsSelected}" Value="False">
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Background" Value="Transparent" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderThickness" Value="1" />
                        <Setter Property="Background"
                                Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarHoverKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="VulnerabilityOnlyTextBlockStyle" TargetType="TextBlock"
                   BasedOn="{StaticResource TypeTextBoxStyle}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                        <Setter Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ComboBox}"
                   BasedOn="{StaticResource {x:Static vsShell:VsResourceKeys.ComboBoxStyleKey}}" />

            <Style x:Key="SeverityImage" TargetType="Image">
                <Setter Property="Source">
                    <Setter.Value>
                        <MultiBinding
                            Converter="{StaticResource EnumToImageSourceConverter}" ConverterParameter="Severity">
                            <Binding Path="DisplaySeverity" />
                            <Binding RelativeSource="{RelativeSource Self}" />
                            <Binding Path="ResourceFinder"
                                     RelativeSource="{RelativeSource FindAncestor, AncestorType=UserControl}" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <StackPanel>
                            <TextBlock>
                                <Run Text="{x:Static res:Resources.DisplaySeverityTooltip}" />
                                <Run Text="{Binding DisplaySeverity, Mode=OneWay}" />
                            </TextBlock>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FilterSeparatorBorderStyle" TargetType="Border">
                <Setter Property="Height" Value="18" />
                <Setter Property="BorderThickness" Value="1,0,0,0" />
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUIBorderKey}}" />
            </Style>

            <Style x:Key="FilterTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsShell:VsBrushes.CaptionTextKey}}" />
            </Style>

            <Style x:Key="FilterComboboxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="MinWidth" Value="150" />
                <Setter Property="Margin" Value="5,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <!--  Control templates  -->
            <ControlTemplate x:Key="IssueTypeFilterControlTemplate" TargetType="ContentControl">
                <StackPanel Orientation="Horizontal">
                    <Border Style="{StaticResource FilterSeparatorBorderStyle}" />
                    <Button Style="{StaticResource FilterButtonStyle}" Click="IssueTypeFilterButton_OnClick">
                        <Button.Content>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Margin="2,0" VerticalAlignment="Center">
                                    <TextBlock.Text>
                                        <MultiBinding Converter="{StaticResource IssueTypeFilterToTextConverter}">
                                            <Binding Path="DataContext" RelativeSource="{RelativeSource Self}" />
                                            <Binding Path="ReportViewModel"
                                                     RelativeSource="{RelativeSource FindAncestor, AncestorType=UserControl}" />
                                            <!-- this is needed to make sure that the converter is triggered when the issues list changes -->
                                            <Binding Path="ReportViewModel.HasGroups"
                                                     RelativeSource="{RelativeSource FindAncestor, AncestorType=UserControl}" />
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </Grid>
                        </Button.Content>
                    </Button>
                </StackPanel>
            </ControlTemplate>

            <!--  Context menus  -->
            <ContextMenu x:Key="DependencyRiskContextMenu" Loaded="DependencyRiskContextMenu_OnLoaded">
                <MenuItem Header="{x:Static res:Resources.ChangeStatusMenuItem}"
                          Click="ChangeScaStatusMenuItem_OnClick"
                          IsEnabled="{Binding Path=SelectedItem.IsTransitionAllowed}"
                          Style="{StaticResource ChangeStatusMenuItemStyle}" />
                <MenuItem Click="ViewDependencyRiskInBrowser_OnClick"
                          Style="{StaticResource ViewIssueInBrowserMenuItemStyle}" />
            </ContextMenu>

            <ContextMenu x:Key="HotspotContextMenu"
                         Visibility="{Binding Path=ExistsOnServer, Converter={StaticResource TrueToVisibleConverter}}">
                <MenuItem Header="{x:Static res:Resources.ChangeStatusMenuItem}"
                          Click="ChangeHotspotStatusMenuItem_OnClick"
                          Style="{StaticResource ChangeStatusMenuItemStyle}" />
                <MenuItem Click="ViewHotspotInBrowser_OnClick"
                          Loaded="ShowMenuItemInBrowserMenuItem_OnLoaded"
                          Style="{StaticResource ViewIssueInBrowserMenuItemStyle}" />
            </ContextMenu>

            <ContextMenu x:Key="TaintContextMenu">
                <MenuItem Click="ViewTaintInBrowser_OnClick"
                          Loaded="ShowMenuItemInBrowserMenuItem_OnLoaded"
                          Style="{StaticResource ViewIssueInBrowserMenuItemStyle}" />
                <MenuItem Header="{x:Static res:Resources.ShowIssueVisualizationMenuItemHeader}"
                          Click="ShowIssueVisualizationForTaint_OnClick">
                    <MenuItem.Icon>
                        <imaging:CrispImage
                            Source="/SonarLint.VisualStudio.IssueVisualization.Security;component/SharedUI/sonarqube_for_ide_logo_16px.png" />
                    </MenuItem.Icon>
                </MenuItem>
            </ContextMenu>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Name="Table" Width="*" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Row="0" Background="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarGradientBeginKey}}"
              DataContext="{Binding Path=ReportViewFilter}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>


            <Grid Grid.Row="0" Grid.Column="0" Margin="5,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                    <ComboBox ItemsSource="{Binding Path=LocationFilters}"
                              SelectedItem="{Binding Path=SelectedLocationFilter}"
                              DisplayMemberPath="DisplayName" Margin="7,3" MinWidth="150" 
                              SelectionChanged="Control_OnFilterChanged"/>

                <Grid Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <ContentControl Grid.Column="0" DataContext="{Binding Path=IssueTypeFilters[0]}"
                                    Template="{StaticResource IssueTypeFilterControlTemplate}" />

                    <ContentControl Grid.Column="1" DataContext="{Binding Path=IssueTypeFilters[1]}"
                                    Template="{StaticResource IssueTypeFilterControlTemplate}" />

                    <ContentControl Grid.Column="2" DataContext="{Binding Path=IssueTypeFilters[2]}"
                                    Template="{StaticResource IssueTypeFilterControlTemplate}" />
                </Grid>

                <Grid Grid.Column="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Border Grid.Column="0" Style="{StaticResource FilterSeparatorBorderStyle}" />

                    <Button Grid.Column="1" Click="ShowAdvancedFilters_Click">
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource FilterButtonStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=ShowAdvancedFilters}" Value="False">
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="ToolTip"
                                                Value="{x:Static res:Resources.ShowAdvancedFiltersTooltip}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=ShowAdvancedFilters}" Value="True">
                                        <Setter Property="ToolTip"
                                                Value="{x:Static res:Resources.HideAdvancedFiltersTooltip}" />
                                    </DataTrigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderThickness" Value="1" />
                                        <Setter Property="Background"
                                                Value="{DynamicResource {x:Static vsShell:VsBrushes.CommandBarHoverKey}}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                        <Image Source="{StaticResource FilterDrawingImage}" />
                    </Button>
                </Grid>

            </Grid>

            <Grid Grid.Row="0" Grid.Column="1"
                  HorizontalAlignment="Right"
                  Visibility="{Binding ShowAdvancedFilters, Converter={StaticResource TrueToVisibleConverter}}"
                  Margin="10,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0"
                                   Text="{x:Static res:Resources.SeverityLabel}"
                                   Style="{StaticResource FilterTextBlockStyle}" />
                        <ComboBox Grid.Column="1"
                                  ItemsSource="{Binding SeverityFilters}"
                                  SelectedItem="{Binding SelectedSeverityFilter}"
                                  Style="{StaticResource FilterComboboxStyle}" 
                                  SelectionChanged="Control_OnFilterChanged"/>
                        <Border Grid.Column="2" Style="{StaticResource FilterSeparatorBorderStyle}" />
                    </Grid>

                <Grid Grid.Column="1" Margin="5,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                        <TextBlock Grid.Column="0"
                                   Text="{x:Static res:Resources.StatusLabel}"
                                   Style="{StaticResource FilterTextBlockStyle}" />
                        <ComboBox Grid.Column="1" ItemsSource="{Binding StatusFilters}"
                                  SelectedItem="{Binding SelectedStatusFilter}"
                                  Style="{StaticResource FilterComboboxStyle}" 
                                  SelectionChanged="Control_OnFilterChanged"/>
                        <Border Grid.Column="2" Style="{StaticResource FilterSeparatorBorderStyle}" />
                    </Grid>

                <Button Grid.Column="2" Content="{x:Static res:Resources.ClearAllButton}"
                        Style="{StaticResource DefaultButtonStyle}"
                        Padding="5,0" />

            </Grid>
        </Grid>

        <TreeView Grid.Row="1" Grid.Column="0" Margin="0,5"
                  ItemsSource="{Binding Path=FilteredGroupViewModels}"
                  SelectedItemChanged="TreeView_OnSelectedItemChanged"
                  VirtualizingStackPanel.IsVirtualizing="True"
                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                  ScrollViewer.CanContentScroll="True">
            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type dependencyRisks:GroupDependencyRiskViewModel}"
                                          ItemsSource="{Binding FilteredIssues}">
                    <Grid Cursor="Hand">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <imaging:CrispImage Grid.Column="0"
                                            VerticalAlignment="Bottom"
                                            Moniker="{x:Static vsimagecatalog:KnownMonikers.Solution}" />
                        <TextBlock Grid.Column="1" Text="{Binding Title}"
                                   Style="{StaticResource GroupTextBlockStyle}" />
                        <TextBlock Grid.Column="2" Margin="3,0,0,0"
                                   Text="{Binding Path=FilteredIssues.Count, Converter={StaticResource EnglishPluralizationConverter}, 
                                              ConverterParameter={x:Static res:Resources.IssueText}, StringFormat={}({0})}"
                                   Style="{StaticResource LocationTextBlockStyle}" />
                    </Grid>
                </HierarchicalDataTemplate>
                <HierarchicalDataTemplate DataType="{x:Type reportView:GroupFileViewModel}"
                                          ItemsSource="{Binding FilteredIssues}">
                    <Grid Cursor="Hand">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <imaging:CrispImage Grid.Column="0"
                                            VerticalAlignment="Bottom"
                                            Moniker="{Binding FilePath, Converter={StaticResource FileNameToMonikerConverter}}" />
                        <TextBlock Grid.Column="1" Text="{Binding Title}"
                                   Style="{StaticResource GroupTextBlockStyle}" />
                        <TextBlock Grid.Column="2" Margin="5,1,0,0"
                                   Text="{Binding Path=FilteredIssues.Count, Converter={StaticResource EnglishPluralizationConverter}, 
                                            ConverterParameter={x:Static res:Resources.IssueText}, StringFormat={}({0})}"
                                   Style="{StaticResource LocationTextBlockStyle}" />
                    </Grid>
                </HierarchicalDataTemplate>

                <!--Dependency Risks styling-->
                <DataTemplate DataType="{x:Type dependencyRisks:DependencyRiskViewModel}">
                    <Grid Margin="5,2" ContextMenu="{StaticResource DependencyRiskContextMenu}"
                          MouseRightButtonDown="TreeViewItem_OnMouseRightButtonDown">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Height="17" VerticalAlignment="Center"
                               Style="{StaticResource SeverityImage}" />
                        <TextBlock Grid.Column="1" Text="{Binding DependencyRisk.PackageName, StringFormat={}{0}:}"
                                   Margin="2,0,0,0"
                                   Style="{StaticResource IssueTextBlockStyle}" />
                        <TextBlock Grid.Column="2" Text="{Binding DependencyRisk.PackageVersion}" Margin="0,0,1,0"
                                   Style="{StaticResource IssueTextBlockStyle}" />

                        <Grid Grid.Column="3" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0"
                                       Style="{StaticResource TypeTextBoxStyle}">
                                <Run Text="(" />
                                <Run
                                    Text="{Binding DependencyRisk.Type, Converter={StaticResource PascalCaseEnumToSpacedStringConverter}, Mode=OneWay}" />
                                <Run Text=")" />
                            </TextBlock>
                            <TextBlock Grid.Column="1"
                                       Style="{StaticResource TypeTextBoxStyle}"
                                       Margin="2,0"
                                       FontStyle="Oblique">
                                <Run
                                    Text="{Binding DependencyRisk.Status, Converter={StaticResource PascalCaseEnumToSpacedStringConverter}, Mode=OneWay}" />
                            </TextBlock>
                            <TextBlock Grid.Column="2"
                                       DataContext="{Binding DependencyRisk.CvssScore, Mode=OneWay}"
                                       Text="-"
                                       Margin="4,0,3,0"
                                       Style="{StaticResource VulnerabilityOnlyTextBlockStyle}" />
                            <TextBlock Grid.Column="3"
                                       Margin="4,0,0,0"
                                       DataContext="{Binding DependencyRisk.CvssScore, Mode=OneWay}"
                                       Style="{StaticResource VulnerabilityOnlyTextBlockStyle}">
                                <Run Text="[" /><Run Text="{Binding ., Mode=OneWay}" /><Run Text="]" />
                            </TextBlock>
                            <TextBlock Grid.Column="5"
                                       Text="{Binding DependencyRisk.VulnerabilityId}"
                                       Style="{StaticResource VulnerabilityOnlyTextBlockStyle}" />
                            <TextBlock Grid.Column="4"
                                       Text="{Binding IssueType, Converter={StaticResource PascalCaseEnumToSpacedStringConverter}}"
                                       Margin="5,0,0,0"
                                       Style="{StaticResource IssueTypeTextBlockStyle}" />
                        </Grid>

                    </Grid>
                </DataTemplate>

                <!--Hotspots styling-->
                <DataTemplate DataType="{x:Type hotspots:HotspotViewModel}">
                    <Grid Margin="5,2"
                          ContextMenu="{StaticResource HotspotContextMenu}"
                          MouseRightButtonDown="TreeViewItem_OnMouseRightButtonDown"
                          ToolTip="{x:Static res:Resources.NavigateToHotspotTooltip}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Height="15" VerticalAlignment="Center">
                            <Image.Source>
                                <MultiBinding
                                    Converter="{StaticResource EnumToImageSourceConverter}"
                                    ConverterParameter="HotspotPriority">
                                    <Binding Path="LocalHotspot.Priority" />
                                    <Binding RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ResourceFinder"
                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=UserControl}" />
                                </MultiBinding>
                            </Image.Source>
                            <Image.ToolTip>
                                <MultiBinding Converter="{StaticResource HotspotTooltipConverter}">
                                    <Binding Path="LocalHotspot" />
                                    <Binding Path="DataContext.IsCloud"
                                             RelativeSource="{RelativeSource AncestorType=UserControl}" />
                                </MultiBinding>
                            </Image.ToolTip>
                        </Image>
                        <TextBlock Grid.Column="1"
                                   Margin="2,0,0,2"
                                   Style="{StaticResource LocationTextBlockStyle}">
                            <Run Text="{Binding Line, Mode=OneWay, StringFormat={}({0}\,}" />
                            <Run Text="{Binding Path=Column, Mode=OneWay, StringFormat={}{0})}" />
                        </TextBlock>
                        <TextBlock Grid.Column="2" Text="{Binding Title}" Margin="5,0,0,0"
                                   Style="{StaticResource IssueTextBlockStyle}" />
                        <TextBlock Grid.Column="3" Margin="5,0,0,0"
                                   Style="{StaticResource IssueTextBlockStyle}">
                            <Hyperlink Style="{StaticResource RuleKeyLinkStyle}"
                                       Command="{Binding DataContext.NavigateToRuleDescriptionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                <Hyperlink.CommandParameter>
                                    <MultiBinding
                                        Converter="{StaticResource NavigateToRuleDescriptionCommandConverter}">
                                        <Binding Path=".RuleInfo.RuleKey" />
                                        <Binding Path=".RuleInfo.IssueId" />
                                    </MultiBinding>
                                </Hyperlink.CommandParameter>
                                <TextBlock Text="{Binding RuleInfo.RuleKey}"
                                           Style="{StaticResource CellTextBlockStyle}" />
                            </Hyperlink>
                        </TextBlock>
                        <TextBlock Grid.Column="4"
                                   Text="{Binding IssueType, Converter={StaticResource PascalCaseEnumToSpacedStringConverter}}"
                                   Margin="5,0,0,0"
                                   Style="{StaticResource IssueTypeTextBlockStyle}" />
                    </Grid>
                </DataTemplate>

                <!--Taint styling-->
                <DataTemplate DataType="{x:Type taints:TaintViewModel}">
                    <Grid Margin="5,2"
                          ContextMenu="{StaticResource TaintContextMenu}"
                          MouseRightButtonDown="TreeViewItem_OnMouseRightButtonDown"
                          ToolTip="{x:Static res:Resources.NavigateToTaintTooltip}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" Height="17" VerticalAlignment="Center"
                               Style="{StaticResource SeverityImage}" />
                        <TextBlock Grid.Column="1"
                                   Margin="2,0,0,2"
                                   Style="{StaticResource LocationTextBlockStyle}">
                            <Run Text="{Binding Line, Mode=OneWay, StringFormat={}({0}\,}" />
                            <Run Text="{Binding Path=Column, Mode=OneWay, StringFormat={}{0})}" />
                        </TextBlock>
                        <TextBlock Grid.Column="2" Text="{Binding Title}" Margin="5,0,0,0"
                                   Style="{StaticResource IssueTextBlockStyle}" />
                        <TextBlock Grid.Column="3" Margin="5,0,0,0"
                                   Style="{StaticResource IssueTextBlockStyle}">
                            <Hyperlink Style="{StaticResource RuleKeyLinkStyle}"
                                       Command="{Binding DataContext.NavigateToRuleDescriptionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                                <Hyperlink.CommandParameter>
                                    <MultiBinding
                                        Converter="{StaticResource NavigateToRuleDescriptionCommandConverter}">
                                        <Binding Path=".RuleInfo.RuleKey" />
                                        <Binding Path=".RuleInfo.IssueId" />
                                    </MultiBinding>
                                </Hyperlink.CommandParameter>
                                <TextBlock Text="{Binding RuleInfo.RuleKey}"
                                           Style="{StaticResource CellTextBlockStyle}" />
                            </Hyperlink>
                        </TextBlock>
                        <TextBlock Grid.Column="4"
                                   Text="{Binding IssueType, Converter={StaticResource PascalCaseEnumToSpacedStringConverter}}"
                                   Margin="5,0,0,0"
                                   Style="{StaticResource IssueTypeTextBlockStyle}" />
                    </Grid>
                </DataTemplate>
            </TreeView.Resources>
        </TreeView>

        <Grid Grid.Row="1" Background="{DynamicResource {x:Static vsShell:VsBrushes.BrandedUIBackgroundKey}}"
              Panel.ZIndex="1000"
              Visibility="{Binding Path=HasGroups, Converter={StaticResource TrueToCollapsedConverter}}">
            <StackPanel VerticalAlignment="Center">
                <TextBlock Style="{StaticResource OverlayTitleTextStyle}"
                           Text="{x:Static res:Resources.NoFindingsToDisplayTitle}"
                           Margin="0,10" />
                <TextBlock Style="{StaticResource OverlayTextBlockStyle}">
                    <Run Text="{x:Static res:Resources.NoDependencyRiskFoundText}" /><Run Text=" (see " />
                    <Hyperlink NavigateUri="{x:Static core:DocumentationLinks.ConnectedModeUri}"
                               RequestNavigate="Hyperlink_OnRequestNavigate">
                        documentation
                    </Hyperlink>
                    <Run Text="). " />
                </TextBlock>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>