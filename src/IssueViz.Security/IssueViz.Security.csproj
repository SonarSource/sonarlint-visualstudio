<Project>

  <!-- The VSSDK targets need to be imported after the Net.Sdk targets which means we  have to import the
       .NET.Sdk targets using Import rather than specifying it as the Sdk in the Project element. -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Hack to prevent VS2017 from automatically attempting to upgrade the project -->
    <MinimumVisualStudioVersion>$(VisualStudioVersion)</MinimumVisualStudioVersion>
  </PropertyGroup>

  <!-- This project references the Microsoft.VisualStudio.Shell assembly which is VS-version specific -->
  <Import Project="..\SonarLint.VSSpecificAssemblies.props" />

  <PropertyGroup>
    <TargetFramework>net46</TargetFramework>
    <ProjectGuid>{8D0D5AF0-D5B7-41ED-9EC6-9E10C66B37E0}</ProjectGuid>
    <RootNamespace>SonarLint.VisualStudio.IssueVisualization.Security</RootNamespace>
    <AssemblyName>SonarLint.VisualStudio.IssueVisualization.Security</AssemblyName>
    <RequiresSigning>true</RequiresSigning>
    <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>

    <!-- Vsix -->
    <GeneratePkgDefFile>true</GeneratePkgDefFile>
    <CreateVsixContainer>false</CreateVsixContainer>
    <CopyVsixManifestToOutput>false</CopyVsixManifestToOutput>

  </PropertyGroup>

  <ItemGroup Label="Framework references">
    <Reference Include="System.ComponentModel.Composition" />
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="System.Windows.Presentation" />
    <Reference Include="System.Xaml" />
    <Reference Include="System.Drawing" />
    <Reference Include="WindowsBase" />
  </ItemGroup>

  <ItemGroup Label="Package references">
    <PackageReference Include="Microsoft.Owin" Version="4.1.1" />
    <PackageReference Include="Microsoft.Owin.Host.HttpListener" Version="4.1.1" />
    <PackageReference Include="Microsoft.VisualStudio.ComponentModelHost" Version="14.0.25424" />
    <PackageReference Include="Microsoft.VisualStudio.Language.Intellisense" Version="14.0.23205" />
    <PackageReference Include="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.34" />
    <PackageReference Include="Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime" Version="14.3.25407" />
  </ItemGroup>

  <ItemGroup Label="Project references">
    <ProjectReference Include="..\Core\Core.csproj" />
    <ProjectReference Include="..\IssueViz\IssueViz.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Page Include="Hotspots\HotspotsList\HotspotsControl.xaml">
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
      <Generator>XamlIntelliSenseFileGenerator</Generator>
    </Page>
    <Page Include="SharedUI\SharedResources.xaml">
      <Generator>XamlIntelliSenseFileGenerator</Generator>
    </Page>
    <Page Include="Taint\TaintList\TaintIssuesControl.xaml">
      <Generator>XamlIntelliSenseFileGenerator</Generator>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </Page>
    
    <Compile Update="OpenInIDE\OpenInIDEResources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>OpenInIDEResources.resx</DependentUpon>
    </Compile>

    <Compile Update="Resources.Designer.cs">
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
    </Compile>

    <Compile Update="Taint\TaintResources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>TaintResources.resx</DependentUpon>
    </Compile>

    <EmbeddedResource Update="OpenInIDE\OpenInIDEResources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>OpenInIDEResources.Designer.cs</LastGenOutput>
    </EmbeddedResource>

    <EmbeddedResource Update="Resources.resx">
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <Generator>ResXFileCodeGenerator</Generator>
    </EmbeddedResource>

    <EmbeddedResource Update="Taint\TaintResources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>TaintResources.Designer.cs</LastGenOutput>
    </EmbeddedResource>

    <VSCTCompile Include="Commands\IssueVizSecurityPackage.vsct">
      <ResourceName>Menus.ctmenu</ResourceName>
      <SubType>Designer</SubType>
    </VSCTCompile>
  
  </ItemGroup>

  <!--**********************************************************************-->
  <!-- Workarounds -->
  <!--**********************************************************************-->

  <!-- The OWIN assemblies aren't being included in the VSIX for some reason.	
       This workaround adds metadata to three artifacts so that the standard VSSDK targets will	
       include them.	
       NB the target is based on the one from Microsoft.VisualStudio.SDK.EmbedInteropTypes.
       We have a similar hack in Intergration.csproj -->
  <Target Name="HackIncludeOwinInVsix" AfterTargets="ResolveReferences" BeforeTargets="FindReferenceAssembliesForReferences">
    <ItemGroup>
      <ReferencePath Condition="'%(FileName)' == 'Microsoft.Owin' or '%(FileName)' == 'Microsoft.Owin.Host.HttpListener'">
        <CopyLocal>true</CopyLocal>
      </ReferencePath>
    </ItemGroup>

    <Message Importance="high" Text="In HackIncludeOwinInVsix" />
    <Message Importance="high" Text="Reference paths: @(ReferencePath)" />
  </Target>
  <!--**********************************************************************-->
  <!-- End of workarounds -->
  <!--**********************************************************************-->
  
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />

</Project>
