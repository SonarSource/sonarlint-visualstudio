//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SonarLint.VisualStudio.Integration.Vsix.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SonarLint.VisualStudio.Integration.Vsix.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string AddExclusionDialog_CancelButton {
            get {
                return ResourceManager.GetString("AddExclusionDialog_CancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter new exclusion pattern.
        /// </summary>
        public static string AddExclusionDialog_Description {
            get {
                return ResourceManager.GetString("AddExclusionDialog_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OK.
        /// </summary>
        public static string AddExclusionDialog_OkButton {
            get {
                return ResourceManager.GetString("AddExclusionDialog_OkButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add File Exclusion.
        /// </summary>
        public static string AddExclusionDialog_Title {
            get {
                return ResourceManager.GetString("AddExclusionDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Analysis] Error triggering analysis: {0}.
        /// </summary>
        public static string Analysis_ErrorTriggeringAnalysis {
            get {
                return ResourceManager.GetString("Analysis_ErrorTriggeringAnalysis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [Analysis] Unable to analyze: {0}.
        /// </summary>
        public static string Analysis_NotSupported {
            get {
                return ResourceManager.GetString("Analysis_NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connected mode detected..
        /// </summary>
        public static string AnalyzerManager_InConnectedMode {
            get {
                return ResourceManager.GetString("AnalyzerManager_InConnectedMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Standalone mode detected..
        /// </summary>
        public static string AnalyzerManager_InStandaloneMode {
            get {
                return ResourceManager.GetString("AnalyzerManager_InStandaloneMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manage Binding.
        /// </summary>
        public static string BindingButton_ConnectedText {
            get {
                return ResourceManager.GetString("BindingButton_ConnectedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bind to SonarQube (Server, Cloud)....
        /// </summary>
        public static string BindingButton_StandaloneText {
            get {
                return ResourceManager.GetString("BindingButton_StandaloneText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find tool window with the specified guid: {0}.
        /// </summary>
        public static string CannotFindToolWindow {
            get {
                return ResourceManager.GetString("CannotFindToolWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube Cloud settings.
        /// </summary>
        public static string CloudSettings {
            get {
                return ResourceManager.GetString("CloudSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube Cloud settings.
        /// </summary>
        public static string CloudSettings2 {
            get {
                return ResourceManager.GetString("CloudSettings2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No embedded plugins for connected mode found.
        /// </summary>
        public static string ConnectedModeEmbeddedPluginJarLocator_JarsNotFound {
            get {
                return ResourceManager.GetString("ConnectedModeEmbeddedPluginJarLocator_JarsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple embedded plugins for connected mode were found for the plugin key {0}.
        /// </summary>
        public static string ConnectedModeEmbeddedPluginJarLocator_MultipleJars {
            get {
                return ResourceManager.GetString("ConnectedModeEmbeddedPluginJarLocator_MultipleJars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished initializing the daemon package..
        /// </summary>
        public static string Daemon_InitializationComplete {
            get {
                return ResourceManager.GetString("Daemon_InitializationComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing the daemon package....
        /// </summary>
        public static string Daemon_Initializing {
            get {
                return ResourceManager.GetString("Daemon_Initializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file cannot be analyzed because the platform toolset has not been specified. Set the Platform Toolset property through the Visual Studio project property page..
        /// </summary>
        public static string Daemon_PlatformToolsetNotSpecified {
            get {
                return ResourceManager.GetString("Daemon_PlatformToolsetNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify exclusion pattern.
        /// </summary>
        public static string EditExclusionDialog_Description {
            get {
                return ResourceManager.GetString("EditExclusionDialog_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit File Exclusion.
        /// </summary>
        public static string EditExclusionDialog_Title {
            get {
                return ResourceManager.GetString("EditExclusionDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit Settings.
        /// </summary>
        public static string EditSettingsButtonText {
            get {
                return ResourceManager.GetString("EditSettingsButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error occurred initializing the daemon package: {0}.
        /// </summary>
        public static string ERROR_InitializingDaemon {
            get {
                return ResourceManager.GetString("ERROR_InitializingDaemon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ESlint bridge bundle not found at: {0}.
        /// </summary>
        public static string EsLintBridgeLocator_PathNotFound {
            get {
                return ResourceManager.GetString("EsLintBridgeLocator_PathNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add.
        /// </summary>
        public static string FileExclusions_AddButton {
            get {
                return ResourceManager.GetString("FileExclusions_AddButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern can not contain comma..
        /// </summary>
        public static string FileExclusions_CommaErrorMessage {
            get {
                return ResourceManager.GetString("FileExclusions_CommaErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete.
        /// </summary>
        public static string FileExclusions_DeleteButton {
            get {
                return ResourceManager.GetString("FileExclusions_DeleteButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit.
        /// </summary>
        public static string FileExclusions_EditButton {
            get {
                return ResourceManager.GetString("FileExclusions_EditButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern can not be empty..
        /// </summary>
        public static string FileExclusions_EmptyErrorMessage {
            get {
                return ResourceManager.GetString("FileExclusions_EmptyErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File exclusions:.
        /// </summary>
        public static string FileExclusions_ListTitle {
            get {
                return ResourceManager.GetString("FileExclusions_ListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure patterns to locally exclude files from your analysis when NOT in connected mode..
        /// </summary>
        public static string FileExclusionsPage_Description {
            get {
                return ResourceManager.GetString("FileExclusionsPage_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Examples of.
        /// </summary>
        public static string FileExclusionsPage_Examples {
            get {
                return ResourceManager.GetString("FileExclusionsPage_Examples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Org/Sonar/**, Class?.cs, **/*Interface.cs etc..
        /// </summary>
        public static string FileExclusionsPage_PatternExamples {
            get {
                return ResourceManager.GetString("FileExclusionsPage_PatternExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IDE is minimized. Restoring....
        /// </summary>
        public static string IDEWindowServer_IDEIsMinimized {
            get {
                return ResourceManager.GetString("IDEWindowServer_IDEIsMinimized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bringing IDE to front....
        /// </summary>
        public static string IDEWindowService_BringingToFront {
            get {
                return ResourceManager.GetString("IDEWindowService_BringingToFront", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error bringing IDE to front: {0}.
        /// </summary>
        public static string IDEWindowService_GeneralError {
            get {
                return ResourceManager.GetString("IDEWindowService_GeneralError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid window handle.
        /// </summary>
        public static string IDEWindowService_InvalidWindowHandle {
            get {
                return ResourceManager.GetString("IDEWindowService_InvalidWindowHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} call failed. Last error code: {1}.
        /// </summary>
        public static string IDEWindowService_WinAPICallFailed {
            get {
                return ResourceManager.GetString("IDEWindowService_WinAPICallFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified argument is of a valid type..
        /// </summary>
        public static string InvalidInfoBarInstance {
            get {
                return ResourceManager.GetString("InvalidInfoBarInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancelling the job &quot;{0}&quot; started at {1}.
        /// </summary>
        public static string JobRunner_CancellingJob {
            get {
                return ResourceManager.GetString("JobRunner_CancellingJob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error running job &quot;{0}&quot; started at {1}. Error message: {2}.
        /// </summary>
        public static string JobRunner_ExecutionError {
            get {
                return ResourceManager.GetString("JobRunner_ExecutionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished job &quot;{0}&quot; started at {1}. Elapsed time: {2}ms.
        /// </summary>
        public static string JobRunner_FinishedJob {
            get {
                return ResourceManager.GetString("JobRunner_FinishedJob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to re-analyzing {0} document(s)....
        /// </summary>
        public static string JobRunner_JobDescription_ReaanalyzeDocs {
            get {
                return ResourceManager.GetString("JobRunner_JobDescription_ReaanalyzeDocs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Starting job: &quot;{0}&quot;. Time: {1}.
        /// </summary>
        public static string JobRunner_StartingJob {
            get {
                return ResourceManager.GetString("JobRunner_StartingJob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube for Visual Studio provides its own JRE to launch SLCORE out of process. You can provide an explicit Java installation (17 or more recent) to be used instead.
        ///
        ///E.g. C:\Program Files\Java\jdk-17.
        /// </summary>
        public static string JreLocationDescriptionText {
            get {
                return ResourceManager.GetString("JreLocationDescriptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Java Home.
        /// </summary>
        public static string JreLocationLabel {
            get {
                return ResourceManager.GetString("JreLocationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connected: checking for notifications.
        /// </summary>
        public static string Notifications_Connected {
            get {
                return ResourceManager.GetString("Notifications_Connected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notifications: error occurred: {0}.
        /// </summary>
        public static string Notifications_ERROR {
            get {
                return ResourceManager.GetString("Notifications_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished initializing the notifications package.
        /// </summary>
        public static string Notifications_InitializationComplete {
            get {
                return ResourceManager.GetString("Notifications_InitializationComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing the notifications package....
        /// </summary>
        public static string Notifications_Initializing {
            get {
                return ResourceManager.GetString("Notifications_Initializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading notifications settings....
        /// </summary>
        public static string Notifications_LoadingSettings {
            get {
                return ResourceManager.GetString("Notifications_LoadingSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not connected: not checking for notifications.
        /// </summary>
        public static string Notifications_NotConnected {
            get {
                return ResourceManager.GetString("Notifications_NotConnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saving notifications settings....
        /// </summary>
        public static string Notifications_SavingSettings {
            get {
                return ResourceManager.GetString("Notifications_SavingSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open the per-user.
        /// </summary>
        public static string OpenPerUserText {
            get {
                return ResourceManager.GetString("OpenPerUserText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: The IDE must be restarted for this setting to be applied..
        /// </summary>
        public static string RestartIdeToApplyOptionLabel {
            get {
                return ResourceManager.GetString("RestartIdeToApplyOptionLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to in which rules can be activated/deactivated and files can be excluded from analysis..
        /// </summary>
        public static string SettingsFileDescriptionText {
            get {
                return ResourceManager.GetString("SettingsFileDescriptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: per-user settings are ignored for solutions using connected mode..
        /// </summary>
        public static string SettingsFileIgnoredText {
            get {
                return ResourceManager.GetString("SettingsFileIgnoredText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file will be created if it does not exist..
        /// </summary>
        public static string SettingsFileWillBeCreatedText {
            get {
                return ResourceManager.GetString("SettingsFileWillBeCreatedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show region selection for SonarQube Cloud (Early Access).
        /// </summary>
        public static string ShowRegionCheckbox {
            get {
                return ResourceManager.GetString("ShowRegionCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube for Visual Studio package: error occurred: {0}.
        /// </summary>
        public static string SL_ERROR {
            get {
                return ResourceManager.GetString("SL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finishing initializing the SonarQube for Visual Studio package.
        /// </summary>
        public static string SL_InitializationComplete {
            get {
                return ResourceManager.GetString("SL_InitializationComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing the SonarQube for Visual Studio package....
        /// </summary>
        public static string SL_Initializing {
            get {
                return ResourceManager.GetString("SL_Initializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to detect java installation provided in the settings &quot;{0}&quot;. Embedded JRE will be used..
        /// </summary>
        public static string SlCoreLocator_CustomJreLocationNotFound {
            get {
                return ResourceManager.GetString("SlCoreLocator_CustomJreLocationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using JRE location provided in the settings &quot;{0}&quot;.
        /// </summary>
        public static string SlCoreLocator_UsingCustomJreLocation {
            get {
                return ResourceManager.GetString("SlCoreLocator_UsingCustomJreLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string SolutionSettingsDialog_ApplyButton {
            get {
                return ResourceManager.GetString("SolutionSettingsDialog_ApplyButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close.
        /// </summary>
        public static string SolutionSettingsDialog_CloseButton {
            get {
                return ResourceManager.GetString("SolutionSettingsDialog_CloseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings configured for the {0} &quot;{1}&quot; will be saved locally in the.
        /// </summary>
        public static string SolutionSettingsDialog_Description {
            get {
                return ResourceManager.GetString("SolutionSettingsDialog_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analysis Properties.
        /// </summary>
        public static string SolutionSettingsDialog_TabAnalysisProperties {
            get {
                return ResourceManager.GetString("SolutionSettingsDialog_TabAnalysisProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Solution Settings.
        /// </summary>
        public static string SolutionSettingsDialog_Title {
            get {
                return ResourceManager.GetString("SolutionSettingsDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Telemetry: error occurred: {0}.
        /// </summary>
        public static string Telemetry_ERROR {
            get {
                return ResourceManager.GetString("Telemetry_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finished initializing the telemetry package....
        /// </summary>
        public static string Telemetry_InitializationComplete {
            get {
                return ResourceManager.GetString("Telemetry_InitializationComplete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing the telemetry package....
        /// </summary>
        public static string Telemetry_Initializing {
            get {
                return ResourceManager.GetString("Telemetry_Initializing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to calculate project guid of file {0}, error occurred: {1}.
        /// </summary>
        public static string TextBufferIssueTracker_ProjectGuidError {
            get {
                return ResourceManager.GetString("TextBufferIssueTracker_ProjectGuidError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening settings file &quot;{0}&quot;:
        ///  Error: {1}.
        /// </summary>
        public static string ToolsOptions_ErrorOpeningSettingsFile {
            get {
                return ResourceManager.GetString("ToolsOptions_ErrorOpeningSettingsFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;sonarlint_product&quot;: &quot;SonarQube for Visual Studio&quot;,
        ///  &quot;sonarlint_version&quot;: &quot;4.12.0.0&quot;,
        ///  &quot;ide_version&quot;: &quot;16.0.29123.89&quot;,
        ///  &quot;days_since_installation&quot;: 1,
        ///  &quot;days_of_use&quot;: 2,
        ///  &quot;connected_mode_used&quot;: false,
        ///  &quot;connected_mode_sonarcloud&quot;: false,
        ///  &quot;install_time&quot;: &quot;2019-08-05T10:03:25.923+00:00&quot;,
        ///  &quot;system_time&quot;: &quot;2019-08-06T11:31:00.142+01:00&quot;,
        ///  &quot;analyses&quot;: [
        ///    {
        ///      &quot;language&quot;: &quot;cs&quot;
        ///    },
        ///    {
        ///      &quot;language&quot;: &quot;js&quot;
        ///    },
        ///    {
        ///      &quot;language&quot;: &quot;cpp&quot;
        ///    },
        ///    {
        ///      &quot;langu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ToolsOptions_ExampleJson {
            get {
                return ResourceManager.GetString("ToolsOptions_ExampleJson", resourceCulture);
            }
        }
    }
}
